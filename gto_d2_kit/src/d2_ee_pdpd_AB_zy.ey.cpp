/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AB_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_12_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49149 = ae * be;
    const double C49148 = ae + be;
    const double C49147 = 0 * be;
    const double C49146 = yA - yB;
    const double C49166 = 0 * be;
    const double C49165 = zA - zB;
    const double C49196 = 0 * ae;
    const double C49191 = 0 * be;
    const double C49238 = 0 * ae;
    const double C49234 = 0 * be;
    const double C49273 = yP - yQ;
    const double C49272 = zP - zQ;
    const double C49271 = p + q;
    const double C49270 = p * q;
    const double C49282 = bs[4];
    const double C49280 = xP - xQ;
    const double C49287 = bs[5];
    const double C49294 = bs[6];
    const double C49302 = bs[7];
    const double C49319 = bs[3];
    const double C49741 = bs[2];
    const double C119 = bs[0];
    const double C50102 = xA - xB;
    const double C50127 = ce + de;
    const double C50126 = ce * de;
    const double C50125 = xC - xD;
    const double C50149 = yC - yD;
    const double C50165 = zC - zD;
    const double C49150 = std::pow(C49148, 2);
    const double C49192 = 2 * C49148;
    const double C49151 = C49149 * C49146;
    const double C49193 = C49146 * C49147;
    const double C50247 = std::pow(C49146, 2);
    const double C50298 = C49146 * be;
    const double C50297 = C49146 * ae;
    const double C49167 = C49149 * C49165;
    const double C49235 = C49165 * C49166;
    const double C50262 = std::pow(C49165, 2);
    const double C50326 = C49165 * be;
    const double C50325 = C49165 * ae;
    const double C49201 = C49196 / C49148;
    const double C49243 = C49238 / C49148;
    const double C49354 = C49273 * be;
    const double C49443 = std::pow(C49273, 2);
    const double C49275 = C49272 * C49273;
    const double C49313 = C49272 * ae;
    const double C49565 = std::pow(C49272, 2);
    const double C49274 = 2 * C49270;
    const double C49288 = std::pow(C49280, 2);
    const double C50105 = C50102 * be;
    const double C50104 = C50102 * ae;
    const double C50103 = std::pow(C50102, 2);
    const double C50129 = 2 * C50127;
    const double C50139 = std::pow(C50127, 2);
    const double C50131 = C50125 * de;
    const double C50130 = C50125 * ce;
    const double C50128 = std::pow(C50125, 2);
    const double C50150 = std::pow(C50149, 2);
    const double C50202 = C50149 * de;
    const double C50201 = C50149 * ce;
    const double C50166 = std::pow(C50165, 2);
    const double C50230 = C50165 * de;
    const double C50229 = C50165 * ce;
    const double C49152 = 2 * C49150;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (yP - yQ) * ae * be) /
                        C49150;
    const double C141 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (zP - zQ) * (yP - yQ) * ae * be) /
                        C49150;
    const double C50384 = 4 * C49150;
    const double C50113 = std::pow(C49192, -1);
    const double C50406 = std::pow(C49192, -2);
    const double C49198 = C49193 / C49148;
    const double C50248 = C50247 * C49149;
    const double C49240 = C49235 / C49148;
    const double C50263 = C50262 * C49149;
    const double C49356 = C49282 * C49354;
    const double C49359 = C49319 * C49354;
    const double C49364 = C49287 * C49354;
    const double C49370 = C49294 * C49354;
    const double C49381 = C49302 * C49354;
    const double C49277 = C49275 * ae;
    const double C49315 = C49282 * C49313;
    const double C49320 = C49319 * C49313;
    const double C49325 = C49287 * C49313;
    const double C49331 = C49294 * C49313;
    const double C49342 = C49302 * C49313;
    const double C49276 = C49274 / C49271;
    const double C126 = (-(bs[1] * C49354 * C49274) / C49271) / C49148;
    const double C127 = (-(bs[1] * C49313 * C49274) / C49271) / C49148;
    const double C120 = -(C49280 * bs[1] * C49274) / C49271;
    const double C290 = -(C49273 * bs[1] * C49274) / C49271;
    const double C455 = -(C49272 * bs[1] * C49274) / C49271;
    const double C50106 = C50103 * C49149;
    const double C50140 = std::pow(C50129, -1);
    const double C50393 = std::pow(C50129, -2);
    const double C50144 = 2 * C50139;
    const double C50391 = 4 * C50139;
    const double C50132 = C50128 * C50126;
    const double C50151 = C50150 * C50126;
    const double C50167 = C50166 * C50126;
    const double C49195 = C49147 / C49152;
    const double C49199 = C49191 / C49152;
    const double C49237 = C49166 / C49152;
    const double C49241 = C49234 / C49152;
    const double C49202 = 0 - C49198;
    const double C50249 = C50248 / C49148;
    const double C49244 = 0 - C49240;
    const double C50264 = C50263 / C49148;
    const double C49278 = C49277 * be;
    const double C49281 = std::pow(C49276, 4);
    const double C49286 = -C49276;
    const double C49293 = std::pow(C49276, 6);
    const double C49740 = std::pow(C49276, 2);
    const double C128 =
        (C49280 * std::pow(C49276, 2) * bs[2] * C49354) / C49148;
    const double C129 =
        (C49280 * std::pow(C49276, 2) * bs[2] * C49313) / C49148;
    const double C300 =
        (C49273 * std::pow(C49276, 2) * bs[2] * C49354) / C49148 -
        (be * bs[1] * C49274) / (C49271 * C49148);
    const double C301 =
        (C49273 * std::pow(C49276, 2) * bs[2] * C49313) / C49148;
    const double C50107 = C50106 / C49148;
    const double C50133 = C50132 / C50127;
    const double C50152 = C50151 / C50127;
    const double C50168 = C50167 / C50127;
    const double C49205 = C49202 * ae;
    const double C50250 = -C50249;
    const double C49247 = C49244 * ae;
    const double C50265 = -C50264;
    const double C49283 = C49282 * C49278;
    const double C49290 = C49287 * C49278;
    const double C49295 = C49294 * C49278;
    const double C49304 = C49302 * C49278;
    const double C142 =
        (std::pow(-C49276, 3) * bs[3] * C49278 +
         std::pow(C49276, 4) * bs[4] * C49278 * std::pow(xP - xQ, 2)) /
        C49150;
    const double C49316 = C49281 * C49315;
    const double C49357 = C49281 * C49356;
    const double C49396 = C49282 * C49281;
    const double C49289 = std::pow(C49286, 5);
    const double C49301 = std::pow(C49286, 7);
    const double C49318 = std::pow(C49286, 3);
    const double C320 = (be * std::pow(C49276, 2) * bs[2] * C49272 * ae +
                         C49273 * std::pow(C49286, 3) * bs[3] * C49278) /
                        C49150;
    const double C49333 = C49293 * C49331;
    const double C49372 = C49293 * C49370;
    const double C49423 = C49294 * C49293;
    const double C49742 = C49741 * C49740;
    const double C465 = (C49272 * C49740 * C49741 * C49354) / C49148;
    const double C466 = (C49272 * C49740 * C49741 * C49313) / C49148 -
                        (ae * bs[1] * C49274) / (C49271 * C49148);
    const double C50108 = -C50107;
    const double C50134 = -C50133;
    const double C50153 = -C50152;
    const double C50169 = -C50168;
    const double C49207 = C49205 / C49148;
    const double C50251 = std::exp(C50250);
    const double C49249 = C49247 / C49148;
    const double C50266 = std::exp(C50265);
    const double C49284 = C49281 * C49283;
    const double C49296 = C49293 * C49295;
    const double C49323 = C49280 * C49316;
    const double C49441 = be * C49316;
    const double C49440 = C49273 * C49316;
    const double C49885 = C49272 * C49316;
    const double C49362 = C49280 * C49357;
    const double C49405 = C49273 * C49357;
    const double C49563 = ae * C49357;
    const double C49562 = C49272 * C49357;
    const double C49411 = C49280 * C49396;
    const double C49464 = C49273 * C49396;
    const double C49463 = C49396 * be;
    const double C49748 = C49396 * C49288;
    const double C49834 = C49396 * C49443;
    const double C49888 = C49396 * C49565;
    const double C49929 = C49272 * C49396;
    const double C49928 = C49396 * ae;
    const double C49291 = C49289 * C49290;
    const double C49326 = C49289 * C49325;
    const double C49365 = C49289 * C49364;
    const double C49398 = C49287 * C49289;
    const double C49305 = C49301 * C49304;
    const double C49344 = C49301 * C49342;
    const double C49383 = C49301 * C49381;
    const double C49321 = C49318 * C49320;
    const double C49360 = C49318 * C49359;
    const double C49406 = C49319 * C49318;
    const double C485 = (ae * std::pow(C49276, 2) * bs[2] * C49273 * be +
                         C49272 * C49318 * C49319 * C49278) /
                        C49150;
    const double C49334 = C49333 * C49288;
    const double C49341 = C49280 * C49333;
    const double C49495 = C49333 * C49443;
    const double C49630 = be * C49333;
    const double C49629 = C49273 * C49333;
    const double C49992 = C49272 * C49333;
    const double C49373 = C49372 * C49288;
    const double C49380 = C49280 * C49372;
    const double C49523 = C49273 * C49372;
    const double C49602 = C49372 * C49565;
    const double C49699 = ae * C49372;
    const double C49698 = C49272 * C49372;
    const double C49425 = C49423 * C49288;
    const double C49540 = C49280 * C49423;
    const double C49654 = C49423 * C49443;
    const double C49653 = C49273 * C49423;
    const double C49652 = C49423 * be;
    const double C49996 = C49423 * C49565;
    const double C121 = C49742 * C49288 - (bs[1] * C49274) / C49271;
    const double C291 = C49273 * C49280 * C49742;
    const double C294 = C49742 * C49443 - (bs[1] * C49274) / C49271;
    const double C456 = C49272 * C49280 * C49742;
    const double C459 = C49742 * C49565 - (bs[1] * C49274) / C49271;
    const double C888 = C49272 * C49273 * C49742;
    const double C50109 = std::exp(C50108);
    const double C50135 = std::exp(C50134);
    const double C50154 = std::exp(C50153);
    const double C50170 = std::exp(C50169);
    const double C49209 = C49207 - C49199;
    const double C154 = C50251 * C142;
    const double C150 = C50251 * C141;
    const double C148 = C50251 * C128;
    const double C5437 = C50251 * C465;
    const double C49153 = C49151 * C50251;
    const double C117 = -(2 * ae * be * (yA - yB) * C50251) / (ae + be);
    const double C50299 = C50251 * C50297;
    const double C50302 = C50113 * C50251;
    const double C50410 = C50251 * C50298;
    const double C50405 = C50251 / C49192;
    const double C2284 = C50406 * C50251;
    const double C49251 = C49249 - C49241;
    const double C49168 = C49167 * C50266;
    const double C118 = -(2 * ae * be * (zA - zB) * C50266) / (ae + be);
    const double C50327 = C50266 * C50325;
    const double C50330 = C50113 * C50266;
    const double C50414 = C50266 * C50326;
    const double C50407 = C50266 / C49192;
    const double C5116 = C50406 * C50266;
    const double C143 = (2 * C49280 * C49284 +
                         C49280 * (C49284 + std::pow(-C49276, 5) * bs[5] *
                                                C49278 * std::pow(C49280, 2))) /
                        C49150;
    const double C321 =
        (be * C49280 * std::pow(C49286, 3) * bs[3] * C49272 * ae +
         C49273 * C49280 * C49284) /
        C49150;
    const double C486 = (ae * C49280 * C49318 * C49319 * C49273 * be +
                         C49272 * C49280 * C49284) /
                        C49150;
    const double C49297 = C49296 * C49288;
    const double C49300 = C49280 * C49296;
    const double C49494 = C49273 * C49296;
    const double C49601 = C49272 * C49296;
    const double C49412 = C49411 * be;
    const double C49752 = 2 * C49411;
    const double C49810 = C49273 * C49411;
    const double C49895 = C49272 * C49411;
    const double C49894 = C49411 * ae;
    const double C49466 = C49464 * be;
    const double C49858 = 2 * C49464;
    const double C49913 = C49272 * C49464;
    const double C49912 = C49464 * ae;
    const double C49934 = 2 * C49929;
    const double C49932 = C49929 * ae;
    const double C49401 = C49280 * C49291;
    const double C49442 = C49273 * C49291;
    const double C49564 = C49272 * C49291;
    const double C144 =
        (3 * (C49284 + C49291 * C49288) +
         C49280 * (2 * C49280 * C49291 +
                   C49280 * (C49291 +
                             std::pow(C49276, 6) * bs[6] * C49278 * C49288))) /
        C49150;
    const double C322 = (be * (std::pow(C49286, 3) * bs[3] * C49313 +
                               C49281 * C49282 * C49313 * C49288) +
                         C49273 * (C49284 + C49291 * C49288)) /
                        C49150;
    const double C325 = (C49280 * C49284 + be * C49273 * C49323 +
                         C49273 * (be * C49323 + C49273 * C49280 * C49291)) /
                        C49150;
    const double C487 =
        (ae * (C49318 * C49319 * C49354 + C49281 * C49282 * C49354 * C49288) +
         C49272 * (C49284 + C49291 * C49288)) /
        C49150;
    const double C490 = (C49280 * C49284 + ae * C49272 * C49362 +
                         C49272 * (ae * C49362 + C49272 * C49280 * C49291)) /
                        C49150;
    const double C904 =
        (ae * (C49273 * C49362 + C49280 * C49319 * C49318 * be) +
         C49272 * (be * C49323 + C49273 * C49280 * C49291)) /
        C49150;
    const double C49327 = C49326 * C49288;
    const double C49330 = C49280 * C49326;
    const double C49445 = C49326 * C49443;
    const double C49493 = be * C49326;
    const double C49492 = C49273 * C49326;
    const double C49927 = C49272 * C49326;
    const double C49366 = C49365 * C49288;
    const double C49369 = C49280 * C49365;
    const double C49462 = C49273 * C49365;
    const double C49567 = C49365 * C49565;
    const double C49600 = ae * C49365;
    const double C49599 = C49272 * C49365;
    const double C49416 = C49398 * C49288;
    const double C49422 = C49280 * C49398;
    const double C49526 = C49398 * C49443;
    const double C49525 = C49273 * C49398;
    const double C49524 = C49398 * be;
    const double C49930 = C49398 * C49565;
    const double C49994 = C49272 * C49398;
    const double C49993 = C49398 * ae;
    const double C49306 = C49305 * C49288;
    const double C49508 = C49280 * C49305;
    const double C49631 = C49273 * C49305;
    const double C49700 = C49272 * C49305;
    const double C49345 = C49344 * C49288;
    const double C49509 = C49280 * C49344;
    const double C49633 = C49344 * C49443;
    const double C49384 = C49383 * C49288;
    const double C49539 = C49280 * C49383;
    const double C49651 = C49273 * C49383;
    const double C49702 = C49383 * C49565;
    const double C324 = (C49318 * C49319 * C49278 + be * C49273 * C49321 +
                         C49273 * (be * C49321 + C49273 * C49284)) /
                        C49150;
    const double C1106 = (2 * (be * C49321 + C49273 * C49284) +
                          be * (C49321 + C49316 * std::pow(C49273, 2)) +
                          C49273 * (C49284 + be * C49273 * C49316 +
                                    C49273 * (be * C49316 + C49273 * C49291))) /
                         C49150;
    const double C131 =
        (std::pow(C49276, 2) * bs[2] * C49313 + C49321 * C49288) / C49148;
    const double C133 =
        (2 * C49280 * C49321 + C49280 * (C49321 + C49316 * C49288)) / C49148;
    const double C303 = (C49273 * C49280 * C49321) / C49148;
    const double C305 = (C49273 * (C49321 + C49316 * C49288)) / C49148;
    const double C309 = (C49740 * C49741 * C49313 + C49321 * C49443) / C49148;
    const double C311 = (C49280 * C49321 + C49323 * C49443) / C49148;
    const double C468 =
        (C49272 * C49280 * C49321 + C49280 * C49742 * ae) / C49148;
    const double C474 =
        (C49740 * C49741 * C49313 + C49272 * (C49272 * C49321 + C49742 * ae) +
         C49272 * C49742 * ae) /
        C49148;
    const double C894 =
        (C49272 * C49273 * C49321 + C49273 * C49742 * ae) / C49148;
    const double C1099 =
        (2 * C49273 * C49321 + C49273 * (C49321 + C49316 * C49443)) / C49148;
    const double C489 = (C49318 * C49319 * C49278 + ae * C49272 * C49360 +
                         C49272 * (ae * C49360 + C49272 * C49284)) /
                        C49150;
    const double C903 =
        (ae * (C49273 * C49360 + bs[2] * std::pow(C49276, 2) * be) +
         C49272 * (be * C49321 + C49273 * C49284)) /
        C49150;
    const double C1851 = (2 * (ae * C49360 + C49272 * C49284) +
                          ae * (C49360 + C49357 * std::pow(C49272, 2)) +
                          C49272 * (C49284 + ae * C49272 * C49357 +
                                    C49272 * (ae * C49357 + C49272 * C49291))) /
                         C49150;
    const double C130 =
        (std::pow(C49276, 2) * bs[2] * C49354 + C49360 * C49288) / C49148;
    const double C132 =
        (2 * C49280 * C49360 + C49280 * (C49360 + C49357 * C49288)) / C49148;
    const double C302 =
        (C49273 * C49280 * C49360 + C49280 * bs[2] * std::pow(C49276, 2) * be) /
        C49148;
    const double C308 =
        (C49740 * C49741 * C49354 + C49273 * (C49273 * C49360 + C49742 * be) +
         C49273 * C49742 * be) /
        C49148;
    const double C467 = (C49272 * C49280 * C49360) / C49148;
    const double C469 = (C49272 * (C49360 + C49357 * C49288)) / C49148;
    const double C473 = (C49740 * C49741 * C49354 + C49360 * C49565) / C49148;
    const double C475 = (C49280 * C49360 + C49362 * C49565) / C49148;
    const double C893 = (C49272 * (C49273 * C49360 + C49742 * be)) / C49148;
    const double C1843 =
        (2 * C49272 * C49360 + C49272 * (C49360 + C49357 * C49565)) / C49148;
    const double C49407 = C49406 * be;
    const double C49745 = C49280 * C49406;
    const double C49749 = C49406 + C49748;
    const double C49807 = C49273 * C49406;
    const double C49835 = C49406 + C49834;
    const double C49887 = C49272 * C49406;
    const double C49886 = C49406 * ae;
    const double C49890 = C49406 + C49888;
    const double C304 = (C49273 * (C49360 + C49357 * C49288) +
                         (bs[2] * std::pow(C49276, 2) + C49406 * C49288) * be) /
                        C49148;
    const double C470 = (C49272 * (C49321 + C49316 * C49288) +
                         (C49742 + C49406 * C49288) * ae) /
                        C49148;
    const double C1560 = (C49272 * (C49321 + C49316 * C49443) +
                          (C49742 + C49406 * C49443) * ae) /
                         C49148;
    const double C1844 =
        (2 * (C49272 * C49321 + C49742 * ae) +
         C49272 * (C49321 + C49272 * (C49272 * C49316 + C49406 * ae) +
                   C49272 * C49406 * ae) +
         (C49742 + C49406 * C49565) * ae) /
        C49148;
    const double C122 =
        2 * C49280 * C49742 + C49280 * (C49742 + C49406 * C49288);
    const double C292 = C49273 * (C49742 + C49406 * C49288);
    const double C457 = C49272 * (C49742 + C49406 * C49288);
    const double C1094 =
        2 * C49273 * C49742 + C49273 * (C49742 + C49406 * C49443);
    const double C1555 = C49272 * (C49742 + C49406 * C49443);
    const double C1839 =
        2 * C49272 * C49742 + C49272 * (C49742 + C49406 * C49565);
    const double C5439 = C50251 * C485;
    const double C49335 = C49326 + C49334;
    const double C49343 = 2 * C49341;
    const double C49451 = C49341 * C49443;
    const double C49507 = be * C49341;
    const double C49506 = C49273 * C49341;
    const double C49942 = C49272 * C49341;
    const double C49499 = C49326 + C49495;
    const double C49637 = 2 * C49629;
    const double C49635 = be * C49629;
    const double C49976 = C49272 * C49629;
    const double C49374 = C49365 + C49373;
    const double C49382 = 2 * C49380;
    const double C49471 = C49273 * C49380;
    const double C49573 = C49380 * C49565;
    const double C49614 = ae * C49380;
    const double C49613 = C49272 * C49380;
    const double C49606 = C49365 + C49602;
    const double C49706 = 2 * C49698;
    const double C49704 = ae * C49698;
    const double C49426 = C49398 + C49425;
    const double C49544 = C49540 * C49443;
    const double C49543 = C49273 * C49540;
    const double C49542 = C49540 * be;
    const double C49945 = C49540 * C49565;
    const double C49658 = C49398 + C49654;
    const double C49657 = C49653 * be;
    const double C49979 = C49653 * C49565;
    const double C50000 = C49398 + C49996;
    const double C50110 = C50109 * C50104;
    const double C50114 = C50113 * C50109;
    const double C50381 = C50109 * C50105;
    const double C50378 = C50109 / C49192;
    const double C16959 = C50406 * C50109;
    const double C50136 = C50135 * C50130;
    const double C50141 = C50140 * C50135;
    const double C50388 = C50135 * C50131;
    const double C50385 = C50135 / C50129;
    const double C1022 = C50393 * C50135;
    const double C50203 = C50154 * C50201;
    const double C50206 = C50140 * C50154;
    const double C50397 = C50154 * C50202;
    const double C50392 = C50154 / C50129;
    const double C287 = C50393 * C50154;
    const double C50231 = C50170 * C50229;
    const double C50234 = C50140 * C50170;
    const double C50401 = C50170 * C50230;
    const double C50394 = C50170 / C50129;
    const double C454 = C50393 * C50170;
    const double C49197 = C49153 / C49150;
    const double C49194 = 2 * C49153;
    const double C2289 = ((0 * ae) / C49148 - C49153 / C49150) / (2 * C49148) +
                         (0 * ae) / C49148;
    const double C7885 =
        ((C50251 - (C49146 * 2 * C49153) / C49148) * ae) / C49148 -
        C49147 / C49152;
    const double C7886 = (0 * ae) / C49148 - C49153 / C49150;
    const double C16960 =
        (-C49147 / C49148) / (2 * C49148) -
        ((C50251 - (C49146 * 2 * C49153) / C49148) * be) / C49148;
    const double C16961 =
        (-(2 * C49153) / C49148) / (2 * C49148) - (0 * be) / C49148;
    const double C153 = C117 * C121;
    const double C151 = C117 * C129;
    const double C149 = C117 * C120;
    const double C331 = C117 * C291;
    const double C496 = C117 * C456;
    const double C5442 = C117 * C459;
    const double C5440 = C117 * C466;
    const double C5438 = C117 * C455;
    const double C5975 = C117 * C888;
    const double C50412 = C50299 / C49152;
    const double C50411 = C50299 * C50298;
    const double C50408 = C50299 / C49148;
    const double C2283 = (2 * C50113 * C50299) / C49148;
    const double C2288 =
        (((C50251 - (C49146 * 2 * C49153) / C49148) * ae) / C49148 -
         C49147 / C49152) /
            (2 * C49148) +
        ((C49146 * ((0 * ae) / C49148 - C49153 / C49150) + C50302) * ae) /
            C49148;
    const double C50413 = C50302 * C50298;
    const double C19725 = C50302 / C50384;
    const double C24293 = C50302 / C49192;
    const double C50430 = C50410 / C49148;
    const double C2282 = (C50251 * std::pow(C50297, 2)) / C49150 + C50405;
    const double C49239 = C49168 / C49150;
    const double C49236 = 2 * C49168;
    const double C5119 = ((0 * ae) / C49148 - C49168 / C49150) / (2 * C49148) +
                         (0 * ae) / C49148;
    const double C10681 =
        ((C50266 - (C49165 * 2 * C49168) / C49148) * ae) / C49148 -
        C49166 / C49152;
    const double C10682 = (0 * ae) / C49148 - C49168 / C49150;
    const double C33285 =
        (-C49166 / C49148) / C49192 -
        ((C50266 - (C49165 * 2 * C49168) / C49148) * be) / C49148;
    const double C33286 = (-(2 * C49168) / C49148) / C49192 - (0 * be) / C49148;
    const double C50416 = C50327 / C49152;
    const double C50415 = C50327 * C50326;
    const double C50409 = C50327 / C49148;
    const double C5115 = (2 * C50113 * C50327) / C49148;
    const double C5118 =
        (((C50266 - (C49165 * 2 * C49168) / C49148) * ae) / C49148 -
         C49166 / C49152) /
            (2 * C49148) +
        ((C49165 * ((0 * ae) / C49148 - C49168 / C49150) + C50330) * ae) /
            C49148;
    const double C50417 = C50330 * C50326;
    const double C38614 = C50330 / C50384;
    const double C43931 = C50330 / C49192;
    const double C50433 = C50414 / C49148;
    const double C5114 = (C50266 * std::pow(C50325, 2)) / C49150 + C50407;
    const double C158 = C50251 * C143;
    const double C334 = C50251 * C321;
    const double C7894 = C50302 * C321;
    const double C16969 = C50302 * C321;
    const double C499 = C50251 * C486;
    const double C49298 = C49291 + C49297;
    const double C49303 = 2 * C49300;
    const double C49450 = C49273 * C49300;
    const double C49572 = C49272 * C49300;
    const double C49444 = C49441 + C49442;
    const double C49566 = C49563 + C49564;
    const double C163 = C50251 * C144;
    const double C338 = C50251 * C322;
    const double C7902 = C50302 * C322;
    const double C16977 = C50302 * C322;
    const double C345 = C50251 * C325;
    const double C2301 = C2284 * C325;
    const double C8091 = C50302 * C325;
    const double C17166 = C50302 * C325;
    const double C503 = C50251 * C487;
    const double C510 = C50251 * C490;
    const double C911 = C50251 * C904;
    const double C8269 = C50302 * C904;
    const double C17344 = C50302 * C904;
    const double C49328 = C49316 + C49327;
    const double C49332 = 2 * C49330;
    const double C49449 = be * C49330;
    const double C49448 = C49273 * C49330;
    const double C1107 = (2 * (be * C49323 + C49273 * C49401) +
                          be * (C49323 + C49330 * std::pow(C49273, 2)) +
                          C49273 * (C49401 + be * C49273 * C49330 +
                                    C49273 * (be * C49330 + C49273 * C49300))) /
                         C49150;
    const double C49893 = C49272 * C49330;
    const double C1101 =
        (2 * C49273 * C49323 + C49273 * (C49323 + C49330 * C49443)) / C49148;
    const double C49446 = C49316 + C49445;
    const double C49497 = C49493 + C49494;
    const double C49498 = 2 * C49492;
    const double C49496 = be * C49492;
    const double C49911 = C49272 * C49492;
    const double C49931 = C49927 + C49928;
    const double C49367 = C49357 + C49366;
    const double C49371 = 2 * C49369;
    const double C49410 = C49273 * C49369;
    const double C49571 = ae * C49369;
    const double C49570 = C49272 * C49369;
    const double C1852 = (2 * (ae * C49362 + C49272 * C49401) +
                          ae * (C49362 + C49369 * std::pow(C49272, 2)) +
                          C49272 * (C49401 + ae * C49272 * C49369 +
                                    C49272 * (ae * C49369 + C49272 * C49300))) /
                         C49150;
    const double C1845 =
        (2 * C49272 * C49362 + C49272 * (C49362 + C49369 * C49565)) / C49148;
    const double C49465 = C49462 + C49463;
    const double C49568 = C49357 + C49567;
    const double C49604 = C49600 + C49601;
    const double C49605 = 2 * C49599;
    const double C49603 = ae * C49599;
    const double C49417 = C49396 + C49416;
    const double C49424 = 2 * C49422;
    const double C49473 = C49273 * C49422;
    const double C49472 = C49422 * be;
    const double C49838 = C49422 * C49443;
    const double C49896 = C49422 * C49565;
    const double C49944 = C49272 * C49422;
    const double C49943 = C49422 * ae;
    const double C49529 = C49396 + C49526;
    const double C49528 = C49525 * be;
    const double C49655 = 2 * C49525;
    const double C49914 = C49525 * C49565;
    const double C49978 = C49272 * C49525;
    const double C49977 = C49525 * ae;
    const double C49527 = C49523 + C49524;
    const double C49933 = C49396 + C49930;
    const double C50001 = 2 * C49994;
    const double C49999 = C49994 * ae;
    const double C49998 = C49992 + C49993;
    const double C49307 = C49296 + C49306;
    const double C49511 = C49273 * C49508;
    const double C49615 = C49272 * C49508;
    const double C49636 = C49630 + C49631;
    const double C49705 = C49699 + C49700;
    const double C49346 = C49333 + C49345;
    const double C49513 = C49509 * C49443;
    const double C49638 = C49333 + C49633;
    const double C49385 = C49372 + C49384;
    const double C49541 = C49273 * C49539;
    const double C49616 = C49539 * C49565;
    const double C49656 = C49651 + C49652;
    const double C49707 = C49372 + C49702;
    const double C155 = C117 * C131;
    const double C159 = C117 * C133;
    const double C333 = C117 * C303;
    const double C337 = C117 * C305;
    const double C346 = C117 * C311;
    const double C498 = C117 * C468;
    const double C5444 = C117 * C474;
    const double C5977 = C117 * C894;
    const double C5443 = C50251 * C489;
    const double C5978 = C50251 * C903;
    const double C13784 = C50302 * C903;
    const double C21842 = C50302 * C903;
    const double C5452 = C50251 * C1851;
    const double C152 = C50251 * C130;
    const double C156 = C50251 * C132;
    const double C332 = C50251 * C302;
    const double C7890 = C50302 * C302;
    const double C16965 = C50302 * C302;
    const double C497 = C50251 * C467;
    const double C501 = C50251 * C469;
    const double C5441 = C50251 * C473;
    const double C508 = C50251 * C475;
    const double C5976 = C50251 * C893;
    const double C13780 = C50302 * C893;
    const double C21838 = C50302 * C893;
    const double C5450 = C50251 * C1843;
    const double C49408 = C49405 + C49407;
    const double C310 =
        (C49280 * C49360 + C49273 * (C49273 * C49362 + C49745 * be) +
         C49273 * C49745 * be) /
        C49148;
    const double C476 =
        (C49280 * C49321 + C49272 * (C49272 * C49323 + C49745 * ae) +
         C49272 * C49745 * ae) /
        C49148;
    const double C895 = (C49272 * (C49273 * C49362 + C49745 * be)) / C49148;
    const double C896 =
        (C49272 * C49273 * C49323 + C49273 * C49745 * ae) / C49148;
    const double C1562 = (C49272 * (C49323 + C49330 * C49443) +
                          (C49745 + C49411 * C49443) * ae) /
                         C49148;
    const double C1846 =
        (2 * (C49272 * C49323 + C49745 * ae) +
         C49272 * (C49323 + C49272 * (C49272 * C49330 + C49411 * ae) +
                   C49272 * C49411 * ae) +
         (C49745 + C49411 * C49565) * ae) /
        C49148;
    const double C295 = C49280 * C49742 + C49745 * C49443;
    const double C460 = C49280 * C49742 + C49745 * C49565;
    const double C889 = C49272 * C49273 * C49745;
    const double C1095 =
        2 * C49273 * C49745 + C49273 * (C49745 + C49411 * C49443);
    const double C1209 = C49273 * C49745 + C49810 * C49565;
    const double C1556 = C49272 * (C49745 + C49411 * C49443);
    const double C1840 =
        2 * C49272 * C49745 + C49272 * (C49745 + C49411 * C49565);
    const double C123 = 3 * (C49742 + C49406 * C49288) +
                        C49280 * (2 * C49745 + C49280 * C49749);
    const double C293 = C49273 * (2 * C49745 + C49280 * C49749);
    const double C296 = C49742 + C49406 * C49288 + C49749 * C49443;
    const double C458 = C49272 * (2 * C49745 + C49280 * C49749);
    const double C461 = C49742 + C49406 * C49288 + C49749 * C49565;
    const double C890 = C49272 * C49273 * C49749;
    const double C1213 =
        (C49273 * C49321 + C49272 * (C49272 * C49440 + C49807 * ae) +
         C49272 * C49807 * ae) /
        C49148;
    const double C4520 =
        (2 * (C49272 * C49440 + C49807 * ae) +
         C49272 * (C49440 + C49272 * (C49272 * C49492 + C49464 * ae) +
                   C49272 * C49464 * ae) +
         (C49807 + C49464 * C49565) * ae) /
        C49148;
    const double C1208 = C49273 * C49742 + C49807 * C49565;
    const double C4514 =
        2 * C49272 * C49807 + C49272 * (C49807 + C49464 * C49565);
    const double C2472 = 3 * (C49742 + C49406 * C49443) +
                         C49273 * (2 * C49807 + C49273 * C49835);
    const double C2654 = C49742 + C49406 * C49443 + C49835 * C49565;
    const double C3200 = C49272 * (2 * C49807 + C49273 * C49835);
    const double C49889 = C49885 + C49886;
    const double C5424 = 3 * (C49742 + C49406 * C49565) +
                         C49272 * (2 * C49887 + C49272 * C49890);
    const double C336 = C50251 * C304;
    const double C7898 = C50302 * C304;
    const double C16973 = C50302 * C304;
    const double C502 = C117 * C470;
    const double C6888 = C117 * C1560;
    const double C5451 = C117 * C1844;
    const double C157 = C117 * C122;
    const double C335 = C117 * C292;
    const double C500 = C117 * C457;
    const double C6886 = C117 * C1555;
    const double C5449 = C117 * C1839;
    const double C49336 = C49280 * C49335;
    const double C49340 = 3 * C49335;
    const double C49456 = be * C49335;
    const double C49455 = C49273 * C49335;
    const double C49901 = C49272 * C49335;
    const double C49453 = C49330 + C49451;
    const double C49512 = 2 * C49506;
    const double C49510 = be * C49506;
    const double C49919 = C49272 * C49506;
    const double C49502 = C49273 * C49499;
    const double C49632 = 3 * C49499;
    const double C49628 = be * C49499;
    const double C49968 = C49272 * C49499;
    const double C49639 = C49296 + C49635;
    const double C49375 = C49280 * C49374;
    const double C49379 = 3 * C49374;
    const double C49415 = C49273 * C49374;
    const double C49578 = ae * C49374;
    const double C49577 = C49272 * C49374;
    const double C49575 = C49369 + C49573;
    const double C49619 = 2 * C49613;
    const double C49617 = ae * C49613;
    const double C49609 = C49272 * C49606;
    const double C49701 = 3 * C49606;
    const double C49697 = ae * C49606;
    const double C49708 = C49296 + C49704;
    const double C49427 = C49280 * C49426;
    const double C49482 = C49273 * C49426;
    const double C49481 = C49426 * be;
    const double C49842 = C49426 * C49443;
    const double C49904 = C49426 * C49565;
    const double C49547 = C49422 + C49544;
    const double C49546 = C49543 * be;
    const double C49922 = C49543 * C49565;
    const double C49948 = C49422 + C49945;
    const double C49661 = C49273 * C49658;
    const double C49660 = C49658 * be;
    const double C49971 = C49658 * C49565;
    const double C49982 = C49525 + C49979;
    const double C50003 = C49272 * C50000;
    const double C50382 = C50110 / C49152;
    const double C50380 = C50110 / C49148;
    const double C50379 = C50110 * C50105;
    const double C16958 = (2 * C50113 * C50110) / C49148;
    const double C50383 = C50114 * C50105;
    const double C110 = C50114 / C50384;
    const double C7884 = C50114 / C49192;
    const double C50419 = C50381 / C49148;
    const double C16957 = (C50109 * std::pow(C50104, 2)) / C49150 + C50378;
    const double C50389 = C50136 / C50144;
    const double C50387 = C50136 / C50127;
    const double C50386 = C50136 * C50131;
    const double C1021 = (2 * C50140 * C50136) / C50127;
    const double C50390 = C50141 * C50131;
    const double C116 = C50141 / C50391;
    const double C621 = C50141 / C50129;
    const double C50422 = C50388 / C50127;
    const double C1020 = (C50135 * std::pow(C50130, 2)) / C50139 + C50385;
    const double C50399 = C50203 / C50144;
    const double C50398 = C50203 * C50202;
    const double C50395 = C50203 / C50127;
    const double C286 = (2 * C50140 * C50203) / C50127;
    const double C50400 = C50206 * C50202;
    const double C1092 = C50206 / C50391;
    const double C1324 = C50206 / C50129;
    const double C50424 = C50397 / C50127;
    const double C285 = (C50154 * std::pow(C50201, 2)) / C50139 + C50392;
    const double C50403 = C50231 / C50144;
    const double C50402 = C50231 * C50230;
    const double C50396 = C50231 / C50127;
    const double C453 = (2 * C50140 * C50231) / C50127;
    const double C50404 = C50234 * C50230;
    const double C1838 = C50234 / C50391;
    const double C2085 = C50234 / C50129;
    const double C50427 = C50401 / C50127;
    const double C452 = (C50170 * std::pow(C50229, 2)) / C50139 + C50394;
    const double C49204 = C49201 - C49197;
    const double C49200 = C49146 * C49194;
    const double C2302 = C2289 * C311;
    const double C36247 = C2289 * C1560;
    const double C36241 = C2289 * C1555;
    const double C7908 = C7885 * C133;
    const double C7904 = C7885 * C122;
    const double C7901 = C7885 * C131;
    const double C7897 = C7885 * C121;
    const double C7893 = C7885 * C129;
    const double C7889 = C7885 * C120;
    const double C8105 = C7885 * C311;
    const double C8096 = C7885 * C305;
    const double C8092 = C7885 * C292;
    const double C8088 = C7885 * C303;
    const double C8084 = C7885 * C291;
    const double C8274 = C7885 * C470;
    const double C8270 = C7885 * C457;
    const double C8266 = C7885 * C468;
    const double C8262 = C7885 * C456;
    const double C13794 = C7885 * C474;
    const double C13790 = C7885 * C459;
    const double C13783 = C7885 * C466;
    const double C13779 = C7885 * C455;
    const double C14482 = C7885 * C894;
    const double C14478 = C7885 * C888;
    const double C15683 = C7885 * C1560;
    const double C15679 = C7885 * C1555;
    const double C16209 = C7885 * C1844;
    const double C16205 = C7885 * C1839;
    const double C7903 = C7886 * C305;
    const double C7899 = C7886 * C292;
    const double C7895 = C7886 * C303;
    const double C7891 = C7886 * C291;
    const double C8090 = C7886 * C311;
    const double C13785 = C7886 * C894;
    const double C13781 = C7886 * C888;
    const double C14484 = C7886 * C1560;
    const double C14480 = C7886 * C1555;
    const double C16983 = C16960 * C133;
    const double C16979 = C16960 * C122;
    const double C16976 = C16960 * C131;
    const double C16972 = C16960 * C121;
    const double C16968 = C16960 * C129;
    const double C16964 = C16960 * C120;
    const double C17180 = C16960 * C311;
    const double C17171 = C16960 * C305;
    const double C17167 = C16960 * C292;
    const double C17163 = C16960 * C303;
    const double C17159 = C16960 * C291;
    const double C17349 = C16960 * C470;
    const double C17345 = C16960 * C457;
    const double C17341 = C16960 * C468;
    const double C17337 = C16960 * C456;
    const double C21856 = C16960 * C1844;
    const double C21852 = C16960 * C1839;
    const double C21849 = C16960 * C474;
    const double C21845 = C16960 * C459;
    const double C21841 = C16960 * C466;
    const double C21837 = C16960 * C455;
    const double C22370 = C16960 * C894;
    const double C22366 = C16960 * C888;
    const double C23289 = C16960 * C1560;
    const double C23285 = C16960 * C1555;
    const double C16978 = C16961 * C305;
    const double C16974 = C16961 * C292;
    const double C16970 = C16961 * C303;
    const double C16966 = C16961 * C291;
    const double C17165 = C16961 * C311;
    const double C21843 = C16961 * C894;
    const double C21839 = C16961 * C888;
    const double C22372 = C16961 * C1560;
    const double C22368 = C16961 * C1555;
    const double C50431 = C50411 / C49150;
    const double C7916 = C50408 * C144;
    const double C7909 = C50408 * C143;
    const double C7905 = C50408 * C132;
    const double C7900 = C50408 * C142;
    const double C7896 = C50408 * C130;
    const double C7892 = C50408 * C141;
    const double C7888 = C50408 * C128;
    const double C8104 = C50408 * C325;
    const double C8097 = C50408 * C322;
    const double C8093 = C50408 * C304;
    const double C8089 = C50408 * C321;
    const double C8085 = C50408 * C302;
    const double C8282 = C50408 * C490;
    const double C8278 = C50408 * C475;
    const double C8275 = C50408 * C487;
    const double C8271 = C50408 * C469;
    const double C8267 = C50408 * C486;
    const double C8263 = C50408 * C467;
    const double C8818 = C50408 * C904;
    const double C13795 = C50408 * C489;
    const double C13791 = C50408 * C473;
    const double C13782 = C50408 * C485;
    const double C13778 = C50408 * C465;
    const double C14483 = C50408 * C903;
    const double C14479 = C50408 * C893;
    const double C16208 = C50408 * C1851;
    const double C16204 = C50408 * C1843;
    const double C2287 =
        (((0 - (C49146 * C49147) / C49148) * ae) / C49148 - (0 * be) / C49152) /
            (2 * C49148) +
        ((C49146 * (((C50251 - (C49146 * 2 * C49153) / C49148) * ae) / C49148 -
                    C49147 / C49152) +
          C50408) *
         ae) /
            C49148 +
        (0 * ae) / C49148 - C49153 / C49150;
    const double C2312 = C2283 * C322;
    const double C2306 = C2283 * C304;
    const double C2299 = C2283 * C321;
    const double C2293 = C2283 * C302;
    const double C2494 = C2283 * C325;
    const double C2676 = C2283 * C904;
    const double C36244 = C2283 * C903;
    const double C36238 = C2283 * C893;
    const double C2311 = C2288 * C305;
    const double C2305 = C2288 * C292;
    const double C2300 = C2288 * C303;
    const double C2294 = C2288 * C291;
    const double C2493 = C2288 * C311;
    const double C36245 = C2288 * C894;
    const double C36239 = C2288 * C888;
    const double C36754 = C2288 * C1560;
    const double C36748 = C2288 * C1555;
    const double C50432 = C50413 / C49148;
    const double C24310 = C24293 * C325;
    const double C16955 = -C50430;
    const double C2321 = C2282 * C143;
    const double C2315 = C2282 * C132;
    const double C2310 = C2282 * C142;
    const double C2304 = C2282 * C130;
    const double C2297 = C2282 * C141;
    const double C2291 = C2282 * C128;
    const double C2503 = C2282 * C325;
    const double C2492 = C2282 * C321;
    const double C2486 = C2282 * C302;
    const double C2685 = C2282 * C490;
    const double C2679 = C2282 * C475;
    const double C2674 = C2282 * C486;
    const double C2668 = C2282 * C467;
    const double C2843 = C2282 * C322;
    const double C2837 = C2282 * C304;
    const double C3001 = C2282 * C487;
    const double C2995 = C2282 * C469;
    const double C3219 = C2282 * C904;
    const double C36255 = C2282 * C489;
    const double C36249 = C2282 * C473;
    const double C36242 = C2282 * C485;
    const double C36236 = C2282 * C465;
    const double C36753 = C2282 * C903;
    const double C36747 = C2282 * C893;
    const double C38054 = C2282 * C1851;
    const double C38048 = C2282 * C1843;
    const double C49246 = C49243 - C49239;
    const double C49242 = C49165 * C49236;
    const double C50434 = C50415 / C49150;
    const double C5117 =
        (((0 - (C49165 * C49166) / C49148) * ae) / C49148 - (0 * be) / C49152) /
            (2 * C49148) +
        ((C49165 * (((C50266 - (C49165 * 2 * C49168) / C49148) * ae) / C49148 -
                    C49166 / C49152) +
          C50409) *
         ae) /
            C49148 +
        (0 * ae) / C49148 - C49168 / C49150;
    const double C50435 = C50417 / C49148;
    const double C33283 = -C50433;
    const double C145 =
        (4 * (2 * C49280 * C49291 + C49280 * C49298) +
         C49280 * (3 * C49298 +
                   C49280 * (2 * C49280 * C49296 +
                             C49280 * (C49296 + std::pow(C49286, 7) * bs[7] *
                                                    C49278 * C49288)))) /
        C49150;
    const double C323 =
        (be * (2 * C49280 * C49316 +
               C49280 * (C49316 + C49289 * C49287 * C49313 * C49288)) +
         C49273 * (2 * C49280 * C49291 + C49280 * C49298)) /
        C49150;
    const double C488 =
        (ae * (2 * C49280 * C49357 +
               C49280 * (C49357 + C49289 * C49287 * C49354 * C49288)) +
         C49272 * (2 * C49280 * C49291 + C49280 * C49298)) /
        C49150;
    const double C326 = (C49284 + C49291 * C49288 + be * C49273 * C49328 +
                         C49273 * (be * C49328 + C49273 * C49298)) /
                        C49150;
    const double C135 = (3 * (C49321 + C49316 * C49288) +
                         C49280 * (2 * C49323 + C49280 * C49328)) /
                        C49148;
    const double C307 = (C49273 * (2 * C49323 + C49280 * C49328)) / C49148;
    const double C313 = (C49321 + C49316 * C49288 + C49328 * C49443) / C49148;
    const double C472 = (C49272 * (2 * C49323 + C49280 * C49328) +
                         (2 * C49745 + C49280 * C49749) * ae) /
                        C49148;
    const double C478 =
        (C49321 + C49316 * C49288 + C49272 * (C49272 * C49328 + C49749 * ae) +
         C49272 * C49749 * ae) /
        C49148;
    const double C898 =
        (C49272 * C49273 * C49328 + C49273 * C49749 * ae) / C49148;
    const double C1103 =
        (2 * C49273 * C49328 + C49273 * (C49328 + C49335 * C49443)) / C49148;
    const double C49452 = C49449 + C49450;
    const double C1215 =
        (C49273 * C49323 + C49272 * (C49272 * C49448 + C49810 * ae) +
         C49272 * C49810 * ae) /
        C49148;
    const double C2505 = C2283 * C1107;
    const double C2496 = C2284 * C1107;
    const double C8106 = C50302 * C1107;
    const double C17181 = C50302 * C1107;
    const double C24493 = C24293 * C1107;
    const double C49897 = C49893 + C49894;
    const double C2506 = C2288 * C1101;
    const double C2495 = C2289 * C1101;
    const double C8107 = C7886 * C1101;
    const double C17182 = C16961 * C1101;
    const double C2481 =
        (3 * (C49284 + be * C49440 + C49273 * C49444) +
         be * (2 * C49440 + C49273 * C49446) +
         C49273 * (2 * C49444 + be * C49446 +
                   C49273 * (C49291 + be * C49273 * C49326 +
                             C49273 * (be * C49326 + C49273 * C49296)))) /
        C49150;
    const double C2476 = (3 * (C49321 + C49316 * C49443) +
                          C49273 * (2 * C49440 + C49273 * C49446)) /
                         C49148;
    const double C2658 =
        (C49321 + C49316 * C49443 + C49272 * (C49272 * C49446 + C49835 * ae) +
         C49272 * C49835 * ae) /
        C49148;
    const double C3204 = (C49272 * (2 * C49440 + C49273 * C49446) +
                          (2 * C49807 + C49273 * C49835) * ae) /
                         C49148;
    const double C49501 = C49273 * C49497;
    const double C49587 = C49272 * C49497;
    const double C49627 = 2 * C49497;
    const double C49500 = C49291 + C49496;
    const double C49915 = C49911 + C49912;
    const double C49935 = C49272 * C49931;
    const double C49991 = 2 * C49931;
    const double C491 = (C49284 + C49291 * C49288 + ae * C49272 * C49367 +
                         C49272 * (ae * C49367 + C49272 * C49298)) /
                        C49150;
    const double C905 =
        (ae * (C49273 * C49367 +
               (C49319 * C49318 + C49282 * C49281 * C49288) * be) +
         C49272 * (be * C49328 + C49273 * C49298)) /
        C49150;
    const double C134 = (3 * (C49360 + C49357 * C49288) +
                         C49280 * (2 * C49362 + C49280 * C49367)) /
                        C49148;
    const double C306 =
        (C49273 * (2 * C49362 + C49280 * C49367) +
         (2 * C49280 * C49406 + C49280 * (C49406 + C49396 * C49288)) * be) /
        C49148;
    const double C312 =
        (C49360 + C49357 * C49288 + C49273 * (C49273 * C49367 + C49749 * be) +
         C49273 * C49749 * be) /
        C49148;
    const double C471 = (C49272 * (2 * C49362 + C49280 * C49367)) / C49148;
    const double C477 = (C49360 + C49357 * C49288 + C49367 * C49565) / C49148;
    const double C897 = (C49272 * (C49273 * C49367 + C49749 * be)) / C49148;
    const double C1847 =
        (2 * C49272 * C49367 + C49272 * (C49367 + C49374 * C49565)) / C49148;
    const double C49413 = C49410 + C49412;
    const double C49574 = C49571 + C49572;
    const double C5460 = C50251 * C1852;
    const double C13814 = C50408 * C1852;
    const double C5458 = C50251 * C1845;
    const double C13810 = C50408 * C1845;
    const double C49467 = C49273 * C49465;
    const double C49522 = 2 * C49465;
    const double C49586 = ae * C49465;
    const double C49585 = C49272 * C49465;
    const double C5433 =
        (3 * (C49284 + ae * C49562 + C49272 * C49566) +
         ae * (2 * C49562 + C49272 * C49568) +
         C49272 * (2 * C49566 + ae * C49568 +
                   C49272 * (C49291 + ae * C49272 * C49365 +
                             C49272 * (ae * C49365 + C49272 * C49296)))) /
        C49150;
    const double C5427 = (3 * (C49360 + C49357 * C49565) +
                          C49272 * (2 * C49562 + C49272 * C49568)) /
                         C49148;
    const double C49608 = C49272 * C49604;
    const double C49696 = 2 * C49604;
    const double C49607 = C49291 + C49603;
    const double C49418 = C49417 * be;
    const double C49753 = C49280 * C49417;
    const double C49759 = 3 * C49417;
    const double C49813 = C49273 * C49417;
    const double C49903 = C49272 * C49417;
    const double C49902 = C49417 * ae;
    const double C1564 = (C49272 * (C49328 + C49335 * C49443) +
                          (C49749 + C49417 * C49443) * ae) /
                         C49148;
    const double C1848 =
        (2 * (C49272 * C49328 + C49749 * ae) +
         C49272 * (C49328 + C49272 * (C49272 * C49335 + C49417 * ae) +
                   C49272 * C49417 * ae) +
         (C49749 + C49417 * C49565) * ae) /
        C49148;
    const double C1096 =
        2 * C49273 * C49749 + C49273 * (C49749 + C49417 * C49443);
    const double C1557 = C49272 * (C49749 + C49417 * C49443);
    const double C1841 =
        2 * C49272 * C49749 + C49272 * (C49749 + C49417 * C49565);
    const double C49475 = C49473 * be;
    const double C49863 = 2 * C49473;
    const double C49921 = C49272 * C49473;
    const double C49920 = C49473 * ae;
    const double C4524 =
        (2 * (C49272 * C49448 + C49810 * ae) +
         C49272 * (C49448 + C49272 * (C49272 * C49506 + C49473 * ae) +
                   C49272 * C49473 * ae) +
         (C49810 + C49473 * C49565) * ae) /
        C49148;
    const double C4516 =
        2 * C49272 * C49810 + C49272 * (C49810 + C49473 * C49565);
    const double C49474 = C49471 + C49472;
    const double C49839 = C49411 + C49838;
    const double C49898 = C49411 + C49896;
    const double C49949 = 2 * C49944;
    const double C49947 = C49944 * ae;
    const double C49946 = C49942 + C49943;
    const double C49531 = C49529 * be;
    const double C49859 = C49273 * C49529;
    const double C49956 = 3 * C49529;
    const double C49970 = C49272 * C49529;
    const double C49969 = C49529 * ae;
    const double C4521 =
        (2 * (C49272 * C49446 + C49835 * ae) +
         C49272 * (C49446 + C49272 * (C49272 * C49499 + C49529 * ae) +
                   C49272 * C49529 * ae) +
         (C49835 + C49529 * C49565) * ae) /
        C49148;
    const double C4515 =
        2 * C49272 * C49835 + C49272 * (C49835 + C49529 * C49565);
    const double C49916 = C49464 + C49914;
    const double C49983 = 2 * C49978;
    const double C49981 = C49978 * ae;
    const double C49980 = C49976 + C49977;
    const double C49530 = C49273 * C49527;
    const double C49588 = C49527 * C49565;
    const double C49650 = 2 * C49527;
    const double C49683 = ae * C49527;
    const double C49682 = C49272 * C49527;
    const double C49936 = C49272 * C49933;
    const double C49997 = 3 * C49933;
    const double C49995 = C49933 * ae;
    const double C50002 = C49272 * C49998;
    const double C49308 = C49280 * C49307;
    const double C49457 = C49273 * C49307;
    const double C49579 = C49272 * C49307;
    const double C1108 = (2 * (be * C49328 + C49273 * C49298) +
                          be * (C49328 + C49335 * std::pow(C49273, 2)) +
                          C49273 * (C49298 + be * C49273 * C49335 +
                                    C49273 * (be * C49335 + C49273 * C49307))) /
                         C49150;
    const double C1853 = (2 * (ae * C49367 + C49272 * C49298) +
                          ae * (C49367 + C49374 * std::pow(C49272, 2)) +
                          C49272 * (C49298 + ae * C49272 * C49374 +
                                    C49272 * (ae * C49374 + C49272 * C49307))) /
                         C49150;
    const double C49515 = C49507 + C49511;
    const double C49618 = C49614 + C49615;
    const double C49640 = C49273 * C49636;
    const double C49684 = C49272 * C49636;
    const double C49709 = C49272 * C49705;
    const double C49347 = C49280 * C49346;
    const double C49458 = C49346 * C49443;
    const double C49516 = C49341 + C49513;
    const double C49641 = C49273 * C49638;
    const double C49386 = C49280 * C49385;
    const double C49480 = C49273 * C49385;
    const double C49580 = C49385 * C49565;
    const double C49545 = C49541 + C49542;
    const double C49620 = C49380 + C49616;
    const double C49659 = C49273 * C49656;
    const double C49685 = C49656 * C49565;
    const double C49710 = C49272 * C49707;
    const double C169 = C154 - C155;
    const double C173 = C159 - C158;
    const double C171 = C158 - C159;
    const double C628 = C337 - C338;
    const double C5454 = C498 - C499;
    const double C5446 = C499 - C498;
    const double C5472 = C5443 - C5444;
    const double C168 = C152 - C153;
    const double C5453 = C496 - C497;
    const double C5445 = C497 - C496;
    const double C5471 = C5441 - C5442;
    const double C1220 =
        (be * C49321 + C49273 * C49284 + ae * C49272 * C49408 +
         C49272 * (ae * C49408 + C49272 * (be * C49316 + C49273 * C49291))) /
        C49150;
    const double C1567 =
        (ae * (C49360 + C49273 * C49408 + C49273 * C49406 * be) +
         C49272 * (C49284 + be * C49273 * C49316 +
                   C49273 * (be * C49316 + C49273 * C49291))) /
        C49150;
    const double C4526 = (2 * (ae * C49408 + C49272 * C49444) +
                          ae * (C49408 + C49465 * std::pow(C49272, 2)) +
                          C49272 * (C49444 + ae * C49272 * C49465 +
                                    C49272 * (ae * C49465 + C49272 * C49497))) /
                         C49150;
    const double C1098 =
        (2 * (C49273 * C49360 + C49742 * be) +
         C49273 * (C49360 + C49273 * C49408 + C49273 * C49406 * be) +
         (C49742 + C49406 * C49443) * be) /
        C49148;
    const double C1212 =
        (C49273 * C49360 + C49742 * be + C49408 * C49565) / C49148;
    const double C1559 =
        (C49272 * (C49360 + C49273 * C49408 + C49807 * be)) / C49148;
    const double C4518 =
        (2 * C49272 * C49408 + C49272 * (C49408 + C49465 * C49565)) / C49148;
    const double C343 = C50251 * C310;
    const double C2295 = C2284 * C310;
    const double C2497 = C2282 * C310;
    const double C2488 = C2283 * C310;
    const double C8100 = C50408 * C310;
    const double C8087 = C50302 * C310;
    const double C17162 = C50302 * C310;
    const double C24304 = C24293 * C310;
    const double C511 = C117 * C476;
    const double C8283 = C7885 * C476;
    const double C17358 = C16960 * C476;
    const double C909 = C50251 * C895;
    const double C2670 = C2283 * C895;
    const double C3213 = C2282 * C895;
    const double C8265 = C50302 * C895;
    const double C8814 = C50408 * C895;
    const double C17340 = C50302 * C895;
    const double C912 = C117 * C896;
    const double C2675 = C2288 * C896;
    const double C8268 = C7886 * C896;
    const double C8819 = C7885 * C896;
    const double C17343 = C16961 * C896;
    const double C17894 = C16960 * C896;
    const double C2677 = C2289 * C1562;
    const double C3222 = C2288 * C1562;
    const double C5274 = C117 * C1562;
    const double C8821 = C7886 * C1562;
    const double C13581 = C7885 * C1562;
    const double C17896 = C16961 * C1562;
    const double C27279 = C16960 * C1562;
    const double C5459 = C117 * C1846;
    const double C13815 = C7885 * C1846;
    const double C21869 = C16960 * C1846;
    const double C344 = C117 * C295;
    const double C2296 = C2289 * C295;
    const double C2487 = C2288 * C295;
    const double C8101 = C7885 * C295;
    const double C8086 = C7886 * C295;
    const double C17176 = C16960 * C295;
    const double C17161 = C16961 * C295;
    const double C509 = C117 * C460;
    const double C8279 = C7885 * C460;
    const double C17354 = C16960 * C460;
    const double C910 = C117 * C889;
    const double C2669 = C2288 * C889;
    const double C8264 = C7886 * C889;
    const double C8815 = C7885 * C889;
    const double C17339 = C16961 * C889;
    const double C17890 = C16960 * C889;
    const double C2500 = C2288 * C1095;
    const double C2489 = C2289 * C1095;
    const double C8103 = C7886 * C1095;
    const double C17178 = C16961 * C1095;
    const double C2682 = C2288 * C1209;
    const double C5267 = C117 * C1209;
    const double C8281 = C7886 * C1209;
    const double C14495 = C7885 * C1209;
    const double C17356 = C16961 * C1209;
    const double C22383 = C16960 * C1209;
    const double C2671 = C2289 * C1556;
    const double C3216 = C2288 * C1556;
    const double C5272 = C117 * C1556;
    const double C8817 = C7886 * C1556;
    const double C13577 = C7885 * C1556;
    const double C17892 = C16961 * C1556;
    const double C27275 = C16960 * C1556;
    const double C5457 = C117 * C1840;
    const double C13811 = C7885 * C1840;
    const double C21865 = C16960 * C1840;
    const double C160 = C117 * C123;
    const double C7913 = C7885 * C123;
    const double C16988 = C16960 * C123;
    const double C339 = C117 * C293;
    const double C2318 = C2288 * C293;
    const double C7906 = C7886 * C293;
    const double C8445 = C7885 * C293;
    const double C16981 = C16961 * C293;
    const double C17520 = C16960 * C293;
    const double C348 = C117 * C296;
    const double C2307 = C2289 * C296;
    const double C2840 = C2288 * C296;
    const double C8109 = C7885 * C296;
    const double C8094 = C7886 * C296;
    const double C17184 = C16960 * C296;
    const double C17169 = C16961 * C296;
    const double C504 = C117 * C458;
    const double C8608 = C7885 * C458;
    const double C17683 = C16960 * C458;
    const double C513 = C117 * C461;
    const double C8287 = C7885 * C461;
    const double C17362 = C16960 * C461;
    const double C914 = C117 * C890;
    const double C2998 = C2288 * C890;
    const double C8272 = C7886 * C890;
    const double C8823 = C7885 * C890;
    const double C17347 = C16961 * C890;
    const double C17898 = C16960 * C890;
    const double C5981 = C117 * C1213;
    const double C13796 = C7886 * C1213;
    const double C15029 = C7885 * C1213;
    const double C21851 = C16961 * C1213;
    const double C22378 = C16960 * C1213;
    const double C36256 = C2288 * C1213;
    const double C6398 = C117 * C4520;
    const double C16211 = C7886 * C4520;
    const double C21858 = C16961 * C4520;
    const double C22793 = C16960 * C4520;
    const double C38057 = C2288 * C4520;
    const double C47747 = C7885 * C4520;
    const double C5979 = C117 * C1208;
    const double C13792 = C7886 * C1208;
    const double C15025 = C7885 * C1208;
    const double C21847 = C16961 * C1208;
    const double C22374 = C16960 * C1208;
    const double C36250 = C2288 * C1208;
    const double C6396 = C117 * C4514;
    const double C16207 = C7886 * C4514;
    const double C21854 = C16961 * C4514;
    const double C22789 = C16960 * C4514;
    const double C38051 = C2288 * C4514;
    const double C47743 = C7885 * C4514;
    const double C6890 = C117 * C2654;
    const double C15027 = C7886 * C2654;
    const double C22376 = C16961 * C2654;
    const double C23293 = C16960 * C2654;
    const double C36252 = C2289 * C2654;
    const double C37151 = C2288 * C2654;
    const double C48239 = C7885 * C2654;
    const double C15681 = C7886 * C3200;
    const double C23287 = C16961 * C3200;
    const double C36750 = C2289 * C3200;
    const double C37649 = C2288 * C3200;
    const double C5428 =
        (3 * (C49321 + C49272 * C49889 + C49887 * ae) +
         C49272 * (2 * C49889 +
                   C49272 * (C49316 + C49272 * (C49272 * C49326 + C49396 * ae) +
                             C49272 * C49396 * ae) +
                   C49890 * ae) +
         (2 * C49887 + C49272 * C49890) * ae) /
        C49148;
    const double C7294 = C117 * C5424;
    const double C23699 = C16960 * C5424;
    const double C48641 = C7885 * C5424;
    const double C746 = C502 - C503;
    const double C5774 = C503 - C502;
    const double C7292 = C5451 - C5452;
    const double C38817 = C5452 - C5451;
    const double C172 = C157 - C156;
    const double C170 = C156 - C157;
    const double C627 = C335 - C336;
    const double C745 = C500 - C501;
    const double C5773 = C501 - C500;
    const double C7291 = C5449 - C5450;
    const double C38816 = C5450 - C5449;
    const double C49337 = C49332 + C49336;
    const double C2478 = (3 * (C49323 + C49330 * C49443) +
                          C49273 * (2 * C49448 + C49273 * C49453)) /
                         C49148;
    const double C49514 = C49300 + C49510;
    const double C49504 = C49498 + C49502;
    const double C49376 = C49371 + C49375;
    const double C5429 = (3 * (C49362 + C49369 * C49565) +
                          C49272 * (2 * C49570 + C49272 * C49575)) /
                         C49148;
    const double C49621 = C49300 + C49617;
    const double C49611 = C49605 + C49609;
    const double C49428 = C49424 + C49427;
    const double C49484 = C49482 * be;
    const double C49843 = C49417 + C49842;
    const double C49906 = C49417 + C49904;
    const double C49549 = C49547 * be;
    const double C49864 = C49273 * C49547;
    const double C49924 = C49473 + C49922;
    const double C49951 = C49272 * C49948;
    const double C49663 = C49655 + C49661;
    const double C49973 = C49529 + C49971;
    const double C49985 = C49272 * C49982;
    const double C50005 = C50001 + C50003;
    const double C50418 = C50379 / C49150;
    const double C50420 = C50383 / C49148;
    const double C2285 = -C50419;
    const double C50421 = C50386 / C50139;
    const double C50423 = C50390 / C50127;
    const double C288 = -C50422;
    const double C50425 = C50398 / C50139;
    const double C50426 = C50400 / C50127;
    const double C1018 = -C50424;
    const double C50428 = C50402 / C50139;
    const double C50429 = C50404 / C50127;
    const double C1669 = -C50427;
    const double C19730 =
        (C49204 / C49192 - (0 * be) / C49148) / C49192 + (0 * ae) / C49148;
    const double C24298 = C49204 / C49192 - (0 * be) / C49148;
    const double C49203 = C49200 / C49148;
    const double C7923 = C7902 - C7903;
    const double C7921 = C7898 - C7899;
    const double C16998 = C16977 - C16978;
    const double C16996 = C16973 - C16974;
    const double C50444 = C50405 - C50431;
    const double C7926 = C7908 - C7909;
    const double C7924 = C7904 - C7905;
    const double C7922 = C7900 - C7901;
    const double C7920 = C7896 - C7897;
    const double C8442 = C8096 - C8097;
    const double C8440 = C8092 - C8093;
    const double C8605 = C8274 - C8275;
    const double C14216 = C8275 - C8274;
    const double C8603 = C8270 - C8271;
    const double C14214 = C8271 - C8270;
    const double C13800 = C8266 - C8267;
    const double C13788 = C8267 - C8266;
    const double C13798 = C8262 - C8263;
    const double C13786 = C8263 - C8262;
    const double C46858 = C13795 - C13794;
    const double C46856 = C13791 - C13790;
    const double C48638 = C16209 - C16208;
    const double C48636 = C16205 - C16204;
    const double C2322 = C2287 * C133;
    const double C2316 = C2287 * C122;
    const double C2309 = C2287 * C131;
    const double C2303 = C2287 * C121;
    const double C2298 = C2287 * C129;
    const double C2292 = C2287 * C120;
    const double C2504 = C2287 * C311;
    const double C2498 = C2287 * C295;
    const double C2491 = C2287 * C303;
    const double C2485 = C2287 * C291;
    const double C2686 = C2287 * C476;
    const double C2680 = C2287 * C460;
    const double C2673 = C2287 * C468;
    const double C2667 = C2287 * C456;
    const double C2844 = C2287 * C305;
    const double C2838 = C2287 * C292;
    const double C3002 = C2287 * C470;
    const double C2996 = C2287 * C457;
    const double C3220 = C2287 * C896;
    const double C3214 = C2287 * C889;
    const double C36254 = C2287 * C474;
    const double C36248 = C2287 * C459;
    const double C36243 = C2287 * C466;
    const double C36237 = C2287 * C455;
    const double C36752 = C2287 * C894;
    const double C36746 = C2287 * C888;
    const double C37155 = C2287 * C1213;
    const double C37149 = C2287 * C1208;
    const double C37653 = C2287 * C1560;
    const double C37647 = C2287 * C1555;
    const double C38055 = C2287 * C1844;
    const double C38049 = C2287 * C1839;
    const double C50445 = C50412 - C50432;
    const double C16991 = C16955 * C144;
    const double C16984 = C16955 * C143;
    const double C16980 = C16955 * C132;
    const double C16975 = C16955 * C142;
    const double C16971 = C16955 * C130;
    const double C16967 = C16955 * C141;
    const double C16963 = C16955 * C128;
    const double C17179 = C16955 * C325;
    const double C17175 = C16955 * C310;
    const double C17172 = C16955 * C322;
    const double C17168 = C16955 * C304;
    const double C17164 = C16955 * C321;
    const double C17160 = C16955 * C302;
    const double C17357 = C16955 * C490;
    const double C17353 = C16955 * C475;
    const double C17350 = C16955 * C487;
    const double C17346 = C16955 * C469;
    const double C17342 = C16955 * C486;
    const double C17338 = C16955 * C467;
    const double C17893 = C16955 * C904;
    const double C17889 = C16955 * C895;
    const double C21868 = C16955 * C1852;
    const double C21864 = C16955 * C1845;
    const double C21857 = C16955 * C1851;
    const double C21853 = C16955 * C1843;
    const double C21848 = C16955 * C489;
    const double C21844 = C16955 * C473;
    const double C21840 = C16955 * C485;
    const double C21836 = C16955 * C465;
    const double C22371 = C16955 * C903;
    const double C22367 = C16955 * C893;
    const double C38618 =
        (C49246 / C49192 - (0 * be) / C49148) / C49192 + (0 * ae) / C49148;
    const double C43934 = C49246 / C49192 - (0 * be) / C49148;
    const double C49245 = C49242 / C49148;
    const double C50446 = C50407 - C50434;
    const double C50447 = C50416 - C50435;
    const double C166 = C50251 * C145;
    const double C342 = C50251 * C323;
    const double C2323 = C2283 * C323;
    const double C7911 = C50302 * C323;
    const double C8448 = C50408 * C323;
    const double C16986 = C50302 * C323;
    const double C17523 = C16955 * C323;
    const double C507 = C50251 * C488;
    const double C8611 = C50408 * C488;
    const double C17686 = C16955 * C488;
    const double C349 = C50251 * C326;
    const double C2314 = C2284 * C326;
    const double C2845 = C2283 * C326;
    const double C8112 = C50408 * C326;
    const double C8099 = C50302 * C326;
    const double C17187 = C16955 * C326;
    const double C17174 = C50302 * C326;
    const double C24323 = C24293 * C326;
    const double C162 = C117 * C135;
    const double C7917 = C7885 * C135;
    const double C16992 = C16960 * C135;
    const double C341 = C117 * C307;
    const double C2324 = C2288 * C307;
    const double C7910 = C7886 * C307;
    const double C8449 = C7885 * C307;
    const double C16985 = C16961 * C307;
    const double C17524 = C16960 * C307;
    const double C350 = C117 * C313;
    const double C2313 = C2289 * C313;
    const double C2846 = C2288 * C313;
    const double C8113 = C7885 * C313;
    const double C8098 = C7886 * C313;
    const double C17188 = C16960 * C313;
    const double C17173 = C16961 * C313;
    const double C506 = C117 * C472;
    const double C8612 = C7885 * C472;
    const double C17687 = C16960 * C472;
    const double C515 = C117 * C478;
    const double C8291 = C7885 * C478;
    const double C17366 = C16960 * C478;
    const double C916 = C117 * C898;
    const double C3004 = C2288 * C898;
    const double C8276 = C7886 * C898;
    const double C8827 = C7885 * C898;
    const double C17351 = C16961 * C898;
    const double C17902 = C16960 * C898;
    const double C2848 = C2289 * C1103;
    const double C8115 = C7886 * C1103;
    const double C17190 = C16961 * C1103;
    const double C2482 =
        (3 * (C49401 + be * C49448 + C49273 * C49452) +
         be * (2 * C49448 + C49273 * C49453) +
         C49273 *
             (2 * C49452 + be * C49453 +
              C49273 * (C49300 + be * C49273 * C49341 +
                        C49273 * (be * C49341 + C49273 * C49280 * C49305)))) /
        C49150;
    const double C2688 = C2288 * C1215;
    const double C5269 = C117 * C1215;
    const double C8285 = C7886 * C1215;
    const double C14499 = C7885 * C1215;
    const double C17360 = C16961 * C1215;
    const double C22387 = C16960 * C1215;
    const double C6892 = C117 * C2658;
    const double C15031 = C7886 * C2658;
    const double C22380 = C16961 * C2658;
    const double C23297 = C16960 * C2658;
    const double C36258 = C2289 * C2658;
    const double C37157 = C2288 * C2658;
    const double C48243 = C7885 * C2658;
    const double C15685 = C7886 * C3204;
    const double C23291 = C16961 * C3204;
    const double C36756 = C2289 * C3204;
    const double C37655 = C2288 * C3204;
    const double C49634 = C49627 + C49628;
    const double C49503 = C49500 + C49501;
    const double C49937 = C49316 + C49935;
    const double C514 = C50251 * C491;
    const double C8290 = C50408 * C491;
    const double C17365 = C16955 * C491;
    const double C915 = C50251 * C905;
    const double C3003 = C2283 * C905;
    const double C8277 = C50302 * C905;
    const double C8826 = C50408 * C905;
    const double C17352 = C50302 * C905;
    const double C17901 = C16955 * C905;
    const double C161 = C50251 * C134;
    const double C7912 = C50408 * C134;
    const double C16987 = C16955 * C134;
    const double C340 = C50251 * C306;
    const double C2317 = C2283 * C306;
    const double C7907 = C50302 * C306;
    const double C8444 = C50408 * C306;
    const double C16982 = C50302 * C306;
    const double C17519 = C16955 * C306;
    const double C347 = C50251 * C312;
    const double C2308 = C2284 * C312;
    const double C2839 = C2283 * C312;
    const double C8108 = C50408 * C312;
    const double C8095 = C50302 * C312;
    const double C17183 = C16955 * C312;
    const double C17170 = C50302 * C312;
    const double C24317 = C24293 * C312;
    const double C505 = C50251 * C471;
    const double C8607 = C50408 * C471;
    const double C17682 = C16955 * C471;
    const double C512 = C50251 * C477;
    const double C8286 = C50408 * C477;
    const double C17361 = C16955 * C477;
    const double C913 = C50251 * C897;
    const double C2997 = C2283 * C897;
    const double C8273 = C50302 * C897;
    const double C8822 = C50408 * C897;
    const double C17348 = C50302 * C897;
    const double C17897 = C16955 * C897;
    const double C5467 = C50251 * C1847;
    const double C1221 =
        (be * C49323 + C49273 * C49401 + ae * C49272 * C49413 +
         C49272 * (ae * C49413 + C49272 * (be * C49330 + C49273 * C49300))) /
        C49150;
    const double C1568 =
        (ae * (C49362 + C49273 * C49413 + C49273 * C49411 * be) +
         C49272 * (C49401 + be * C49273 * C49330 +
                   C49273 * (be * C49330 + C49273 * C49300))) /
        C49150;
    const double C1100 =
        (2 * (C49273 * C49362 + C49745 * be) +
         C49273 * (C49362 + C49273 * C49413 + C49273 * C49411 * be) +
         (C49745 + C49411 * C49443) * be) /
        C49148;
    const double C1214 =
        (C49273 * C49362 + C49745 * be + C49413 * C49565) / C49148;
    const double C1561 =
        (C49272 * (C49362 + C49273 * C49413 + C49810 * be)) / C49148;
    const double C5434 =
        (3 * (C49401 + ae * C49570 + C49272 * C49574) +
         ae * (2 * C49570 + C49272 * C49575) +
         C49272 * (2 * C49574 + ae * C49575 +
                   C49272 * (C49300 + ae * C49272 * C49380 +
                             C49272 * (ae * C49380 + C49272 * C49508)))) /
        C49150;
    const double C49468 = C49357 + C49467;
    const double C49589 = C49586 + C49587;
    const double C7295 = C50251 * C5433;
    const double C23702 = C16955 * C5433;
    const double C48644 = C50408 * C5433;
    const double C7293 = C50251 * C5427;
    const double C23698 = C16955 * C5427;
    const double C48640 = C50408 * C5427;
    const double C49703 = C49696 + C49697;
    const double C49610 = C49607 + C49608;
    const double C49419 = C49415 + C49418;
    const double C49754 = C49752 + C49753;
    const double C1217 =
        (C49273 * C49328 + C49272 * (C49272 * C49455 + C49813 * ae) +
         C49272 * C49813 * ae) /
        C49148;
    const double C5972 =
        (2 * (C49272 * C49455 + C49813 * ae) +
         C49272 * (C49455 + C49272 * (C49272 * C49273 * C49346 + C49482 * ae) +
                   C49272 * C49482 * ae) +
         (C49813 + C49482 * C49565) * ae) /
        C49148;
    const double C1210 = C49273 * C49749 + C49813 * C49565;
    const double C5970 =
        2 * C49272 * C49813 + C49272 * (C49813 + C49482 * C49565);
    const double C49905 = C49901 + C49902;
    const double C3006 = C2289 * C1564;
    const double C8829 = C7886 * C1564;
    const double C10847 = C117 * C1564;
    const double C17904 = C16961 * C1564;
    const double C5470 = C117 * C1848;
    const double C2842 = C2289 * C1096;
    const double C8111 = C7886 * C1096;
    const double C17186 = C16961 * C1096;
    const double C3000 = C2289 * C1557;
    const double C8825 = C7886 * C1557;
    const double C10845 = C117 * C1557;
    const double C17900 = C16961 * C1557;
    const double C5468 = C117 * C1841;
    const double C49923 = C49919 + C49920;
    const double C5994 = C117 * C4524;
    const double C13817 = C7886 * C4524;
    const double C21871 = C16961 * C4524;
    const double C5992 = C117 * C4516;
    const double C13813 = C7886 * C4516;
    const double C21867 = C16961 * C4516;
    const double C49476 = C49273 * C49474;
    const double C49538 = 2 * C49474;
    const double C49593 = ae * C49474;
    const double C49592 = C49272 * C49474;
    const double C4522 =
        (2 * C49272 * C49413 + C49272 * (C49413 + C49474 * C49565)) / C49148;
    const double C2660 =
        (C49323 + C49330 * C49443 + C49272 * (C49272 * C49453 + C49839 * ae) +
         C49272 * C49839 * ae) /
        C49148;
    const double C3206 = (C49272 * (2 * C49448 + C49273 * C49453) +
                          (2 * C49810 + C49273 * C49839) * ae) /
                         C49148;
    const double C2473 = 3 * (C49745 + C49411 * C49443) +
                         C49273 * (2 * C49810 + C49273 * C49839);
    const double C2655 = C49745 + C49411 * C49443 + C49839 * C49565;
    const double C3201 = C49272 * (2 * C49810 + C49273 * C49839);
    const double C4517 =
        2 * C49272 * C49839 + C49272 * (C49839 + C49547 * C49565);
    const double C5430 =
        (3 * (C49323 + C49272 * C49897 + C49895 * ae) +
         C49272 * (2 * C49897 +
                   C49272 * (C49330 + C49272 * (C49272 * C49341 + C49422 * ae) +
                             C49272 * C49422 * ae) +
                   C49898 * ae) +
         (2 * C49895 + C49272 * C49898) * ae) /
        C49148;
    const double C5425 = 3 * (C49745 + C49411 * C49565) +
                         C49272 * (2 * C49895 + C49272 * C49898);
    const double C49950 = C49272 * C49946;
    const double C49860 = C49858 + C49859;
    const double C49972 = C49968 + C49969;
    const double C22795 = C16961 * C4521;
    const double C38059 = C2289 * C4521;
    const double C39741 = C117 * C4521;
    const double C47749 = C7886 * C4521;
    const double C22791 = C16961 * C4515;
    const double C38053 = C2289 * C4515;
    const double C39739 = C117 * C4515;
    const double C47745 = C7886 * C4515;
    const double C6387 =
        (3 * (C49440 + C49272 * C49915 + C49913 * ae) +
         C49272 * (2 * C49915 +
                   C49272 * (C49492 + C49272 * (C49272 * C49629 + C49525 * ae) +
                             C49272 * C49525 * ae) +
                   C49916 * ae) +
         (2 * C49913 + C49272 * C49916) * ae) /
        C49148;
    const double C6384 = 3 * (C49807 + C49464 * C49565) +
                         C49272 * (2 * C49913 + C49272 * C49916);
    const double C49984 = C49272 * C49980;
    const double C49532 = C49365 + C49530;
    const double C49590 = C49465 + C49588;
    const double C49688 = 2 * C49682;
    const double C49686 = ae * C49682;
    const double C49938 = C49934 + C49936;
    const double C50004 = C49326 + C50002;
    const double C49309 = C49303 + C49308;
    const double C49459 = C49456 + C49457;
    const double C49581 = C49578 + C49579;
    const double C2847 = C2284 * C1108;
    const double C8114 = C50302 * C1108;
    const double C17189 = C50302 * C1108;
    const double C24832 = C24293 * C1108;
    const double C5469 = C50251 * C1853;
    const double C49517 = C49273 * C49515;
    const double C49594 = C49272 * C49515;
    const double C4528 = (2 * (ae * C49413 + C49272 * C49452) +
                          ae * (C49413 + C49474 * std::pow(C49272, 2)) +
                          C49272 * (C49452 + ae * C49272 * C49474 +
                                    C49272 * (ae * C49474 + C49272 * C49515))) /
                         C49150;
    const double C49622 = C49272 * C49618;
    const double C49642 = C49639 + C49640;
    const double C49687 = C49683 + C49684;
    const double C49711 = C49708 + C49709;
    const double C49348 = C49343 + C49347;
    const double C49460 = C49335 + C49458;
    const double C49518 = C49273 * C49516;
    const double C4525 =
        (2 * (C49272 * C49453 + C49839 * ae) +
         C49272 * (C49453 + C49272 * (C49272 * C49516 + C49547 * ae) +
                   C49272 * C49547 * ae) +
         (C49839 + C49547 * C49565) * ae) /
        C49148;
    const double C49643 = C49637 + C49641;
    const double C49387 = C49382 + C49386;
    const double C49483 = C49480 + C49481;
    const double C49582 = C49374 + C49580;
    const double C49548 = C49273 * C49545;
    const double C49595 = C49545 * C49565;
    const double C49623 = C49272 * C49620;
    const double C49662 = C49372 + C49659;
    const double C49689 = C49527 + C49685;
    const double C49712 = C49706 + C49710;
    const double C177 = C169 * C50266;
    const double C10685 = C169 * C50409;
    const double C33289 = C169 * C33283;
    const double C181 = C173 * C50266;
    const double C10689 = C173 * C50409;
    const double C33293 = C173 * C33283;
    const double C179 = C171 * C50266;
    const double C636 = C628 * C50266;
    const double C11141 = C628 * C50409;
    const double C33741 = C628 * C33283;
    const double C176 = C168 * C118;
    const double C10684 = C168 * C10681;
    const double C33288 = C168 * C33285;
    const double C5982 = C50251 * C1220;
    const double C13797 = C50302 * C1220;
    const double C15028 = C50408 * C1220;
    const double C21850 = C50302 * C1220;
    const double C22379 = C16955 * C1220;
    const double C36257 = C2283 * C1220;
    const double C37154 = C2282 * C1220;
    const double C6887 = C50251 * C1567;
    const double C14485 = C50302 * C1567;
    const double C15682 = C50408 * C1567;
    const double C22373 = C50302 * C1567;
    const double C23288 = C16955 * C1567;
    const double C30886 = C24293 * C1567;
    const double C36246 = C2284 * C1567;
    const double C36755 = C2283 * C1567;
    const double C37652 = C2282 * C1567;
    const double C6397 = C50251 * C4526;
    const double C16210 = C50302 * C4526;
    const double C21859 = C50302 * C4526;
    const double C22792 = C16955 * C4526;
    const double C38056 = C2283 * C4526;
    const double C47746 = C50408 * C4526;
    const double C5980 = C50251 * C1212;
    const double C13793 = C50302 * C1212;
    const double C15024 = C50408 * C1212;
    const double C21846 = C50302 * C1212;
    const double C22375 = C16955 * C1212;
    const double C36251 = C2283 * C1212;
    const double C37148 = C2282 * C1212;
    const double C6885 = C50251 * C1559;
    const double C14481 = C50302 * C1559;
    const double C15678 = C50408 * C1559;
    const double C22369 = C50302 * C1559;
    const double C23284 = C16955 * C1559;
    const double C30880 = C24293 * C1559;
    const double C36240 = C2284 * C1559;
    const double C36749 = C2283 * C1559;
    const double C37646 = C2282 * C1559;
    const double C6395 = C50251 * C4518;
    const double C16206 = C50302 * C4518;
    const double C21855 = C50302 * C4518;
    const double C22788 = C16955 * C4518;
    const double C38050 = C2283 * C4518;
    const double C47742 = C50408 * C4518;
    const double C5456 = C511 - C510;
    const double C5448 = C510 - C511;
    const double C13808 = C8282 - C8283;
    const double C13804 = C8283 - C8282;
    const double C5988 = C911 - C912;
    const double C5984 = C912 - C911;
    const double C13801 = C8268 - C8269;
    const double C13789 = C8269 - C8268;
    const double C14492 = C8818 - C8819;
    const double C14488 = C8819 - C8818;
    const double C27483 = C17343 - C17344;
    const double C27479 = C17344 - C17343;
    const double C5476 = C5460 - C5459;
    const double C5474 = C5459 - C5460;
    const double C5455 = C509 - C508;
    const double C5447 = C508 - C509;
    const double C13806 = C8278 - C8279;
    const double C13802 = C8279 - C8278;
    const double C5987 = C909 - C910;
    const double C5983 = C910 - C909;
    const double C13799 = C8264 - C8265;
    const double C13787 = C8265 - C8264;
    const double C14490 = C8814 - C8815;
    const double C14486 = C8815 - C8814;
    const double C27481 = C17339 - C17340;
    const double C27477 = C17340 - C17339;
    const double C5475 = C5458 - C5457;
    const double C5473 = C5457 - C5458;
    const double C7296 = C117 * C5428;
    const double C23703 = C16960 * C5428;
    const double C48645 = C7885 * C5428;
    const double C754 = C746 * C50266;
    const double C11296 = C746 * C50409;
    const double C33894 = C746 * C33283;
    const double C10687 = C5774 * C50330;
    const double C33291 = C5774 * C50330;
    const double C180 = C172 * C118;
    const double C10688 = C172 * C10681;
    const double C33292 = C172 * C33285;
    const double C178 = C170 * C118;
    const double C635 = C627 * C118;
    const double C11140 = C627 * C10681;
    const double C33740 = C627 * C33285;
    const double C753 = C745 * C118;
    const double C11295 = C745 * C10681;
    const double C33893 = C745 * C33285;
    const double C10686 = C5773 * C10682;
    const double C33290 = C5773 * C33286;
    const double C137 = (4 * (2 * C49323 + C49280 * C49328) +
                         C49280 * (3 * C49328 + C49280 * C49337)) /
                        C49148;
    const double C315 =
        (2 * C49323 + C49280 * C49328 + C49337 * C49443) / C49148;
    const double C317 = (C49273 * (3 * C49328 + C49280 * C49337)) / C49148;
    const double C2508 = C2289 * C2478;
    const double C3471 = (4 * (2 * C49440 + C49273 * C49446) +
                          C49273 * (3 * C49446 + C49273 * C49504)) /
                         C49148;
    const double C136 = (4 * (2 * C49362 + C49280 * C49367) +
                         C49280 * (3 * C49367 + C49280 * C49376)) /
                        C49148;
    const double C479 =
        (2 * C49362 + C49280 * C49367 + C49376 * C49565) / C49148;
    const double C481 = (C49272 * (3 * C49367 + C49280 * C49376)) / C49148;
    const double C5461 = C50251 * C5429;
    const double C7284 = (4 * (2 * C49562 + C49272 * C49568) +
                          C49272 * (3 * C49568 + C49272 * C49611)) /
                         C49148;
    const double C49429 = C49428 * be;
    const double C49760 = C49280 * C49428;
    const double C49816 = C49273 * C49428;
    const double C2474 = 3 * (C49749 + C49417 * C49443) +
                         C49273 * (2 * C49813 + C49273 * C49843);
    const double C2656 = C49749 + C49417 * C49443 + C49843 * C49565;
    const double C3202 = C49272 * (2 * C49813 + C49273 * C49843);
    const double C5426 = 3 * (C49749 + C49417 * C49565) +
                         C49272 * (2 * C49903 + C49272 * C49906);
    const double C49865 = C49863 + C49864;
    const double C6385 = 3 * (C49810 + C49473 * C49565) +
                         C49272 * (2 * C49921 + C49272 * C49924);
    const double C49953 = C49949 + C49951;
    const double C49665 = C49663 * be;
    const double C49957 = C49273 * C49663;
    const double C22779 = 3 * (C49835 + C49529 * C49565) +
                          C49272 * (2 * C49970 + C49272 * C49973);
    const double C49987 = C49983 + C49985;
    const double C50007 = C49272 * C50005;
    const double C50436 = C50378 - C50418;
    const double C50437 = C50382 - C50420;
    const double C50438 = C50385 - C50421;
    const double C50439 = C50389 - C50423;
    const double C50440 = C50392 - C50425;
    const double C50441 = C50399 - C50426;
    const double C50442 = C50394 - C50428;
    const double C50443 = C50403 - C50429;
    const double C24322 = C24298 * C313;
    const double C24316 = C24298 * C296;
    const double C24311 = C24298 * C311;
    const double C24305 = C24298 * C295;
    const double C24505 = C24298 * C2478;
    const double C24492 = C24298 * C1101;
    const double C24486 = C24298 * C1095;
    const double C24662 = C24298 * C1562;
    const double C24656 = C24298 * C1556;
    const double C24833 = C24298 * C1103;
    const double C24827 = C24298 * C1096;
    const double C24991 = C24298 * C1564;
    const double C24985 = C24298 * C1557;
    const double C30898 = C24298 * C2658;
    const double C30892 = C24298 * C2654;
    const double C30887 = C24298 * C1560;
    const double C30881 = C24298 * C1555;
    const double C31396 = C24298 * C3204;
    const double C31390 = C24298 * C3200;
    const double C32699 = C24298 * C4521;
    const double C32693 = C24298 * C4515;
    const double C49206 = C50251 - C49203;
    const double C24330 = C50444 * C143;
    const double C24324 = C50444 * C132;
    const double C24319 = C50444 * C142;
    const double C24313 = C50444 * C130;
    const double C24306 = C50444 * C141;
    const double C24300 = C50444 * C128;
    const double C24500 = C50444 * C325;
    const double C24494 = C50444 * C310;
    const double C24489 = C50444 * C321;
    const double C24483 = C50444 * C302;
    const double C24670 = C50444 * C490;
    const double C24664 = C50444 * C475;
    const double C24659 = C50444 * C486;
    const double C24653 = C50444 * C467;
    const double C24828 = C50444 * C322;
    const double C24822 = C50444 * C304;
    const double C24986 = C50444 * C487;
    const double C24980 = C50444 * C469;
    const double C25192 = C50444 * C904;
    const double C25186 = C50444 * C895;
    const double C30895 = C50444 * C489;
    const double C30889 = C50444 * C473;
    const double C30882 = C50444 * C485;
    const double C30876 = C50444 * C465;
    const double C31393 = C50444 * C903;
    const double C31387 = C50444 * C893;
    const double C31794 = C50444 * C1220;
    const double C31788 = C50444 * C1212;
    const double C32292 = C50444 * C1567;
    const double C32286 = C50444 * C1559;
    const double C32694 = C50444 * C1851;
    const double C32688 = C50444 * C1843;
    const double C19722 =
        (C50444 * C50297) / C49148 + (C50408 - C50430) / C49192;
    const double C7929 = C7922 + C7923;
    const double C7928 = C7920 + C7921;
    const double C24332 = C50445 * C323;
    const double C24326 = C50445 * C306;
    const double C24321 = C50445 * C322;
    const double C24315 = C50445 * C304;
    const double C24308 = C50445 * C321;
    const double C24302 = C50445 * C302;
    const double C24502 = C50445 * C1107;
    const double C24491 = C50445 * C325;
    const double C24485 = C50445 * C310;
    const double C24661 = C50445 * C904;
    const double C24655 = C50445 * C895;
    const double C24830 = C50445 * C326;
    const double C24824 = C50445 * C312;
    const double C24988 = C50445 * C905;
    const double C24982 = C50445 * C897;
    const double C30897 = C50445 * C1220;
    const double C30891 = C50445 * C1212;
    const double C30884 = C50445 * C903;
    const double C30878 = C50445 * C893;
    const double C31395 = C50445 * C1567;
    const double C31389 = C50445 * C1559;
    const double C32696 = C50445 * C4526;
    const double C32690 = C50445 * C4518;
    const double C19723 =
        (C50445 * C50297) / C49148 + (2 * C50302 + C50444) / C49192;
    const double C19724 = (C50297 * C50302) / C49152 + C50445 / C49192;
    const double C17001 = C16983 - C16984;
    const double C16999 = C16979 - C16980;
    const double C16997 = C16975 - C16976;
    const double C16995 = C16971 - C16972;
    const double C17517 = C17171 - C17172;
    const double C17515 = C17167 - C17168;
    const double C21862 = C17358 - C17357;
    const double C27486 = C17357 - C17358;
    const double C21860 = C17354 - C17353;
    const double C27484 = C17353 - C17354;
    const double C17680 = C17349 - C17350;
    const double C27884 = C17350 - C17349;
    const double C17678 = C17345 - C17346;
    const double C27882 = C17346 - C17345;
    const double C27482 = C17341 - C17342;
    const double C27478 = C17342 - C17341;
    const double C27480 = C17337 - C17338;
    const double C27476 = C17338 - C17337;
    const double C28152 = C17893 - C17894;
    const double C28148 = C17894 - C17893;
    const double C28150 = C17889 - C17890;
    const double C28146 = C17890 - C17889;
    const double C23696 = C21856 - C21857;
    const double C23694 = C21852 - C21853;
    const double C21874 = C21848 - C21849;
    const double C21872 = C21844 - C21845;
    const double C49248 = C50266 - C49245;
    const double C38611 =
        (C50446 * C50325) / C49148 + (C50409 - C50433) / C49192;
    const double C38612 =
        (C50447 * C50325) / C49148 + (2 * C50330 + C50446) / C49192;
    const double C38613 = (C50325 * C50330) / C49152 + C50447 / C49192;
    const double C175 = C162 - C163;
    const double C630 = C341 - C342;
    const double C7927 = C7910 - C7911;
    const double C17002 = C16985 - C16986;
    const double C8443 = C8098 - C8099;
    const double C17518 = C17173 - C17174;
    const double C748 = C506 - C507;
    const double C11300 = C507 - C506;
    const double C2507 = C2284 * C2482;
    const double C24504 = C24293 * C2482;
    const double C3474 =
        (4 * (2 * C49444 + be * C49446 + C49273 * C49503) +
         be * (3 * C49446 + C49273 * C49504) +
         C49273 *
             (3 * C49503 + be * C49504 +
              C49273 * (2 * C49497 + be * C49499 +
                        C49273 * (C49296 + be * C49273 * C49333 +
                                  C49273 * (be * C49333 + C49273 * C49305))))) /
        C49150;
    const double C49939 = C49937 + C49932;
    const double C5466 = C515 - C514;
    const double C5776 = C514 - C515;
    const double C11143 = C916 - C915;
    const double C11499 = C915 - C916;
    const double C8606 = C8276 - C8277;
    const double C14217 = C8277 - C8276;
    const double C17681 = C17351 - C17352;
    const double C27885 = C17352 - C17351;
    const double C174 = C160 - C161;
    const double C629 = C339 - C340;
    const double C7925 = C7906 - C7907;
    const double C17000 = C16981 - C16982;
    const double C8441 = C8094 - C8095;
    const double C17516 = C17169 - C17170;
    const double C747 = C504 - C505;
    const double C11299 = C505 - C504;
    const double C5465 = C513 - C512;
    const double C5775 = C512 - C513;
    const double C11142 = C914 - C913;
    const double C11498 = C913 - C914;
    const double C8604 = C8272 - C8273;
    const double C14215 = C8273 - C8272;
    const double C17679 = C17347 - C17348;
    const double C27883 = C17348 - C17347;
    const double C2687 = C2283 * C1221;
    const double C5270 = C50251 * C1221;
    const double C8284 = C50302 * C1221;
    const double C14498 = C50408 * C1221;
    const double C17359 = C50302 * C1221;
    const double C22386 = C16955 * C1221;
    const double C24672 = C50445 * C1221;
    const double C2678 = C2284 * C1568;
    const double C3221 = C2283 * C1568;
    const double C5273 = C50251 * C1568;
    const double C8820 = C50302 * C1568;
    const double C13580 = C50408 * C1568;
    const double C17895 = C50302 * C1568;
    const double C24663 = C24293 * C1568;
    const double C25194 = C50445 * C1568;
    const double C27278 = C16955 * C1568;
    const double C2499 = C2283 * C1100;
    const double C2490 = C2284 * C1100;
    const double C8102 = C50302 * C1100;
    const double C17177 = C50302 * C1100;
    const double C24496 = C50445 * C1100;
    const double C24487 = C24293 * C1100;
    const double C2681 = C2283 * C1214;
    const double C5268 = C50251 * C1214;
    const double C8280 = C50302 * C1214;
    const double C14494 = C50408 * C1214;
    const double C17355 = C50302 * C1214;
    const double C22382 = C16955 * C1214;
    const double C24666 = C50445 * C1214;
    const double C2672 = C2284 * C1561;
    const double C3215 = C2283 * C1561;
    const double C5271 = C50251 * C1561;
    const double C8816 = C50302 * C1561;
    const double C13576 = C50408 * C1561;
    const double C17891 = C50302 * C1561;
    const double C24657 = C24293 * C1561;
    const double C25188 = C50445 * C1561;
    const double C27274 = C16955 * C1561;
    const double C5463 = C50251 * C5434;
    const double C49469 = C49468 + C49466;
    const double C40008 = C7294 - C7293;
    const double C7288 =
        (4 * (2 * C49566 + ae * C49568 + C49272 * C49610) +
         ae * (3 * C49568 + C49272 * C49611) +
         C49272 *
             (3 * C49610 + ae * C49611 +
              C49272 * (2 * C49604 + ae * C49606 +
                        C49272 * (C49296 + ae * C49272 * C49372 +
                                  C49272 * (ae * C49372 + C49272 * C49305))))) /
        C49150;
    const double C1222 =
        (be * C49328 + C49273 * C49298 + ae * C49272 * C49419 +
         C49272 * (ae * C49419 + C49272 * (be * C49335 + C49273 * C49307))) /
        C49150;
    const double C1569 =
        (ae * (C49367 + C49273 * C49419 + C49273 * C49417 * be) +
         C49272 * (C49298 + be * C49273 * C49335 +
                   C49273 * (be * C49335 + C49273 * C49307))) /
        C49150;
    const double C1102 =
        (2 * (C49273 * C49367 + C49749 * be) +
         C49273 * (C49367 + C49273 * C49419 + C49273 * C49417 * be) +
         (C49749 + C49417 * C49443) * be) /
        C49148;
    const double C1216 =
        (C49273 * C49367 + C49749 * be + C49419 * C49565) / C49148;
    const double C1563 =
        (C49272 * (C49367 + C49273 * C49419 + C49813 * be)) / C49148;
    const double C314 =
        (2 * C49362 + C49280 * C49367 +
         C49273 * (C49273 * C49376 + C49754 * be) + C49273 * C49754 * be) /
        C49148;
    const double C316 = (C49273 * (3 * C49367 + C49280 * C49376) +
                         (3 * C49749 + C49280 * C49754) * be) /
                        C49148;
    const double C480 =
        (2 * C49323 + C49280 * C49328 +
         C49272 * (C49272 * C49337 + C49754 * ae) + C49272 * C49754 * ae) /
        C49148;
    const double C482 = (C49272 * (3 * C49328 + C49280 * C49337) +
                         (3 * C49749 + C49280 * C49754) * ae) /
                        C49148;
    const double C899 = (C49272 * (C49273 * C49376 + C49754 * be)) / C49148;
    const double C900 =
        (C49272 * C49273 * C49337 + C49273 * C49754 * ae) / C49148;
    const double C124 = 4 * (2 * C49745 + C49280 * C49749) +
                        C49280 * (3 * C49749 + C49280 * C49754);
    const double C297 = 2 * C49745 + C49280 * C49749 + C49754 * C49443;
    const double C298 = C49273 * (3 * C49749 + C49280 * C49754);
    const double C462 = 2 * C49745 + C49280 * C49749 + C49754 * C49565;
    const double C463 = C49272 * (3 * C49749 + C49280 * C49754);
    const double C891 = C49272 * C49273 * C49754;
    const double C1097 =
        2 * C49273 * C49754 + C49273 * (C49754 + C49428 * C49443);
    const double C1558 = C49272 * (C49754 + C49428 * C49443);
    const double C1842 =
        2 * C49272 * C49754 + C49272 * (C49754 + C49428 * C49565);
    const double C5626 = C117 * C1217;
    const double C8293 = C7886 * C1217;
    const double C17368 = C16961 * C1217;
    const double C5624 = C117 * C1210;
    const double C8289 = C7886 * C1210;
    const double C17364 = C16961 * C1210;
    const double C5432 =
        (3 * (C49328 + C49272 * C49905 + C49903 * ae) +
         C49272 * (2 * C49905 +
                   C49272 * (C49335 + C49272 * (C49272 * C49346 + C49426 * ae) +
                             C49272 * C49426 * ae) +
                   C49906 * ae) +
         (2 * C49903 + C49272 * C49906) * ae) /
        C49148;
    const double C6389 =
        (3 * (C49448 + C49272 * C49923 + C49921 * ae) +
         C49272 * (2 * C49923 +
                   C49272 * (C49506 +
                             C49272 * (C49272 * C49273 * C49509 + C49543 * ae) +
                             C49272 * C49543 * ae) +
                   C49924 * ae) +
         (2 * C49921 + C49272 * C49924) * ae) /
        C49148;
    const double C49477 = C49369 + C49476;
    const double C5991 = C50251 * C4522;
    const double C13812 = C50302 * C4522;
    const double C21866 = C50302 * C4522;
    const double C2690 = C2289 * C2660;
    const double C5278 = C117 * C2660;
    const double C14501 = C7886 * C2660;
    const double C22389 = C16961 * C2660;
    const double C24675 = C24298 * C2660;
    const double C3224 = C2289 * C3206;
    const double C13583 = C7886 * C3206;
    const double C25197 = C24298 * C3206;
    const double C27281 = C16961 * C3206;
    const double C2502 = C2289 * C2473;
    const double C24499 = C24298 * C2473;
    const double C2684 = C2289 * C2655;
    const double C5276 = C117 * C2655;
    const double C14497 = C7886 * C2655;
    const double C22385 = C16961 * C2655;
    const double C24669 = C24298 * C2655;
    const double C3218 = C2289 * C3201;
    const double C13579 = C7886 * C3201;
    const double C25191 = C24298 * C3201;
    const double C27277 = C16961 * C3201;
    const double C5464 = C117 * C5430;
    const double C5462 = C117 * C5425;
    const double C49952 = C49330 + C49950;
    const double C3625 =
        (2 * C49440 + C49273 * C49446 +
         C49272 * (C49272 * C49504 + C49860 * ae) + C49272 * C49860 * ae) /
        C49148;
    const double C4119 = (C49272 * (3 * C49446 + C49273 * C49504) +
                          (3 * C49835 + C49273 * C49860) * ae) /
                         C49148;
    const double C3468 = 4 * (2 * C49807 + C49273 * C49835) +
                         C49273 * (3 * C49835 + C49273 * C49860);
    const double C3622 = 2 * C49807 + C49273 * C49835 + C49860 * C49565;
    const double C4116 = C49272 * (3 * C49835 + C49273 * C49860);
    const double C21115 =
        2 * C49272 * C49860 + C49272 * (C49860 + C49663 * C49565);
    const double C22781 =
        (3 * (C49446 + C49272 * C49972 + C49970 * ae) +
         C49272 * (2 * C49972 +
                   C49272 * (C49499 + C49272 * (C49272 * C49638 + C49658 * ae) +
                             C49272 * C49658 * ae) +
                   C49973 * ae) +
         (2 * C49970 + C49272 * C49973) * ae) /
        C49148;
    const double C23705 = C16961 * C6387;
    const double C39411 = C117 * C6387;
    const double C48647 = C7886 * C6387;
    const double C23701 = C16961 * C6384;
    const double C39409 = C117 * C6384;
    const double C48643 = C7886 * C6384;
    const double C49986 = C49492 + C49984;
    const double C49533 = C49532 + C49528;
    const double C6390 =
        (3 * (C49444 + ae * C49585 + C49272 * C49589) +
         ae * (2 * C49585 + C49272 * C49590) +
         C49272 *
             (2 * C49589 + ae * C49590 +
              C49272 * (C49497 + ae * C49272 * C49527 +
                        C49272 * (ae * C49527 +
                                  C49272 * (be * C49333 + C49273 * C49305))))) /
        C49150;
    const double C6386 = (3 * (C49408 + C49465 * C49565) +
                          C49272 * (2 * C49585 + C49272 * C49590)) /
                         C49148;
    const double C49690 = C49497 + C49686;
    const double C7282 = 4 * (2 * C49887 + C49272 * C49890) +
                         C49272 * (3 * C49890 + C49272 * C49938);
    const double C50006 = C50004 + C49999;
    const double C146 =
        (5 * (3 * C49298 + C49280 * C49309) +
         C49280 * (4 * C49309 +
                   C49280 * (3 * C49307 +
                             C49280 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C327 =
        (2 * C49280 * C49291 + C49280 * C49298 + be * C49273 * C49337 +
         C49273 * (be * C49337 + C49273 * C49309)) /
        C49150;
    const double C328 = (be * (3 * C49328 + C49280 * C49337) +
                         C49273 * (3 * C49298 + C49280 * C49309)) /
                        C49150;
    const double C492 =
        (2 * C49280 * C49291 + C49280 * C49298 + ae * C49272 * C49376 +
         C49272 * (ae * C49376 + C49272 * C49309)) /
        C49150;
    const double C493 = (ae * (3 * C49367 + C49280 * C49376) +
                         C49272 * (3 * C49298 + C49280 * C49309)) /
                        C49150;
    const double C906 = (ae * (C49273 * C49376 +
                               (2 * C49280 * C49396 +
                                C49280 * (C49396 + C49287 * C49289 * C49288)) *
                                   be) +
                         C49272 * (be * C49337 + C49273 * C49309)) /
                        C49150;
    const double C49519 = C49514 + C49517;
    const double C49596 = C49593 + C49594;
    const double C5993 = C50251 * C4528;
    const double C13816 = C50302 * C4528;
    const double C21870 = C50302 * C4528;
    const double C49624 = C49621 + C49622;
    const double C49644 = C49273 * C49642;
    const double C49677 = C49272 * C49642;
    const double C49691 = C49272 * C49687;
    const double C49713 = C49272 * C49711;
    const double C49349 = C49280 * C49348;
    const double C1109 =
        (2 * (be * C49337 + C49273 * C49309) +
         be * (C49337 + C49348 * std::pow(C49273, 2)) +
         C49273 * (C49309 + be * C49273 * C49348 +
                   C49273 * (be * C49348 +
                             C49273 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C1105 =
        (2 * C49273 * C49337 + C49273 * (C49337 + C49348 * C49443)) / C49148;
    const double C1566 = (C49272 * (C49337 + C49348 * C49443) +
                          (C49754 + C49428 * C49443) * ae) /
                         C49148;
    const double C1850 =
        (2 * (C49272 * C49337 + C49754 * ae) +
         C49272 * (C49337 + C49272 * (C49272 * C49348 + C49428 * ae) +
                   C49272 * C49428 * ae) +
         (C49754 + C49428 * C49565) * ae) /
        C49148;
    const double C2483 =
        (3 * (C49298 + be * C49455 + C49273 * C49459) +
         be * (2 * C49455 + C49273 * C49460) +
         C49273 * (2 * C49459 + be * C49460 +
                   C49273 * (C49307 + be * C49273 * C49346 +
                             C49273 * (be * C49346 +
                                       C49273 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C2480 = (3 * (C49328 + C49335 * C49443) +
                          C49273 * (2 * C49455 + C49273 * C49460)) /
                         C49148;
    const double C2662 =
        (C49328 + C49335 * C49443 + C49272 * (C49272 * C49460 + C49843 * ae) +
         C49272 * C49843 * ae) /
        C49148;
    const double C3208 = (C49272 * (2 * C49455 + C49273 * C49460) +
                          (2 * C49813 + C49273 * C49843) * ae) /
                         C49148;
    const double C49520 = C49512 + C49518;
    const double C49645 = C49273 * C49643;
    const double C21117 =
        (2 * (C49272 * C49504 + C49860 * ae) +
         C49272 * (C49504 + C49272 * (C49272 * C49643 + C49663 * ae) +
                   C49272 * C49663 * ae) +
         (C49860 + C49663 * C49565) * ae) /
        C49148;
    const double C49388 = C49280 * C49387;
    const double C49421 = C49273 * C49387;
    const double C1854 =
        (2 * (ae * C49376 + C49272 * C49309) +
         ae * (C49376 + C49387 * std::pow(C49272, 2)) +
         C49272 * (C49309 + ae * C49272 * C49387 +
                   C49272 * (ae * C49387 +
                             C49272 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C1849 =
        (2 * C49272 * C49376 + C49272 * (C49376 + C49387 * C49565)) / C49148;
    const double C49485 = C49273 * C49483;
    const double C5973 =
        (2 * (ae * C49419 + C49272 * C49459) + ae * (C49419 + C49483 * C49565) +
         C49272 * (C49459 + ae * C49272 * C49483 +
                   C49272 * (ae * C49483 +
                             C49272 * (be * C49346 +
                                       C49273 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C5971 =
        (2 * C49272 * C49419 + C49272 * (C49419 + C49483 * C49565)) / C49148;
    const double C5435 =
        (3 * (C49298 + ae * C49577 + C49272 * C49581) +
         ae * (2 * C49577 + C49272 * C49582) +
         C49272 * (2 * C49581 + ae * C49582 +
                   C49272 * (C49307 + ae * C49272 * C49385 +
                             C49272 * (ae * C49385 +
                                       C49272 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C5431 = (3 * (C49367 + C49374 * C49565) +
                          C49272 * (2 * C49577 + C49272 * C49582)) /
                         C49148;
    const double C49550 = C49380 + C49548;
    const double C49597 = C49474 + C49595;
    const double C49625 = C49619 + C49623;
    const double C49664 = C49662 + C49657;
    const double C49692 = C49272 * C49689;
    const double C49714 = C49272 * C49712;
    const double C184 = C176 + C177;
    const double C10692 = C10684 + C10685;
    const double C33296 = C33288 + C33289;
    const double C6394 = C5981 - C5982;
    const double C46859 = C13797 - C13796;
    const double C47740 = C15029 - C15028;
    const double C21875 = C21850 - C21851;
    const double C22786 = C22378 - C22379;
    const double C39407 = C6398 - C6397;
    const double C48639 = C16211 - C16210;
    const double C23697 = C21858 - C21859;
    const double C6393 = C5979 - C5980;
    const double C46857 = C13793 - C13792;
    const double C47738 = C15025 - C15024;
    const double C21873 = C21846 - C21847;
    const double C22784 = C22374 - C22375;
    const double C39406 = C6396 - C6395;
    const double C48637 = C16207 - C16206;
    const double C23695 = C21854 - C21855;
    const double C13821 = C13800 + C13801;
    const double C13819 = C13788 + C13789;
    const double C13820 = C13798 + C13799;
    const double C13818 = C13786 + C13787;
    const double C40009 = C7296 - C7295;
    const double C186 = C180 + C181;
    const double C10693 = C10688 + C10689;
    const double C33297 = C33292 + C33293;
    const double C185 = C178 + C179;
    const double C639 = C635 + C636;
    const double C11144 = C11140 + C11141;
    const double C33744 = C33740 + C33741;
    const double C757 = C753 + C754;
    const double C11301 = C11295 + C11296;
    const double C33897 = C33893 + C33894;
    const double C167 = C117 * C137;
    const double C354 = C117 * C315;
    const double C2326 = C2289 * C315;
    const double C8451 = C7886 * C315;
    const double C17526 = C16961 * C315;
    const double C24335 = C24298 * C315;
    const double C634 = C117 * C317;
    const double C7919 = C7886 * C317;
    const double C16994 = C16961 * C317;
    const double C164 = C50251 * C136;
    const double C516 = C50251 * C479;
    const double C749 = C50251 * C481;
    const double C40010 = C50251 * C7284;
    const double C49761 = C49759 + C49760;
    const double C1219 =
        (C49273 * C49337 + C49272 * (C49272 * C49273 * C49348 + C49816 * ae) +
         C49272 * C49816 * ae) /
        C49148;
    const double C1211 = C49273 * C49754 + C49816 * C49565;
    const double C3469 = 4 * (2 * C49810 + C49273 * C49839) +
                         C49273 * (3 * C49839 + C49273 * C49865);
    const double C3623 = 2 * C49810 + C49273 * C49839 + C49865 * C49565;
    const double C4117 = C49272 * (3 * C49839 + C49273 * C49865);
    const double C7283 = 4 * (2 * C49895 + C49272 * C49898) +
                         C49272 * (3 * C49898 + C49272 * C49953);
    const double C49958 = C49956 + C49957;
    const double C23689 = 4 * (2 * C49913 + C49272 * C49916) +
                          C49272 * (3 * C49916 + C49272 * C49987);
    const double C50009 = C49997 + C50007;
    const double C107 = (C50436 * C50104) / C49148 + (C50380 - C50419) / C49192;
    const double C108 =
        (C50437 * C50104) / C49148 + (2 * C50114 + C50436) / C49192;
    const double C109 = (C50104 * C50114) / C49152 + C50437 / C49192;
    const double C113 = (C50438 * C50130) / C50127 + (C50387 - C50422) / C50129;
    const double C114 =
        (C50439 * C50130) / C50127 + (2 * C50141 + C50438) / C50129;
    const double C115 = (C50130 * C50141) / C50144 + C50439 / C50129;
    const double C1089 =
        (C50440 * C50201) / C50127 + (C50395 - C50424) / C50129;
    const double C1090 =
        (C50441 * C50201) / C50127 + (2 * C50206 + C50440) / C50129;
    const double C1091 = (C50201 * C50206) / C50144 + C50441 / C50129;
    const double C1835 =
        (C50442 * C50229) / C50127 + (C50396 - C50427) / C50129;
    const double C1836 =
        (C50443 * C50229) / C50127 + (2 * C50234 + C50442) / C50129;
    const double C1837 = (C50229 * C50234) / C50144 + C50443 / C50129;
    const double C49208 = C49206 * ae;
    const double C7933 = C7929 * C50266;
    const double C7932 = C7928 * C118;
    const double C17004 = C16997 + C16998;
    const double C17003 = C16995 + C16996;
    const double C27491 = C27482 + C27483;
    const double C27489 = C27478 + C27479;
    const double C27490 = C27480 + C27481;
    const double C27488 = C27476 + C27477;
    const double C49250 = C49248 * ae;
    const double C183 = C175 * C50266;
    const double C638 = C630 * C50266;
    const double C7931 = C7926 + C7927;
    const double C17006 = C17001 + C17002;
    const double C8453 = C8442 + C8443;
    const double C17528 = C17517 + C17518;
    const double C756 = C748 * C50266;
    const double C10691 = C748 * C50330;
    const double C33295 = C748 * C50330;
    const double C7285 =
        (4 * (2 * C49889 + C49272 * C49939 + C49890 * ae) +
         C49272 *
             (3 * C49939 +
              C49272 *
                  (2 * C49931 +
                   C49272 * (C49326 + C49272 * (C49272 * C49333 + C49398 * ae) +
                             C49272 * C49398 * ae) +
                   C49933 * ae) +
              C49938 * ae) +
         (3 * C49890 + C49272 * C49938) * ae) /
        C49148;
    const double C11298 = C5466 * C50330;
    const double C33896 = C5466 * C50330;
    const double C11146 = C11143 * C50330;
    const double C33743 = C11143 * C50330;
    const double C8616 = C8605 + C8606;
    const double C14219 = C14216 + C14217;
    const double C17691 = C17680 + C17681;
    const double C27887 = C27884 + C27885;
    const double C182 = C174 * C118;
    const double C637 = C629 * C118;
    const double C7930 = C7924 + C7925;
    const double C17005 = C16999 + C17000;
    const double C8452 = C8440 + C8441;
    const double C17527 = C17515 + C17516;
    const double C755 = C747 * C118;
    const double C10690 = C747 * C10682;
    const double C33294 = C747 * C33286;
    const double C11297 = C5465 * C10682;
    const double C33895 = C5465 * C33286;
    const double C11145 = C11142 * C10682;
    const double C33742 = C11142 * C33286;
    const double C8615 = C8603 + C8604;
    const double C14218 = C14214 + C14215;
    const double C17690 = C17678 + C17679;
    const double C27886 = C27882 + C27883;
    const double C5990 = C5270 - C5269;
    const double C5986 = C5269 - C5270;
    const double C13809 = C8284 - C8285;
    const double C13805 = C8285 - C8284;
    const double C21863 = C17360 - C17359;
    const double C27487 = C17359 - C17360;
    const double C14493 = C8820 - C8821;
    const double C14489 = C8821 - C8820;
    const double C28153 = C17895 - C17896;
    const double C28149 = C17896 - C17895;
    const double C5989 = C5268 - C5267;
    const double C5985 = C5267 - C5268;
    const double C13807 = C8280 - C8281;
    const double C13803 = C8281 - C8280;
    const double C21861 = C17356 - C17355;
    const double C27485 = C17355 - C17356;
    const double C14491 = C8816 - C8817;
    const double C14487 = C8817 - C8816;
    const double C28151 = C17891 - C17892;
    const double C28147 = C17892 - C17891;
    const double C2663 =
        (C49284 + be * C49440 + C49273 * C49444 + ae * C49272 * C49469 +
         C49272 * (ae * C49469 +
                   C49272 * (C49291 + be * C49273 * C49326 +
                             C49273 * (be * C49326 + C49273 * C49296)))) /
        C49150;
    const double C3209 =
        (ae * (2 * C49408 + C49273 * C49469 + (C49406 + C49396 * C49443) * be) +
         C49272 * (2 * C49444 + be * C49446 +
                   C49273 * (C49291 + be * C49273 * C49326 +
                             C49273 * (be * C49326 + C49273 * C49296)))) /
        C49150;
    const double C2475 =
        (3 * (C49360 + C49273 * C49408 + C49807 * be) +
         C49273 * (2 * C49408 + C49273 * C49469 + C49835 * be) +
         (2 * C49807 + C49273 * C49835) * be) /
        C49148;
    const double C2657 =
        (C49360 + C49273 * C49408 + C49807 * be + C49469 * C49565) / C49148;
    const double C3203 =
        (C49272 * (2 * C49408 + C49273 * C49469 + C49835 * be)) / C49148;
    const double C40012 = C50251 * C7288;
    const double C5625 = C50251 * C1222;
    const double C8292 = C50302 * C1222;
    const double C17367 = C50302 * C1222;
    const double C3005 = C2284 * C1569;
    const double C8828 = C50302 * C1569;
    const double C10846 = C50251 * C1569;
    const double C17903 = C50302 * C1569;
    const double C24990 = C24293 * C1569;
    const double C2841 = C2284 * C1102;
    const double C8110 = C50302 * C1102;
    const double C17185 = C50302 * C1102;
    const double C24826 = C24293 * C1102;
    const double C5623 = C50251 * C1216;
    const double C8288 = C50302 * C1216;
    const double C17363 = C50302 * C1216;
    const double C2999 = C2284 * C1563;
    const double C8824 = C50302 * C1563;
    const double C10844 = C50251 * C1563;
    const double C17899 = C50302 * C1563;
    const double C24984 = C24293 * C1563;
    const double C351 = C50251 * C314;
    const double C2319 = C2284 * C314;
    const double C8446 = C50302 * C314;
    const double C17521 = C50302 * C314;
    const double C24328 = C24293 * C314;
    const double C631 = C50251 * C316;
    const double C7914 = C50302 * C316;
    const double C16989 = C50302 * C316;
    const double C519 = C117 * C480;
    const double C752 = C117 * C482;
    const double C917 = C50251 * C899;
    const double C8609 = C50302 * C899;
    const double C17684 = C50302 * C899;
    const double C920 = C117 * C900;
    const double C8614 = C7886 * C900;
    const double C17689 = C16961 * C900;
    const double C165 = C117 * C124;
    const double C352 = C117 * C297;
    const double C2320 = C2289 * C297;
    const double C8447 = C7886 * C297;
    const double C17522 = C16961 * C297;
    const double C24329 = C24298 * C297;
    const double C632 = C117 * C298;
    const double C7915 = C7886 * C298;
    const double C16990 = C16961 * C298;
    const double C517 = C117 * C462;
    const double C750 = C117 * C463;
    const double C918 = C117 * C891;
    const double C8610 = C7886 * C891;
    const double C17685 = C16961 * C891;
    const double C49478 = C49477 + C49475;
    const double C49954 = C49952 + C49947;
    const double C23299 = C16961 * C3625;
    const double C31799 = C24298 * C3625;
    const double C37159 = C2289 * C3625;
    const double C48245 = C7886 * C3625;
    const double C32297 = C24298 * C4119;
    const double C37657 = C2289 * C4119;
    const double C23295 = C16961 * C3622;
    const double C31793 = C24298 * C3622;
    const double C37153 = C2289 * C3622;
    const double C48241 = C7886 * C3622;
    const double C32291 = C24298 * C4116;
    const double C37651 = C2289 * C4116;
    const double C49988 = C49986 + C49981;
    const double C49534 = C49273 * C49533;
    const double C49649 = 3 * C49533;
    const double C49676 = ae * C49533;
    const double C49675 = C49272 * C49533;
    const double C4527 =
        (2 * (ae * C49469 + C49272 * C49503) +
         ae * (C49469 + C49533 * std::pow(C49272, 2)) +
         C49272 *
             (C49503 + ae * C49272 * C49533 +
              C49272 * (ae * C49533 +
                        C49272 * (C49296 + be * C49273 * C49333 +
                                  C49273 * (be * C49333 + C49273 * C49305))))) /
        C49150;
    const double C4519 =
        (2 * C49272 * C49469 + C49272 * (C49469 + C49533 * C49565)) / C49148;
    const double C23704 = C50302 * C6390;
    const double C39410 = C50251 * C6390;
    const double C48646 = C50302 * C6390;
    const double C23700 = C50302 * C6386;
    const double C39408 = C50251 * C6386;
    const double C48642 = C50302 * C6386;
    const double C40011 = C117 * C7282;
    const double C50008 = C49272 * C50006;
    const double C353 = C50251 * C327;
    const double C2325 = C2284 * C327;
    const double C8450 = C50302 * C327;
    const double C17525 = C50302 * C327;
    const double C24334 = C24293 * C327;
    const double C633 = C50251 * C328;
    const double C7918 = C50302 * C328;
    const double C16993 = C50302 * C328;
    const double C518 = C50251 * C492;
    const double C751 = C50251 * C493;
    const double C919 = C50251 * C906;
    const double C8613 = C50302 * C906;
    const double C17688 = C50302 * C906;
    const double C49646 = C49634 + C49644;
    const double C49693 = C49690 + C49691;
    const double C49715 = C49703 + C49713;
    const double C49350 = C49340 + C49349;
    const double C3475 =
        (4 * (2 * C49452 + be * C49453 + C49273 * C49519) +
         be * (3 * C49453 + C49273 * C49520) +
         C49273 * (3 * C49519 + be * C49520 +
                   C49273 * (2 * C49515 + be * C49516 +
                             C49273 * (C49508 + be * C49273 * C49509 +
                                       C49273 * (be * C49509 +
                                                 C49273 * C49280 *
                                                     std::pow(C49276, 8) *
                                                     bs[8] * C49278))))) /
        C49150;
    const double C3473 = (4 * (2 * C49448 + C49273 * C49453) +
                          C49273 * (3 * C49453 + C49273 * C49520)) /
                         C49148;
    const double C3627 =
        (2 * C49448 + C49273 * C49453 +
         C49272 * (C49272 * C49520 + C49865 * ae) + C49272 * C49865 * ae) /
        C49148;
    const double C4121 = (C49272 * (3 * C49453 + C49273 * C49520) +
                          (3 * C49839 + C49273 * C49865) * ae) /
                         C49148;
    const double C49647 = C49632 + C49645;
    const double C49389 = C49379 + C49388;
    const double C49430 = C49421 + C49429;
    const double C49486 = C49374 + C49485;
    const double C49551 = C49550 + C49546;
    const double C6391 =
        (3 * (C49452 + ae * C49592 + C49272 * C49596) +
         ae * (2 * C49592 + C49272 * C49597) +
         C49272 * (2 * C49596 + ae * C49597 +
                   C49272 * (C49515 + ae * C49272 * C49545 +
                             C49272 * (ae * C49545 +
                                       C49272 * (be * C49509 +
                                                 C49273 * C49280 *
                                                     std::pow(C49276, 8) *
                                                     bs[8] * C49278))))) /
        C49150;
    const double C6388 = (3 * (C49413 + C49474 * C49565) +
                          C49272 * (2 * C49592 + C49272 * C49597)) /
                         C49148;
    const double C7289 =
        (4 * (2 * C49574 + ae * C49575 + C49272 * C49624) +
         ae * (3 * C49575 + C49272 * C49625) +
         C49272 * (3 * C49624 + ae * C49625 +
                   C49272 * (2 * C49618 + ae * C49620 +
                             C49272 * (C49508 + ae * C49272 * C49539 +
                                       C49272 * (ae * C49539 +
                                                 C49272 * C49280 *
                                                     std::pow(C49276, 8) *
                                                     bs[8] * C49278))))) /
        C49150;
    const double C7286 = (4 * (2 * C49570 + C49272 * C49575) +
                          C49272 * (3 * C49575 + C49272 * C49625)) /
                         C49148;
    const double C49666 = C49273 * C49664;
    const double C49678 = C49664 * C49565;
    const double C49694 = C49688 + C49692;
    const double C49716 = C49701 + C49714;
    const double C10694 = C10692 + C10686;
    const double C33298 = C33296 + C33290;
    const double C46861 = C46858 + C46859;
    const double C21879 = C21874 + C21875;
    const double C48649 = C48638 + C48639;
    const double C23707 = C23696 + C23697;
    const double C46860 = C46856 + C46857;
    const double C21878 = C21872 + C21873;
    const double C48648 = C48636 + C48637;
    const double C23706 = C23694 + C23695;
    const double C125 = 5 * (3 * C49749 + C49280 * C49754) +
                        C49280 * (4 * C49754 + C49280 * C49761);
    const double C299 = 3 * C49749 + C49280 * C49754 + C49761 * C49443;
    const double C464 = 3 * C49749 + C49280 * C49754 + C49761 * C49565;
    const double C622 = C49273 * (4 * C49754 + C49280 * C49761);
    const double C740 = C49272 * (4 * C49754 + C49280 * C49761);
    const double C892 = C49272 * C49273 * C49761;
    const double C20417 = 5 * (3 * C49835 + C49273 * C49860) +
                          C49273 * (4 * C49860 + C49273 * C49958);
    const double C20519 = 3 * C49835 + C49273 * C49860 + C49958 * C49565;
    const double C20849 = C49272 * (4 * C49860 + C49273 * C49958);
    const double C40003 = 5 * (3 * C49890 + C49272 * C49938) +
                          C49272 * (4 * C49938 + C49272 * C50009);
    const double C49210 = C49208 / C49148;
    const double C7936 = C7932 + C7933;
    const double C17008 = C17004 * C50266;
    const double C17007 = C17003 * C118;
    const double C49252 = C49250 / C49148;
    const double C7935 = C7931 * C50266;
    const double C17010 = C17006 * C50266;
    const double C8455 = C8453 * C50266;
    const double C17530 = C17528 * C50266;
    const double C40013 = C117 * C7285;
    const double C8618 = C8616 * C50266;
    const double C17693 = C17691 * C50266;
    const double C187 = C182 + C183;
    const double C640 = C637 + C638;
    const double C7934 = C7930 * C118;
    const double C17009 = C17005 * C118;
    const double C8454 = C8452 * C118;
    const double C17529 = C17527 * C118;
    const double C758 = C755 + C756;
    const double C10695 = C10693 + C10690;
    const double C33299 = C33297 + C33294;
    const double C11302 = C11301 + C11297;
    const double C33898 = C33897 + C33895;
    const double C11147 = C11144 + C11145;
    const double C33745 = C33744 + C33742;
    const double C8617 = C8615 * C118;
    const double C17692 = C17690 * C118;
    const double C13825 = C13808 + C13809;
    const double C13823 = C13804 + C13805;
    const double C21877 = C21862 + C21863;
    const double C27493 = C27486 + C27487;
    const double C14505 = C14492 + C14493;
    const double C14503 = C14488 + C14489;
    const double C28157 = C28152 + C28153;
    const double C28155 = C28148 + C28149;
    const double C13824 = C13806 + C13807;
    const double C13822 = C13802 + C13803;
    const double C21876 = C21860 + C21861;
    const double C27492 = C27484 + C27485;
    const double C14504 = C14490 + C14491;
    const double C14502 = C14486 + C14487;
    const double C28156 = C28150 + C28151;
    const double C28154 = C28146 + C28147;
    const double C6891 = C50251 * C2663;
    const double C15030 = C50302 * C2663;
    const double C22381 = C50302 * C2663;
    const double C23296 = C16955 * C2663;
    const double C30899 = C24293 * C2663;
    const double C31796 = C50445 * C2663;
    const double C36259 = C2284 * C2663;
    const double C37156 = C2283 * C2663;
    const double C48242 = C50408 * C2663;
    const double C15684 = C50302 * C3209;
    const double C23290 = C50302 * C3209;
    const double C31397 = C24293 * C3209;
    const double C32294 = C50445 * C3209;
    const double C36757 = C2284 * C3209;
    const double C37654 = C2283 * C3209;
    const double C6889 = C50251 * C2657;
    const double C15026 = C50302 * C2657;
    const double C22377 = C50302 * C2657;
    const double C23292 = C16955 * C2657;
    const double C30893 = C24293 * C2657;
    const double C31790 = C50445 * C2657;
    const double C36253 = C2284 * C2657;
    const double C37150 = C2283 * C2657;
    const double C48238 = C50408 * C2657;
    const double C15680 = C50302 * C3203;
    const double C23286 = C50302 * C3203;
    const double C31391 = C24293 * C3203;
    const double C32288 = C50445 * C3203;
    const double C36751 = C2284 * C3203;
    const double C37648 = C2283 * C3203;
    const double C2664 =
        (C49401 + be * C49448 + C49273 * C49452 + ae * C49272 * C49478 +
         C49272 *
             (ae * C49478 +
              C49272 * (C49300 + be * C49273 * C49341 +
                        C49273 * (be * C49341 + C49273 * C49280 * C49305)))) /
        C49150;
    const double C3210 =
        (ae * (2 * C49413 + C49273 * C49478 + (C49411 + C49422 * C49443) * be) +
         C49272 *
             (2 * C49452 + be * C49453 +
              C49273 * (C49300 + be * C49273 * C49341 +
                        C49273 * (be * C49341 + C49273 * C49280 * C49305)))) /
        C49150;
    const double C2477 =
        (3 * (C49362 + C49273 * C49413 + C49810 * be) +
         C49273 * (2 * C49413 + C49273 * C49478 + C49839 * be) +
         (2 * C49810 + C49273 * C49839) * be) /
        C49148;
    const double C2659 =
        (C49362 + C49273 * C49413 + C49810 * be + C49478 * C49565) / C49148;
    const double C3205 =
        (C49272 * (2 * C49413 + C49273 * C49478 + C49839 * be)) / C49148;
    const double C7287 =
        (4 * (2 * C49897 + C49272 * C49954 + C49898 * ae) +
         C49272 *
             (3 * C49954 +
              C49272 *
                  (2 * C49946 +
                   C49272 * (C49341 + C49272 * (C49272 * C49509 + C49540 * ae) +
                             C49272 * C49540 * ae) +
                   C49948 * ae) +
              C49953 * ae) +
         (3 * C49898 + C49272 * C49953) * ae) /
        C49148;
    const double C23691 =
        (4 * (2 * C49915 + C49272 * C49988 + C49916 * ae) +
         C49272 * (3 * C49988 +
                   C49272 * (2 * C49980 +
                             C49272 * (C49629 +
                                       C49272 * (C49272 * C49273 * C49344 +
                                                 C49653 * ae) +
                                       C49272 * C49653 * ae) +
                             C49982 * ae) +
                   C49987 * ae) +
         (3 * C49916 + C49272 * C49987) * ae) /
        C49148;
    const double C49535 = C49522 + C49534;
    const double C49679 = C49676 + C49677;
    const double C22794 = C50302 * C4527;
    const double C32698 = C24293 * C4527;
    const double C38058 = C2284 * C4527;
    const double C39740 = C50251 * C4527;
    const double C47748 = C50302 * C4527;
    const double C22790 = C50302 * C4519;
    const double C32692 = C24293 * C4519;
    const double C38052 = C2284 * C4519;
    const double C39738 = C50251 * C4519;
    const double C47744 = C50302 * C4519;
    const double C50010 = C49991 + C50008;
    const double C329 =
        (3 * C49298 + C49280 * C49309 + be * C49273 * C49350 +
         C49273 * (be * C49350 +
                   C49273 * (3 * C49307 +
                             C49280 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C625 =
        (be * (4 * C49337 + C49280 * C49350) +
         C49273 * (4 * C49309 +
                   C49280 * (3 * C49307 +
                             C49280 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C139 = (5 * (3 * C49328 + C49280 * C49337) +
                         C49280 * (4 * C49337 + C49280 * C49350)) /
                        C49148;
    const double C319 =
        (3 * C49328 + C49280 * C49337 + C49350 * C49443) / C49148;
    const double C484 =
        (3 * C49328 + C49280 * C49337 +
         C49272 * (C49272 * C49350 + C49761 * ae) + C49272 * C49761 * ae) /
        C49148;
    const double C624 = (C49273 * (4 * C49337 + C49280 * C49350)) / C49148;
    const double C742 = (C49272 * (4 * C49337 + C49280 * C49350) +
                         (4 * C49754 + C49280 * C49761) * ae) /
                        C49148;
    const double C902 =
        (C49272 * C49273 * C49350 + C49273 * C49761 * ae) / C49148;
    const double C20420 =
        (5 * (3 * C49503 + be * C49504 + C49273 * C49646) +
         be * (4 * C49504 + C49273 * C49647) +
         C49273 *
             (4 * C49646 + be * C49647 +
              C49273 *
                  (3 * C49642 + be * C49643 +
                   C49273 * (2 * C49636 + be * C49638 +
                             C49273 * (C49305 + be * C49273 * C49344 +
                                       C49273 * (be * C49344 +
                                                 C49273 * std::pow(C49276, 8) *
                                                     bs[8] * C49278)))))) /
        C49150;
    const double C20419 = (5 * (3 * C49446 + C49273 * C49504) +
                           C49273 * (4 * C49504 + C49273 * C49647)) /
                          C49148;
    const double C20521 =
        (3 * C49446 + C49273 * C49504 +
         C49272 * (C49272 * C49647 + C49958 * ae) + C49272 * C49958 * ae) /
        C49148;
    const double C20851 = (C49272 * (4 * C49504 + C49273 * C49647) +
                           (4 * C49860 + C49273 * C49958) * ae) /
                          C49148;
    const double C494 =
        (3 * C49298 + C49280 * C49309 + ae * C49272 * C49389 +
         C49272 * (ae * C49389 +
                   C49272 * (3 * C49307 +
                             C49280 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C743 =
        (ae * (4 * C49376 + C49280 * C49389) +
         C49272 * (4 * C49309 +
                   C49280 * (3 * C49307 +
                             C49280 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C907 =
        (ae * (C49273 * C49389 +
               (3 * (C49396 + C49398 * C49288) +
                C49280 * (2 * C49280 * C49398 +
                          C49280 * (C49398 + C49294 * C49293 * C49288))) *
                   be) +
         C49272 * (be * C49350 +
                   C49273 * (3 * C49307 +
                             C49280 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C138 = (5 * (3 * C49367 + C49280 * C49376) +
                         C49280 * (4 * C49376 + C49280 * C49389)) /
                        C49148;
    const double C318 =
        (3 * C49367 + C49280 * C49376 +
         C49273 * (C49273 * C49389 + C49761 * be) + C49273 * C49761 * be) /
        C49148;
    const double C483 =
        (3 * C49367 + C49280 * C49376 + C49389 * C49565) / C49148;
    const double C623 = (C49273 * (4 * C49376 + C49280 * C49389) +
                         (4 * C49754 + C49280 * C49761) * be) /
                        C49148;
    const double C741 = (C49272 * (4 * C49376 + C49280 * C49389)) / C49148;
    const double C901 = (C49272 * (C49273 * C49389 + C49761 * be)) / C49148;
    const double C1223 =
        (be * C49337 + C49273 * C49309 + ae * C49272 * C49430 +
         C49272 * (ae * C49430 +
                   C49272 * (be * C49348 +
                             C49273 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C1570 =
        (ae * (C49376 + C49273 * C49430 + C49273 * C49428 * be) +
         C49272 * (C49309 + be * C49273 * C49348 +
                   C49273 * (be * C49348 +
                             C49273 * (2 * C49280 * C49305 +
                                       C49280 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C1104 =
        (2 * (C49273 * C49376 + C49754 * be) +
         C49273 * (C49376 + C49273 * C49430 + C49273 * C49428 * be) +
         (C49754 + C49428 * C49443) * be) /
        C49148;
    const double C1218 =
        (C49273 * C49376 + C49754 * be + C49430 * C49565) / C49148;
    const double C1565 =
        (C49272 * (C49376 + C49273 * C49430 + C49816 * be)) / C49148;
    const double C49487 = C49486 + C49484;
    const double C49552 = C49273 * C49551;
    const double C4529 =
        (2 * (ae * C49478 + C49272 * C49519) +
         ae * (C49478 + C49551 * std::pow(C49272, 2)) +
         C49272 * (C49519 + ae * C49272 * C49551 +
                   C49272 * (ae * C49551 +
                             C49272 * (C49508 + be * C49273 * C49509 +
                                       C49273 * (be * C49509 +
                                                 C49273 * C49280 *
                                                     std::pow(C49276, 8) *
                                                     bs[8] * C49278))))) /
        C49150;
    const double C4523 =
        (2 * C49272 * C49478 + C49272 * (C49478 + C49551 * C49565)) / C49148;
    const double C49667 = C49650 + C49666;
    const double C49680 = C49533 + C49678;
    const double C23692 =
        (4 * (2 * C49589 + ae * C49590 + C49272 * C49693) +
         ae * (3 * C49590 + C49272 * C49694) +
         C49272 *
             (3 * C49693 + ae * C49694 +
              C49272 *
                  (2 * C49687 + ae * C49689 +
                   C49272 * (C49636 + ae * C49272 * C49656 +
                             C49272 * (ae * C49656 +
                                       C49272 * (be * C49344 +
                                                 C49273 * std::pow(C49276, 8) *
                                                     bs[8] * C49278)))))) /
        C49150;
    const double C23690 = (4 * (2 * C49585 + C49272 * C49590) +
                           C49272 * (3 * C49590 + C49272 * C49694)) /
                          C49148;
    const double C40006 =
        (5 * (3 * C49610 + ae * C49611 + C49272 * C49715) +
         ae * (4 * C49611 + C49272 * C49716) +
         C49272 *
             (4 * C49715 + ae * C49716 +
              C49272 *
                  (3 * C49711 + ae * C49712 +
                   C49272 * (2 * C49705 + ae * C49707 +
                             C49272 * (C49305 + ae * C49272 * C49383 +
                                       C49272 * (ae * C49383 +
                                                 C49272 * std::pow(C49276, 8) *
                                                     bs[8] * C49278)))))) /
        C49150;
    const double C40004 = (5 * (3 * C49568 + C49272 * C49611) +
                           C49272 * (4 * C49611 + C49272 * C49716)) /
                          C49148;
    const double C10696 = C10694 + C10687;
    const double C33300 = C33298 + C33291;
    const double C49211 = C49210 - C49195;
    const double C17011 = C17007 + C17008;
    const double C49253 = C49252 - C49237;
    const double C7937 = C7934 + C7935;
    const double C17012 = C17009 + C17010;
    const double C8456 = C8454 + C8455;
    const double C17531 = C17529 + C17530;
    const double C10697 = C10695 + C10691;
    const double C33301 = C33299 + C33295;
    const double C11303 = C11302 + C11298;
    const double C33899 = C33898 + C33896;
    const double C11148 = C11147 + C11146;
    const double C33746 = C33745 + C33743;
    const double C8619 = C8617 + C8618;
    const double C17694 = C17692 + C17693;
    const double C47741 = C15031 - C15030;
    const double C22787 = C22380 - C22381;
    const double C47739 = C15027 - C15026;
    const double C22785 = C22376 - C22377;
    const double C2689 = C2284 * C2664;
    const double C5277 = C50251 * C2664;
    const double C14500 = C50302 * C2664;
    const double C22388 = C50302 * C2664;
    const double C24674 = C24293 * C2664;
    const double C3223 = C2284 * C3210;
    const double C13582 = C50302 * C3210;
    const double C25196 = C24293 * C3210;
    const double C27280 = C50302 * C3210;
    const double C2501 = C2284 * C2477;
    const double C24498 = C24293 * C2477;
    const double C2683 = C2284 * C2659;
    const double C5275 = C50251 * C2659;
    const double C14496 = C50302 * C2659;
    const double C22384 = C50302 * C2659;
    const double C24668 = C24293 * C2659;
    const double C3217 = C2284 * C3205;
    const double C13578 = C50302 * C3205;
    const double C25190 = C24293 * C3205;
    const double C27276 = C50302 * C3205;
    const double C49536 = C49535 + C49531;
    const double C50011 = C50010 + C49995;
    const double C2665 =
        (C49298 + be * C49455 + C49273 * C49459 + ae * C49272 * C49487 +
         C49272 * (ae * C49487 +
                   C49272 * (C49307 + be * C49273 * C49346 +
                             C49273 * (be * C49346 +
                                       C49273 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C3211 =
        (ae * (2 * C49419 + C49273 * C49487 + (C49417 + C49426 * C49443) * be) +
         C49272 * (2 * C49459 + be * C49460 +
                   C49273 * (C49307 + be * C49273 * C49346 +
                             C49273 * (be * C49346 +
                                       C49273 * (C49305 + std::pow(C49276, 8) *
                                                              bs[8] * C49278 *
                                                              C49288))))) /
        C49150;
    const double C2479 =
        (3 * (C49367 + C49273 * C49419 + C49813 * be) +
         C49273 * (2 * C49419 + C49273 * C49487 + C49843 * be) +
         (2 * C49813 + C49273 * C49843) * be) /
        C49148;
    const double C2661 =
        (C49367 + C49273 * C49419 + C49813 * be + C49487 * C49565) / C49148;
    const double C3207 =
        (C49272 * (2 * C49419 + C49273 * C49487 + C49843 * be)) / C49148;
    const double C49553 = C49538 + C49552;
    const double C49668 = C49667 + C49660;
    const double C22782 =
        (3 * (C49503 + ae * C49675 + C49272 * C49679) +
         ae * (2 * C49675 + C49272 * C49680) +
         C49272 *
             (2 * C49679 + ae * C49680 +
              C49272 *
                  (C49642 + ae * C49272 * C49664 +
                   C49272 * (ae * C49664 +
                             C49272 * (C49305 + be * C49273 * C49344 +
                                       C49273 * (be * C49344 +
                                                 C49273 * std::pow(C49276, 8) *
                                                     bs[8] * C49278)))))) /
        C49150;
    const double C22780 = (3 * (C49469 + C49533 * C49565) +
                           C49272 * (2 * C49675 + C49272 * C49680)) /
                          C49148;
    const double C19727 =
        ((((0 - (C49146 * C49191) / C49148) * ae) / C49148 - (0 * be) / C49152 +
          C49147 / C49148) /
             C49192 -
         ((C49146 * C49209 + 0) * be) / C49148) /
            C49192 +
        ((C49146 * (C49209 / C49192 -
                    ((C49146 * C49211 + C50408) * be) / C49148 + C49204) +
          C50444) *
         ae) /
            C49148 +
        C49211 / C49192 - ((C49146 * C49204 + C50302) * be) / C49148;
    const double C19728 =
        (C49209 / C49192 - ((C49146 * C49211 + C50408) * be) / C49148 +
         C49204) /
            C49192 +
        ((C49146 *
              (C49211 / C49192 - ((C49146 * C49204 + C50302) * be) / C49148) +
          C50445) *
         ae) /
            C49148 +
        2 * (C49204 / C49192 - (0 * be) / C49148);
    const double C19729 =
        (C49211 / C49192 - ((C49146 * C49204 + C50302) * be) / C49148) /
            C49192 +
        ((C49146 * (C49204 / C49192 - (0 * be) / C49148) + C24293) * ae) /
            C49148;
    const double C24296 =
        C49209 / C49192 - ((C49146 * C49211 + C50408) * be) / C49148 + C49204;
    const double C24297 =
        C49211 / C49192 - ((C49146 * C49204 + C50302) * be) / C49148;
    const double C38615 =
        ((((0 - (C49165 * C49234) / C49148) * ae) / C49148 - (0 * be) / C49152 +
          C49166 / C49148) /
             C49192 -
         ((C49165 * C49251 + 0) * be) / C49148) /
            C49192 +
        ((C49165 * (C49251 / C49192 -
                    ((C49165 * C49253 + C50409) * be) / C49148 + C49246) +
          C50446) *
         ae) /
            C49148 +
        C49253 / C49192 - ((C49165 * C49246 + C50330) * be) / C49148;
    const double C38616 =
        (C49251 / C49192 - ((C49165 * C49253 + C50409) * be) / C49148 +
         C49246) /
            C49192 +
        ((C49165 *
              (C49253 / C49192 - ((C49165 * C49246 + C50330) * be) / C49148) +
          C50447) *
         ae) /
            C49148 +
        2 * (C49246 / C49192 - (0 * be) / C49148);
    const double C38617 =
        (C49253 / C49192 - ((C49165 * C49246 + C50330) * be) / C49148) /
            C49192 +
        ((C49165 * (C49246 / C49192 - (0 * be) / C49148) + C43931) * ae) /
            C49148;
    const double C43932 =
        C49251 / C49192 - ((C49165 * C49253 + C50409) * be) / C49148 + C49246;
    const double C43933 =
        C49253 / C49192 - ((C49165 * C49246 + C50330) * be) / C49148;
    const double C47751 = C47740 + C47741;
    const double C22797 = C22786 + C22787;
    const double C47750 = C47738 + C47739;
    const double C22796 = C22784 + C22785;
    const double C3628 =
        (2 * C49444 + be * C49446 + C49273 * C49503 + ae * C49272 * C49536 +
         C49272 *
             (ae * C49536 +
              C49272 * (2 * C49497 + be * C49499 +
                        C49273 * (C49296 + be * C49273 * C49333 +
                                  C49273 * (be * C49333 + C49273 * C49305))))) /
        C49150;
    const double C4122 =
        (ae * (3 * C49469 + C49273 * C49536 +
               (2 * C49464 + C49273 * C49529) * be) +
         C49272 *
             (3 * C49503 + be * C49504 +
              C49273 * (2 * C49497 + be * C49499 +
                        C49273 * (C49296 + be * C49273 * C49333 +
                                  C49273 * (be * C49333 + C49273 * C49305))))) /
        C49150;
    const double C3470 =
        (4 * (2 * C49408 + C49273 * C49469 + C49835 * be) +
         C49273 * (3 * C49469 + C49273 * C49536 + C49860 * be) +
         (3 * C49835 + C49273 * C49860) * be) /
        C49148;
    const double C3624 =
        (2 * C49408 + C49273 * C49469 + C49835 * be + C49536 * C49565) / C49148;
    const double C4118 =
        (C49272 * (3 * C49469 + C49273 * C49536 + C49860 * be)) / C49148;
    const double C40005 =
        (5 * (3 * C49939 + C49272 * C50011 + C49938 * ae) +
         C49272 * (4 * C50011 +
                   C49272 * (3 * C50006 +
                             C49272 * (2 * C49998 +
                                       C49272 * (C49333 +
                                                 C49272 * (C49272 * C49344 +
                                                           C49423 * ae) +
                                                 C49272 * C49423 * ae) +
                                       C50000 * ae) +
                             C50005 * ae) +
                   C50009 * ae) +
         (4 * C49938 + C49272 * C50009) * ae) /
        C49148;
    const double C49554 = C49553 + C49549;
    const double C49669 = C49273 * C49668;
    const double C21118 =
        (2 * (ae * C49536 + C49272 * C49646) + ae * (C49536 + C49668 * C49565) +
         C49272 *
             (C49646 + ae * C49272 * C49668 +
              C49272 *
                  (ae * C49668 +
                   C49272 * (2 * C49636 + be * C49638 +
                             C49273 * (C49305 + be * C49273 * C49344 +
                                       C49273 * (be * C49344 +
                                                 C49273 * std::pow(C49276, 8) *
                                                     bs[8] * C49278)))))) /
        C49150;
    const double C21116 =
        (2 * C49272 * C49536 + C49272 * (C49536 + C49668 * C49565)) / C49148;
    const double C24331 = C24296 * C133;
    const double C24325 = C24296 * C122;
    const double C24318 = C24296 * C131;
    const double C24312 = C24296 * C121;
    const double C24307 = C24296 * C129;
    const double C24301 = C24296 * C120;
    const double C24501 = C24296 * C311;
    const double C24495 = C24296 * C295;
    const double C24488 = C24296 * C303;
    const double C24482 = C24296 * C291;
    const double C24671 = C24296 * C476;
    const double C24665 = C24296 * C460;
    const double C24658 = C24296 * C468;
    const double C24652 = C24296 * C456;
    const double C24829 = C24296 * C305;
    const double C24823 = C24296 * C292;
    const double C24987 = C24296 * C470;
    const double C24981 = C24296 * C457;
    const double C25193 = C24296 * C896;
    const double C25187 = C24296 * C889;
    const double C30894 = C24296 * C474;
    const double C30888 = C24296 * C459;
    const double C30883 = C24296 * C466;
    const double C30877 = C24296 * C455;
    const double C31392 = C24296 * C894;
    const double C31386 = C24296 * C888;
    const double C31795 = C24296 * C1213;
    const double C31789 = C24296 * C1208;
    const double C32293 = C24296 * C1560;
    const double C32287 = C24296 * C1555;
    const double C32695 = C24296 * C1844;
    const double C32689 = C24296 * C1839;
    const double C24333 = C24297 * C307;
    const double C24327 = C24297 * C293;
    const double C24320 = C24297 * C305;
    const double C24314 = C24297 * C292;
    const double C24309 = C24297 * C303;
    const double C24303 = C24297 * C291;
    const double C24503 = C24297 * C1101;
    const double C24497 = C24297 * C1095;
    const double C24490 = C24297 * C311;
    const double C24484 = C24297 * C295;
    const double C24673 = C24297 * C1215;
    const double C24667 = C24297 * C1209;
    const double C24660 = C24297 * C896;
    const double C24654 = C24297 * C889;
    const double C24831 = C24297 * C313;
    const double C24825 = C24297 * C296;
    const double C24989 = C24297 * C898;
    const double C24983 = C24297 * C890;
    const double C25195 = C24297 * C1562;
    const double C25189 = C24297 * C1556;
    const double C30896 = C24297 * C1213;
    const double C30890 = C24297 * C1208;
    const double C30885 = C24297 * C894;
    const double C30879 = C24297 * C888;
    const double C31394 = C24297 * C1560;
    const double C31388 = C24297 * C1555;
    const double C31797 = C24297 * C2658;
    const double C31791 = C24297 * C2654;
    const double C32295 = C24297 * C3204;
    const double C32289 = C24297 * C3200;
    const double C32697 = C24297 * C4520;
    const double C32691 = C24297 * C4514;
    const double C23298 = C50302 * C3628;
    const double C31798 = C24293 * C3628;
    const double C37158 = C2284 * C3628;
    const double C48244 = C50302 * C3628;
    const double C32296 = C24293 * C4122;
    const double C37656 = C2284 * C4122;
    const double C23294 = C50302 * C3624;
    const double C31792 = C24293 * C3624;
    const double C37152 = C2284 * C3624;
    const double C48240 = C50302 * C3624;
    const double C32290 = C24293 * C4118;
    const double C37650 = C2284 * C4118;
    const double C3629 =
        (2 * C49452 + be * C49453 + C49273 * C49519 + ae * C49272 * C49554 +
         C49272 * (ae * C49554 +
                   C49272 * (2 * C49515 + be * C49516 +
                             C49273 * (C49508 + be * C49273 * C49509 +
                                       C49273 * (be * C49509 +
                                                 C49273 * C49280 *
                                                     std::pow(C49276, 8) *
                                                     bs[8] * C49278))))) /
        C49150;
    const double C4123 =
        (ae * (3 * C49478 + C49273 * C49554 +
               (2 * C49473 + C49273 * C49547) * be) +
         C49272 * (3 * C49519 + be * C49520 +
                   C49273 * (2 * C49515 + be * C49516 +
                             C49273 * (C49508 + be * C49273 * C49509 +
                                       C49273 * (be * C49509 +
                                                 C49273 * C49280 *
                                                     std::pow(C49276, 8) *
                                                     bs[8] * C49278))))) /
        C49150;
    const double C3472 =
        (4 * (2 * C49413 + C49273 * C49478 + C49839 * be) +
         C49273 * (3 * C49478 + C49273 * C49554 + C49865 * be) +
         (3 * C49839 + C49273 * C49865) * be) /
        C49148;
    const double C3626 =
        (2 * C49413 + C49273 * C49478 + C49839 * be + C49554 * C49565) / C49148;
    const double C4120 =
        (C49272 * (3 * C49478 + C49273 * C49554 + C49865 * be)) / C49148;
    const double C49670 = C49649 + C49669;
    const double C49671 = C49670 + C49665;
    const double C20522 =
        (3 * C49503 + be * C49504 + C49273 * C49646 + ae * C49272 * C49671 +
         C49272 *
             (ae * C49671 +
              C49272 *
                  (3 * C49642 + be * C49643 +
                   C49273 * (2 * C49636 + be * C49638 +
                             C49273 * (C49305 + be * C49273 * C49344 +
                                       C49273 * (be * C49344 +
                                                 C49273 * std::pow(C49276, 8) *
                                                     bs[8] * C49278)))))) /
        C49150;
    const double C20852 =
        (ae * (4 * C49536 + C49273 * C49671 +
               (3 * C49529 + C49273 * C49663) * be) +
         C49272 *
             (4 * C49646 + be * C49647 +
              C49273 *
                  (3 * C49642 + be * C49643 +
                   C49273 * (2 * C49636 + be * C49638 +
                             C49273 * (C49305 + be * C49273 * C49344 +
                                       C49273 * (be * C49344 +
                                                 C49273 * std::pow(C49276, 8) *
                                                     bs[8] * C49278)))))) /
        C49150;
    const double C20418 =
        (5 * (3 * C49469 + C49273 * C49536 + C49860 * be) +
         C49273 * (4 * C49536 + C49273 * C49671 + C49958 * be) +
         (4 * C49860 + C49273 * C49958) * be) /
        C49148;
    const double C20520 =
        (3 * C49469 + C49273 * C49536 + C49860 * be + C49671 * C49565) / C49148;
    const double C20850 =
        (C49272 * (4 * C49536 + C49273 * C49671 + C49958 * be)) / C49148;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50170 * C50395 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C50170 * C50206) *
              C50438 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C50170 * C50395 +
           (((C8085 - C8084 + C8087 - C8086) * C118 +
             (C8089 - C8088 + C8091 - C8090) * C50266) *
                C50436 +
            ((C8093 - C8092 + C8095 - C8094) * C118 +
             (C8097 - C8096 + C8099 - C8098) * C50266) *
                C50437 +
            ((C8444 - C8445 + C8446 - C8447) * C118 +
             (C8448 - C8449 + C8450 - C8451) * C50266) *
                C7884) *
               C50170 * C50206) *
              C50439 +
          ((C7936 * C50436 +
            ((C7905 - C7904 + C7907 - C7906) * C118 +
             (C7909 - C7908 + C7911 - C7910) * C50266) *
                C50437 +
            ((C7912 - C7913 + C7914 - C7915) * C118 +
             (C7916 - C7917 + C7918 - C7919) * C50266) *
                C7884) *
               C50170 * C50395 +
           (C8456 * C50436 +
            ((C8445 - C8444 + C8447 - C8446) * C118 +
             (C8449 - C8448 + C8451 - C8450) * C50266) *
                C50437 +
            ((C7885 * C298 - C50408 * C316 + C7886 * C299 - C50302 * C318) *
                 C118 +
             (C7885 * C317 - C50408 * C328 + C7886 * C319 - C50302 * C329) *
                 C50266) *
                C7884) *
               C50170 * C50206) *
              C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C118 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C50266) *
                 C50436 +
             ((C7888 - C7889 + C7890 - C7891) * C118 +
              (C7892 - C7893 + C7894 - C7895) * C50266) *
                 C50437 +
             C7936 * C7884) *
                C50396 +
            (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                  C118 +
              (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                  C50266) *
                 C50436 +
             ((C8262 - C8263 + C8264 - C8265) * C118 +
              (C8266 - C8267 + C8268 - C8269) * C50266) *
                 C50437 +
             C8619 * C7884) *
                C50234) *
               C50395 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C118 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C50266) *
                 C50436 +
             ((C8084 - C8085 + C8086 - C8087) * C118 +
              (C8088 - C8089 + C8090 - C8091) * C50266) *
                 C50437 +
             C8456 * C7884) *
                C50396 +
            (((C50408 * C893 - C7885 * C888 + C50302 * C1559 - C7886 * C1555) *
                  C118 +
              (C50408 * C903 - C7885 * C894 + C50302 * C1567 - C7886 * C1560) *
                  C50266) *
                 C50436 +
             ((C8814 - C8815 + C8816 - C8817) * C118 +
              (C8818 - C8819 + C8820 - C8821) * C50266) *
                 C50437 +
             ((C8822 - C8823 + C8824 - C8825) * C118 +
              (C8826 - C8827 + C8828 - C8829) * C50266) *
                 C7884) *
                C50234) *
               C50206) *
              C288 +
          (((((C7889 - C7888 + C7891 - C7890) * C118 +
              (C7893 - C7892 + C7895 - C7894) * C50266) *
                 C50436 +
             ((C7897 - C7896 + C7899 - C7898) * C118 +
              (C7901 - C7900 + C7903 - C7902) * C50266) *
                 C50437 +
             C7937 * C7884) *
                C50396 +
            (((C8263 - C8262 + C8265 - C8264) * C118 +
              (C8267 - C8266 + C8269 - C8268) * C50266) *
                 C50436 +
             ((C8271 - C8270 + C8273 - C8272) * C118 +
              (C8275 - C8274 + C8277 - C8276) * C50266) *
                 C50437 +
             ((C8607 - C8608 + C8609 - C8610) * C118 +
              (C8611 - C8612 + C8613 - C8614) * C50266) *
                 C7884) *
                C50234) *
               C50395 +
           ((((C8085 - C8084 + C8087 - C8086) * C118 +
              (C8089 - C8088 + C8091 - C8090) * C50266) *
                 C50436 +
             ((C8093 - C8092 + C8095 - C8094) * C118 +
              (C8097 - C8096 + C8099 - C8098) * C50266) *
                 C50437 +
             ((C8444 - C8445 + C8446 - C8447) * C118 +
              (C8448 - C8449 + C8450 - C8451) * C50266) *
                 C7884) *
                C50396 +
            (((C8815 - C8814 + C8817 - C8816) * C118 +
              (C8819 - C8818 + C8821 - C8820) * C50266) *
                 C50436 +
             ((C8823 - C8822 + C8825 - C8824) * C118 +
              (C8827 - C8826 + C8829 - C8828) * C50266) *
                 C50437 +
             ((C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                  C118 +
              (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                  C50266) *
                 C7884) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50170 * C285 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            ((C8092 - C8093 + C8094 - C8095) * C118 +
             (C8096 - C8097 + C8098 - C8099) * C50266) *
                C7884) *
               C50170 * C286 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C118 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50266) *
                C50436 +
            ((C8100 - C8101 + C8102 - C8103) * C118 +
             (C8104 - C8105 + C8106 - C8107) * C50266) *
                C50437 +
            ((C8108 - C8109 + C8110 - C8111) * C118 +
             (C8112 - C8113 + C8114 - C8115) * C50266) *
                C7884) *
               C50170 * C287) *
              C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C50170 * C285 +
           (((C8085 - C8084 + C8087 - C8086) * C118 +
             (C8089 - C8088 + C8091 - C8090) * C50266) *
                C50436 +
            ((C8093 - C8092 + C8095 - C8094) * C118 +
             (C8097 - C8096 + C8099 - C8098) * C50266) *
                C50437 +
            ((C50408 * C306 - C7885 * C293 + C50302 * C314 - C7886 * C297) *
                 C118 +
             (C50408 * C323 - C7885 * C307 + C50302 * C327 - C7886 * C315) *
                 C50266) *
                C7884) *
               C50170 * C286 +
           (((C8101 - C8100 + C8103 - C8102) * C118 +
             (C8105 - C8104 + C8107 - C8106) * C50266) *
                C50436 +
            ((C8109 - C8108 + C8111 - C8110) * C118 +
             (C8113 - C8112 + C8115 - C8114) * C50266) *
                C50437 +
            ((C7885 * C297 - C50408 * C314 + C7886 * C1097 - C50302 * C1104) *
                 C118 +
             (C7885 * C315 - C50408 * C327 + C7886 * C1105 - C50302 * C1109) *
                 C50266) *
                C7884) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C118 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50266) *
               C50436 +
           ((C7888 - C7889 + C7890 - C7891) * C118 +
            (C7892 - C7893 + C7894 - C7895) * C50266) *
               C50437 +
           C7936 * C7884) *
              C50170 * C50154 * C113 +
          (((C7889 - C7888 + C7891 - C7890) * C118 +
            (C7893 - C7892 + C7895 - C7894) * C50266) *
               C50436 +
           ((C7897 - C7896 + C7899 - C7898) * C118 +
            (C7901 - C7900 + C7903 - C7902) * C50266) *
               C50437 +
           C7937 * C7884) *
              C50170 * C50154 * C114 +
          (C7936 * C50436 +
           ((C7905 - C7904 + C7907 - C7906) * C118 +
            (C7909 - C7908 + C7911 - C7910) * C50266) *
               C50437 +
           ((C7912 - C7913 + C7914 - C7915) * C118 +
            (C7916 - C7917 + C7918 - C7919) * C50266) *
               C7884) *
              C50170 * C50154 * C115 +
          (C7937 * C50436 +
           ((C7913 - C7912 + C7915 - C7914) * C118 +
            (C7917 - C7916 + C7919 - C7918) * C50266) *
               C50437 +
           ((C7885 * C124 - C50408 * C136 + C7886 * C622 - C50302 * C623) *
                C118 +
            (C7885 * C137 - C50408 * C145 + C7886 * C624 - C50302 * C625) *
                C50266) *
               C7884) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C452 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            ((C8270 - C8271 + C8272 - C8273) * C118 +
             (C8274 - C8275 + C8276 - C8277) * C50266) *
                C7884) *
               C453 +
           (((C50408 * C473 - C7885 * C459 + C50302 * C1212 - C7886 * C1208) *
                 C118 +
             (C50408 * C489 - C7885 * C474 + C50302 * C1220 - C7886 * C1213) *
                 C50266) *
                C50436 +
            ((C8278 - C8279 + C8280 - C8281) * C118 +
             (C8282 - C8283 + C8284 - C8285) * C50266) *
                C50437 +
            ((C8286 - C8287 + C8288 - C8289) * C118 +
             (C8290 - C8291 + C8292 - C8293) * C50266) *
                C7884) *
               C454) *
              C50154 * C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C452 +
           (((C8263 - C8262 + C8265 - C8264) * C118 +
             (C8267 - C8266 + C8269 - C8268) * C50266) *
                C50436 +
            ((C8271 - C8270 + C8273 - C8272) * C118 +
             (C8275 - C8274 + C8277 - C8276) * C50266) *
                C50437 +
            ((C50408 * C471 - C7885 * C458 + C50302 * C899 - C7886 * C891) *
                 C118 +
             (C50408 * C488 - C7885 * C472 + C50302 * C906 - C7886 * C900) *
                 C50266) *
                C7884) *
               C453 +
           (((C8279 - C8278 + C8281 - C8280) * C118 +
             (C8283 - C8282 + C8285 - C8284) * C50266) *
                C50436 +
            ((C8287 - C8286 + C8289 - C8288) * C118 +
             (C8291 - C8290 + C8293 - C8292) * C50266) *
                C50437 +
            ((C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
                 C118 +
             (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
                 C50266) *
                C7884) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50396 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C50234) *
              C50154 * C50438 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C50396 +
           (((C8263 - C8262 + C8265 - C8264) * C118 +
             (C8267 - C8266 + C8269 - C8268) * C50266) *
                C50436 +
            ((C8271 - C8270 + C8273 - C8272) * C118 +
             (C8275 - C8274 + C8277 - C8276) * C50266) *
                C50437 +
            ((C8607 - C8608 + C8609 - C8610) * C118 +
             (C8611 - C8612 + C8613 - C8614) * C50266) *
                C7884) *
               C50234) *
              C50154 * C50439 +
          ((C7936 * C50436 +
            ((C7905 - C7904 + C7907 - C7906) * C118 +
             (C7909 - C7908 + C7911 - C7910) * C50266) *
                C50437 +
            ((C7912 - C7913 + C7914 - C7915) * C118 +
             (C7916 - C7917 + C7918 - C7919) * C50266) *
                C7884) *
               C50396 +
           (C8619 * C50436 +
            ((C8608 - C8607 + C8610 - C8609) * C118 +
             (C8612 - C8611 + C8614 - C8613) * C50266) *
                C50437 +
            ((C7885 * C463 - C50408 * C481 + C7886 * C892 - C50302 * C901) *
                 C118 +
             (C7885 * C482 - C50408 * C493 + C7886 * C902 - C50302 * C907) *
                 C50266) *
                C7884) *
               C50234) *
              C50154 * C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C118 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50266) *
               C50436 +
           ((C7888 - C7889 + C7890 - C7891) * C118 +
            (C7892 - C7893 + C7894 - C7895) * C50266) *
               C50437 +
           C7936 * C7884) *
              C50170 * C50154 * C113 +
          (((C7889 - C7888 + C7891 - C7890) * C118 +
            (C7893 - C7892 + C7895 - C7894) * C50266) *
               C50436 +
           ((C7897 - C7896 + C7899 - C7898) * C118 +
            (C7901 - C7900 + C7903 - C7902) * C50266) *
               C50437 +
           C7937 * C7884) *
              C50170 * C50154 * C114 +
          (C7936 * C50436 +
           ((C7905 - C7904 + C7907 - C7906) * C118 +
            (C7909 - C7908 + C7911 - C7910) * C50266) *
               C50437 +
           ((C7912 - C7913 + C7914 - C7915) * C118 +
            (C7916 - C7917 + C7918 - C7919) * C50266) *
               C7884) *
              C50170 * C50154 * C115 +
          (C7937 * C50436 +
           ((C7913 - C7912 + C7915 - C7914) * C118 +
            (C7917 - C7916 + C7919 - C7918) * C50266) *
               C50437 +
           ((C7885 * C124 - C50408 * C136 + C7886 * C622 - C50302 * C623) *
                C118 +
            (C7885 * C137 - C50408 * C145 + C7886 * C624 - C50302 * C625) *
                C50266) *
               C7884) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50170 * C285 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            ((C8092 - C8093 + C8094 - C8095) * C118 +
             (C8096 - C8097 + C8098 - C8099) * C50266) *
                C7884) *
               C50170 * C286 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C118 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50266) *
                C50436 +
            ((C8100 - C8101 + C8102 - C8103) * C118 +
             (C8104 - C8105 + C8106 - C8107) * C50266) *
                C50437 +
            ((C8108 - C8109 + C8110 - C8111) * C118 +
             (C8112 - C8113 + C8114 - C8115) * C50266) *
                C7884) *
               C50170 * C287) *
              C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C50170 * C285 +
           (((C8085 - C8084 + C8087 - C8086) * C118 +
             (C8089 - C8088 + C8091 - C8090) * C50266) *
                C50436 +
            ((C8093 - C8092 + C8095 - C8094) * C118 +
             (C8097 - C8096 + C8099 - C8098) * C50266) *
                C50437 +
            ((C50408 * C306 - C7885 * C293 + C50302 * C314 - C7886 * C297) *
                 C118 +
             (C50408 * C323 - C7885 * C307 + C50302 * C327 - C7886 * C315) *
                 C50266) *
                C7884) *
               C50170 * C286 +
           (((C8101 - C8100 + C8103 - C8102) * C118 +
             (C8105 - C8104 + C8107 - C8106) * C50266) *
                C50436 +
            ((C8109 - C8108 + C8111 - C8110) * C118 +
             (C8113 - C8112 + C8115 - C8114) * C50266) *
                C50437 +
            ((C7885 * C297 - C50408 * C314 + C7886 * C1097 - C50302 * C1104) *
                 C118 +
             (C7885 * C315 - C50408 * C327 + C7886 * C1105 - C50302 * C1109) *
                 C50266) *
                C7884) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50170 * C50440 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C50170 * C50441 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C118 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50266) *
                C50436 +
            ((C8100 - C8101 + C8102 - C8103) * C118 +
             (C8104 - C8105 + C8106 - C8107) * C50266) *
                C50437 +
            ((C8108 - C8109 + C8110 - C8111) * C118 +
             (C8112 - C8113 + C8114 - C8115) * C50266) *
                C7884) *
               C50170 * C1324) *
              C50387 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C50170 * C50440 +
           (((C8085 - C8084 + C8087 - C8086) * C118 +
             (C8089 - C8088 + C8091 - C8090) * C50266) *
                C50436 +
            ((C8093 - C8092 + C8095 - C8094) * C118 +
             (C8097 - C8096 + C8099 - C8098) * C50266) *
                C50437 +
            ((C8444 - C8445 + C8446 - C8447) * C118 +
             (C8448 - C8449 + C8450 - C8451) * C50266) *
                C7884) *
               C50170 * C50441 +
           (((C8101 - C8100 + C8103 - C8102) * C118 +
             (C8105 - C8104 + C8107 - C8106) * C50266) *
                C50436 +
            ((C8109 - C8108 + C8111 - C8110) * C118 +
             (C8113 - C8112 + C8115 - C8114) * C50266) *
                C50437 +
            ((C7885 * C297 - C50408 * C314 + C7886 * C1097 - C50302 * C1104) *
                 C118 +
             (C7885 * C315 - C50408 * C327 + C7886 * C1105 - C50302 * C1109) *
                 C50266) *
                C7884) *
               C50170 * C1324) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50396 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C50234) *
              C50440 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C50396 +
           (((C50408 * C893 - C7885 * C888 + C50302 * C1559 - C7886 * C1555) *
                 C118 +
             (C50408 * C903 - C7885 * C894 + C50302 * C1567 - C7886 * C1560) *
                 C50266) *
                C50436 +
            ((C8814 - C8815 + C8816 - C8817) * C118 +
             (C8818 - C8819 + C8820 - C8821) * C50266) *
                C50437 +
            ((C8822 - C8823 + C8824 - C8825) * C118 +
             (C8826 - C8827 + C8828 - C8829) * C50266) *
                C7884) *
               C50234) *
              C50441 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C118 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50266) *
                C50436 +
            ((C8100 - C8101 + C8102 - C8103) * C118 +
             (C8104 - C8105 + C8106 - C8107) * C50266) *
                C50437 +
            ((C8108 - C8109 + C8110 - C8111) * C118 +
             (C8112 - C8113 + C8114 - C8115) * C50266) *
                C7884) *
               C50396 +
           (((C7885 * C1555 - C50408 * C1559 + C7886 * C3200 - C50302 * C3203) *
                 C118 +
             (C7885 * C1560 - C50408 * C1567 + C7886 * C3204 - C50302 * C3209) *
                 C50266) *
                C50436 +
            ((C7885 * C1556 - C50408 * C1561 + C7886 * C3201 - C50302 * C3205) *
                 C118 +
             (C7885 * C1562 - C50408 * C1568 + C7886 * C3206 - C50302 * C3210) *
                 C50266) *
                C50437 +
            ((C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C118 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50266) *
                C7884) *
               C50234) *
              C1324) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C118 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50266) *
               C50436 +
           ((C7888 - C7889 + C7890 - C7891) * C118 +
            (C7892 - C7893 + C7894 - C7895) * C50266) *
               C50437 +
           C7936 * C7884) *
              C50170 * C1089 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C118 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50266) *
               C50436 +
           ((C8084 - C8085 + C8086 - C8087) * C118 +
            (C8088 - C8089 + C8090 - C8091) * C50266) *
               C50437 +
           C8456 * C7884) *
              C50170 * C1090 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C118 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50266) *
               C50436 +
           ((C8100 - C8101 + C8102 - C8103) * C118 +
            (C8104 - C8105 + C8106 - C8107) * C50266) *
               C50437 +
           ((C8108 - C8109 + C8110 - C8111) * C118 +
            (C8112 - C8113 + C8114 - C8115) * C50266) *
               C7884) *
              C50170 * C1091 +
          (((C7885 * C1094 - C50408 * C1098 + C7886 * C2472 - C50302 * C2475) *
                C118 +
            (C7885 * C1099 - C50408 * C1106 + C7886 * C2476 - C50302 * C2481) *
                C50266) *
               C50436 +
           ((C7885 * C1095 - C50408 * C1100 + C7886 * C2473 - C50302 * C2477) *
                C118 +
            (C7885 * C1101 - C50408 * C1107 + C7886 * C2478 - C50302 * C2482) *
                C50266) *
               C50437 +
           ((C7885 * C1096 - C50408 * C1102 + C7886 * C2474 - C50302 * C2479) *
                C118 +
            (C7885 * C1103 - C50408 * C1108 + C7886 * C2480 - C50302 * C2483) *
                C50266) *
               C7884) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50170 * C1018 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C50170 * C50206) *
              C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C50170 * C1018 +
           (((C8085 - C8084 + C8087 - C8086) * C118 +
             (C8089 - C8088 + C8091 - C8090) * C50266) *
                C50436 +
            ((C8093 - C8092 + C8095 - C8094) * C118 +
             (C8097 - C8096 + C8099 - C8098) * C50266) *
                C50437 +
            ((C8444 - C8445 + C8446 - C8447) * C118 +
             (C8448 - C8449 + C8450 - C8451) * C50266) *
                C7884) *
               C50170 * C50206) *
              C1021 +
          ((C7936 * C50436 +
            ((C7905 - C7904 + C7907 - C7906) * C118 +
             (C7909 - C7908 + C7911 - C7910) * C50266) *
                C50437 +
            ((C7912 - C7913 + C7914 - C7915) * C118 +
             (C7916 - C7917 + C7918 - C7919) * C50266) *
                C7884) *
               C50170 * C1018 +
           (C8456 * C50436 +
            ((C8445 - C8444 + C8447 - C8446) * C118 +
             (C8449 - C8448 + C8451 - C8450) * C50266) *
                C50437 +
            ((C7885 * C298 - C50408 * C316 + C7886 * C299 - C50302 * C318) *
                 C118 +
             (C7885 * C317 - C50408 * C328 + C7886 * C319 - C50302 * C329) *
                 C50266) *
                C7884) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C452 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C453 +
           (((C50408 * C473 - C7885 * C459 + C50302 * C1212 - C7886 * C1208) *
                 C118 +
             (C50408 * C489 - C7885 * C474 + C50302 * C1220 - C7886 * C1213) *
                 C50266) *
                C50436 +
            ((C8278 - C8279 + C8280 - C8281) * C118 +
             (C8282 - C8283 + C8284 - C8285) * C50266) *
                C50437 +
            ((C8286 - C8287 + C8288 - C8289) * C118 +
             (C8290 - C8291 + C8292 - C8293) * C50266) *
                C7884) *
               C454) *
              C1018 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C452 +
           (((C50408 * C893 - C7885 * C888 + C50302 * C1559 - C7886 * C1555) *
                 C118 +
             (C50408 * C903 - C7885 * C894 + C50302 * C1567 - C7886 * C1560) *
                 C50266) *
                C50436 +
            ((C8814 - C8815 + C8816 - C8817) * C118 +
             (C8818 - C8819 + C8820 - C8821) * C50266) *
                C50437 +
            ((C8822 - C8823 + C8824 - C8825) * C118 +
             (C8826 - C8827 + C8828 - C8829) * C50266) *
                C7884) *
               C453 +
           (((C7885 * C1208 - C50408 * C1212 + C7886 * C2654 - C50302 * C2657) *
                 C118 +
             (C7885 * C1213 - C50408 * C1220 + C7886 * C2658 - C50302 * C2663) *
                 C50266) *
                C50436 +
            ((C7885 * C1209 - C50408 * C1214 + C7886 * C2655 - C50302 * C2659) *
                 C118 +
             (C7885 * C1215 - C50408 * C1221 + C7886 * C2660 - C50302 * C2664) *
                 C50266) *
                C50437 +
            ((C7885 * C1210 - C50408 * C1216 + C7886 * C2656 - C50302 * C2661) *
                 C118 +
             (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 - C50302 * C2665) *
                 C50266) *
                C7884) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C118 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C50266) *
                 C50436 +
             ((C7888 - C7889 + C7890 - C7891) * C118 +
              (C7892 - C7893 + C7894 - C7895) * C50266) *
                 C50437 +
             C7936 * C7884) *
                C50396 +
            (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                  C118 +
              (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                  C50266) *
                 C50436 +
             ((C8262 - C8263 + C8264 - C8265) * C118 +
              (C8266 - C8267 + C8268 - C8269) * C50266) *
                 C50437 +
             C8619 * C7884) *
                C50234) *
               C1018 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C118 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C50266) *
                 C50436 +
             ((C8084 - C8085 + C8086 - C8087) * C118 +
              (C8088 - C8089 + C8090 - C8091) * C50266) *
                 C50437 +
             C8456 * C7884) *
                C50396 +
            (((C50408 * C893 - C7885 * C888 + C50302 * C1559 - C7886 * C1555) *
                  C118 +
              (C50408 * C903 - C7885 * C894 + C50302 * C1567 - C7886 * C1560) *
                  C50266) *
                 C50436 +
             ((C8814 - C8815 + C8816 - C8817) * C118 +
              (C8818 - C8819 + C8820 - C8821) * C50266) *
                 C50437 +
             ((C8822 - C8823 + C8824 - C8825) * C118 +
              (C8826 - C8827 + C8828 - C8829) * C50266) *
                 C7884) *
                C50234) *
               C50206) *
              C50387 +
          (((((C7889 - C7888 + C7891 - C7890) * C118 +
              (C7893 - C7892 + C7895 - C7894) * C50266) *
                 C50436 +
             ((C7897 - C7896 + C7899 - C7898) * C118 +
              (C7901 - C7900 + C7903 - C7902) * C50266) *
                 C50437 +
             C7937 * C7884) *
                C50396 +
            (((C8263 - C8262 + C8265 - C8264) * C118 +
              (C8267 - C8266 + C8269 - C8268) * C50266) *
                 C50436 +
             ((C8271 - C8270 + C8273 - C8272) * C118 +
              (C8275 - C8274 + C8277 - C8276) * C50266) *
                 C50437 +
             ((C8607 - C8608 + C8609 - C8610) * C118 +
              (C8611 - C8612 + C8613 - C8614) * C50266) *
                 C7884) *
                C50234) *
               C1018 +
           ((((C8085 - C8084 + C8087 - C8086) * C118 +
              (C8089 - C8088 + C8091 - C8090) * C50266) *
                 C50436 +
             ((C8093 - C8092 + C8095 - C8094) * C118 +
              (C8097 - C8096 + C8099 - C8098) * C50266) *
                 C50437 +
             ((C8444 - C8445 + C8446 - C8447) * C118 +
              (C8448 - C8449 + C8450 - C8451) * C50266) *
                 C7884) *
                C50396 +
            (((C8815 - C8814 + C8817 - C8816) * C118 +
              (C8819 - C8818 + C8821 - C8820) * C50266) *
                 C50436 +
             ((C8823 - C8822 + C8825 - C8824) * C118 +
              (C8827 - C8826 + C8829 - C8828) * C50266) *
                 C50437 +
             ((C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                  C118 +
              (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                  C50266) *
                 C7884) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50170 * C1018 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C50170 * C50206) *
              C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C50170 * C1018 +
           (((C8085 - C8084 + C8087 - C8086) * C118 +
             (C8089 - C8088 + C8091 - C8090) * C50266) *
                C50436 +
            ((C8093 - C8092 + C8095 - C8094) * C118 +
             (C8097 - C8096 + C8099 - C8098) * C50266) *
                C50437 +
            ((C8444 - C8445 + C8446 - C8447) * C118 +
             (C8448 - C8449 + C8450 - C8451) * C50266) *
                C7884) *
               C50170 * C50206) *
              C1021 +
          ((C7936 * C50436 +
            ((C7905 - C7904 + C7907 - C7906) * C118 +
             (C7909 - C7908 + C7911 - C7910) * C50266) *
                C50437 +
            ((C7912 - C7913 + C7914 - C7915) * C118 +
             (C7916 - C7917 + C7918 - C7919) * C50266) *
                C7884) *
               C50170 * C1018 +
           (C8456 * C50436 +
            ((C8445 - C8444 + C8447 - C8446) * C118 +
             (C8449 - C8448 + C8451 - C8450) * C50266) *
                C50437 +
            ((C7885 * C298 - C50408 * C316 + C7886 * C299 - C50302 * C318) *
                 C118 +
             (C7885 * C317 - C50408 * C328 + C7886 * C319 - C50302 * C329) *
                 C50266) *
                C7884) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C118 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50266) *
               C50436 +
           ((C7888 - C7889 + C7890 - C7891) * C118 +
            (C7892 - C7893 + C7894 - C7895) * C50266) *
               C50437 +
           C7936 * C7884) *
              C50170 * C1089 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C118 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50266) *
               C50436 +
           ((C8084 - C8085 + C8086 - C8087) * C118 +
            (C8088 - C8089 + C8090 - C8091) * C50266) *
               C50437 +
           C8456 * C7884) *
              C50170 * C1090 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C118 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50266) *
               C50436 +
           ((C8100 - C8101 + C8102 - C8103) * C118 +
            (C8104 - C8105 + C8106 - C8107) * C50266) *
               C50437 +
           ((C8108 - C8109 + C8110 - C8111) * C118 +
            (C8112 - C8113 + C8114 - C8115) * C50266) *
               C7884) *
              C50170 * C1091 +
          (((C7885 * C1094 - C50408 * C1098 + C7886 * C2472 - C50302 * C2475) *
                C118 +
            (C7885 * C1099 - C50408 * C1106 + C7886 * C2476 - C50302 * C2481) *
                C50266) *
               C50436 +
           ((C7885 * C1095 - C50408 * C1100 + C7886 * C2473 - C50302 * C2477) *
                C118 +
            (C7885 * C1101 - C50408 * C1107 + C7886 * C2478 - C50302 * C2482) *
                C50266) *
               C50437 +
           ((C7885 * C1096 - C50408 * C1102 + C7886 * C2474 - C50302 * C2479) *
                C118 +
            (C7885 * C1103 - C50408 * C1108 + C7886 * C2480 - C50302 * C2483) *
                C50266) *
               C7884) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C118 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C50266) *
                 C50436 +
             ((C7888 - C7889 + C7890 - C7891) * C118 +
              (C7892 - C7893 + C7894 - C7895) * C50266) *
                 C50437 +
             C7936 * C7884) *
                C1669 +
            (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                  C118 +
              (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                  C50266) *
                 C50436 +
             ((C8262 - C8263 + C8264 - C8265) * C118 +
              (C8266 - C8267 + C8268 - C8269) * C50266) *
                 C50437 +
             C8619 * C7884) *
                C50234) *
               C50395 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C118 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C50266) *
                 C50436 +
             ((C8084 - C8085 + C8086 - C8087) * C118 +
              (C8088 - C8089 + C8090 - C8091) * C50266) *
                 C50437 +
             C8456 * C7884) *
                C1669 +
            (((C50408 * C893 - C7885 * C888 + C50302 * C1559 - C7886 * C1555) *
                  C118 +
              (C50408 * C903 - C7885 * C894 + C50302 * C1567 - C7886 * C1560) *
                  C50266) *
                 C50436 +
             ((C8814 - C8815 + C8816 - C8817) * C118 +
              (C8818 - C8819 + C8820 - C8821) * C50266) *
                 C50437 +
             ((C8822 - C8823 + C8824 - C8825) * C118 +
              (C8826 - C8827 + C8828 - C8829) * C50266) *
                 C7884) *
                C50234) *
               C50206) *
              C50387 +
          (((((C7889 - C7888 + C7891 - C7890) * C118 +
              (C7893 - C7892 + C7895 - C7894) * C50266) *
                 C50436 +
             ((C7897 - C7896 + C7899 - C7898) * C118 +
              (C7901 - C7900 + C7903 - C7902) * C50266) *
                 C50437 +
             C7937 * C7884) *
                C1669 +
            (((C8263 - C8262 + C8265 - C8264) * C118 +
              (C8267 - C8266 + C8269 - C8268) * C50266) *
                 C50436 +
             ((C8271 - C8270 + C8273 - C8272) * C118 +
              (C8275 - C8274 + C8277 - C8276) * C50266) *
                 C50437 +
             ((C8607 - C8608 + C8609 - C8610) * C118 +
              (C8611 - C8612 + C8613 - C8614) * C50266) *
                 C7884) *
                C50234) *
               C50395 +
           ((((C8085 - C8084 + C8087 - C8086) * C118 +
              (C8089 - C8088 + C8091 - C8090) * C50266) *
                 C50436 +
             ((C8093 - C8092 + C8095 - C8094) * C118 +
              (C8097 - C8096 + C8099 - C8098) * C50266) *
                 C50437 +
             ((C8444 - C8445 + C8446 - C8447) * C118 +
              (C8448 - C8449 + C8450 - C8451) * C50266) *
                 C7884) *
                C1669 +
            (((C8815 - C8814 + C8817 - C8816) * C118 +
              (C8819 - C8818 + C8821 - C8820) * C50266) *
                 C50436 +
             ((C8823 - C8822 + C8825 - C8824) * C118 +
              (C8827 - C8826 + C8829 - C8828) * C50266) *
                 C50437 +
             ((C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                  C118 +
              (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                  C50266) *
                 C7884) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50442 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C50443 +
           (((C50408 * C473 - C7885 * C459 + C50302 * C1212 - C7886 * C1208) *
                 C118 +
             (C50408 * C489 - C7885 * C474 + C50302 * C1220 - C7886 * C1213) *
                 C50266) *
                C50436 +
            ((C8278 - C8279 + C8280 - C8281) * C118 +
             (C8282 - C8283 + C8284 - C8285) * C50266) *
                C50437 +
            ((C8286 - C8287 + C8288 - C8289) * C118 +
             (C8290 - C8291 + C8292 - C8293) * C50266) *
                C7884) *
               C2085) *
              C50395 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C50442 +
           (((C50408 * C893 - C7885 * C888 + C50302 * C1559 - C7886 * C1555) *
                 C118 +
             (C50408 * C903 - C7885 * C894 + C50302 * C1567 - C7886 * C1560) *
                 C50266) *
                C50436 +
            ((C8814 - C8815 + C8816 - C8817) * C118 +
             (C8818 - C8819 + C8820 - C8821) * C50266) *
                C50437 +
            ((C8822 - C8823 + C8824 - C8825) * C118 +
             (C8826 - C8827 + C8828 - C8829) * C50266) *
                C7884) *
               C50443 +
           (((C7885 * C1208 - C50408 * C1212 + C7886 * C2654 - C50302 * C2657) *
                 C118 +
             (C7885 * C1213 - C50408 * C1220 + C7886 * C2658 - C50302 * C2663) *
                 C50266) *
                C50436 +
            ((C7885 * C1209 - C50408 * C1214 + C7886 * C2655 - C50302 * C2659) *
                 C118 +
             (C7885 * C1215 - C50408 * C1221 + C7886 * C2660 - C50302 * C2664) *
                 C50266) *
                C50437 +
            ((C7885 * C1210 - C50408 * C1216 + C7886 * C2656 - C50302 * C2661) *
                 C118 +
             (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 - C50302 * C2665) *
                 C50266) *
                C7884) *
               C2085) *
              C50206) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C1669 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C50234) *
              C285 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C1669 +
           (((C50408 * C893 - C7885 * C888 + C50302 * C1559 - C7886 * C1555) *
                 C118 +
             (C50408 * C903 - C7885 * C894 + C50302 * C1567 - C7886 * C1560) *
                 C50266) *
                C50436 +
            ((C8814 - C8815 + C8816 - C8817) * C118 +
             (C8818 - C8819 + C8820 - C8821) * C50266) *
                C50437 +
            ((C8822 - C8823 + C8824 - C8825) * C118 +
             (C8826 - C8827 + C8828 - C8829) * C50266) *
                C7884) *
               C50234) *
              C286 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C118 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50266) *
                C50436 +
            ((C8100 - C8101 + C8102 - C8103) * C118 +
             (C8104 - C8105 + C8106 - C8107) * C50266) *
                C50437 +
            ((C8108 - C8109 + C8110 - C8111) * C118 +
             (C8112 - C8113 + C8114 - C8115) * C50266) *
                C7884) *
               C1669 +
           (((C7885 * C1555 - C50408 * C1559 + C7886 * C3200 - C50302 * C3203) *
                 C118 +
             (C7885 * C1560 - C50408 * C1567 + C7886 * C3204 - C50302 * C3209) *
                 C50266) *
                C50436 +
            ((C7885 * C1556 - C50408 * C1561 + C7886 * C3201 - C50302 * C3205) *
                 C118 +
             (C7885 * C1562 - C50408 * C1568 + C7886 * C3206 - C50302 * C3210) *
                 C50266) *
                C50437 +
            ((C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C118 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50266) *
                C7884) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C1669 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C50234) *
              C50154 * C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C1669 +
           (((C8263 - C8262 + C8265 - C8264) * C118 +
             (C8267 - C8266 + C8269 - C8268) * C50266) *
                C50436 +
            ((C8271 - C8270 + C8273 - C8272) * C118 +
             (C8275 - C8274 + C8277 - C8276) * C50266) *
                C50437 +
            ((C8607 - C8608 + C8609 - C8610) * C118 +
             (C8611 - C8612 + C8613 - C8614) * C50266) *
                C7884) *
               C50234) *
              C50154 * C1021 +
          ((C7936 * C50436 +
            ((C7905 - C7904 + C7907 - C7906) * C118 +
             (C7909 - C7908 + C7911 - C7910) * C50266) *
                C50437 +
            ((C7912 - C7913 + C7914 - C7915) * C118 +
             (C7916 - C7917 + C7918 - C7919) * C50266) *
                C7884) *
               C1669 +
           (C8619 * C50436 +
            ((C8608 - C8607 + C8610 - C8609) * C118 +
             (C8612 - C8611 + C8614 - C8613) * C50266) *
                C50437 +
            ((C7885 * C463 - C50408 * C481 + C7886 * C892 - C50302 * C901) *
                 C118 +
             (C7885 * C482 - C50408 * C493 + C7886 * C902 - C50302 * C907) *
                 C50266) *
                C7884) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C118 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50266) *
               C50436 +
           ((C7888 - C7889 + C7890 - C7891) * C118 +
            (C7892 - C7893 + C7894 - C7895) * C50266) *
               C50437 +
           C7936 * C7884) *
              C1835 +
          (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                C118 +
            (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                C50266) *
               C50436 +
           ((C8262 - C8263 + C8264 - C8265) * C118 +
            (C8266 - C8267 + C8268 - C8269) * C50266) *
               C50437 +
           C8619 * C7884) *
              C1836 +
          (((C50408 * C473 - C7885 * C459 + C50302 * C1212 - C7886 * C1208) *
                C118 +
            (C50408 * C489 - C7885 * C474 + C50302 * C1220 - C7886 * C1213) *
                C50266) *
               C50436 +
           ((C8278 - C8279 + C8280 - C8281) * C118 +
            (C8282 - C8283 + C8284 - C8285) * C50266) *
               C50437 +
           ((C8286 - C8287 + C8288 - C8289) * C118 +
            (C8290 - C8291 + C8292 - C8293) * C50266) *
               C7884) *
              C1837 +
          (((C7885 * C1839 - C50408 * C1843 + C7886 * C4514 - C50302 * C4518) *
                C118 +
            (C7885 * C1844 - C50408 * C1851 + C7886 * C4520 - C50302 * C4526) *
                C50266) *
               C50436 +
           ((C7885 * C1840 - C50408 * C1845 + C7886 * C4516 - C50302 * C4522) *
                C118 +
            (C7885 * C1846 - C50408 * C1852 + C7886 * C4524 - C50302 * C4528) *
                C50266) *
               C50437 +
           ((C7885 * C1841 - C50408 * C1847 + C7886 * C5970 - C50302 * C5971) *
                C118 +
            (C7885 * C1848 - C50408 * C1853 + C7886 * C5972 - C50302 * C5973) *
                C50266) *
               C7884) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C50442 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C50443 +
           (((C50408 * C473 - C7885 * C459 + C50302 * C1212 - C7886 * C1208) *
                 C118 +
             (C50408 * C489 - C7885 * C474 + C50302 * C1220 - C7886 * C1213) *
                 C50266) *
                C50436 +
            ((C8278 - C8279 + C8280 - C8281) * C118 +
             (C8282 - C8283 + C8284 - C8285) * C50266) *
                C50437 +
            ((C8286 - C8287 + C8288 - C8289) * C118 +
             (C8290 - C8291 + C8292 - C8293) * C50266) *
                C7884) *
               C2085) *
              C50154 * C50387 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C50442 +
           (((C8263 - C8262 + C8265 - C8264) * C118 +
             (C8267 - C8266 + C8269 - C8268) * C50266) *
                C50436 +
            ((C8271 - C8270 + C8273 - C8272) * C118 +
             (C8275 - C8274 + C8277 - C8276) * C50266) *
                C50437 +
            ((C8607 - C8608 + C8609 - C8610) * C118 +
             (C8611 - C8612 + C8613 - C8614) * C50266) *
                C7884) *
               C50443 +
           (((C8279 - C8278 + C8281 - C8280) * C118 +
             (C8283 - C8282 + C8285 - C8284) * C50266) *
                C50436 +
            ((C8287 - C8286 + C8289 - C8288) * C118 +
             (C8291 - C8290 + C8293 - C8292) * C50266) *
                C50437 +
            ((C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
                 C118 +
             (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
                 C50266) *
                C7884) *
               C2085) *
              C50154 * C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C1669 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C50234) *
              C50154 * C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C118 +
             (C7893 - C7892 + C7895 - C7894) * C50266) *
                C50436 +
            ((C7897 - C7896 + C7899 - C7898) * C118 +
             (C7901 - C7900 + C7903 - C7902) * C50266) *
                C50437 +
            C7937 * C7884) *
               C1669 +
           (((C8263 - C8262 + C8265 - C8264) * C118 +
             (C8267 - C8266 + C8269 - C8268) * C50266) *
                C50436 +
            ((C8271 - C8270 + C8273 - C8272) * C118 +
             (C8275 - C8274 + C8277 - C8276) * C50266) *
                C50437 +
            ((C8607 - C8608 + C8609 - C8610) * C118 +
             (C8611 - C8612 + C8613 - C8614) * C50266) *
                C7884) *
               C50234) *
              C50154 * C1021 +
          ((C7936 * C50436 +
            ((C7905 - C7904 + C7907 - C7906) * C118 +
             (C7909 - C7908 + C7911 - C7910) * C50266) *
                C50437 +
            ((C7912 - C7913 + C7914 - C7915) * C118 +
             (C7916 - C7917 + C7918 - C7919) * C50266) *
                C7884) *
               C1669 +
           (C8619 * C50436 +
            ((C8608 - C8607 + C8610 - C8609) * C118 +
             (C8612 - C8611 + C8614 - C8613) * C50266) *
                C50437 +
            ((C7885 * C463 - C50408 * C481 + C7886 * C892 - C50302 * C901) *
                 C118 +
             (C7885 * C482 - C50408 * C493 + C7886 * C902 - C50302 * C907) *
                 C50266) *
                C7884) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C118 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50266) *
                C50436 +
            ((C7888 - C7889 + C7890 - C7891) * C118 +
             (C7892 - C7893 + C7894 - C7895) * C50266) *
                C50437 +
            C7936 * C7884) *
               C1669 +
           (((C7885 * C455 - C50408 * C465 + C7886 * C888 - C50302 * C893) *
                 C118 +
             (C7885 * C466 - C50408 * C485 + C7886 * C894 - C50302 * C903) *
                 C50266) *
                C50436 +
            ((C8262 - C8263 + C8264 - C8265) * C118 +
             (C8266 - C8267 + C8268 - C8269) * C50266) *
                C50437 +
            C8619 * C7884) *
               C50234) *
              C285 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C118 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50266) *
                C50436 +
            ((C8084 - C8085 + C8086 - C8087) * C118 +
             (C8088 - C8089 + C8090 - C8091) * C50266) *
                C50437 +
            C8456 * C7884) *
               C1669 +
           (((C50408 * C893 - C7885 * C888 + C50302 * C1559 - C7886 * C1555) *
                 C118 +
             (C50408 * C903 - C7885 * C894 + C50302 * C1567 - C7886 * C1560) *
                 C50266) *
                C50436 +
            ((C8814 - C8815 + C8816 - C8817) * C118 +
             (C8818 - C8819 + C8820 - C8821) * C50266) *
                C50437 +
            ((C8822 - C8823 + C8824 - C8825) * C118 +
             (C8826 - C8827 + C8828 - C8829) * C50266) *
                C7884) *
               C50234) *
              C286 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C118 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50266) *
                C50436 +
            ((C8100 - C8101 + C8102 - C8103) * C118 +
             (C8104 - C8105 + C8106 - C8107) * C50266) *
                C50437 +
            ((C8108 - C8109 + C8110 - C8111) * C118 +
             (C8112 - C8113 + C8114 - C8115) * C50266) *
                C7884) *
               C1669 +
           (((C7885 * C1555 - C50408 * C1559 + C7886 * C3200 - C50302 * C3203) *
                 C118 +
             (C7885 * C1560 - C50408 * C1567 + C7886 * C3204 - C50302 * C3209) *
                 C50266) *
                C50436 +
            ((C7885 * C1556 - C50408 * C1561 + C7886 * C3201 - C50302 * C3205) *
                 C118 +
             (C7885 * C1562 - C50408 * C1568 + C7886 * C3206 - C50302 * C3210) *
                 C50266) *
                C50437 +
            ((C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C118 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50266) *
                C7884) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C50170 * C50395 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C7885 * C888 - C50408 * C893 + C7886 * C1555 - C50302 * C1559) *
                 C10682 +
             (C7885 * C894 - C50408 * C903 + C7886 * C1560 - C50302 * C1567) *
                 C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 +
             (C8815 - C8814 + C8817 - C8816) * C10682 +
             (C8819 - C8818 + C8821 - C8820) * C50330) *
                C50114) *
               C50170 * C50206) *
              C50438 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C50170 * C50395 +
           (((C8085 - C8084 + C8087 - C8086) * C10681 +
             (C8089 - C8088 + C8091 - C8090) * C50409 +
             (C8814 - C8815 + C8816 - C8817) * C10682 +
             (C8818 - C8819 + C8820 - C8821) * C50330) *
                C2285 +
            ((C8093 - C8092 + C8095 - C8094) * C10681 +
             (C8097 - C8096 + C8099 - C8098) * C50409 +
             (C8822 - C8823 + C8824 - C8825) * C10682 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C50206) *
              C50439 +
          (((C7928 * C10681 + C7929 * C50409 +
             (C8271 - C8270 + C8273 - C8272) * C10682 +
             (C8275 - C8274 + C8277 - C8276) * C50330) *
                C2285 +
            ((C7905 - C7904 + C7907 - C7906) * C10681 +
             (C7909 - C7908 + C7911 - C7910) * C50409 +
             (C8607 - C8608 + C8609 - C8610) * C10682 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C50170 * C50395 +
           ((C8452 * C10681 + C8453 * C50409 +
             (C8823 - C8822 + C8825 - C8824) * C10682 +
             (C8827 - C8826 + C8829 - C8828) * C50330) *
                C2285 +
            ((C8445 - C8444 + C8447 - C8446) * C10681 +
             (C8449 - C8448 + C8451 - C8450) * C50409 +
             (C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                 C10682 +
             (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C10681 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C50409 +
              (C13778 - C13779 + C13780 - C13781) * C10682 +
              (C13782 - C13783 + C13784 - C13785) * C50330) *
                 C2285 +
             ((C7888 - C7889 + C7890 - C7891) * C10681 +
              (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
              C13819 * C50330) *
                 C50114) *
                C50396 +
            (((C13779 - C13778 + C13781 - C13780) * C10681 +
              (C13783 - C13782 + C13785 - C13784) * C50409 +
              (C13790 - C13791 + C13792 - C13793) * C10682 +
              (C13794 - C13795 + C13796 - C13797) * C50330) *
                 C2285 +
             (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
              C13823 * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C10681 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C50409 +
              (C14478 - C14479 + C14480 - C14481) * C10682 +
              (C14482 - C14483 + C14484 - C14485) * C50330) *
                 C2285 +
             ((C8084 - C8085 + C8086 - C8087) * C10681 +
              (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
              C14503 * C50330) *
                 C50114) *
                C50396 +
            (((C14479 - C14478 + C14481 - C14480) * C10681 +
              (C14483 - C14482 + C14485 - C14484) * C50409 +
              (C50408 * C1212 - C7885 * C1208 + C50302 * C2657 -
               C7886 * C2654) *
                  C10682 +
              (C50408 * C1220 - C7885 * C1213 + C50302 * C2663 -
               C7886 * C2658) *
                  C50330) *
                 C2285 +
             (C14504 * C10681 + C14505 * C50409 +
              (C14494 - C14495 + C14496 - C14497) * C10682 +
              (C14498 - C14499 + C14500 - C14501) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C288 +
          (((((C7889 - C7888 + C7891 - C7890) * C10681 +
              (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
              C13821 * C50330) *
                 C2285 +
             ((C7897 - C7896 + C7899 - C7898) * C10681 +
              (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
              C8616 * C50330) *
                 C50114) *
                C50396 +
            ((C13818 * C10681 + C13819 * C50409 + C13824 * C10682 +
              C13825 * C50330) *
                 C2285 +
             (C14218 * C10681 + C14219 * C50409 +
              (C8286 - C8287 + C8288 - C8289) * C10682 +
              (C8290 - C8291 + C8292 - C8293) * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C8085 - C8084 + C8087 - C8086) * C10681 +
              (C8089 - C8088 + C8091 - C8090) * C50409 + C14504 * C10682 +
              C14505 * C50330) *
                 C2285 +
             ((C8093 - C8092 + C8095 - C8094) * C10681 +
              (C8097 - C8096 + C8099 - C8098) * C50409 +
              (C8822 - C8823 + C8824 - C8825) * C10682 +
              (C8826 - C8827 + C8828 - C8829) * C50330) *
                 C50114) *
                C50396 +
            ((C14502 * C10681 + C14503 * C50409 +
              (C14495 - C14494 + C14497 - C14496) * C10682 +
              (C14499 - C14498 + C14501 - C14500) * C50330) *
                 C2285 +
             ((C8823 - C8822 + C8825 - C8824) * C10681 +
              (C8827 - C8826 + C8829 - C8828) * C50409 +
              (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 -
               C50302 * C2661) *
                  C10682 +
              (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C50408 * C465 - C7885 * C455 + C50302 * C893 - C7886 * C888) *
                 C10682 +
             (C50408 * C485 - C7885 * C466 + C50302 * C903 - C7886 * C894) *
                 C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 +
             (C8263 - C8262 + C8265 - C8264) * C10682 +
             (C8267 - C8266 + C8269 - C8268) * C50330) *
                C50114) *
               C50170 * C285 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C7885 * C888 - C50408 * C893 + C7886 * C1555 - C50302 * C1559) *
                 C10682 +
             (C7885 * C894 - C50408 * C903 + C7886 * C1560 - C50302 * C1567) *
                 C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 +
             (C8815 - C8814 + C8817 - C8816) * C10682 +
             (C8819 - C8818 + C8821 - C8820) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C10681 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50409 +
             (C50408 * C1559 - C7885 * C1555 + C50302 * C3203 - C7886 * C3200) *
                 C10682 +
             (C50408 * C1567 - C7885 * C1560 + C50302 * C3209 - C7886 * C3204) *
                 C50330) *
                C2285 +
            ((C8100 - C8101 + C8102 - C8103) * C10681 +
             (C8104 - C8105 + C8106 - C8107) * C50409 +
             (C13576 - C13577 + C13578 - C13579) * C10682 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 +
             (C8262 - C8263 + C8264 - C8265) * C10682 +
             (C8266 - C8267 + C8268 - C8269) * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C50170 * C285 +
           (((C8085 - C8084 + C8087 - C8086) * C10681 +
             (C8089 - C8088 + C8091 - C8090) * C50409 +
             (C8814 - C8815 + C8816 - C8817) * C10682 +
             (C8818 - C8819 + C8820 - C8821) * C50330) *
                C2285 +
            ((C8093 - C8092 + C8095 - C8094) * C10681 +
             (C8097 - C8096 + C8099 - C8098) * C50409 +
             (C8822 - C8823 + C8824 - C8825) * C10682 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C8101 - C8100 + C8103 - C8102) * C10681 +
             (C8105 - C8104 + C8107 - C8106) * C50409 +
             (C13577 - C13576 + C13579 - C13578) * C10682 +
             (C13581 - C13580 + C13583 - C13582) * C50330) *
                C2285 +
            ((C8109 - C8108 + C8111 - C8110) * C10681 +
             (C8113 - C8112 + C8115 - C8114) * C50409 +
             (C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C10682 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C10681 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50409 +
            (C50408 * C465 - C7885 * C455 + C50302 * C893 - C7886 * C888) *
                C10682 +
            (C50408 * C485 - C7885 * C466 + C50302 * C903 - C7886 * C894) *
                C50330) *
               C2285 +
           ((C7888 - C7889 + C7890 - C7891) * C10681 +
            (C7892 - C7893 + C7894 - C7895) * C50409 +
            (C8263 - C8262 + C8265 - C8264) * C10682 +
            (C8267 - C8266 + C8269 - C8268) * C50330) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C7889 - C7888 + C7891 - C7890) * C10681 +
            (C7893 - C7892 + C7895 - C7894) * C50409 +
            (C8262 - C8263 + C8264 - C8265) * C10682 +
            (C8266 - C8267 + C8268 - C8269) * C50330) *
               C2285 +
           ((C7897 - C7896 + C7899 - C7898) * C10681 +
            (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
            C8616 * C50330) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C7928 * C10681 + C7929 * C50409 +
            (C8271 - C8270 + C8273 - C8272) * C10682 +
            (C8275 - C8274 + C8277 - C8276) * C50330) *
               C2285 +
           ((C7905 - C7904 + C7907 - C7906) * C10681 +
            (C7909 - C7908 + C7911 - C7910) * C50409 +
            (C8607 - C8608 + C8609 - C8610) * C10682 +
            (C8611 - C8612 + C8613 - C8614) * C50330) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C7930 * C10681 + C7931 * C50409 +
            (C8608 - C8607 + C8610 - C8609) * C10682 +
            (C8612 - C8611 + C8614 - C8613) * C50330) *
               C2285 +
           ((C7913 - C7912 + C7915 - C7914) * C10681 +
            (C7917 - C7916 + C7919 - C7918) * C50409 +
            (C7885 * C463 - C50408 * C481 + C7886 * C892 - C50302 * C901) *
                C10682 +
            (C7885 * C482 - C50408 * C493 + C7886 * C902 - C50302 * C907) *
                C50330) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C452 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C453 +
           (((C13791 - C13790 + C13793 - C13792) * C10681 +
             (C13795 - C13794 + C13797 - C13796) * C50409 +
             (C50408 * C1843 - C7885 * C1839 + C50302 * C4518 - C7886 * C4514) *
                 C10682 +
             (C50408 * C1851 - C7885 * C1844 + C50302 * C4526 - C7886 * C4520) *
                 C50330) *
                C2285 +
            (C13824 * C10681 + C13825 * C50409 +
             (C13810 - C13811 + C13812 - C13813) * C10682 +
             (C13814 - C13815 + C13816 - C13817) * C50330) *
                C50114) *
               C454) *
              C50154 * C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C452 +
           ((C13818 * C10681 + C13819 * C50409 + C13824 * C10682 +
             C13825 * C50330) *
                C2285 +
            ((C8271 - C8270 + C8273 - C8272) * C10681 +
             (C8275 - C8274 + C8277 - C8276) * C50409 +
             (C8286 - C8287 + C8288 - C8289) * C10682 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C453 +
           ((C13822 * C10681 + C13823 * C50409 +
             (C13811 - C13810 + C13813 - C13812) * C10682 +
             (C13815 - C13814 + C13817 - C13816) * C50330) *
                C2285 +
            ((C8287 - C8286 + C8289 - C8288) * C10681 +
             (C8291 - C8290 + C8293 - C8292) * C50409 +
             (C7885 * C1841 - C50408 * C1847 + C7886 * C5970 - C50302 * C5971) *
                 C10682 +
             (C7885 * C1848 - C50408 * C1853 + C7886 * C5972 - C50302 * C5973) *
                 C50330) *
                C50114) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C50396 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C50154 * C50438 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C50396 +
           ((C13818 * C10681 + C13819 * C50409 + C13824 * C10682 +
             C13825 * C50330) *
                C2285 +
            (C14218 * C10681 + C14219 * C50409 +
             (C8286 - C8287 + C8288 - C8289) * C10682 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C50234) *
              C50154 * C50439 +
          (((C7928 * C10681 + C7929 * C50409 + C14218 * C10682 +
             C14219 * C50330) *
                C2285 +
            ((C7905 - C7904 + C7907 - C7906) * C10681 +
             (C7909 - C7908 + C7911 - C7910) * C50409 +
             (C8607 - C8608 + C8609 - C8610) * C10682 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C50396 +
           ((C8615 * C10681 + C8616 * C50409 +
             (C8287 - C8286 + C8289 - C8288) * C10682 +
             (C8291 - C8290 + C8293 - C8292) * C50330) *
                C2285 +
            ((C8608 - C8607 + C8610 - C8609) * C10681 +
             (C8612 - C8611 + C8614 - C8613) * C50409 +
             (C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
                 C10682 +
             (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C10681 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50409 +
            (C50408 * C465 - C7885 * C455 + C50302 * C893 - C7886 * C888) *
                C10682 +
            (C50408 * C485 - C7885 * C466 + C50302 * C903 - C7886 * C894) *
                C50330) *
               C2285 +
           ((C7888 - C7889 + C7890 - C7891) * C10681 +
            (C7892 - C7893 + C7894 - C7895) * C50409 +
            (C8263 - C8262 + C8265 - C8264) * C10682 +
            (C8267 - C8266 + C8269 - C8268) * C50330) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C7889 - C7888 + C7891 - C7890) * C10681 +
            (C7893 - C7892 + C7895 - C7894) * C50409 +
            (C8262 - C8263 + C8264 - C8265) * C10682 +
            (C8266 - C8267 + C8268 - C8269) * C50330) *
               C2285 +
           ((C7897 - C7896 + C7899 - C7898) * C10681 +
            (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
            C8616 * C50330) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C7928 * C10681 + C7929 * C50409 +
            (C8271 - C8270 + C8273 - C8272) * C10682 +
            (C8275 - C8274 + C8277 - C8276) * C50330) *
               C2285 +
           ((C7905 - C7904 + C7907 - C7906) * C10681 +
            (C7909 - C7908 + C7911 - C7910) * C50409 +
            (C8607 - C8608 + C8609 - C8610) * C10682 +
            (C8611 - C8612 + C8613 - C8614) * C50330) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C7930 * C10681 + C7931 * C50409 +
            (C8608 - C8607 + C8610 - C8609) * C10682 +
            (C8612 - C8611 + C8614 - C8613) * C50330) *
               C2285 +
           ((C7913 - C7912 + C7915 - C7914) * C10681 +
            (C7917 - C7916 + C7919 - C7918) * C50409 +
            (C7885 * C463 - C50408 * C481 + C7886 * C892 - C50302 * C901) *
                C10682 +
            (C7885 * C482 - C50408 * C493 + C7886 * C902 - C50302 * C907) *
                C50330) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C50408 * C465 - C7885 * C455 + C50302 * C893 - C7886 * C888) *
                 C10682 +
             (C50408 * C485 - C7885 * C466 + C50302 * C903 - C7886 * C894) *
                 C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 +
             (C8263 - C8262 + C8265 - C8264) * C10682 +
             (C8267 - C8266 + C8269 - C8268) * C50330) *
                C50114) *
               C50170 * C285 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C7885 * C888 - C50408 * C893 + C7886 * C1555 - C50302 * C1559) *
                 C10682 +
             (C7885 * C894 - C50408 * C903 + C7886 * C1560 - C50302 * C1567) *
                 C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 +
             (C8815 - C8814 + C8817 - C8816) * C10682 +
             (C8819 - C8818 + C8821 - C8820) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C10681 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50409 +
             (C50408 * C1559 - C7885 * C1555 + C50302 * C3203 - C7886 * C3200) *
                 C10682 +
             (C50408 * C1567 - C7885 * C1560 + C50302 * C3209 - C7886 * C3204) *
                 C50330) *
                C2285 +
            ((C8100 - C8101 + C8102 - C8103) * C10681 +
             (C8104 - C8105 + C8106 - C8107) * C50409 +
             (C13576 - C13577 + C13578 - C13579) * C10682 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 +
             (C8262 - C8263 + C8264 - C8265) * C10682 +
             (C8266 - C8267 + C8268 - C8269) * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C50170 * C285 +
           (((C8085 - C8084 + C8087 - C8086) * C10681 +
             (C8089 - C8088 + C8091 - C8090) * C50409 +
             (C8814 - C8815 + C8816 - C8817) * C10682 +
             (C8818 - C8819 + C8820 - C8821) * C50330) *
                C2285 +
            ((C8093 - C8092 + C8095 - C8094) * C10681 +
             (C8097 - C8096 + C8099 - C8098) * C50409 +
             (C8822 - C8823 + C8824 - C8825) * C10682 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C8101 - C8100 + C8103 - C8102) * C10681 +
             (C8105 - C8104 + C8107 - C8106) * C50409 +
             (C13577 - C13576 + C13579 - C13578) * C10682 +
             (C13581 - C13580 + C13583 - C13582) * C50330) *
                C2285 +
            ((C8109 - C8108 + C8111 - C8110) * C10681 +
             (C8113 - C8112 + C8115 - C8114) * C50409 +
             (C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C10682 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C50170 * C50440 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C14478 - C14479 + C14480 - C14481) * C10682 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
             C14503 * C50330) *
                C50114) *
               C50170 * C50441 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C10681 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50409 +
             (C50408 * C1559 - C7885 * C1555 + C50302 * C3203 - C7886 * C3200) *
                 C10682 +
             (C50408 * C1567 - C7885 * C1560 + C50302 * C3209 - C7886 * C3204) *
                 C50330) *
                C2285 +
            ((C8100 - C8101 + C8102 - C8103) * C10681 +
             (C8104 - C8105 + C8106 - C8107) * C50409 +
             (C13576 - C13577 + C13578 - C13579) * C10682 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C50170 * C1324) *
              C50387 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C50170 * C50440 +
           (((C8085 - C8084 + C8087 - C8086) * C10681 +
             (C8089 - C8088 + C8091 - C8090) * C50409 + C14504 * C10682 +
             C14505 * C50330) *
                C2285 +
            ((C8093 - C8092 + C8095 - C8094) * C10681 +
             (C8097 - C8096 + C8099 - C8098) * C50409 +
             (C8822 - C8823 + C8824 - C8825) * C10682 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C50441 +
           (((C8101 - C8100 + C8103 - C8102) * C10681 +
             (C8105 - C8104 + C8107 - C8106) * C50409 +
             (C13577 - C13576 + C13579 - C13578) * C10682 +
             (C13581 - C13580 + C13583 - C13582) * C50330) *
                C2285 +
            ((C8109 - C8108 + C8111 - C8110) * C10681 +
             (C8113 - C8112 + C8115 - C8114) * C50409 +
             (C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C10682 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C1324) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C50396 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C50440 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C14478 - C14479 + C14480 - C14481) * C10682 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
             C14503 * C50330) *
                C50114) *
               C50396 +
           (((C14479 - C14478 + C14481 - C14480) * C10681 +
             (C14483 - C14482 + C14485 - C14484) * C50409 +
             (C15024 - C15025 + C15026 - C15027) * C10682 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C2285 +
            (C14504 * C10681 + C14505 * C50409 +
             (C14494 - C14495 + C14496 - C14497) * C10682 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C50234) *
              C50441 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C10681 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50409 +
             (C15678 - C15679 + C15680 - C15681) * C10682 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C2285 +
            ((C8100 - C8101 + C8102 - C8103) * C10681 +
             (C8104 - C8105 + C8106 - C8107) * C50409 +
             (C13576 - C13577 + C13578 - C13579) * C10682 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C50396 +
           (((C15679 - C15678 + C15681 - C15680) * C10681 +
             (C15683 - C15682 + C15685 - C15684) * C50409 +
             (C7885 * C2654 - C50408 * C2657 + C7886 * C3622 - C50302 * C3624) *
                 C10682 +
             (C7885 * C2658 - C50408 * C2663 + C7886 * C3625 - C50302 * C3628) *
                 C50330) *
                C2285 +
            ((C13577 - C13576 + C13579 - C13578) * C10681 +
             (C13581 - C13580 + C13583 - C13582) * C50409 +
             (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                 C10682 +
             (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C1324) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C10681 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50409 +
            (C13778 - C13779 + C13780 - C13781) * C10682 +
            (C13782 - C13783 + C13784 - C13785) * C50330) *
               C2285 +
           ((C7888 - C7889 + C7890 - C7891) * C10681 +
            (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
            C13819 * C50330) *
               C50114) *
              C50170 * C1089 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C10681 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50409 +
            (C14478 - C14479 + C14480 - C14481) * C10682 +
            (C14482 - C14483 + C14484 - C14485) * C50330) *
               C2285 +
           ((C8084 - C8085 + C8086 - C8087) * C10681 +
            (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
            C14503 * C50330) *
               C50114) *
              C50170 * C1090 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C10681 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50409 +
            (C50408 * C1559 - C7885 * C1555 + C50302 * C3203 - C7886 * C3200) *
                C10682 +
            (C50408 * C1567 - C7885 * C1560 + C50302 * C3209 - C7886 * C3204) *
                C50330) *
               C2285 +
           ((C8100 - C8101 + C8102 - C8103) * C10681 +
            (C8104 - C8105 + C8106 - C8107) * C50409 +
            (C13576 - C13577 + C13578 - C13579) * C10682 +
            (C13580 - C13581 + C13582 - C13583) * C50330) *
               C50114) *
              C50170 * C1091 +
          (((C7885 * C1094 - C50408 * C1098 + C7886 * C2472 - C50302 * C2475) *
                C10681 +
            (C7885 * C1099 - C50408 * C1106 + C7886 * C2476 - C50302 * C2481) *
                C50409 +
            (C7885 * C3200 - C50408 * C3203 + C7886 * C4116 - C50302 * C4118) *
                C10682 +
            (C7885 * C3204 - C50408 * C3209 + C7886 * C4119 - C50302 * C4122) *
                C50330) *
               C2285 +
           ((C7885 * C1095 - C50408 * C1100 + C7886 * C2473 - C50302 * C2477) *
                C10681 +
            (C7885 * C1101 - C50408 * C1107 + C7886 * C2478 - C50302 * C2482) *
                C50409 +
            (C7885 * C3201 - C50408 * C3205 + C7886 * C4117 - C50302 * C4120) *
                C10682 +
            (C7885 * C3206 - C50408 * C3210 + C7886 * C4121 - C50302 * C4123) *
                C50330) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C14478 - C14479 + C14480 - C14481) * C10682 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
             C14503 * C50330) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C8085 - C8084 + C8087 - C8086) * C10681 +
             (C8089 - C8088 + C8091 - C8090) * C50409 + C14504 * C10682 +
             C14505 * C50330) *
                C2285 +
            ((C8093 - C8092 + C8095 - C8094) * C10681 +
             (C8097 - C8096 + C8099 - C8098) * C50409 +
             (C8822 - C8823 + C8824 - C8825) * C10682 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C7928 * C10681 + C7929 * C50409 + C14218 * C10682 +
             C14219 * C50330) *
                C2285 +
            ((C7905 - C7904 + C7907 - C7906) * C10681 +
             (C7909 - C7908 + C7911 - C7910) * C50409 +
             (C8607 - C8608 + C8609 - C8610) * C10682 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C50170 * C1018 +
           ((C8452 * C10681 + C8453 * C50409 +
             (C8823 - C8822 + C8825 - C8824) * C10682 +
             (C8827 - C8826 + C8829 - C8828) * C50330) *
                C2285 +
            ((C8445 - C8444 + C8447 - C8446) * C10681 +
             (C8449 - C8448 + C8451 - C8450) * C50409 +
             (C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                 C10682 +
             (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C452 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C453 +
           (((C13791 - C13790 + C13793 - C13792) * C10681 +
             (C13795 - C13794 + C13797 - C13796) * C50409 +
             (C50408 * C1843 - C7885 * C1839 + C50302 * C4518 - C7886 * C4514) *
                 C10682 +
             (C50408 * C1851 - C7885 * C1844 + C50302 * C4526 - C7886 * C4520) *
                 C50330) *
                C2285 +
            (C13824 * C10681 + C13825 * C50409 +
             (C13810 - C13811 + C13812 - C13813) * C10682 +
             (C13814 - C13815 + C13816 - C13817) * C50330) *
                C50114) *
               C454) *
              C1018 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C14478 - C14479 + C14480 - C14481) * C10682 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
             C14503 * C50330) *
                C50114) *
               C452 +
           (((C14479 - C14478 + C14481 - C14480) * C10681 +
             (C14483 - C14482 + C14485 - C14484) * C50409 +
             (C15024 - C15025 + C15026 - C15027) * C10682 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C2285 +
            (C14504 * C10681 + C14505 * C50409 +
             (C14494 - C14495 + C14496 - C14497) * C10682 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C453 +
           (((C15025 - C15024 + C15027 - C15026) * C10681 +
             (C15029 - C15028 + C15031 - C15030) * C50409 +
             (C7885 * C4514 - C50408 * C4518 + C7886 * C4515 - C50302 * C4519) *
                 C10682 +
             (C7885 * C4520 - C50408 * C4526 + C7886 * C4521 - C50302 * C4527) *
                 C50330) *
                C2285 +
            ((C14495 - C14494 + C14497 - C14496) * C10681 +
             (C14499 - C14498 + C14501 - C14500) * C50409 +
             (C7885 * C4516 - C50408 * C4522 + C7886 * C4517 - C50302 * C4523) *
                 C10682 +
             (C7885 * C4524 - C50408 * C4528 + C7886 * C4525 - C50302 * C4529) *
                 C50330) *
                C50114) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C10681 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C50409 +
              (C13778 - C13779 + C13780 - C13781) * C10682 +
              (C13782 - C13783 + C13784 - C13785) * C50330) *
                 C2285 +
             ((C7888 - C7889 + C7890 - C7891) * C10681 +
              (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
              C13819 * C50330) *
                 C50114) *
                C50396 +
            (((C13779 - C13778 + C13781 - C13780) * C10681 +
              (C13783 - C13782 + C13785 - C13784) * C50409 +
              (C13790 - C13791 + C13792 - C13793) * C10682 +
              (C13794 - C13795 + C13796 - C13797) * C50330) *
                 C2285 +
             (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
              C13823 * C50330) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C10681 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C50409 +
              (C14478 - C14479 + C14480 - C14481) * C10682 +
              (C14482 - C14483 + C14484 - C14485) * C50330) *
                 C2285 +
             ((C8084 - C8085 + C8086 - C8087) * C10681 +
              (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
              C14503 * C50330) *
                 C50114) *
                C50396 +
            (((C14479 - C14478 + C14481 - C14480) * C10681 +
              (C14483 - C14482 + C14485 - C14484) * C50409 +
              (C15024 - C15025 + C15026 - C15027) * C10682 +
              (C15028 - C15029 + C15030 - C15031) * C50330) *
                 C2285 +
             (C14504 * C10681 + C14505 * C50409 +
              (C14494 - C14495 + C14496 - C14497) * C10682 +
              (C14498 - C14499 + C14500 - C14501) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C7889 - C7888 + C7891 - C7890) * C10681 +
              (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
              C13821 * C50330) *
                 C2285 +
             ((C7897 - C7896 + C7899 - C7898) * C10681 +
              (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
              C8616 * C50330) *
                 C50114) *
                C50396 +
            ((C13818 * C10681 + C13819 * C50409 + C13824 * C10682 +
              C13825 * C50330) *
                 C2285 +
             (C14218 * C10681 + C14219 * C50409 +
              (C8286 - C8287 + C8288 - C8289) * C10682 +
              (C8290 - C8291 + C8292 - C8293) * C50330) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C8085 - C8084 + C8087 - C8086) * C10681 +
              (C8089 - C8088 + C8091 - C8090) * C50409 + C14504 * C10682 +
              C14505 * C50330) *
                 C2285 +
             ((C8093 - C8092 + C8095 - C8094) * C10681 +
              (C8097 - C8096 + C8099 - C8098) * C50409 +
              (C8822 - C8823 + C8824 - C8825) * C10682 +
              (C8826 - C8827 + C8828 - C8829) * C50330) *
                 C50114) *
                C50396 +
            ((C14502 * C10681 + C14503 * C50409 +
              (C14495 - C14494 + C14497 - C14496) * C10682 +
              (C14499 - C14498 + C14501 - C14500) * C50330) *
                 C2285 +
             ((C8823 - C8822 + C8825 - C8824) * C10681 +
              (C8827 - C8826 + C8829 - C8828) * C50409 +
              (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 -
               C50302 * C2661) *
                  C10682 +
              (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C14478 - C14479 + C14480 - C14481) * C10682 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
             C14503 * C50330) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C8085 - C8084 + C8087 - C8086) * C10681 +
             (C8089 - C8088 + C8091 - C8090) * C50409 + C14504 * C10682 +
             C14505 * C50330) *
                C2285 +
            ((C8093 - C8092 + C8095 - C8094) * C10681 +
             (C8097 - C8096 + C8099 - C8098) * C50409 +
             (C8822 - C8823 + C8824 - C8825) * C10682 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C7928 * C10681 + C7929 * C50409 + C14218 * C10682 +
             C14219 * C50330) *
                C2285 +
            ((C7905 - C7904 + C7907 - C7906) * C10681 +
             (C7909 - C7908 + C7911 - C7910) * C50409 +
             (C8607 - C8608 + C8609 - C8610) * C10682 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C50170 * C1018 +
           ((C8452 * C10681 + C8453 * C50409 +
             (C8823 - C8822 + C8825 - C8824) * C10682 +
             (C8827 - C8826 + C8829 - C8828) * C50330) *
                C2285 +
            ((C8445 - C8444 + C8447 - C8446) * C10681 +
             (C8449 - C8448 + C8451 - C8450) * C50409 +
             (C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                 C10682 +
             (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C10681 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50409 +
            (C13778 - C13779 + C13780 - C13781) * C10682 +
            (C13782 - C13783 + C13784 - C13785) * C50330) *
               C2285 +
           ((C7888 - C7889 + C7890 - C7891) * C10681 +
            (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
            C13819 * C50330) *
               C50114) *
              C50170 * C1089 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C10681 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50409 +
            (C14478 - C14479 + C14480 - C14481) * C10682 +
            (C14482 - C14483 + C14484 - C14485) * C50330) *
               C2285 +
           ((C8084 - C8085 + C8086 - C8087) * C10681 +
            (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
            C14503 * C50330) *
               C50114) *
              C50170 * C1090 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C10681 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50409 +
            (C50408 * C1559 - C7885 * C1555 + C50302 * C3203 - C7886 * C3200) *
                C10682 +
            (C50408 * C1567 - C7885 * C1560 + C50302 * C3209 - C7886 * C3204) *
                C50330) *
               C2285 +
           ((C8100 - C8101 + C8102 - C8103) * C10681 +
            (C8104 - C8105 + C8106 - C8107) * C50409 +
            (C13576 - C13577 + C13578 - C13579) * C10682 +
            (C13580 - C13581 + C13582 - C13583) * C50330) *
               C50114) *
              C50170 * C1091 +
          (((C7885 * C1094 - C50408 * C1098 + C7886 * C2472 - C50302 * C2475) *
                C10681 +
            (C7885 * C1099 - C50408 * C1106 + C7886 * C2476 - C50302 * C2481) *
                C50409 +
            (C7885 * C3200 - C50408 * C3203 + C7886 * C4116 - C50302 * C4118) *
                C10682 +
            (C7885 * C3204 - C50408 * C3209 + C7886 * C4119 - C50302 * C4122) *
                C50330) *
               C2285 +
           ((C7885 * C1095 - C50408 * C1100 + C7886 * C2473 - C50302 * C2477) *
                C10681 +
            (C7885 * C1101 - C50408 * C1107 + C7886 * C2478 - C50302 * C2482) *
                C50409 +
            (C7885 * C3201 - C50408 * C3205 + C7886 * C4117 - C50302 * C4120) *
                C10682 +
            (C7885 * C3206 - C50408 * C3210 + C7886 * C4121 - C50302 * C4123) *
                C50330) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C10681 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C50409 +
              (C13778 - C13779 + C13780 - C13781) * C10682 +
              (C13782 - C13783 + C13784 - C13785) * C50330) *
                 C2285 +
             ((C7888 - C7889 + C7890 - C7891) * C10681 +
              (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
              C13819 * C50330) *
                 C50114) *
                C1669 +
            (((C13779 - C13778 + C13781 - C13780) * C10681 +
              (C13783 - C13782 + C13785 - C13784) * C50409 +
              (C13790 - C13791 + C13792 - C13793) * C10682 +
              (C13794 - C13795 + C13796 - C13797) * C50330) *
                 C2285 +
             (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
              C13823 * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C10681 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C50409 +
              (C14478 - C14479 + C14480 - C14481) * C10682 +
              (C14482 - C14483 + C14484 - C14485) * C50330) *
                 C2285 +
             ((C8084 - C8085 + C8086 - C8087) * C10681 +
              (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
              C14503 * C50330) *
                 C50114) *
                C1669 +
            (((C14479 - C14478 + C14481 - C14480) * C10681 +
              (C14483 - C14482 + C14485 - C14484) * C50409 +
              (C15024 - C15025 + C15026 - C15027) * C10682 +
              (C15028 - C15029 + C15030 - C15031) * C50330) *
                 C2285 +
             (C14504 * C10681 + C14505 * C50409 +
              (C14494 - C14495 + C14496 - C14497) * C10682 +
              (C14498 - C14499 + C14500 - C14501) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C7889 - C7888 + C7891 - C7890) * C10681 +
              (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
              C13821 * C50330) *
                 C2285 +
             ((C7897 - C7896 + C7899 - C7898) * C10681 +
              (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
              C8616 * C50330) *
                 C50114) *
                C1669 +
            ((C13818 * C10681 + C13819 * C50409 + C13824 * C10682 +
              C13825 * C50330) *
                 C2285 +
             (C14218 * C10681 + C14219 * C50409 +
              (C8286 - C8287 + C8288 - C8289) * C10682 +
              (C8290 - C8291 + C8292 - C8293) * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C8085 - C8084 + C8087 - C8086) * C10681 +
              (C8089 - C8088 + C8091 - C8090) * C50409 + C14504 * C10682 +
              C14505 * C50330) *
                 C2285 +
             ((C8093 - C8092 + C8095 - C8094) * C10681 +
              (C8097 - C8096 + C8099 - C8098) * C50409 +
              (C8822 - C8823 + C8824 - C8825) * C10682 +
              (C8826 - C8827 + C8828 - C8829) * C50330) *
                 C50114) *
                C1669 +
            ((C14502 * C10681 + C14503 * C50409 +
              (C14495 - C14494 + C14497 - C14496) * C10682 +
              (C14499 - C14498 + C14501 - C14500) * C50330) *
                 C2285 +
             ((C8823 - C8822 + C8825 - C8824) * C10681 +
              (C8827 - C8826 + C8829 - C8828) * C50409 +
              (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 -
               C50302 * C2661) *
                  C10682 +
              (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C50442 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C50443 +
           (((C13791 - C13790 + C13793 - C13792) * C10681 +
             (C13795 - C13794 + C13797 - C13796) * C50409 +
             (C16204 - C16205 + C16206 - C16207) * C10682 +
             (C16208 - C16209 + C16210 - C16211) * C50330) *
                C2285 +
            (C13824 * C10681 + C13825 * C50409 +
             (C13810 - C13811 + C13812 - C13813) * C10682 +
             (C13814 - C13815 + C13816 - C13817) * C50330) *
                C50114) *
               C2085) *
              C50395 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C14478 - C14479 + C14480 - C14481) * C10682 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
             C14503 * C50330) *
                C50114) *
               C50442 +
           (((C14479 - C14478 + C14481 - C14480) * C10681 +
             (C14483 - C14482 + C14485 - C14484) * C50409 +
             (C15024 - C15025 + C15026 - C15027) * C10682 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C2285 +
            (C14504 * C10681 + C14505 * C50409 +
             (C14494 - C14495 + C14496 - C14497) * C10682 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C50443 +
           (((C15025 - C15024 + C15027 - C15026) * C10681 +
             (C15029 - C15028 + C15031 - C15030) * C50409 +
             (C7885 * C4514 - C50408 * C4518 + C7886 * C4515 - C50302 * C4519) *
                 C10682 +
             (C7885 * C4520 - C50408 * C4526 + C7886 * C4521 - C50302 * C4527) *
                 C50330) *
                C2285 +
            ((C14495 - C14494 + C14497 - C14496) * C10681 +
             (C14499 - C14498 + C14501 - C14500) * C50409 +
             (C7885 * C4516 - C50408 * C4522 + C7886 * C4517 - C50302 * C4523) *
                 C10682 +
             (C7885 * C4524 - C50408 * C4528 + C7886 * C4525 - C50302 * C4529) *
                 C50330) *
                C50114) *
               C2085) *
              C50206) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C1669 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C285 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C14478 - C14479 + C14480 - C14481) * C10682 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
             C14503 * C50330) *
                C50114) *
               C1669 +
           (((C14479 - C14478 + C14481 - C14480) * C10681 +
             (C14483 - C14482 + C14485 - C14484) * C50409 +
             (C15024 - C15025 + C15026 - C15027) * C10682 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C2285 +
            (C14504 * C10681 + C14505 * C50409 +
             (C14494 - C14495 + C14496 - C14497) * C10682 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C50234) *
              C286 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C10681 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50409 +
             (C15678 - C15679 + C15680 - C15681) * C10682 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C2285 +
            ((C8100 - C8101 + C8102 - C8103) * C10681 +
             (C8104 - C8105 + C8106 - C8107) * C50409 +
             (C13576 - C13577 + C13578 - C13579) * C10682 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C1669 +
           (((C15679 - C15678 + C15681 - C15680) * C10681 +
             (C15683 - C15682 + C15685 - C15684) * C50409 +
             (C7885 * C2654 - C50408 * C2657 + C7886 * C3622 - C50302 * C3624) *
                 C10682 +
             (C7885 * C2658 - C50408 * C2663 + C7886 * C3625 - C50302 * C3628) *
                 C50330) *
                C2285 +
            ((C13577 - C13576 + C13579 - C13578) * C10681 +
             (C13581 - C13580 + C13583 - C13582) * C50409 +
             (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                 C10682 +
             (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C1669 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C1669 +
           ((C13818 * C10681 + C13819 * C50409 + C13824 * C10682 +
             C13825 * C50330) *
                C2285 +
            (C14218 * C10681 + C14219 * C50409 +
             (C8286 - C8287 + C8288 - C8289) * C10682 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C7928 * C10681 + C7929 * C50409 + C14218 * C10682 +
             C14219 * C50330) *
                C2285 +
            ((C7905 - C7904 + C7907 - C7906) * C10681 +
             (C7909 - C7908 + C7911 - C7910) * C50409 +
             (C8607 - C8608 + C8609 - C8610) * C10682 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C1669 +
           ((C8615 * C10681 + C8616 * C50409 +
             (C8287 - C8286 + C8289 - C8288) * C10682 +
             (C8291 - C8290 + C8293 - C8292) * C50330) *
                C2285 +
            ((C8608 - C8607 + C8610 - C8609) * C10681 +
             (C8612 - C8611 + C8614 - C8613) * C50409 +
             (C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
                 C10682 +
             (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C10681 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50409 +
            (C13778 - C13779 + C13780 - C13781) * C10682 +
            (C13782 - C13783 + C13784 - C13785) * C50330) *
               C2285 +
           ((C7888 - C7889 + C7890 - C7891) * C10681 +
            (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
            C13819 * C50330) *
               C50114) *
              C1835 +
          (((C13779 - C13778 + C13781 - C13780) * C10681 +
            (C13783 - C13782 + C13785 - C13784) * C50409 +
            (C13790 - C13791 + C13792 - C13793) * C10682 +
            (C13794 - C13795 + C13796 - C13797) * C50330) *
               C2285 +
           (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
            C13823 * C50330) *
               C50114) *
              C1836 +
          (((C13791 - C13790 + C13793 - C13792) * C10681 +
            (C13795 - C13794 + C13797 - C13796) * C50409 +
            (C16204 - C16205 + C16206 - C16207) * C10682 +
            (C16208 - C16209 + C16210 - C16211) * C50330) *
               C2285 +
           (C13824 * C10681 + C13825 * C50409 +
            (C13810 - C13811 + C13812 - C13813) * C10682 +
            (C13814 - C13815 + C13816 - C13817) * C50330) *
               C50114) *
              C1837 +
          (((C16205 - C16204 + C16207 - C16206) * C10681 +
            (C16209 - C16208 + C16211 - C16210) * C50409 +
            (C7885 * C5424 - C50408 * C5427 + C7886 * C6384 - C50302 * C6386) *
                C10682 +
            (C7885 * C5428 - C50408 * C5433 + C7886 * C6387 - C50302 * C6390) *
                C50330) *
               C2285 +
           ((C13811 - C13810 + C13813 - C13812) * C10681 +
            (C13815 - C13814 + C13817 - C13816) * C50409 +
            (C7885 * C5425 - C50408 * C5429 + C7886 * C6385 - C50302 * C6388) *
                C10682 +
            (C7885 * C5430 - C50408 * C5434 + C7886 * C6389 - C50302 * C6391) *
                C50330) *
               C50114) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C50442 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C50443 +
           (((C13791 - C13790 + C13793 - C13792) * C10681 +
             (C13795 - C13794 + C13797 - C13796) * C50409 +
             (C16204 - C16205 + C16206 - C16207) * C10682 +
             (C16208 - C16209 + C16210 - C16211) * C50330) *
                C2285 +
            (C13824 * C10681 + C13825 * C50409 +
             (C13810 - C13811 + C13812 - C13813) * C10682 +
             (C13814 - C13815 + C13816 - C13817) * C50330) *
                C50114) *
               C2085) *
              C50154 * C50387 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C50442 +
           ((C13818 * C10681 + C13819 * C50409 + C13824 * C10682 +
             C13825 * C50330) *
                C2285 +
            (C14218 * C10681 + C14219 * C50409 +
             (C8286 - C8287 + C8288 - C8289) * C10682 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C50443 +
           ((C13822 * C10681 + C13823 * C50409 +
             (C13811 - C13810 + C13813 - C13812) * C10682 +
             (C13815 - C13814 + C13817 - C13816) * C50330) *
                C2285 +
            ((C8287 - C8286 + C8289 - C8288) * C10681 +
             (C8291 - C8290 + C8293 - C8292) * C50409 +
             (C7885 * C1841 - C50408 * C1847 + C7886 * C5970 - C50302 * C5971) *
                 C10682 +
             (C7885 * C1848 - C50408 * C1853 + C7886 * C5972 - C50302 * C5973) *
                 C50330) *
                C50114) *
               C2085) *
              C50154 * C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C1669 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C10681 +
             (C7893 - C7892 + C7895 - C7894) * C50409 + C13820 * C10682 +
             C13821 * C50330) *
                C2285 +
            ((C7897 - C7896 + C7899 - C7898) * C10681 +
             (C7901 - C7900 + C7903 - C7902) * C50409 + C8615 * C10682 +
             C8616 * C50330) *
                C50114) *
               C1669 +
           ((C13818 * C10681 + C13819 * C50409 + C13824 * C10682 +
             C13825 * C50330) *
                C2285 +
            (C14218 * C10681 + C14219 * C50409 +
             (C8286 - C8287 + C8288 - C8289) * C10682 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C7928 * C10681 + C7929 * C50409 + C14218 * C10682 +
             C14219 * C50330) *
                C2285 +
            ((C7905 - C7904 + C7907 - C7906) * C10681 +
             (C7909 - C7908 + C7911 - C7910) * C50409 +
             (C8607 - C8608 + C8609 - C8610) * C10682 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C1669 +
           ((C8615 * C10681 + C8616 * C50409 +
             (C8287 - C8286 + C8289 - C8288) * C10682 +
             (C8291 - C8290 + C8293 - C8292) * C50330) *
                C2285 +
            ((C8608 - C8607 + C8610 - C8609) * C10681 +
             (C8612 - C8611 + C8614 - C8613) * C50409 +
             (C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
                 C10682 +
             (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C10681 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50409 +
             (C13778 - C13779 + C13780 - C13781) * C10682 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C2285 +
            ((C7888 - C7889 + C7890 - C7891) * C10681 +
             (C7892 - C7893 + C7894 - C7895) * C50409 + C13818 * C10682 +
             C13819 * C50330) *
                C50114) *
               C1669 +
           (((C13779 - C13778 + C13781 - C13780) * C10681 +
             (C13783 - C13782 + C13785 - C13784) * C50409 +
             (C13790 - C13791 + C13792 - C13793) * C10682 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C2285 +
            (C13820 * C10681 + C13821 * C50409 + C13822 * C10682 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C285 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C10681 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50409 +
             (C14478 - C14479 + C14480 - C14481) * C10682 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C2285 +
            ((C8084 - C8085 + C8086 - C8087) * C10681 +
             (C8088 - C8089 + C8090 - C8091) * C50409 + C14502 * C10682 +
             C14503 * C50330) *
                C50114) *
               C1669 +
           (((C14479 - C14478 + C14481 - C14480) * C10681 +
             (C14483 - C14482 + C14485 - C14484) * C50409 +
             (C15024 - C15025 + C15026 - C15027) * C10682 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C2285 +
            (C14504 * C10681 + C14505 * C50409 +
             (C14494 - C14495 + C14496 - C14497) * C10682 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C50234) *
              C286 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C10681 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C50409 +
             (C15678 - C15679 + C15680 - C15681) * C10682 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C2285 +
            ((C8100 - C8101 + C8102 - C8103) * C10681 +
             (C8104 - C8105 + C8106 - C8107) * C50409 +
             (C13576 - C13577 + C13578 - C13579) * C10682 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C1669 +
           (((C15679 - C15678 + C15681 - C15680) * C10681 +
             (C15683 - C15682 + C15685 - C15684) * C50409 +
             (C7885 * C2654 - C50408 * C2657 + C7886 * C3622 - C50302 * C3624) *
                 C10682 +
             (C7885 * C2658 - C50408 * C2663 + C7886 * C3625 - C50302 * C3628) *
                 C50330) *
                C2285 +
            ((C13577 - C13576 + C13579 - C13578) * C10681 +
             (C13581 - C13580 + C13583 - C13582) * C50409 +
             (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                 C10682 +
             (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50170 * C50395 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C50170 * C50206) *
              C50438 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C50170 * C50395 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                C2285 +
            ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
             (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                C50114) *
               C50170 * C50206) *
              C50439 +
          ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
             (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                C2285 +
            ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
             (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                C50114) *
               C50170 * C50395 +
           (((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C118 +
             (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C50266) *
                C2285 +
            ((C2287 * C293 - C2282 * C306 + C2288 * C297 - C2283 * C314 +
              C2289 * C1097 - C2284 * C1104) *
                 C118 +
             (C2287 * C307 - C2282 * C323 + C2288 * C315 - C2283 * C327 +
              C2289 * C1105 - C2284 * C1109) *
                 C50266) *
                C50114) *
               C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C50170 * C50395 +
           (((C117 * C290 - C50251 * C300) * C118 +
             (C117 * C301 - C50251 * C320) * C50266) *
                C107 +
            ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
            C639 * C109 + C640 * C110) *
               C50170 * C50206) *
              C50438 +
          ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
            ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
            C186 * C109 + C187 * C110) *
               C50170 * C50395 +
           (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
            ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
            ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
            ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
               C50170 * C50206) *
              C50439 +
          ((C184 * C107 + C185 * C108 +
            ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
            ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
               C50170 * C50395 +
           (C639 * C107 + C640 * C108 +
            ((C632 - C631) * C118 + (C634 - C633) * C50266) * C109 +
            ((C117 * C622 - C50251 * C623) * C118 +
             (C117 * C624 - C50251 * C625) * C50266) *
                C110) *
               C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C50170 * C50395 +
           (((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 +
             (C117 * C888 - C50251 * C893) * C5118 +
             (C117 * C894 - C50251 * C903) * C5115 +
             (C117 * C1208 - C50251 * C1212) * C5119 +
             (C117 * C1213 - C50251 * C1220) * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 +
             (C910 - C909) * C5118 + (C912 - C911) * C5115 +
             (C5267 - C5268) * C5119 + (C5269 - C5270) * C5116) *
                C50114) *
               C50170 * C50206) *
              C50438 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C50170 * C50395 +
           (((C332 - C331) * C5117 + (C334 - C333) * C5114 +
             (C909 - C910) * C5118 + (C911 - C912) * C5115 +
             (C5268 - C5267) * C5119 + (C5270 - C5269) * C5116) *
                C2285 +
            ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
             (C913 - C914) * C5118 + (C915 - C916) * C5115 +
             (C5623 - C5624) * C5119 + (C5625 - C5626) * C5116) *
                C50114) *
               C50170 * C50206) *
              C50439 +
          (((C168 * C5117 + C169 * C5114 + (C501 - C500) * C5118 +
             (C503 - C502) * C5115 + (C512 - C513) * C5119 +
             (C514 - C515) * C5116) *
                C2285 +
            (C170 * C5117 + C171 * C5114 + (C505 - C504) * C5118 +
             (C507 - C506) * C5115 + (C516 - C517) * C5119 +
             (C518 - C519) * C5116) *
                C50114) *
               C50170 * C50395 +
           ((C627 * C5117 + C628 * C5114 + (C914 - C913) * C5118 +
             (C916 - C915) * C5115 + (C5624 - C5623) * C5119 +
             (C5626 - C5625) * C5116) *
                C2285 +
            (C629 * C5117 + C630 * C5114 + (C918 - C917) * C5118 +
             (C920 - C919) * C5115 + (C117 * C1211 - C50251 * C1218) * C5119 +
             (C117 * C1219 - C50251 * C1223) * C5116) *
                C50114) *
               C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
               C2284 * C308 - C2289 * C294) *
                  C118 +
              (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
               C2284 * C324 - C2289 * C309) *
                  C50266) *
                 C2285 +
             ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
              (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                 C50114) *
                C50396 +
            (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
               C2289 * C1555 - C2284 * C1559) *
                  C118 +
              (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
               C2289 * C1560 - C2284 * C1567) *
                  C50266) *
                 C2285 +
             ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
              (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
               C2289 * C1094 - C2284 * C1098) *
                  C118 +
              (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
               C2289 * C1099 - C2284 * C1106) *
                  C50266) *
                 C2285 +
             ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
              (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                 C50114) *
                C50396 +
            (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
               C2284 * C3203 - C2289 * C3200) *
                  C118 +
              (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
               C2284 * C3209 - C2289 * C3204) *
                  C50266) *
                 C2285 +
             ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
              (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C288 +
          (((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
              (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                 C2285 +
             ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
              (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                 C50114) *
                C50396 +
            (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
              (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                 C2285 +
             ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
              (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
              (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                 C2285 +
             ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
              (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                 C50114) *
                C50396 +
            (((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C118 +
              (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C50266) *
                 C2285 +
             ((C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
               C2289 * C3202 - C2284 * C3207) *
                  C118 +
              (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
               C2289 * C3208 - C2284 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C118 +
              (C50251 * C140 - C117 * C127) * C50266) *
                 C107 +
             ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
             C184 * C109 + C185 * C110) *
                C50396 +
            (((C117 * C455 - C50251 * C465) * C118 +
              (C117 * C466 - C50251 * C485) * C50266) *
                 C107 +
             ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
             C757 * C109 + C758 * C110) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C118 +
              (C117 * C301 - C50251 * C320) * C50266) *
                 C107 +
             ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
             C639 * C109 + C640 * C110) *
                C50396 +
            (((C50251 * C893 - C117 * C888) * C118 +
              (C50251 * C903 - C117 * C894) * C50266) *
                 C107 +
             ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
             ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
             ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                C50234) *
               C50206) *
              C288 +
          (((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
             ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
             C186 * C109 + C187 * C110) *
                C50396 +
            (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
             ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
             ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
             ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
             ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
             ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
             ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                C50396 +
            (((C910 - C909) * C118 + (C912 - C911) * C50266) * C107 +
             ((C914 - C913) * C118 + (C916 - C915) * C50266) * C108 +
             ((C918 - C917) * C118 + (C920 - C919) * C50266) * C109 +
             ((C117 * C892 - C50251 * C901) * C118 +
              (C117 * C902 - C50251 * C907) * C50266) *
                 C110) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C5117 +
              (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
              (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                 C2285 +
             ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
              C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                 C50114) *
                C50396 +
            (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
              (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
              (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                 C2285 +
             (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
              C5473 * C5119 + C5474 * C5116) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C5117 +
              (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
              (C5977 - C5978) * C5115 + (C5979 - C5980) * C5119 +
              (C5981 - C5982) * C5116) *
                 C2285 +
             ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
              C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                 C50114) *
                C50396 +
            (((C5976 - C5975) * C5117 + (C5978 - C5977) * C5114 +
              (C5980 - C5979) * C5118 + (C5982 - C5981) * C5115 +
              (C50251 * C4518 - C117 * C4514) * C5119 +
              (C50251 * C4526 - C117 * C4520) * C5116) *
                 C2285 +
             (C5987 * C5117 + C5988 * C5114 + C5989 * C5118 + C5990 * C5115 +
              (C5991 - C5992) * C5119 + (C5993 - C5994) * C5116) *
                 C50114) *
                C50234) *
               C50206) *
              C288 +
          (((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
              C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                 C2285 +
             ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
              C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                 C50114) *
                C50396 +
            ((C5445 * C5117 + C5446 * C5114 + C5447 * C5118 + C5448 * C5115 +
              C5475 * C5119 + C5476 * C5116) *
                 C2285 +
             (C5773 * C5117 + C5774 * C5114 + C5775 * C5118 + C5776 * C5115 +
              (C5467 - C5468) * C5119 + (C5469 - C5470) * C5116) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C5117 + (C334 - C333) * C5114 + C5987 * C5118 +
              C5988 * C5115 + C5989 * C5119 + C5990 * C5116) *
                 C2285 +
             ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
              (C913 - C914) * C5118 + (C915 - C916) * C5115 +
              (C5623 - C5624) * C5119 + (C5625 - C5626) * C5116) *
                 C50114) *
                C50396 +
            ((C5983 * C5117 + C5984 * C5114 + C5985 * C5118 + C5986 * C5115 +
              (C5992 - C5991) * C5119 + (C5994 - C5993) * C5116) *
                 C2285 +
             ((C914 - C913) * C5117 + (C916 - C915) * C5114 +
              (C5624 - C5623) * C5118 + (C5626 - C5625) * C5115 +
              (C117 * C5970 - C50251 * C5971) * C5119 +
              (C117 * C5972 - C50251 * C5973) * C5116) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C50251 * C126 - C117 * C119) * C118 +
                (C50251 * C140 - C117 * C127) * C50266) *
                   C107 +
               ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
               C184 * C109 + C185 * C110) *
                  C50170 * C50154 * C113 +
              (((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
               ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
               C186 * C109 + C187 * C110) *
                  C50170 * C50154 * C114 +
              (C184 * C107 + C185 * C108 +
               ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
               ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                  C50170 * C50154 * C115 +
              (C186 * C107 + C187 * C108 +
               ((C165 - C164) * C118 + (C167 - C166) * C50266) * C109 +
               ((C117 * C125 - C50251 * C138) * C118 +
                (C117 * C139 - C50251 * C146) * C50266) *
                   C110) *
                  C50170 * C50154 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C50251 * C126 - C117 * C119) * C118 +
                 (C50251 * C140 - C117 * C127) * C50266) *
                    C107 +
                ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                C184 * C109 + C185 * C110) *
                   C50170 * C285 +
               (((C117 * C290 - C50251 * C300) * C118 +
                 (C117 * C301 - C50251 * C320) * C50266) *
                    C107 +
                ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                ((C335 - C336) * C118 + (C337 - C338) * C50266) * C109 +
                ((C339 - C340) * C118 + (C341 - C342) * C50266) * C110) *
                   C50170 * C286 +
               (((C50251 * C308 - C117 * C294) * C118 +
                 (C50251 * C324 - C117 * C309) * C50266) *
                    C107 +
                ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                   C50170 * C287) *
                  C288 +
              ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                C186 * C109 + C187 * C110) *
                   C50170 * C285 +
               (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
                ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
                ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
                ((C50251 * C316 - C117 * C298) * C118 +
                 (C50251 * C328 - C117 * C317) * C50266) *
                    C110) *
                   C50170 * C286 +
               (((C344 - C343) * C118 + (C346 - C345) * C50266) * C107 +
                ((C348 - C347) * C118 + (C350 - C349) * C50266) * C108 +
                ((C352 - C351) * C118 + (C354 - C353) * C50266) * C109 +
                ((C117 * C299 - C50251 * C318) * C118 +
                 (C117 * C319 - C50251 * C329) * C50266) *
                    C110) *
                   C50170 * C287) *
                  C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C452 +
           (((C117 * C455 - C50251 * C465) * C118 +
             (C117 * C466 - C50251 * C485) * C50266) *
                C107 +
            ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
            ((C500 - C501) * C118 + (C502 - C503) * C50266) * C109 +
            ((C504 - C505) * C118 + (C506 - C507) * C50266) * C110) *
               C453 +
           (((C50251 * C473 - C117 * C459) * C118 +
             (C50251 * C489 - C117 * C474) * C50266) *
                C107 +
            ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
            ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
            ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
               C454) *
              C50154 * C288 +
          ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
            ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
            C186 * C109 + C187 * C110) *
               C452 +
           (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
            ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
            ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
            ((C50251 * C481 - C117 * C463) * C118 +
             (C50251 * C493 - C117 * C482) * C50266) *
                C110) *
               C453 +
           (((C509 - C508) * C118 + (C511 - C510) * C50266) * C107 +
            ((C513 - C512) * C118 + (C515 - C514) * C50266) * C108 +
            ((C517 - C516) * C118 + (C519 - C518) * C50266) * C109 +
            ((C117 * C464 - C50251 * C483) * C118 +
             (C117 * C484 - C50251 * C494) * C50266) *
                C110) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C118 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C50266) *
               C2285 +
           ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
            (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
               C2285 +
           ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
            (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
               C50114) *
              C50170 * C50154 * C114 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
               C2285 +
           ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
            (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
               C50114) *
              C50170 * C50154 * C115 +
          (((C2316 - C2315 + C2318 - C2317 + C2320 - C2319) * C118 +
            (C2322 - C2321 + C2324 - C2323 + C2326 - C2325) * C50266) *
               C2285 +
           ((C2287 * C123 - C2282 * C134 + C2288 * C298 - C2283 * C316 +
             C2289 * C299 - C2284 * C318) *
                C118 +
            (C2287 * C135 - C2282 * C144 + C2288 * C317 - C2283 * C328 +
             C2289 * C319 - C2284 * C329) *
                C50266) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50170 * C285 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C50170 * C286 +
           (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
              C2284 * C2475 - C2289 * C2472) *
                 C118 +
             (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
              C2284 * C2481 - C2289 * C2476) *
                 C50266) *
                C2285 +
            ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
             (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C50170 * C285 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                C2285 +
            ((C2282 * C304 - C2287 * C292 + C2283 * C312 - C2288 * C296 +
              C2284 * C1102 - C2289 * C1096) *
                 C118 +
             (C2282 * C322 - C2287 * C305 + C2283 * C326 - C2288 * C313 +
              C2284 * C1108 - C2289 * C1103) *
                 C50266) *
                C50114) *
               C50170 * C286 +
           (((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C118 +
             (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C50266) *
                C2285 +
            ((C2287 * C296 - C2282 * C312 + C2288 * C1096 - C2283 * C1102 +
              C2289 * C2474 - C2284 * C2479) *
                 C118 +
             (C2287 * C313 - C2282 * C326 + C2288 * C1103 - C2283 * C1108 +
              C2289 * C2480 - C2284 * C2483) *
                 C50266) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C452 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C453 +
           (((C2282 * C473 - C2287 * C459 + C2283 * C1212 - C2288 * C1208 +
              C2284 * C2657 - C2289 * C2654) *
                 C118 +
             (C2282 * C489 - C2287 * C474 + C2283 * C1220 - C2288 * C1213 +
              C2284 * C2663 - C2289 * C2658) *
                 C50266) *
                C2285 +
            ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                C50114) *
               C454) *
              C50154 * C288 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C452 +
           (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                C2285 +
            ((C2282 * C469 - C2287 * C457 + C2283 * C897 - C2288 * C890 +
              C2284 * C1563 - C2289 * C1557) *
                 C118 +
             (C2282 * C487 - C2287 * C470 + C2283 * C905 - C2288 * C898 +
              C2284 * C1569 - C2289 * C1564) *
                 C50266) *
                C50114) *
               C453 +
           (((C2680 - C2679 + C2682 - C2681 + C2684 - C2683) * C118 +
             (C2686 - C2685 + C2688 - C2687 + C2690 - C2689) * C50266) *
                C2285 +
            ((C2287 * C461 - C2282 * C477 + C2288 * C1210 - C2283 * C1216 +
              C2289 * C2656 - C2284 * C2661) *
                 C118 +
             (C2287 * C478 - C2282 * C491 + C2288 * C1217 - C2283 * C1222 +
              C2289 * C2662 - C2284 * C2665) *
                 C50266) *
                C50114) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C5117 +
            (C50251 * C140 - C117 * C127) * C5114 +
            (C50251 * C465 - C117 * C455) * C5118 +
            (C50251 * C485 - C117 * C466) * C5115 +
            (C50251 * C473 - C117 * C459) * C5119 +
            (C50251 * C489 - C117 * C474) * C5116) *
               C2285 +
           ((C148 - C149) * C5117 + (C150 - C151) * C5114 +
            (C497 - C496) * C5118 + (C499 - C498) * C5115 +
            (C508 - C509) * C5119 + (C510 - C511) * C5116) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C5117 + (C151 - C150) * C5114 +
            (C496 - C497) * C5118 + (C498 - C499) * C5115 +
            (C509 - C508) * C5119 + (C511 - C510) * C5116) *
               C2285 +
           ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
            C746 * C5115 + (C513 - C512) * C5119 + (C515 - C514) * C5116) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C168 * C5117 + C169 * C5114 + (C501 - C500) * C5118 +
            (C503 - C502) * C5115 + (C512 - C513) * C5119 +
            (C514 - C515) * C5116) *
               C2285 +
           (C170 * C5117 + C171 * C5114 + (C505 - C504) * C5118 +
            (C507 - C506) * C5115 + (C516 - C517) * C5119 +
            (C518 - C519) * C5116) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C172 * C5117 + C173 * C5114 + C747 * C5118 + C748 * C5115 +
            (C517 - C516) * C5119 + (C519 - C518) * C5116) *
               C2285 +
           (C174 * C5117 + C175 * C5114 + (C750 - C749) * C5118 +
            (C752 - C751) * C5115 + (C117 * C464 - C50251 * C483) * C5119 +
            (C117 * C484 - C50251 * C494) * C5116) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 +
             (C50251 * C465 - C117 * C455) * C5118 +
             (C50251 * C485 - C117 * C466) * C5115 +
             (C50251 * C473 - C117 * C459) * C5119 +
             (C50251 * C489 - C117 * C474) * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 +
             (C497 - C496) * C5118 + (C499 - C498) * C5115 +
             (C508 - C509) * C5119 + (C510 - C511) * C5116) *
                C50114) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 +
             (C117 * C888 - C50251 * C893) * C5118 +
             (C117 * C894 - C50251 * C903) * C5115 +
             (C117 * C1208 - C50251 * C1212) * C5119 +
             (C117 * C1213 - C50251 * C1220) * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 +
             (C910 - C909) * C5118 + (C912 - C911) * C5115 +
             (C5267 - C5268) * C5119 + (C5269 - C5270) * C5116) *
                C50114) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C5117 +
             (C50251 * C324 - C117 * C309) * C5114 +
             (C50251 * C1559 - C117 * C1555) * C5118 +
             (C50251 * C1567 - C117 * C1560) * C5115 +
             (C50251 * C2657 - C117 * C2654) * C5119 +
             (C50251 * C2663 - C117 * C2658) * C5116) *
                C2285 +
            ((C343 - C344) * C5117 + (C345 - C346) * C5114 +
             (C5271 - C5272) * C5118 + (C5273 - C5274) * C5115 +
             (C5275 - C5276) * C5119 + (C5277 - C5278) * C5116) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 +
             (C496 - C497) * C5118 + (C498 - C499) * C5115 +
             (C509 - C508) * C5119 + (C511 - C510) * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + (C513 - C512) * C5119 + (C515 - C514) * C5116) *
                C50114) *
               C50170 * C285 +
           (((C332 - C331) * C5117 + (C334 - C333) * C5114 +
             (C909 - C910) * C5118 + (C911 - C912) * C5115 +
             (C5268 - C5267) * C5119 + (C5270 - C5269) * C5116) *
                C2285 +
            ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
             (C913 - C914) * C5118 + (C915 - C916) * C5115 +
             (C50251 * C1216 - C117 * C1210) * C5119 +
             (C50251 * C1222 - C117 * C1217) * C5116) *
                C50114) *
               C50170 * C286 +
           (((C344 - C343) * C5117 + (C346 - C345) * C5114 +
             (C5272 - C5271) * C5118 + (C5274 - C5273) * C5115 +
             (C5276 - C5275) * C5119 + (C5278 - C5277) * C5116) *
                C2285 +
            ((C348 - C347) * C5117 + (C350 - C349) * C5114 +
             (C117 * C1557 - C50251 * C1563) * C5118 +
             (C117 * C1564 - C50251 * C1569) * C5115 +
             (C117 * C2656 - C50251 * C2661) * C5119 +
             (C117 * C2662 - C50251 * C2665) * C5116) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C452 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
             (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C453 +
           ((C5471 * C5117 + C5472 * C5114 + (C5450 - C5449) * C5118 +
             (C5452 - C5451) * C5115 + (C50251 * C5427 - C117 * C5424) * C5119 +
             (C50251 * C5433 - C117 * C5428) * C5116) *
                C2285 +
            (C5447 * C5117 + C5448 * C5114 + C5475 * C5118 + C5476 * C5115 +
             (C5461 - C5462) * C5119 + (C5463 - C5464) * C5116) *
                C50114) *
               C454) *
              C50154 * C288 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C452 +
           ((C5445 * C5117 + C5446 * C5114 + C5447 * C5118 + C5448 * C5115 +
             C5475 * C5119 + C5476 * C5116) *
                C2285 +
            ((C501 - C500) * C5117 + (C503 - C502) * C5114 +
             (C512 - C513) * C5118 + (C514 - C515) * C5115 +
             (C5467 - C5468) * C5119 + (C5469 - C5470) * C5116) *
                C50114) *
               C453 +
           ((C5455 * C5117 + C5456 * C5114 + C5473 * C5118 + C5474 * C5115 +
             (C5462 - C5461) * C5119 + (C5464 - C5463) * C5116) *
                C2285 +
            (C5465 * C5117 + C5466 * C5114 + (C5468 - C5467) * C5118 +
             (C5470 - C5469) * C5115 + (C117 * C5426 - C50251 * C5431) * C5119 +
             (C117 * C5432 - C50251 * C5435) * C5116) *
                C50114) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50396 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C50234) *
              C50154 * C50438 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C50396 +
           (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                C2285 +
            ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
             (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                C50114) *
               C50234) *
              C50154 * C50439 +
          ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
             (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                C2285 +
            ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
             (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                C50114) *
               C50396 +
           (((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C118 +
             (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C50266) *
                C2285 +
            ((C2287 * C458 - C2282 * C471 + C2288 * C891 - C2283 * C899 +
              C2289 * C1558 - C2284 * C1565) *
                 C118 +
             (C2287 * C472 - C2282 * C488 + C2288 * C900 - C2283 * C906 +
              C2289 * C1566 - C2284 * C1570) *
                 C50266) *
                C50114) *
               C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C50396 +
           (((C117 * C455 - C50251 * C465) * C118 +
             (C117 * C466 - C50251 * C485) * C50266) *
                C107 +
            ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
            C757 * C109 + C758 * C110) *
               C50234) *
              C50154 * C50438 +
          ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
            ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
            C186 * C109 + C187 * C110) *
               C50396 +
           (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
            ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
            ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
            ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
               C50234) *
              C50154 * C50439 +
          ((C184 * C107 + C185 * C108 +
            ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
            ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
               C50396 +
           (C757 * C107 + C758 * C108 +
            ((C750 - C749) * C118 + (C752 - C751) * C50266) * C109 +
            ((C117 * C740 - C50251 * C741) * C118 +
             (C117 * C742 - C50251 * C743) * C50266) *
                C110) *
               C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C50396 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
             (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C50234) *
              C50154 * C50438 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C50396 +
           ((C5445 * C5117 + C5446 * C5114 + C5447 * C5118 + C5448 * C5115 +
             C5475 * C5119 + C5476 * C5116) *
                C2285 +
            (C5773 * C5117 + C5774 * C5114 + C5775 * C5118 + C5776 * C5115 +
             (C5467 - C5468) * C5119 + (C5469 - C5470) * C5116) *
                C50114) *
               C50234) *
              C50154 * C50439 +
          (((C168 * C5117 + C169 * C5114 + C5773 * C5118 + C5774 * C5115 +
             C5775 * C5119 + C5776 * C5116) *
                C2285 +
            (C170 * C5117 + C171 * C5114 + (C505 - C504) * C5118 +
             (C507 - C506) * C5115 + (C516 - C517) * C5119 +
             (C518 - C519) * C5116) *
                C50114) *
               C50396 +
           ((C745 * C5117 + C746 * C5114 + C5465 * C5118 + C5466 * C5115 +
             (C5468 - C5467) * C5119 + (C5470 - C5469) * C5116) *
                C2285 +
            (C747 * C5117 + C748 * C5114 + (C517 - C516) * C5118 +
             (C519 - C518) * C5115 + (C117 * C1842 - C50251 * C1849) * C5119 +
             (C117 * C1850 - C50251 * C1854) * C5116) *
                C50114) *
               C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C118 +
             (C117 * C301 - C50251 * C320) * C50266) *
                C107 +
            ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
            ((C335 - C336) * C118 + (C337 - C338) * C50266) * C109 +
            ((C339 - C340) * C118 + (C341 - C342) * C50266) * C110) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C118 +
             (C50251 * C324 - C117 * C309) * C50266) *
                C107 +
            ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
            ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
            ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
            ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
            C186 * C109 + C187 * C110) *
               C50170 * C285 +
           (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
            ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
            ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
            ((C50251 * C316 - C117 * C298) * C118 +
             (C50251 * C328 - C117 * C317) * C50266) *
                C110) *
               C50170 * C286 +
           (((C344 - C343) * C118 + (C346 - C345) * C50266) * C107 +
            ((C348 - C347) * C118 + (C350 - C349) * C50266) * C108 +
            ((C352 - C351) * C118 + (C354 - C353) * C50266) * C109 +
            ((C117 * C299 - C50251 * C318) * C118 +
             (C117 * C319 - C50251 * C329) * C50266) *
                C110) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C118 +
            (C50251 * C140 - C117 * C127) * C50266) *
               C107 +
           ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
           C184 * C109 + C185 * C110) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
           ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
           C186 * C109 + C187 * C110) *
              C50170 * C50154 * C114 +
          (C184 * C107 + C185 * C108 +
           ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
           ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
              C50170 * C50154 * C115 +
          (C186 * C107 + C187 * C108 +
           ((C165 - C164) * C118 + (C167 - C166) * C50266) * C109 +
           ((C117 * C125 - C50251 * C138) * C118 +
            (C117 * C139 - C50251 * C146) * C50266) *
               C110) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C118 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C50266) *
               C2285 +
           ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
            (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
               C2285 +
           ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
            (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
               C50114) *
              C50170 * C50154 * C114 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
               C2285 +
           ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
            (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
               C50114) *
              C50170 * C50154 * C115 +
          (((C2316 - C2315 + C2318 - C2317 + C2320 - C2319) * C118 +
            (C2322 - C2321 + C2324 - C2323 + C2326 - C2325) * C50266) *
               C2285 +
           ((C2287 * C123 - C2282 * C134 + C2288 * C298 - C2283 * C316 +
             C2289 * C299 - C2284 * C318) *
                C118 +
            (C2287 * C135 - C2282 * C144 + C2288 * C317 - C2283 * C328 +
             C2289 * C319 - C2284 * C329) *
                C50266) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50170 * C285 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C50170 * C286 +
           (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
              C2284 * C2475 - C2289 * C2472) *
                 C118 +
             (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
              C2284 * C2481 - C2289 * C2476) *
                 C50266) *
                C2285 +
            ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
             (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C50170 * C285 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                C2285 +
            ((C2282 * C304 - C2287 * C292 + C2283 * C312 - C2288 * C296 +
              C2284 * C1102 - C2289 * C1096) *
                 C118 +
             (C2282 * C322 - C2287 * C305 + C2283 * C326 - C2288 * C313 +
              C2284 * C1108 - C2289 * C1103) *
                 C50266) *
                C50114) *
               C50170 * C286 +
           (((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C118 +
             (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C50266) *
                C2285 +
            ((C2287 * C296 - C2282 * C312 + C2288 * C1096 - C2283 * C1102 +
              C2289 * C2474 - C2284 * C2479) *
                 C118 +
             (C2287 * C313 - C2282 * C326 + C2288 * C1103 - C2283 * C1108 +
              C2289 * C2480 - C2284 * C2483) *
                 C50266) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C5117 +
            (C50251 * C140 - C117 * C127) * C5114 +
            (C50251 * C465 - C117 * C455) * C5118 +
            (C50251 * C485 - C117 * C466) * C5115 +
            (C50251 * C473 - C117 * C459) * C5119 +
            (C50251 * C489 - C117 * C474) * C5116) *
               C2285 +
           ((C148 - C149) * C5117 + (C150 - C151) * C5114 +
            (C497 - C496) * C5118 + (C499 - C498) * C5115 +
            (C508 - C509) * C5119 + (C510 - C511) * C5116) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C5117 + (C151 - C150) * C5114 +
            (C496 - C497) * C5118 + (C498 - C499) * C5115 +
            (C509 - C508) * C5119 + (C511 - C510) * C5116) *
               C2285 +
           ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
            C746 * C5115 + (C513 - C512) * C5119 + (C515 - C514) * C5116) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C168 * C5117 + C169 * C5114 + (C501 - C500) * C5118 +
            (C503 - C502) * C5115 + (C512 - C513) * C5119 +
            (C514 - C515) * C5116) *
               C2285 +
           (C170 * C5117 + C171 * C5114 + (C505 - C504) * C5118 +
            (C507 - C506) * C5115 + (C516 - C517) * C5119 +
            (C518 - C519) * C5116) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C172 * C5117 + C173 * C5114 + C747 * C5118 + C748 * C5115 +
            (C517 - C516) * C5119 + (C519 - C518) * C5116) *
               C2285 +
           (C174 * C5117 + C175 * C5114 + (C750 - C749) * C5118 +
            (C752 - C751) * C5115 + (C117 * C464 - C50251 * C483) * C5119 +
            (C117 * C484 - C50251 * C494) * C5116) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 +
             (C50251 * C465 - C117 * C455) * C5118 +
             (C50251 * C485 - C117 * C466) * C5115 +
             (C50251 * C473 - C117 * C459) * C5119 +
             (C50251 * C489 - C117 * C474) * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 +
             (C497 - C496) * C5118 + (C499 - C498) * C5115 +
             (C508 - C509) * C5119 + (C510 - C511) * C5116) *
                C50114) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 +
             (C117 * C888 - C50251 * C893) * C5118 +
             (C117 * C894 - C50251 * C903) * C5115 +
             (C117 * C1208 - C50251 * C1212) * C5119 +
             (C117 * C1213 - C50251 * C1220) * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 +
             (C910 - C909) * C5118 + (C912 - C911) * C5115 +
             (C5267 - C5268) * C5119 + (C5269 - C5270) * C5116) *
                C50114) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C5117 +
             (C50251 * C324 - C117 * C309) * C5114 +
             (C50251 * C1559 - C117 * C1555) * C5118 +
             (C50251 * C1567 - C117 * C1560) * C5115 +
             (C50251 * C2657 - C117 * C2654) * C5119 +
             (C50251 * C2663 - C117 * C2658) * C5116) *
                C2285 +
            ((C343 - C344) * C5117 + (C345 - C346) * C5114 +
             (C5271 - C5272) * C5118 + (C5273 - C5274) * C5115 +
             (C5275 - C5276) * C5119 + (C5277 - C5278) * C5116) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 +
             (C496 - C497) * C5118 + (C498 - C499) * C5115 +
             (C509 - C508) * C5119 + (C511 - C510) * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + (C513 - C512) * C5119 + (C515 - C514) * C5116) *
                C50114) *
               C50170 * C285 +
           (((C332 - C331) * C5117 + (C334 - C333) * C5114 +
             (C909 - C910) * C5118 + (C911 - C912) * C5115 +
             (C5268 - C5267) * C5119 + (C5270 - C5269) * C5116) *
                C2285 +
            ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
             (C913 - C914) * C5118 + (C915 - C916) * C5115 +
             (C50251 * C1216 - C117 * C1210) * C5119 +
             (C50251 * C1222 - C117 * C1217) * C5116) *
                C50114) *
               C50170 * C286 +
           (((C344 - C343) * C5117 + (C346 - C345) * C5114 +
             (C5272 - C5271) * C5118 + (C5274 - C5273) * C5115 +
             (C5276 - C5275) * C5119 + (C5278 - C5277) * C5116) *
                C2285 +
            ((C348 - C347) * C5117 + (C350 - C349) * C5114 +
             (C117 * C1557 - C50251 * C1563) * C5118 +
             (C117 * C1564 - C50251 * C1569) * C5115 +
             (C117 * C2656 - C50251 * C2661) * C5119 +
             (C117 * C2662 - C50251 * C2665) * C5116) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50170 * C50440 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C50170 * C50441 +
           (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
              C2284 * C2475 - C2289 * C2472) *
                 C118 +
             (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
              C2284 * C2481 - C2289 * C2476) *
                 C50266) *
                C2285 +
            ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
             (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                C50114) *
               C50170 * C1324) *
              C50387 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C50170 * C50440 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                C2285 +
            ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
             (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                C50114) *
               C50170 * C50441 +
           (((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C118 +
             (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C50266) *
                C2285 +
            ((C2287 * C296 - C2282 * C312 + C2288 * C1096 - C2283 * C1102 +
              C2289 * C2474 - C2284 * C2479) *
                 C118 +
             (C2287 * C313 - C2282 * C326 + C2288 * C1103 - C2283 * C1108 +
              C2289 * C2480 - C2284 * C2483) *
                 C50266) *
                C50114) *
               C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C50170 * C50440 +
           (((C117 * C290 - C50251 * C300) * C118 +
             (C117 * C301 - C50251 * C320) * C50266) *
                C107 +
            ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
            C639 * C109 + C640 * C110) *
               C50170 * C50441 +
           (((C50251 * C308 - C117 * C294) * C118 +
             (C50251 * C324 - C117 * C309) * C50266) *
                C107 +
            ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
            ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
            ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
               C50170 * C1324) *
              C50387 +
          ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
            ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
            C186 * C109 + C187 * C110) *
               C50170 * C50440 +
           (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
            ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
            ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
            ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
               C50170 * C50441 +
           (((C344 - C343) * C118 + (C346 - C345) * C50266) * C107 +
            ((C348 - C347) * C118 + (C350 - C349) * C50266) * C108 +
            ((C352 - C351) * C118 + (C354 - C353) * C50266) * C109 +
            ((C117 * C299 - C50251 * C318) * C118 +
             (C117 * C319 - C50251 * C329) * C50266) *
                C110) *
               C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C50170 * C50440 +
           (((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
             (C5977 - C5978) * C5115 + C6393 * C5119 + C6394 * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
             C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                C50114) *
               C50170 * C50441 +
           (((C50251 * C308 - C117 * C294) * C5117 +
             (C50251 * C324 - C117 * C309) * C5114 +
             (C50251 * C1559 - C117 * C1555) * C5118 +
             (C50251 * C1567 - C117 * C1560) * C5115 +
             (C50251 * C2657 - C117 * C2654) * C5119 +
             (C50251 * C2663 - C117 * C2658) * C5116) *
                C2285 +
            ((C343 - C344) * C5117 + (C345 - C346) * C5114 +
             (C5271 - C5272) * C5118 + (C5273 - C5274) * C5115 +
             (C5275 - C5276) * C5119 + (C5277 - C5278) * C5116) *
                C50114) *
               C50170 * C1324) *
              C50387 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C50170 * C50440 +
           (((C332 - C331) * C5117 + (C334 - C333) * C5114 + C5987 * C5118 +
             C5988 * C5115 + C5989 * C5119 + C5990 * C5116) *
                C2285 +
            ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
             (C913 - C914) * C5118 + (C915 - C916) * C5115 +
             (C5623 - C5624) * C5119 + (C5625 - C5626) * C5116) *
                C50114) *
               C50170 * C50441 +
           (((C344 - C343) * C5117 + (C346 - C345) * C5114 +
             (C5272 - C5271) * C5118 + (C5274 - C5273) * C5115 +
             (C5276 - C5275) * C5119 + (C5278 - C5277) * C5116) *
                C2285 +
            ((C348 - C347) * C5117 + (C350 - C349) * C5114 +
             (C117 * C1557 - C50251 * C1563) * C5118 +
             (C117 * C1564 - C50251 * C1569) * C5115 +
             (C117 * C2656 - C50251 * C2661) * C5119 +
             (C117 * C2662 - C50251 * C2665) * C5116) *
                C50114) *
               C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50396 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C50234) *
              C50440 +
          ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C50396 +
           (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
              C2284 * C3203 - C2289 * C3200) *
                 C118 +
             (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
              C2284 * C3209 - C2289 * C3204) *
                 C50266) *
                C2285 +
            ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                C50114) *
               C50234) *
              C50441 +
          ((((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
              C2284 * C2475 - C2289 * C2472) *
                 C118 +
             (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
              C2284 * C2481 - C2289 * C2476) *
                 C50266) *
                C2285 +
            ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
             (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                C50114) *
               C50396 +
           (((C2287 * C1555 - C2282 * C1559 + C2288 * C3200 - C2283 * C3203 +
              C2289 * C4116 - C2284 * C4118) *
                 C118 +
             (C2287 * C1560 - C2282 * C1567 + C2288 * C3204 - C2283 * C3209 +
              C2289 * C4119 - C2284 * C4122) *
                 C50266) *
                C2285 +
            ((C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
              C2289 * C4117 - C2284 * C4120) *
                 C118 +
             (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
              C2289 * C4121 - C2284 * C4123) *
                 C50266) *
                C50114) *
               C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C50396 +
           (((C117 * C455 - C50251 * C465) * C118 +
             (C117 * C466 - C50251 * C485) * C50266) *
                C107 +
            ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
            C757 * C109 + C758 * C110) *
               C50234) *
              C50440 +
          ((((C117 * C290 - C50251 * C300) * C118 +
             (C117 * C301 - C50251 * C320) * C50266) *
                C107 +
            ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
            C639 * C109 + C640 * C110) *
               C50396 +
           (((C50251 * C893 - C117 * C888) * C118 +
             (C50251 * C903 - C117 * C894) * C50266) *
                C107 +
            ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
            ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
            ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
               C50234) *
              C50441 +
          ((((C50251 * C308 - C117 * C294) * C118 +
             (C50251 * C324 - C117 * C309) * C50266) *
                C107 +
            ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
            ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
            ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
               C50396 +
           (((C117 * C1555 - C50251 * C1559) * C118 +
             (C117 * C1560 - C50251 * C1567) * C50266) *
                C107 +
            ((C117 * C1556 - C50251 * C1561) * C118 +
             (C117 * C1562 - C50251 * C1568) * C50266) *
                C108 +
            ((C117 * C1557 - C50251 * C1563) * C118 +
             (C117 * C1564 - C50251 * C1569) * C50266) *
                C109 +
            ((C117 * C1558 - C50251 * C1565) * C118 +
             (C117 * C1566 - C50251 * C1570) * C50266) *
                C110) *
               C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C50396 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
             (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C50234) *
              C50440 +
          ((((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
             (C5977 - C5978) * C5115 + C6393 * C5119 + C6394 * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
             C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                C50114) *
               C50396 +
           (((C5976 - C5975) * C5117 + (C5978 - C5977) * C5114 +
             (C5980 - C5979) * C5118 + (C5982 - C5981) * C5115 +
             (C6395 - C6396) * C5119 + (C6397 - C6398) * C5116) *
                C2285 +
            (C5987 * C5117 + C5988 * C5114 + C5989 * C5118 + C5990 * C5115 +
             (C5991 - C5992) * C5119 + (C5993 - C5994) * C5116) *
                C50114) *
               C50234) *
              C50441 +
          ((((C50251 * C308 - C117 * C294) * C5117 +
             (C50251 * C324 - C117 * C309) * C5114 + (C6885 - C6886) * C5118 +
             (C6887 - C6888) * C5115 + (C6889 - C6890) * C5119 +
             (C6891 - C6892) * C5116) *
                C2285 +
            ((C343 - C344) * C5117 + (C345 - C346) * C5114 +
             (C5271 - C5272) * C5118 + (C5273 - C5274) * C5115 +
             (C5275 - C5276) * C5119 + (C5277 - C5278) * C5116) *
                C50114) *
               C50396 +
           (((C6886 - C6885) * C5117 + (C6888 - C6887) * C5114 +
             (C6890 - C6889) * C5118 + (C6892 - C6891) * C5115 +
             (C117 * C4515 - C50251 * C4519) * C5119 +
             (C117 * C4521 - C50251 * C4527) * C5116) *
                C2285 +
            ((C5272 - C5271) * C5117 + (C5274 - C5273) * C5114 +
             (C5276 - C5275) * C5118 + (C5278 - C5277) * C5115 +
             (C117 * C4517 - C50251 * C4523) * C5119 +
             (C117 * C4525 - C50251 * C4529) * C5116) *
                C50114) *
               C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C50251 * C126 - C117 * C119) * C118 +
                 (C50251 * C140 - C117 * C127) * C50266) *
                    C107 +
                ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                C184 * C109 + C185 * C110) *
                   C50170 * C1018 +
               (((C117 * C290 - C50251 * C300) * C118 +
                 (C117 * C301 - C50251 * C320) * C50266) *
                    C107 +
                ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                C639 * C109 + C640 * C110) *
                   C50170 * C50206) *
                  C1020 +
              ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                C186 * C109 + C187 * C110) *
                   C50170 * C1018 +
               (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
                ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
                ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
                ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                   C50170 * C50206) *
                  C1021 +
              ((C184 * C107 + C185 * C108 +
                ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                   C50170 * C1018 +
               (C639 * C107 + C640 * C108 +
                ((C632 - C631) * C118 + (C634 - C633) * C50266) * C109 +
                ((C117 * C622 - C50251 * C623) * C118 +
                 (C117 * C624 - C50251 * C625) * C50266) *
                    C110) *
                   C50170 * C50206) *
                  C1022) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C50251 * C126 - C117 * C119) * C118 +
                (C50251 * C140 - C117 * C127) * C50266) *
                   C107 +
               ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
               C184 * C109 + C185 * C110) *
                  C50170 * C1089 +
              (((C117 * C290 - C50251 * C300) * C118 +
                (C117 * C301 - C50251 * C320) * C50266) *
                   C107 +
               ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
               C639 * C109 + C640 * C110) *
                  C50170 * C1090 +
              (((C50251 * C308 - C117 * C294) * C118 +
                (C50251 * C324 - C117 * C309) * C50266) *
                   C107 +
               ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
               ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
               ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                  C50170 * C1091 +
              (((C117 * C1094 - C50251 * C1098) * C118 +
                (C117 * C1099 - C50251 * C1106) * C50266) *
                   C107 +
               ((C117 * C1095 - C50251 * C1100) * C118 +
                (C117 * C1101 - C50251 * C1107) * C50266) *
                   C108 +
               ((C117 * C1096 - C50251 * C1102) * C118 +
                (C117 * C1103 - C50251 * C1108) * C50266) *
                   C109 +
               ((C117 * C1097 - C50251 * C1104) * C118 +
                (C117 * C1105 - C50251 * C1109) * C50266) *
                   C110) *
                  C50170 * C1092) *
             C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C452 +
           (((C117 * C455 - C50251 * C465) * C118 +
             (C117 * C466 - C50251 * C485) * C50266) *
                C107 +
            ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
            C757 * C109 + C758 * C110) *
               C453 +
           (((C50251 * C473 - C117 * C459) * C118 +
             (C50251 * C489 - C117 * C474) * C50266) *
                C107 +
            ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
            ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
            ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
               C454) *
              C1018 +
          ((((C117 * C290 - C50251 * C300) * C118 +
             (C117 * C301 - C50251 * C320) * C50266) *
                C107 +
            ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
            C639 * C109 + C640 * C110) *
               C452 +
           (((C50251 * C893 - C117 * C888) * C118 +
             (C50251 * C903 - C117 * C894) * C50266) *
                C107 +
            ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
            ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
            ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
               C453 +
           (((C117 * C1208 - C50251 * C1212) * C118 +
             (C117 * C1213 - C50251 * C1220) * C50266) *
                C107 +
            ((C117 * C1209 - C50251 * C1214) * C118 +
             (C117 * C1215 - C50251 * C1221) * C50266) *
                C108 +
            ((C117 * C1210 - C50251 * C1216) * C118 +
             (C117 * C1217 - C50251 * C1222) * C50266) *
                C109 +
            ((C117 * C1211 - C50251 * C1218) * C118 +
             (C117 * C1219 - C50251 * C1223) * C50266) *
                C110) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                C2285 +
            ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
             (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
             (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                C2285 +
            ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
             (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C118 +
             (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C50266) *
                C2285 +
            ((C2287 * C293 - C2282 * C306 + C2288 * C297 - C2283 * C314 +
              C2289 * C1097 - C2284 * C1104) *
                 C118 +
             (C2287 * C307 - C2282 * C323 + C2288 * C315 - C2283 * C327 +
              C2289 * C1105 - C2284 * C1109) *
                 C50266) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C118 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C50266) *
               C2285 +
           ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
            (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
               C50114) *
              C50170 * C1089 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C118 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C50266) *
               C2285 +
           ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
            (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
               C50114) *
              C50170 * C1090 +
          (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C118 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C50266) *
               C2285 +
           ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
            (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
               C50114) *
              C50170 * C1091 +
          (((C2287 * C1094 - C2282 * C1098 + C2288 * C2472 - C2283 * C2475 +
             C2289 * C3468 - C2284 * C3470) *
                C118 +
            (C2287 * C1099 - C2282 * C1106 + C2288 * C2476 - C2283 * C2481 +
             C2289 * C3471 - C2284 * C3474) *
                C50266) *
               C2285 +
           ((C2287 * C1095 - C2282 * C1100 + C2288 * C2473 - C2283 * C2477 +
             C2289 * C3469 - C2284 * C3472) *
                C118 +
            (C2287 * C1101 - C2282 * C1107 + C2288 * C2478 - C2283 * C2482 +
             C2289 * C3473 - C2284 * C3475) *
                C50266) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C452 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C453 +
           (((C2282 * C473 - C2287 * C459 + C2283 * C1212 - C2288 * C1208 +
              C2284 * C2657 - C2289 * C2654) *
                 C118 +
             (C2282 * C489 - C2287 * C474 + C2283 * C1220 - C2288 * C1213 +
              C2284 * C2663 - C2289 * C2658) *
                 C50266) *
                C2285 +
            ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                C50114) *
               C454) *
              C1018 +
          ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C452 +
           (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
              C2284 * C3203 - C2289 * C3200) *
                 C118 +
             (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
              C2284 * C3209 - C2289 * C3204) *
                 C50266) *
                C2285 +
            ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                C50114) *
               C453 +
           (((C2287 * C1208 - C2282 * C1212 + C2288 * C2654 - C2283 * C2657 +
              C2289 * C3622 - C2284 * C3624) *
                 C118 +
             (C2287 * C1213 - C2282 * C1220 + C2288 * C2658 - C2283 * C2663 +
              C2289 * C3625 - C2284 * C3628) *
                 C50266) *
                C2285 +
            ((C2287 * C1209 - C2282 * C1214 + C2288 * C2655 - C2283 * C2659 +
              C2289 * C3623 - C2284 * C3626) *
                 C118 +
             (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 - C2283 * C2664 +
              C2289 * C3627 - C2284 * C3629) *
                 C50266) *
                C50114) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C50170 * C1018 +
           (((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
             (C5977 - C5978) * C5115 + (C5979 - C5980) * C5119 +
             (C5981 - C5982) * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
             C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C50170 * C1018 +
           (((C332 - C331) * C5117 + (C334 - C333) * C5114 + C5987 * C5118 +
             C5988 * C5115 + C5989 * C5119 + C5990 * C5116) *
                C2285 +
            ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
             (C913 - C914) * C5118 + (C915 - C916) * C5115 +
             (C5623 - C5624) * C5119 + (C5625 - C5626) * C5116) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C168 * C5117 + C169 * C5114 + C5773 * C5118 + C5774 * C5115 +
             C5775 * C5119 + C5776 * C5116) *
                C2285 +
            (C170 * C5117 + C171 * C5114 + (C505 - C504) * C5118 +
             (C507 - C506) * C5115 + (C516 - C517) * C5119 +
             (C518 - C519) * C5116) *
                C50114) *
               C50170 * C1018 +
           ((C627 * C5117 + C628 * C5114 + (C914 - C913) * C5118 +
             (C916 - C915) * C5115 + (C5624 - C5623) * C5119 +
             (C5626 - C5625) * C5116) *
                C2285 +
            (C629 * C5117 + C630 * C5114 + (C918 - C917) * C5118 +
             (C920 - C919) * C5115 + (C117 * C1211 - C50251 * C1218) * C5119 +
             (C117 * C1219 - C50251 * C1223) * C5116) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C5117 +
            (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
            (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
               C2285 +
           ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
            C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
               C50114) *
              C50170 * C1089 +
          (((C117 * C290 - C50251 * C300) * C5117 +
            (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
            (C5977 - C5978) * C5115 + (C5979 - C5980) * C5119 +
            (C5981 - C5982) * C5116) *
               C2285 +
           ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
            C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
               C50114) *
              C50170 * C1090 +
          (((C50251 * C308 - C117 * C294) * C5117 +
            (C50251 * C324 - C117 * C309) * C5114 +
            (C50251 * C1559 - C117 * C1555) * C5118 +
            (C50251 * C1567 - C117 * C1560) * C5115 +
            (C50251 * C2657 - C117 * C2654) * C5119 +
            (C50251 * C2663 - C117 * C2658) * C5116) *
               C2285 +
           ((C343 - C344) * C5117 + (C345 - C346) * C5114 +
            (C5271 - C5272) * C5118 + (C5273 - C5274) * C5115 +
            (C5275 - C5276) * C5119 + (C5277 - C5278) * C5116) *
               C50114) *
              C50170 * C1091 +
          (((C117 * C1094 - C50251 * C1098) * C5117 +
            (C117 * C1099 - C50251 * C1106) * C5114 +
            (C117 * C3200 - C50251 * C3203) * C5118 +
            (C117 * C3204 - C50251 * C3209) * C5115 +
            (C117 * C3622 - C50251 * C3624) * C5119 +
            (C117 * C3625 - C50251 * C3628) * C5116) *
               C2285 +
           ((C117 * C1095 - C50251 * C1100) * C5117 +
            (C117 * C1101 - C50251 * C1107) * C5114 +
            (C117 * C3201 - C50251 * C3205) * C5118 +
            (C117 * C3206 - C50251 * C3210) * C5115 +
            (C117 * C3623 - C50251 * C3626) * C5119 +
            (C117 * C3627 - C50251 * C3629) * C5116) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C452 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
             (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C453 +
           ((C5471 * C5117 + C5472 * C5114 + (C5450 - C5449) * C5118 +
             (C5452 - C5451) * C5115 + (C50251 * C5427 - C117 * C5424) * C5119 +
             (C50251 * C5433 - C117 * C5428) * C5116) *
                C2285 +
            (C5447 * C5117 + C5448 * C5114 + C5475 * C5118 + C5476 * C5115 +
             (C5461 - C5462) * C5119 + (C5463 - C5464) * C5116) *
                C50114) *
               C454) *
              C1018 +
          ((((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
             (C5977 - C5978) * C5115 + C6393 * C5119 + C6394 * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
             C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                C50114) *
               C452 +
           (((C5976 - C5975) * C5117 + (C5978 - C5977) * C5114 +
             (C5980 - C5979) * C5118 + (C5982 - C5981) * C5115 +
             (C6395 - C6396) * C5119 + (C6397 - C6398) * C5116) *
                C2285 +
            (C5987 * C5117 + C5988 * C5114 + C5989 * C5118 + C5990 * C5115 +
             (C5991 - C5992) * C5119 + (C5993 - C5994) * C5116) *
                C50114) *
               C453 +
           ((C6393 * C5117 + C6394 * C5114 + (C6396 - C6395) * C5118 +
             (C6398 - C6397) * C5115 + (C117 * C6384 - C50251 * C6386) * C5119 +
             (C117 * C6387 - C50251 * C6390) * C5116) *
                C2285 +
            (C5985 * C5117 + C5986 * C5114 + (C5992 - C5991) * C5118 +
             (C5994 - C5993) * C5115 + (C117 * C6385 - C50251 * C6388) * C5119 +
             (C117 * C6389 - C50251 * C6391) * C5116) *
                C50114) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
               C2284 * C308 - C2289 * C294) *
                  C118 +
              (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
               C2284 * C324 - C2289 * C309) *
                  C50266) *
                 C2285 +
             ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
              (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                 C50114) *
                C50396 +
            (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
               C2289 * C1555 - C2284 * C1559) *
                  C118 +
              (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
               C2289 * C1560 - C2284 * C1567) *
                  C50266) *
                 C2285 +
             ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
              (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
               C2289 * C1094 - C2284 * C1098) *
                  C118 +
              (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
               C2289 * C1099 - C2284 * C1106) *
                  C50266) *
                 C2285 +
             ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
              (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                 C50114) *
                C50396 +
            (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
               C2284 * C3203 - C2289 * C3200) *
                  C118 +
              (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
               C2284 * C3209 - C2289 * C3204) *
                  C50266) *
                 C2285 +
             ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
              (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
              (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                 C2285 +
             ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
              (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                 C50114) *
                C50396 +
            (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
              (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                 C2285 +
             ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
              (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
              (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                 C2285 +
             ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
              (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                 C50114) *
                C50396 +
            (((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C118 +
              (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C50266) *
                 C2285 +
             ((C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
               C2289 * C3202 - C2284 * C3207) *
                  C118 +
              (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
               C2289 * C3208 - C2284 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C118 +
              (C50251 * C140 - C117 * C127) * C50266) *
                 C107 +
             ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
             C184 * C109 + C185 * C110) *
                C50396 +
            (((C117 * C455 - C50251 * C465) * C118 +
              (C117 * C466 - C50251 * C485) * C50266) *
                 C107 +
             ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
             C757 * C109 + C758 * C110) *
                C50234) *
               C1018 +
           ((((C117 * C290 - C50251 * C300) * C118 +
              (C117 * C301 - C50251 * C320) * C50266) *
                 C107 +
             ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
             C639 * C109 + C640 * C110) *
                C50396 +
            (((C50251 * C893 - C117 * C888) * C118 +
              (C50251 * C903 - C117 * C894) * C50266) *
                 C107 +
             ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
             ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
             ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
             ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
             C186 * C109 + C187 * C110) *
                C50396 +
            (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
             ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
             ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
             ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                C50234) *
               C1018 +
           ((((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
             ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
             ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
             ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                C50396 +
            (((C910 - C909) * C118 + (C912 - C911) * C50266) * C107 +
             ((C914 - C913) * C118 + (C916 - C915) * C50266) * C108 +
             ((C918 - C917) * C118 + (C920 - C919) * C50266) * C109 +
             ((C117 * C892 - C50251 * C901) * C118 +
              (C117 * C902 - C50251 * C907) * C50266) *
                 C110) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C5117 +
              (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
              (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                 C2285 +
             ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
              C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                 C50114) *
                C50396 +
            (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
              (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
              (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                 C2285 +
             (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
              C5473 * C5119 + C5474 * C5116) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C117 * C290 - C50251 * C300) * C5117 +
              (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
              (C5977 - C5978) * C5115 + C6393 * C5119 + C6394 * C5116) *
                 C2285 +
             ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
              C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                 C50114) *
                C50396 +
            (((C5976 - C5975) * C5117 + (C5978 - C5977) * C5114 +
              (C5980 - C5979) * C5118 + (C5982 - C5981) * C5115 +
              (C6395 - C6396) * C5119 + (C6397 - C6398) * C5116) *
                 C2285 +
             (C5987 * C5117 + C5988 * C5114 + C5989 * C5118 + C5990 * C5115 +
              (C5991 - C5992) * C5119 + (C5993 - C5994) * C5116) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
              C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                 C2285 +
             ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
              C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                 C50114) *
                C50396 +
            ((C5445 * C5117 + C5446 * C5114 + C5447 * C5118 + C5448 * C5115 +
              C5475 * C5119 + C5476 * C5116) *
                 C2285 +
             (C5773 * C5117 + C5774 * C5114 + C5775 * C5118 + C5776 * C5115 +
              (C5467 - C5468) * C5119 + (C5469 - C5470) * C5116) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C332 - C331) * C5117 + (C334 - C333) * C5114 + C5987 * C5118 +
              C5988 * C5115 + C5989 * C5119 + C5990 * C5116) *
                 C2285 +
             ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
              (C913 - C914) * C5118 + (C915 - C916) * C5115 +
              (C5623 - C5624) * C5119 + (C5625 - C5626) * C5116) *
                 C50114) *
                C50396 +
            ((C5983 * C5117 + C5984 * C5114 + C5985 * C5118 + C5986 * C5115 +
              (C5992 - C5991) * C5119 + (C5994 - C5993) * C5116) *
                 C2285 +
             ((C914 - C913) * C5117 + (C916 - C915) * C5114 +
              (C5624 - C5623) * C5118 + (C5626 - C5625) * C5115 +
              (C117 * C5970 - C50251 * C5971) * C5119 +
              (C117 * C5972 - C50251 * C5973) * C5116) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C118 +
            (C50251 * C140 - C117 * C127) * C50266) *
               C107 +
           ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
           C184 * C109 + C185 * C110) *
              C50170 * C1089 +
          (((C117 * C290 - C50251 * C300) * C118 +
            (C117 * C301 - C50251 * C320) * C50266) *
               C107 +
           ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
           C639 * C109 + C640 * C110) *
              C50170 * C1090 +
          (((C50251 * C308 - C117 * C294) * C118 +
            (C50251 * C324 - C117 * C309) * C50266) *
               C107 +
           ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
           ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
           ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
              C50170 * C1091 +
          (((C117 * C1094 - C50251 * C1098) * C118 +
            (C117 * C1099 - C50251 * C1106) * C50266) *
               C107 +
           ((C117 * C1095 - C50251 * C1100) * C118 +
            (C117 * C1101 - C50251 * C1107) * C50266) *
               C108 +
           ((C117 * C1096 - C50251 * C1102) * C118 +
            (C117 * C1103 - C50251 * C1108) * C50266) *
               C109 +
           ((C117 * C1097 - C50251 * C1104) * C118 +
            (C117 * C1105 - C50251 * C1109) * C50266) *
               C110) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C50170 * C1018 +
           (((C117 * C290 - C50251 * C300) * C118 +
             (C117 * C301 - C50251 * C320) * C50266) *
                C107 +
            ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
            C639 * C109 + C640 * C110) *
               C50170 * C50206) *
              C1020 +
          ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
            ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
            C186 * C109 + C187 * C110) *
               C50170 * C1018 +
           (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
            ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
            ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
            ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
               C50170 * C50206) *
              C1021 +
          ((C184 * C107 + C185 * C108 +
            ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
            ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
               C50170 * C1018 +
           (C639 * C107 + C640 * C108 +
            ((C632 - C631) * C118 + (C634 - C633) * C50266) * C109 +
            ((C117 * C622 - C50251 * C623) * C118 +
             (C117 * C624 - C50251 * C625) * C50266) *
                C110) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                C2285 +
            ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
             (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
             (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                C2285 +
            ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
             (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C118 +
             (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C50266) *
                C2285 +
            ((C2287 * C293 - C2282 * C306 + C2288 * C297 - C2283 * C314 +
              C2289 * C1097 - C2284 * C1104) *
                 C118 +
             (C2287 * C307 - C2282 * C323 + C2288 * C315 - C2283 * C327 +
              C2289 * C1105 - C2284 * C1109) *
                 C50266) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C118 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C50266) *
               C2285 +
           ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
            (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
               C50114) *
              C50170 * C1089 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C118 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C50266) *
               C2285 +
           ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
            (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
               C50114) *
              C50170 * C1090 +
          (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C118 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C50266) *
               C2285 +
           ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
            (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
               C50114) *
              C50170 * C1091 +
          (((C2287 * C1094 - C2282 * C1098 + C2288 * C2472 - C2283 * C2475 +
             C2289 * C3468 - C2284 * C3470) *
                C118 +
            (C2287 * C1099 - C2282 * C1106 + C2288 * C2476 - C2283 * C2481 +
             C2289 * C3471 - C2284 * C3474) *
                C50266) *
               C2285 +
           ((C2287 * C1095 - C2282 * C1100 + C2288 * C2473 - C2283 * C2477 +
             C2289 * C3469 - C2284 * C3472) *
                C118 +
            (C2287 * C1101 - C2282 * C1107 + C2288 * C2478 - C2283 * C2482 +
             C2289 * C3473 - C2284 * C3475) *
                C50266) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C50170 * C1018 +
           (((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
             (C5977 - C5978) * C5115 + (C5979 - C5980) * C5119 +
             (C5981 - C5982) * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
             C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C50170 * C1018 +
           (((C332 - C331) * C5117 + (C334 - C333) * C5114 + C5987 * C5118 +
             C5988 * C5115 + C5989 * C5119 + C5990 * C5116) *
                C2285 +
            ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
             (C913 - C914) * C5118 + (C915 - C916) * C5115 +
             (C5623 - C5624) * C5119 + (C5625 - C5626) * C5116) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C168 * C5117 + C169 * C5114 + C5773 * C5118 + C5774 * C5115 +
             C5775 * C5119 + C5776 * C5116) *
                C2285 +
            (C170 * C5117 + C171 * C5114 + (C505 - C504) * C5118 +
             (C507 - C506) * C5115 + (C516 - C517) * C5119 +
             (C518 - C519) * C5116) *
                C50114) *
               C50170 * C1018 +
           ((C627 * C5117 + C628 * C5114 + (C914 - C913) * C5118 +
             (C916 - C915) * C5115 + (C5624 - C5623) * C5119 +
             (C5626 - C5625) * C5116) *
                C2285 +
            (C629 * C5117 + C630 * C5114 + (C918 - C917) * C5118 +
             (C920 - C919) * C5115 + (C117 * C1211 - C50251 * C1218) * C5119 +
             (C117 * C1219 - C50251 * C1223) * C5116) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C5117 +
            (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
            (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
               C2285 +
           ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
            C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
               C50114) *
              C50170 * C1089 +
          (((C117 * C290 - C50251 * C300) * C5117 +
            (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
            (C5977 - C5978) * C5115 + (C5979 - C5980) * C5119 +
            (C5981 - C5982) * C5116) *
               C2285 +
           ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
            C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
               C50114) *
              C50170 * C1090 +
          (((C50251 * C308 - C117 * C294) * C5117 +
            (C50251 * C324 - C117 * C309) * C5114 +
            (C50251 * C1559 - C117 * C1555) * C5118 +
            (C50251 * C1567 - C117 * C1560) * C5115 +
            (C50251 * C2657 - C117 * C2654) * C5119 +
            (C50251 * C2663 - C117 * C2658) * C5116) *
               C2285 +
           ((C343 - C344) * C5117 + (C345 - C346) * C5114 +
            (C5271 - C5272) * C5118 + (C5273 - C5274) * C5115 +
            (C5275 - C5276) * C5119 + (C5277 - C5278) * C5116) *
               C50114) *
              C50170 * C1091 +
          (((C117 * C1094 - C50251 * C1098) * C5117 +
            (C117 * C1099 - C50251 * C1106) * C5114 +
            (C117 * C3200 - C50251 * C3203) * C5118 +
            (C117 * C3204 - C50251 * C3209) * C5115 +
            (C117 * C3622 - C50251 * C3624) * C5119 +
            (C117 * C3625 - C50251 * C3628) * C5116) *
               C2285 +
           ((C117 * C1095 - C50251 * C1100) * C5117 +
            (C117 * C1101 - C50251 * C1107) * C5114 +
            (C117 * C3201 - C50251 * C3205) * C5118 +
            (C117 * C3206 - C50251 * C3210) * C5115 +
            (C117 * C3623 - C50251 * C3626) * C5119 +
            (C117 * C3627 - C50251 * C3629) * C5116) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
               C2284 * C308 - C2289 * C294) *
                  C118 +
              (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
               C2284 * C324 - C2289 * C309) *
                  C50266) *
                 C2285 +
             ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
              (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                 C50114) *
                C1669 +
            (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
               C2289 * C1555 - C2284 * C1559) *
                  C118 +
              (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
               C2289 * C1560 - C2284 * C1567) *
                  C50266) *
                 C2285 +
             ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
              (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
               C2289 * C1094 - C2284 * C1098) *
                  C118 +
              (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
               C2289 * C1099 - C2284 * C1106) *
                  C50266) *
                 C2285 +
             ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
              (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                 C50114) *
                C1669 +
            (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
               C2284 * C3203 - C2289 * C3200) *
                  C118 +
              (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
               C2284 * C3209 - C2289 * C3204) *
                  C50266) *
                 C2285 +
             ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
              (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
              (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                 C2285 +
             ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
              (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                 C50114) *
                C1669 +
            (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
              (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                 C2285 +
             ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
              (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
              (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                 C2285 +
             ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
              (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                 C50114) *
                C1669 +
            (((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C118 +
              (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C50266) *
                 C2285 +
             ((C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
               C2289 * C3202 - C2284 * C3207) *
                  C118 +
              (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
               C2289 * C3208 - C2284 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C118 +
              (C50251 * C140 - C117 * C127) * C50266) *
                 C107 +
             ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
             C184 * C109 + C185 * C110) *
                C1669 +
            (((C117 * C455 - C50251 * C465) * C118 +
              (C117 * C466 - C50251 * C485) * C50266) *
                 C107 +
             ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
             C757 * C109 + C758 * C110) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C118 +
              (C117 * C301 - C50251 * C320) * C50266) *
                 C107 +
             ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
             C639 * C109 + C640 * C110) *
                C1669 +
            (((C50251 * C893 - C117 * C888) * C118 +
              (C50251 * C903 - C117 * C894) * C50266) *
                 C107 +
             ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
             ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
             ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
             ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
             C186 * C109 + C187 * C110) *
                C1669 +
            (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
             ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
             ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
             ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
             ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
             ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
             ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                C1669 +
            (((C910 - C909) * C118 + (C912 - C911) * C50266) * C107 +
             ((C914 - C913) * C118 + (C916 - C915) * C50266) * C108 +
             ((C918 - C917) * C118 + (C920 - C919) * C50266) * C109 +
             ((C117 * C892 - C50251 * C901) * C118 +
              (C117 * C902 - C50251 * C907) * C50266) *
                 C110) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C5117 +
              (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
              (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                 C2285 +
             ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
              C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                 C50114) *
                C1669 +
            (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
              (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
              C7291 * C5119 + C7292 * C5116) *
                 C2285 +
             (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
              C5473 * C5119 + C5474 * C5116) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C5117 +
              (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
              (C5977 - C5978) * C5115 + C6393 * C5119 + C6394 * C5116) *
                 C2285 +
             ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
              C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                 C50114) *
                C1669 +
            (((C5976 - C5975) * C5117 + (C5978 - C5977) * C5114 +
              (C5980 - C5979) * C5118 + (C5982 - C5981) * C5115 +
              (C6395 - C6396) * C5119 + (C6397 - C6398) * C5116) *
                 C2285 +
             (C5987 * C5117 + C5988 * C5114 + C5989 * C5118 + C5990 * C5115 +
              (C5991 - C5992) * C5119 + (C5993 - C5994) * C5116) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
              C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                 C2285 +
             ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
              C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                 C50114) *
                C1669 +
            ((C5445 * C5117 + C5446 * C5114 + C5447 * C5118 + C5448 * C5115 +
              C5475 * C5119 + C5476 * C5116) *
                 C2285 +
             (C5773 * C5117 + C5774 * C5114 + C5775 * C5118 + C5776 * C5115 +
              (C5467 - C5468) * C5119 + (C5469 - C5470) * C5116) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C5117 + (C334 - C333) * C5114 + C5987 * C5118 +
              C5988 * C5115 + C5989 * C5119 + C5990 * C5116) *
                 C2285 +
             ((C336 - C335) * C5117 + (C338 - C337) * C5114 +
              (C913 - C914) * C5118 + (C915 - C916) * C5115 +
              (C5623 - C5624) * C5119 + (C5625 - C5626) * C5116) *
                 C50114) *
                C1669 +
            ((C5983 * C5117 + C5984 * C5114 + C5985 * C5118 + C5986 * C5115 +
              (C5992 - C5991) * C5119 + (C5994 - C5993) * C5116) *
                 C2285 +
             ((C914 - C913) * C5117 + (C916 - C915) * C5114 +
              (C5624 - C5623) * C5118 + (C5626 - C5625) * C5115 +
              (C117 * C5970 - C50251 * C5971) * C5119 +
              (C117 * C5972 - C50251 * C5973) * C5116) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50442 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C50443 +
           (((C2282 * C473 - C2287 * C459 + C2283 * C1212 - C2288 * C1208 +
              C2284 * C2657 - C2289 * C2654) *
                 C118 +
             (C2282 * C489 - C2287 * C474 + C2283 * C1220 - C2288 * C1213 +
              C2284 * C2663 - C2289 * C2658) *
                 C50266) *
                C2285 +
            ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                C50114) *
               C2085) *
              C50395 +
          ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C50442 +
           (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
              C2284 * C3203 - C2289 * C3200) *
                 C118 +
             (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
              C2284 * C3209 - C2289 * C3204) *
                 C50266) *
                C2285 +
            ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                C50114) *
               C50443 +
           (((C2287 * C1208 - C2282 * C1212 + C2288 * C2654 - C2283 * C2657 +
              C2289 * C3622 - C2284 * C3624) *
                 C118 +
             (C2287 * C1213 - C2282 * C1220 + C2288 * C2658 - C2283 * C2663 +
              C2289 * C3625 - C2284 * C3628) *
                 C50266) *
                C2285 +
            ((C2287 * C1209 - C2282 * C1214 + C2288 * C2655 - C2283 * C2659 +
              C2289 * C3623 - C2284 * C3626) *
                 C118 +
             (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 - C2283 * C2664 +
              C2289 * C3627 - C2284 * C3629) *
                 C50266) *
                C50114) *
               C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C50442 +
           (((C117 * C455 - C50251 * C465) * C118 +
             (C117 * C466 - C50251 * C485) * C50266) *
                C107 +
            ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
            C757 * C109 + C758 * C110) *
               C50443 +
           (((C50251 * C473 - C117 * C459) * C118 +
             (C50251 * C489 - C117 * C474) * C50266) *
                C107 +
            ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
            ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
            ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
               C2085) *
              C50395 +
          ((((C117 * C290 - C50251 * C300) * C118 +
             (C117 * C301 - C50251 * C320) * C50266) *
                C107 +
            ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
            C639 * C109 + C640 * C110) *
               C50442 +
           (((C50251 * C893 - C117 * C888) * C118 +
             (C50251 * C903 - C117 * C894) * C50266) *
                C107 +
            ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
            ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
            ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
               C50443 +
           (((C117 * C1208 - C50251 * C1212) * C118 +
             (C117 * C1213 - C50251 * C1220) * C50266) *
                C107 +
            ((C117 * C1209 - C50251 * C1214) * C118 +
             (C117 * C1215 - C50251 * C1221) * C50266) *
                C108 +
            ((C117 * C1210 - C50251 * C1216) * C118 +
             (C117 * C1217 - C50251 * C1222) * C50266) *
                C109 +
            ((C117 * C1211 - C50251 * C1218) * C118 +
             (C117 * C1219 - C50251 * C1223) * C50266) *
                C110) *
               C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C50442 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 + C7291 * C5119 +
             C7292 * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C50443 +
           ((C5471 * C5117 + C5472 * C5114 + (C5450 - C5449) * C5118 +
             (C5452 - C5451) * C5115 + (C7293 - C7294) * C5119 +
             (C7295 - C7296) * C5116) *
                C2285 +
            (C5447 * C5117 + C5448 * C5114 + C5475 * C5118 + C5476 * C5115 +
             (C5461 - C5462) * C5119 + (C5463 - C5464) * C5116) *
                C50114) *
               C2085) *
              C50395 +
          ((((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
             (C5977 - C5978) * C5115 + C6393 * C5119 + C6394 * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
             C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                C50114) *
               C50442 +
           (((C5976 - C5975) * C5117 + (C5978 - C5977) * C5114 +
             (C5980 - C5979) * C5118 + (C5982 - C5981) * C5115 +
             (C6395 - C6396) * C5119 + (C6397 - C6398) * C5116) *
                C2285 +
            (C5987 * C5117 + C5988 * C5114 + C5989 * C5118 + C5990 * C5115 +
             (C5991 - C5992) * C5119 + (C5993 - C5994) * C5116) *
                C50114) *
               C50443 +
           ((C6393 * C5117 + C6394 * C5114 + (C6396 - C6395) * C5118 +
             (C6398 - C6397) * C5115 + (C117 * C6384 - C50251 * C6386) * C5119 +
             (C117 * C6387 - C50251 * C6390) * C5116) *
                C2285 +
            (C5985 * C5117 + C5986 * C5114 + (C5992 - C5991) * C5118 +
             (C5994 - C5993) * C5115 + (C117 * C6385 - C50251 * C6388) * C5119 +
             (C117 * C6389 - C50251 * C6391) * C5116) *
                C50114) *
               C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C50251 * C126 - C117 * C119) * C118 +
                 (C50251 * C140 - C117 * C127) * C50266) *
                    C107 +
                ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                C184 * C109 + C185 * C110) *
                   C1669 +
               (((C117 * C455 - C50251 * C465) * C118 +
                 (C117 * C466 - C50251 * C485) * C50266) *
                    C107 +
                ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                C757 * C109 + C758 * C110) *
                   C50234) *
                  C50154 * C1020 +
              ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                C186 * C109 + C187 * C110) *
                   C1669 +
               (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
                ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
                ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
                ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                   C50234) *
                  C50154 * C1021 +
              ((C184 * C107 + C185 * C108 +
                ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                   C1669 +
               (C757 * C107 + C758 * C108 +
                ((C750 - C749) * C118 + (C752 - C751) * C50266) * C109 +
                ((C117 * C740 - C50251 * C741) * C118 +
                 (C117 * C742 - C50251 * C743) * C50266) *
                    C110) *
                   C50234) *
                  C50154 * C1022) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C50251 * C126 - C117 * C119) * C118 +
                 (C50251 * C140 - C117 * C127) * C50266) *
                    C107 +
                ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                C184 * C109 + C185 * C110) *
                   C1669 +
               (((C117 * C455 - C50251 * C465) * C118 +
                 (C117 * C466 - C50251 * C485) * C50266) *
                    C107 +
                ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                C757 * C109 + C758 * C110) *
                   C50234) *
                  C285 +
              ((((C117 * C290 - C50251 * C300) * C118 +
                 (C117 * C301 - C50251 * C320) * C50266) *
                    C107 +
                ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                C639 * C109 + C640 * C110) *
                   C1669 +
               (((C50251 * C893 - C117 * C888) * C118 +
                 (C50251 * C903 - C117 * C894) * C50266) *
                    C107 +
                ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
                ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
                ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                   C50234) *
                  C286 +
              ((((C50251 * C308 - C117 * C294) * C118 +
                 (C50251 * C324 - C117 * C309) * C50266) *
                    C107 +
                ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                   C1669 +
               (((C117 * C1555 - C50251 * C1559) * C118 +
                 (C117 * C1560 - C50251 * C1567) * C50266) *
                    C107 +
                ((C117 * C1556 - C50251 * C1561) * C118 +
                 (C117 * C1562 - C50251 * C1568) * C50266) *
                    C108 +
                ((C117 * C1557 - C50251 * C1563) * C118 +
                 (C117 * C1564 - C50251 * C1569) * C50266) *
                    C109 +
                ((C117 * C1558 - C50251 * C1565) * C118 +
                 (C117 * C1566 - C50251 * C1570) * C50266) *
                    C110) *
                   C50234) *
                  C287) *
             C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C118 +
            (C50251 * C140 - C117 * C127) * C50266) *
               C107 +
           ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
           C184 * C109 + C185 * C110) *
              C1835 +
          (((C117 * C455 - C50251 * C465) * C118 +
            (C117 * C466 - C50251 * C485) * C50266) *
               C107 +
           ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
           C757 * C109 + C758 * C110) *
              C1836 +
          (((C50251 * C473 - C117 * C459) * C118 +
            (C50251 * C489 - C117 * C474) * C50266) *
               C107 +
           ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
           ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
           ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
              C1837 +
          (((C117 * C1839 - C50251 * C1843) * C118 +
            (C117 * C1844 - C50251 * C1851) * C50266) *
               C107 +
           ((C117 * C1840 - C50251 * C1845) * C118 +
            (C117 * C1846 - C50251 * C1852) * C50266) *
               C108 +
           ((C117 * C1841 - C50251 * C1847) * C118 +
            (C117 * C1848 - C50251 * C1853) * C50266) *
               C109 +
           ((C117 * C1842 - C50251 * C1849) * C118 +
            (C117 * C1850 - C50251 * C1854) * C50266) *
               C110) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C1669 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C1669 +
           (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                C2285 +
            ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
             (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
             (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                C2285 +
            ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
             (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                C50114) *
               C1669 +
           (((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C118 +
             (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C50266) *
                C2285 +
            ((C2287 * C458 - C2282 * C471 + C2288 * C891 - C2283 * C899 +
              C2289 * C1558 - C2284 * C1565) *
                 C118 +
             (C2287 * C472 - C2282 * C488 + C2288 * C900 - C2283 * C906 +
              C2289 * C1566 - C2284 * C1570) *
                 C50266) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C1669 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C50234) *
              C285 +
          ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C1669 +
           (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
              C2284 * C3203 - C2289 * C3200) *
                 C118 +
             (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
              C2284 * C3209 - C2289 * C3204) *
                 C50266) *
                C2285 +
            ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                C50114) *
               C50234) *
              C286 +
          ((((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
              C2284 * C2475 - C2289 * C2472) *
                 C118 +
             (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
              C2284 * C2481 - C2289 * C2476) *
                 C50266) *
                C2285 +
            ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
             (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                C50114) *
               C1669 +
           (((C2287 * C1555 - C2282 * C1559 + C2288 * C3200 - C2283 * C3203 +
              C2289 * C4116 - C2284 * C4118) *
                 C118 +
             (C2287 * C1560 - C2282 * C1567 + C2288 * C3204 - C2283 * C3209 +
              C2289 * C4119 - C2284 * C4122) *
                 C50266) *
                C2285 +
            ((C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
              C2289 * C4117 - C2284 * C4120) *
                 C118 +
             (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
              C2289 * C4121 - C2284 * C4123) *
                 C50266) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C118 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C50266) *
               C2285 +
           ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
            (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
               C50114) *
              C1835 +
          (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
             C2289 * C1555 - C2284 * C1559) *
                C118 +
            (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
             C2289 * C1560 - C2284 * C1567) *
                C50266) *
               C2285 +
           ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
               C50114) *
              C1836 +
          (((C2282 * C473 - C2287 * C459 + C2283 * C1212 - C2288 * C1208 +
             C2284 * C2657 - C2289 * C2654) *
                C118 +
            (C2282 * C489 - C2287 * C474 + C2283 * C1220 - C2288 * C1213 +
             C2284 * C2663 - C2289 * C2658) *
                C50266) *
               C2285 +
           ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
               C50114) *
              C1837 +
          (((C2287 * C1839 - C2282 * C1843 + C2288 * C4514 - C2283 * C4518 +
             C2289 * C4515 - C2284 * C4519) *
                C118 +
            (C2287 * C1844 - C2282 * C1851 + C2288 * C4520 - C2283 * C4526 +
             C2289 * C4521 - C2284 * C4527) *
                C50266) *
               C2285 +
           ((C2287 * C1840 - C2282 * C1845 + C2288 * C4516 - C2283 * C4522 +
             C2289 * C4517 - C2284 * C4523) *
                C118 +
            (C2287 * C1846 - C2282 * C1852 + C2288 * C4524 - C2283 * C4528 +
             C2289 * C4525 - C2284 * C4529) *
                C50266) *
               C50114) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C1669 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
             (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C1669 +
           ((C5445 * C5117 + C5446 * C5114 + C5447 * C5118 + C5448 * C5115 +
             C5475 * C5119 + C5476 * C5116) *
                C2285 +
            (C5773 * C5117 + C5774 * C5114 + C5775 * C5118 + C5776 * C5115 +
             (C5467 - C5468) * C5119 + (C5469 - C5470) * C5116) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C168 * C5117 + C169 * C5114 + C5773 * C5118 + C5774 * C5115 +
             C5775 * C5119 + C5776 * C5116) *
                C2285 +
            (C170 * C5117 + C171 * C5114 + (C505 - C504) * C5118 +
             (C507 - C506) * C5115 + (C516 - C517) * C5119 +
             (C518 - C519) * C5116) *
                C50114) *
               C1669 +
           ((C745 * C5117 + C746 * C5114 + C5465 * C5118 + C5466 * C5115 +
             (C5468 - C5467) * C5119 + (C5470 - C5469) * C5116) *
                C2285 +
            (C747 * C5117 + C748 * C5114 + (C517 - C516) * C5118 +
             (C519 - C518) * C5115 + (C117 * C1842 - C50251 * C1849) * C5119 +
             (C117 * C1850 - C50251 * C1854) * C5116) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C1669 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
             (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
             (C5977 - C5978) * C5115 + C6393 * C5119 + C6394 * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
             C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                C50114) *
               C1669 +
           (((C5976 - C5975) * C5117 + (C5978 - C5977) * C5114 +
             (C5980 - C5979) * C5118 + (C5982 - C5981) * C5115 +
             (C6395 - C6396) * C5119 + (C6397 - C6398) * C5116) *
                C2285 +
            (C5987 * C5117 + C5988 * C5114 + C5989 * C5118 + C5990 * C5115 +
             (C5991 - C5992) * C5119 + (C5993 - C5994) * C5116) *
                C50114) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C5117 +
             (C50251 * C324 - C117 * C309) * C5114 + (C6885 - C6886) * C5118 +
             (C6887 - C6888) * C5115 + (C6889 - C6890) * C5119 +
             (C6891 - C6892) * C5116) *
                C2285 +
            ((C343 - C344) * C5117 + (C345 - C346) * C5114 +
             (C5271 - C5272) * C5118 + (C5273 - C5274) * C5115 +
             (C5275 - C5276) * C5119 + (C5277 - C5278) * C5116) *
                C50114) *
               C1669 +
           (((C6886 - C6885) * C5117 + (C6888 - C6887) * C5114 +
             (C6890 - C6889) * C5118 + (C6892 - C6891) * C5115 +
             (C117 * C4515 - C50251 * C4519) * C5119 +
             (C117 * C4521 - C50251 * C4527) * C5116) *
                C2285 +
            ((C5272 - C5271) * C5117 + (C5274 - C5273) * C5114 +
             (C5276 - C5275) * C5118 + (C5278 - C5277) * C5115 +
             (C117 * C4517 - C50251 * C4523) * C5119 +
             (C117 * C4525 - C50251 * C4529) * C5116) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C5117 +
            (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
            (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
               C2285 +
           ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
            C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
               C50114) *
              C1835 +
          (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
            (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 + C7291 * C5119 +
            C7292 * C5116) *
               C2285 +
           (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
            C5473 * C5119 + C5474 * C5116) *
               C50114) *
              C1836 +
          ((C5471 * C5117 + C5472 * C5114 + (C5450 - C5449) * C5118 +
            (C5452 - C5451) * C5115 + (C7293 - C7294) * C5119 +
            (C7295 - C7296) * C5116) *
               C2285 +
           (C5447 * C5117 + C5448 * C5114 + C5475 * C5118 + C5476 * C5115 +
            (C5461 - C5462) * C5119 + (C5463 - C5464) * C5116) *
               C50114) *
              C1837 +
          ((C7291 * C5117 + C7292 * C5114 + (C7294 - C7293) * C5118 +
            (C7296 - C7295) * C5115 + (C117 * C7282 - C50251 * C7284) * C5119 +
            (C117 * C7285 - C50251 * C7288) * C5116) *
               C2285 +
           (C5473 * C5117 + C5474 * C5114 + (C5462 - C5461) * C5118 +
            (C5464 - C5463) * C5115 + (C117 * C7283 - C50251 * C7286) * C5119 +
            (C117 * C7287 - C50251 * C7289) * C5116) *
               C50114) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C50442 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C50443 +
           (((C2282 * C473 - C2287 * C459 + C2283 * C1212 - C2288 * C1208 +
              C2284 * C2657 - C2289 * C2654) *
                 C118 +
             (C2282 * C489 - C2287 * C474 + C2283 * C1220 - C2288 * C1213 +
              C2284 * C2663 - C2289 * C2658) *
                 C50266) *
                C2285 +
            ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                C50114) *
               C2085) *
              C50154 * C50387 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C50442 +
           (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                C2285 +
            ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
             (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                C50114) *
               C50443 +
           (((C2680 - C2679 + C2682 - C2681 + C2684 - C2683) * C118 +
             (C2686 - C2685 + C2688 - C2687 + C2690 - C2689) * C50266) *
                C2285 +
            ((C2287 * C461 - C2282 * C477 + C2288 * C1210 - C2283 * C1216 +
              C2289 * C2656 - C2284 * C2661) *
                 C118 +
             (C2287 * C478 - C2282 * C491 + C2288 * C1217 - C2283 * C1222 +
              C2289 * C2662 - C2284 * C2665) *
                 C50266) *
                C50114) *
               C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C50442 +
           (((C117 * C455 - C50251 * C465) * C118 +
             (C117 * C466 - C50251 * C485) * C50266) *
                C107 +
            ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
            C757 * C109 + C758 * C110) *
               C50443 +
           (((C50251 * C473 - C117 * C459) * C118 +
             (C50251 * C489 - C117 * C474) * C50266) *
                C107 +
            ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
            ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
            ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
               C2085) *
              C50154 * C50387 +
          ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
            ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
            C186 * C109 + C187 * C110) *
               C50442 +
           (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
            ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
            ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
            ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
               C50443 +
           (((C509 - C508) * C118 + (C511 - C510) * C50266) * C107 +
            ((C513 - C512) * C118 + (C515 - C514) * C50266) * C108 +
            ((C517 - C516) * C118 + (C519 - C518) * C50266) * C109 +
            ((C117 * C464 - C50251 * C483) * C118 +
             (C117 * C484 - C50251 * C494) * C50266) *
                C110) *
               C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C50442 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 + C7291 * C5119 +
             C7292 * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C50443 +
           ((C5471 * C5117 + C5472 * C5114 + (C5450 - C5449) * C5118 +
             (C5452 - C5451) * C5115 + (C7293 - C7294) * C5119 +
             (C7295 - C7296) * C5116) *
                C2285 +
            (C5447 * C5117 + C5448 * C5114 + C5475 * C5118 + C5476 * C5115 +
             (C5461 - C5462) * C5119 + (C5463 - C5464) * C5116) *
                C50114) *
               C2085) *
              C50154 * C50387 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C50442 +
           ((C5445 * C5117 + C5446 * C5114 + C5447 * C5118 + C5448 * C5115 +
             C5475 * C5119 + C5476 * C5116) *
                C2285 +
            (C5773 * C5117 + C5774 * C5114 + C5775 * C5118 + C5776 * C5115 +
             (C5467 - C5468) * C5119 + (C5469 - C5470) * C5116) *
                C50114) *
               C50443 +
           ((C5455 * C5117 + C5456 * C5114 + C5473 * C5118 + C5474 * C5115 +
             (C5462 - C5461) * C5119 + (C5464 - C5463) * C5116) *
                C2285 +
            (C5465 * C5117 + C5466 * C5114 + (C5468 - C5467) * C5118 +
             (C5470 - C5469) * C5115 + (C117 * C5426 - C50251 * C5431) * C5119 +
             (C117 * C5432 - C50251 * C5435) * C5116) *
                C50114) *
               C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C1669 +
           (((C117 * C455 - C50251 * C465) * C118 +
             (C117 * C466 - C50251 * C485) * C50266) *
                C107 +
            ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
            C757 * C109 + C758 * C110) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C118 +
             (C117 * C301 - C50251 * C320) * C50266) *
                C107 +
            ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
            C639 * C109 + C640 * C110) *
               C1669 +
           (((C50251 * C893 - C117 * C888) * C118 +
             (C50251 * C903 - C117 * C894) * C50266) *
                C107 +
            ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
            ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
            ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C118 +
             (C50251 * C324 - C117 * C309) * C50266) *
                C107 +
            ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
            ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
            ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
               C1669 +
           (((C117 * C1555 - C50251 * C1559) * C118 +
             (C117 * C1560 - C50251 * C1567) * C50266) *
                C107 +
            ((C117 * C1556 - C50251 * C1561) * C118 +
             (C117 * C1562 - C50251 * C1568) * C50266) *
                C108 +
            ((C117 * C1557 - C50251 * C1563) * C118 +
             (C117 * C1564 - C50251 * C1569) * C50266) *
                C109 +
            ((C117 * C1558 - C50251 * C1565) * C118 +
             (C117 * C1566 - C50251 * C1570) * C50266) *
                C110) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C118 +
             (C50251 * C140 - C117 * C127) * C50266) *
                C107 +
            ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
            C184 * C109 + C185 * C110) *
               C1669 +
           (((C117 * C455 - C50251 * C465) * C118 +
             (C117 * C466 - C50251 * C485) * C50266) *
                C107 +
            ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
            C757 * C109 + C758 * C110) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
            ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
            C186 * C109 + C187 * C110) *
               C1669 +
           (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
            ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
            ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
            ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
               C50234) *
              C50154 * C1021 +
          ((C184 * C107 + C185 * C108 +
            ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
            ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
               C1669 +
           (C757 * C107 + C758 * C108 +
            ((C750 - C749) * C118 + (C752 - C751) * C50266) * C109 +
            ((C117 * C740 - C50251 * C741) * C118 +
             (C117 * C742 - C50251 * C743) * C50266) *
                C110) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C1669 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                C2285 +
            ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
             (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                C50114) *
               C1669 +
           (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                C2285 +
            ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
             (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
             (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                C2285 +
            ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
             (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                C50114) *
               C1669 +
           (((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C118 +
             (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C50266) *
                C2285 +
            ((C2287 * C458 - C2282 * C471 + C2288 * C891 - C2283 * C899 +
              C2289 * C1558 - C2284 * C1565) *
                 C118 +
             (C2287 * C472 - C2282 * C488 + C2288 * C900 - C2283 * C906 +
              C2289 * C1566 - C2284 * C1570) *
                 C50266) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C118 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C50266) *
                C2285 +
            ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
             (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                C50114) *
               C1669 +
           (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
              C2289 * C1555 - C2284 * C1559) *
                 C118 +
             (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
              C2289 * C1560 - C2284 * C1567) *
                 C50266) *
                C2285 +
            ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                C50114) *
               C50234) *
              C285 +
          ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C118 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C50266) *
                C2285 +
            ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
             (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                C50114) *
               C1669 +
           (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
              C2284 * C3203 - C2289 * C3200) *
                 C118 +
             (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
              C2284 * C3209 - C2289 * C3204) *
                 C50266) *
                C2285 +
            ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                C50114) *
               C50234) *
              C286 +
          ((((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
              C2284 * C2475 - C2289 * C2472) *
                 C118 +
             (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
              C2284 * C2481 - C2289 * C2476) *
                 C50266) *
                C2285 +
            ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
             (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                C50114) *
               C1669 +
           (((C2287 * C1555 - C2282 * C1559 + C2288 * C3200 - C2283 * C3203 +
              C2289 * C4116 - C2284 * C4118) *
                 C118 +
             (C2287 * C1560 - C2282 * C1567 + C2288 * C3204 - C2283 * C3209 +
              C2289 * C4119 - C2284 * C4122) *
                 C50266) *
                C2285 +
            ((C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
              C2289 * C4117 - C2284 * C4120) *
                 C118 +
             (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
              C2289 * C4121 - C2284 * C4123) *
                 C50266) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C1669 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
             (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C5117 + (C151 - C150) * C5114 + C5453 * C5118 +
             C5454 * C5115 + C5455 * C5119 + C5456 * C5116) *
                C2285 +
            ((C153 - C152) * C5117 + (C155 - C154) * C5114 + C745 * C5118 +
             C746 * C5115 + C5465 * C5119 + C5466 * C5116) *
                C50114) *
               C1669 +
           ((C5445 * C5117 + C5446 * C5114 + C5447 * C5118 + C5448 * C5115 +
             C5475 * C5119 + C5476 * C5116) *
                C2285 +
            (C5773 * C5117 + C5774 * C5114 + C5775 * C5118 + C5776 * C5115 +
             (C5467 - C5468) * C5119 + (C5469 - C5470) * C5116) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C168 * C5117 + C169 * C5114 + C5773 * C5118 + C5774 * C5115 +
             C5775 * C5119 + C5776 * C5116) *
                C2285 +
            (C170 * C5117 + C171 * C5114 + (C505 - C504) * C5118 +
             (C507 - C506) * C5115 + (C516 - C517) * C5119 +
             (C518 - C519) * C5116) *
                C50114) *
               C1669 +
           ((C745 * C5117 + C746 * C5114 + C5465 * C5118 + C5466 * C5115 +
             (C5468 - C5467) * C5119 + (C5470 - C5469) * C5116) *
                C2285 +
            (C747 * C5117 + C748 * C5114 + (C517 - C516) * C5118 +
             (C519 - C518) * C5115 + (C117 * C1842 - C50251 * C1849) * C5119 +
             (C117 * C1850 - C50251 * C1854) * C5116) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C5117 +
             (C50251 * C140 - C117 * C127) * C5114 + (C5437 - C5438) * C5118 +
             (C5439 - C5440) * C5115 + C5471 * C5119 + C5472 * C5116) *
                C2285 +
            ((C148 - C149) * C5117 + (C150 - C151) * C5114 + C5445 * C5118 +
             C5446 * C5115 + C5447 * C5119 + C5448 * C5116) *
                C50114) *
               C1669 +
           (((C5438 - C5437) * C5117 + (C5440 - C5439) * C5114 +
             (C5442 - C5441) * C5118 + (C5444 - C5443) * C5115 +
             (C5449 - C5450) * C5119 + (C5451 - C5452) * C5116) *
                C2285 +
            (C5453 * C5117 + C5454 * C5114 + C5455 * C5118 + C5456 * C5115 +
             C5473 * C5119 + C5474 * C5116) *
                C50114) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C5117 +
             (C117 * C301 - C50251 * C320) * C5114 + (C5975 - C5976) * C5118 +
             (C5977 - C5978) * C5115 + C6393 * C5119 + C6394 * C5116) *
                C2285 +
            ((C331 - C332) * C5117 + (C333 - C334) * C5114 + C5983 * C5118 +
             C5984 * C5115 + C5985 * C5119 + C5986 * C5116) *
                C50114) *
               C1669 +
           (((C5976 - C5975) * C5117 + (C5978 - C5977) * C5114 +
             (C5980 - C5979) * C5118 + (C5982 - C5981) * C5115 +
             (C6395 - C6396) * C5119 + (C6397 - C6398) * C5116) *
                C2285 +
            (C5987 * C5117 + C5988 * C5114 + C5989 * C5118 + C5990 * C5115 +
             (C5991 - C5992) * C5119 + (C5993 - C5994) * C5116) *
                C50114) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C5117 +
             (C50251 * C324 - C117 * C309) * C5114 + (C6885 - C6886) * C5118 +
             (C6887 - C6888) * C5115 + (C6889 - C6890) * C5119 +
             (C6891 - C6892) * C5116) *
                C2285 +
            ((C343 - C344) * C5117 + (C345 - C346) * C5114 +
             (C5271 - C5272) * C5118 + (C5273 - C5274) * C5115 +
             (C5275 - C5276) * C5119 + (C5277 - C5278) * C5116) *
                C50114) *
               C1669 +
           (((C6886 - C6885) * C5117 + (C6888 - C6887) * C5114 +
             (C6890 - C6889) * C5118 + (C6892 - C6891) * C5115 +
             (C117 * C4515 - C50251 * C4519) * C5119 +
             (C117 * C4521 - C50251 * C4527) * C5116) *
                C2285 +
            ((C5272 - C5271) * C5117 + (C5274 - C5273) * C5114 +
             (C5276 - C5275) * C5118 + (C5278 - C5277) * C5115 +
             (C117 * C4517 - C50251 * C4523) * C5119 +
             (C117 * C4525 - C50251 * C4529) * C5116) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50170 * C50395 +
                   (((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    C11148 * C7884) *
                       C50170 * C50206) *
                      C50438 +
                  ((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                     C5453 * C10682 + C5454 * C50330) *
                        C50436 +
                    ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                     C745 * C10682 + C746 * C50330) *
                        C50437 +
                    C10697 * C7884) *
                       C50170 * C50395 +
                   (((C332 - C331) * C10681 + (C334 - C333) * C50409 +
                     C5987 * C10682 + C5988 * C50330) *
                        C50436 +
                    ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
                     (C913 - C914) * C10682 + (C915 - C916) * C50330) *
                        C50437 +
                    ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
                     (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                        C7884) *
                       C50170 * C50206) *
                      C50439 +
                  ((C10696 * C50436 +
                    (C170 * C10681 + C171 * C50409 + (C505 - C504) * C10682 +
                     (C507 - C506) * C50330) *
                        C50437 +
                    ((C161 - C160) * C10681 + (C163 - C162) * C50409 +
                     (C749 - C750) * C10682 + (C751 - C752) * C50330) *
                        C7884) *
                       C50170 * C50395 +
                   (C11148 * C50436 +
                    (C629 * C10681 + C630 * C50409 + (C918 - C917) * C10682 +
                     (C920 - C919) * C50330) *
                        C50437 +
                    ((C632 - C631) * C10681 + (C634 - C633) * C50409 +
                     (C117 * C892 - C50251 * C901) * C10682 +
                     (C117 * C902 - C50251 * C907) * C50330) *
                        C7884) *
                       C50170 * C50206) *
                      C621)) /
                (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C50251 * C126 - C117 * C119) * C10681 +
                      (C50251 * C140 - C117 * C127) * C50409 +
                      (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                         C50436 +
                     ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                      C5445 * C10682 + C5446 * C50330) *
                         C50437 +
                     C10696 * C7884) *
                        C50396 +
                    (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                      (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                         C50436 +
                     (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                      C5456 * C50330) *
                         C50437 +
                     C11303 * C7884) *
                        C50234) *
                       C50395 +
                   ((((C117 * C290 - C50251 * C300) * C10681 +
                      (C117 * C301 - C50251 * C320) * C50409 +
                      (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                         C50436 +
                     ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                      C5983 * C10682 + C5984 * C50330) *
                         C50437 +
                     C11148 * C7884) *
                        C50396 +
                    (((C5976 - C5975) * C10681 + (C5978 - C5977) * C50409 +
                      (C5980 - C5979) * C10682 + (C5982 - C5981) * C50330) *
                         C50436 +
                     (C5987 * C10681 + C5988 * C50409 + C5989 * C10682 +
                      C5990 * C50330) *
                         C50437 +
                     (C11498 * C10681 + C11499 * C50409 +
                      (C5623 - C5624) * C10682 + (C5625 - C5626) * C50330) *
                         C7884) *
                        C50234) *
                       C50206) *
                      C288 +
                  (((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                      C5453 * C10682 + C5454 * C50330) *
                         C50436 +
                     ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                      C745 * C10682 + C746 * C50330) *
                         C50437 +
                     C10697 * C7884) *
                        C50396 +
                    ((C5445 * C10681 + C5446 * C50409 + C5447 * C10682 +
                      C5448 * C50330) *
                         C50436 +
                     (C5773 * C10681 + C5774 * C50409 + C5775 * C10682 +
                      C5776 * C50330) *
                         C50437 +
                     (C11299 * C10681 + C11300 * C50409 +
                      (C516 - C517) * C10682 + (C518 - C519) * C50330) *
                         C7884) *
                        C50234) *
                       C50395 +
                   ((((C332 - C331) * C10681 + (C334 - C333) * C50409 +
                      C5987 * C10682 + C5988 * C50330) *
                         C50436 +
                     ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
                      C11498 * C10682 + C11499 * C50330) *
                         C50437 +
                     ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
                      (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                         C7884) *
                        C50396 +
                    ((C5983 * C10681 + C5984 * C50409 + C5985 * C10682 +
                      C5986 * C50330) *
                         C50436 +
                     (C11142 * C10681 + C11143 * C50409 +
                      (C5624 - C5623) * C10682 + (C5626 - C5625) * C50330) *
                         C50437 +
                     ((C918 - C917) * C10681 + (C920 - C919) * C50409 +
                      (C117 * C1211 - C50251 * C1218) * C10682 +
                      (C117 * C1219 - C50251 * C1223) * C50330) *
                         C7884) *
                        C50234) *
                       C50206) *
                      C50141)) /
                (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C10681 +
             (C50251 * C140 - C117 * C127) * C50409 + (C5437 - C5438) * C10682 +
             (C5439 - C5440) * C50330) *
                C50436 +
            ((C148 - C149) * C10681 + (C150 - C151) * C50409 + C5445 * C10682 +
             C5446 * C50330) *
                C50437 +
            C10696 * C7884) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C10681 +
             (C117 * C301 - C50251 * C320) * C50409 + (C5975 - C5976) * C10682 +
             (C5977 - C5978) * C50330) *
                C50436 +
            ((C331 - C332) * C10681 + (C333 - C334) * C50409 + C5983 * C10682 +
             C5984 * C50330) *
                C50437 +
            (C627 * C10681 + C628 * C50409 + (C914 - C913) * C10682 +
             (C916 - C915) * C50330) *
                C7884) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C10681 +
             (C50251 * C324 - C117 * C309) * C50409 + (C6885 - C6886) * C10682 +
             (C6887 - C6888) * C50330) *
                C50436 +
            ((C343 - C344) * C10681 + (C345 - C346) * C50409 +
             (C5271 - C5272) * C10682 + (C5273 - C5274) * C50330) *
                C50437 +
            ((C347 - C348) * C10681 + (C349 - C350) * C50409 +
             (C10844 - C10845) * C10682 + (C10846 - C10847) * C50330) *
                C7884) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C10681 + (C151 - C150) * C50409 + C5453 * C10682 +
             C5454 * C50330) *
                C50436 +
            ((C153 - C152) * C10681 + (C155 - C154) * C50409 + C745 * C10682 +
             C746 * C50330) *
                C50437 +
            C10697 * C7884) *
               C50170 * C285 +
           (((C332 - C331) * C10681 + (C334 - C333) * C50409 + C5987 * C10682 +
             C5988 * C50330) *
                C50436 +
            ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
             (C913 - C914) * C10682 + (C915 - C916) * C50330) *
                C50437 +
            ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
             (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                C7884) *
               C50170 * C286 +
           (((C344 - C343) * C10681 + (C346 - C345) * C50409 +
             (C5272 - C5271) * C10682 + (C5274 - C5273) * C50330) *
                C50436 +
            ((C348 - C347) * C10681 + (C350 - C349) * C50409 +
             (C10845 - C10844) * C10682 + (C10847 - C10846) * C50330) *
                C50437 +
            ((C352 - C351) * C10681 + (C354 - C353) * C50409 +
             (C117 * C1558 - C50251 * C1565) * C10682 +
             (C117 * C1566 - C50251 * C1570) * C50330) *
                C7884) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C10681 +
            (C50251 * C140 - C117 * C127) * C50409 + (C5437 - C5438) * C10682 +
            (C5439 - C5440) * C50330) *
               C50436 +
           ((C148 - C149) * C10681 + (C150 - C151) * C50409 + C5445 * C10682 +
            C5446 * C50330) *
               C50437 +
           C10696 * C7884) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C10681 + (C151 - C150) * C50409 + C5453 * C10682 +
            C5454 * C50330) *
               C50436 +
           ((C153 - C152) * C10681 + (C155 - C154) * C50409 + C745 * C10682 +
            C746 * C50330) *
               C50437 +
           C10697 * C7884) *
              C50170 * C50154 * C114 +
          (C10696 * C50436 +
           (C170 * C10681 + C171 * C50409 + (C505 - C504) * C10682 +
            (C507 - C506) * C50330) *
               C50437 +
           ((C161 - C160) * C10681 + (C163 - C162) * C50409 +
            (C749 - C750) * C10682 + (C751 - C752) * C50330) *
               C7884) *
              C50170 * C50154 * C115 +
          (C10697 * C50436 +
           (C174 * C10681 + C175 * C50409 + (C750 - C749) * C10682 +
            (C752 - C751) * C50330) *
               C50437 +
           ((C165 - C164) * C10681 + (C167 - C166) * C50409 +
            (C117 * C740 - C50251 * C741) * C10682 +
            (C117 * C742 - C50251 * C743) * C50330) *
               C7884) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C10681 +
             (C50251 * C140 - C117 * C127) * C50409 + (C5437 - C5438) * C10682 +
             (C5439 - C5440) * C50330) *
                C50436 +
            ((C148 - C149) * C10681 + (C150 - C151) * C50409 + C5445 * C10682 +
             C5446 * C50330) *
                C50437 +
            C10696 * C7884) *
               C452 +
           (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
             (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                C50436 +
            (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
             C5456 * C50330) *
                C50437 +
            (C745 * C10681 + C746 * C50409 + C5465 * C10682 + C5466 * C50330) *
                C7884) *
               C453 +
           ((C5471 * C10681 + C5472 * C50409 + (C5450 - C5449) * C10682 +
             (C5452 - C5451) * C50330) *
                C50436 +
            (C5447 * C10681 + C5448 * C50409 + C5475 * C10682 +
             C5476 * C50330) *
                C50437 +
            (C5775 * C10681 + C5776 * C50409 + (C5467 - C5468) * C10682 +
             (C5469 - C5470) * C50330) *
                C7884) *
               C454) *
              C50154 * C288 +
          ((((C149 - C148) * C10681 + (C151 - C150) * C50409 + C5453 * C10682 +
             C5454 * C50330) *
                C50436 +
            ((C153 - C152) * C10681 + (C155 - C154) * C50409 + C745 * C10682 +
             C746 * C50330) *
                C50437 +
            C10697 * C7884) *
               C452 +
           ((C5445 * C10681 + C5446 * C50409 + C5447 * C10682 +
             C5448 * C50330) *
                C50436 +
            (C5773 * C10681 + C5774 * C50409 + C5775 * C10682 +
             C5776 * C50330) *
                C50437 +
            ((C505 - C504) * C10681 + (C507 - C506) * C50409 +
             (C516 - C517) * C10682 + (C518 - C519) * C50330) *
                C7884) *
               C453 +
           ((C5455 * C10681 + C5456 * C50409 + C5473 * C10682 +
             C5474 * C50330) *
                C50436 +
            (C5465 * C10681 + C5466 * C50409 + (C5468 - C5467) * C10682 +
             (C5470 - C5469) * C50330) *
                C50437 +
            ((C517 - C516) * C10681 + (C519 - C518) * C50409 +
             (C117 * C1842 - C50251 * C1849) * C10682 +
             (C117 * C1850 - C50251 * C1854) * C50330) *
                C7884) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50396 +
                   (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                     (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                        C50436 +
                    (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                     C5456 * C50330) *
                        C50437 +
                    C11303 * C7884) *
                       C50234) *
                      C50154 * C50438 +
                  ((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                     C5453 * C10682 + C5454 * C50330) *
                        C50436 +
                    ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                     C745 * C10682 + C746 * C50330) *
                        C50437 +
                    C10697 * C7884) *
                       C50396 +
                   ((C5445 * C10681 + C5446 * C50409 + C5447 * C10682 +
                     C5448 * C50330) *
                        C50436 +
                    (C5773 * C10681 + C5774 * C50409 + C5775 * C10682 +
                     C5776 * C50330) *
                        C50437 +
                    (C11299 * C10681 + C11300 * C50409 +
                     (C516 - C517) * C10682 + (C518 - C519) * C50330) *
                        C7884) *
                       C50234) *
                      C50154 * C50439 +
                  ((C10696 * C50436 +
                    (C170 * C10681 + C171 * C50409 + C11299 * C10682 +
                     C11300 * C50330) *
                        C50437 +
                    ((C161 - C160) * C10681 + (C163 - C162) * C50409 +
                     (C749 - C750) * C10682 + (C751 - C752) * C50330) *
                        C7884) *
                       C50396 +
                   (C11303 * C50436 +
                    (C747 * C10681 + C748 * C50409 + (C517 - C516) * C10682 +
                     (C519 - C518) * C50330) *
                        C50437 +
                    ((C750 - C749) * C10681 + (C752 - C751) * C50409 +
                     (C117 * C464 - C50251 * C483) * C10682 +
                     (C117 * C484 - C50251 * C494) * C50330) *
                        C7884) *
                       C50234) *
                      C50154 * C621)) /
                (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C50251 * C126 - C117 * C119) * C10681 +
                    (C50251 * C140 - C117 * C127) * C50409 +
                    (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                       C50436 +
                   ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                    C5445 * C10682 + C5446 * C50330) *
                       C50437 +
                   C10696 * C7884) *
                      C50170 * C50154 * C113 +
                  (((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                    C5453 * C10682 + C5454 * C50330) *
                       C50436 +
                   ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                    C745 * C10682 + C746 * C50330) *
                       C50437 +
                   C10697 * C7884) *
                      C50170 * C50154 * C114 +
                  (C10696 * C50436 +
                   (C170 * C10681 + C171 * C50409 + (C505 - C504) * C10682 +
                    (C507 - C506) * C50330) *
                       C50437 +
                   ((C161 - C160) * C10681 + (C163 - C162) * C50409 +
                    (C749 - C750) * C10682 + (C751 - C752) * C50330) *
                       C7884) *
                      C50170 * C50154 * C115 +
                  (C10697 * C50436 +
                   (C174 * C10681 + C175 * C50409 + (C750 - C749) * C10682 +
                    (C752 - C751) * C50330) *
                       C50437 +
                   ((C165 - C164) * C10681 + (C167 - C166) * C50409 +
                    (C117 * C740 - C50251 * C741) * C10682 +
                    (C117 * C742 - C50251 * C743) * C50330) *
                       C7884) *
                      C50170 * C50154 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50170 * C285 +
                   (((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    (C627 * C10681 + C628 * C50409 + (C914 - C913) * C10682 +
                     (C916 - C915) * C50330) *
                        C7884) *
                       C50170 * C286 +
                   (((C50251 * C308 - C117 * C294) * C10681 +
                     (C50251 * C324 - C117 * C309) * C50409 +
                     (C6885 - C6886) * C10682 + (C6887 - C6888) * C50330) *
                        C50436 +
                    ((C343 - C344) * C10681 + (C345 - C346) * C50409 +
                     (C5271 - C5272) * C10682 + (C5273 - C5274) * C50330) *
                        C50437 +
                    ((C347 - C348) * C10681 + (C349 - C350) * C50409 +
                     (C10844 - C10845) * C10682 + (C10846 - C10847) * C50330) *
                        C7884) *
                       C50170 * C287) *
                      C288 +
                  ((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                     C5453 * C10682 + C5454 * C50330) *
                        C50436 +
                    ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                     C745 * C10682 + C746 * C50330) *
                        C50437 +
                    C10697 * C7884) *
                       C50170 * C285 +
                   (((C332 - C331) * C10681 + (C334 - C333) * C50409 +
                     C5987 * C10682 + C5988 * C50330) *
                        C50436 +
                    ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
                     (C913 - C914) * C10682 + (C915 - C916) * C50330) *
                        C50437 +
                    ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
                     (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                        C7884) *
                       C50170 * C286 +
                   (((C344 - C343) * C10681 + (C346 - C345) * C50409 +
                     (C5272 - C5271) * C10682 + (C5274 - C5273) * C50330) *
                        C50436 +
                    ((C348 - C347) * C10681 + (C350 - C349) * C50409 +
                     (C10845 - C10844) * C10682 + (C10847 - C10846) * C50330) *
                        C50437 +
                    ((C352 - C351) * C10681 + (C354 - C353) * C50409 +
                     (C117 * C1558 - C50251 * C1565) * C10682 +
                     (C117 * C1566 - C50251 * C1570) * C50330) *
                        C7884) *
                       C50170 * C287) *
                      C50141)) /
                    (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50170 * C50440 +
                   (((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    C11148 * C7884) *
                       C50170 * C50441 +
                   (((C50251 * C308 - C117 * C294) * C10681 +
                     (C50251 * C324 - C117 * C309) * C50409 +
                     (C6885 - C6886) * C10682 + (C6887 - C6888) * C50330) *
                        C50436 +
                    ((C343 - C344) * C10681 + (C345 - C346) * C50409 +
                     (C5271 - C5272) * C10682 + (C5273 - C5274) * C50330) *
                        C50437 +
                    ((C347 - C348) * C10681 + (C349 - C350) * C50409 +
                     (C10844 - C10845) * C10682 + (C10846 - C10847) * C50330) *
                        C7884) *
                       C50170 * C1324) *
                      C50387 +
                  ((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                     C5453 * C10682 + C5454 * C50330) *
                        C50436 +
                    ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                     C745 * C10682 + C746 * C50330) *
                        C50437 +
                    C10697 * C7884) *
                       C50170 * C50440 +
                   (((C332 - C331) * C10681 + (C334 - C333) * C50409 +
                     C5987 * C10682 + C5988 * C50330) *
                        C50436 +
                    ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
                     C11498 * C10682 + C11499 * C50330) *
                        C50437 +
                    ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
                     (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                        C7884) *
                       C50170 * C50441 +
                   (((C344 - C343) * C10681 + (C346 - C345) * C50409 +
                     (C5272 - C5271) * C10682 + (C5274 - C5273) * C50330) *
                        C50436 +
                    ((C348 - C347) * C10681 + (C350 - C349) * C50409 +
                     (C10845 - C10844) * C10682 + (C10847 - C10846) * C50330) *
                        C50437 +
                    ((C352 - C351) * C10681 + (C354 - C353) * C50409 +
                     (C117 * C1558 - C50251 * C1565) * C10682 +
                     (C117 * C1566 - C50251 * C1570) * C50330) *
                        C7884) *
                       C50170 * C1324) *
                      C50141)) /
                (p * q * std::sqrt(p + q));
    d2ee[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50396 +
                   (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                     (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                        C50436 +
                    (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                     C5456 * C50330) *
                        C50437 +
                    C11303 * C7884) *
                       C50234) *
                      C50440 +
                  ((((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    C11148 * C7884) *
                       C50396 +
                   (((C5976 - C5975) * C10681 + (C5978 - C5977) * C50409 +
                     (C5980 - C5979) * C10682 + (C5982 - C5981) * C50330) *
                        C50436 +
                    (C5987 * C10681 + C5988 * C50409 + C5989 * C10682 +
                     C5990 * C50330) *
                        C50437 +
                    (C11498 * C10681 + C11499 * C50409 +
                     (C5623 - C5624) * C10682 + (C5625 - C5626) * C50330) *
                        C7884) *
                       C50234) *
                      C50441 +
                  ((((C50251 * C308 - C117 * C294) * C10681 +
                     (C50251 * C324 - C117 * C309) * C50409 +
                     (C6885 - C6886) * C10682 + (C6887 - C6888) * C50330) *
                        C50436 +
                    ((C343 - C344) * C10681 + (C345 - C346) * C50409 +
                     (C5271 - C5272) * C10682 + (C5273 - C5274) * C50330) *
                        C50437 +
                    ((C347 - C348) * C10681 + (C349 - C350) * C50409 +
                     (C10844 - C10845) * C10682 + (C10846 - C10847) * C50330) *
                        C7884) *
                       C50396 +
                   (((C6886 - C6885) * C10681 + (C6888 - C6887) * C50409 +
                     (C6890 - C6889) * C10682 + (C6892 - C6891) * C50330) *
                        C50436 +
                    ((C5272 - C5271) * C10681 + (C5274 - C5273) * C50409 +
                     (C5276 - C5275) * C10682 + (C5278 - C5277) * C50330) *
                        C50437 +
                    ((C10845 - C10844) * C10681 + (C10847 - C10846) * C50409 +
                     (C117 * C2656 - C50251 * C2661) * C10682 +
                     (C117 * C2662 - C50251 * C2665) * C50330) *
                        C7884) *
                       C50234) *
                      C1324) *
                 C50135) /
                (p * q * std::sqrt(p + q));
    d2ee[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C50251 * C126 - C117 * C119) * C10681 +
                    (C50251 * C140 - C117 * C127) * C50409 +
                    (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                       C50436 +
                   ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                    C5445 * C10682 + C5446 * C50330) *
                       C50437 +
                   C10696 * C7884) *
                      C50170 * C1089 +
                  (((C117 * C290 - C50251 * C300) * C10681 +
                    (C117 * C301 - C50251 * C320) * C50409 +
                    (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                       C50436 +
                   ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                    C5983 * C10682 + C5984 * C50330) *
                       C50437 +
                   C11148 * C7884) *
                      C50170 * C1090 +
                  (((C50251 * C308 - C117 * C294) * C10681 +
                    (C50251 * C324 - C117 * C309) * C50409 +
                    (C6885 - C6886) * C10682 + (C6887 - C6888) * C50330) *
                       C50436 +
                   ((C343 - C344) * C10681 + (C345 - C346) * C50409 +
                    (C5271 - C5272) * C10682 + (C5273 - C5274) * C50330) *
                       C50437 +
                   ((C347 - C348) * C10681 + (C349 - C350) * C50409 +
                    (C10844 - C10845) * C10682 + (C10846 - C10847) * C50330) *
                       C7884) *
                      C50170 * C1091 +
                  (((C117 * C1094 - C50251 * C1098) * C10681 +
                    (C117 * C1099 - C50251 * C1106) * C50409 +
                    (C117 * C3200 - C50251 * C3203) * C10682 +
                    (C117 * C3204 - C50251 * C3209) * C50330) *
                       C50436 +
                   ((C117 * C1095 - C50251 * C1100) * C10681 +
                    (C117 * C1101 - C50251 * C1107) * C50409 +
                    (C117 * C3201 - C50251 * C3205) * C10682 +
                    (C117 * C3206 - C50251 * C3210) * C50330) *
                       C50437 +
                   ((C117 * C1096 - C50251 * C1102) * C10681 +
                    (C117 * C1103 - C50251 * C1108) * C50409 +
                    (C117 * C3202 - C50251 * C3207) * C10682 +
                    (C117 * C3208 - C50251 * C3211) * C50330) *
                       C7884) *
                      C50170 * C1092) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50170 * C1018 +
                   (((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    C11148 * C7884) *
                       C50170 * C50206) *
                      C1020 +
                  ((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                     C5453 * C10682 + C5454 * C50330) *
                        C50436 +
                    ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                     C745 * C10682 + C746 * C50330) *
                        C50437 +
                    C10697 * C7884) *
                       C50170 * C1018 +
                   (((C332 - C331) * C10681 + (C334 - C333) * C50409 +
                     C5987 * C10682 + C5988 * C50330) *
                        C50436 +
                    ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
                     C11498 * C10682 + C11499 * C50330) *
                        C50437 +
                    ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
                     (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                        C7884) *
                       C50170 * C50206) *
                      C1021 +
                  ((C10696 * C50436 +
                    (C170 * C10681 + C171 * C50409 + C11299 * C10682 +
                     C11300 * C50330) *
                        C50437 +
                    ((C161 - C160) * C10681 + (C163 - C162) * C50409 +
                     (C749 - C750) * C10682 + (C751 - C752) * C50330) *
                        C7884) *
                       C50170 * C1018 +
                   (C11148 * C50436 +
                    (C629 * C10681 + C630 * C50409 + (C918 - C917) * C10682 +
                     (C920 - C919) * C50330) *
                        C50437 +
                    ((C632 - C631) * C10681 + (C634 - C633) * C50409 +
                     (C117 * C892 - C50251 * C901) * C10682 +
                     (C117 * C902 - C50251 * C907) * C50330) *
                        C7884) *
                       C50170 * C50206) *
                      C1022)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C452 +
                   (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                     (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                        C50436 +
                    (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                     C5456 * C50330) *
                        C50437 +
                    C11303 * C7884) *
                       C453 +
                   ((C5471 * C10681 + C5472 * C50409 +
                     (C5450 - C5449) * C10682 + (C5452 - C5451) * C50330) *
                        C50436 +
                    (C5447 * C10681 + C5448 * C50409 + C5475 * C10682 +
                     C5476 * C50330) *
                        C50437 +
                    (C5775 * C10681 + C5776 * C50409 +
                     (C5467 - C5468) * C10682 + (C5469 - C5470) * C50330) *
                        C7884) *
                       C454) *
                      C1018 +
                  ((((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    C11148 * C7884) *
                       C452 +
                   (((C5976 - C5975) * C10681 + (C5978 - C5977) * C50409 +
                     (C5980 - C5979) * C10682 + (C5982 - C5981) * C50330) *
                        C50436 +
                    (C5987 * C10681 + C5988 * C50409 + C5989 * C10682 +
                     C5990 * C50330) *
                        C50437 +
                    (C11498 * C10681 + C11499 * C50409 +
                     (C5623 - C5624) * C10682 + (C5625 - C5626) * C50330) *
                        C7884) *
                       C453 +
                   ((C6393 * C10681 + C6394 * C50409 +
                     (C6396 - C6395) * C10682 + (C6398 - C6397) * C50330) *
                        C50436 +
                    (C5985 * C10681 + C5986 * C50409 +
                     (C5992 - C5991) * C10682 + (C5994 - C5993) * C50330) *
                        C50437 +
                    ((C5624 - C5623) * C10681 + (C5626 - C5625) * C50409 +
                     (C117 * C5970 - C50251 * C5971) * C10682 +
                     (C117 * C5972 - C50251 * C5973) * C50330) *
                        C7884) *
                       C454) *
                      C50206) *
                 C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C50251 * C126 - C117 * C119) * C10681 +
                      (C50251 * C140 - C117 * C127) * C50409 +
                      (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                         C50436 +
                     ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                      C5445 * C10682 + C5446 * C50330) *
                         C50437 +
                     C10696 * C7884) *
                        C50396 +
                    (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                      (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                         C50436 +
                     (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                      C5456 * C50330) *
                         C50437 +
                     C11303 * C7884) *
                        C50234) *
                       C1018 +
                   ((((C117 * C290 - C50251 * C300) * C10681 +
                      (C117 * C301 - C50251 * C320) * C50409 +
                      (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                         C50436 +
                     ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                      C5983 * C10682 + C5984 * C50330) *
                         C50437 +
                     C11148 * C7884) *
                        C50396 +
                    (((C5976 - C5975) * C10681 + (C5978 - C5977) * C50409 +
                      (C5980 - C5979) * C10682 + (C5982 - C5981) * C50330) *
                         C50436 +
                     (C5987 * C10681 + C5988 * C50409 + C5989 * C10682 +
                      C5990 * C50330) *
                         C50437 +
                     (C11498 * C10681 + C11499 * C50409 +
                      (C5623 - C5624) * C10682 + (C5625 - C5626) * C50330) *
                         C7884) *
                        C50234) *
                       C50206) *
                      C50387 +
                  (((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                      C5453 * C10682 + C5454 * C50330) *
                         C50436 +
                     ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                      C745 * C10682 + C746 * C50330) *
                         C50437 +
                     C10697 * C7884) *
                        C50396 +
                    ((C5445 * C10681 + C5446 * C50409 + C5447 * C10682 +
                      C5448 * C50330) *
                         C50436 +
                     (C5773 * C10681 + C5774 * C50409 + C5775 * C10682 +
                      C5776 * C50330) *
                         C50437 +
                     (C11299 * C10681 + C11300 * C50409 +
                      (C516 - C517) * C10682 + (C518 - C519) * C50330) *
                         C7884) *
                        C50234) *
                       C1018 +
                   ((((C332 - C331) * C10681 + (C334 - C333) * C50409 +
                      C5987 * C10682 + C5988 * C50330) *
                         C50436 +
                     ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
                      C11498 * C10682 + C11499 * C50330) *
                         C50437 +
                     ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
                      (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                         C7884) *
                        C50396 +
                    ((C5983 * C10681 + C5984 * C50409 + C5985 * C10682 +
                      C5986 * C50330) *
                         C50436 +
                     (C11142 * C10681 + C11143 * C50409 +
                      (C5624 - C5623) * C10682 + (C5626 - C5625) * C50330) *
                         C50437 +
                     ((C918 - C917) * C10681 + (C920 - C919) * C50409 +
                      (C117 * C1211 - C50251 * C1218) * C10682 +
                      (C117 * C1219 - C50251 * C1223) * C50330) *
                         C7884) *
                        C50234) *
                       C50206) *
                      C50141)) /
                (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50170 * C1018 +
                   (((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    C11148 * C7884) *
                       C50170 * C50206) *
                      C1020 +
                  ((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                     C5453 * C10682 + C5454 * C50330) *
                        C50436 +
                    ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                     C745 * C10682 + C746 * C50330) *
                        C50437 +
                    C10697 * C7884) *
                       C50170 * C1018 +
                   (((C332 - C331) * C10681 + (C334 - C333) * C50409 +
                     C5987 * C10682 + C5988 * C50330) *
                        C50436 +
                    ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
                     C11498 * C10682 + C11499 * C50330) *
                        C50437 +
                    ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
                     (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                        C7884) *
                       C50170 * C50206) *
                      C1021 +
                  ((C10696 * C50436 +
                    (C170 * C10681 + C171 * C50409 + C11299 * C10682 +
                     C11300 * C50330) *
                        C50437 +
                    ((C161 - C160) * C10681 + (C163 - C162) * C50409 +
                     (C749 - C750) * C10682 + (C751 - C752) * C50330) *
                        C7884) *
                       C50170 * C1018 +
                   (C11148 * C50436 +
                    (C629 * C10681 + C630 * C50409 + (C918 - C917) * C10682 +
                     (C920 - C919) * C50330) *
                        C50437 +
                    ((C632 - C631) * C10681 + (C634 - C633) * C50409 +
                     (C117 * C892 - C50251 * C901) * C10682 +
                     (C117 * C902 - C50251 * C907) * C50330) *
                        C7884) *
                       C50170 * C50206) *
                      C1022)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C50251 * C126 - C117 * C119) * C10681 +
                    (C50251 * C140 - C117 * C127) * C50409 +
                    (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                       C50436 +
                   ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                    C5445 * C10682 + C5446 * C50330) *
                       C50437 +
                   C10696 * C7884) *
                      C50170 * C1089 +
                  (((C117 * C290 - C50251 * C300) * C10681 +
                    (C117 * C301 - C50251 * C320) * C50409 +
                    (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                       C50436 +
                   ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                    C5983 * C10682 + C5984 * C50330) *
                       C50437 +
                   C11148 * C7884) *
                      C50170 * C1090 +
                  (((C50251 * C308 - C117 * C294) * C10681 +
                    (C50251 * C324 - C117 * C309) * C50409 +
                    (C6885 - C6886) * C10682 + (C6887 - C6888) * C50330) *
                       C50436 +
                   ((C343 - C344) * C10681 + (C345 - C346) * C50409 +
                    (C5271 - C5272) * C10682 + (C5273 - C5274) * C50330) *
                       C50437 +
                   ((C347 - C348) * C10681 + (C349 - C350) * C50409 +
                    (C10844 - C10845) * C10682 + (C10846 - C10847) * C50330) *
                       C7884) *
                      C50170 * C1091 +
                  (((C117 * C1094 - C50251 * C1098) * C10681 +
                    (C117 * C1099 - C50251 * C1106) * C50409 +
                    (C117 * C3200 - C50251 * C3203) * C10682 +
                    (C117 * C3204 - C50251 * C3209) * C50330) *
                       C50436 +
                   ((C117 * C1095 - C50251 * C1100) * C10681 +
                    (C117 * C1101 - C50251 * C1107) * C50409 +
                    (C117 * C3201 - C50251 * C3205) * C10682 +
                    (C117 * C3206 - C50251 * C3210) * C50330) *
                       C50437 +
                   ((C117 * C1096 - C50251 * C1102) * C10681 +
                    (C117 * C1103 - C50251 * C1108) * C50409 +
                    (C117 * C3202 - C50251 * C3207) * C10682 +
                    (C117 * C3208 - C50251 * C3211) * C50330) *
                       C7884) *
                      C50170 * C1092) *
                 C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C50251 * C126 - C117 * C119) * C10681 +
                      (C50251 * C140 - C117 * C127) * C50409 +
                      (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                         C50436 +
                     ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                      C5445 * C10682 + C5446 * C50330) *
                         C50437 +
                     C10696 * C7884) *
                        C1669 +
                    (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                      (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                         C50436 +
                     (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                      C5456 * C50330) *
                         C50437 +
                     C11303 * C7884) *
                        C50234) *
                       C50395 +
                   ((((C117 * C290 - C50251 * C300) * C10681 +
                      (C117 * C301 - C50251 * C320) * C50409 +
                      (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                         C50436 +
                     ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                      C5983 * C10682 + C5984 * C50330) *
                         C50437 +
                     C11148 * C7884) *
                        C1669 +
                    (((C5976 - C5975) * C10681 + (C5978 - C5977) * C50409 +
                      (C5980 - C5979) * C10682 + (C5982 - C5981) * C50330) *
                         C50436 +
                     (C5987 * C10681 + C5988 * C50409 + C5989 * C10682 +
                      C5990 * C50330) *
                         C50437 +
                     (C11498 * C10681 + C11499 * C50409 +
                      (C5623 - C5624) * C10682 + (C5625 - C5626) * C50330) *
                         C7884) *
                        C50234) *
                       C50206) *
                      C50387 +
                  (((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                      C5453 * C10682 + C5454 * C50330) *
                         C50436 +
                     ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                      C745 * C10682 + C746 * C50330) *
                         C50437 +
                     C10697 * C7884) *
                        C1669 +
                    ((C5445 * C10681 + C5446 * C50409 + C5447 * C10682 +
                      C5448 * C50330) *
                         C50436 +
                     (C5773 * C10681 + C5774 * C50409 + C5775 * C10682 +
                      C5776 * C50330) *
                         C50437 +
                     (C11299 * C10681 + C11300 * C50409 +
                      (C516 - C517) * C10682 + (C518 - C519) * C50330) *
                         C7884) *
                        C50234) *
                       C50395 +
                   ((((C332 - C331) * C10681 + (C334 - C333) * C50409 +
                      C5987 * C10682 + C5988 * C50330) *
                         C50436 +
                     ((C336 - C335) * C10681 + (C338 - C337) * C50409 +
                      C11498 * C10682 + C11499 * C50330) *
                         C50437 +
                     ((C340 - C339) * C10681 + (C342 - C341) * C50409 +
                      (C917 - C918) * C10682 + (C919 - C920) * C50330) *
                         C7884) *
                        C1669 +
                    ((C5983 * C10681 + C5984 * C50409 + C5985 * C10682 +
                      C5986 * C50330) *
                         C50436 +
                     (C11142 * C10681 + C11143 * C50409 +
                      (C5624 - C5623) * C10682 + (C5626 - C5625) * C50330) *
                         C50437 +
                     ((C918 - C917) * C10681 + (C920 - C919) * C50409 +
                      (C117 * C1211 - C50251 * C1218) * C10682 +
                      (C117 * C1219 - C50251 * C1223) * C50330) *
                         C7884) *
                        C50234) *
                       C50206) *
                      C50141)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50442 +
                   (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                     (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                        C50436 +
                    (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                     C5456 * C50330) *
                        C50437 +
                    C11303 * C7884) *
                       C50443 +
                   ((C5471 * C10681 + C5472 * C50409 +
                     (C5450 - C5449) * C10682 + (C5452 - C5451) * C50330) *
                        C50436 +
                    (C5447 * C10681 + C5448 * C50409 + C5475 * C10682 +
                     C5476 * C50330) *
                        C50437 +
                    (C5775 * C10681 + C5776 * C50409 +
                     (C5467 - C5468) * C10682 + (C5469 - C5470) * C50330) *
                        C7884) *
                       C2085) *
                      C50395 +
                  ((((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    C11148 * C7884) *
                       C50442 +
                   (((C5976 - C5975) * C10681 + (C5978 - C5977) * C50409 +
                     (C5980 - C5979) * C10682 + (C5982 - C5981) * C50330) *
                        C50436 +
                    (C5987 * C10681 + C5988 * C50409 + C5989 * C10682 +
                     C5990 * C50330) *
                        C50437 +
                    (C11498 * C10681 + C11499 * C50409 +
                     (C5623 - C5624) * C10682 + (C5625 - C5626) * C50330) *
                        C7884) *
                       C50443 +
                   ((C6393 * C10681 + C6394 * C50409 +
                     (C6396 - C6395) * C10682 + (C6398 - C6397) * C50330) *
                        C50436 +
                    (C5985 * C10681 + C5986 * C50409 +
                     (C5992 - C5991) * C10682 + (C5994 - C5993) * C50330) *
                        C50437 +
                    ((C5624 - C5623) * C10681 + (C5626 - C5625) * C50409 +
                     (C117 * C5970 - C50251 * C5971) * C10682 +
                     (C117 * C5972 - C50251 * C5973) * C50330) *
                        C7884) *
                       C2085) *
                      C50206) *
                 C50135) /
                (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C10681 +
             (C50251 * C140 - C117 * C127) * C50409 + (C5437 - C5438) * C10682 +
             (C5439 - C5440) * C50330) *
                C50436 +
            ((C148 - C149) * C10681 + (C150 - C151) * C50409 + C5445 * C10682 +
             C5446 * C50330) *
                C50437 +
            C10696 * C7884) *
               C1669 +
           (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
             (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                C50436 +
            (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
             C5456 * C50330) *
                C50437 +
            C11303 * C7884) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C10681 +
             (C117 * C301 - C50251 * C320) * C50409 + (C5975 - C5976) * C10682 +
             (C5977 - C5978) * C50330) *
                C50436 +
            ((C331 - C332) * C10681 + (C333 - C334) * C50409 + C5983 * C10682 +
             C5984 * C50330) *
                C50437 +
            C11148 * C7884) *
               C1669 +
           (((C5976 - C5975) * C10681 + (C5978 - C5977) * C50409 +
             (C5980 - C5979) * C10682 + (C5982 - C5981) * C50330) *
                C50436 +
            (C5987 * C10681 + C5988 * C50409 + C5989 * C10682 +
             C5990 * C50330) *
                C50437 +
            (C11498 * C10681 + C11499 * C50409 + (C5623 - C5624) * C10682 +
             (C5625 - C5626) * C50330) *
                C7884) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C10681 +
             (C50251 * C324 - C117 * C309) * C50409 + (C6885 - C6886) * C10682 +
             (C6887 - C6888) * C50330) *
                C50436 +
            ((C343 - C344) * C10681 + (C345 - C346) * C50409 +
             (C5271 - C5272) * C10682 + (C5273 - C5274) * C50330) *
                C50437 +
            ((C347 - C348) * C10681 + (C349 - C350) * C50409 +
             (C10844 - C10845) * C10682 + (C10846 - C10847) * C50330) *
                C7884) *
               C1669 +
           (((C6886 - C6885) * C10681 + (C6888 - C6887) * C50409 +
             (C6890 - C6889) * C10682 + (C6892 - C6891) * C50330) *
                C50436 +
            ((C5272 - C5271) * C10681 + (C5274 - C5273) * C50409 +
             (C5276 - C5275) * C10682 + (C5278 - C5277) * C50330) *
                C50437 +
            ((C10845 - C10844) * C10681 + (C10847 - C10846) * C50409 +
             (C117 * C2656 - C50251 * C2661) * C10682 +
             (C117 * C2662 - C50251 * C2665) * C50330) *
                C7884) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C10681 +
             (C50251 * C140 - C117 * C127) * C50409 + (C5437 - C5438) * C10682 +
             (C5439 - C5440) * C50330) *
                C50436 +
            ((C148 - C149) * C10681 + (C150 - C151) * C50409 + C5445 * C10682 +
             C5446 * C50330) *
                C50437 +
            C10696 * C7884) *
               C1669 +
           (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
             (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                C50436 +
            (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
             C5456 * C50330) *
                C50437 +
            C11303 * C7884) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C10681 + (C151 - C150) * C50409 + C5453 * C10682 +
             C5454 * C50330) *
                C50436 +
            ((C153 - C152) * C10681 + (C155 - C154) * C50409 + C745 * C10682 +
             C746 * C50330) *
                C50437 +
            C10697 * C7884) *
               C1669 +
           ((C5445 * C10681 + C5446 * C50409 + C5447 * C10682 +
             C5448 * C50330) *
                C50436 +
            (C5773 * C10681 + C5774 * C50409 + C5775 * C10682 +
             C5776 * C50330) *
                C50437 +
            (C11299 * C10681 + C11300 * C50409 + (C516 - C517) * C10682 +
             (C518 - C519) * C50330) *
                C7884) *
               C50234) *
              C50154 * C1021 +
          ((C10696 * C50436 +
            (C170 * C10681 + C171 * C50409 + C11299 * C10682 +
             C11300 * C50330) *
                C50437 +
            ((C161 - C160) * C10681 + (C163 - C162) * C50409 +
             (C749 - C750) * C10682 + (C751 - C752) * C50330) *
                C7884) *
               C1669 +
           (C11303 * C50436 +
            (C747 * C10681 + C748 * C50409 + (C517 - C516) * C10682 +
             (C519 - C518) * C50330) *
                C50437 +
            ((C750 - C749) * C10681 + (C752 - C751) * C50409 +
             (C117 * C464 - C50251 * C483) * C10682 +
             (C117 * C484 - C50251 * C494) * C50330) *
                C7884) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C10681 +
            (C50251 * C140 - C117 * C127) * C50409 + (C5437 - C5438) * C10682 +
            (C5439 - C5440) * C50330) *
               C50436 +
           ((C148 - C149) * C10681 + (C150 - C151) * C50409 + C5445 * C10682 +
            C5446 * C50330) *
               C50437 +
           C10696 * C7884) *
              C1835 +
          (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
            (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
               C50436 +
           (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 + C5456 * C50330) *
               C50437 +
           C11303 * C7884) *
              C1836 +
          ((C5471 * C10681 + C5472 * C50409 + (C5450 - C5449) * C10682 +
            (C5452 - C5451) * C50330) *
               C50436 +
           (C5447 * C10681 + C5448 * C50409 + C5475 * C10682 + C5476 * C50330) *
               C50437 +
           (C5775 * C10681 + C5776 * C50409 + (C5467 - C5468) * C10682 +
            (C5469 - C5470) * C50330) *
               C7884) *
              C1837 +
          ((C7291 * C10681 + C7292 * C50409 + (C7294 - C7293) * C10682 +
            (C7296 - C7295) * C50330) *
               C50436 +
           (C5473 * C10681 + C5474 * C50409 + (C5462 - C5461) * C10682 +
            (C5464 - C5463) * C50330) *
               C50437 +
           ((C5468 - C5467) * C10681 + (C5470 - C5469) * C50409 +
            (C117 * C5426 - C50251 * C5431) * C10682 +
            (C117 * C5432 - C50251 * C5435) * C50330) *
               C7884) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C50442 +
                   (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                     (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                        C50436 +
                    (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                     C5456 * C50330) *
                        C50437 +
                    C11303 * C7884) *
                       C50443 +
                   ((C5471 * C10681 + C5472 * C50409 +
                     (C5450 - C5449) * C10682 + (C5452 - C5451) * C50330) *
                        C50436 +
                    (C5447 * C10681 + C5448 * C50409 + C5475 * C10682 +
                     C5476 * C50330) *
                        C50437 +
                    (C5775 * C10681 + C5776 * C50409 +
                     (C5467 - C5468) * C10682 + (C5469 - C5470) * C50330) *
                        C7884) *
                       C2085) *
                      C50154 * C50387 +
                  ((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                     C5453 * C10682 + C5454 * C50330) *
                        C50436 +
                    ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                     C745 * C10682 + C746 * C50330) *
                        C50437 +
                    C10697 * C7884) *
                       C50442 +
                   ((C5445 * C10681 + C5446 * C50409 + C5447 * C10682 +
                     C5448 * C50330) *
                        C50436 +
                    (C5773 * C10681 + C5774 * C50409 + C5775 * C10682 +
                     C5776 * C50330) *
                        C50437 +
                    (C11299 * C10681 + C11300 * C50409 +
                     (C516 - C517) * C10682 + (C518 - C519) * C50330) *
                        C7884) *
                       C50443 +
                   ((C5455 * C10681 + C5456 * C50409 + C5473 * C10682 +
                     C5474 * C50330) *
                        C50436 +
                    (C5465 * C10681 + C5466 * C50409 +
                     (C5468 - C5467) * C10682 + (C5470 - C5469) * C50330) *
                        C50437 +
                    ((C517 - C516) * C10681 + (C519 - C518) * C50409 +
                     (C117 * C1842 - C50251 * C1849) * C10682 +
                     (C117 * C1850 - C50251 * C1854) * C50330) *
                        C7884) *
                       C2085) *
                      C50154 * C50141)) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C1669 +
                   (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                     (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                        C50436 +
                    (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                     C5456 * C50330) *
                        C50437 +
                    C11303 * C7884) *
                       C50234) *
                      C50154 * C1020 +
                  ((((C149 - C148) * C10681 + (C151 - C150) * C50409 +
                     C5453 * C10682 + C5454 * C50330) *
                        C50436 +
                    ((C153 - C152) * C10681 + (C155 - C154) * C50409 +
                     C745 * C10682 + C746 * C50330) *
                        C50437 +
                    C10697 * C7884) *
                       C1669 +
                   ((C5445 * C10681 + C5446 * C50409 + C5447 * C10682 +
                     C5448 * C50330) *
                        C50436 +
                    (C5773 * C10681 + C5774 * C50409 + C5775 * C10682 +
                     C5776 * C50330) *
                        C50437 +
                    (C11299 * C10681 + C11300 * C50409 +
                     (C516 - C517) * C10682 + (C518 - C519) * C50330) *
                        C7884) *
                       C50234) *
                      C50154 * C1021 +
                  ((C10696 * C50436 +
                    (C170 * C10681 + C171 * C50409 + C11299 * C10682 +
                     C11300 * C50330) *
                        C50437 +
                    ((C161 - C160) * C10681 + (C163 - C162) * C50409 +
                     (C749 - C750) * C10682 + (C751 - C752) * C50330) *
                        C7884) *
                       C1669 +
                   (C11303 * C50436 +
                    (C747 * C10681 + C748 * C50409 + (C517 - C516) * C10682 +
                     (C519 - C518) * C50330) *
                        C50437 +
                    ((C750 - C749) * C10681 + (C752 - C751) * C50409 +
                     (C117 * C464 - C50251 * C483) * C10682 +
                     (C117 * C484 - C50251 * C494) * C50330) *
                        C7884) *
                       C50234) *
                      C50154 * C1022)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C10681 +
                     (C50251 * C140 - C117 * C127) * C50409 +
                     (C5437 - C5438) * C10682 + (C5439 - C5440) * C50330) *
                        C50436 +
                    ((C148 - C149) * C10681 + (C150 - C151) * C50409 +
                     C5445 * C10682 + C5446 * C50330) *
                        C50437 +
                    C10696 * C7884) *
                       C1669 +
                   (((C5438 - C5437) * C10681 + (C5440 - C5439) * C50409 +
                     (C5442 - C5441) * C10682 + (C5444 - C5443) * C50330) *
                        C50436 +
                    (C5453 * C10681 + C5454 * C50409 + C5455 * C10682 +
                     C5456 * C50330) *
                        C50437 +
                    C11303 * C7884) *
                       C50234) *
                      C285 +
                  ((((C117 * C290 - C50251 * C300) * C10681 +
                     (C117 * C301 - C50251 * C320) * C50409 +
                     (C5975 - C5976) * C10682 + (C5977 - C5978) * C50330) *
                        C50436 +
                    ((C331 - C332) * C10681 + (C333 - C334) * C50409 +
                     C5983 * C10682 + C5984 * C50330) *
                        C50437 +
                    C11148 * C7884) *
                       C1669 +
                   (((C5976 - C5975) * C10681 + (C5978 - C5977) * C50409 +
                     (C5980 - C5979) * C10682 + (C5982 - C5981) * C50330) *
                        C50436 +
                    (C5987 * C10681 + C5988 * C50409 + C5989 * C10682 +
                     C5990 * C50330) *
                        C50437 +
                    (C11498 * C10681 + C11499 * C50409 +
                     (C5623 - C5624) * C10682 + (C5625 - C5626) * C50330) *
                        C7884) *
                       C50234) *
                      C286 +
                  ((((C50251 * C308 - C117 * C294) * C10681 +
                     (C50251 * C324 - C117 * C309) * C50409 +
                     (C6885 - C6886) * C10682 + (C6887 - C6888) * C50330) *
                        C50436 +
                    ((C343 - C344) * C10681 + (C345 - C346) * C50409 +
                     (C5271 - C5272) * C10682 + (C5273 - C5274) * C50330) *
                        C50437 +
                    ((C347 - C348) * C10681 + (C349 - C350) * C50409 +
                     (C10844 - C10845) * C10682 + (C10846 - C10847) * C50330) *
                        C7884) *
                       C1669 +
                   (((C6886 - C6885) * C10681 + (C6888 - C6887) * C50409 +
                     (C6890 - C6889) * C10682 + (C6892 - C6891) * C50330) *
                        C50436 +
                    ((C5272 - C5271) * C10681 + (C5274 - C5273) * C50409 +
                     (C5276 - C5275) * C10682 + (C5278 - C5277) * C50330) *
                        C50437 +
                    ((C10845 - C10844) * C10681 + (C10847 - C10846) * C50409 +
                     (C117 * C2656 - C50251 * C2661) * C10682 +
                     (C117 * C2662 - C50251 * C2665) * C50330) *
                        C7884) *
                       C50234) *
                      C287) *
                 C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50170 * C50395 +
                   (((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C50170 * C50206) *
                      C50438 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C50170 * C50395 +
                   (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
                    ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
                    ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
                    ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                       C50170 * C50206) *
                      C50439 +
                  ((C184 * C107 + C185 * C108 +
                    ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                    ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                       C50170 * C50395 +
                   (C639 * C107 + C640 * C108 +
                    ((C632 - C631) * C118 + (C634 - C633) * C50266) * C109 +
                    ((C117 * C622 - C50251 * C623) * C118 +
                     (C117 * C624 - C50251 * C625) * C50266) *
                        C110) *
                       C50170 * C50206) *
                      C621)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50170 * C50395 +
                   (((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C50438 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C50170 * C50395 +
                   (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
                     (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                        C2285 +
                    ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
                     (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C50439 +
                  ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
                     (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                        C2285 +
                    ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
                     (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                        C50114) *
                       C50170 * C50395 +
                   (((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C118 +
                     (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C50266) *
                        C2285 +
                    ((C2287 * C293 - C2282 * C306 + C2288 * C297 -
                      C2283 * C314 + C2289 * C1097 - C2284 * C1104) *
                         C118 +
                     (C2287 * C307 - C2282 * C323 + C2288 * C315 -
                      C2283 * C327 + C2289 * C1105 - C2284 * C1109) *
                         C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C621)) /
                    (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C118 +
              (C50251 * C140 - C117 * C127) * C50266) *
                 C107 +
             ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
             C184 * C109 + C185 * C110) *
                C50396 +
            (((C117 * C455 - C50251 * C465) * C118 +
              (C117 * C466 - C50251 * C485) * C50266) *
                 C107 +
             ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
             C757 * C109 + C758 * C110) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C118 +
              (C117 * C301 - C50251 * C320) * C50266) *
                 C107 +
             ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
             C639 * C109 + C640 * C110) *
                C50396 +
            (((C50251 * C893 - C117 * C888) * C118 +
              (C50251 * C903 - C117 * C894) * C50266) *
                 C107 +
             ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
             ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
             ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                C50234) *
               C50206) *
              C288 +
          (((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
             ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
             C186 * C109 + C187 * C110) *
                C50396 +
            (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
             ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
             ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
             ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
             ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
             ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
             ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                C50396 +
            (((C910 - C909) * C118 + (C912 - C911) * C50266) * C107 +
             ((C914 - C913) * C118 + (C916 - C915) * C50266) * C108 +
             ((C918 - C917) * C118 + (C920 - C919) * C50266) * C109 +
             ((C117 * C892 - C50251 * C901) * C118 +
              (C117 * C902 - C50251 * C907) * C50266) *
                 C110) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
               C2284 * C308 - C2289 * C294) *
                  C118 +
              (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
               C2284 * C324 - C2289 * C309) *
                  C50266) *
                 C2285 +
             ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
              (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                 C50114) *
                C50396 +
            (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
               C2289 * C1555 - C2284 * C1559) *
                  C118 +
              (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
               C2289 * C1560 - C2284 * C1567) *
                  C50266) *
                 C2285 +
             ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
              (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
               C2289 * C1094 - C2284 * C1098) *
                  C118 +
              (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
               C2289 * C1099 - C2284 * C1106) *
                  C50266) *
                 C2285 +
             ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
              (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                 C50114) *
                C50396 +
            (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
               C2284 * C3203 - C2289 * C3200) *
                  C118 +
              (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
               C2284 * C3209 - C2289 * C3204) *
                  C50266) *
                 C2285 +
             ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
              (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C288 +
          (((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
              (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                 C2285 +
             ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
              (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                 C50114) *
                C50396 +
            (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
              (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                 C2285 +
             ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
              (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
              (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                 C2285 +
             ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
              (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                 C50114) *
                C50396 +
            (((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C118 +
              (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C50266) *
                 C2285 +
             ((C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
               C2289 * C3202 - C2284 * C3207) *
                  C118 +
              (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
               C2289 * C3208 - C2284 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50170 * C285 +
                   (((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    ((C335 - C336) * C118 + (C337 - C338) * C50266) * C109 +
                    ((C339 - C340) * C118 + (C341 - C342) * C50266) * C110) *
                       C50170 * C286 +
                   (((C50251 * C308 - C117 * C294) * C118 +
                     (C50251 * C324 - C117 * C309) * C50266) *
                        C107 +
                    ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                    ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                    ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                       C50170 * C287) *
                      C288 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C50170 * C285 +
                   (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
                    ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
                    ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
                    ((C50251 * C316 - C117 * C298) * C118 +
                     (C50251 * C328 - C117 * C317) * C50266) *
                        C110) *
                       C50170 * C286 +
                   (((C344 - C343) * C118 + (C346 - C345) * C50266) * C107 +
                    ((C348 - C347) * C118 + (C350 - C349) * C50266) * C108 +
                    ((C352 - C351) * C118 + (C354 - C353) * C50266) * C109 +
                    ((C117 * C299 - C50251 * C318) * C118 +
                     (C117 * C319 - C50251 * C329) * C50266) *
                        C110) *
                       C50170 * C287) *
                      C50141)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C50251 * C126 - C117 * C119) * C118 +
                    (C50251 * C140 - C117 * C127) * C50266) *
                       C107 +
                   ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                   C184 * C109 + C185 * C110) *
                      C50170 * C50154 * C113 +
                  (((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                   ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                   C186 * C109 + C187 * C110) *
                      C50170 * C50154 * C114 +
                  (C184 * C107 + C185 * C108 +
                   ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                   ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                      C50170 * C50154 * C115 +
                  (C186 * C107 + C187 * C108 +
                   ((C165 - C164) * C118 + (C167 - C166) * C50266) * C109 +
                   ((C117 * C125 - C50251 * C138) * C118 +
                    (C117 * C139 - C50251 * C146) * C50266) *
                       C110) *
                      C50170 * C50154 * C116)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C452 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    ((C500 - C501) * C118 + (C502 - C503) * C50266) * C109 +
                    ((C504 - C505) * C118 + (C506 - C507) * C50266) * C110) *
                       C453 +
                   (((C50251 * C473 - C117 * C459) * C118 +
                     (C50251 * C489 - C117 * C474) * C50266) *
                        C107 +
                    ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
                    ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
                    ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
                       C454) *
                      C50154 * C288 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C452 +
                   (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
                    ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
                    ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
                    ((C50251 * C481 - C117 * C463) * C118 +
                     (C50251 * C493 - C117 * C482) * C50266) *
                        C110) *
                       C453 +
                   (((C509 - C508) * C118 + (C511 - C510) * C50266) * C107 +
                    ((C513 - C512) * C118 + (C515 - C514) * C50266) * C108 +
                    ((C517 - C516) * C118 + (C519 - C518) * C50266) * C109 +
                    ((C117 * C464 - C50251 * C483) * C118 +
                     (C117 * C484 - C50251 * C494) * C50266) *
                        C110) *
                       C454) *
                      C50154 * C50141)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
                     C2284 * C308 - C2289 * C294) *
                        C118 +
                    (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
                     C2284 * C324 - C2289 * C309) *
                        C50266) *
                       C2285 +
                   ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                    (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                       C50114) *
                      C50170 * C50154 * C113 +
                  (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                    (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                       C2285 +
                   ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                    (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                       C50114) *
                      C50170 * C50154 * C114 +
                  (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
                    (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                       C2285 +
                   ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
                    (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                       C50114) *
                      C50170 * C50154 * C115 +
                  (((C2316 - C2315 + C2318 - C2317 + C2320 - C2319) * C118 +
                    (C2322 - C2321 + C2324 - C2323 + C2326 - C2325) * C50266) *
                       C2285 +
                   ((C2287 * C123 - C2282 * C134 + C2288 * C298 - C2283 * C316 +
                     C2289 * C299 - C2284 * C318) *
                        C118 +
                    (C2287 * C135 - C2282 * C144 + C2288 * C317 - C2283 * C328 +
                     C2289 * C319 - C2284 * C329) *
                        C50266) *
                       C50114) *
                      C50170 * C50154 * C116)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50170 * C285 +
                   (((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C50170 * C286 +
                   (((C2282 * C308 - C2287 * C294 + C2283 * C1098 -
                      C2288 * C1094 + C2284 * C2475 - C2289 * C2472) *
                         C118 +
                     (C2282 * C324 - C2287 * C309 + C2283 * C1106 -
                      C2288 * C1099 + C2284 * C2481 - C2289 * C2476) *
                         C50266) *
                        C2285 +
                    ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
                     (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                        C50114) *
                       C50170 * C287) *
                      C288 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C50170 * C285 +
                   (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
                     (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                        C2285 +
                    ((C2282 * C304 - C2287 * C292 + C2283 * C312 -
                      C2288 * C296 + C2284 * C1102 - C2289 * C1096) *
                         C118 +
                     (C2282 * C322 - C2287 * C305 + C2283 * C326 -
                      C2288 * C313 + C2284 * C1108 - C2289 * C1103) *
                         C50266) *
                        C50114) *
                       C50170 * C286 +
                   (((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C118 +
                     (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C50266) *
                        C2285 +
                    ((C2287 * C296 - C2282 * C312 + C2288 * C1096 -
                      C2283 * C1102 + C2289 * C2474 - C2284 * C2479) *
                         C118 +
                     (C2287 * C313 - C2282 * C326 + C2288 * C1103 -
                      C2283 * C1108 + C2289 * C2480 - C2284 * C2483) *
                         C50266) *
                        C50114) *
                       C50170 * C287) *
                      C50141)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C452 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C453 +
                   (((C2282 * C473 - C2287 * C459 + C2283 * C1212 -
                      C2288 * C1208 + C2284 * C2657 - C2289 * C2654) *
                         C118 +
                     (C2282 * C489 - C2287 * C474 + C2283 * C1220 -
                      C2288 * C1213 + C2284 * C2663 - C2289 * C2658) *
                         C50266) *
                        C2285 +
                    ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
                     (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                        C50114) *
                       C454) *
                      C50154 * C288 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C452 +
                   (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
                     (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                        C2285 +
                    ((C2282 * C469 - C2287 * C457 + C2283 * C897 -
                      C2288 * C890 + C2284 * C1563 - C2289 * C1557) *
                         C118 +
                     (C2282 * C487 - C2287 * C470 + C2283 * C905 -
                      C2288 * C898 + C2284 * C1569 - C2289 * C1564) *
                         C50266) *
                        C50114) *
                       C453 +
                   (((C2680 - C2679 + C2682 - C2681 + C2684 - C2683) * C118 +
                     (C2686 - C2685 + C2688 - C2687 + C2690 - C2689) * C50266) *
                        C2285 +
                    ((C2287 * C461 - C2282 * C477 + C2288 * C1210 -
                      C2283 * C1216 + C2289 * C2656 - C2284 * C2661) *
                         C118 +
                     (C2287 * C478 - C2282 * C491 + C2288 * C1217 -
                      C2283 * C1222 + C2289 * C2662 - C2284 * C2665) *
                         C50266) *
                        C50114) *
                       C454) *
                      C50154 * C50141)) /
                    (p * q * std::sqrt(p + q));
    d2ee[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50396 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C50234) *
                      C50154 * C50438 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C50396 +
                   (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
                    ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
                    ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
                    ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                       C50234) *
                      C50154 * C50439 +
                  ((C184 * C107 + C185 * C108 +
                    ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                    ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                       C50396 +
                   (C757 * C107 + C758 * C108 +
                    ((C750 - C749) * C118 + (C752 - C751) * C50266) * C109 +
                    ((C117 * C740 - C50251 * C741) * C118 +
                     (C117 * C742 - C50251 * C743) * C50266) *
                        C110) *
                       C50234) *
                      C50154 * C621)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50396 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C50438 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C50396 +
                   (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
                     (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                        C2285 +
                    ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
                     (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C50439 +
                  ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
                     (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                        C2285 +
                    ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
                     (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                        C50114) *
                       C50396 +
                   (((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C118 +
                     (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C50266) *
                        C2285 +
                    ((C2287 * C458 - C2282 * C471 + C2288 * C891 -
                      C2283 * C899 + C2289 * C1558 - C2284 * C1565) *
                         C118 +
                     (C2287 * C472 - C2282 * C488 + C2288 * C900 -
                      C2283 * C906 + C2289 * C1566 - C2284 * C1570) *
                         C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C621)) /
                    (p * q * std::sqrt(p + q));
    d2ee[64] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C50251 * C126 - C117 * C119) * C118 +
                    (C50251 * C140 - C117 * C127) * C50266) *
                       C107 +
                   ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                   C184 * C109 + C185 * C110) *
                      C50170 * C50154 * C113 +
                  (((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                   ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                   C186 * C109 + C187 * C110) *
                      C50170 * C50154 * C114 +
                  (C184 * C107 + C185 * C108 +
                   ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                   ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                      C50170 * C50154 * C115 +
                  (C186 * C107 + C187 * C108 +
                   ((C165 - C164) * C118 + (C167 - C166) * C50266) * C109 +
                   ((C117 * C125 - C50251 * C138) * C118 +
                    (C117 * C139 - C50251 * C146) * C50266) *
                       C110) *
                      C50170 * C50154 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50170 * C285 +
                   (((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    ((C335 - C336) * C118 + (C337 - C338) * C50266) * C109 +
                    ((C339 - C340) * C118 + (C341 - C342) * C50266) * C110) *
                       C50170 * C286 +
                   (((C50251 * C308 - C117 * C294) * C118 +
                     (C50251 * C324 - C117 * C309) * C50266) *
                        C107 +
                    ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                    ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                    ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                       C50170 * C287) *
                      C288 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C50170 * C285 +
                   (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
                    ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
                    ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
                    ((C50251 * C316 - C117 * C298) * C118 +
                     (C50251 * C328 - C117 * C317) * C50266) *
                        C110) *
                       C50170 * C286 +
                   (((C344 - C343) * C118 + (C346 - C345) * C50266) * C107 +
                    ((C348 - C347) * C118 + (C350 - C349) * C50266) * C108 +
                    ((C352 - C351) * C118 + (C354 - C353) * C50266) * C109 +
                    ((C117 * C299 - C50251 * C318) * C118 +
                     (C117 * C319 - C50251 * C329) * C50266) *
                        C110) *
                       C50170 * C287) *
                      C50141)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
                     C2284 * C308 - C2289 * C294) *
                        C118 +
                    (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
                     C2284 * C324 - C2289 * C309) *
                        C50266) *
                       C2285 +
                   ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                    (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                       C50114) *
                      C50170 * C50154 * C113 +
                  (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                    (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                       C2285 +
                   ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                    (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                       C50114) *
                      C50170 * C50154 * C114 +
                  (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
                    (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                       C2285 +
                   ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
                    (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                       C50114) *
                      C50170 * C50154 * C115 +
                  (((C2316 - C2315 + C2318 - C2317 + C2320 - C2319) * C118 +
                    (C2322 - C2321 + C2324 - C2323 + C2326 - C2325) * C50266) *
                       C2285 +
                   ((C2287 * C123 - C2282 * C134 + C2288 * C298 - C2283 * C316 +
                     C2289 * C299 - C2284 * C318) *
                        C118 +
                    (C2287 * C135 - C2282 * C144 + C2288 * C317 - C2283 * C328 +
                     C2289 * C319 - C2284 * C329) *
                        C50266) *
                       C50114) *
                      C50170 * C50154 * C116)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50170 * C285 +
                   (((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C50170 * C286 +
                   (((C2282 * C308 - C2287 * C294 + C2283 * C1098 -
                      C2288 * C1094 + C2284 * C2475 - C2289 * C2472) *
                         C118 +
                     (C2282 * C324 - C2287 * C309 + C2283 * C1106 -
                      C2288 * C1099 + C2284 * C2481 - C2289 * C2476) *
                         C50266) *
                        C2285 +
                    ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
                     (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                        C50114) *
                       C50170 * C287) *
                      C288 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C50170 * C285 +
                   (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
                     (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                        C2285 +
                    ((C2282 * C304 - C2287 * C292 + C2283 * C312 -
                      C2288 * C296 + C2284 * C1102 - C2289 * C1096) *
                         C118 +
                     (C2282 * C322 - C2287 * C305 + C2283 * C326 -
                      C2288 * C313 + C2284 * C1108 - C2289 * C1103) *
                         C50266) *
                        C50114) *
                       C50170 * C286 +
                   (((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C118 +
                     (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C50266) *
                        C2285 +
                    ((C2287 * C296 - C2282 * C312 + C2288 * C1096 -
                      C2283 * C1102 + C2289 * C2474 - C2284 * C2479) *
                         C118 +
                     (C2287 * C313 - C2282 * C326 + C2288 * C1103 -
                      C2283 * C1108 + C2289 * C2480 - C2284 * C2483) *
                         C50266) *
                        C50114) *
                       C50170 * C287) *
                      C50141)) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50170 * C50440 +
                   (((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C50170 * C50441 +
                   (((C50251 * C308 - C117 * C294) * C118 +
                     (C50251 * C324 - C117 * C309) * C50266) *
                        C107 +
                    ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                    ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                    ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                       C50170 * C1324) *
                      C50387 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C50170 * C50440 +
                   (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
                    ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
                    ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
                    ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                       C50170 * C50441 +
                   (((C344 - C343) * C118 + (C346 - C345) * C50266) * C107 +
                    ((C348 - C347) * C118 + (C350 - C349) * C50266) * C108 +
                    ((C352 - C351) * C118 + (C354 - C353) * C50266) * C109 +
                    ((C117 * C299 - C50251 * C318) * C118 +
                     (C117 * C319 - C50251 * C329) * C50266) *
                        C110) *
                       C50170 * C1324) *
                      C50141)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50170 * C50440 +
                   (((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C50170 * C50441 +
                   (((C2282 * C308 - C2287 * C294 + C2283 * C1098 -
                      C2288 * C1094 + C2284 * C2475 - C2289 * C2472) *
                         C118 +
                     (C2282 * C324 - C2287 * C309 + C2283 * C1106 -
                      C2288 * C1099 + C2284 * C2481 - C2289 * C2476) *
                         C50266) *
                        C2285 +
                    ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
                     (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                        C50114) *
                       C50170 * C1324) *
                      C50387 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C50170 * C50440 +
                   (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
                     (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                        C2285 +
                    ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
                     (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                        C50114) *
                       C50170 * C50441 +
                   (((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C118 +
                     (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C50266) *
                        C2285 +
                    ((C2287 * C296 - C2282 * C312 + C2288 * C1096 -
                      C2283 * C1102 + C2289 * C2474 - C2284 * C2479) *
                         C118 +
                     (C2287 * C313 - C2282 * C326 + C2288 * C1103 -
                      C2283 * C1108 + C2289 * C2480 - C2284 * C2483) *
                         C50266) *
                        C50114) *
                       C50170 * C1324) *
                      C50141)) /
                    (p * q * std::sqrt(p + q));
    d2ee[66] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50396 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C50234) *
                      C50440 +
                  ((((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C50396 +
                   (((C50251 * C893 - C117 * C888) * C118 +
                     (C50251 * C903 - C117 * C894) * C50266) *
                        C107 +
                    ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
                    ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
                    ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                       C50234) *
                      C50441 +
                  ((((C50251 * C308 - C117 * C294) * C118 +
                     (C50251 * C324 - C117 * C309) * C50266) *
                        C107 +
                    ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                    ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                    ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                       C50396 +
                   (((C117 * C1555 - C50251 * C1559) * C118 +
                     (C117 * C1560 - C50251 * C1567) * C50266) *
                        C107 +
                    ((C117 * C1556 - C50251 * C1561) * C118 +
                     (C117 * C1562 - C50251 * C1568) * C50266) *
                        C108 +
                    ((C117 * C1557 - C50251 * C1563) * C118 +
                     (C117 * C1564 - C50251 * C1569) * C50266) *
                        C109 +
                    ((C117 * C1558 - C50251 * C1565) * C118 +
                     (C117 * C1566 - C50251 * C1570) * C50266) *
                        C110) *
                       C50234) *
                      C1324) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50396 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C50234) *
                      C50440 +
                  ((((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C50396 +
                   (((C2282 * C893 - C2287 * C888 + C2283 * C1559 -
                      C2288 * C1555 + C2284 * C3203 - C2289 * C3200) *
                         C118 +
                     (C2282 * C903 - C2287 * C894 + C2283 * C1567 -
                      C2288 * C1560 + C2284 * C3209 - C2289 * C3204) *
                         C50266) *
                        C2285 +
                    ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
                     (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                        C50114) *
                       C50234) *
                      C50441 +
                  ((((C2282 * C308 - C2287 * C294 + C2283 * C1098 -
                      C2288 * C1094 + C2284 * C2475 - C2289 * C2472) *
                         C118 +
                     (C2282 * C324 - C2287 * C309 + C2283 * C1106 -
                      C2288 * C1099 + C2284 * C2481 - C2289 * C2476) *
                         C50266) *
                        C2285 +
                    ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
                     (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                        C50114) *
                       C50396 +
                   (((C2287 * C1555 - C2282 * C1559 + C2288 * C3200 -
                      C2283 * C3203 + C2289 * C4116 - C2284 * C4118) *
                         C118 +
                     (C2287 * C1560 - C2282 * C1567 + C2288 * C3204 -
                      C2283 * C3209 + C2289 * C4119 - C2284 * C4122) *
                         C50266) *
                        C2285 +
                    ((C2287 * C1556 - C2282 * C1561 + C2288 * C3201 -
                      C2283 * C3205 + C2289 * C4117 - C2284 * C4120) *
                         C118 +
                     (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 -
                      C2283 * C3210 + C2289 * C4121 - C2284 * C4123) *
                         C50266) *
                        C50114) *
                       C50234) *
                      C1324) *
                 C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C50251 * C126 - C117 * C119) * C118 +
                    (C50251 * C140 - C117 * C127) * C50266) *
                       C107 +
                   ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                   C184 * C109 + C185 * C110) *
                      C50170 * C1089 +
                  (((C117 * C290 - C50251 * C300) * C118 +
                    (C117 * C301 - C50251 * C320) * C50266) *
                       C107 +
                   ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                   C639 * C109 + C640 * C110) *
                      C50170 * C1090 +
                  (((C50251 * C308 - C117 * C294) * C118 +
                    (C50251 * C324 - C117 * C309) * C50266) *
                       C107 +
                   ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                   ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                   ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                      C50170 * C1091 +
                  (((C117 * C1094 - C50251 * C1098) * C118 +
                    (C117 * C1099 - C50251 * C1106) * C50266) *
                       C107 +
                   ((C117 * C1095 - C50251 * C1100) * C118 +
                    (C117 * C1101 - C50251 * C1107) * C50266) *
                       C108 +
                   ((C117 * C1096 - C50251 * C1102) * C118 +
                    (C117 * C1103 - C50251 * C1108) * C50266) *
                       C109 +
                   ((C117 * C1097 - C50251 * C1104) * C118 +
                    (C117 * C1105 - C50251 * C1109) * C50266) *
                       C110) *
                      C50170 * C1092) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50170 * C1018 +
                   (((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C50170 * C50206) *
                      C1020 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C50170 * C1018 +
                   (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
                    ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
                    ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
                    ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                       C50170 * C50206) *
                      C1021 +
                  ((C184 * C107 + C185 * C108 +
                    ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                    ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                       C50170 * C1018 +
                   (C639 * C107 + C640 * C108 +
                    ((C632 - C631) * C118 + (C634 - C633) * C50266) * C109 +
                    ((C117 * C622 - C50251 * C623) * C118 +
                     (C117 * C624 - C50251 * C625) * C50266) *
                        C110) *
                       C50170 * C50206) *
                      C1022)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C452 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C453 +
                   (((C50251 * C473 - C117 * C459) * C118 +
                     (C50251 * C489 - C117 * C474) * C50266) *
                        C107 +
                    ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
                    ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
                    ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
                       C454) *
                      C1018 +
                  ((((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C452 +
                   (((C50251 * C893 - C117 * C888) * C118 +
                     (C50251 * C903 - C117 * C894) * C50266) *
                        C107 +
                    ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
                    ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
                    ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                       C453 +
                   (((C117 * C1208 - C50251 * C1212) * C118 +
                     (C117 * C1213 - C50251 * C1220) * C50266) *
                        C107 +
                    ((C117 * C1209 - C50251 * C1214) * C118 +
                     (C117 * C1215 - C50251 * C1221) * C50266) *
                        C108 +
                    ((C117 * C1210 - C50251 * C1216) * C118 +
                     (C117 * C1217 - C50251 * C1222) * C50266) *
                        C109 +
                    ((C117 * C1211 - C50251 * C1218) * C118 +
                     (C117 * C1219 - C50251 * C1223) * C50266) *
                        C110) *
                       C454) *
                      C50206) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50170 * C1018 +
                   (((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C1020 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C50170 * C1018 +
                   (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
                     (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                        C2285 +
                    ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
                     (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C1021 +
                  ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
                     (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                        C2285 +
                    ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
                     (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                        C50114) *
                       C50170 * C1018 +
                   (((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C118 +
                     (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C50266) *
                        C2285 +
                    ((C2287 * C293 - C2282 * C306 + C2288 * C297 -
                      C2283 * C314 + C2289 * C1097 - C2284 * C1104) *
                         C118 +
                     (C2287 * C307 - C2282 * C323 + C2288 * C315 -
                      C2283 * C327 + C2289 * C1105 - C2284 * C1109) *
                         C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C1022)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
                     C2284 * C308 - C2289 * C294) *
                        C118 +
                    (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
                     C2284 * C324 - C2289 * C309) *
                        C50266) *
                       C2285 +
                   ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                    (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                       C50114) *
                      C50170 * C1089 +
                  (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
                     C2289 * C1094 - C2284 * C1098) *
                        C118 +
                    (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
                     C2289 * C1099 - C2284 * C1106) *
                        C50266) *
                       C2285 +
                   ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                    (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                       C50114) *
                      C50170 * C1090 +
                  (((C2282 * C308 - C2287 * C294 + C2283 * C1098 -
                     C2288 * C1094 + C2284 * C2475 - C2289 * C2472) *
                        C118 +
                    (C2282 * C324 - C2287 * C309 + C2283 * C1106 -
                     C2288 * C1099 + C2284 * C2481 - C2289 * C2476) *
                        C50266) *
                       C2285 +
                   ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
                    (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                       C50114) *
                      C50170 * C1091 +
                  (((C2287 * C1094 - C2282 * C1098 + C2288 * C2472 -
                     C2283 * C2475 + C2289 * C3468 - C2284 * C3470) *
                        C118 +
                    (C2287 * C1099 - C2282 * C1106 + C2288 * C2476 -
                     C2283 * C2481 + C2289 * C3471 - C2284 * C3474) *
                        C50266) *
                       C2285 +
                   ((C2287 * C1095 - C2282 * C1100 + C2288 * C2473 -
                     C2283 * C2477 + C2289 * C3469 - C2284 * C3472) *
                        C118 +
                    (C2287 * C1101 - C2282 * C1107 + C2288 * C2478 -
                     C2283 * C2482 + C2289 * C3473 - C2284 * C3475) *
                        C50266) *
                       C50114) *
                      C50170 * C1092) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C452 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C453 +
                   (((C2282 * C473 - C2287 * C459 + C2283 * C1212 -
                      C2288 * C1208 + C2284 * C2657 - C2289 * C2654) *
                         C118 +
                     (C2282 * C489 - C2287 * C474 + C2283 * C1220 -
                      C2288 * C1213 + C2284 * C2663 - C2289 * C2658) *
                         C50266) *
                        C2285 +
                    ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
                     (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                        C50114) *
                       C454) *
                      C1018 +
                  ((((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C452 +
                   (((C2282 * C893 - C2287 * C888 + C2283 * C1559 -
                      C2288 * C1555 + C2284 * C3203 - C2289 * C3200) *
                         C118 +
                     (C2282 * C903 - C2287 * C894 + C2283 * C1567 -
                      C2288 * C1560 + C2284 * C3209 - C2289 * C3204) *
                         C50266) *
                        C2285 +
                    ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
                     (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                        C50114) *
                       C453 +
                   (((C2287 * C1208 - C2282 * C1212 + C2288 * C2654 -
                      C2283 * C2657 + C2289 * C3622 - C2284 * C3624) *
                         C118 +
                     (C2287 * C1213 - C2282 * C1220 + C2288 * C2658 -
                      C2283 * C2663 + C2289 * C3625 - C2284 * C3628) *
                         C50266) *
                        C2285 +
                    ((C2287 * C1209 - C2282 * C1214 + C2288 * C2655 -
                      C2283 * C2659 + C2289 * C3623 - C2284 * C3626) *
                         C118 +
                     (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 -
                      C2283 * C2664 + C2289 * C3627 - C2284 * C3629) *
                         C50266) *
                        C50114) *
                       C454) *
                      C50206) *
                 C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C118 +
              (C50251 * C140 - C117 * C127) * C50266) *
                 C107 +
             ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
             C184 * C109 + C185 * C110) *
                C50396 +
            (((C117 * C455 - C50251 * C465) * C118 +
              (C117 * C466 - C50251 * C485) * C50266) *
                 C107 +
             ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
             C757 * C109 + C758 * C110) *
                C50234) *
               C1018 +
           ((((C117 * C290 - C50251 * C300) * C118 +
              (C117 * C301 - C50251 * C320) * C50266) *
                 C107 +
             ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
             C639 * C109 + C640 * C110) *
                C50396 +
            (((C50251 * C893 - C117 * C888) * C118 +
              (C50251 * C903 - C117 * C894) * C50266) *
                 C107 +
             ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
             ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
             ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
             ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
             C186 * C109 + C187 * C110) *
                C50396 +
            (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
             ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
             ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
             ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                C50234) *
               C1018 +
           ((((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
             ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
             ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
             ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                C50396 +
            (((C910 - C909) * C118 + (C912 - C911) * C50266) * C107 +
             ((C914 - C913) * C118 + (C916 - C915) * C50266) * C108 +
             ((C918 - C917) * C118 + (C920 - C919) * C50266) * C109 +
             ((C117 * C892 - C50251 * C901) * C118 +
              (C117 * C902 - C50251 * C907) * C50266) *
                 C110) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
               C2284 * C308 - C2289 * C294) *
                  C118 +
              (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
               C2284 * C324 - C2289 * C309) *
                  C50266) *
                 C2285 +
             ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
              (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                 C50114) *
                C50396 +
            (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
               C2289 * C1555 - C2284 * C1559) *
                  C118 +
              (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
               C2289 * C1560 - C2284 * C1567) *
                  C50266) *
                 C2285 +
             ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
              (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
               C2289 * C1094 - C2284 * C1098) *
                  C118 +
              (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
               C2289 * C1099 - C2284 * C1106) *
                  C50266) *
                 C2285 +
             ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
              (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                 C50114) *
                C50396 +
            (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
               C2284 * C3203 - C2289 * C3200) *
                  C118 +
              (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
               C2284 * C3209 - C2289 * C3204) *
                  C50266) *
                 C2285 +
             ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
              (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
              (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                 C2285 +
             ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
              (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                 C50114) *
                C50396 +
            (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
              (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                 C2285 +
             ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
              (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
              (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                 C2285 +
             ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
              (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                 C50114) *
                C50396 +
            (((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C118 +
              (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C50266) *
                 C2285 +
             ((C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
               C2289 * C3202 - C2284 * C3207) *
                  C118 +
              (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
               C2289 * C3208 - C2284 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50170 * C1018 +
                   (((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C50170 * C50206) *
                      C1020 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C50170 * C1018 +
                   (((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
                    ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
                    ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
                    ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                       C50170 * C50206) *
                      C1021 +
                  ((C184 * C107 + C185 * C108 +
                    ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                    ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                       C50170 * C1018 +
                   (C639 * C107 + C640 * C108 +
                    ((C632 - C631) * C118 + (C634 - C633) * C50266) * C109 +
                    ((C117 * C622 - C50251 * C623) * C118 +
                     (C117 * C624 - C50251 * C625) * C50266) *
                        C110) *
                       C50170 * C50206) *
                      C1022)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C50251 * C126 - C117 * C119) * C118 +
                    (C50251 * C140 - C117 * C127) * C50266) *
                       C107 +
                   ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                   C184 * C109 + C185 * C110) *
                      C50170 * C1089 +
                  (((C117 * C290 - C50251 * C300) * C118 +
                    (C117 * C301 - C50251 * C320) * C50266) *
                       C107 +
                   ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                   C639 * C109 + C640 * C110) *
                      C50170 * C1090 +
                  (((C50251 * C308 - C117 * C294) * C118 +
                    (C50251 * C324 - C117 * C309) * C50266) *
                       C107 +
                   ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                   ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                   ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                      C50170 * C1091 +
                  (((C117 * C1094 - C50251 * C1098) * C118 +
                    (C117 * C1099 - C50251 * C1106) * C50266) *
                       C107 +
                   ((C117 * C1095 - C50251 * C1100) * C118 +
                    (C117 * C1101 - C50251 * C1107) * C50266) *
                       C108 +
                   ((C117 * C1096 - C50251 * C1102) * C118 +
                    (C117 * C1103 - C50251 * C1108) * C50266) *
                       C109 +
                   ((C117 * C1097 - C50251 * C1104) * C118 +
                    (C117 * C1105 - C50251 * C1109) * C50266) *
                       C110) *
                      C50170 * C1092) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50170 * C1018 +
                   (((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C1020 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C50170 * C1018 +
                   (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
                     (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                        C2285 +
                    ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
                     (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C1021 +
                  ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
                     (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                        C2285 +
                    ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
                     (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                        C50114) *
                       C50170 * C1018 +
                   (((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C118 +
                     (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C50266) *
                        C2285 +
                    ((C2287 * C293 - C2282 * C306 + C2288 * C297 -
                      C2283 * C314 + C2289 * C1097 - C2284 * C1104) *
                         C118 +
                     (C2287 * C307 - C2282 * C323 + C2288 * C315 -
                      C2283 * C327 + C2289 * C1105 - C2284 * C1109) *
                         C50266) *
                        C50114) *
                       C50170 * C50206) *
                      C1022)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
                     C2284 * C308 - C2289 * C294) *
                        C118 +
                    (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
                     C2284 * C324 - C2289 * C309) *
                        C50266) *
                       C2285 +
                   ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                    (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                       C50114) *
                      C50170 * C1089 +
                  (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
                     C2289 * C1094 - C2284 * C1098) *
                        C118 +
                    (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
                     C2289 * C1099 - C2284 * C1106) *
                        C50266) *
                       C2285 +
                   ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                    (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                       C50114) *
                      C50170 * C1090 +
                  (((C2282 * C308 - C2287 * C294 + C2283 * C1098 -
                     C2288 * C1094 + C2284 * C2475 - C2289 * C2472) *
                        C118 +
                    (C2282 * C324 - C2287 * C309 + C2283 * C1106 -
                     C2288 * C1099 + C2284 * C2481 - C2289 * C2476) *
                        C50266) *
                       C2285 +
                   ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
                    (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                       C50114) *
                      C50170 * C1091 +
                  (((C2287 * C1094 - C2282 * C1098 + C2288 * C2472 -
                     C2283 * C2475 + C2289 * C3468 - C2284 * C3470) *
                        C118 +
                    (C2287 * C1099 - C2282 * C1106 + C2288 * C2476 -
                     C2283 * C2481 + C2289 * C3471 - C2284 * C3474) *
                        C50266) *
                       C2285 +
                   ((C2287 * C1095 - C2282 * C1100 + C2288 * C2473 -
                     C2283 * C2477 + C2289 * C3469 - C2284 * C3472) *
                        C118 +
                    (C2287 * C1101 - C2282 * C1107 + C2288 * C2478 -
                     C2283 * C2482 + C2289 * C3473 - C2284 * C3475) *
                        C50266) *
                       C50114) *
                      C50170 * C1092) *
                 C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C118 +
              (C50251 * C140 - C117 * C127) * C50266) *
                 C107 +
             ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
             C184 * C109 + C185 * C110) *
                C1669 +
            (((C117 * C455 - C50251 * C465) * C118 +
              (C117 * C466 - C50251 * C485) * C50266) *
                 C107 +
             ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
             C757 * C109 + C758 * C110) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C118 +
              (C117 * C301 - C50251 * C320) * C50266) *
                 C107 +
             ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
             C639 * C109 + C640 * C110) *
                C1669 +
            (((C50251 * C893 - C117 * C888) * C118 +
              (C50251 * C903 - C117 * C894) * C50266) *
                 C107 +
             ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
             ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
             ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
             ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
             C186 * C109 + C187 * C110) *
                C1669 +
            (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
             ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
             ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
             ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C118 + (C334 - C333) * C50266) * C107 +
             ((C336 - C335) * C118 + (C338 - C337) * C50266) * C108 +
             ((C340 - C339) * C118 + (C342 - C341) * C50266) * C109 +
             ((C631 - C632) * C118 + (C633 - C634) * C50266) * C110) *
                C1669 +
            (((C910 - C909) * C118 + (C912 - C911) * C50266) * C107 +
             ((C914 - C913) * C118 + (C916 - C915) * C50266) * C108 +
             ((C918 - C917) * C118 + (C920 - C919) * C50266) * C109 +
             ((C117 * C892 - C50251 * C901) * C118 +
              (C117 * C902 - C50251 * C907) * C50266) *
                 C110) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
               C2284 * C308 - C2289 * C294) *
                  C118 +
              (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
               C2284 * C324 - C2289 * C309) *
                  C50266) *
                 C2285 +
             ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
              (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                 C50114) *
                C1669 +
            (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
               C2289 * C1555 - C2284 * C1559) *
                  C118 +
              (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
               C2289 * C1560 - C2284 * C1567) *
                  C50266) *
                 C2285 +
             ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
              (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
               C2289 * C1094 - C2284 * C1098) *
                  C118 +
              (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
               C2289 * C1099 - C2284 * C1106) *
                  C50266) *
                 C2285 +
             ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
              (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                 C50114) *
                C1669 +
            (((C2282 * C893 - C2287 * C888 + C2283 * C1559 - C2288 * C1555 +
               C2284 * C3203 - C2289 * C3200) *
                  C118 +
              (C2282 * C903 - C2287 * C894 + C2283 * C1567 - C2288 * C1560 +
               C2284 * C3209 - C2289 * C3204) *
                  C50266) *
                 C2285 +
             ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
              (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
              (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                 C2285 +
             ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
              (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                 C50114) *
                C1669 +
            (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
              (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                 C2285 +
             ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
              (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C118 +
              (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C50266) *
                 C2285 +
             ((C2837 - C2838 + C2839 - C2840 + C2841 - C2842) * C118 +
              (C2843 - C2844 + C2845 - C2846 + C2847 - C2848) * C50266) *
                 C50114) *
                C1669 +
            (((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C118 +
              (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C50266) *
                 C2285 +
             ((C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
               C2289 * C3202 - C2284 * C3207) *
                  C118 +
              (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
               C2289 * C3208 - C2284 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50442 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C50443 +
                   (((C50251 * C473 - C117 * C459) * C118 +
                     (C50251 * C489 - C117 * C474) * C50266) *
                        C107 +
                    ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
                    ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
                    ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
                       C2085) *
                      C50395 +
                  ((((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C50442 +
                   (((C50251 * C893 - C117 * C888) * C118 +
                     (C50251 * C903 - C117 * C894) * C50266) *
                        C107 +
                    ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
                    ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
                    ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                       C50443 +
                   (((C117 * C1208 - C50251 * C1212) * C118 +
                     (C117 * C1213 - C50251 * C1220) * C50266) *
                        C107 +
                    ((C117 * C1209 - C50251 * C1214) * C118 +
                     (C117 * C1215 - C50251 * C1221) * C50266) *
                        C108 +
                    ((C117 * C1210 - C50251 * C1216) * C118 +
                     (C117 * C1217 - C50251 * C1222) * C50266) *
                        C109 +
                    ((C117 * C1211 - C50251 * C1218) * C118 +
                     (C117 * C1219 - C50251 * C1223) * C50266) *
                        C110) *
                       C2085) *
                      C50206) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50442 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C50443 +
                   (((C2282 * C473 - C2287 * C459 + C2283 * C1212 -
                      C2288 * C1208 + C2284 * C2657 - C2289 * C2654) *
                         C118 +
                     (C2282 * C489 - C2287 * C474 + C2283 * C1220 -
                      C2288 * C1213 + C2284 * C2663 - C2289 * C2658) *
                         C50266) *
                        C2285 +
                    ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
                     (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                        C50114) *
                       C2085) *
                      C50395 +
                  ((((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C50442 +
                   (((C2282 * C893 - C2287 * C888 + C2283 * C1559 -
                      C2288 * C1555 + C2284 * C3203 - C2289 * C3200) *
                         C118 +
                     (C2282 * C903 - C2287 * C894 + C2283 * C1567 -
                      C2288 * C1560 + C2284 * C3209 - C2289 * C3204) *
                         C50266) *
                        C2285 +
                    ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
                     (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                        C50114) *
                       C50443 +
                   (((C2287 * C1208 - C2282 * C1212 + C2288 * C2654 -
                      C2283 * C2657 + C2289 * C3622 - C2284 * C3624) *
                         C118 +
                     (C2287 * C1213 - C2282 * C1220 + C2288 * C2658 -
                      C2283 * C2663 + C2289 * C3625 - C2284 * C3628) *
                         C50266) *
                        C2285 +
                    ((C2287 * C1209 - C2282 * C1214 + C2288 * C2655 -
                      C2283 * C2659 + C2289 * C3623 - C2284 * C3626) *
                         C118 +
                     (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 -
                      C2283 * C2664 + C2289 * C3627 - C2284 * C3629) *
                         C50266) *
                        C50114) *
                       C2085) *
                      C50206) *
                 C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C1669 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C50234) *
                      C285 +
                  ((((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C1669 +
                   (((C50251 * C893 - C117 * C888) * C118 +
                     (C50251 * C903 - C117 * C894) * C50266) *
                        C107 +
                    ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
                    ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
                    ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                       C50234) *
                      C286 +
                  ((((C50251 * C308 - C117 * C294) * C118 +
                     (C50251 * C324 - C117 * C309) * C50266) *
                        C107 +
                    ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                    ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                    ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                       C1669 +
                   (((C117 * C1555 - C50251 * C1559) * C118 +
                     (C117 * C1560 - C50251 * C1567) * C50266) *
                        C107 +
                    ((C117 * C1556 - C50251 * C1561) * C118 +
                     (C117 * C1562 - C50251 * C1568) * C50266) *
                        C108 +
                    ((C117 * C1557 - C50251 * C1563) * C118 +
                     (C117 * C1564 - C50251 * C1569) * C50266) *
                        C109 +
                    ((C117 * C1558 - C50251 * C1565) * C118 +
                     (C117 * C1566 - C50251 * C1570) * C50266) *
                        C110) *
                       C50234) *
                      C287) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C1669 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C50234) *
                      C50154 * C1020 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C1669 +
                   (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
                    ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
                    ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
                    ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                       C50234) *
                      C50154 * C1021 +
                  ((C184 * C107 + C185 * C108 +
                    ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                    ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                       C1669 +
                   (C757 * C107 + C758 * C108 +
                    ((C750 - C749) * C118 + (C752 - C751) * C50266) * C109 +
                    ((C117 * C740 - C50251 * C741) * C118 +
                     (C117 * C742 - C50251 * C743) * C50266) *
                        C110) *
                       C50234) *
                      C50154 * C1022)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C50251 * C126 - C117 * C119) * C118 +
                    (C50251 * C140 - C117 * C127) * C50266) *
                       C107 +
                   ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                   C184 * C109 + C185 * C110) *
                      C1835 +
                  (((C117 * C455 - C50251 * C465) * C118 +
                    (C117 * C466 - C50251 * C485) * C50266) *
                       C107 +
                   ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                   C757 * C109 + C758 * C110) *
                      C1836 +
                  (((C50251 * C473 - C117 * C459) * C118 +
                    (C50251 * C489 - C117 * C474) * C50266) *
                       C107 +
                   ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
                   ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
                   ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
                      C1837 +
                  (((C117 * C1839 - C50251 * C1843) * C118 +
                    (C117 * C1844 - C50251 * C1851) * C50266) *
                       C107 +
                   ((C117 * C1840 - C50251 * C1845) * C118 +
                    (C117 * C1846 - C50251 * C1852) * C50266) *
                       C108 +
                   ((C117 * C1841 - C50251 * C1847) * C118 +
                    (C117 * C1848 - C50251 * C1853) * C50266) *
                       C109 +
                   ((C117 * C1842 - C50251 * C1849) * C118 +
                    (C117 * C1850 - C50251 * C1854) * C50266) *
                       C110) *
                      C1838) *
                 C50154 * C50135) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C1020 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
                     (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                        C2285 +
                    ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
                     (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C1021 +
                  ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
                     (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                        C2285 +
                    ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
                     (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C118 +
                     (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C50266) *
                        C2285 +
                    ((C2287 * C458 - C2282 * C471 + C2288 * C891 -
                      C2283 * C899 + C2289 * C1558 - C2284 * C1565) *
                         C118 +
                     (C2287 * C472 - C2282 * C488 + C2288 * C900 -
                      C2283 * C906 + C2289 * C1566 - C2284 * C1570) *
                         C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C1022)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C50234) *
                      C285 +
                  ((((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2282 * C893 - C2287 * C888 + C2283 * C1559 -
                      C2288 * C1555 + C2284 * C3203 - C2289 * C3200) *
                         C118 +
                     (C2282 * C903 - C2287 * C894 + C2283 * C1567 -
                      C2288 * C1560 + C2284 * C3209 - C2289 * C3204) *
                         C50266) *
                        C2285 +
                    ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
                     (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                        C50114) *
                       C50234) *
                      C286 +
                  ((((C2282 * C308 - C2287 * C294 + C2283 * C1098 -
                      C2288 * C1094 + C2284 * C2475 - C2289 * C2472) *
                         C118 +
                     (C2282 * C324 - C2287 * C309 + C2283 * C1106 -
                      C2288 * C1099 + C2284 * C2481 - C2289 * C2476) *
                         C50266) *
                        C2285 +
                    ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
                     (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2287 * C1555 - C2282 * C1559 + C2288 * C3200 -
                      C2283 * C3203 + C2289 * C4116 - C2284 * C4118) *
                         C118 +
                     (C2287 * C1560 - C2282 * C1567 + C2288 * C3204 -
                      C2283 * C3209 + C2289 * C4119 - C2284 * C4122) *
                         C50266) *
                        C2285 +
                    ((C2287 * C1556 - C2282 * C1561 + C2288 * C3201 -
                      C2283 * C3205 + C2289 * C4117 - C2284 * C4120) *
                         C118 +
                     (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 -
                      C2283 * C3210 + C2289 * C4121 - C2284 * C4123) *
                         C50266) *
                        C50114) *
                       C50234) *
                      C287) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
                     C2284 * C308 - C2289 * C294) *
                        C118 +
                    (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
                     C2284 * C324 - C2289 * C309) *
                        C50266) *
                       C2285 +
                   ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                    (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                       C50114) *
                      C1835 +
                  (((C2287 * C455 - C2282 * C465 + C2288 * C888 - C2283 * C893 +
                     C2289 * C1555 - C2284 * C1559) *
                        C118 +
                    (C2287 * C466 - C2282 * C485 + C2288 * C894 - C2283 * C903 +
                     C2289 * C1560 - C2284 * C1567) *
                        C50266) *
                       C2285 +
                   ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                    (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                       C50114) *
                      C1836 +
                  (((C2282 * C473 - C2287 * C459 + C2283 * C1212 -
                     C2288 * C1208 + C2284 * C2657 - C2289 * C2654) *
                        C118 +
                    (C2282 * C489 - C2287 * C474 + C2283 * C1220 -
                     C2288 * C1213 + C2284 * C2663 - C2289 * C2658) *
                        C50266) *
                       C2285 +
                   ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
                    (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                       C50114) *
                      C1837 +
                  (((C2287 * C1839 - C2282 * C1843 + C2288 * C4514 -
                     C2283 * C4518 + C2289 * C4515 - C2284 * C4519) *
                        C118 +
                    (C2287 * C1844 - C2282 * C1851 + C2288 * C4520 -
                     C2283 * C4526 + C2289 * C4521 - C2284 * C4527) *
                        C50266) *
                       C2285 +
                   ((C2287 * C1840 - C2282 * C1845 + C2288 * C4516 -
                     C2283 * C4522 + C2289 * C4517 - C2284 * C4523) *
                        C118 +
                    (C2287 * C1846 - C2282 * C1852 + C2288 * C4524 -
                     C2283 * C4528 + C2289 * C4525 - C2284 * C4529) *
                        C50266) *
                       C50114) *
                      C1838) *
                 C50154 * C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C50442 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C50443 +
                   (((C50251 * C473 - C117 * C459) * C118 +
                     (C50251 * C489 - C117 * C474) * C50266) *
                        C107 +
                    ((C508 - C509) * C118 + (C510 - C511) * C50266) * C108 +
                    ((C512 - C513) * C118 + (C514 - C515) * C50266) * C109 +
                    ((C516 - C517) * C118 + (C518 - C519) * C50266) * C110) *
                       C2085) *
                      C50154 * C50387 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C50442 +
                   (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
                    ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
                    ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
                    ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                       C50443 +
                   (((C509 - C508) * C118 + (C511 - C510) * C50266) * C107 +
                    ((C513 - C512) * C118 + (C515 - C514) * C50266) * C108 +
                    ((C517 - C516) * C118 + (C519 - C518) * C50266) * C109 +
                    ((C117 * C464 - C50251 * C483) * C118 +
                     (C117 * C484 - C50251 * C494) * C50266) *
                        C110) *
                       C2085) *
                      C50154 * C50141)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C50442 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C50443 +
                   (((C2282 * C473 - C2287 * C459 + C2283 * C1212 -
                      C2288 * C1208 + C2284 * C2657 - C2289 * C2654) *
                         C118 +
                     (C2282 * C489 - C2287 * C474 + C2283 * C1220 -
                      C2288 * C1213 + C2284 * C2663 - C2289 * C2658) *
                         C50266) *
                        C2285 +
                    ((C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C118 +
                     (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50266) *
                        C50114) *
                       C2085) *
                      C50154 * C50387 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C50442 +
                   (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
                     (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                        C2285 +
                    ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
                     (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                        C50114) *
                       C50443 +
                   (((C2680 - C2679 + C2682 - C2681 + C2684 - C2683) * C118 +
                     (C2686 - C2685 + C2688 - C2687 + C2690 - C2689) * C50266) *
                        C2285 +
                    ((C2287 * C461 - C2282 * C477 + C2288 * C1210 -
                      C2283 * C1216 + C2289 * C2656 - C2284 * C2661) *
                         C118 +
                     (C2287 * C478 - C2282 * C491 + C2288 * C1217 -
                      C2283 * C1222 + C2289 * C2662 - C2284 * C2665) *
                         C50266) *
                        C50114) *
                       C2085) *
                      C50154 * C50141)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C1669 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C50234) *
                      C50154 * C1020 +
                  ((((C149 - C148) * C118 + (C151 - C150) * C50266) * C107 +
                    ((C153 - C152) * C118 + (C155 - C154) * C50266) * C108 +
                    C186 * C109 + C187 * C110) *
                       C1669 +
                   (((C497 - C496) * C118 + (C499 - C498) * C50266) * C107 +
                    ((C501 - C500) * C118 + (C503 - C502) * C50266) * C108 +
                    ((C505 - C504) * C118 + (C507 - C506) * C50266) * C109 +
                    ((C749 - C750) * C118 + (C751 - C752) * C50266) * C110) *
                       C50234) *
                      C50154 * C1021 +
                  ((C184 * C107 + C185 * C108 +
                    ((C161 - C160) * C118 + (C163 - C162) * C50266) * C109 +
                    ((C164 - C165) * C118 + (C166 - C167) * C50266) * C110) *
                       C1669 +
                   (C757 * C107 + C758 * C108 +
                    ((C750 - C749) * C118 + (C752 - C751) * C50266) * C109 +
                    ((C117 * C740 - C50251 * C741) * C118 +
                     (C117 * C742 - C50251 * C743) * C50266) *
                        C110) *
                       C50234) *
                      C50154 * C1022)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C50251 * C126 - C117 * C119) * C118 +
                     (C50251 * C140 - C117 * C127) * C50266) *
                        C107 +
                    ((C148 - C149) * C118 + (C150 - C151) * C50266) * C108 +
                    C184 * C109 + C185 * C110) *
                       C1669 +
                   (((C117 * C455 - C50251 * C465) * C118 +
                     (C117 * C466 - C50251 * C485) * C50266) *
                        C107 +
                    ((C496 - C497) * C118 + (C498 - C499) * C50266) * C108 +
                    C757 * C109 + C758 * C110) *
                       C50234) *
                      C285 +
                  ((((C117 * C290 - C50251 * C300) * C118 +
                     (C117 * C301 - C50251 * C320) * C50266) *
                        C107 +
                    ((C331 - C332) * C118 + (C333 - C334) * C50266) * C108 +
                    C639 * C109 + C640 * C110) *
                       C1669 +
                   (((C50251 * C893 - C117 * C888) * C118 +
                     (C50251 * C903 - C117 * C894) * C50266) *
                        C107 +
                    ((C909 - C910) * C118 + (C911 - C912) * C50266) * C108 +
                    ((C913 - C914) * C118 + (C915 - C916) * C50266) * C109 +
                    ((C917 - C918) * C118 + (C919 - C920) * C50266) * C110) *
                       C50234) *
                      C286 +
                  ((((C50251 * C308 - C117 * C294) * C118 +
                     (C50251 * C324 - C117 * C309) * C50266) *
                        C107 +
                    ((C343 - C344) * C118 + (C345 - C346) * C50266) * C108 +
                    ((C347 - C348) * C118 + (C349 - C350) * C50266) * C109 +
                    ((C351 - C352) * C118 + (C353 - C354) * C50266) * C110) *
                       C1669 +
                   (((C117 * C1555 - C50251 * C1559) * C118 +
                     (C117 * C1560 - C50251 * C1567) * C50266) *
                        C107 +
                    ((C117 * C1556 - C50251 * C1561) * C118 +
                     (C117 * C1562 - C50251 * C1568) * C50266) *
                        C108 +
                    ((C117 * C1557 - C50251 * C1563) * C118 +
                     (C117 * C1564 - C50251 * C1569) * C50266) *
                        C109 +
                    ((C117 * C1558 - C50251 * C1565) * C118 +
                     (C117 * C1566 - C50251 * C1570) * C50266) *
                        C110) *
                       C50234) *
                      C287) *
                 C50135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C1020 +
                  ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C118 +
                     (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C50266) *
                        C2285 +
                    ((C2303 - C2304 + C2305 - C2306 + C2307 - C2308) * C118 +
                     (C2309 - C2310 + C2311 - C2312 + C2313 - C2314) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C118 +
                     (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C50266) *
                        C2285 +
                    ((C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C118 +
                     (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C1021 +
                  ((((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C118 +
                     (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C50266) *
                        C2285 +
                    ((C2315 - C2316 + C2317 - C2318 + C2319 - C2320) * C118 +
                     (C2321 - C2322 + C2323 - C2324 + C2325 - C2326) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C118 +
                     (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C50266) *
                        C2285 +
                    ((C2287 * C458 - C2282 * C471 + C2288 * C891 -
                      C2283 * C899 + C2289 * C1558 - C2284 * C1565) *
                         C118 +
                     (C2287 * C472 - C2282 * C488 + C2288 * C900 -
                      C2283 * C906 + C2289 * C1566 - C2284 * C1570) *
                         C50266) *
                        C50114) *
                       C50234) *
                      C50154 * C1022)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C2282 * C126 - C2287 * C119 + C2283 * C300 -
                      C2288 * C290 + C2284 * C308 - C2289 * C294) *
                         C118 +
                     (C2282 * C140 - C2287 * C127 + C2283 * C320 -
                      C2288 * C301 + C2284 * C324 - C2289 * C309) *
                         C50266) *
                        C2285 +
                    ((C2291 - C2292 + C2293 - C2294 + C2295 - C2296) * C118 +
                     (C2297 - C2298 + C2299 - C2300 + C2301 - C2302) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2287 * C455 - C2282 * C465 + C2288 * C888 -
                      C2283 * C893 + C2289 * C1555 - C2284 * C1559) *
                         C118 +
                     (C2287 * C466 - C2282 * C485 + C2288 * C894 -
                      C2283 * C903 + C2289 * C1560 - C2284 * C1567) *
                         C50266) *
                        C2285 +
                    ((C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C118 +
                     (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50266) *
                        C50114) *
                       C50234) *
                      C285 +
                  ((((C2287 * C290 - C2282 * C300 + C2288 * C294 -
                      C2283 * C308 + C2289 * C1094 - C2284 * C1098) *
                         C118 +
                     (C2287 * C301 - C2282 * C320 + C2288 * C309 -
                      C2283 * C324 + C2289 * C1099 - C2284 * C1106) *
                         C50266) *
                        C2285 +
                    ((C2485 - C2486 + C2487 - C2488 + C2489 - C2490) * C118 +
                     (C2491 - C2492 + C2493 - C2494 + C2495 - C2496) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2282 * C893 - C2287 * C888 + C2283 * C1559 -
                      C2288 * C1555 + C2284 * C3203 - C2289 * C3200) *
                         C118 +
                     (C2282 * C903 - C2287 * C894 + C2283 * C1567 -
                      C2288 * C1560 + C2284 * C3209 - C2289 * C3204) *
                         C50266) *
                        C2285 +
                    ((C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C118 +
                     (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50266) *
                        C50114) *
                       C50234) *
                      C286 +
                  ((((C2282 * C308 - C2287 * C294 + C2283 * C1098 -
                      C2288 * C1094 + C2284 * C2475 - C2289 * C2472) *
                         C118 +
                     (C2282 * C324 - C2287 * C309 + C2283 * C1106 -
                      C2288 * C1099 + C2284 * C2481 - C2289 * C2476) *
                         C50266) *
                        C2285 +
                    ((C2497 - C2498 + C2499 - C2500 + C2501 - C2502) * C118 +
                     (C2503 - C2504 + C2505 - C2506 + C2507 - C2508) * C50266) *
                        C50114) *
                       C1669 +
                   (((C2287 * C1555 - C2282 * C1559 + C2288 * C3200 -
                      C2283 * C3203 + C2289 * C4116 - C2284 * C4118) *
                         C118 +
                     (C2287 * C1560 - C2282 * C1567 + C2288 * C3204 -
                      C2283 * C3209 + C2289 * C4119 - C2284 * C4122) *
                         C50266) *
                        C2285 +
                    ((C2287 * C1556 - C2282 * C1561 + C2288 * C3201 -
                      C2283 * C3205 + C2289 * C4117 - C2284 * C4120) *
                         C118 +
                     (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 -
                      C2283 * C3210 + C2289 * C4121 - C2284 * C4123) *
                         C50266) *
                        C50114) *
                       C50234) *
                      C287) *
                 C50135) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50170 * C50395 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C50170 * C50206) *
              C50438 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C50170 * C50395 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                C50380 +
            ((C24822 - C24823 + C24824 - C24825 + C24826 - C24827) * C118 +
             (C24828 - C24829 + C24830 - C24831 + C24832 - C24833) * C50266) *
                C50114) *
               C50170 * C50206) *
              C50439 +
          ((((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C118 +
             (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50266) *
                C50380 +
            ((C24324 - C24325 + C24326 - C24327 + C24328 - C24329) * C118 +
             (C24330 - C24331 + C24332 - C24333 + C24334 - C24335) * C50266) *
                C50114) *
               C50170 * C50395 +
           (((C24823 - C24822 + C24825 - C24824 + C24827 - C24826) * C118 +
             (C24829 - C24828 + C24831 - C24830 + C24833 - C24832) * C50266) *
                C50380 +
            ((C24296 * C293 - C50444 * C306 + C24297 * C297 - C50445 * C314 +
              C24298 * C1097 - C24293 * C1104) *
                 C118 +
             (C24296 * C307 - C50444 * C323 + C24297 * C315 - C50445 * C327 +
              C24298 * C1105 - C24293 * C1109) *
                 C50266) *
                C50114) *
               C50170 * C50206) *
              C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
               C24293 * C308 - C24298 * C294) *
                  C118 +
              (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
               C24293 * C324 - C24298 * C309) *
                  C50266) *
                 C50380 +
             ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
              (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                 C50114) *
                C50396 +
            (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
               C24298 * C1555 - C24293 * C1559) *
                  C118 +
              (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
               C24298 * C1560 - C24293 * C1567) *
                  C50266) *
                 C50380 +
             ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
              (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
               C24298 * C1094 - C24293 * C1098) *
                  C118 +
              (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
               C24298 * C1099 - C24293 * C1106) *
                  C50266) *
                 C50380 +
             ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
              (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                 C50114) *
                C50396 +
            (((C50444 * C893 - C24296 * C888 + C50445 * C1559 - C24297 * C1555 +
               C24293 * C3203 - C24298 * C3200) *
                  C118 +
              (C50444 * C903 - C24296 * C894 + C50445 * C1567 - C24297 * C1560 +
               C24293 * C3209 - C24298 * C3204) *
                  C50266) *
                 C50380 +
             ((C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C118 +
              (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C288 +
          (((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
              (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                 C50380 +
             ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
              (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                 C50114) *
                C50396 +
            (((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C118 +
              (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50266) *
                 C50380 +
             ((C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C118 +
              (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
              (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                 C50380 +
             ((C24822 - C24823 + C24824 - C24825 + C24826 - C24827) * C118 +
              (C24828 - C24829 + C24830 - C24831 + C24832 - C24833) * C50266) *
                 C50114) *
                C50396 +
            (((C25187 - C25186 + C25189 - C25188 + C25191 - C25190) * C118 +
              (C25193 - C25192 + C25195 - C25194 + C25197 - C25196) * C50266) *
                 C50380 +
             ((C24296 * C890 - C50444 * C897 + C24297 * C1557 - C50445 * C1563 +
               C24298 * C3202 - C24293 * C3207) *
                  C118 +
              (C24296 * C898 - C50444 * C905 + C24297 * C1564 - C50445 * C1569 +
               C24298 * C3208 - C24293 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50170 * C285 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C50170 * C286 +
           (((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
              C24293 * C2475 - C24298 * C2472) *
                 C118 +
             (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
              C24293 * C2481 - C24298 * C2476) *
                 C50266) *
                C50380 +
            ((C24494 - C24495 + C24496 - C24497 + C24498 - C24499) * C118 +
             (C24500 - C24501 + C24502 - C24503 + C24504 - C24505) * C50266) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C50170 * C285 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                C50380 +
            ((C50444 * C304 - C24296 * C292 + C50445 * C312 - C24297 * C296 +
              C24293 * C1102 - C24298 * C1096) *
                 C118 +
             (C50444 * C322 - C24296 * C305 + C50445 * C326 - C24297 * C313 +
              C24293 * C1108 - C24298 * C1103) *
                 C50266) *
                C50114) *
               C50170 * C286 +
           (((C24495 - C24494 + C24497 - C24496 + C24499 - C24498) * C118 +
             (C24501 - C24500 + C24503 - C24502 + C24505 - C24504) * C50266) *
                C50380 +
            ((C24296 * C296 - C50444 * C312 + C24297 * C1096 - C50445 * C1102 +
              C24298 * C2474 - C24293 * C2479) *
                 C118 +
             (C24296 * C313 - C50444 * C326 + C24297 * C1103 - C50445 * C1108 +
              C24298 * C2480 - C24293 * C2483) *
                 C50266) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C118 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50266) *
               C50380 +
           ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
            (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
               C50380 +
           ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
            (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
               C50114) *
              C50170 * C50154 * C114 +
          (((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C118 +
            (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50266) *
               C50380 +
           ((C24324 - C24325 + C24326 - C24327 + C24328 - C24329) * C118 +
            (C24330 - C24331 + C24332 - C24333 + C24334 - C24335) * C50266) *
               C50114) *
              C50170 * C50154 * C115 +
          (((C24325 - C24324 + C24327 - C24326 + C24329 - C24328) * C118 +
            (C24331 - C24330 + C24333 - C24332 + C24335 - C24334) * C50266) *
               C50380 +
           ((C24296 * C123 - C50444 * C134 + C24297 * C298 - C50445 * C316 +
             C24298 * C299 - C24293 * C318) *
                C118 +
            (C24296 * C135 - C50444 * C144 + C24297 * C317 - C50445 * C328 +
             C24298 * C319 - C24293 * C329) *
                C50266) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C452 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C453 +
           (((C50444 * C473 - C24296 * C459 + C50445 * C1212 - C24297 * C1208 +
              C24293 * C2657 - C24298 * C2654) *
                 C118 +
             (C50444 * C489 - C24296 * C474 + C50445 * C1220 - C24297 * C1213 +
              C24293 * C2663 - C24298 * C2658) *
                 C50266) *
                C50380 +
            ((C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C118 +
             (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50266) *
                C50114) *
               C454) *
              C50154 * C288 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C452 +
           (((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C118 +
             (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50266) *
                C50380 +
            ((C50444 * C469 - C24296 * C457 + C50445 * C897 - C24297 * C890 +
              C24293 * C1563 - C24298 * C1557) *
                 C118 +
             (C50444 * C487 - C24296 * C470 + C50445 * C905 - C24297 * C898 +
              C24293 * C1569 - C24298 * C1564) *
                 C50266) *
                C50114) *
               C453 +
           (((C24665 - C24664 + C24667 - C24666 + C24669 - C24668) * C118 +
             (C24671 - C24670 + C24673 - C24672 + C24675 - C24674) * C50266) *
                C50380 +
            ((C24296 * C461 - C50444 * C477 + C24297 * C1210 - C50445 * C1216 +
              C24298 * C2656 - C24293 * C2661) *
                 C118 +
             (C24296 * C478 - C50444 * C491 + C24297 * C1217 - C50445 * C1222 +
              C24298 * C2662 - C24293 * C2665) *
                 C50266) *
                C50114) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50396 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C50234) *
              C50154 * C50438 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C50396 +
           (((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C118 +
             (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50266) *
                C50380 +
            ((C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C118 +
             (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50266) *
                C50114) *
               C50234) *
              C50154 * C50439 +
          ((((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C118 +
             (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50266) *
                C50380 +
            ((C24324 - C24325 + C24326 - C24327 + C24328 - C24329) * C118 +
             (C24330 - C24331 + C24332 - C24333 + C24334 - C24335) * C50266) *
                C50114) *
               C50396 +
           (((C24981 - C24980 + C24983 - C24982 + C24985 - C24984) * C118 +
             (C24987 - C24986 + C24989 - C24988 + C24991 - C24990) * C50266) *
                C50380 +
            ((C24296 * C458 - C50444 * C471 + C24297 * C891 - C50445 * C899 +
              C24298 * C1558 - C24293 * C1565) *
                 C118 +
             (C24296 * C472 - C50444 * C488 + C24297 * C900 - C50445 * C906 +
              C24298 * C1566 - C24293 * C1570) *
                 C50266) *
                C50114) *
               C50234) *
              C50154 * C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C118 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50266) *
               C50380 +
           ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
            (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
               C50380 +
           ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
            (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
               C50114) *
              C50170 * C50154 * C114 +
          (((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C118 +
            (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50266) *
               C50380 +
           ((C24324 - C24325 + C24326 - C24327 + C24328 - C24329) * C118 +
            (C24330 - C24331 + C24332 - C24333 + C24334 - C24335) * C50266) *
               C50114) *
              C50170 * C50154 * C115 +
          (((C24325 - C24324 + C24327 - C24326 + C24329 - C24328) * C118 +
            (C24331 - C24330 + C24333 - C24332 + C24335 - C24334) * C50266) *
               C50380 +
           ((C24296 * C123 - C50444 * C134 + C24297 * C298 - C50445 * C316 +
             C24298 * C299 - C24293 * C318) *
                C118 +
            (C24296 * C135 - C50444 * C144 + C24297 * C317 - C50445 * C328 +
             C24298 * C319 - C24293 * C329) *
                C50266) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50170 * C285 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C50170 * C286 +
           (((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
              C24293 * C2475 - C24298 * C2472) *
                 C118 +
             (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
              C24293 * C2481 - C24298 * C2476) *
                 C50266) *
                C50380 +
            ((C24494 - C24495 + C24496 - C24497 + C24498 - C24499) * C118 +
             (C24500 - C24501 + C24502 - C24503 + C24504 - C24505) * C50266) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C50170 * C285 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                C50380 +
            ((C50444 * C304 - C24296 * C292 + C50445 * C312 - C24297 * C296 +
              C24293 * C1102 - C24298 * C1096) *
                 C118 +
             (C50444 * C322 - C24296 * C305 + C50445 * C326 - C24297 * C313 +
              C24293 * C1108 - C24298 * C1103) *
                 C50266) *
                C50114) *
               C50170 * C286 +
           (((C24495 - C24494 + C24497 - C24496 + C24499 - C24498) * C118 +
             (C24501 - C24500 + C24503 - C24502 + C24505 - C24504) * C50266) *
                C50380 +
            ((C24296 * C296 - C50444 * C312 + C24297 * C1096 - C50445 * C1102 +
              C24298 * C2474 - C24293 * C2479) *
                 C118 +
             (C24296 * C313 - C50444 * C326 + C24297 * C1103 - C50445 * C1108 +
              C24298 * C2480 - C24293 * C2483) *
                 C50266) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50170 * C50440 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C50170 * C50441 +
           (((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
              C24293 * C2475 - C24298 * C2472) *
                 C118 +
             (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
              C24293 * C2481 - C24298 * C2476) *
                 C50266) *
                C50380 +
            ((C24494 - C24495 + C24496 - C24497 + C24498 - C24499) * C118 +
             (C24500 - C24501 + C24502 - C24503 + C24504 - C24505) * C50266) *
                C50114) *
               C50170 * C1324) *
              C50387 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C50170 * C50440 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                C50380 +
            ((C24822 - C24823 + C24824 - C24825 + C24826 - C24827) * C118 +
             (C24828 - C24829 + C24830 - C24831 + C24832 - C24833) * C50266) *
                C50114) *
               C50170 * C50441 +
           (((C24495 - C24494 + C24497 - C24496 + C24499 - C24498) * C118 +
             (C24501 - C24500 + C24503 - C24502 + C24505 - C24504) * C50266) *
                C50380 +
            ((C24296 * C296 - C50444 * C312 + C24297 * C1096 - C50445 * C1102 +
              C24298 * C2474 - C24293 * C2479) *
                 C118 +
             (C24296 * C313 - C50444 * C326 + C24297 * C1103 - C50445 * C1108 +
              C24298 * C2480 - C24293 * C2483) *
                 C50266) *
                C50114) *
               C50170 * C1324) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50396 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C50234) *
              C50440 +
          ((((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C50396 +
           (((C50444 * C893 - C24296 * C888 + C50445 * C1559 - C24297 * C1555 +
              C24293 * C3203 - C24298 * C3200) *
                 C118 +
             (C50444 * C903 - C24296 * C894 + C50445 * C1567 - C24297 * C1560 +
              C24293 * C3209 - C24298 * C3204) *
                 C50266) *
                C50380 +
            ((C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C118 +
             (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50266) *
                C50114) *
               C50234) *
              C50441 +
          ((((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
              C24293 * C2475 - C24298 * C2472) *
                 C118 +
             (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
              C24293 * C2481 - C24298 * C2476) *
                 C50266) *
                C50380 +
            ((C24494 - C24495 + C24496 - C24497 + C24498 - C24499) * C118 +
             (C24500 - C24501 + C24502 - C24503 + C24504 - C24505) * C50266) *
                C50114) *
               C50396 +
           (((C24296 * C1555 - C50444 * C1559 + C24297 * C3200 -
              C50445 * C3203 + C24298 * C4116 - C24293 * C4118) *
                 C118 +
             (C24296 * C1560 - C50444 * C1567 + C24297 * C3204 -
              C50445 * C3209 + C24298 * C4119 - C24293 * C4122) *
                 C50266) *
                C50380 +
            ((C24296 * C1556 - C50444 * C1561 + C24297 * C3201 -
              C50445 * C3205 + C24298 * C4117 - C24293 * C4120) *
                 C118 +
             (C24296 * C1562 - C50444 * C1568 + C24297 * C3206 -
              C50445 * C3210 + C24298 * C4121 - C24293 * C4123) *
                 C50266) *
                C50114) *
               C50234) *
              C1324) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C118 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50266) *
               C50380 +
           ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
            (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
               C50114) *
              C50170 * C1089 +
          (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C118 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50266) *
               C50380 +
           ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
            (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
               C50114) *
              C50170 * C1090 +
          (((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
             C24293 * C2475 - C24298 * C2472) *
                C118 +
            (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
             C24293 * C2481 - C24298 * C2476) *
                C50266) *
               C50380 +
           ((C24494 - C24495 + C24496 - C24497 + C24498 - C24499) * C118 +
            (C24500 - C24501 + C24502 - C24503 + C24504 - C24505) * C50266) *
               C50114) *
              C50170 * C1091 +
          (((C24296 * C1094 - C50444 * C1098 + C24297 * C2472 - C50445 * C2475 +
             C24298 * C3468 - C24293 * C3470) *
                C118 +
            (C24296 * C1099 - C50444 * C1106 + C24297 * C2476 - C50445 * C2481 +
             C24298 * C3471 - C24293 * C3474) *
                C50266) *
               C50380 +
           ((C24296 * C1095 - C50444 * C1100 + C24297 * C2473 - C50445 * C2477 +
             C24298 * C3469 - C24293 * C3472) *
                C118 +
            (C24296 * C1101 - C50444 * C1107 + C24297 * C2478 - C50445 * C2482 +
             C24298 * C3473 - C24293 * C3475) *
                C50266) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                C50380 +
            ((C24822 - C24823 + C24824 - C24825 + C24826 - C24827) * C118 +
             (C24828 - C24829 + C24830 - C24831 + C24832 - C24833) * C50266) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          ((((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C118 +
             (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50266) *
                C50380 +
            ((C24324 - C24325 + C24326 - C24327 + C24328 - C24329) * C118 +
             (C24330 - C24331 + C24332 - C24333 + C24334 - C24335) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C24823 - C24822 + C24825 - C24824 + C24827 - C24826) * C118 +
             (C24829 - C24828 + C24831 - C24830 + C24833 - C24832) * C50266) *
                C50380 +
            ((C24296 * C293 - C50444 * C306 + C24297 * C297 - C50445 * C314 +
              C24298 * C1097 - C24293 * C1104) *
                 C118 +
             (C24296 * C307 - C50444 * C323 + C24297 * C315 - C50445 * C327 +
              C24298 * C1105 - C24293 * C1109) *
                 C50266) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C452 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C453 +
           (((C50444 * C473 - C24296 * C459 + C50445 * C1212 - C24297 * C1208 +
              C24293 * C2657 - C24298 * C2654) *
                 C118 +
             (C50444 * C489 - C24296 * C474 + C50445 * C1220 - C24297 * C1213 +
              C24293 * C2663 - C24298 * C2658) *
                 C50266) *
                C50380 +
            ((C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C118 +
             (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50266) *
                C50114) *
               C454) *
              C1018 +
          ((((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C452 +
           (((C50444 * C893 - C24296 * C888 + C50445 * C1559 - C24297 * C1555 +
              C24293 * C3203 - C24298 * C3200) *
                 C118 +
             (C50444 * C903 - C24296 * C894 + C50445 * C1567 - C24297 * C1560 +
              C24293 * C3209 - C24298 * C3204) *
                 C50266) *
                C50380 +
            ((C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C118 +
             (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50266) *
                C50114) *
               C453 +
           (((C24296 * C1208 - C50444 * C1212 + C24297 * C2654 -
              C50445 * C2657 + C24298 * C3622 - C24293 * C3624) *
                 C118 +
             (C24296 * C1213 - C50444 * C1220 + C24297 * C2658 -
              C50445 * C2663 + C24298 * C3625 - C24293 * C3628) *
                 C50266) *
                C50380 +
            ((C24296 * C1209 - C50444 * C1214 + C24297 * C2655 -
              C50445 * C2659 + C24298 * C3623 - C24293 * C3626) *
                 C118 +
             (C24296 * C1215 - C50444 * C1221 + C24297 * C2660 -
              C50445 * C2664 + C24298 * C3627 - C24293 * C3629) *
                 C50266) *
                C50114) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
               C24293 * C308 - C24298 * C294) *
                  C118 +
              (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
               C24293 * C324 - C24298 * C309) *
                  C50266) *
                 C50380 +
             ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
              (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                 C50114) *
                C50396 +
            (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
               C24298 * C1555 - C24293 * C1559) *
                  C118 +
              (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
               C24298 * C1560 - C24293 * C1567) *
                  C50266) *
                 C50380 +
             ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
              (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
               C24298 * C1094 - C24293 * C1098) *
                  C118 +
              (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
               C24298 * C1099 - C24293 * C1106) *
                  C50266) *
                 C50380 +
             ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
              (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                 C50114) *
                C50396 +
            (((C50444 * C893 - C24296 * C888 + C50445 * C1559 - C24297 * C1555 +
               C24293 * C3203 - C24298 * C3200) *
                  C118 +
              (C50444 * C903 - C24296 * C894 + C50445 * C1567 - C24297 * C1560 +
               C24293 * C3209 - C24298 * C3204) *
                  C50266) *
                 C50380 +
             ((C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C118 +
              (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
              (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                 C50380 +
             ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
              (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                 C50114) *
                C50396 +
            (((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C118 +
              (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50266) *
                 C50380 +
             ((C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C118 +
              (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50266) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
              (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                 C50380 +
             ((C24822 - C24823 + C24824 - C24825 + C24826 - C24827) * C118 +
              (C24828 - C24829 + C24830 - C24831 + C24832 - C24833) * C50266) *
                 C50114) *
                C50396 +
            (((C25187 - C25186 + C25189 - C25188 + C25191 - C25190) * C118 +
              (C25193 - C25192 + C25195 - C25194 + C25197 - C25196) * C50266) *
                 C50380 +
             ((C24296 * C890 - C50444 * C897 + C24297 * C1557 - C50445 * C1563 +
               C24298 * C3202 - C24293 * C3207) *
                  C118 +
              (C24296 * C898 - C50444 * C905 + C24297 * C1564 - C50445 * C1569 +
               C24298 * C3208 - C24293 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                C50380 +
            ((C24822 - C24823 + C24824 - C24825 + C24826 - C24827) * C118 +
             (C24828 - C24829 + C24830 - C24831 + C24832 - C24833) * C50266) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          ((((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C118 +
             (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50266) *
                C50380 +
            ((C24324 - C24325 + C24326 - C24327 + C24328 - C24329) * C118 +
             (C24330 - C24331 + C24332 - C24333 + C24334 - C24335) * C50266) *
                C50114) *
               C50170 * C1018 +
           (((C24823 - C24822 + C24825 - C24824 + C24827 - C24826) * C118 +
             (C24829 - C24828 + C24831 - C24830 + C24833 - C24832) * C50266) *
                C50380 +
            ((C24296 * C293 - C50444 * C306 + C24297 * C297 - C50445 * C314 +
              C24298 * C1097 - C24293 * C1104) *
                 C118 +
             (C24296 * C307 - C50444 * C323 + C24297 * C315 - C50445 * C327 +
              C24298 * C1105 - C24293 * C1109) *
                 C50266) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C118 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50266) *
               C50380 +
           ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
            (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
               C50114) *
              C50170 * C1089 +
          (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C118 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50266) *
               C50380 +
           ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
            (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
               C50114) *
              C50170 * C1090 +
          (((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
             C24293 * C2475 - C24298 * C2472) *
                C118 +
            (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
             C24293 * C2481 - C24298 * C2476) *
                C50266) *
               C50380 +
           ((C24494 - C24495 + C24496 - C24497 + C24498 - C24499) * C118 +
            (C24500 - C24501 + C24502 - C24503 + C24504 - C24505) * C50266) *
               C50114) *
              C50170 * C1091 +
          (((C24296 * C1094 - C50444 * C1098 + C24297 * C2472 - C50445 * C2475 +
             C24298 * C3468 - C24293 * C3470) *
                C118 +
            (C24296 * C1099 - C50444 * C1106 + C24297 * C2476 - C50445 * C2481 +
             C24298 * C3471 - C24293 * C3474) *
                C50266) *
               C50380 +
           ((C24296 * C1095 - C50444 * C1100 + C24297 * C2473 - C50445 * C2477 +
             C24298 * C3469 - C24293 * C3472) *
                C118 +
            (C24296 * C1101 - C50444 * C1107 + C24297 * C2478 - C50445 * C2482 +
             C24298 * C3473 - C24293 * C3475) *
                C50266) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
               C24293 * C308 - C24298 * C294) *
                  C118 +
              (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
               C24293 * C324 - C24298 * C309) *
                  C50266) *
                 C50380 +
             ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
              (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                 C50114) *
                C1669 +
            (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
               C24298 * C1555 - C24293 * C1559) *
                  C118 +
              (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
               C24298 * C1560 - C24293 * C1567) *
                  C50266) *
                 C50380 +
             ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
              (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
               C24298 * C1094 - C24293 * C1098) *
                  C118 +
              (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
               C24298 * C1099 - C24293 * C1106) *
                  C50266) *
                 C50380 +
             ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
              (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                 C50114) *
                C1669 +
            (((C50444 * C893 - C24296 * C888 + C50445 * C1559 - C24297 * C1555 +
               C24293 * C3203 - C24298 * C3200) *
                  C118 +
              (C50444 * C903 - C24296 * C894 + C50445 * C1567 - C24297 * C1560 +
               C24293 * C3209 - C24298 * C3204) *
                  C50266) *
                 C50380 +
             ((C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C118 +
              (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
              (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                 C50380 +
             ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
              (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                 C50114) *
                C1669 +
            (((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C118 +
              (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50266) *
                 C50380 +
             ((C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C118 +
              (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50266) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C118 +
              (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50266) *
                 C50380 +
             ((C24822 - C24823 + C24824 - C24825 + C24826 - C24827) * C118 +
              (C24828 - C24829 + C24830 - C24831 + C24832 - C24833) * C50266) *
                 C50114) *
                C1669 +
            (((C25187 - C25186 + C25189 - C25188 + C25191 - C25190) * C118 +
              (C25193 - C25192 + C25195 - C25194 + C25197 - C25196) * C50266) *
                 C50380 +
             ((C24296 * C890 - C50444 * C897 + C24297 * C1557 - C50445 * C1563 +
               C24298 * C3202 - C24293 * C3207) *
                  C118 +
              (C24296 * C898 - C50444 * C905 + C24297 * C1564 - C50445 * C1569 +
               C24298 * C3208 - C24293 * C3211) *
                  C50266) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50442 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C50443 +
           (((C50444 * C473 - C24296 * C459 + C50445 * C1212 - C24297 * C1208 +
              C24293 * C2657 - C24298 * C2654) *
                 C118 +
             (C50444 * C489 - C24296 * C474 + C50445 * C1220 - C24297 * C1213 +
              C24293 * C2663 - C24298 * C2658) *
                 C50266) *
                C50380 +
            ((C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C118 +
             (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50266) *
                C50114) *
               C2085) *
              C50395 +
          ((((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C50442 +
           (((C50444 * C893 - C24296 * C888 + C50445 * C1559 - C24297 * C1555 +
              C24293 * C3203 - C24298 * C3200) *
                 C118 +
             (C50444 * C903 - C24296 * C894 + C50445 * C1567 - C24297 * C1560 +
              C24293 * C3209 - C24298 * C3204) *
                 C50266) *
                C50380 +
            ((C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C118 +
             (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50266) *
                C50114) *
               C50443 +
           (((C24296 * C1208 - C50444 * C1212 + C24297 * C2654 -
              C50445 * C2657 + C24298 * C3622 - C24293 * C3624) *
                 C118 +
             (C24296 * C1213 - C50444 * C1220 + C24297 * C2658 -
              C50445 * C2663 + C24298 * C3625 - C24293 * C3628) *
                 C50266) *
                C50380 +
            ((C24296 * C1209 - C50444 * C1214 + C24297 * C2655 -
              C50445 * C2659 + C24298 * C3623 - C24293 * C3626) *
                 C118 +
             (C24296 * C1215 - C50444 * C1221 + C24297 * C2660 -
              C50445 * C2664 + C24298 * C3627 - C24293 * C3629) *
                 C50266) *
                C50114) *
               C2085) *
              C50206) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C1669 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C50234) *
              C285 +
          ((((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C1669 +
           (((C50444 * C893 - C24296 * C888 + C50445 * C1559 - C24297 * C1555 +
              C24293 * C3203 - C24298 * C3200) *
                 C118 +
             (C50444 * C903 - C24296 * C894 + C50445 * C1567 - C24297 * C1560 +
              C24293 * C3209 - C24298 * C3204) *
                 C50266) *
                C50380 +
            ((C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C118 +
             (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50266) *
                C50114) *
               C50234) *
              C286 +
          ((((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
              C24293 * C2475 - C24298 * C2472) *
                 C118 +
             (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
              C24293 * C2481 - C24298 * C2476) *
                 C50266) *
                C50380 +
            ((C24494 - C24495 + C24496 - C24497 + C24498 - C24499) * C118 +
             (C24500 - C24501 + C24502 - C24503 + C24504 - C24505) * C50266) *
                C50114) *
               C1669 +
           (((C24296 * C1555 - C50444 * C1559 + C24297 * C3200 -
              C50445 * C3203 + C24298 * C4116 - C24293 * C4118) *
                 C118 +
             (C24296 * C1560 - C50444 * C1567 + C24297 * C3204 -
              C50445 * C3209 + C24298 * C4119 - C24293 * C4122) *
                 C50266) *
                C50380 +
            ((C24296 * C1556 - C50444 * C1561 + C24297 * C3201 -
              C50445 * C3205 + C24298 * C4117 - C24293 * C4120) *
                 C118 +
             (C24296 * C1562 - C50444 * C1568 + C24297 * C3206 -
              C50445 * C3210 + C24298 * C4121 - C24293 * C4123) *
                 C50266) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C1669 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C1669 +
           (((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C118 +
             (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50266) *
                C50380 +
            ((C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C118 +
             (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50266) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          ((((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C118 +
             (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50266) *
                C50380 +
            ((C24324 - C24325 + C24326 - C24327 + C24328 - C24329) * C118 +
             (C24330 - C24331 + C24332 - C24333 + C24334 - C24335) * C50266) *
                C50114) *
               C1669 +
           (((C24981 - C24980 + C24983 - C24982 + C24985 - C24984) * C118 +
             (C24987 - C24986 + C24989 - C24988 + C24991 - C24990) * C50266) *
                C50380 +
            ((C24296 * C458 - C50444 * C471 + C24297 * C891 - C50445 * C899 +
              C24298 * C1558 - C24293 * C1565) *
                 C118 +
             (C24296 * C472 - C50444 * C488 + C24297 * C900 - C50445 * C906 +
              C24298 * C1566 - C24293 * C1570) *
                 C50266) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C118 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50266) *
               C50380 +
           ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
            (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
               C50114) *
              C1835 +
          (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
             C24298 * C1555 - C24293 * C1559) *
                C118 +
            (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
             C24298 * C1560 - C24293 * C1567) *
                C50266) *
               C50380 +
           ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
               C50114) *
              C1836 +
          (((C50444 * C473 - C24296 * C459 + C50445 * C1212 - C24297 * C1208 +
             C24293 * C2657 - C24298 * C2654) *
                C118 +
            (C50444 * C489 - C24296 * C474 + C50445 * C1220 - C24297 * C1213 +
             C24293 * C2663 - C24298 * C2658) *
                C50266) *
               C50380 +
           ((C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C118 +
            (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50266) *
               C50114) *
              C1837 +
          (((C24296 * C1839 - C50444 * C1843 + C24297 * C4514 - C50445 * C4518 +
             C24298 * C4515 - C24293 * C4519) *
                C118 +
            (C24296 * C1844 - C50444 * C1851 + C24297 * C4520 - C50445 * C4526 +
             C24298 * C4521 - C24293 * C4527) *
                C50266) *
               C50380 +
           ((C24296 * C1840 - C50444 * C1845 + C24297 * C4516 - C50445 * C4522 +
             C24298 * C4517 - C24293 * C4523) *
                C118 +
            (C24296 * C1846 - C50444 * C1852 + C24297 * C4524 - C50445 * C4528 +
             C24298 * C4525 - C24293 * C4529) *
                C50266) *
               C50114) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C50442 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C50443 +
           (((C50444 * C473 - C24296 * C459 + C50445 * C1212 - C24297 * C1208 +
              C24293 * C2657 - C24298 * C2654) *
                 C118 +
             (C50444 * C489 - C24296 * C474 + C50445 * C1220 - C24297 * C1213 +
              C24293 * C2663 - C24298 * C2658) *
                 C50266) *
                C50380 +
            ((C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C118 +
             (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50266) *
                C50114) *
               C2085) *
              C50154 * C50387 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C50442 +
           (((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C118 +
             (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50266) *
                C50380 +
            ((C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C118 +
             (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50266) *
                C50114) *
               C50443 +
           (((C24665 - C24664 + C24667 - C24666 + C24669 - C24668) * C118 +
             (C24671 - C24670 + C24673 - C24672 + C24675 - C24674) * C50266) *
                C50380 +
            ((C24296 * C461 - C50444 * C477 + C24297 * C1210 - C50445 * C1216 +
              C24298 * C2656 - C24293 * C2661) *
                 C118 +
             (C24296 * C478 - C50444 * C491 + C24297 * C1217 - C50445 * C1222 +
              C24298 * C2662 - C24293 * C2665) *
                 C50266) *
                C50114) *
               C2085) *
              C50154 * C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C1669 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C118 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50266) *
                C50380 +
            ((C24312 - C24313 + C24314 - C24315 + C24316 - C24317) * C118 +
             (C24318 - C24319 + C24320 - C24321 + C24322 - C24323) * C50266) *
                C50114) *
               C1669 +
           (((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C118 +
             (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50266) *
                C50380 +
            ((C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C118 +
             (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50266) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          ((((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C118 +
             (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50266) *
                C50380 +
            ((C24324 - C24325 + C24326 - C24327 + C24328 - C24329) * C118 +
             (C24330 - C24331 + C24332 - C24333 + C24334 - C24335) * C50266) *
                C50114) *
               C1669 +
           (((C24981 - C24980 + C24983 - C24982 + C24985 - C24984) * C118 +
             (C24987 - C24986 + C24989 - C24988 + C24991 - C24990) * C50266) *
                C50380 +
            ((C24296 * C458 - C50444 * C471 + C24297 * C891 - C50445 * C899 +
              C24298 * C1558 - C24293 * C1565) *
                 C118 +
             (C24296 * C472 - C50444 * C488 + C24297 * C900 - C50445 * C906 +
              C24298 * C1566 - C24293 * C1570) *
                 C50266) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C118 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50266) *
                C50380 +
            ((C24300 - C24301 + C24302 - C24303 + C24304 - C24305) * C118 +
             (C24306 - C24307 + C24308 - C24309 + C24310 - C24311) * C50266) *
                C50114) *
               C1669 +
           (((C24296 * C455 - C50444 * C465 + C24297 * C888 - C50445 * C893 +
              C24298 * C1555 - C24293 * C1559) *
                 C118 +
             (C24296 * C466 - C50444 * C485 + C24297 * C894 - C50445 * C903 +
              C24298 * C1560 - C24293 * C1567) *
                 C50266) *
                C50380 +
            ((C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C118 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50266) *
                C50114) *
               C50234) *
              C285 +
          ((((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C118 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50266) *
                C50380 +
            ((C24482 - C24483 + C24484 - C24485 + C24486 - C24487) * C118 +
             (C24488 - C24489 + C24490 - C24491 + C24492 - C24493) * C50266) *
                C50114) *
               C1669 +
           (((C50444 * C893 - C24296 * C888 + C50445 * C1559 - C24297 * C1555 +
              C24293 * C3203 - C24298 * C3200) *
                 C118 +
             (C50444 * C903 - C24296 * C894 + C50445 * C1567 - C24297 * C1560 +
              C24293 * C3209 - C24298 * C3204) *
                 C50266) *
                C50380 +
            ((C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C118 +
             (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50266) *
                C50114) *
               C50234) *
              C286 +
          ((((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
              C24293 * C2475 - C24298 * C2472) *
                 C118 +
             (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
              C24293 * C2481 - C24298 * C2476) *
                 C50266) *
                C50380 +
            ((C24494 - C24495 + C24496 - C24497 + C24498 - C24499) * C118 +
             (C24500 - C24501 + C24502 - C24503 + C24504 - C24505) * C50266) *
                C50114) *
               C1669 +
           (((C24296 * C1555 - C50444 * C1559 + C24297 * C3200 -
              C50445 * C3203 + C24298 * C4116 - C24293 * C4118) *
                 C118 +
             (C24296 * C1560 - C50444 * C1567 + C24297 * C3204 -
              C50445 * C3209 + C24298 * C4119 - C24293 * C4122) *
                 C50266) *
                C50380 +
            ((C24296 * C1556 - C50444 * C1561 + C24297 * C3201 -
              C50445 * C3205 + C24298 * C4117 - C24293 * C4120) *
                 C118 +
             (C24296 * C1562 - C50444 * C1568 + C24297 * C3206 -
              C50445 * C3210 + C24298 * C4121 - C24293 * C4123) *
                 C50266) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C50170 * C50395 +
           ((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C24296 * C888 - C50444 * C893 + C24297 * C1555 - C50445 * C1559 +
             C24298 * C3200 - C24293 * C3203) *
                C10682 +
            (C24296 * C894 - C50444 * C903 + C24297 * C1560 - C50445 * C1567 +
             C24298 * C3204 - C24293 * C3209) *
                C50330) *
               C50109 * C50170 * C50206) *
              C50438 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C50170 * C50395 +
           ((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
            (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
            (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
            (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
               C50109 * C50170 * C50206) *
              C50439 +
          (((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C10681 +
            (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50409 +
            (C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C10682 +
            (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50330) *
               C50109 * C50170 * C50395 +
           ((C24823 - C24822 + C24825 - C24824 + C24827 - C24826) * C10681 +
            (C24829 - C24828 + C24831 - C24830 + C24833 - C24832) * C50409 +
            (C24296 * C890 - C50444 * C897 + C24297 * C1557 - C50445 * C1563 +
             C24298 * C3202 - C24293 * C3207) *
                C10682 +
            (C24296 * C898 - C50444 * C905 + C24297 * C1564 - C50445 * C1569 +
             C24298 * C3208 - C24293 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C10681 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50409 +
             (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
             (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
                C50109 * C50396 +
            ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
             (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
             (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
             (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C10681 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50409 +
             (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
             (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
                C50109 * C50396 +
            ((C31387 - C31386 + C31389 - C31388 + C31391 - C31390) * C10681 +
             (C31393 - C31392 + C31395 - C31394 + C31397 - C31396) * C50409 +
             (C50444 * C1212 - C24296 * C1208 + C50445 * C2657 -
              C24297 * C2654 + C24293 * C3624 - C24298 * C3622) *
                 C10682 +
             (C50444 * C1220 - C24296 * C1213 + C50445 * C2663 -
              C24297 * C2658 + C24293 * C3628 - C24298 * C3625) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C288 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
             (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
                C50109 * C50396 +
            ((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C10681 +
             (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50409 +
             (C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C10682 +
             (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
             (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
             (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
                C50109 * C50396 +
            ((C25187 - C25186 + C25189 - C25188 + C25191 - C25190) * C10681 +
             (C25193 - C25192 + C25195 - C25194 + C25197 - C25196) * C50409 +
             (C24296 * C1209 - C50444 * C1214 + C24297 * C2655 -
              C50445 * C2659 + C24298 * C3623 - C24293 * C3626) *
                 C10682 +
             (C24296 * C1215 - C50444 * C1221 + C24297 * C2660 -
              C50445 * C2664 + C24298 * C3627 - C24293 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C50444 * C465 - C24296 * C455 + C50445 * C893 - C24297 * C888 +
             C24293 * C1559 - C24298 * C1555) *
                C10682 +
            (C50444 * C485 - C24296 * C466 + C50445 * C903 - C24297 * C894 +
             C24293 * C1567 - C24298 * C1560) *
                C50330) *
               C50109 * C50170 * C285 +
           ((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C24296 * C888 - C50444 * C893 + C24297 * C1555 - C50445 * C1559 +
             C24298 * C3200 - C24293 * C3203) *
                C10682 +
            (C24296 * C894 - C50444 * C903 + C24297 * C1560 - C50445 * C1567 +
             C24298 * C3204 - C24293 * C3209) *
                C50330) *
               C50109 * C50170 * C286 +
           ((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
             C24293 * C2475 - C24298 * C2472) *
                C10681 +
            (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
             C24293 * C2481 - C24298 * C2476) *
                C50409 +
            (C50444 * C1559 - C24296 * C1555 + C50445 * C3203 - C24297 * C3200 +
             C24293 * C4118 - C24298 * C4116) *
                C10682 +
            (C50444 * C1567 - C24296 * C1560 + C50445 * C3209 - C24297 * C3204 +
             C24293 * C4122 - C24298 * C4119) *
                C50330) *
               C50109 * C50170 * C287) *
              C288 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C50170 * C285 +
           ((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
            (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
            (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
            (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
               C50109 * C50170 * C286 +
           ((C24495 - C24494 + C24497 - C24496 + C24499 - C24498) * C10681 +
            (C24501 - C24500 + C24503 - C24502 + C24505 - C24504) * C50409 +
            (C24296 * C1556 - C50444 * C1561 + C24297 * C3201 - C50445 * C3205 +
             C24298 * C4117 - C24293 * C4120) *
                C10682 +
            (C24296 * C1562 - C50444 * C1568 + C24297 * C3206 - C50445 * C3210 +
             C24298 * C4121 - C24293 * C4123) *
                C50330) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
            C24293 * C308 - C24298 * C294) *
               C10681 +
           (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
            C24293 * C324 - C24298 * C309) *
               C50409 +
           (C50444 * C465 - C24296 * C455 + C50445 * C893 - C24297 * C888 +
            C24293 * C1559 - C24298 * C1555) *
               C10682 +
           (C50444 * C485 - C24296 * C466 + C50445 * C903 - C24297 * C894 +
            C24293 * C1567 - C24298 * C1560) *
               C50330) *
              C50109 * C50170 * C50154 * C113 +
          ((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
           (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
           (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
           (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
              C50109 * C50170 * C50154 * C114 +
          ((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C10681 +
           (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50409 +
           (C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C10682 +
           (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50330) *
              C50109 * C50170 * C50154 * C115 +
          ((C24325 - C24324 + C24327 - C24326 + C24329 - C24328) * C10681 +
           (C24331 - C24330 + C24333 - C24332 + C24335 - C24334) * C50409 +
           (C24296 * C458 - C50444 * C471 + C24297 * C891 - C50445 * C899 +
            C24298 * C1558 - C24293 * C1565) *
               C10682 +
           (C24296 * C472 - C50444 * C488 + C24297 * C900 - C50445 * C906 +
            C24298 * C1566 - C24293 * C1570) *
               C50330) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C452 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C453 +
           ((C30889 - C30888 + C30891 - C30890 + C30893 - C30892) * C10681 +
            (C30895 - C30894 + C30897 - C30896 + C30899 - C30898) * C50409 +
            (C50444 * C1843 - C24296 * C1839 + C50445 * C4518 - C24297 * C4514 +
             C24293 * C4519 - C24298 * C4515) *
                C10682 +
            (C50444 * C1851 - C24296 * C1844 + C50445 * C4526 - C24297 * C4520 +
             C24293 * C4527 - C24298 * C4521) *
                C50330) *
               C50109 * C454) *
              C50154 * C288 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C452 +
           ((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C10681 +
            (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50409 +
            (C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C10682 +
            (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50330) *
               C50109 * C453 +
           ((C24665 - C24664 + C24667 - C24666 + C24669 - C24668) * C10681 +
            (C24671 - C24670 + C24673 - C24672 + C24675 - C24674) * C50409 +
            (C24296 * C1840 - C50444 * C1845 + C24297 * C4516 - C50445 * C4522 +
             C24298 * C4517 - C24293 * C4523) *
                C10682 +
            (C24296 * C1846 - C50444 * C1852 + C24297 * C4524 - C50445 * C4528 +
             C24298 * C4525 - C24293 * C4529) *
                C50330) *
               C50109 * C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C50396 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C50234) *
              C50154 * C50438 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C50396 +
           ((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C10681 +
            (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50409 +
            (C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C10682 +
            (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50330) *
               C50109 * C50234) *
              C50154 * C50439 +
          (((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C10681 +
            (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50409 +
            (C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C10682 +
            (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50330) *
               C50109 * C50396 +
           ((C24981 - C24980 + C24983 - C24982 + C24985 - C24984) * C10681 +
            (C24987 - C24986 + C24989 - C24988 + C24991 - C24990) * C50409 +
            (C24296 * C461 - C50444 * C477 + C24297 * C1210 - C50445 * C1216 +
             C24298 * C2656 - C24293 * C2661) *
                C10682 +
            (C24296 * C478 - C50444 * C491 + C24297 * C1217 - C50445 * C1222 +
             C24298 * C2662 - C24293 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
            C24293 * C308 - C24298 * C294) *
               C10681 +
           (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
            C24293 * C324 - C24298 * C309) *
               C50409 +
           (C50444 * C465 - C24296 * C455 + C50445 * C893 - C24297 * C888 +
            C24293 * C1559 - C24298 * C1555) *
               C10682 +
           (C50444 * C485 - C24296 * C466 + C50445 * C903 - C24297 * C894 +
            C24293 * C1567 - C24298 * C1560) *
               C50330) *
              C50109 * C50170 * C50154 * C113 +
          ((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
           (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
           (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
           (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
              C50109 * C50170 * C50154 * C114 +
          ((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C10681 +
           (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50409 +
           (C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C10682 +
           (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50330) *
              C50109 * C50170 * C50154 * C115 +
          ((C24325 - C24324 + C24327 - C24326 + C24329 - C24328) * C10681 +
           (C24331 - C24330 + C24333 - C24332 + C24335 - C24334) * C50409 +
           (C24296 * C458 - C50444 * C471 + C24297 * C891 - C50445 * C899 +
            C24298 * C1558 - C24293 * C1565) *
               C10682 +
           (C24296 * C472 - C50444 * C488 + C24297 * C900 - C50445 * C906 +
            C24298 * C1566 - C24293 * C1570) *
               C50330) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C50444 * C465 - C24296 * C455 + C50445 * C893 - C24297 * C888 +
             C24293 * C1559 - C24298 * C1555) *
                C10682 +
            (C50444 * C485 - C24296 * C466 + C50445 * C903 - C24297 * C894 +
             C24293 * C1567 - C24298 * C1560) *
                C50330) *
               C50109 * C50170 * C285 +
           ((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C24296 * C888 - C50444 * C893 + C24297 * C1555 - C50445 * C1559 +
             C24298 * C3200 - C24293 * C3203) *
                C10682 +
            (C24296 * C894 - C50444 * C903 + C24297 * C1560 - C50445 * C1567 +
             C24298 * C3204 - C24293 * C3209) *
                C50330) *
               C50109 * C50170 * C286 +
           ((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
             C24293 * C2475 - C24298 * C2472) *
                C10681 +
            (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
             C24293 * C2481 - C24298 * C2476) *
                C50409 +
            (C50444 * C1559 - C24296 * C1555 + C50445 * C3203 - C24297 * C3200 +
             C24293 * C4118 - C24298 * C4116) *
                C10682 +
            (C50444 * C1567 - C24296 * C1560 + C50445 * C3209 - C24297 * C3204 +
             C24293 * C4122 - C24298 * C4119) *
                C50330) *
               C50109 * C50170 * C287) *
              C288 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C50170 * C285 +
           ((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
            (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
            (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
            (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
               C50109 * C50170 * C286 +
           ((C24495 - C24494 + C24497 - C24496 + C24499 - C24498) * C10681 +
            (C24501 - C24500 + C24503 - C24502 + C24505 - C24504) * C50409 +
            (C24296 * C1556 - C50444 * C1561 + C24297 * C3201 - C50445 * C3205 +
             C24298 * C4117 - C24293 * C4120) *
                C10682 +
            (C24296 * C1562 - C50444 * C1568 + C24297 * C3206 - C50445 * C3210 +
             C24298 * C4121 - C24293 * C4123) *
                C50330) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C50170 * C50440 +
           ((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
            (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
               C50109 * C50170 * C50441 +
           ((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
             C24293 * C2475 - C24298 * C2472) *
                C10681 +
            (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
             C24293 * C2481 - C24298 * C2476) *
                C50409 +
            (C50444 * C1559 - C24296 * C1555 + C50445 * C3203 - C24297 * C3200 +
             C24293 * C4118 - C24298 * C4116) *
                C10682 +
            (C50444 * C1567 - C24296 * C1560 + C50445 * C3209 - C24297 * C3204 +
             C24293 * C4122 - C24298 * C4119) *
                C50330) *
               C50109 * C50170 * C1324) *
              C50387 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C50170 * C50440 +
           ((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
            (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
            (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
            (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
               C50109 * C50170 * C50441 +
           ((C24495 - C24494 + C24497 - C24496 + C24499 - C24498) * C10681 +
            (C24501 - C24500 + C24503 - C24502 + C24505 - C24504) * C50409 +
            (C24296 * C1556 - C50444 * C1561 + C24297 * C3201 - C50445 * C3205 +
             C24298 * C4117 - C24293 * C4120) *
                C10682 +
            (C24296 * C1562 - C50444 * C1568 + C24297 * C3206 - C50445 * C3210 +
             C24298 * C4121 - C24293 * C4123) *
                C50330) *
               C50109 * C50170 * C1324) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C50396 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C50234) *
              C50440 +
          (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
            (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
               C50109 * C50396 +
           ((C31387 - C31386 + C31389 - C31388 + C31391 - C31390) * C10681 +
            (C31393 - C31392 + C31395 - C31394 + C31397 - C31396) * C50409 +
            (C31788 - C31789 + C31790 - C31791 + C31792 - C31793) * C10682 +
            (C31794 - C31795 + C31796 - C31797 + C31798 - C31799) * C50330) *
               C50109 * C50234) *
              C50441 +
          (((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
             C24293 * C2475 - C24298 * C2472) *
                C10681 +
            (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
             C24293 * C2481 - C24298 * C2476) *
                C50409 +
            (C32286 - C32287 + C32288 - C32289 + C32290 - C32291) * C10682 +
            (C32292 - C32293 + C32294 - C32295 + C32296 - C32297) * C50330) *
               C50109 * C50396 +
           ((C32287 - C32286 + C32289 - C32288 + C32291 - C32290) * C10681 +
            (C32293 - C32292 + C32295 - C32294 + C32297 - C32296) * C50409 +
            (C24296 * C2654 - C50444 * C2657 + C24297 * C3622 - C50445 * C3624 +
             C24298 * C20519 - C24293 * C20520) *
                C10682 +
            (C24296 * C2658 - C50444 * C2663 + C24297 * C3625 - C50445 * C3628 +
             C24298 * C20521 - C24293 * C20522) *
                C50330) *
               C50109 * C50234) *
              C1324) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
            C24293 * C308 - C24298 * C294) *
               C10681 +
           (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
            C24293 * C324 - C24298 * C309) *
               C50409 +
           (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
           (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
              C50109 * C50170 * C1089 +
          ((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
            C24298 * C1094 - C24293 * C1098) *
               C10681 +
           (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
            C24298 * C1099 - C24293 * C1106) *
               C50409 +
           (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
           (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
              C50109 * C50170 * C1090 +
          ((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
            C24293 * C2475 - C24298 * C2472) *
               C10681 +
           (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
            C24293 * C2481 - C24298 * C2476) *
               C50409 +
           (C50444 * C1559 - C24296 * C1555 + C50445 * C3203 - C24297 * C3200 +
            C24293 * C4118 - C24298 * C4116) *
               C10682 +
           (C50444 * C1567 - C24296 * C1560 + C50445 * C3209 - C24297 * C3204 +
            C24293 * C4122 - C24298 * C4119) *
               C50330) *
              C50109 * C50170 * C1091 +
          ((C24296 * C1094 - C50444 * C1098 + C24297 * C2472 - C50445 * C2475 +
            C24298 * C3468 - C24293 * C3470) *
               C10681 +
           (C24296 * C1099 - C50444 * C1106 + C24297 * C2476 - C50445 * C2481 +
            C24298 * C3471 - C24293 * C3474) *
               C50409 +
           (C24296 * C3200 - C50444 * C3203 + C24297 * C4116 - C50445 * C4118 +
            C24298 * C20849 - C24293 * C20850) *
               C10682 +
           (C24296 * C3204 - C50444 * C3209 + C24297 * C4119 - C50445 * C4122 +
            C24298 * C20851 - C24293 * C20852) *
               C50330) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C50170 * C1018 +
           ((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
            (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C50170 * C1018 +
           ((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
            (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
            (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
            (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C10681 +
            (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50409 +
            (C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C10682 +
            (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50330) *
               C50109 * C50170 * C1018 +
           ((C24823 - C24822 + C24825 - C24824 + C24827 - C24826) * C10681 +
            (C24829 - C24828 + C24831 - C24830 + C24833 - C24832) * C50409 +
            (C24296 * C890 - C50444 * C897 + C24297 * C1557 - C50445 * C1563 +
             C24298 * C3202 - C24293 * C3207) *
                C10682 +
            (C24296 * C898 - C50444 * C905 + C24297 * C1564 - C50445 * C1569 +
             C24298 * C3208 - C24293 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C452 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C453 +
           ((C30889 - C30888 + C30891 - C30890 + C30893 - C30892) * C10681 +
            (C30895 - C30894 + C30897 - C30896 + C30899 - C30898) * C50409 +
            (C50444 * C1843 - C24296 * C1839 + C50445 * C4518 - C24297 * C4514 +
             C24293 * C4519 - C24298 * C4515) *
                C10682 +
            (C50444 * C1851 - C24296 * C1844 + C50445 * C4526 - C24297 * C4520 +
             C24293 * C4527 - C24298 * C4521) *
                C50330) *
               C50109 * C454) *
              C1018 +
          (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
            (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
               C50109 * C452 +
           ((C31387 - C31386 + C31389 - C31388 + C31391 - C31390) * C10681 +
            (C31393 - C31392 + C31395 - C31394 + C31397 - C31396) * C50409 +
            (C31788 - C31789 + C31790 - C31791 + C31792 - C31793) * C10682 +
            (C31794 - C31795 + C31796 - C31797 + C31798 - C31799) * C50330) *
               C50109 * C453 +
           ((C31789 - C31788 + C31791 - C31790 + C31793 - C31792) * C10681 +
            (C31795 - C31794 + C31797 - C31796 + C31799 - C31798) * C50409 +
            (C24296 * C4514 - C50444 * C4518 + C24297 * C4515 - C50445 * C4519 +
             C24298 * C21115 - C24293 * C21116) *
                C10682 +
            (C24296 * C4520 - C50444 * C4526 + C24297 * C4521 - C50445 * C4527 +
             C24298 * C21117 - C24293 * C21118) *
                C50330) *
               C50109 * C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C10681 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50409 +
             (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
             (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
                C50109 * C50396 +
            ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
             (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
             (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
             (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
                C50109 * C50234) *
               C1018 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C10681 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50409 +
             (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
             (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
                C50109 * C50396 +
            ((C31387 - C31386 + C31389 - C31388 + C31391 - C31390) * C10681 +
             (C31393 - C31392 + C31395 - C31394 + C31397 - C31396) * C50409 +
             (C31788 - C31789 + C31790 - C31791 + C31792 - C31793) * C10682 +
             (C31794 - C31795 + C31796 - C31797 + C31798 - C31799) * C50330) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
             (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
                C50109 * C50396 +
            ((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C10681 +
             (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50409 +
             (C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C10682 +
             (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50330) *
                C50109 * C50234) *
               C1018 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
             (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
             (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
                C50109 * C50396 +
            ((C25187 - C25186 + C25189 - C25188 + C25191 - C25190) * C10681 +
             (C25193 - C25192 + C25195 - C25194 + C25197 - C25196) * C50409 +
             (C24296 * C1209 - C50444 * C1214 + C24297 * C2655 -
              C50445 * C2659 + C24298 * C3623 - C24293 * C3626) *
                 C10682 +
             (C24296 * C1215 - C50444 * C1221 + C24297 * C2660 -
              C50445 * C2664 + C24298 * C3627 - C24293 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C50170 * C1018 +
           ((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
            (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C50170 * C1018 +
           ((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
            (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
            (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
            (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C10681 +
            (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50409 +
            (C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C10682 +
            (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50330) *
               C50109 * C50170 * C1018 +
           ((C24823 - C24822 + C24825 - C24824 + C24827 - C24826) * C10681 +
            (C24829 - C24828 + C24831 - C24830 + C24833 - C24832) * C50409 +
            (C24296 * C890 - C50444 * C897 + C24297 * C1557 - C50445 * C1563 +
             C24298 * C3202 - C24293 * C3207) *
                C10682 +
            (C24296 * C898 - C50444 * C905 + C24297 * C1564 - C50445 * C1569 +
             C24298 * C3208 - C24293 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
            C24293 * C308 - C24298 * C294) *
               C10681 +
           (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
            C24293 * C324 - C24298 * C309) *
               C50409 +
           (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
           (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
              C50109 * C50170 * C1089 +
          ((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
            C24298 * C1094 - C24293 * C1098) *
               C10681 +
           (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
            C24298 * C1099 - C24293 * C1106) *
               C50409 +
           (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
           (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
              C50109 * C50170 * C1090 +
          ((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
            C24293 * C2475 - C24298 * C2472) *
               C10681 +
           (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
            C24293 * C2481 - C24298 * C2476) *
               C50409 +
           (C50444 * C1559 - C24296 * C1555 + C50445 * C3203 - C24297 * C3200 +
            C24293 * C4118 - C24298 * C4116) *
               C10682 +
           (C50444 * C1567 - C24296 * C1560 + C50445 * C3209 - C24297 * C3204 +
            C24293 * C4122 - C24298 * C4119) *
               C50330) *
              C50109 * C50170 * C1091 +
          ((C24296 * C1094 - C50444 * C1098 + C24297 * C2472 - C50445 * C2475 +
            C24298 * C3468 - C24293 * C3470) *
               C10681 +
           (C24296 * C1099 - C50444 * C1106 + C24297 * C2476 - C50445 * C2481 +
            C24298 * C3471 - C24293 * C3474) *
               C50409 +
           (C24296 * C3200 - C50444 * C3203 + C24297 * C4116 - C50445 * C4118 +
            C24298 * C20849 - C24293 * C20850) *
               C10682 +
           (C24296 * C3204 - C50444 * C3209 + C24297 * C4119 - C50445 * C4122 +
            C24298 * C20851 - C24293 * C20852) *
               C50330) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
              C24293 * C308 - C24298 * C294) *
                 C10681 +
             (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
              C24293 * C324 - C24298 * C309) *
                 C50409 +
             (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
             (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
                C50109 * C1669 +
            ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
             (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
             (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
             (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
              C24298 * C1094 - C24293 * C1098) *
                 C10681 +
             (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
              C24298 * C1099 - C24293 * C1106) *
                 C50409 +
             (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
             (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
                C50109 * C1669 +
            ((C31387 - C31386 + C31389 - C31388 + C31391 - C31390) * C10681 +
             (C31393 - C31392 + C31395 - C31394 + C31397 - C31396) * C50409 +
             (C31788 - C31789 + C31790 - C31791 + C31792 - C31793) * C10682 +
             (C31794 - C31795 + C31796 - C31797 + C31798 - C31799) * C50330) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
             (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
             (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
             (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
                C50109 * C1669 +
            ((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C10681 +
             (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50409 +
             (C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C10682 +
             (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C24483 - C24482 + C24485 - C24484 + C24487 - C24486) * C10681 +
             (C24489 - C24488 + C24491 - C24490 + C24493 - C24492) * C50409 +
             (C25186 - C25187 + C25188 - C25189 + C25190 - C25191) * C10682 +
             (C25192 - C25193 + C25194 - C25195 + C25196 - C25197) * C50330) *
                C50109 * C1669 +
            ((C25187 - C25186 + C25189 - C25188 + C25191 - C25190) * C10681 +
             (C25193 - C25192 + C25195 - C25194 + C25197 - C25196) * C50409 +
             (C24296 * C1209 - C50444 * C1214 + C24297 * C2655 -
              C50445 * C2659 + C24298 * C3623 - C24293 * C3626) *
                 C10682 +
             (C24296 * C1215 - C50444 * C1221 + C24297 * C2660 -
              C50445 * C2664 + C24298 * C3627 - C24293 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C50442 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C50443 +
           ((C30889 - C30888 + C30891 - C30890 + C30893 - C30892) * C10681 +
            (C30895 - C30894 + C30897 - C30896 + C30899 - C30898) * C50409 +
            (C32688 - C32689 + C32690 - C32691 + C32692 - C32693) * C10682 +
            (C32694 - C32695 + C32696 - C32697 + C32698 - C32699) * C50330) *
               C50109 * C2085) *
              C50395 +
          (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
            (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
               C50109 * C50442 +
           ((C31387 - C31386 + C31389 - C31388 + C31391 - C31390) * C10681 +
            (C31393 - C31392 + C31395 - C31394 + C31397 - C31396) * C50409 +
            (C31788 - C31789 + C31790 - C31791 + C31792 - C31793) * C10682 +
            (C31794 - C31795 + C31796 - C31797 + C31798 - C31799) * C50330) *
               C50109 * C50443 +
           ((C31789 - C31788 + C31791 - C31790 + C31793 - C31792) * C10681 +
            (C31795 - C31794 + C31797 - C31796 + C31799 - C31798) * C50409 +
            (C24296 * C4514 - C50444 * C4518 + C24297 * C4515 - C50445 * C4519 +
             C24298 * C21115 - C24293 * C21116) *
                C10682 +
            (C24296 * C4520 - C50444 * C4526 + C24297 * C4521 - C50445 * C4527 +
             C24298 * C21117 - C24293 * C21118) *
                C50330) *
               C50109 * C2085) *
              C50206) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C1669 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C50234) *
              C285 +
          (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
            (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
               C50109 * C1669 +
           ((C31387 - C31386 + C31389 - C31388 + C31391 - C31390) * C10681 +
            (C31393 - C31392 + C31395 - C31394 + C31397 - C31396) * C50409 +
            (C31788 - C31789 + C31790 - C31791 + C31792 - C31793) * C10682 +
            (C31794 - C31795 + C31796 - C31797 + C31798 - C31799) * C50330) *
               C50109 * C50234) *
              C286 +
          (((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
             C24293 * C2475 - C24298 * C2472) *
                C10681 +
            (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
             C24293 * C2481 - C24298 * C2476) *
                C50409 +
            (C32286 - C32287 + C32288 - C32289 + C32290 - C32291) * C10682 +
            (C32292 - C32293 + C32294 - C32295 + C32296 - C32297) * C50330) *
               C50109 * C1669 +
           ((C32287 - C32286 + C32289 - C32288 + C32291 - C32290) * C10681 +
            (C32293 - C32292 + C32295 - C32294 + C32297 - C32296) * C50409 +
            (C24296 * C2654 - C50444 * C2657 + C24297 * C3622 - C50445 * C3624 +
             C24298 * C20519 - C24293 * C20520) *
                C10682 +
            (C24296 * C2658 - C50444 * C2663 + C24297 * C3625 - C50445 * C3628 +
             C24298 * C20521 - C24293 * C20522) *
                C50330) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C1669 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C1669 +
           ((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C10681 +
            (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50409 +
            (C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C10682 +
            (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50330) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C10681 +
            (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50409 +
            (C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C10682 +
            (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50330) *
               C50109 * C1669 +
           ((C24981 - C24980 + C24983 - C24982 + C24985 - C24984) * C10681 +
            (C24987 - C24986 + C24989 - C24988 + C24991 - C24990) * C50409 +
            (C24296 * C461 - C50444 * C477 + C24297 * C1210 - C50445 * C1216 +
             C24298 * C2656 - C24293 * C2661) *
                C10682 +
            (C24296 * C478 - C50444 * C491 + C24297 * C1217 - C50445 * C1222 +
             C24298 * C2662 - C24293 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
            C24293 * C308 - C24298 * C294) *
               C10681 +
           (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
            C24293 * C324 - C24298 * C309) *
               C50409 +
           (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
           (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
              C50109 * C1835 +
          ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
           (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
           (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
           (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
              C50109 * C1836 +
          ((C30889 - C30888 + C30891 - C30890 + C30893 - C30892) * C10681 +
           (C30895 - C30894 + C30897 - C30896 + C30899 - C30898) * C50409 +
           (C32688 - C32689 + C32690 - C32691 + C32692 - C32693) * C10682 +
           (C32694 - C32695 + C32696 - C32697 + C32698 - C32699) * C50330) *
              C50109 * C1837 +
          ((C32689 - C32688 + C32691 - C32690 + C32693 - C32692) * C10681 +
           (C32695 - C32694 + C32697 - C32696 + C32699 - C32698) * C50409 +
           (C24296 * C5424 - C50444 * C5427 + C24297 * C6384 - C50445 * C6386 +
            C24298 * C22779 - C24293 * C22780) *
               C10682 +
           (C24296 * C5428 - C50444 * C5433 + C24297 * C6387 - C50445 * C6390 +
            C24298 * C22781 - C24293 * C22782) *
               C50330) *
              C50109 * C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C50442 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C50443 +
           ((C30889 - C30888 + C30891 - C30890 + C30893 - C30892) * C10681 +
            (C30895 - C30894 + C30897 - C30896 + C30899 - C30898) * C50409 +
            (C32688 - C32689 + C32690 - C32691 + C32692 - C32693) * C10682 +
            (C32694 - C32695 + C32696 - C32697 + C32698 - C32699) * C50330) *
               C50109 * C2085) *
              C50154 * C50387 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C50442 +
           ((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C10681 +
            (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50409 +
            (C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C10682 +
            (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50330) *
               C50109 * C50443 +
           ((C24665 - C24664 + C24667 - C24666 + C24669 - C24668) * C10681 +
            (C24671 - C24670 + C24673 - C24672 + C24675 - C24674) * C50409 +
            (C24296 * C1840 - C50444 * C1845 + C24297 * C4516 - C50445 * C4522 +
             C24298 * C4517 - C24293 * C4523) *
                C10682 +
            (C24296 * C1846 - C50444 * C1852 + C24297 * C4524 - C50445 * C4528 +
             C24298 * C4525 - C24293 * C4529) *
                C50330) *
               C50109 * C2085) *
              C50154 * C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C1669 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C24301 - C24300 + C24303 - C24302 + C24305 - C24304) * C10681 +
            (C24307 - C24306 + C24309 - C24308 + C24311 - C24310) * C50409 +
            (C24652 - C24653 + C24654 - C24655 + C24656 - C24657) * C10682 +
            (C24658 - C24659 + C24660 - C24661 + C24662 - C24663) * C50330) *
               C50109 * C1669 +
           ((C24653 - C24652 + C24655 - C24654 + C24657 - C24656) * C10681 +
            (C24659 - C24658 + C24661 - C24660 + C24663 - C24662) * C50409 +
            (C24664 - C24665 + C24666 - C24667 + C24668 - C24669) * C10682 +
            (C24670 - C24671 + C24672 - C24673 + C24674 - C24675) * C50330) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C24313 - C24312 + C24315 - C24314 + C24317 - C24316) * C10681 +
            (C24319 - C24318 + C24321 - C24320 + C24323 - C24322) * C50409 +
            (C24980 - C24981 + C24982 - C24983 + C24984 - C24985) * C10682 +
            (C24986 - C24987 + C24988 - C24989 + C24990 - C24991) * C50330) *
               C50109 * C1669 +
           ((C24981 - C24980 + C24983 - C24982 + C24985 - C24984) * C10681 +
            (C24987 - C24986 + C24989 - C24988 + C24991 - C24990) * C50409 +
            (C24296 * C461 - C50444 * C477 + C24297 * C1210 - C50445 * C1216 +
             C24298 * C2656 - C24293 * C2661) *
                C10682 +
            (C24296 * C478 - C50444 * C491 + C24297 * C1217 - C50445 * C1222 +
             C24298 * C2662 - C24293 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50444 * C126 - C24296 * C119 + C50445 * C300 - C24297 * C290 +
             C24293 * C308 - C24298 * C294) *
                C10681 +
            (C50444 * C140 - C24296 * C127 + C50445 * C320 - C24297 * C301 +
             C24293 * C324 - C24298 * C309) *
                C50409 +
            (C30876 - C30877 + C30878 - C30879 + C30880 - C30881) * C10682 +
            (C30882 - C30883 + C30884 - C30885 + C30886 - C30887) * C50330) *
               C50109 * C1669 +
           ((C30877 - C30876 + C30879 - C30878 + C30881 - C30880) * C10681 +
            (C30883 - C30882 + C30885 - C30884 + C30887 - C30886) * C50409 +
            (C30888 - C30889 + C30890 - C30891 + C30892 - C30893) * C10682 +
            (C30894 - C30895 + C30896 - C30897 + C30898 - C30899) * C50330) *
               C50109 * C50234) *
              C285 +
          (((C24296 * C290 - C50444 * C300 + C24297 * C294 - C50445 * C308 +
             C24298 * C1094 - C24293 * C1098) *
                C10681 +
            (C24296 * C301 - C50444 * C320 + C24297 * C309 - C50445 * C324 +
             C24298 * C1099 - C24293 * C1106) *
                C50409 +
            (C31386 - C31387 + C31388 - C31389 + C31390 - C31391) * C10682 +
            (C31392 - C31393 + C31394 - C31395 + C31396 - C31397) * C50330) *
               C50109 * C1669 +
           ((C31387 - C31386 + C31389 - C31388 + C31391 - C31390) * C10681 +
            (C31393 - C31392 + C31395 - C31394 + C31397 - C31396) * C50409 +
            (C31788 - C31789 + C31790 - C31791 + C31792 - C31793) * C10682 +
            (C31794 - C31795 + C31796 - C31797 + C31798 - C31799) * C50330) *
               C50109 * C50234) *
              C286 +
          (((C50444 * C308 - C24296 * C294 + C50445 * C1098 - C24297 * C1094 +
             C24293 * C2475 - C24298 * C2472) *
                C10681 +
            (C50444 * C324 - C24296 * C309 + C50445 * C1106 - C24297 * C1099 +
             C24293 * C2481 - C24298 * C2476) *
                C50409 +
            (C32286 - C32287 + C32288 - C32289 + C32290 - C32291) * C10682 +
            (C32292 - C32293 + C32294 - C32295 + C32296 - C32297) * C50330) *
               C50109 * C1669 +
           ((C32287 - C32286 + C32289 - C32288 + C32291 - C32290) * C10681 +
            (C32293 - C32292 + C32295 - C32294 + C32297 - C32296) * C50409 +
            (C24296 * C2654 - C50444 * C2657 + C24297 * C3622 - C50445 * C3624 +
             C24298 * C20519 - C24293 * C20520) *
                C10682 +
            (C24296 * C2658 - C50444 * C2663 + C24297 * C3625 - C50445 * C3628 +
             C24298 * C20521 - C24293 * C20522) *
                C50330) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C50395 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C50206) *
              C50438 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C50395 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C50206) *
              C50439 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C50170 * C50395 +
           ((C19727 * C292 - C19722 * C304 + C19728 * C296 - C19723 * C312 +
             C19729 * C1096 - C19724 * C1102 + C19730 * C2474 -
             C19725 * C2479) *
                C118 +
            (C19727 * C305 - C19722 * C322 + C19728 * C313 - C19723 * C326 +
             C19729 * C1103 - C19724 * C1108 + C19730 * C2480 -
             C19725 * C2483) *
                C50266) *
               C50109 * C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C50395 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50170 * C50206) *
              C50438 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C50395 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C17519 - C17520 + C17521 - C17522) * C118 +
             (C17523 - C17524 + C17525 - C17526) * C50266) *
                C16959) *
               C50170 * C50206) *
              C50439 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C50170 * C50395 +
           (C17531 * C16957 +
            ((C17520 - C17519 + C17522 - C17521) * C118 +
             (C17524 - C17523 + C17526 - C17525) * C50266) *
                C16958 +
            ((C16960 * C298 - C16955 * C316 + C16961 * C299 - C50302 * C318) *
                 C118 +
             (C16960 * C317 - C16955 * C328 + C16961 * C319 - C50302 * C329) *
                 C50266) *
                C16959) *
               C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C50170 * C50395 +
           ((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C16960 * C888 - C16955 * C893 + C16961 * C1555 - C50302 * C1559) *
                C5118 +
            (C16960 * C894 - C16955 * C903 + C16961 * C1560 - C50302 * C1567) *
                C5115 +
            (C16960 * C1208 - C16955 * C1212 + C16961 * C2654 -
             C50302 * C2657) *
                C5119 +
            (C16960 * C1213 - C16955 * C1220 + C16961 * C2658 -
             C50302 * C2663) *
                C5116) *
               C50109 * C50170 * C50206) *
              C50438 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C50170 * C50395 +
           ((C17160 - C17159 + C17162 - C17161) * C5117 +
            (C17164 - C17163 + C17166 - C17165) * C5114 +
            (C17889 - C17890 + C17891 - C17892) * C5118 +
            (C17893 - C17894 + C17895 - C17896) * C5115 +
            (C16955 * C1214 - C16960 * C1209 + C50302 * C2659 -
             C16961 * C2655) *
                C5119 +
            (C16955 * C1221 - C16960 * C1215 + C50302 * C2664 -
             C16961 * C2660) *
                C5116) *
               C50109 * C50170 * C50206) *
              C50439 +
          ((C17003 * C5117 + C17004 * C5114 +
            (C17346 - C17345 + C17348 - C17347) * C5118 +
            (C17350 - C17349 + C17352 - C17351) * C5115 +
            (C17361 - C17362 + C17363 - C17364) * C5119 +
            (C17365 - C17366 + C17367 - C17368) * C5116) *
               C50109 * C50170 * C50395 +
           (C17527 * C5117 + C17528 * C5114 +
            (C17898 - C17897 + C17900 - C17899) * C5118 +
            (C17902 - C17901 + C17904 - C17903) * C5115 +
            (C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
             C50302 * C2661) *
                C5119 +
            (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
             C50302 * C2665) *
                C5116) *
               C50109 * C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
              C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                 C118 +
             (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
              C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                 C50266) *
                C50109 * C50396 +
            ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
              C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
              C19725 * C3203) *
                 C118 +
             (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
              C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
              C19725 * C3209) *
                 C50266) *
                C50109 * C50234) *
               C50395 +
           (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
              C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
              C19725 * C2475) *
                 C118 +
             (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
              C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
              C19725 * C2481) *
                 C50266) *
                C50109 * C50396 +
            ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
              C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
              C19730 * C4116) *
                 C118 +
             (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
              C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
              C19730 * C4119) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C288 +
          ((((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
              C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                 C118 +
             (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
              C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                 C50266) *
                C50109 * C50396 +
            ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
              C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
              C19730 * C3201) *
                 C118 +
             (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
              C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
              C19730 * C3206) *
                 C50266) *
                C50109 * C50234) *
               C50395 +
           (((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
              C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
              C19730 * C2473) *
                 C118 +
             (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
              C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
              C19730 * C2478) *
                 C50266) *
                C50109 * C50396 +
            ((C19727 * C889 - C19722 * C895 + C19728 * C1556 - C19723 * C1561 +
              C19729 * C3201 - C19724 * C3205 + C19730 * C4117 -
              C19725 * C4120) *
                 C118 +
             (C19727 * C896 - C19722 * C904 + C19728 * C1562 - C19723 * C1568 +
              C19729 * C3206 - C19724 * C3210 + C19730 * C4121 -
              C19725 * C4123) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C118 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50266) *
                 C16957 +
             ((C16963 - C16964 + C16965 - C16966) * C118 +
              (C16967 - C16968 + C16969 - C16970) * C50266) *
                 C16958 +
             C17011 * C16959) *
                C50396 +
            (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                  C118 +
              (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                  C50266) *
                 C16957 +
             ((C17337 - C17338 + C17339 - C17340) * C118 +
              (C17341 - C17342 + C17343 - C17344) * C50266) *
                 C16958 +
             C17694 * C16959) *
                C50234) *
               C50395 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C118 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50266) *
                 C16957 +
             ((C17159 - C17160 + C17161 - C17162) * C118 +
              (C17163 - C17164 + C17165 - C17166) * C50266) *
                 C16958 +
             C17531 * C16959) *
                C50396 +
            (((C16955 * C893 - C16960 * C888 + C50302 * C1559 -
               C16961 * C1555) *
                  C118 +
              (C16955 * C903 - C16960 * C894 + C50302 * C1567 -
               C16961 * C1560) *
                  C50266) *
                 C16957 +
             ((C17889 - C17890 + C17891 - C17892) * C118 +
              (C17893 - C17894 + C17895 - C17896) * C50266) *
                 C16958 +
             ((C17897 - C17898 + C17899 - C17900) * C118 +
              (C17901 - C17902 + C17903 - C17904) * C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C288 +
          (((((C16964 - C16963 + C16966 - C16965) * C118 +
              (C16968 - C16967 + C16970 - C16969) * C50266) *
                 C16957 +
             ((C16972 - C16971 + C16974 - C16973) * C118 +
              (C16976 - C16975 + C16978 - C16977) * C50266) *
                 C16958 +
             C17012 * C16959) *
                C50396 +
            (((C17338 - C17337 + C17340 - C17339) * C118 +
              (C17342 - C17341 + C17344 - C17343) * C50266) *
                 C16957 +
             ((C17346 - C17345 + C17348 - C17347) * C118 +
              (C17350 - C17349 + C17352 - C17351) * C50266) *
                 C16958 +
             ((C17682 - C17683 + C17684 - C17685) * C118 +
              (C17686 - C17687 + C17688 - C17689) * C50266) *
                 C16959) *
                C50234) *
               C50395 +
           ((((C17160 - C17159 + C17162 - C17161) * C118 +
              (C17164 - C17163 + C17166 - C17165) * C50266) *
                 C16957 +
             ((C17168 - C17167 + C17170 - C17169) * C118 +
              (C17172 - C17171 + C17174 - C17173) * C50266) *
                 C16958 +
             ((C17519 - C17520 + C17521 - C17522) * C118 +
              (C17523 - C17524 + C17525 - C17526) * C50266) *
                 C16959) *
                C50396 +
            (((C17890 - C17889 + C17892 - C17891) * C118 +
              (C17894 - C17893 + C17896 - C17895) * C50266) *
                 C16957 +
             ((C17898 - C17897 + C17900 - C17899) * C118 +
              (C17902 - C17901 + C17904 - C17903) * C50266) *
                 C16958 +
             ((C16960 * C891 - C16955 * C899 + C16961 * C1558 -
               C50302 * C1565) *
                  C118 +
              (C16960 * C900 - C16955 * C906 + C16961 * C1566 -
               C50302 * C1570) *
                  C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C5117 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C5114 +
             (C21836 - C21837 + C21838 - C21839) * C5118 +
             (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
             C21879 * C5116) *
                C50109 * C50396 +
            ((C21837 - C21836 + C21839 - C21838) * C5117 +
             (C21841 - C21840 + C21843 - C21842) * C5114 +
             (C21845 - C21844 + C21847 - C21846) * C5118 +
             (C21849 - C21848 + C21851 - C21850) * C5115 +
             (C21852 - C21853 + C21854 - C21855) * C5119 +
             (C21856 - C21857 + C21858 - C21859) * C5116) *
                C50109 * C50234) *
               C50395 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C5117 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C5114 +
             (C22366 - C22367 + C22368 - C22369) * C5118 +
             (C22370 - C22371 + C22372 - C22373) * C5115 +
             (C22374 - C22375 + C22376 - C22377) * C5119 +
             (C22378 - C22379 + C22380 - C22381) * C5116) *
                C50109 * C50396 +
            ((C22367 - C22366 + C22369 - C22368) * C5117 +
             (C22371 - C22370 + C22373 - C22372) * C5114 +
             (C22375 - C22374 + C22377 - C22376) * C5118 +
             (C22379 - C22378 + C22381 - C22380) * C5115 +
             (C16955 * C4518 - C16960 * C4514 + C50302 * C4519 -
              C16961 * C4515) *
                 C5119 +
             (C16955 * C4526 - C16960 * C4520 + C50302 * C4527 -
              C16961 * C4521) *
                 C5116) *
                C50109 * C50234) *
               C50206) *
              C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C5117 +
             (C16968 - C16967 + C16970 - C16969) * C5114 +
             (C17337 - C17338 + C17339 - C17340) * C5118 +
             (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
             C21877 * C5116) *
                C50109 * C50396 +
            ((C17338 - C17337 + C17340 - C17339) * C5117 +
             (C17342 - C17341 + C17344 - C17343) * C5114 +
             (C17353 - C17354 + C17355 - C17356) * C5118 +
             (C17357 - C17358 + C17359 - C17360) * C5115 +
             (C21864 - C21865 + C21866 - C21867) * C5119 +
             (C21868 - C21869 + C21870 - C21871) * C5116) *
                C50109 * C50234) *
               C50395 +
           (((C17160 - C17159 + C17162 - C17161) * C5117 +
             (C17164 - C17163 + C17166 - C17165) * C5114 +
             (C17889 - C17890 + C17891 - C17892) * C5118 +
             (C17893 - C17894 + C17895 - C17896) * C5115 +
             (C22382 - C22383 + C22384 - C22385) * C5119 +
             (C22386 - C22387 + C22388 - C22389) * C5116) *
                C50109 * C50396 +
            ((C17890 - C17889 + C17892 - C17891) * C5117 +
             (C17894 - C17893 + C17896 - C17895) * C5114 +
             (C22383 - C22382 + C22385 - C22384) * C5118 +
             (C22387 - C22386 + C22389 - C22388) * C5115 +
             (C16960 * C4516 - C16955 * C4522 + C16961 * C4517 -
              C50302 * C4523) *
                 C5119 +
             (C16960 * C4524 - C16955 * C4528 + C16961 * C4525 -
              C50302 * C4529) *
                 C5116) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16955 * C126 - C16960 * C119 + C50302 * C300 -
                 C16961 * C290) *
                    C118 +
                (C16955 * C140 - C16960 * C127 + C50302 * C320 -
                 C16961 * C301) *
                    C50266) *
                   C16957 +
               ((C16963 - C16964 + C16965 - C16966) * C118 +
                (C16967 - C16968 + C16969 - C16970) * C50266) *
                   C16958 +
               C17011 * C16959) *
                  C50170 * C50154 * C113 +
              (((C16964 - C16963 + C16966 - C16965) * C118 +
                (C16968 - C16967 + C16970 - C16969) * C50266) *
                   C16957 +
               ((C16972 - C16971 + C16974 - C16973) * C118 +
                (C16976 - C16975 + C16978 - C16977) * C50266) *
                   C16958 +
               C17012 * C16959) *
                  C50170 * C50154 * C114 +
              (C17011 * C16957 +
               ((C16980 - C16979 + C16982 - C16981) * C118 +
                (C16984 - C16983 + C16986 - C16985) * C50266) *
                   C16958 +
               ((C16987 - C16988 + C16989 - C16990) * C118 +
                (C16991 - C16992 + C16993 - C16994) * C50266) *
                   C16959) *
                  C50170 * C50154 * C115 +
              (C17012 * C16957 +
               ((C16988 - C16987 + C16990 - C16989) * C118 +
                (C16992 - C16991 + C16994 - C16993) * C50266) *
                   C16958 +
               ((C16960 * C124 - C16955 * C136 + C16961 * C622 -
                 C50302 * C623) *
                    C118 +
                (C16960 * C137 - C16955 * C145 + C16961 * C624 -
                 C50302 * C625) *
                    C50266) *
                   C16959) *
                  C50170 * C50154 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C16955 * C126 - C16960 * C119 + C50302 * C300 -
                  C16961 * C290) *
                     C118 +
                 (C16955 * C140 - C16960 * C127 + C50302 * C320 -
                  C16961 * C301) *
                     C50266) *
                    C16957 +
                ((C16963 - C16964 + C16965 - C16966) * C118 +
                 (C16967 - C16968 + C16969 - C16970) * C50266) *
                    C16958 +
                C17011 * C16959) *
                   C50170 * C285 +
               (((C16960 * C290 - C16955 * C300 + C16961 * C294 -
                  C50302 * C308) *
                     C118 +
                 (C16960 * C301 - C16955 * C320 + C16961 * C309 -
                  C50302 * C324) *
                     C50266) *
                    C16957 +
                ((C17159 - C17160 + C17161 - C17162) * C118 +
                 (C17163 - C17164 + C17165 - C17166) * C50266) *
                    C16958 +
                ((C17167 - C17168 + C17169 - C17170) * C118 +
                 (C17171 - C17172 + C17173 - C17174) * C50266) *
                    C16959) *
                   C50170 * C286 +
               (((C16955 * C308 - C16960 * C294 + C50302 * C1098 -
                  C16961 * C1094) *
                     C118 +
                 (C16955 * C324 - C16960 * C309 + C50302 * C1106 -
                  C16961 * C1099) *
                     C50266) *
                    C16957 +
                ((C17175 - C17176 + C17177 - C17178) * C118 +
                 (C17179 - C17180 + C17181 - C17182) * C50266) *
                    C16958 +
                ((C17183 - C17184 + C17185 - C17186) * C118 +
                 (C17187 - C17188 + C17189 - C17190) * C50266) *
                    C16959) *
                   C50170 * C287) *
                  C288 +
              ((((C16964 - C16963 + C16966 - C16965) * C118 +
                 (C16968 - C16967 + C16970 - C16969) * C50266) *
                    C16957 +
                ((C16972 - C16971 + C16974 - C16973) * C118 +
                 (C16976 - C16975 + C16978 - C16977) * C50266) *
                    C16958 +
                C17012 * C16959) *
                   C50170 * C285 +
               (((C17160 - C17159 + C17162 - C17161) * C118 +
                 (C17164 - C17163 + C17166 - C17165) * C50266) *
                    C16957 +
                ((C17168 - C17167 + C17170 - C17169) * C118 +
                 (C17172 - C17171 + C17174 - C17173) * C50266) *
                    C16958 +
                ((C16955 * C306 - C16960 * C293 + C50302 * C314 -
                  C16961 * C297) *
                     C118 +
                 (C16955 * C323 - C16960 * C307 + C50302 * C327 -
                  C16961 * C315) *
                     C50266) *
                    C16959) *
                   C50170 * C286 +
               (((C17176 - C17175 + C17178 - C17177) * C118 +
                 (C17180 - C17179 + C17182 - C17181) * C50266) *
                    C16957 +
                ((C17184 - C17183 + C17186 - C17185) * C118 +
                 (C17188 - C17187 + C17190 - C17189) * C50266) *
                    C16958 +
                ((C16960 * C297 - C16955 * C314 + C16961 * C1097 -
                  C50302 * C1104) *
                     C118 +
                 (C16960 * C315 - C16955 * C327 + C16961 * C1105 -
                  C50302 * C1109) *
                     C50266) *
                    C16959) *
                   C50170 * C287) *
                  C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C452 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            ((C17345 - C17346 + C17347 - C17348) * C118 +
             (C17349 - C17350 + C17351 - C17352) * C50266) *
                C16959) *
               C453 +
           (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                 C118 +
             (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                 C50266) *
                C16957 +
            ((C17353 - C17354 + C17355 - C17356) * C118 +
             (C17357 - C17358 + C17359 - C17360) * C50266) *
                C16958 +
            ((C17361 - C17362 + C17363 - C17364) * C118 +
             (C17365 - C17366 + C17367 - C17368) * C50266) *
                C16959) *
               C454) *
              C50154 * C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C452 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C16955 * C471 - C16960 * C458 + C50302 * C899 - C16961 * C891) *
                 C118 +
             (C16955 * C488 - C16960 * C472 + C50302 * C906 - C16961 * C900) *
                 C50266) *
                C16959) *
               C453 +
           (((C17354 - C17353 + C17356 - C17355) * C118 +
             (C17358 - C17357 + C17360 - C17359) * C50266) *
                C16957 +
            ((C17362 - C17361 + C17364 - C17363) * C118 +
             (C17366 - C17365 + C17368 - C17367) * C50266) *
                C16958 +
            ((C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
                 C118 +
             (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
                 C50266) *
                C16959) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C50170 * C50154 * C113 +
          ((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
            C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
               C118 +
           (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
            C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
               C50266) *
              C50109 * C50170 * C50154 * C114 +
          ((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
            C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
               C118 +
           (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
            C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
               C50266) *
              C50109 * C50170 * C50154 * C115 +
          ((C19727 * C122 - C19722 * C132 + C19728 * C293 - C19723 * C306 +
            C19729 * C297 - C19724 * C314 + C19730 * C1097 - C19725 * C1104) *
               C118 +
           (C19727 * C133 - C19722 * C143 + C19728 * C307 - C19723 * C323 +
            C19729 * C315 - C19724 * C327 + C19730 * C1105 - C19725 * C1109) *
               C50266) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C285 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C286 +
           ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C50170 * C287) *
              C288 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C285 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C286 +
           ((C19727 * C295 - C19722 * C310 + C19728 * C1095 - C19723 * C1100 +
             C19729 * C2473 - C19724 * C2477 + C19730 * C3469 -
             C19725 * C3472) *
                C118 +
            (C19727 * C311 - C19722 * C325 + C19728 * C1101 - C19723 * C1107 +
             C19729 * C2478 - C19724 * C2482 + C19730 * C3473 -
             C19725 * C3475) *
                C50266) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C452 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C453 +
           ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
             C19724 * C2657 - C19729 * C2654 + C19725 * C3624 -
             C19730 * C3622) *
                C118 +
            (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
             C19724 * C2663 - C19729 * C2658 + C19725 * C3628 -
             C19730 * C3625) *
                C50266) *
               C50109 * C454) *
              C50154 * C288 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C452 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C453 +
           ((C19727 * C460 - C19722 * C475 + C19728 * C1209 - C19723 * C1214 +
             C19729 * C2655 - C19724 * C2659 + C19730 * C3623 -
             C19725 * C3626) *
                C118 +
            (C19727 * C476 - C19722 * C490 + C19728 * C1215 - C19723 * C1221 +
             C19729 * C2660 - C19724 * C2664 + C19730 * C3627 -
             C19725 * C3629) *
                C50266) *
               C50109 * C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
               C5117 +
           (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
               C5114 +
           (C16955 * C465 - C16960 * C455 + C50302 * C893 - C16961 * C888) *
               C5118 +
           (C16955 * C485 - C16960 * C466 + C50302 * C903 - C16961 * C894) *
               C5115 +
           (C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
               C5119 +
           (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
               C5116) *
              C50109 * C50170 * C50154 * C113 +
          ((C16964 - C16963 + C16966 - C16965) * C5117 +
           (C16968 - C16967 + C16970 - C16969) * C5114 +
           (C17337 - C17338 + C17339 - C17340) * C5118 +
           (C17341 - C17342 + C17343 - C17344) * C5115 +
           (C17354 - C17353 + C17356 - C17355) * C5119 +
           (C17358 - C17357 + C17360 - C17359) * C5116) *
              C50109 * C50170 * C50154 * C114 +
          (C17003 * C5117 + C17004 * C5114 +
           (C17346 - C17345 + C17348 - C17347) * C5118 +
           (C17350 - C17349 + C17352 - C17351) * C5115 +
           (C17361 - C17362 + C17363 - C17364) * C5119 +
           (C17365 - C17366 + C17367 - C17368) * C5116) *
              C50109 * C50170 * C50154 * C115 +
          (C17005 * C5117 + C17006 * C5114 +
           (C17683 - C17682 + C17685 - C17684) * C5118 +
           (C17687 - C17686 + C17689 - C17688) * C5115 +
           (C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
               C5119 +
           (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
               C5116) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C16955 * C465 - C16960 * C455 + C50302 * C893 - C16961 * C888) *
                C5118 +
            (C16955 * C485 - C16960 * C466 + C50302 * C903 - C16961 * C894) *
                C5115 +
            (C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                C5119 +
            (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                C5116) *
               C50109 * C50170 * C285 +
           ((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C16960 * C888 - C16955 * C893 + C16961 * C1555 - C50302 * C1559) *
                C5118 +
            (C16960 * C894 - C16955 * C903 + C16961 * C1560 - C50302 * C1567) *
                C5115 +
            (C16960 * C1208 - C16955 * C1212 + C16961 * C2654 -
             C50302 * C2657) *
                C5119 +
            (C16960 * C1213 - C16955 * C1220 + C16961 * C2658 -
             C50302 * C2663) *
                C5116) *
               C50109 * C50170 * C286 +
           ((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C5117 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C5114 +
            (C16955 * C1559 - C16960 * C1555 + C50302 * C3203 -
             C16961 * C3200) *
                C5118 +
            (C16955 * C1567 - C16960 * C1560 + C50302 * C3209 -
             C16961 * C3204) *
                C5115 +
            (C16955 * C2657 - C16960 * C2654 + C50302 * C3624 -
             C16961 * C3622) *
                C5119 +
            (C16955 * C2663 - C16960 * C2658 + C50302 * C3628 -
             C16961 * C3625) *
                C5116) *
               C50109 * C50170 * C287) *
              C288 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 +
            (C17354 - C17353 + C17356 - C17355) * C5119 +
            (C17358 - C17357 + C17360 - C17359) * C5116) *
               C50109 * C50170 * C285 +
           ((C17160 - C17159 + C17162 - C17161) * C5117 +
            (C17164 - C17163 + C17166 - C17165) * C5114 +
            (C17889 - C17890 + C17891 - C17892) * C5118 +
            (C17893 - C17894 + C17895 - C17896) * C5115 +
            (C16955 * C1214 - C16960 * C1209 + C50302 * C2659 -
             C16961 * C2655) *
                C5119 +
            (C16955 * C1221 - C16960 * C1215 + C50302 * C2664 -
             C16961 * C2660) *
                C5116) *
               C50109 * C50170 * C286 +
           ((C17176 - C17175 + C17178 - C17177) * C5117 +
            (C17180 - C17179 + C17182 - C17181) * C5114 +
            (C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
             C50302 * C3205) *
                C5118 +
            (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
             C50302 * C3210) *
                C5115 +
            (C16960 * C2655 - C16955 * C2659 + C16961 * C3623 -
             C50302 * C3626) *
                C5119 +
            (C16960 * C2660 - C16955 * C2664 + C16961 * C3627 -
             C50302 * C3629) *
                C5116) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C452 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 +
            (C21852 - C21853 + C21854 - C21855) * C5119 +
            (C21856 - C21857 + C21858 - C21859) * C5116) *
               C50109 * C453 +
           (C21878 * C5117 + C21879 * C5114 +
            (C21853 - C21852 + C21855 - C21854) * C5118 +
            (C21857 - C21856 + C21859 - C21858) * C5115 +
            (C16955 * C5427 - C16960 * C5424 + C50302 * C6386 -
             C16961 * C6384) *
                C5119 +
            (C16955 * C5433 - C16960 * C5428 + C50302 * C6390 -
             C16961 * C6387) *
                C5116) *
               C50109 * C454) *
              C50154 * C288 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C452 +
           ((C17338 - C17337 + C17340 - C17339) * C5117 +
            (C17342 - C17341 + C17344 - C17343) * C5114 +
            (C17353 - C17354 + C17355 - C17356) * C5118 +
            (C17357 - C17358 + C17359 - C17360) * C5115 +
            (C21864 - C21865 + C21866 - C21867) * C5119 +
            (C21868 - C21869 + C21870 - C21871) * C5116) *
               C50109 * C453 +
           (C21876 * C5117 + C21877 * C5114 +
            (C21865 - C21864 + C21867 - C21866) * C5118 +
            (C21869 - C21868 + C21871 - C21870) * C5115 +
            (C16960 * C5425 - C16955 * C5429 + C16961 * C6385 -
             C50302 * C6388) *
                C5119 +
            (C16960 * C5430 - C16955 * C5434 + C16961 * C6389 -
             C50302 * C6391) *
                C5116) *
               C50109 * C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50396 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C50154 * C50438 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50396 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C50234) *
              C50154 * C50439 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C50396 +
           ((C19727 * C457 - C19722 * C469 + C19728 * C890 - C19723 * C897 +
             C19729 * C1557 - C19724 * C1563 + C19730 * C3202 -
             C19725 * C3207) *
                C118 +
            (C19727 * C470 - C19722 * C487 + C19728 * C898 - C19723 * C905 +
             C19729 * C1564 - C19724 * C1569 + C19730 * C3208 -
             C19725 * C3211) *
                C50266) *
               C50109 * C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50396 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C50154 * C50438 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50396 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C17682 - C17683 + C17684 - C17685) * C118 +
             (C17686 - C17687 + C17688 - C17689) * C50266) *
                C16959) *
               C50234) *
              C50154 * C50439 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C50396 +
           (C17694 * C16957 +
            ((C17683 - C17682 + C17685 - C17684) * C118 +
             (C17687 - C17686 + C17689 - C17688) * C50266) *
                C16958 +
            ((C16960 * C463 - C16955 * C481 + C16961 * C892 - C50302 * C901) *
                 C118 +
             (C16960 * C482 - C16955 * C493 + C16961 * C902 - C50302 * C907) *
                 C50266) *
                C16959) *
               C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C50396 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 +
            (C21852 - C21853 + C21854 - C21855) * C5119 +
            (C21856 - C21857 + C21858 - C21859) * C5116) *
               C50109 * C50234) *
              C50154 * C50438 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C50396 +
           ((C17338 - C17337 + C17340 - C17339) * C5117 +
            (C17342 - C17341 + C17344 - C17343) * C5114 +
            (C17353 - C17354 + C17355 - C17356) * C5118 +
            (C17357 - C17358 + C17359 - C17360) * C5115 +
            (C21864 - C21865 + C21866 - C21867) * C5119 +
            (C21868 - C21869 + C21870 - C21871) * C5116) *
               C50109 * C50234) *
              C50154 * C50439 +
          ((C17003 * C5117 + C17004 * C5114 +
            (C17346 - C17345 + C17348 - C17347) * C5118 +
            (C17350 - C17349 + C17352 - C17351) * C5115 +
            (C17361 - C17362 + C17363 - C17364) * C5119 +
            (C17365 - C17366 + C17367 - C17368) * C5116) *
               C50109 * C50396 +
           (C17690 * C5117 + C17691 * C5114 +
            (C17362 - C17361 + C17364 - C17363) * C5118 +
            (C17366 - C17365 + C17368 - C17367) * C5115 +
            (C16960 * C1841 - C16955 * C1847 + C16961 * C5970 -
             C50302 * C5971) *
                C5119 +
            (C16960 * C1848 - C16955 * C1853 + C16961 * C5972 -
             C50302 * C5973) *
                C5116) *
               C50109 * C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C285 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            ((C17167 - C17168 + C17169 - C17170) * C118 +
             (C17171 - C17172 + C17173 - C17174) * C50266) *
                C16959) *
               C50170 * C286 +
           (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C50170 * C287) *
              C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C285 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C16955 * C306 - C16960 * C293 + C50302 * C314 - C16961 * C297) *
                 C118 +
             (C16955 * C323 - C16960 * C307 + C50302 * C327 - C16961 * C315) *
                 C50266) *
                C16959) *
               C50170 * C286 +
           (((C17176 - C17175 + C17178 - C17177) * C118 +
             (C17180 - C17179 + C17182 - C17181) * C50266) *
                C16957 +
            ((C17184 - C17183 + C17186 - C17185) * C118 +
             (C17188 - C17187 + C17190 - C17189) * C50266) *
                C16958 +
            ((C16960 * C297 - C16955 * C314 + C16961 * C1097 - C50302 * C1104) *
                 C118 +
             (C16960 * C315 - C16955 * C327 + C16961 * C1105 - C50302 * C1109) *
                 C50266) *
                C16959) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C118 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50266) *
               C16957 +
           ((C16963 - C16964 + C16965 - C16966) * C118 +
            (C16967 - C16968 + C16969 - C16970) * C50266) *
               C16958 +
           C17011 * C16959) *
              C50170 * C50154 * C113 +
          (((C16964 - C16963 + C16966 - C16965) * C118 +
            (C16968 - C16967 + C16970 - C16969) * C50266) *
               C16957 +
           ((C16972 - C16971 + C16974 - C16973) * C118 +
            (C16976 - C16975 + C16978 - C16977) * C50266) *
               C16958 +
           C17012 * C16959) *
              C50170 * C50154 * C114 +
          (C17011 * C16957 +
           ((C16980 - C16979 + C16982 - C16981) * C118 +
            (C16984 - C16983 + C16986 - C16985) * C50266) *
               C16958 +
           ((C16987 - C16988 + C16989 - C16990) * C118 +
            (C16991 - C16992 + C16993 - C16994) * C50266) *
               C16959) *
              C50170 * C50154 * C115 +
          (C17012 * C16957 +
           ((C16988 - C16987 + C16990 - C16989) * C118 +
            (C16992 - C16991 + C16994 - C16993) * C50266) *
               C16958 +
           ((C16960 * C124 - C16955 * C136 + C16961 * C622 - C50302 * C623) *
                C118 +
            (C16960 * C137 - C16955 * C145 + C16961 * C624 - C50302 * C625) *
                C50266) *
               C16959) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C50170 * C50154 * C113 +
          ((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
            C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
               C118 +
           (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
            C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
               C50266) *
              C50109 * C50170 * C50154 * C114 +
          ((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
            C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
               C118 +
           (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
            C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
               C50266) *
              C50109 * C50170 * C50154 * C115 +
          ((C19727 * C122 - C19722 * C132 + C19728 * C293 - C19723 * C306 +
            C19729 * C297 - C19724 * C314 + C19730 * C1097 - C19725 * C1104) *
               C118 +
           (C19727 * C133 - C19722 * C143 + C19728 * C307 - C19723 * C323 +
            C19729 * C315 - C19724 * C327 + C19730 * C1105 - C19725 * C1109) *
               C50266) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C285 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C286 +
           ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C50170 * C287) *
              C288 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C285 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C286 +
           ((C19727 * C295 - C19722 * C310 + C19728 * C1095 - C19723 * C1100 +
             C19729 * C2473 - C19724 * C2477 + C19730 * C3469 -
             C19725 * C3472) *
                C118 +
            (C19727 * C311 - C19722 * C325 + C19728 * C1101 - C19723 * C1107 +
             C19729 * C2478 - C19724 * C2482 + C19730 * C3473 -
             C19725 * C3475) *
                C50266) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
               C5117 +
           (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
               C5114 +
           (C16955 * C465 - C16960 * C455 + C50302 * C893 - C16961 * C888) *
               C5118 +
           (C16955 * C485 - C16960 * C466 + C50302 * C903 - C16961 * C894) *
               C5115 +
           (C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
               C5119 +
           (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
               C5116) *
              C50109 * C50170 * C50154 * C113 +
          ((C16964 - C16963 + C16966 - C16965) * C5117 +
           (C16968 - C16967 + C16970 - C16969) * C5114 +
           (C17337 - C17338 + C17339 - C17340) * C5118 +
           (C17341 - C17342 + C17343 - C17344) * C5115 +
           (C17354 - C17353 + C17356 - C17355) * C5119 +
           (C17358 - C17357 + C17360 - C17359) * C5116) *
              C50109 * C50170 * C50154 * C114 +
          (C17003 * C5117 + C17004 * C5114 +
           (C17346 - C17345 + C17348 - C17347) * C5118 +
           (C17350 - C17349 + C17352 - C17351) * C5115 +
           (C17361 - C17362 + C17363 - C17364) * C5119 +
           (C17365 - C17366 + C17367 - C17368) * C5116) *
              C50109 * C50170 * C50154 * C115 +
          (C17005 * C5117 + C17006 * C5114 +
           (C17683 - C17682 + C17685 - C17684) * C5118 +
           (C17687 - C17686 + C17689 - C17688) * C5115 +
           (C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
               C5119 +
           (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
               C5116) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C16955 * C465 - C16960 * C455 + C50302 * C893 - C16961 * C888) *
                C5118 +
            (C16955 * C485 - C16960 * C466 + C50302 * C903 - C16961 * C894) *
                C5115 +
            (C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                C5119 +
            (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                C5116) *
               C50109 * C50170 * C285 +
           ((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C16960 * C888 - C16955 * C893 + C16961 * C1555 - C50302 * C1559) *
                C5118 +
            (C16960 * C894 - C16955 * C903 + C16961 * C1560 - C50302 * C1567) *
                C5115 +
            (C16960 * C1208 - C16955 * C1212 + C16961 * C2654 -
             C50302 * C2657) *
                C5119 +
            (C16960 * C1213 - C16955 * C1220 + C16961 * C2658 -
             C50302 * C2663) *
                C5116) *
               C50109 * C50170 * C286 +
           ((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C5117 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C5114 +
            (C16955 * C1559 - C16960 * C1555 + C50302 * C3203 -
             C16961 * C3200) *
                C5118 +
            (C16955 * C1567 - C16960 * C1560 + C50302 * C3209 -
             C16961 * C3204) *
                C5115 +
            (C16955 * C2657 - C16960 * C2654 + C50302 * C3624 -
             C16961 * C3622) *
                C5119 +
            (C16955 * C2663 - C16960 * C2658 + C50302 * C3628 -
             C16961 * C3625) *
                C5116) *
               C50109 * C50170 * C287) *
              C288 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 +
            (C17354 - C17353 + C17356 - C17355) * C5119 +
            (C17358 - C17357 + C17360 - C17359) * C5116) *
               C50109 * C50170 * C285 +
           ((C17160 - C17159 + C17162 - C17161) * C5117 +
            (C17164 - C17163 + C17166 - C17165) * C5114 +
            (C17889 - C17890 + C17891 - C17892) * C5118 +
            (C17893 - C17894 + C17895 - C17896) * C5115 +
            (C16955 * C1214 - C16960 * C1209 + C50302 * C2659 -
             C16961 * C2655) *
                C5119 +
            (C16955 * C1221 - C16960 * C1215 + C50302 * C2664 -
             C16961 * C2660) *
                C5116) *
               C50109 * C50170 * C286 +
           ((C17176 - C17175 + C17178 - C17177) * C5117 +
            (C17180 - C17179 + C17182 - C17181) * C5114 +
            (C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
             C50302 * C3205) *
                C5118 +
            (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
             C50302 * C3210) *
                C5115 +
            (C16960 * C2655 - C16955 * C2659 + C16961 * C3623 -
             C50302 * C3626) *
                C5119 +
            (C16960 * C2660 - C16955 * C2664 + C16961 * C3627 -
             C50302 * C3629) *
                C5116) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C50440 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C50441 +
           ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C50170 * C1324) *
              C50387 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C50440 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C50441 +
           ((C19727 * C295 - C19722 * C310 + C19728 * C1095 - C19723 * C1100 +
             C19729 * C2473 - C19724 * C2477 + C19730 * C3469 -
             C19725 * C3472) *
                C118 +
            (C19727 * C311 - C19722 * C325 + C19728 * C1101 - C19723 * C1107 +
             C19729 * C2478 - C19724 * C2482 + C19730 * C3473 -
             C19725 * C3475) *
                C50266) *
               C50109 * C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C50440 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50170 * C50441 +
           (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C50170 * C1324) *
              C50387 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C50440 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C17519 - C17520 + C17521 - C17522) * C118 +
             (C17523 - C17524 + C17525 - C17526) * C50266) *
                C16959) *
               C50170 * C50441 +
           (((C17176 - C17175 + C17178 - C17177) * C118 +
             (C17180 - C17179 + C17182 - C17181) * C50266) *
                C16957 +
            ((C17184 - C17183 + C17186 - C17185) * C118 +
             (C17188 - C17187 + C17190 - C17189) * C50266) *
                C16958 +
            ((C16960 * C297 - C16955 * C314 + C16961 * C1097 - C50302 * C1104) *
                 C118 +
             (C16960 * C315 - C16955 * C327 + C16961 * C1105 - C50302 * C1109) *
                 C50266) *
                C16959) *
               C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C50170 * C50440 +
           ((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C22366 - C22367 + C22368 - C22369) * C5118 +
            (C22370 - C22371 + C22372 - C22373) * C5115 + C22796 * C5119 +
            C22797 * C5116) *
               C50109 * C50170 * C50441 +
           ((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C5117 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C5114 +
            (C16955 * C1559 - C16960 * C1555 + C50302 * C3203 -
             C16961 * C3200) *
                C5118 +
            (C16955 * C1567 - C16960 * C1560 + C50302 * C3209 -
             C16961 * C3204) *
                C5115 +
            (C16955 * C2657 - C16960 * C2654 + C50302 * C3624 -
             C16961 * C3622) *
                C5119 +
            (C16955 * C2663 - C16960 * C2658 + C50302 * C3628 -
             C16961 * C3625) *
                C5116) *
               C50109 * C50170 * C1324) *
              C50387 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C50170 * C50440 +
           ((C17160 - C17159 + C17162 - C17161) * C5117 +
            (C17164 - C17163 + C17166 - C17165) * C5114 +
            (C17889 - C17890 + C17891 - C17892) * C5118 +
            (C17893 - C17894 + C17895 - C17896) * C5115 +
            (C22382 - C22383 + C22384 - C22385) * C5119 +
            (C22386 - C22387 + C22388 - C22389) * C5116) *
               C50109 * C50170 * C50441 +
           ((C17176 - C17175 + C17178 - C17177) * C5117 +
            (C17180 - C17179 + C17182 - C17181) * C5114 +
            (C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
             C50302 * C3205) *
                C5118 +
            (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
             C50302 * C3210) *
                C5115 +
            (C16960 * C2655 - C16955 * C2659 + C16961 * C3623 -
             C50302 * C3626) *
                C5119 +
            (C16960 * C2660 - C16955 * C2664 + C16961 * C3627 -
             C50302 * C3629) *
                C5116) *
               C50109 * C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50396 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C50440 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50396 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C50234) *
              C50441 +
          (((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C50396 +
           ((C19727 * C1555 - C19722 * C1559 + C19728 * C3200 - C19723 * C3203 +
             C19729 * C4116 - C19724 * C4118 + C19730 * C20849 -
             C19725 * C20850) *
                C118 +
            (C19727 * C1560 - C19722 * C1567 + C19728 * C3204 - C19723 * C3209 +
             C19729 * C4119 - C19724 * C4122 + C19730 * C20851 -
             C19725 * C20852) *
                C50266) *
               C50109 * C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50396 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C50440 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50396 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C50234) *
              C50441 +
          ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C50396 +
           (((C16960 * C1555 - C16955 * C1559 + C16961 * C3200 -
              C50302 * C3203) *
                 C118 +
             (C16960 * C1560 - C16955 * C1567 + C16961 * C3204 -
              C50302 * C3209) *
                 C50266) *
                C16957 +
            ((C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
              C50302 * C3205) *
                 C118 +
             (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
              C50302 * C3210) *
                 C50266) *
                C16958 +
            ((C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
              C50302 * C3207) *
                 C118 +
             (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
              C50302 * C3211) *
                 C50266) *
                C16959) *
               C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C50396 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 +
            (C21852 - C21853 + C21854 - C21855) * C5119 +
            (C21856 - C21857 + C21858 - C21859) * C5116) *
               C50109 * C50234) *
              C50440 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C22366 - C22367 + C22368 - C22369) * C5118 +
            (C22370 - C22371 + C22372 - C22373) * C5115 + C22796 * C5119 +
            C22797 * C5116) *
               C50109 * C50396 +
           ((C22367 - C22366 + C22369 - C22368) * C5117 +
            (C22371 - C22370 + C22373 - C22372) * C5114 +
            (C22375 - C22374 + C22377 - C22376) * C5118 +
            (C22379 - C22378 + C22381 - C22380) * C5115 +
            (C22788 - C22789 + C22790 - C22791) * C5119 +
            (C22792 - C22793 + C22794 - C22795) * C5116) *
               C50109 * C50234) *
              C50441 +
          (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C5117 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C5114 +
            (C23284 - C23285 + C23286 - C23287) * C5118 +
            (C23288 - C23289 + C23290 - C23291) * C5115 +
            (C23292 - C23293 + C23294 - C23295) * C5119 +
            (C23296 - C23297 + C23298 - C23299) * C5116) *
               C50109 * C50396 +
           ((C23285 - C23284 + C23287 - C23286) * C5117 +
            (C23289 - C23288 + C23291 - C23290) * C5114 +
            (C23293 - C23292 + C23295 - C23294) * C5118 +
            (C23297 - C23296 + C23299 - C23298) * C5115 +
            (C16960 * C4515 - C16955 * C4519 + C16961 * C21115 -
             C50302 * C21116) *
                C5119 +
            (C16960 * C4521 - C16955 * C4527 + C16961 * C21117 -
             C50302 * C21118) *
                C5116) *
               C50109 * C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C16955 * C126 - C16960 * C119 + C50302 * C300 -
                  C16961 * C290) *
                     C118 +
                 (C16955 * C140 - C16960 * C127 + C50302 * C320 -
                  C16961 * C301) *
                     C50266) *
                    C16957 +
                ((C16963 - C16964 + C16965 - C16966) * C118 +
                 (C16967 - C16968 + C16969 - C16970) * C50266) *
                    C16958 +
                C17011 * C16959) *
                   C50170 * C1018 +
               (((C16960 * C290 - C16955 * C300 + C16961 * C294 -
                  C50302 * C308) *
                     C118 +
                 (C16960 * C301 - C16955 * C320 + C16961 * C309 -
                  C50302 * C324) *
                     C50266) *
                    C16957 +
                ((C17159 - C17160 + C17161 - C17162) * C118 +
                 (C17163 - C17164 + C17165 - C17166) * C50266) *
                    C16958 +
                C17531 * C16959) *
                   C50170 * C50206) *
                  C1020 +
              ((((C16964 - C16963 + C16966 - C16965) * C118 +
                 (C16968 - C16967 + C16970 - C16969) * C50266) *
                    C16957 +
                ((C16972 - C16971 + C16974 - C16973) * C118 +
                 (C16976 - C16975 + C16978 - C16977) * C50266) *
                    C16958 +
                C17012 * C16959) *
                   C50170 * C1018 +
               (((C17160 - C17159 + C17162 - C17161) * C118 +
                 (C17164 - C17163 + C17166 - C17165) * C50266) *
                    C16957 +
                ((C17168 - C17167 + C17170 - C17169) * C118 +
                 (C17172 - C17171 + C17174 - C17173) * C50266) *
                    C16958 +
                ((C17519 - C17520 + C17521 - C17522) * C118 +
                 (C17523 - C17524 + C17525 - C17526) * C50266) *
                    C16959) *
                   C50170 * C50206) *
                  C1021 +
              ((C17011 * C16957 +
                ((C16980 - C16979 + C16982 - C16981) * C118 +
                 (C16984 - C16983 + C16986 - C16985) * C50266) *
                    C16958 +
                ((C16987 - C16988 + C16989 - C16990) * C118 +
                 (C16991 - C16992 + C16993 - C16994) * C50266) *
                    C16959) *
                   C50170 * C1018 +
               (C17531 * C16957 +
                ((C17520 - C17519 + C17522 - C17521) * C118 +
                 (C17524 - C17523 + C17526 - C17525) * C50266) *
                    C16958 +
                ((C16960 * C298 - C16955 * C316 + C16961 * C299 -
                  C50302 * C318) *
                     C118 +
                 (C16960 * C317 - C16955 * C328 + C16961 * C319 -
                  C50302 * C329) *
                     C50266) *
                    C16959) *
                   C50170 * C50206) *
                  C1022) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16955 * C126 - C16960 * C119 + C50302 * C300 -
                 C16961 * C290) *
                    C118 +
                (C16955 * C140 - C16960 * C127 + C50302 * C320 -
                 C16961 * C301) *
                    C50266) *
                   C16957 +
               ((C16963 - C16964 + C16965 - C16966) * C118 +
                (C16967 - C16968 + C16969 - C16970) * C50266) *
                   C16958 +
               C17011 * C16959) *
                  C50170 * C1089 +
              (((C16960 * C290 - C16955 * C300 + C16961 * C294 -
                 C50302 * C308) *
                    C118 +
                (C16960 * C301 - C16955 * C320 + C16961 * C309 -
                 C50302 * C324) *
                    C50266) *
                   C16957 +
               ((C17159 - C17160 + C17161 - C17162) * C118 +
                (C17163 - C17164 + C17165 - C17166) * C50266) *
                   C16958 +
               C17531 * C16959) *
                  C50170 * C1090 +
              (((C16955 * C308 - C16960 * C294 + C50302 * C1098 -
                 C16961 * C1094) *
                    C118 +
                (C16955 * C324 - C16960 * C309 + C50302 * C1106 -
                 C16961 * C1099) *
                    C50266) *
                   C16957 +
               ((C17175 - C17176 + C17177 - C17178) * C118 +
                (C17179 - C17180 + C17181 - C17182) * C50266) *
                   C16958 +
               ((C17183 - C17184 + C17185 - C17186) * C118 +
                (C17187 - C17188 + C17189 - C17190) * C50266) *
                   C16959) *
                  C50170 * C1091 +
              (((C16960 * C1094 - C16955 * C1098 + C16961 * C2472 -
                 C50302 * C2475) *
                    C118 +
                (C16960 * C1099 - C16955 * C1106 + C16961 * C2476 -
                 C50302 * C2481) *
                    C50266) *
                   C16957 +
               ((C16960 * C1095 - C16955 * C1100 + C16961 * C2473 -
                 C50302 * C2477) *
                    C118 +
                (C16960 * C1101 - C16955 * C1107 + C16961 * C2478 -
                 C50302 * C2482) *
                    C50266) *
                   C16958 +
               ((C16960 * C1096 - C16955 * C1102 + C16961 * C2474 -
                 C50302 * C2479) *
                    C118 +
                (C16960 * C1103 - C16955 * C1108 + C16961 * C2480 -
                 C50302 * C2483) *
                    C50266) *
                   C16959) *
                  C50170 * C1092) *
             C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C452 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C453 +
           (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                 C118 +
             (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                 C50266) *
                C16957 +
            ((C17353 - C17354 + C17355 - C17356) * C118 +
             (C17357 - C17358 + C17359 - C17360) * C50266) *
                C16958 +
            ((C17361 - C17362 + C17363 - C17364) * C118 +
             (C17365 - C17366 + C17367 - C17368) * C50266) *
                C16959) *
               C454) *
              C1018 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C452 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C453 +
           (((C16960 * C1208 - C16955 * C1212 + C16961 * C2654 -
              C50302 * C2657) *
                 C118 +
             (C16960 * C1213 - C16955 * C1220 + C16961 * C2658 -
              C50302 * C2663) *
                 C50266) *
                C16957 +
            ((C16960 * C1209 - C16955 * C1214 + C16961 * C2655 -
              C50302 * C2659) *
                 C118 +
             (C16960 * C1215 - C16955 * C1221 + C16961 * C2660 -
              C50302 * C2664) *
                 C50266) *
                C16958 +
            ((C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
              C50302 * C2661) *
                 C118 +
             (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
              C50302 * C2665) *
                 C50266) *
                C16959) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19727 * C292 - C19722 * C304 + C19728 * C296 - C19723 * C312 +
             C19729 * C1096 - C19724 * C1102 + C19730 * C2474 -
             C19725 * C2479) *
                C118 +
            (C19727 * C305 - C19722 * C322 + C19728 * C313 - C19723 * C326 +
             C19729 * C1103 - C19724 * C1108 + C19730 * C2480 -
             C19725 * C2483) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C50170 * C1089 +
          ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
            C19729 * C1094 - C19724 * C1098 + C19730 * C2472 - C19725 * C2475) *
               C118 +
           (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
            C19729 * C1099 - C19724 * C1106 + C19730 * C2476 - C19725 * C2481) *
               C50266) *
              C50109 * C50170 * C1090 +
          ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
            C19724 * C2475 - C19729 * C2472 + C19725 * C3470 - C19730 * C3468) *
               C118 +
           (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
            C19724 * C2481 - C19729 * C2476 + C19725 * C3474 - C19730 * C3471) *
               C50266) *
              C50109 * C50170 * C1091 +
          ((C19727 * C1094 - C19722 * C1098 + C19728 * C2472 - C19723 * C2475 +
            C19729 * C3468 - C19724 * C3470 + C19730 * C20417 -
            C19725 * C20418) *
               C118 +
           (C19727 * C1099 - C19722 * C1106 + C19728 * C2476 - C19723 * C2481 +
            C19729 * C3471 - C19724 * C3474 + C19730 * C20419 -
            C19725 * C20420) *
               C50266) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C452 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C453 +
           ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
             C19724 * C2657 - C19729 * C2654 + C19725 * C3624 -
             C19730 * C3622) *
                C118 +
            (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
             C19724 * C2663 - C19729 * C2658 + C19725 * C3628 -
             C19730 * C3625) *
                C50266) *
               C50109 * C454) *
              C1018 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C452 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C453 +
           ((C19727 * C1208 - C19722 * C1212 + C19728 * C2654 - C19723 * C2657 +
             C19729 * C3622 - C19724 * C3624 + C19730 * C20519 -
             C19725 * C20520) *
                C118 +
            (C19727 * C1213 - C19722 * C1220 + C19728 * C2658 - C19723 * C2663 +
             C19729 * C3625 - C19724 * C3628 + C19730 * C20521 -
             C19725 * C20522) *
                C50266) *
               C50109 * C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C50170 * C1018 +
           ((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C22366 - C22367 + C22368 - C22369) * C5118 +
            (C22370 - C22371 + C22372 - C22373) * C5115 +
            (C22374 - C22375 + C22376 - C22377) * C5119 +
            (C22378 - C22379 + C22380 - C22381) * C5116) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C50170 * C1018 +
           ((C17160 - C17159 + C17162 - C17161) * C5117 +
            (C17164 - C17163 + C17166 - C17165) * C5114 +
            (C17889 - C17890 + C17891 - C17892) * C5118 +
            (C17893 - C17894 + C17895 - C17896) * C5115 +
            (C22382 - C22383 + C22384 - C22385) * C5119 +
            (C22386 - C22387 + C22388 - C22389) * C5116) *
               C50109 * C50170 * C50206) *
              C1021 +
          ((C17003 * C5117 + C17004 * C5114 +
            (C17346 - C17345 + C17348 - C17347) * C5118 +
            (C17350 - C17349 + C17352 - C17351) * C5115 +
            (C17361 - C17362 + C17363 - C17364) * C5119 +
            (C17365 - C17366 + C17367 - C17368) * C5116) *
               C50109 * C50170 * C1018 +
           (C17527 * C5117 + C17528 * C5114 +
            (C17898 - C17897 + C17900 - C17899) * C5118 +
            (C17902 - C17901 + C17904 - C17903) * C5115 +
            (C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
             C50302 * C2661) *
                C5119 +
            (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
             C50302 * C2665) *
                C5116) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
               C5117 +
           (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
               C5114 +
           (C21836 - C21837 + C21838 - C21839) * C5118 +
           (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
           C21879 * C5116) *
              C50109 * C50170 * C1089 +
          ((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
               C5117 +
           (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
               C5114 +
           (C22366 - C22367 + C22368 - C22369) * C5118 +
           (C22370 - C22371 + C22372 - C22373) * C5115 +
           (C22374 - C22375 + C22376 - C22377) * C5119 +
           (C22378 - C22379 + C22380 - C22381) * C5116) *
              C50109 * C50170 * C1090 +
          ((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
               C5117 +
           (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
               C5114 +
           (C16955 * C1559 - C16960 * C1555 + C50302 * C3203 - C16961 * C3200) *
               C5118 +
           (C16955 * C1567 - C16960 * C1560 + C50302 * C3209 - C16961 * C3204) *
               C5115 +
           (C16955 * C2657 - C16960 * C2654 + C50302 * C3624 - C16961 * C3622) *
               C5119 +
           (C16955 * C2663 - C16960 * C2658 + C50302 * C3628 - C16961 * C3625) *
               C5116) *
              C50109 * C50170 * C1091 +
          ((C16960 * C1094 - C16955 * C1098 + C16961 * C2472 - C50302 * C2475) *
               C5117 +
           (C16960 * C1099 - C16955 * C1106 + C16961 * C2476 - C50302 * C2481) *
               C5114 +
           (C16960 * C3200 - C16955 * C3203 + C16961 * C4116 - C50302 * C4118) *
               C5118 +
           (C16960 * C3204 - C16955 * C3209 + C16961 * C4119 - C50302 * C4122) *
               C5115 +
           (C16960 * C3622 - C16955 * C3624 + C16961 * C20519 -
            C50302 * C20520) *
               C5119 +
           (C16960 * C3625 - C16955 * C3628 + C16961 * C20521 -
            C50302 * C20522) *
               C5116) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C452 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 +
            (C21852 - C21853 + C21854 - C21855) * C5119 +
            (C21856 - C21857 + C21858 - C21859) * C5116) *
               C50109 * C453 +
           (C21878 * C5117 + C21879 * C5114 +
            (C21853 - C21852 + C21855 - C21854) * C5118 +
            (C21857 - C21856 + C21859 - C21858) * C5115 +
            (C16955 * C5427 - C16960 * C5424 + C50302 * C6386 -
             C16961 * C6384) *
                C5119 +
            (C16955 * C5433 - C16960 * C5428 + C50302 * C6390 -
             C16961 * C6387) *
                C5116) *
               C50109 * C454) *
              C1018 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C22366 - C22367 + C22368 - C22369) * C5118 +
            (C22370 - C22371 + C22372 - C22373) * C5115 + C22796 * C5119 +
            C22797 * C5116) *
               C50109 * C452 +
           ((C22367 - C22366 + C22369 - C22368) * C5117 +
            (C22371 - C22370 + C22373 - C22372) * C5114 +
            (C22375 - C22374 + C22377 - C22376) * C5118 +
            (C22379 - C22378 + C22381 - C22380) * C5115 +
            (C22788 - C22789 + C22790 - C22791) * C5119 +
            (C22792 - C22793 + C22794 - C22795) * C5116) *
               C50109 * C453 +
           (C22796 * C5117 + C22797 * C5114 +
            (C22789 - C22788 + C22791 - C22790) * C5118 +
            (C22793 - C22792 + C22795 - C22794) * C5115 +
            (C16960 * C6384 - C16955 * C6386 + C16961 * C22779 -
             C50302 * C22780) *
                C5119 +
            (C16960 * C6387 - C16955 * C6390 + C16961 * C22781 -
             C50302 * C22782) *
                C5116) *
               C50109 * C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
              C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                 C118 +
             (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
              C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                 C50266) *
                C50109 * C50396 +
            ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
              C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
              C19725 * C3203) *
                 C118 +
             (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
              C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
              C19725 * C3209) *
                 C50266) *
                C50109 * C50234) *
               C1018 +
           (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
              C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
              C19725 * C2475) *
                 C118 +
             (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
              C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
              C19725 * C2481) *
                 C50266) *
                C50109 * C50396 +
            ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
              C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
              C19730 * C4116) *
                 C118 +
             (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
              C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
              C19730 * C4119) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
              C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                 C118 +
             (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
              C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                 C50266) *
                C50109 * C50396 +
            ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
              C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
              C19730 * C3201) *
                 C118 +
             (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
              C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
              C19730 * C3206) *
                 C50266) *
                C50109 * C50234) *
               C1018 +
           (((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
              C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
              C19730 * C2473) *
                 C118 +
             (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
              C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
              C19730 * C2478) *
                 C50266) *
                C50109 * C50396 +
            ((C19727 * C889 - C19722 * C895 + C19728 * C1556 - C19723 * C1561 +
              C19729 * C3201 - C19724 * C3205 + C19730 * C4117 -
              C19725 * C4120) *
                 C118 +
             (C19727 * C896 - C19722 * C904 + C19728 * C1562 - C19723 * C1568 +
              C19729 * C3206 - C19724 * C3210 + C19730 * C4121 -
              C19725 * C4123) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C118 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50266) *
                 C16957 +
             ((C16963 - C16964 + C16965 - C16966) * C118 +
              (C16967 - C16968 + C16969 - C16970) * C50266) *
                 C16958 +
             C17011 * C16959) *
                C50396 +
            (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                  C118 +
              (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                  C50266) *
                 C16957 +
             ((C17337 - C17338 + C17339 - C17340) * C118 +
              (C17341 - C17342 + C17343 - C17344) * C50266) *
                 C16958 +
             C17694 * C16959) *
                C50234) *
               C1018 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C118 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50266) *
                 C16957 +
             ((C17159 - C17160 + C17161 - C17162) * C118 +
              (C17163 - C17164 + C17165 - C17166) * C50266) *
                 C16958 +
             C17531 * C16959) *
                C50396 +
            (((C16955 * C893 - C16960 * C888 + C50302 * C1559 -
               C16961 * C1555) *
                  C118 +
              (C16955 * C903 - C16960 * C894 + C50302 * C1567 -
               C16961 * C1560) *
                  C50266) *
                 C16957 +
             ((C17889 - C17890 + C17891 - C17892) * C118 +
              (C17893 - C17894 + C17895 - C17896) * C50266) *
                 C16958 +
             ((C17897 - C17898 + C17899 - C17900) * C118 +
              (C17901 - C17902 + C17903 - C17904) * C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50387 +
          (((((C16964 - C16963 + C16966 - C16965) * C118 +
              (C16968 - C16967 + C16970 - C16969) * C50266) *
                 C16957 +
             ((C16972 - C16971 + C16974 - C16973) * C118 +
              (C16976 - C16975 + C16978 - C16977) * C50266) *
                 C16958 +
             C17012 * C16959) *
                C50396 +
            (((C17338 - C17337 + C17340 - C17339) * C118 +
              (C17342 - C17341 + C17344 - C17343) * C50266) *
                 C16957 +
             ((C17346 - C17345 + C17348 - C17347) * C118 +
              (C17350 - C17349 + C17352 - C17351) * C50266) *
                 C16958 +
             ((C17682 - C17683 + C17684 - C17685) * C118 +
              (C17686 - C17687 + C17688 - C17689) * C50266) *
                 C16959) *
                C50234) *
               C1018 +
           ((((C17160 - C17159 + C17162 - C17161) * C118 +
              (C17164 - C17163 + C17166 - C17165) * C50266) *
                 C16957 +
             ((C17168 - C17167 + C17170 - C17169) * C118 +
              (C17172 - C17171 + C17174 - C17173) * C50266) *
                 C16958 +
             ((C17519 - C17520 + C17521 - C17522) * C118 +
              (C17523 - C17524 + C17525 - C17526) * C50266) *
                 C16959) *
                C50396 +
            (((C17890 - C17889 + C17892 - C17891) * C118 +
              (C17894 - C17893 + C17896 - C17895) * C50266) *
                 C16957 +
             ((C17898 - C17897 + C17900 - C17899) * C118 +
              (C17902 - C17901 + C17904 - C17903) * C50266) *
                 C16958 +
             ((C16960 * C891 - C16955 * C899 + C16961 * C1558 -
               C50302 * C1565) *
                  C118 +
              (C16960 * C900 - C16955 * C906 + C16961 * C1566 -
               C50302 * C1570) *
                  C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C5117 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C5114 +
             (C21836 - C21837 + C21838 - C21839) * C5118 +
             (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
             C21879 * C5116) *
                C50109 * C50396 +
            ((C21837 - C21836 + C21839 - C21838) * C5117 +
             (C21841 - C21840 + C21843 - C21842) * C5114 +
             (C21845 - C21844 + C21847 - C21846) * C5118 +
             (C21849 - C21848 + C21851 - C21850) * C5115 +
             (C21852 - C21853 + C21854 - C21855) * C5119 +
             (C21856 - C21857 + C21858 - C21859) * C5116) *
                C50109 * C50234) *
               C1018 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C5117 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C5114 +
             (C22366 - C22367 + C22368 - C22369) * C5118 +
             (C22370 - C22371 + C22372 - C22373) * C5115 + C22796 * C5119 +
             C22797 * C5116) *
                C50109 * C50396 +
            ((C22367 - C22366 + C22369 - C22368) * C5117 +
             (C22371 - C22370 + C22373 - C22372) * C5114 +
             (C22375 - C22374 + C22377 - C22376) * C5118 +
             (C22379 - C22378 + C22381 - C22380) * C5115 +
             (C22788 - C22789 + C22790 - C22791) * C5119 +
             (C22792 - C22793 + C22794 - C22795) * C5116) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C16964 - C16963 + C16966 - C16965) * C5117 +
             (C16968 - C16967 + C16970 - C16969) * C5114 +
             (C17337 - C17338 + C17339 - C17340) * C5118 +
             (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
             C21877 * C5116) *
                C50109 * C50396 +
            ((C17338 - C17337 + C17340 - C17339) * C5117 +
             (C17342 - C17341 + C17344 - C17343) * C5114 +
             (C17353 - C17354 + C17355 - C17356) * C5118 +
             (C17357 - C17358 + C17359 - C17360) * C5115 +
             (C21864 - C21865 + C21866 - C21867) * C5119 +
             (C21868 - C21869 + C21870 - C21871) * C5116) *
                C50109 * C50234) *
               C1018 +
           (((C17160 - C17159 + C17162 - C17161) * C5117 +
             (C17164 - C17163 + C17166 - C17165) * C5114 +
             (C17889 - C17890 + C17891 - C17892) * C5118 +
             (C17893 - C17894 + C17895 - C17896) * C5115 +
             (C22382 - C22383 + C22384 - C22385) * C5119 +
             (C22386 - C22387 + C22388 - C22389) * C5116) *
                C50109 * C50396 +
            ((C17890 - C17889 + C17892 - C17891) * C5117 +
             (C17894 - C17893 + C17896 - C17895) * C5114 +
             (C22383 - C22382 + C22385 - C22384) * C5118 +
             (C22387 - C22386 + C22389 - C22388) * C5115 +
             (C16960 * C4516 - C16955 * C4522 + C16961 * C4517 -
              C50302 * C4523) *
                 C5119 +
             (C16960 * C4524 - C16955 * C4528 + C16961 * C4525 -
              C50302 * C4529) *
                 C5116) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C118 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50266) *
               C16957 +
           ((C16963 - C16964 + C16965 - C16966) * C118 +
            (C16967 - C16968 + C16969 - C16970) * C50266) *
               C16958 +
           C17011 * C16959) *
              C50170 * C1089 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C118 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C50266) *
               C16957 +
           ((C17159 - C17160 + C17161 - C17162) * C118 +
            (C17163 - C17164 + C17165 - C17166) * C50266) *
               C16958 +
           C17531 * C16959) *
              C50170 * C1090 +
          (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C118 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C50266) *
               C16957 +
           ((C17175 - C17176 + C17177 - C17178) * C118 +
            (C17179 - C17180 + C17181 - C17182) * C50266) *
               C16958 +
           ((C17183 - C17184 + C17185 - C17186) * C118 +
            (C17187 - C17188 + C17189 - C17190) * C50266) *
               C16959) *
              C50170 * C1091 +
          (((C16960 * C1094 - C16955 * C1098 + C16961 * C2472 -
             C50302 * C2475) *
                C118 +
            (C16960 * C1099 - C16955 * C1106 + C16961 * C2476 -
             C50302 * C2481) *
                C50266) *
               C16957 +
           ((C16960 * C1095 - C16955 * C1100 + C16961 * C2473 -
             C50302 * C2477) *
                C118 +
            (C16960 * C1101 - C16955 * C1107 + C16961 * C2478 -
             C50302 * C2482) *
                C50266) *
               C16958 +
           ((C16960 * C1096 - C16955 * C1102 + C16961 * C2474 -
             C50302 * C2479) *
                C118 +
            (C16960 * C1103 - C16955 * C1108 + C16961 * C2480 -
             C50302 * C2483) *
                C50266) *
               C16959) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C1018 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50170 * C50206) *
              C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C1018 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C17519 - C17520 + C17521 - C17522) * C118 +
             (C17523 - C17524 + C17525 - C17526) * C50266) *
                C16959) *
               C50170 * C50206) *
              C1021 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C50170 * C1018 +
           (C17531 * C16957 +
            ((C17520 - C17519 + C17522 - C17521) * C118 +
             (C17524 - C17523 + C17526 - C17525) * C50266) *
                C16958 +
            ((C16960 * C298 - C16955 * C316 + C16961 * C299 - C50302 * C318) *
                 C118 +
             (C16960 * C317 - C16955 * C328 + C16961 * C319 - C50302 * C329) *
                 C50266) *
                C16959) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19727 * C292 - C19722 * C304 + C19728 * C296 - C19723 * C312 +
             C19729 * C1096 - C19724 * C1102 + C19730 * C2474 -
             C19725 * C2479) *
                C118 +
            (C19727 * C305 - C19722 * C322 + C19728 * C313 - C19723 * C326 +
             C19729 * C1103 - C19724 * C1108 + C19730 * C2480 -
             C19725 * C2483) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C50170 * C1089 +
          ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
            C19729 * C1094 - C19724 * C1098 + C19730 * C2472 - C19725 * C2475) *
               C118 +
           (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
            C19729 * C1099 - C19724 * C1106 + C19730 * C2476 - C19725 * C2481) *
               C50266) *
              C50109 * C50170 * C1090 +
          ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
            C19724 * C2475 - C19729 * C2472 + C19725 * C3470 - C19730 * C3468) *
               C118 +
           (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
            C19724 * C2481 - C19729 * C2476 + C19725 * C3474 - C19730 * C3471) *
               C50266) *
              C50109 * C50170 * C1091 +
          ((C19727 * C1094 - C19722 * C1098 + C19728 * C2472 - C19723 * C2475 +
            C19729 * C3468 - C19724 * C3470 + C19730 * C20417 -
            C19725 * C20418) *
               C118 +
           (C19727 * C1099 - C19722 * C1106 + C19728 * C2476 - C19723 * C2481 +
            C19729 * C3471 - C19724 * C3474 + C19730 * C20419 -
            C19725 * C20420) *
               C50266) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C50170 * C1018 +
           ((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C22366 - C22367 + C22368 - C22369) * C5118 +
            (C22370 - C22371 + C22372 - C22373) * C5115 +
            (C22374 - C22375 + C22376 - C22377) * C5119 +
            (C22378 - C22379 + C22380 - C22381) * C5116) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C50170 * C1018 +
           ((C17160 - C17159 + C17162 - C17161) * C5117 +
            (C17164 - C17163 + C17166 - C17165) * C5114 +
            (C17889 - C17890 + C17891 - C17892) * C5118 +
            (C17893 - C17894 + C17895 - C17896) * C5115 +
            (C22382 - C22383 + C22384 - C22385) * C5119 +
            (C22386 - C22387 + C22388 - C22389) * C5116) *
               C50109 * C50170 * C50206) *
              C1021 +
          ((C17003 * C5117 + C17004 * C5114 +
            (C17346 - C17345 + C17348 - C17347) * C5118 +
            (C17350 - C17349 + C17352 - C17351) * C5115 +
            (C17361 - C17362 + C17363 - C17364) * C5119 +
            (C17365 - C17366 + C17367 - C17368) * C5116) *
               C50109 * C50170 * C1018 +
           (C17527 * C5117 + C17528 * C5114 +
            (C17898 - C17897 + C17900 - C17899) * C5118 +
            (C17902 - C17901 + C17904 - C17903) * C5115 +
            (C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
             C50302 * C2661) *
                C5119 +
            (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
             C50302 * C2665) *
                C5116) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
               C5117 +
           (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
               C5114 +
           (C21836 - C21837 + C21838 - C21839) * C5118 +
           (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
           C21879 * C5116) *
              C50109 * C50170 * C1089 +
          ((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
               C5117 +
           (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
               C5114 +
           (C22366 - C22367 + C22368 - C22369) * C5118 +
           (C22370 - C22371 + C22372 - C22373) * C5115 +
           (C22374 - C22375 + C22376 - C22377) * C5119 +
           (C22378 - C22379 + C22380 - C22381) * C5116) *
              C50109 * C50170 * C1090 +
          ((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
               C5117 +
           (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
               C5114 +
           (C16955 * C1559 - C16960 * C1555 + C50302 * C3203 - C16961 * C3200) *
               C5118 +
           (C16955 * C1567 - C16960 * C1560 + C50302 * C3209 - C16961 * C3204) *
               C5115 +
           (C16955 * C2657 - C16960 * C2654 + C50302 * C3624 - C16961 * C3622) *
               C5119 +
           (C16955 * C2663 - C16960 * C2658 + C50302 * C3628 - C16961 * C3625) *
               C5116) *
              C50109 * C50170 * C1091 +
          ((C16960 * C1094 - C16955 * C1098 + C16961 * C2472 - C50302 * C2475) *
               C5117 +
           (C16960 * C1099 - C16955 * C1106 + C16961 * C2476 - C50302 * C2481) *
               C5114 +
           (C16960 * C3200 - C16955 * C3203 + C16961 * C4116 - C50302 * C4118) *
               C5118 +
           (C16960 * C3204 - C16955 * C3209 + C16961 * C4119 - C50302 * C4122) *
               C5115 +
           (C16960 * C3622 - C16955 * C3624 + C16961 * C20519 -
            C50302 * C20520) *
               C5119 +
           (C16960 * C3625 - C16955 * C3628 + C16961 * C20521 -
            C50302 * C20522) *
               C5116) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
              C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                 C118 +
             (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
              C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                 C50266) *
                C50109 * C1669 +
            ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
              C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
              C19725 * C3203) *
                 C118 +
             (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
              C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
              C19725 * C3209) *
                 C50266) *
                C50109 * C50234) *
               C50395 +
           (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
              C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
              C19725 * C2475) *
                 C118 +
             (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
              C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
              C19725 * C2481) *
                 C50266) *
                C50109 * C1669 +
            ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
              C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
              C19730 * C4116) *
                 C118 +
             (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
              C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
              C19730 * C4119) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
              C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                 C118 +
             (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
              C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                 C50266) *
                C50109 * C1669 +
            ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
              C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
              C19730 * C3201) *
                 C118 +
             (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
              C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
              C19730 * C3206) *
                 C50266) *
                C50109 * C50234) *
               C50395 +
           (((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
              C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
              C19730 * C2473) *
                 C118 +
             (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
              C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
              C19730 * C2478) *
                 C50266) *
                C50109 * C1669 +
            ((C19727 * C889 - C19722 * C895 + C19728 * C1556 - C19723 * C1561 +
              C19729 * C3201 - C19724 * C3205 + C19730 * C4117 -
              C19725 * C4120) *
                 C118 +
             (C19727 * C896 - C19722 * C904 + C19728 * C1562 - C19723 * C1568 +
              C19729 * C3206 - C19724 * C3210 + C19730 * C4121 -
              C19725 * C4123) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C118 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50266) *
                 C16957 +
             ((C16963 - C16964 + C16965 - C16966) * C118 +
              (C16967 - C16968 + C16969 - C16970) * C50266) *
                 C16958 +
             C17011 * C16959) *
                C1669 +
            (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                  C118 +
              (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                  C50266) *
                 C16957 +
             ((C17337 - C17338 + C17339 - C17340) * C118 +
              (C17341 - C17342 + C17343 - C17344) * C50266) *
                 C16958 +
             C17694 * C16959) *
                C50234) *
               C50395 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C118 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50266) *
                 C16957 +
             ((C17159 - C17160 + C17161 - C17162) * C118 +
              (C17163 - C17164 + C17165 - C17166) * C50266) *
                 C16958 +
             C17531 * C16959) *
                C1669 +
            (((C16955 * C893 - C16960 * C888 + C50302 * C1559 -
               C16961 * C1555) *
                  C118 +
              (C16955 * C903 - C16960 * C894 + C50302 * C1567 -
               C16961 * C1560) *
                  C50266) *
                 C16957 +
             ((C17889 - C17890 + C17891 - C17892) * C118 +
              (C17893 - C17894 + C17895 - C17896) * C50266) *
                 C16958 +
             ((C17897 - C17898 + C17899 - C17900) * C118 +
              (C17901 - C17902 + C17903 - C17904) * C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50387 +
          (((((C16964 - C16963 + C16966 - C16965) * C118 +
              (C16968 - C16967 + C16970 - C16969) * C50266) *
                 C16957 +
             ((C16972 - C16971 + C16974 - C16973) * C118 +
              (C16976 - C16975 + C16978 - C16977) * C50266) *
                 C16958 +
             C17012 * C16959) *
                C1669 +
            (((C17338 - C17337 + C17340 - C17339) * C118 +
              (C17342 - C17341 + C17344 - C17343) * C50266) *
                 C16957 +
             ((C17346 - C17345 + C17348 - C17347) * C118 +
              (C17350 - C17349 + C17352 - C17351) * C50266) *
                 C16958 +
             ((C17682 - C17683 + C17684 - C17685) * C118 +
              (C17686 - C17687 + C17688 - C17689) * C50266) *
                 C16959) *
                C50234) *
               C50395 +
           ((((C17160 - C17159 + C17162 - C17161) * C118 +
              (C17164 - C17163 + C17166 - C17165) * C50266) *
                 C16957 +
             ((C17168 - C17167 + C17170 - C17169) * C118 +
              (C17172 - C17171 + C17174 - C17173) * C50266) *
                 C16958 +
             ((C17519 - C17520 + C17521 - C17522) * C118 +
              (C17523 - C17524 + C17525 - C17526) * C50266) *
                 C16959) *
                C1669 +
            (((C17890 - C17889 + C17892 - C17891) * C118 +
              (C17894 - C17893 + C17896 - C17895) * C50266) *
                 C16957 +
             ((C17898 - C17897 + C17900 - C17899) * C118 +
              (C17902 - C17901 + C17904 - C17903) * C50266) *
                 C16958 +
             ((C16960 * C891 - C16955 * C899 + C16961 * C1558 -
               C50302 * C1565) *
                  C118 +
              (C16960 * C900 - C16955 * C906 + C16961 * C1566 -
               C50302 * C1570) *
                  C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C5117 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C5114 +
             (C21836 - C21837 + C21838 - C21839) * C5118 +
             (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
             C21879 * C5116) *
                C50109 * C1669 +
            ((C21837 - C21836 + C21839 - C21838) * C5117 +
             (C21841 - C21840 + C21843 - C21842) * C5114 +
             (C21845 - C21844 + C21847 - C21846) * C5118 +
             (C21849 - C21848 + C21851 - C21850) * C5115 + C23706 * C5119 +
             C23707 * C5116) *
                C50109 * C50234) *
               C50395 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C5117 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C5114 +
             (C22366 - C22367 + C22368 - C22369) * C5118 +
             (C22370 - C22371 + C22372 - C22373) * C5115 + C22796 * C5119 +
             C22797 * C5116) *
                C50109 * C1669 +
            ((C22367 - C22366 + C22369 - C22368) * C5117 +
             (C22371 - C22370 + C22373 - C22372) * C5114 +
             (C22375 - C22374 + C22377 - C22376) * C5118 +
             (C22379 - C22378 + C22381 - C22380) * C5115 +
             (C22788 - C22789 + C22790 - C22791) * C5119 +
             (C22792 - C22793 + C22794 - C22795) * C5116) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C16964 - C16963 + C16966 - C16965) * C5117 +
             (C16968 - C16967 + C16970 - C16969) * C5114 +
             (C17337 - C17338 + C17339 - C17340) * C5118 +
             (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
             C21877 * C5116) *
                C50109 * C1669 +
            ((C17338 - C17337 + C17340 - C17339) * C5117 +
             (C17342 - C17341 + C17344 - C17343) * C5114 +
             (C17353 - C17354 + C17355 - C17356) * C5118 +
             (C17357 - C17358 + C17359 - C17360) * C5115 +
             (C21864 - C21865 + C21866 - C21867) * C5119 +
             (C21868 - C21869 + C21870 - C21871) * C5116) *
                C50109 * C50234) *
               C50395 +
           (((C17160 - C17159 + C17162 - C17161) * C5117 +
             (C17164 - C17163 + C17166 - C17165) * C5114 +
             (C17889 - C17890 + C17891 - C17892) * C5118 +
             (C17893 - C17894 + C17895 - C17896) * C5115 +
             (C22382 - C22383 + C22384 - C22385) * C5119 +
             (C22386 - C22387 + C22388 - C22389) * C5116) *
                C50109 * C1669 +
            ((C17890 - C17889 + C17892 - C17891) * C5117 +
             (C17894 - C17893 + C17896 - C17895) * C5114 +
             (C22383 - C22382 + C22385 - C22384) * C5118 +
             (C22387 - C22386 + C22389 - C22388) * C5115 +
             (C16960 * C4516 - C16955 * C4522 + C16961 * C4517 -
              C50302 * C4523) *
                 C5119 +
             (C16960 * C4524 - C16955 * C4528 + C16961 * C4525 -
              C50302 * C4529) *
                 C5116) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50442 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50443 +
           ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
             C19724 * C2657 - C19729 * C2654 + C19725 * C3624 -
             C19730 * C3622) *
                C118 +
            (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
             C19724 * C2663 - C19729 * C2658 + C19725 * C3628 -
             C19730 * C3625) *
                C50266) *
               C50109 * C2085) *
              C50395 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50442 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C50443 +
           ((C19727 * C1208 - C19722 * C1212 + C19728 * C2654 - C19723 * C2657 +
             C19729 * C3622 - C19724 * C3624 + C19730 * C20519 -
             C19725 * C20520) *
                C118 +
            (C19727 * C1213 - C19722 * C1220 + C19728 * C2658 - C19723 * C2663 +
             C19729 * C3625 - C19724 * C3628 + C19730 * C20521 -
             C19725 * C20522) *
                C50266) *
               C50109 * C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50442 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50443 +
           (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                 C118 +
             (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                 C50266) *
                C16957 +
            ((C17353 - C17354 + C17355 - C17356) * C118 +
             (C17357 - C17358 + C17359 - C17360) * C50266) *
                C16958 +
            ((C17361 - C17362 + C17363 - C17364) * C118 +
             (C17365 - C17366 + C17367 - C17368) * C50266) *
                C16959) *
               C2085) *
              C50395 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50442 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C50443 +
           (((C16960 * C1208 - C16955 * C1212 + C16961 * C2654 -
              C50302 * C2657) *
                 C118 +
             (C16960 * C1213 - C16955 * C1220 + C16961 * C2658 -
              C50302 * C2663) *
                 C50266) *
                C16957 +
            ((C16960 * C1209 - C16955 * C1214 + C16961 * C2655 -
              C50302 * C2659) *
                 C118 +
             (C16960 * C1215 - C16955 * C1221 + C16961 * C2660 -
              C50302 * C2664) *
                 C50266) *
                C16958 +
            ((C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
              C50302 * C2661) *
                 C118 +
             (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
              C50302 * C2665) *
                 C50266) *
                C16959) *
               C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C50442 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 + C23706 * C5119 +
            C23707 * C5116) *
               C50109 * C50443 +
           (C21878 * C5117 + C21879 * C5114 +
            (C21853 - C21852 + C21855 - C21854) * C5118 +
            (C21857 - C21856 + C21859 - C21858) * C5115 +
            (C23698 - C23699 + C23700 - C23701) * C5119 +
            (C23702 - C23703 + C23704 - C23705) * C5116) *
               C50109 * C2085) *
              C50395 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C22366 - C22367 + C22368 - C22369) * C5118 +
            (C22370 - C22371 + C22372 - C22373) * C5115 + C22796 * C5119 +
            C22797 * C5116) *
               C50109 * C50442 +
           ((C22367 - C22366 + C22369 - C22368) * C5117 +
            (C22371 - C22370 + C22373 - C22372) * C5114 +
            (C22375 - C22374 + C22377 - C22376) * C5118 +
            (C22379 - C22378 + C22381 - C22380) * C5115 +
            (C22788 - C22789 + C22790 - C22791) * C5119 +
            (C22792 - C22793 + C22794 - C22795) * C5116) *
               C50109 * C50443 +
           (C22796 * C5117 + C22797 * C5114 +
            (C22789 - C22788 + C22791 - C22790) * C5118 +
            (C22793 - C22792 + C22795 - C22794) * C5115 +
            (C16960 * C6384 - C16955 * C6386 + C16961 * C22779 -
             C50302 * C22780) *
                C5119 +
            (C16960 * C6387 - C16955 * C6390 + C16961 * C22781 -
             C50302 * C22782) *
                C5116) *
               C50109 * C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C16955 * C126 - C16960 * C119 + C50302 * C300 -
                  C16961 * C290) *
                     C118 +
                 (C16955 * C140 - C16960 * C127 + C50302 * C320 -
                  C16961 * C301) *
                     C50266) *
                    C16957 +
                ((C16963 - C16964 + C16965 - C16966) * C118 +
                 (C16967 - C16968 + C16969 - C16970) * C50266) *
                    C16958 +
                C17011 * C16959) *
                   C1669 +
               (((C16960 * C455 - C16955 * C465 + C16961 * C888 -
                  C50302 * C893) *
                     C118 +
                 (C16960 * C466 - C16955 * C485 + C16961 * C894 -
                  C50302 * C903) *
                     C50266) *
                    C16957 +
                ((C17337 - C17338 + C17339 - C17340) * C118 +
                 (C17341 - C17342 + C17343 - C17344) * C50266) *
                    C16958 +
                C17694 * C16959) *
                   C50234) *
                  C50154 * C1020 +
              ((((C16964 - C16963 + C16966 - C16965) * C118 +
                 (C16968 - C16967 + C16970 - C16969) * C50266) *
                    C16957 +
                ((C16972 - C16971 + C16974 - C16973) * C118 +
                 (C16976 - C16975 + C16978 - C16977) * C50266) *
                    C16958 +
                C17012 * C16959) *
                   C1669 +
               (((C17338 - C17337 + C17340 - C17339) * C118 +
                 (C17342 - C17341 + C17344 - C17343) * C50266) *
                    C16957 +
                ((C17346 - C17345 + C17348 - C17347) * C118 +
                 (C17350 - C17349 + C17352 - C17351) * C50266) *
                    C16958 +
                ((C17682 - C17683 + C17684 - C17685) * C118 +
                 (C17686 - C17687 + C17688 - C17689) * C50266) *
                    C16959) *
                   C50234) *
                  C50154 * C1021 +
              ((C17011 * C16957 +
                ((C16980 - C16979 + C16982 - C16981) * C118 +
                 (C16984 - C16983 + C16986 - C16985) * C50266) *
                    C16958 +
                ((C16987 - C16988 + C16989 - C16990) * C118 +
                 (C16991 - C16992 + C16993 - C16994) * C50266) *
                    C16959) *
                   C1669 +
               (C17694 * C16957 +
                ((C17683 - C17682 + C17685 - C17684) * C118 +
                 (C17687 - C17686 + C17689 - C17688) * C50266) *
                    C16958 +
                ((C16960 * C463 - C16955 * C481 + C16961 * C892 -
                  C50302 * C901) *
                     C118 +
                 (C16960 * C482 - C16955 * C493 + C16961 * C902 -
                  C50302 * C907) *
                     C50266) *
                    C16959) *
                   C50234) *
                  C50154 * C1022) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C16955 * C126 - C16960 * C119 + C50302 * C300 -
                  C16961 * C290) *
                     C118 +
                 (C16955 * C140 - C16960 * C127 + C50302 * C320 -
                  C16961 * C301) *
                     C50266) *
                    C16957 +
                ((C16963 - C16964 + C16965 - C16966) * C118 +
                 (C16967 - C16968 + C16969 - C16970) * C50266) *
                    C16958 +
                C17011 * C16959) *
                   C1669 +
               (((C16960 * C455 - C16955 * C465 + C16961 * C888 -
                  C50302 * C893) *
                     C118 +
                 (C16960 * C466 - C16955 * C485 + C16961 * C894 -
                  C50302 * C903) *
                     C50266) *
                    C16957 +
                ((C17337 - C17338 + C17339 - C17340) * C118 +
                 (C17341 - C17342 + C17343 - C17344) * C50266) *
                    C16958 +
                C17694 * C16959) *
                   C50234) *
                  C285 +
              ((((C16960 * C290 - C16955 * C300 + C16961 * C294 -
                  C50302 * C308) *
                     C118 +
                 (C16960 * C301 - C16955 * C320 + C16961 * C309 -
                  C50302 * C324) *
                     C50266) *
                    C16957 +
                ((C17159 - C17160 + C17161 - C17162) * C118 +
                 (C17163 - C17164 + C17165 - C17166) * C50266) *
                    C16958 +
                C17531 * C16959) *
                   C1669 +
               (((C16955 * C893 - C16960 * C888 + C50302 * C1559 -
                  C16961 * C1555) *
                     C118 +
                 (C16955 * C903 - C16960 * C894 + C50302 * C1567 -
                  C16961 * C1560) *
                     C50266) *
                    C16957 +
                ((C17889 - C17890 + C17891 - C17892) * C118 +
                 (C17893 - C17894 + C17895 - C17896) * C50266) *
                    C16958 +
                ((C17897 - C17898 + C17899 - C17900) * C118 +
                 (C17901 - C17902 + C17903 - C17904) * C50266) *
                    C16959) *
                   C50234) *
                  C286 +
              ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 -
                  C16961 * C1094) *
                     C118 +
                 (C16955 * C324 - C16960 * C309 + C50302 * C1106 -
                  C16961 * C1099) *
                     C50266) *
                    C16957 +
                ((C17175 - C17176 + C17177 - C17178) * C118 +
                 (C17179 - C17180 + C17181 - C17182) * C50266) *
                    C16958 +
                ((C17183 - C17184 + C17185 - C17186) * C118 +
                 (C17187 - C17188 + C17189 - C17190) * C50266) *
                    C16959) *
                   C1669 +
               (((C16960 * C1555 - C16955 * C1559 + C16961 * C3200 -
                  C50302 * C3203) *
                     C118 +
                 (C16960 * C1560 - C16955 * C1567 + C16961 * C3204 -
                  C50302 * C3209) *
                     C50266) *
                    C16957 +
                ((C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
                  C50302 * C3205) *
                     C118 +
                 (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
                  C50302 * C3210) *
                     C50266) *
                    C16958 +
                ((C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
                  C50302 * C3207) *
                     C118 +
                 (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
                  C50302 * C3211) *
                     C50266) *
                    C16959) *
                   C50234) *
                  C287) *
             C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C118 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50266) *
               C16957 +
           ((C16963 - C16964 + C16965 - C16966) * C118 +
            (C16967 - C16968 + C16969 - C16970) * C50266) *
               C16958 +
           C17011 * C16959) *
              C1835 +
          (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                C118 +
            (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                C50266) *
               C16957 +
           ((C17337 - C17338 + C17339 - C17340) * C118 +
            (C17341 - C17342 + C17343 - C17344) * C50266) *
               C16958 +
           C17694 * C16959) *
              C1836 +
          (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                C118 +
            (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                C50266) *
               C16957 +
           ((C17353 - C17354 + C17355 - C17356) * C118 +
            (C17357 - C17358 + C17359 - C17360) * C50266) *
               C16958 +
           ((C17361 - C17362 + C17363 - C17364) * C118 +
            (C17365 - C17366 + C17367 - C17368) * C50266) *
               C16959) *
              C1837 +
          (((C16960 * C1839 - C16955 * C1843 + C16961 * C4514 -
             C50302 * C4518) *
                C118 +
            (C16960 * C1844 - C16955 * C1851 + C16961 * C4520 -
             C50302 * C4526) *
                C50266) *
               C16957 +
           ((C16960 * C1840 - C16955 * C1845 + C16961 * C4516 -
             C50302 * C4522) *
                C118 +
            (C16960 * C1846 - C16955 * C1852 + C16961 * C4524 -
             C50302 * C4528) *
                C50266) *
               C16958 +
           ((C16960 * C1841 - C16955 * C1847 + C16961 * C5970 -
             C50302 * C5971) *
                C118 +
            (C16960 * C1848 - C16955 * C1853 + C16961 * C5972 -
             C50302 * C5973) *
                C50266) *
               C16959) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C1669 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C457 - C19722 * C469 + C19728 * C890 - C19723 * C897 +
             C19729 * C1557 - C19724 * C1563 + C19730 * C3202 -
             C19725 * C3207) *
                C118 +
            (C19727 * C470 - C19722 * C487 + C19728 * C898 - C19723 * C905 +
             C19729 * C1564 - C19724 * C1569 + C19730 * C3208 -
             C19725 * C3211) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C285 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C1669 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C50234) *
              C286 +
          (((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C1555 - C19722 * C1559 + C19728 * C3200 - C19723 * C3203 +
             C19729 * C4116 - C19724 * C4118 + C19730 * C20849 -
             C19725 * C20850) *
                C118 +
            (C19727 * C1560 - C19722 * C1567 + C19728 * C3204 - C19723 * C3209 +
             C19729 * C4119 - C19724 * C4122 + C19730 * C20851 -
             C19725 * C20852) *
                C50266) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C1835 +
          ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
            C19729 * C1555 - C19724 * C1559 + C19730 * C3200 - C19725 * C3203) *
               C118 +
           (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
            C19729 * C1560 - C19724 * C1567 + C19730 * C3204 - C19725 * C3209) *
               C50266) *
              C50109 * C1836 +
          ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
            C19724 * C2657 - C19729 * C2654 + C19725 * C3624 - C19730 * C3622) *
               C118 +
           (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
            C19724 * C2663 - C19729 * C2658 + C19725 * C3628 - C19730 * C3625) *
               C50266) *
              C50109 * C1837 +
          ((C19727 * C1839 - C19722 * C1843 + C19728 * C4514 - C19723 * C4518 +
            C19729 * C4515 - C19724 * C4519 + C19730 * C21115 -
            C19725 * C21116) *
               C118 +
           (C19727 * C1844 - C19722 * C1851 + C19728 * C4520 - C19723 * C4526 +
            C19729 * C4521 - C19724 * C4527 + C19730 * C21117 -
            C19725 * C21118) *
               C50266) *
              C50109 * C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C1669 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 +
            (C21852 - C21853 + C21854 - C21855) * C5119 +
            (C21856 - C21857 + C21858 - C21859) * C5116) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C1669 +
           ((C17338 - C17337 + C17340 - C17339) * C5117 +
            (C17342 - C17341 + C17344 - C17343) * C5114 +
            (C17353 - C17354 + C17355 - C17356) * C5118 +
            (C17357 - C17358 + C17359 - C17360) * C5115 +
            (C21864 - C21865 + C21866 - C21867) * C5119 +
            (C21868 - C21869 + C21870 - C21871) * C5116) *
               C50109 * C50234) *
              C50154 * C1021 +
          ((C17003 * C5117 + C17004 * C5114 +
            (C17346 - C17345 + C17348 - C17347) * C5118 +
            (C17350 - C17349 + C17352 - C17351) * C5115 +
            (C17361 - C17362 + C17363 - C17364) * C5119 +
            (C17365 - C17366 + C17367 - C17368) * C5116) *
               C50109 * C1669 +
           (C17690 * C5117 + C17691 * C5114 +
            (C17362 - C17361 + C17364 - C17363) * C5118 +
            (C17366 - C17365 + C17368 - C17367) * C5115 +
            (C16960 * C1841 - C16955 * C1847 + C16961 * C5970 -
             C50302 * C5971) *
                C5119 +
            (C16960 * C1848 - C16955 * C1853 + C16961 * C5972 -
             C50302 * C5973) *
                C5116) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C1669 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 +
            (C21852 - C21853 + C21854 - C21855) * C5119 +
            (C21856 - C21857 + C21858 - C21859) * C5116) *
               C50109 * C50234) *
              C285 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C22366 - C22367 + C22368 - C22369) * C5118 +
            (C22370 - C22371 + C22372 - C22373) * C5115 + C22796 * C5119 +
            C22797 * C5116) *
               C50109 * C1669 +
           ((C22367 - C22366 + C22369 - C22368) * C5117 +
            (C22371 - C22370 + C22373 - C22372) * C5114 +
            (C22375 - C22374 + C22377 - C22376) * C5118 +
            (C22379 - C22378 + C22381 - C22380) * C5115 +
            (C22788 - C22789 + C22790 - C22791) * C5119 +
            (C22792 - C22793 + C22794 - C22795) * C5116) *
               C50109 * C50234) *
              C286 +
          (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C5117 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C5114 +
            (C23284 - C23285 + C23286 - C23287) * C5118 +
            (C23288 - C23289 + C23290 - C23291) * C5115 +
            (C23292 - C23293 + C23294 - C23295) * C5119 +
            (C23296 - C23297 + C23298 - C23299) * C5116) *
               C50109 * C1669 +
           ((C23285 - C23284 + C23287 - C23286) * C5117 +
            (C23289 - C23288 + C23291 - C23290) * C5114 +
            (C23293 - C23292 + C23295 - C23294) * C5118 +
            (C23297 - C23296 + C23299 - C23298) * C5115 +
            (C16960 * C4515 - C16955 * C4519 + C16961 * C21115 -
             C50302 * C21116) *
                C5119 +
            (C16960 * C4521 - C16955 * C4527 + C16961 * C21117 -
             C50302 * C21118) *
                C5116) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
               C5117 +
           (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
               C5114 +
           (C21836 - C21837 + C21838 - C21839) * C5118 +
           (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
           C21879 * C5116) *
              C50109 * C1835 +
          ((C21837 - C21836 + C21839 - C21838) * C5117 +
           (C21841 - C21840 + C21843 - C21842) * C5114 +
           (C21845 - C21844 + C21847 - C21846) * C5118 +
           (C21849 - C21848 + C21851 - C21850) * C5115 + C23706 * C5119 +
           C23707 * C5116) *
              C50109 * C1836 +
          (C21878 * C5117 + C21879 * C5114 +
           (C21853 - C21852 + C21855 - C21854) * C5118 +
           (C21857 - C21856 + C21859 - C21858) * C5115 +
           (C23698 - C23699 + C23700 - C23701) * C5119 +
           (C23702 - C23703 + C23704 - C23705) * C5116) *
              C50109 * C1837 +
          (C23706 * C5117 + C23707 * C5114 +
           (C23699 - C23698 + C23701 - C23700) * C5118 +
           (C23703 - C23702 + C23705 - C23704) * C5115 +
           (C16960 * C7282 - C16955 * C7284 + C16961 * C23689 -
            C50302 * C23690) *
               C5119 +
           (C16960 * C7285 - C16955 * C7288 + C16961 * C23691 -
            C50302 * C23692) *
               C5116) *
              C50109 * C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50442 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50443 +
           ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
             C19724 * C2657 - C19729 * C2654 + C19725 * C3624 -
             C19730 * C3622) *
                C118 +
            (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
             C19724 * C2663 - C19729 * C2658 + C19725 * C3628 -
             C19730 * C3625) *
                C50266) *
               C50109 * C2085) *
              C50154 * C50387 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50442 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C50443 +
           ((C19727 * C460 - C19722 * C475 + C19728 * C1209 - C19723 * C1214 +
             C19729 * C2655 - C19724 * C2659 + C19730 * C3623 -
             C19725 * C3626) *
                C118 +
            (C19727 * C476 - C19722 * C490 + C19728 * C1215 - C19723 * C1221 +
             C19729 * C2660 - C19724 * C2664 + C19730 * C3627 -
             C19725 * C3629) *
                C50266) *
               C50109 * C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50442 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50443 +
           (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                 C118 +
             (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                 C50266) *
                C16957 +
            ((C17353 - C17354 + C17355 - C17356) * C118 +
             (C17357 - C17358 + C17359 - C17360) * C50266) *
                C16958 +
            ((C17361 - C17362 + C17363 - C17364) * C118 +
             (C17365 - C17366 + C17367 - C17368) * C50266) *
                C16959) *
               C2085) *
              C50154 * C50387 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50442 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C17682 - C17683 + C17684 - C17685) * C118 +
             (C17686 - C17687 + C17688 - C17689) * C50266) *
                C16959) *
               C50443 +
           (((C17354 - C17353 + C17356 - C17355) * C118 +
             (C17358 - C17357 + C17360 - C17359) * C50266) *
                C16957 +
            ((C17362 - C17361 + C17364 - C17363) * C118 +
             (C17366 - C17365 + C17368 - C17367) * C50266) *
                C16958 +
            ((C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
                 C118 +
             (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
                 C50266) *
                C16959) *
               C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C50442 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 + C23706 * C5119 +
            C23707 * C5116) *
               C50109 * C50443 +
           (C21878 * C5117 + C21879 * C5114 +
            (C21853 - C21852 + C21855 - C21854) * C5118 +
            (C21857 - C21856 + C21859 - C21858) * C5115 +
            (C23698 - C23699 + C23700 - C23701) * C5119 +
            (C23702 - C23703 + C23704 - C23705) * C5116) *
               C50109 * C2085) *
              C50154 * C50387 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C50442 +
           ((C17338 - C17337 + C17340 - C17339) * C5117 +
            (C17342 - C17341 + C17344 - C17343) * C5114 +
            (C17353 - C17354 + C17355 - C17356) * C5118 +
            (C17357 - C17358 + C17359 - C17360) * C5115 +
            (C21864 - C21865 + C21866 - C21867) * C5119 +
            (C21868 - C21869 + C21870 - C21871) * C5116) *
               C50109 * C50443 +
           (C21876 * C5117 + C21877 * C5114 +
            (C21865 - C21864 + C21867 - C21866) * C5118 +
            (C21869 - C21868 + C21871 - C21870) * C5115 +
            (C16960 * C5425 - C16955 * C5429 + C16961 * C6385 -
             C50302 * C6388) *
                C5119 +
            (C16960 * C5430 - C16955 * C5434 + C16961 * C6389 -
             C50302 * C6391) *
                C5116) *
               C50109 * C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C1669 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C285 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C1669 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C50234) *
              C286 +
          ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C1669 +
           (((C16960 * C1555 - C16955 * C1559 + C16961 * C3200 -
              C50302 * C3203) *
                 C118 +
             (C16960 * C1560 - C16955 * C1567 + C16961 * C3204 -
              C50302 * C3209) *
                 C50266) *
                C16957 +
            ((C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
              C50302 * C3205) *
                 C118 +
             (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
              C50302 * C3210) *
                 C50266) *
                C16958 +
            ((C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
              C50302 * C3207) *
                 C118 +
             (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
              C50302 * C3211) *
                 C50266) *
                C16959) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C1669 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C50154 * C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C1669 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C17682 - C17683 + C17684 - C17685) * C118 +
             (C17686 - C17687 + C17688 - C17689) * C50266) *
                C16959) *
               C50234) *
              C50154 * C1021 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C1669 +
           (C17694 * C16957 +
            ((C17683 - C17682 + C17685 - C17684) * C118 +
             (C17687 - C17686 + C17689 - C17688) * C50266) *
                C16958 +
            ((C16960 * C463 - C16955 * C481 + C16961 * C892 - C50302 * C901) *
                 C118 +
             (C16960 * C482 - C16955 * C493 + C16961 * C902 - C50302 * C907) *
                 C50266) *
                C16959) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C1669 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C457 - C19722 * C469 + C19728 * C890 - C19723 * C897 +
             C19729 * C1557 - C19724 * C1563 + C19730 * C3202 -
             C19725 * C3207) *
                C118 +
            (C19727 * C470 - C19722 * C487 + C19728 * C898 - C19723 * C905 +
             C19729 * C1564 - C19724 * C1569 + C19730 * C3208 -
             C19725 * C3211) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C285 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C1669 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C50234) *
              C286 +
          (((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C1555 - C19722 * C1559 + C19728 * C3200 - C19723 * C3203 +
             C19729 * C4116 - C19724 * C4118 + C19730 * C20849 -
             C19725 * C20850) *
                C118 +
            (C19727 * C1560 - C19722 * C1567 + C19728 * C3204 - C19723 * C3209 +
             C19729 * C4119 - C19724 * C4122 + C19730 * C20851 -
             C19725 * C20852) *
                C50266) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C1669 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 +
            (C21852 - C21853 + C21854 - C21855) * C5119 +
            (C21856 - C21857 + C21858 - C21859) * C5116) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C16964 - C16963 + C16966 - C16965) * C5117 +
            (C16968 - C16967 + C16970 - C16969) * C5114 +
            (C17337 - C17338 + C17339 - C17340) * C5118 +
            (C17341 - C17342 + C17343 - C17344) * C5115 + C21876 * C5119 +
            C21877 * C5116) *
               C50109 * C1669 +
           ((C17338 - C17337 + C17340 - C17339) * C5117 +
            (C17342 - C17341 + C17344 - C17343) * C5114 +
            (C17353 - C17354 + C17355 - C17356) * C5118 +
            (C17357 - C17358 + C17359 - C17360) * C5115 +
            (C21864 - C21865 + C21866 - C21867) * C5119 +
            (C21868 - C21869 + C21870 - C21871) * C5116) *
               C50109 * C50234) *
              C50154 * C1021 +
          ((C17003 * C5117 + C17004 * C5114 +
            (C17346 - C17345 + C17348 - C17347) * C5118 +
            (C17350 - C17349 + C17352 - C17351) * C5115 +
            (C17361 - C17362 + C17363 - C17364) * C5119 +
            (C17365 - C17366 + C17367 - C17368) * C5116) *
               C50109 * C1669 +
           (C17690 * C5117 + C17691 * C5114 +
            (C17362 - C17361 + C17364 - C17363) * C5118 +
            (C17366 - C17365 + C17368 - C17367) * C5115 +
            (C16960 * C1841 - C16955 * C1847 + C16961 * C5970 -
             C50302 * C5971) *
                C5119 +
            (C16960 * C1848 - C16955 * C1853 + C16961 * C5972 -
             C50302 * C5973) *
                C5116) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C5117 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C5114 +
            (C21836 - C21837 + C21838 - C21839) * C5118 +
            (C21840 - C21841 + C21842 - C21843) * C5115 + C21878 * C5119 +
            C21879 * C5116) *
               C50109 * C1669 +
           ((C21837 - C21836 + C21839 - C21838) * C5117 +
            (C21841 - C21840 + C21843 - C21842) * C5114 +
            (C21845 - C21844 + C21847 - C21846) * C5118 +
            (C21849 - C21848 + C21851 - C21850) * C5115 +
            (C21852 - C21853 + C21854 - C21855) * C5119 +
            (C21856 - C21857 + C21858 - C21859) * C5116) *
               C50109 * C50234) *
              C285 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C5117 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C5114 +
            (C22366 - C22367 + C22368 - C22369) * C5118 +
            (C22370 - C22371 + C22372 - C22373) * C5115 + C22796 * C5119 +
            C22797 * C5116) *
               C50109 * C1669 +
           ((C22367 - C22366 + C22369 - C22368) * C5117 +
            (C22371 - C22370 + C22373 - C22372) * C5114 +
            (C22375 - C22374 + C22377 - C22376) * C5118 +
            (C22379 - C22378 + C22381 - C22380) * C5115 +
            (C22788 - C22789 + C22790 - C22791) * C5119 +
            (C22792 - C22793 + C22794 - C22795) * C5116) *
               C50109 * C50234) *
              C286 +
          (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C5117 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C5114 +
            (C23284 - C23285 + C23286 - C23287) * C5118 +
            (C23288 - C23289 + C23290 - C23291) * C5115 +
            (C23292 - C23293 + C23294 - C23295) * C5119 +
            (C23296 - C23297 + C23298 - C23299) * C5116) *
               C50109 * C1669 +
           ((C23285 - C23284 + C23287 - C23286) * C5117 +
            (C23289 - C23288 + C23291 - C23290) * C5114 +
            (C23293 - C23292 + C23295 - C23294) * C5118 +
            (C23297 - C23296 + C23299 - C23298) * C5115 +
            (C16960 * C4515 - C16955 * C4519 + C16961 * C21115 -
             C50302 * C21116) *
                C5119 +
            (C16960 * C4521 - C16955 * C4527 + C16961 * C21117 -
             C50302 * C21118) *
                C5116) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C50170 * C50395 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 +
             (C17890 - C17889 + C17892 - C17891) * C10682 +
             (C17894 - C17893 + C17896 - C17895) * C50330) *
                C50114) *
               C50170 * C50206) *
              C50438 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C50170 * C50395 +
           (((C17160 - C17159 + C17162 - C17161) * C10681 +
             (C17164 - C17163 + C17166 - C17165) * C50409 +
             (C17889 - C17890 + C17891 - C17892) * C10682 +
             (C17893 - C17894 + C17895 - C17896) * C50330) *
                C50380 +
            ((C17168 - C17167 + C17170 - C17169) * C10681 +
             (C17172 - C17171 + C17174 - C17173) * C50409 +
             (C17897 - C17898 + C17899 - C17900) * C10682 +
             (C17901 - C17902 + C17903 - C17904) * C50330) *
                C50114) *
               C50170 * C50206) *
              C50439 +
          (((C17003 * C10681 + C17004 * C50409 +
             (C17346 - C17345 + C17348 - C17347) * C10682 +
             (C17350 - C17349 + C17352 - C17351) * C50330) *
                C50380 +
            ((C16980 - C16979 + C16982 - C16981) * C10681 +
             (C16984 - C16983 + C16986 - C16985) * C50409 +
             (C17682 - C17683 + C17684 - C17685) * C10682 +
             (C17686 - C17687 + C17688 - C17689) * C50330) *
                C50114) *
               C50170 * C50395 +
           ((C17527 * C10681 + C17528 * C50409 +
             (C17898 - C17897 + C17900 - C17899) * C10682 +
             (C17902 - C17901 + C17904 - C17903) * C50330) *
                C50380 +
            ((C17520 - C17519 + C17522 - C17521) * C10681 +
             (C17524 - C17523 + C17526 - C17525) * C50409 +
             (C16960 * C891 - C16955 * C899 + C16961 * C1558 - C50302 * C1565) *
                 C10682 +
             (C16960 * C900 - C16955 * C906 + C16961 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C10681 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50409 +
              (C21836 - C21837 + C21838 - C21839) * C10682 +
              (C21840 - C21841 + C21842 - C21843) * C50330) *
                 C50380 +
             ((C16963 - C16964 + C16965 - C16966) * C10681 +
              (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
              C27489 * C50330) *
                 C50114) *
                C50396 +
            (((C21837 - C21836 + C21839 - C21838) * C10681 +
              (C21841 - C21840 + C21843 - C21842) * C50409 +
              (C21845 - C21844 + C21847 - C21846) * C10682 +
              (C21849 - C21848 + C21851 - C21850) * C50330) *
                 C50380 +
             (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
              C21877 * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C10681 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50409 +
              (C22366 - C22367 + C22368 - C22369) * C10682 +
              (C22370 - C22371 + C22372 - C22373) * C50330) *
                 C50380 +
             ((C17159 - C17160 + C17161 - C17162) * C10681 +
              (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
              C28155 * C50330) *
                 C50114) *
                C50396 +
            (((C22367 - C22366 + C22369 - C22368) * C10681 +
              (C22371 - C22370 + C22373 - C22372) * C50409 +
              (C22375 - C22374 + C22377 - C22376) * C10682 +
              (C22379 - C22378 + C22381 - C22380) * C50330) *
                 C50380 +
             (C28156 * C10681 + C28157 * C50409 +
              (C22382 - C22383 + C22384 - C22385) * C10682 +
              (C22386 - C22387 + C22388 - C22389) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C288 +
          (((((C16964 - C16963 + C16966 - C16965) * C10681 +
              (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
              C27491 * C50330) *
                 C50380 +
             ((C16972 - C16971 + C16974 - C16973) * C10681 +
              (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
              C17691 * C50330) *
                 C50114) *
                C50396 +
            ((C27488 * C10681 + C27489 * C50409 + C27492 * C10682 +
              C27493 * C50330) *
                 C50380 +
             (C27886 * C10681 + C27887 * C50409 +
              (C17361 - C17362 + C17363 - C17364) * C10682 +
              (C17365 - C17366 + C17367 - C17368) * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C17160 - C17159 + C17162 - C17161) * C10681 +
              (C17164 - C17163 + C17166 - C17165) * C50409 + C28156 * C10682 +
              C28157 * C50330) *
                 C50380 +
             ((C17168 - C17167 + C17170 - C17169) * C10681 +
              (C17172 - C17171 + C17174 - C17173) * C50409 +
              (C17897 - C17898 + C17899 - C17900) * C10682 +
              (C17901 - C17902 + C17903 - C17904) * C50330) *
                 C50114) *
                C50396 +
            ((C28154 * C10681 + C28155 * C50409 +
              (C22383 - C22382 + C22385 - C22384) * C10682 +
              (C22387 - C22386 + C22389 - C22388) * C50330) *
                 C50380 +
             ((C17898 - C17897 + C17900 - C17899) * C10681 +
              (C17902 - C17901 + C17904 - C17903) * C50409 +
              (C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
               C50302 * C2661) *
                  C10682 +
              (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 +
             (C17338 - C17337 + C17340 - C17339) * C10682 +
             (C17342 - C17341 + C17344 - C17343) * C50330) *
                C50114) *
               C50170 * C285 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 +
             (C17890 - C17889 + C17892 - C17891) * C10682 +
             (C17894 - C17893 + C17896 - C17895) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C10681 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50409 +
             (C23284 - C23285 + C23286 - C23287) * C10682 +
             (C23288 - C23289 + C23290 - C23291) * C50330) *
                C50380 +
            ((C17175 - C17176 + C17177 - C17178) * C10681 +
             (C17179 - C17180 + C17181 - C17182) * C50409 +
             (C27274 - C27275 + C27276 - C27277) * C10682 +
             (C27278 - C27279 + C27280 - C27281) * C50330) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 +
             (C17337 - C17338 + C17339 - C17340) * C10682 +
             (C17341 - C17342 + C17343 - C17344) * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C50170 * C285 +
           (((C17160 - C17159 + C17162 - C17161) * C10681 +
             (C17164 - C17163 + C17166 - C17165) * C50409 +
             (C17889 - C17890 + C17891 - C17892) * C10682 +
             (C17893 - C17894 + C17895 - C17896) * C50330) *
                C50380 +
            ((C17168 - C17167 + C17170 - C17169) * C10681 +
             (C17172 - C17171 + C17174 - C17173) * C50409 +
             (C17897 - C17898 + C17899 - C17900) * C10682 +
             (C17901 - C17902 + C17903 - C17904) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C17176 - C17175 + C17178 - C17177) * C10681 +
             (C17180 - C17179 + C17182 - C17181) * C50409 +
             (C27275 - C27274 + C27277 - C27276) * C10682 +
             (C27279 - C27278 + C27281 - C27280) * C50330) *
                C50380 +
            ((C17184 - C17183 + C17186 - C17185) * C10681 +
             (C17188 - C17187 + C17190 - C17189) * C50409 +
             (C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
              C50302 * C3207) *
                 C10682 +
             (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
              C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C10681 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50409 +
            (C21836 - C21837 + C21838 - C21839) * C10682 +
            (C21840 - C21841 + C21842 - C21843) * C50330) *
               C50380 +
           ((C16963 - C16964 + C16965 - C16966) * C10681 +
            (C16967 - C16968 + C16969 - C16970) * C50409 +
            (C17338 - C17337 + C17340 - C17339) * C10682 +
            (C17342 - C17341 + C17344 - C17343) * C50330) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C16964 - C16963 + C16966 - C16965) * C10681 +
            (C16968 - C16967 + C16970 - C16969) * C50409 +
            (C17337 - C17338 + C17339 - C17340) * C10682 +
            (C17341 - C17342 + C17343 - C17344) * C50330) *
               C50380 +
           ((C16972 - C16971 + C16974 - C16973) * C10681 +
            (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
            C17691 * C50330) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C17003 * C10681 + C17004 * C50409 +
            (C17346 - C17345 + C17348 - C17347) * C10682 +
            (C17350 - C17349 + C17352 - C17351) * C50330) *
               C50380 +
           ((C16980 - C16979 + C16982 - C16981) * C10681 +
            (C16984 - C16983 + C16986 - C16985) * C50409 +
            (C17682 - C17683 + C17684 - C17685) * C10682 +
            (C17686 - C17687 + C17688 - C17689) * C50330) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C17005 * C10681 + C17006 * C50409 +
            (C17683 - C17682 + C17685 - C17684) * C10682 +
            (C17687 - C17686 + C17689 - C17688) * C50330) *
               C50380 +
           ((C16988 - C16987 + C16990 - C16989) * C10681 +
            (C16992 - C16991 + C16994 - C16993) * C50409 +
            (C16960 * C463 - C16955 * C481 + C16961 * C892 - C50302 * C901) *
                C10682 +
            (C16960 * C482 - C16955 * C493 + C16961 * C902 - C50302 * C907) *
                C50330) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C452 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C453 +
           ((C21878 * C10681 + C21879 * C50409 +
             (C21853 - C21852 + C21855 - C21854) * C10682 +
             (C21857 - C21856 + C21859 - C21858) * C50330) *
                C50380 +
            (C27492 * C10681 + C27493 * C50409 +
             (C21864 - C21865 + C21866 - C21867) * C10682 +
             (C21868 - C21869 + C21870 - C21871) * C50330) *
                C50114) *
               C454) *
              C50154 * C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C452 +
           ((C27488 * C10681 + C27489 * C50409 + C27492 * C10682 +
             C27493 * C50330) *
                C50380 +
            ((C17346 - C17345 + C17348 - C17347) * C10681 +
             (C17350 - C17349 + C17352 - C17351) * C50409 +
             (C17361 - C17362 + C17363 - C17364) * C10682 +
             (C17365 - C17366 + C17367 - C17368) * C50330) *
                C50114) *
               C453 +
           ((C21876 * C10681 + C21877 * C50409 +
             (C21865 - C21864 + C21867 - C21866) * C10682 +
             (C21869 - C21868 + C21871 - C21870) * C50330) *
                C50380 +
            ((C17362 - C17361 + C17364 - C17363) * C10681 +
             (C17366 - C17365 + C17368 - C17367) * C50409 +
             (C16960 * C1841 - C16955 * C1847 + C16961 * C5970 -
              C50302 * C5971) *
                 C10682 +
             (C16960 * C1848 - C16955 * C1853 + C16961 * C5972 -
              C50302 * C5973) *
                 C50330) *
                C50114) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C50396 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C50234) *
              C50154 * C50438 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C50396 +
           ((C27488 * C10681 + C27489 * C50409 + C27492 * C10682 +
             C27493 * C50330) *
                C50380 +
            (C27886 * C10681 + C27887 * C50409 +
             (C17361 - C17362 + C17363 - C17364) * C10682 +
             (C17365 - C17366 + C17367 - C17368) * C50330) *
                C50114) *
               C50234) *
              C50154 * C50439 +
          (((C17003 * C10681 + C17004 * C50409 + C27886 * C10682 +
             C27887 * C50330) *
                C50380 +
            ((C16980 - C16979 + C16982 - C16981) * C10681 +
             (C16984 - C16983 + C16986 - C16985) * C50409 +
             (C17682 - C17683 + C17684 - C17685) * C10682 +
             (C17686 - C17687 + C17688 - C17689) * C50330) *
                C50114) *
               C50396 +
           ((C17690 * C10681 + C17691 * C50409 +
             (C17362 - C17361 + C17364 - C17363) * C10682 +
             (C17366 - C17365 + C17368 - C17367) * C50330) *
                C50380 +
            ((C17683 - C17682 + C17685 - C17684) * C10681 +
             (C17687 - C17686 + C17689 - C17688) * C50409 +
             (C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
                 C10682 +
             (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C10681 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50409 +
            (C21836 - C21837 + C21838 - C21839) * C10682 +
            (C21840 - C21841 + C21842 - C21843) * C50330) *
               C50380 +
           ((C16963 - C16964 + C16965 - C16966) * C10681 +
            (C16967 - C16968 + C16969 - C16970) * C50409 +
            (C17338 - C17337 + C17340 - C17339) * C10682 +
            (C17342 - C17341 + C17344 - C17343) * C50330) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C16964 - C16963 + C16966 - C16965) * C10681 +
            (C16968 - C16967 + C16970 - C16969) * C50409 +
            (C17337 - C17338 + C17339 - C17340) * C10682 +
            (C17341 - C17342 + C17343 - C17344) * C50330) *
               C50380 +
           ((C16972 - C16971 + C16974 - C16973) * C10681 +
            (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
            C17691 * C50330) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C17003 * C10681 + C17004 * C50409 +
            (C17346 - C17345 + C17348 - C17347) * C10682 +
            (C17350 - C17349 + C17352 - C17351) * C50330) *
               C50380 +
           ((C16980 - C16979 + C16982 - C16981) * C10681 +
            (C16984 - C16983 + C16986 - C16985) * C50409 +
            (C17682 - C17683 + C17684 - C17685) * C10682 +
            (C17686 - C17687 + C17688 - C17689) * C50330) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C17005 * C10681 + C17006 * C50409 +
            (C17683 - C17682 + C17685 - C17684) * C10682 +
            (C17687 - C17686 + C17689 - C17688) * C50330) *
               C50380 +
           ((C16988 - C16987 + C16990 - C16989) * C10681 +
            (C16992 - C16991 + C16994 - C16993) * C50409 +
            (C16960 * C463 - C16955 * C481 + C16961 * C892 - C50302 * C901) *
                C10682 +
            (C16960 * C482 - C16955 * C493 + C16961 * C902 - C50302 * C907) *
                C50330) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 +
             (C17338 - C17337 + C17340 - C17339) * C10682 +
             (C17342 - C17341 + C17344 - C17343) * C50330) *
                C50114) *
               C50170 * C285 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 +
             (C17890 - C17889 + C17892 - C17891) * C10682 +
             (C17894 - C17893 + C17896 - C17895) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C10681 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50409 +
             (C23284 - C23285 + C23286 - C23287) * C10682 +
             (C23288 - C23289 + C23290 - C23291) * C50330) *
                C50380 +
            ((C17175 - C17176 + C17177 - C17178) * C10681 +
             (C17179 - C17180 + C17181 - C17182) * C50409 +
             (C27274 - C27275 + C27276 - C27277) * C10682 +
             (C27278 - C27279 + C27280 - C27281) * C50330) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 +
             (C17337 - C17338 + C17339 - C17340) * C10682 +
             (C17341 - C17342 + C17343 - C17344) * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C50170 * C285 +
           (((C17160 - C17159 + C17162 - C17161) * C10681 +
             (C17164 - C17163 + C17166 - C17165) * C50409 +
             (C17889 - C17890 + C17891 - C17892) * C10682 +
             (C17893 - C17894 + C17895 - C17896) * C50330) *
                C50380 +
            ((C17168 - C17167 + C17170 - C17169) * C10681 +
             (C17172 - C17171 + C17174 - C17173) * C50409 +
             (C17897 - C17898 + C17899 - C17900) * C10682 +
             (C17901 - C17902 + C17903 - C17904) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C17176 - C17175 + C17178 - C17177) * C10681 +
             (C17180 - C17179 + C17182 - C17181) * C50409 +
             (C27275 - C27274 + C27277 - C27276) * C10682 +
             (C27279 - C27278 + C27281 - C27280) * C50330) *
                C50380 +
            ((C17184 - C17183 + C17186 - C17185) * C10681 +
             (C17188 - C17187 + C17190 - C17189) * C50409 +
             (C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
              C50302 * C3207) *
                 C10682 +
             (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
              C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C50170 * C50440 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
             C28155 * C50330) *
                C50114) *
               C50170 * C50441 +
           (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C10681 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50409 +
             (C23284 - C23285 + C23286 - C23287) * C10682 +
             (C23288 - C23289 + C23290 - C23291) * C50330) *
                C50380 +
            ((C17175 - C17176 + C17177 - C17178) * C10681 +
             (C17179 - C17180 + C17181 - C17182) * C50409 +
             (C27274 - C27275 + C27276 - C27277) * C10682 +
             (C27278 - C27279 + C27280 - C27281) * C50330) *
                C50114) *
               C50170 * C1324) *
              C50387 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C50170 * C50440 +
           (((C17160 - C17159 + C17162 - C17161) * C10681 +
             (C17164 - C17163 + C17166 - C17165) * C50409 + C28156 * C10682 +
             C28157 * C50330) *
                C50380 +
            ((C17168 - C17167 + C17170 - C17169) * C10681 +
             (C17172 - C17171 + C17174 - C17173) * C50409 +
             (C17897 - C17898 + C17899 - C17900) * C10682 +
             (C17901 - C17902 + C17903 - C17904) * C50330) *
                C50114) *
               C50170 * C50441 +
           (((C17176 - C17175 + C17178 - C17177) * C10681 +
             (C17180 - C17179 + C17182 - C17181) * C50409 +
             (C27275 - C27274 + C27277 - C27276) * C10682 +
             (C27279 - C27278 + C27281 - C27280) * C50330) *
                C50380 +
            ((C17184 - C17183 + C17186 - C17185) * C10681 +
             (C17188 - C17187 + C17190 - C17189) * C50409 +
             (C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
              C50302 * C3207) *
                 C10682 +
             (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
              C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C1324) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C50396 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C50234) *
              C50440 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
             C28155 * C50330) *
                C50114) *
               C50396 +
           (((C22367 - C22366 + C22369 - C22368) * C10681 +
             (C22371 - C22370 + C22373 - C22372) * C50409 +
             (C22375 - C22374 + C22377 - C22376) * C10682 +
             (C22379 - C22378 + C22381 - C22380) * C50330) *
                C50380 +
            (C28156 * C10681 + C28157 * C50409 +
             (C22382 - C22383 + C22384 - C22385) * C10682 +
             (C22386 - C22387 + C22388 - C22389) * C50330) *
                C50114) *
               C50234) *
              C50441 +
          ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C10681 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50409 +
             (C23284 - C23285 + C23286 - C23287) * C10682 +
             (C23288 - C23289 + C23290 - C23291) * C50330) *
                C50380 +
            ((C17175 - C17176 + C17177 - C17178) * C10681 +
             (C17179 - C17180 + C17181 - C17182) * C50409 +
             (C27274 - C27275 + C27276 - C27277) * C10682 +
             (C27278 - C27279 + C27280 - C27281) * C50330) *
                C50114) *
               C50396 +
           (((C23285 - C23284 + C23287 - C23286) * C10681 +
             (C23289 - C23288 + C23291 - C23290) * C50409 +
             (C23293 - C23292 + C23295 - C23294) * C10682 +
             (C23297 - C23296 + C23299 - C23298) * C50330) *
                C50380 +
            ((C27275 - C27274 + C27277 - C27276) * C10681 +
             (C27279 - C27278 + C27281 - C27280) * C50409 +
             (C16960 * C2655 - C16955 * C2659 + C16961 * C3623 -
              C50302 * C3626) *
                 C10682 +
             (C16960 * C2660 - C16955 * C2664 + C16961 * C3627 -
              C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C1324) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C10681 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50409 +
            (C21836 - C21837 + C21838 - C21839) * C10682 +
            (C21840 - C21841 + C21842 - C21843) * C50330) *
               C50380 +
           ((C16963 - C16964 + C16965 - C16966) * C10681 +
            (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
            C27489 * C50330) *
               C50114) *
              C50170 * C1089 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C10681 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C50409 +
            (C22366 - C22367 + C22368 - C22369) * C10682 +
            (C22370 - C22371 + C22372 - C22373) * C50330) *
               C50380 +
           ((C17159 - C17160 + C17161 - C17162) * C10681 +
            (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
            C28155 * C50330) *
               C50114) *
              C50170 * C1090 +
          (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C10681 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C50409 +
            (C23284 - C23285 + C23286 - C23287) * C10682 +
            (C23288 - C23289 + C23290 - C23291) * C50330) *
               C50380 +
           ((C17175 - C17176 + C17177 - C17178) * C10681 +
            (C17179 - C17180 + C17181 - C17182) * C50409 +
            (C27274 - C27275 + C27276 - C27277) * C10682 +
            (C27278 - C27279 + C27280 - C27281) * C50330) *
               C50114) *
              C50170 * C1091 +
          (((C16960 * C1094 - C16955 * C1098 + C16961 * C2472 -
             C50302 * C2475) *
                C10681 +
            (C16960 * C1099 - C16955 * C1106 + C16961 * C2476 -
             C50302 * C2481) *
                C50409 +
            (C16960 * C3200 - C16955 * C3203 + C16961 * C4116 -
             C50302 * C4118) *
                C10682 +
            (C16960 * C3204 - C16955 * C3209 + C16961 * C4119 -
             C50302 * C4122) *
                C50330) *
               C50380 +
           ((C16960 * C1095 - C16955 * C1100 + C16961 * C2473 -
             C50302 * C2477) *
                C10681 +
            (C16960 * C1101 - C16955 * C1107 + C16961 * C2478 -
             C50302 * C2482) *
                C50409 +
            (C16960 * C3201 - C16955 * C3205 + C16961 * C4117 -
             C50302 * C4120) *
                C10682 +
            (C16960 * C3206 - C16955 * C3210 + C16961 * C4121 -
             C50302 * C4123) *
                C50330) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
             C28155 * C50330) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C17160 - C17159 + C17162 - C17161) * C10681 +
             (C17164 - C17163 + C17166 - C17165) * C50409 + C28156 * C10682 +
             C28157 * C50330) *
                C50380 +
            ((C17168 - C17167 + C17170 - C17169) * C10681 +
             (C17172 - C17171 + C17174 - C17173) * C50409 +
             (C17897 - C17898 + C17899 - C17900) * C10682 +
             (C17901 - C17902 + C17903 - C17904) * C50330) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C17003 * C10681 + C17004 * C50409 + C27886 * C10682 +
             C27887 * C50330) *
                C50380 +
            ((C16980 - C16979 + C16982 - C16981) * C10681 +
             (C16984 - C16983 + C16986 - C16985) * C50409 +
             (C17682 - C17683 + C17684 - C17685) * C10682 +
             (C17686 - C17687 + C17688 - C17689) * C50330) *
                C50114) *
               C50170 * C1018 +
           ((C17527 * C10681 + C17528 * C50409 +
             (C17898 - C17897 + C17900 - C17899) * C10682 +
             (C17902 - C17901 + C17904 - C17903) * C50330) *
                C50380 +
            ((C17520 - C17519 + C17522 - C17521) * C10681 +
             (C17524 - C17523 + C17526 - C17525) * C50409 +
             (C16960 * C891 - C16955 * C899 + C16961 * C1558 - C50302 * C1565) *
                 C10682 +
             (C16960 * C900 - C16955 * C906 + C16961 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C452 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C453 +
           ((C21878 * C10681 + C21879 * C50409 +
             (C21853 - C21852 + C21855 - C21854) * C10682 +
             (C21857 - C21856 + C21859 - C21858) * C50330) *
                C50380 +
            (C27492 * C10681 + C27493 * C50409 +
             (C21864 - C21865 + C21866 - C21867) * C10682 +
             (C21868 - C21869 + C21870 - C21871) * C50330) *
                C50114) *
               C454) *
              C1018 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
             C28155 * C50330) *
                C50114) *
               C452 +
           (((C22367 - C22366 + C22369 - C22368) * C10681 +
             (C22371 - C22370 + C22373 - C22372) * C50409 +
             (C22375 - C22374 + C22377 - C22376) * C10682 +
             (C22379 - C22378 + C22381 - C22380) * C50330) *
                C50380 +
            (C28156 * C10681 + C28157 * C50409 +
             (C22382 - C22383 + C22384 - C22385) * C10682 +
             (C22386 - C22387 + C22388 - C22389) * C50330) *
                C50114) *
               C453 +
           ((C22796 * C10681 + C22797 * C50409 +
             (C22789 - C22788 + C22791 - C22790) * C10682 +
             (C22793 - C22792 + C22795 - C22794) * C50330) *
                C50380 +
            ((C22383 - C22382 + C22385 - C22384) * C10681 +
             (C22387 - C22386 + C22389 - C22388) * C50409 +
             (C16960 * C4516 - C16955 * C4522 + C16961 * C4517 -
              C50302 * C4523) *
                 C10682 +
             (C16960 * C4524 - C16955 * C4528 + C16961 * C4525 -
              C50302 * C4529) *
                 C50330) *
                C50114) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C10681 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50409 +
              (C21836 - C21837 + C21838 - C21839) * C10682 +
              (C21840 - C21841 + C21842 - C21843) * C50330) *
                 C50380 +
             ((C16963 - C16964 + C16965 - C16966) * C10681 +
              (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
              C27489 * C50330) *
                 C50114) *
                C50396 +
            (((C21837 - C21836 + C21839 - C21838) * C10681 +
              (C21841 - C21840 + C21843 - C21842) * C50409 +
              (C21845 - C21844 + C21847 - C21846) * C10682 +
              (C21849 - C21848 + C21851 - C21850) * C50330) *
                 C50380 +
             (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
              C21877 * C50330) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C10681 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50409 +
              (C22366 - C22367 + C22368 - C22369) * C10682 +
              (C22370 - C22371 + C22372 - C22373) * C50330) *
                 C50380 +
             ((C17159 - C17160 + C17161 - C17162) * C10681 +
              (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
              C28155 * C50330) *
                 C50114) *
                C50396 +
            (((C22367 - C22366 + C22369 - C22368) * C10681 +
              (C22371 - C22370 + C22373 - C22372) * C50409 +
              (C22375 - C22374 + C22377 - C22376) * C10682 +
              (C22379 - C22378 + C22381 - C22380) * C50330) *
                 C50380 +
             (C28156 * C10681 + C28157 * C50409 +
              (C22382 - C22383 + C22384 - C22385) * C10682 +
              (C22386 - C22387 + C22388 - C22389) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C16964 - C16963 + C16966 - C16965) * C10681 +
              (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
              C27491 * C50330) *
                 C50380 +
             ((C16972 - C16971 + C16974 - C16973) * C10681 +
              (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
              C17691 * C50330) *
                 C50114) *
                C50396 +
            ((C27488 * C10681 + C27489 * C50409 + C27492 * C10682 +
              C27493 * C50330) *
                 C50380 +
             (C27886 * C10681 + C27887 * C50409 +
              (C17361 - C17362 + C17363 - C17364) * C10682 +
              (C17365 - C17366 + C17367 - C17368) * C50330) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C17160 - C17159 + C17162 - C17161) * C10681 +
              (C17164 - C17163 + C17166 - C17165) * C50409 + C28156 * C10682 +
              C28157 * C50330) *
                 C50380 +
             ((C17168 - C17167 + C17170 - C17169) * C10681 +
              (C17172 - C17171 + C17174 - C17173) * C50409 +
              (C17897 - C17898 + C17899 - C17900) * C10682 +
              (C17901 - C17902 + C17903 - C17904) * C50330) *
                 C50114) *
                C50396 +
            ((C28154 * C10681 + C28155 * C50409 +
              (C22383 - C22382 + C22385 - C22384) * C10682 +
              (C22387 - C22386 + C22389 - C22388) * C50330) *
                 C50380 +
             ((C17898 - C17897 + C17900 - C17899) * C10681 +
              (C17902 - C17901 + C17904 - C17903) * C50409 +
              (C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
               C50302 * C2661) *
                  C10682 +
              (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
             C28155 * C50330) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C17160 - C17159 + C17162 - C17161) * C10681 +
             (C17164 - C17163 + C17166 - C17165) * C50409 + C28156 * C10682 +
             C28157 * C50330) *
                C50380 +
            ((C17168 - C17167 + C17170 - C17169) * C10681 +
             (C17172 - C17171 + C17174 - C17173) * C50409 +
             (C17897 - C17898 + C17899 - C17900) * C10682 +
             (C17901 - C17902 + C17903 - C17904) * C50330) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C17003 * C10681 + C17004 * C50409 + C27886 * C10682 +
             C27887 * C50330) *
                C50380 +
            ((C16980 - C16979 + C16982 - C16981) * C10681 +
             (C16984 - C16983 + C16986 - C16985) * C50409 +
             (C17682 - C17683 + C17684 - C17685) * C10682 +
             (C17686 - C17687 + C17688 - C17689) * C50330) *
                C50114) *
               C50170 * C1018 +
           ((C17527 * C10681 + C17528 * C50409 +
             (C17898 - C17897 + C17900 - C17899) * C10682 +
             (C17902 - C17901 + C17904 - C17903) * C50330) *
                C50380 +
            ((C17520 - C17519 + C17522 - C17521) * C10681 +
             (C17524 - C17523 + C17526 - C17525) * C50409 +
             (C16960 * C891 - C16955 * C899 + C16961 * C1558 - C50302 * C1565) *
                 C10682 +
             (C16960 * C900 - C16955 * C906 + C16961 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C10681 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50409 +
            (C21836 - C21837 + C21838 - C21839) * C10682 +
            (C21840 - C21841 + C21842 - C21843) * C50330) *
               C50380 +
           ((C16963 - C16964 + C16965 - C16966) * C10681 +
            (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
            C27489 * C50330) *
               C50114) *
              C50170 * C1089 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C10681 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C50409 +
            (C22366 - C22367 + C22368 - C22369) * C10682 +
            (C22370 - C22371 + C22372 - C22373) * C50330) *
               C50380 +
           ((C17159 - C17160 + C17161 - C17162) * C10681 +
            (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
            C28155 * C50330) *
               C50114) *
              C50170 * C1090 +
          (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C10681 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C50409 +
            (C23284 - C23285 + C23286 - C23287) * C10682 +
            (C23288 - C23289 + C23290 - C23291) * C50330) *
               C50380 +
           ((C17175 - C17176 + C17177 - C17178) * C10681 +
            (C17179 - C17180 + C17181 - C17182) * C50409 +
            (C27274 - C27275 + C27276 - C27277) * C10682 +
            (C27278 - C27279 + C27280 - C27281) * C50330) *
               C50114) *
              C50170 * C1091 +
          (((C16960 * C1094 - C16955 * C1098 + C16961 * C2472 -
             C50302 * C2475) *
                C10681 +
            (C16960 * C1099 - C16955 * C1106 + C16961 * C2476 -
             C50302 * C2481) *
                C50409 +
            (C16960 * C3200 - C16955 * C3203 + C16961 * C4116 -
             C50302 * C4118) *
                C10682 +
            (C16960 * C3204 - C16955 * C3209 + C16961 * C4119 -
             C50302 * C4122) *
                C50330) *
               C50380 +
           ((C16960 * C1095 - C16955 * C1100 + C16961 * C2473 -
             C50302 * C2477) *
                C10681 +
            (C16960 * C1101 - C16955 * C1107 + C16961 * C2478 -
             C50302 * C2482) *
                C50409 +
            (C16960 * C3201 - C16955 * C3205 + C16961 * C4117 -
             C50302 * C4120) *
                C10682 +
            (C16960 * C3206 - C16955 * C3210 + C16961 * C4121 -
             C50302 * C4123) *
                C50330) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C10681 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50409 +
              (C21836 - C21837 + C21838 - C21839) * C10682 +
              (C21840 - C21841 + C21842 - C21843) * C50330) *
                 C50380 +
             ((C16963 - C16964 + C16965 - C16966) * C10681 +
              (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
              C27489 * C50330) *
                 C50114) *
                C1669 +
            (((C21837 - C21836 + C21839 - C21838) * C10681 +
              (C21841 - C21840 + C21843 - C21842) * C50409 +
              (C21845 - C21844 + C21847 - C21846) * C10682 +
              (C21849 - C21848 + C21851 - C21850) * C50330) *
                 C50380 +
             (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
              C21877 * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C10681 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50409 +
              (C22366 - C22367 + C22368 - C22369) * C10682 +
              (C22370 - C22371 + C22372 - C22373) * C50330) *
                 C50380 +
             ((C17159 - C17160 + C17161 - C17162) * C10681 +
              (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
              C28155 * C50330) *
                 C50114) *
                C1669 +
            (((C22367 - C22366 + C22369 - C22368) * C10681 +
              (C22371 - C22370 + C22373 - C22372) * C50409 +
              (C22375 - C22374 + C22377 - C22376) * C10682 +
              (C22379 - C22378 + C22381 - C22380) * C50330) *
                 C50380 +
             (C28156 * C10681 + C28157 * C50409 +
              (C22382 - C22383 + C22384 - C22385) * C10682 +
              (C22386 - C22387 + C22388 - C22389) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C16964 - C16963 + C16966 - C16965) * C10681 +
              (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
              C27491 * C50330) *
                 C50380 +
             ((C16972 - C16971 + C16974 - C16973) * C10681 +
              (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
              C17691 * C50330) *
                 C50114) *
                C1669 +
            ((C27488 * C10681 + C27489 * C50409 + C27492 * C10682 +
              C27493 * C50330) *
                 C50380 +
             (C27886 * C10681 + C27887 * C50409 +
              (C17361 - C17362 + C17363 - C17364) * C10682 +
              (C17365 - C17366 + C17367 - C17368) * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C17160 - C17159 + C17162 - C17161) * C10681 +
              (C17164 - C17163 + C17166 - C17165) * C50409 + C28156 * C10682 +
              C28157 * C50330) *
                 C50380 +
             ((C17168 - C17167 + C17170 - C17169) * C10681 +
              (C17172 - C17171 + C17174 - C17173) * C50409 +
              (C17897 - C17898 + C17899 - C17900) * C10682 +
              (C17901 - C17902 + C17903 - C17904) * C50330) *
                 C50114) *
                C1669 +
            ((C28154 * C10681 + C28155 * C50409 +
              (C22383 - C22382 + C22385 - C22384) * C10682 +
              (C22387 - C22386 + C22389 - C22388) * C50330) *
                 C50380 +
             ((C17898 - C17897 + C17900 - C17899) * C10681 +
              (C17902 - C17901 + C17904 - C17903) * C50409 +
              (C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
               C50302 * C2661) *
                  C10682 +
              (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C50442 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C50443 +
           ((C21878 * C10681 + C21879 * C50409 +
             (C21853 - C21852 + C21855 - C21854) * C10682 +
             (C21857 - C21856 + C21859 - C21858) * C50330) *
                C50380 +
            (C27492 * C10681 + C27493 * C50409 +
             (C21864 - C21865 + C21866 - C21867) * C10682 +
             (C21868 - C21869 + C21870 - C21871) * C50330) *
                C50114) *
               C2085) *
              C50395 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
             C28155 * C50330) *
                C50114) *
               C50442 +
           (((C22367 - C22366 + C22369 - C22368) * C10681 +
             (C22371 - C22370 + C22373 - C22372) * C50409 +
             (C22375 - C22374 + C22377 - C22376) * C10682 +
             (C22379 - C22378 + C22381 - C22380) * C50330) *
                C50380 +
            (C28156 * C10681 + C28157 * C50409 +
             (C22382 - C22383 + C22384 - C22385) * C10682 +
             (C22386 - C22387 + C22388 - C22389) * C50330) *
                C50114) *
               C50443 +
           ((C22796 * C10681 + C22797 * C50409 +
             (C22789 - C22788 + C22791 - C22790) * C10682 +
             (C22793 - C22792 + C22795 - C22794) * C50330) *
                C50380 +
            ((C22383 - C22382 + C22385 - C22384) * C10681 +
             (C22387 - C22386 + C22389 - C22388) * C50409 +
             (C16960 * C4516 - C16955 * C4522 + C16961 * C4517 -
              C50302 * C4523) *
                 C10682 +
             (C16960 * C4524 - C16955 * C4528 + C16961 * C4525 -
              C50302 * C4529) *
                 C50330) *
                C50114) *
               C2085) *
              C50206) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C1669 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C50234) *
              C285 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
             C28155 * C50330) *
                C50114) *
               C1669 +
           (((C22367 - C22366 + C22369 - C22368) * C10681 +
             (C22371 - C22370 + C22373 - C22372) * C50409 +
             (C22375 - C22374 + C22377 - C22376) * C10682 +
             (C22379 - C22378 + C22381 - C22380) * C50330) *
                C50380 +
            (C28156 * C10681 + C28157 * C50409 +
             (C22382 - C22383 + C22384 - C22385) * C10682 +
             (C22386 - C22387 + C22388 - C22389) * C50330) *
                C50114) *
               C50234) *
              C286 +
          ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C10681 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50409 +
             (C23284 - C23285 + C23286 - C23287) * C10682 +
             (C23288 - C23289 + C23290 - C23291) * C50330) *
                C50380 +
            ((C17175 - C17176 + C17177 - C17178) * C10681 +
             (C17179 - C17180 + C17181 - C17182) * C50409 +
             (C27274 - C27275 + C27276 - C27277) * C10682 +
             (C27278 - C27279 + C27280 - C27281) * C50330) *
                C50114) *
               C1669 +
           (((C23285 - C23284 + C23287 - C23286) * C10681 +
             (C23289 - C23288 + C23291 - C23290) * C50409 +
             (C23293 - C23292 + C23295 - C23294) * C10682 +
             (C23297 - C23296 + C23299 - C23298) * C50330) *
                C50380 +
            ((C27275 - C27274 + C27277 - C27276) * C10681 +
             (C27279 - C27278 + C27281 - C27280) * C50409 +
             (C16960 * C2655 - C16955 * C2659 + C16961 * C3623 -
              C50302 * C3626) *
                 C10682 +
             (C16960 * C2660 - C16955 * C2664 + C16961 * C3627 -
              C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C1669 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C1669 +
           ((C27488 * C10681 + C27489 * C50409 + C27492 * C10682 +
             C27493 * C50330) *
                C50380 +
            (C27886 * C10681 + C27887 * C50409 +
             (C17361 - C17362 + C17363 - C17364) * C10682 +
             (C17365 - C17366 + C17367 - C17368) * C50330) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C17003 * C10681 + C17004 * C50409 + C27886 * C10682 +
             C27887 * C50330) *
                C50380 +
            ((C16980 - C16979 + C16982 - C16981) * C10681 +
             (C16984 - C16983 + C16986 - C16985) * C50409 +
             (C17682 - C17683 + C17684 - C17685) * C10682 +
             (C17686 - C17687 + C17688 - C17689) * C50330) *
                C50114) *
               C1669 +
           ((C17690 * C10681 + C17691 * C50409 +
             (C17362 - C17361 + C17364 - C17363) * C10682 +
             (C17366 - C17365 + C17368 - C17367) * C50330) *
                C50380 +
            ((C17683 - C17682 + C17685 - C17684) * C10681 +
             (C17687 - C17686 + C17689 - C17688) * C50409 +
             (C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
                 C10682 +
             (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C10681 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50409 +
            (C21836 - C21837 + C21838 - C21839) * C10682 +
            (C21840 - C21841 + C21842 - C21843) * C50330) *
               C50380 +
           ((C16963 - C16964 + C16965 - C16966) * C10681 +
            (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
            C27489 * C50330) *
               C50114) *
              C1835 +
          (((C21837 - C21836 + C21839 - C21838) * C10681 +
            (C21841 - C21840 + C21843 - C21842) * C50409 +
            (C21845 - C21844 + C21847 - C21846) * C10682 +
            (C21849 - C21848 + C21851 - C21850) * C50330) *
               C50380 +
           (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
            C21877 * C50330) *
               C50114) *
              C1836 +
          ((C21878 * C10681 + C21879 * C50409 +
            (C21853 - C21852 + C21855 - C21854) * C10682 +
            (C21857 - C21856 + C21859 - C21858) * C50330) *
               C50380 +
           (C27492 * C10681 + C27493 * C50409 +
            (C21864 - C21865 + C21866 - C21867) * C10682 +
            (C21868 - C21869 + C21870 - C21871) * C50330) *
               C50114) *
              C1837 +
          ((C23706 * C10681 + C23707 * C50409 +
            (C23699 - C23698 + C23701 - C23700) * C10682 +
            (C23703 - C23702 + C23705 - C23704) * C50330) *
               C50380 +
           ((C21865 - C21864 + C21867 - C21866) * C10681 +
            (C21869 - C21868 + C21871 - C21870) * C50409 +
            (C16960 * C5425 - C16955 * C5429 + C16961 * C6385 -
             C50302 * C6388) *
                C10682 +
            (C16960 * C5430 - C16955 * C5434 + C16961 * C6389 -
             C50302 * C6391) *
                C50330) *
               C50114) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C50442 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C50443 +
           ((C21878 * C10681 + C21879 * C50409 +
             (C21853 - C21852 + C21855 - C21854) * C10682 +
             (C21857 - C21856 + C21859 - C21858) * C50330) *
                C50380 +
            (C27492 * C10681 + C27493 * C50409 +
             (C21864 - C21865 + C21866 - C21867) * C10682 +
             (C21868 - C21869 + C21870 - C21871) * C50330) *
                C50114) *
               C2085) *
              C50154 * C50387 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C50442 +
           ((C27488 * C10681 + C27489 * C50409 + C27492 * C10682 +
             C27493 * C50330) *
                C50380 +
            (C27886 * C10681 + C27887 * C50409 +
             (C17361 - C17362 + C17363 - C17364) * C10682 +
             (C17365 - C17366 + C17367 - C17368) * C50330) *
                C50114) *
               C50443 +
           ((C21876 * C10681 + C21877 * C50409 +
             (C21865 - C21864 + C21867 - C21866) * C10682 +
             (C21869 - C21868 + C21871 - C21870) * C50330) *
                C50380 +
            ((C17362 - C17361 + C17364 - C17363) * C10681 +
             (C17366 - C17365 + C17368 - C17367) * C50409 +
             (C16960 * C1841 - C16955 * C1847 + C16961 * C5970 -
              C50302 * C5971) *
                 C10682 +
             (C16960 * C1848 - C16955 * C1853 + C16961 * C5972 -
              C50302 * C5973) *
                 C50330) *
                C50114) *
               C2085) *
              C50154 * C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C1669 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C10681 +
             (C16968 - C16967 + C16970 - C16969) * C50409 + C27490 * C10682 +
             C27491 * C50330) *
                C50380 +
            ((C16972 - C16971 + C16974 - C16973) * C10681 +
             (C16976 - C16975 + C16978 - C16977) * C50409 + C17690 * C10682 +
             C17691 * C50330) *
                C50114) *
               C1669 +
           ((C27488 * C10681 + C27489 * C50409 + C27492 * C10682 +
             C27493 * C50330) *
                C50380 +
            (C27886 * C10681 + C27887 * C50409 +
             (C17361 - C17362 + C17363 - C17364) * C10682 +
             (C17365 - C17366 + C17367 - C17368) * C50330) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C17003 * C10681 + C17004 * C50409 + C27886 * C10682 +
             C27887 * C50330) *
                C50380 +
            ((C16980 - C16979 + C16982 - C16981) * C10681 +
             (C16984 - C16983 + C16986 - C16985) * C50409 +
             (C17682 - C17683 + C17684 - C17685) * C10682 +
             (C17686 - C17687 + C17688 - C17689) * C50330) *
                C50114) *
               C1669 +
           ((C17690 * C10681 + C17691 * C50409 +
             (C17362 - C17361 + C17364 - C17363) * C10682 +
             (C17366 - C17365 + C17368 - C17367) * C50330) *
                C50380 +
            ((C17683 - C17682 + C17685 - C17684) * C10681 +
             (C17687 - C17686 + C17689 - C17688) * C50409 +
             (C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
                 C10682 +
             (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C10681 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50409 +
             (C21836 - C21837 + C21838 - C21839) * C10682 +
             (C21840 - C21841 + C21842 - C21843) * C50330) *
                C50380 +
            ((C16963 - C16964 + C16965 - C16966) * C10681 +
             (C16967 - C16968 + C16969 - C16970) * C50409 + C27488 * C10682 +
             C27489 * C50330) *
                C50114) *
               C1669 +
           (((C21837 - C21836 + C21839 - C21838) * C10681 +
             (C21841 - C21840 + C21843 - C21842) * C50409 +
             (C21845 - C21844 + C21847 - C21846) * C10682 +
             (C21849 - C21848 + C21851 - C21850) * C50330) *
                C50380 +
            (C27490 * C10681 + C27491 * C50409 + C21876 * C10682 +
             C21877 * C50330) *
                C50114) *
               C50234) *
              C285 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C10681 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50409 +
             (C22366 - C22367 + C22368 - C22369) * C10682 +
             (C22370 - C22371 + C22372 - C22373) * C50330) *
                C50380 +
            ((C17159 - C17160 + C17161 - C17162) * C10681 +
             (C17163 - C17164 + C17165 - C17166) * C50409 + C28154 * C10682 +
             C28155 * C50330) *
                C50114) *
               C1669 +
           (((C22367 - C22366 + C22369 - C22368) * C10681 +
             (C22371 - C22370 + C22373 - C22372) * C50409 +
             (C22375 - C22374 + C22377 - C22376) * C10682 +
             (C22379 - C22378 + C22381 - C22380) * C50330) *
                C50380 +
            (C28156 * C10681 + C28157 * C50409 +
             (C22382 - C22383 + C22384 - C22385) * C10682 +
             (C22386 - C22387 + C22388 - C22389) * C50330) *
                C50114) *
               C50234) *
              C286 +
          ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C10681 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50409 +
             (C23284 - C23285 + C23286 - C23287) * C10682 +
             (C23288 - C23289 + C23290 - C23291) * C50330) *
                C50380 +
            ((C17175 - C17176 + C17177 - C17178) * C10681 +
             (C17179 - C17180 + C17181 - C17182) * C50409 +
             (C27274 - C27275 + C27276 - C27277) * C10682 +
             (C27278 - C27279 + C27280 - C27281) * C50330) *
                C50114) *
               C1669 +
           (((C23285 - C23284 + C23287 - C23286) * C10681 +
             (C23289 - C23288 + C23291 - C23290) * C50409 +
             (C23293 - C23292 + C23295 - C23294) * C10682 +
             (C23297 - C23296 + C23299 - C23298) * C50330) *
                C50380 +
            ((C27275 - C27274 + C27277 - C27276) * C10681 +
             (C27279 - C27278 + C27281 - C27280) * C50409 +
             (C16960 * C2655 - C16955 * C2659 + C16961 * C3623 -
              C50302 * C3626) *
                 C10682 +
             (C16960 * C2660 - C16955 * C2664 + C16961 * C3627 -
              C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C50395 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50170 * C50206) *
              C50438 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C50395 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C17519 - C17520 + C17521 - C17522) * C118 +
             (C17523 - C17524 + C17525 - C17526) * C50266) *
                C16959) *
               C50170 * C50206) *
              C50439 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C50170 * C50395 +
           (C17531 * C16957 +
            ((C17520 - C17519 + C17522 - C17521) * C118 +
             (C17524 - C17523 + C17526 - C17525) * C50266) *
                C16958 +
            ((C16960 * C298 - C16955 * C316 + C16961 * C299 - C50302 * C318) *
                 C118 +
             (C16960 * C317 - C16955 * C328 + C16961 * C319 - C50302 * C329) *
                 C50266) *
                C16959) *
               C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C50395 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C50206) *
              C50438 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C50395 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C50206) *
              C50439 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C50170 * C50395 +
           ((C19727 * C292 - C19722 * C304 + C19728 * C296 - C19723 * C312 +
             C19729 * C1096 - C19724 * C1102 + C19730 * C2474 -
             C19725 * C2479) *
                C118 +
            (C19727 * C305 - C19722 * C322 + C19728 * C313 - C19723 * C326 +
             C19729 * C1103 - C19724 * C1108 + C19730 * C2480 -
             C19725 * C2483) *
                C50266) *
               C50109 * C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C118 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50266) *
                 C16957 +
             ((C16963 - C16964 + C16965 - C16966) * C118 +
              (C16967 - C16968 + C16969 - C16970) * C50266) *
                 C16958 +
             C17011 * C16959) *
                C50396 +
            (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                  C118 +
              (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                  C50266) *
                 C16957 +
             ((C17337 - C17338 + C17339 - C17340) * C118 +
              (C17341 - C17342 + C17343 - C17344) * C50266) *
                 C16958 +
             C17694 * C16959) *
                C50234) *
               C50395 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C118 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50266) *
                 C16957 +
             ((C17159 - C17160 + C17161 - C17162) * C118 +
              (C17163 - C17164 + C17165 - C17166) * C50266) *
                 C16958 +
             C17531 * C16959) *
                C50396 +
            (((C16955 * C893 - C16960 * C888 + C50302 * C1559 -
               C16961 * C1555) *
                  C118 +
              (C16955 * C903 - C16960 * C894 + C50302 * C1567 -
               C16961 * C1560) *
                  C50266) *
                 C16957 +
             ((C17889 - C17890 + C17891 - C17892) * C118 +
              (C17893 - C17894 + C17895 - C17896) * C50266) *
                 C16958 +
             ((C17897 - C17898 + C17899 - C17900) * C118 +
              (C17901 - C17902 + C17903 - C17904) * C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C288 +
          (((((C16964 - C16963 + C16966 - C16965) * C118 +
              (C16968 - C16967 + C16970 - C16969) * C50266) *
                 C16957 +
             ((C16972 - C16971 + C16974 - C16973) * C118 +
              (C16976 - C16975 + C16978 - C16977) * C50266) *
                 C16958 +
             C17012 * C16959) *
                C50396 +
            (((C17338 - C17337 + C17340 - C17339) * C118 +
              (C17342 - C17341 + C17344 - C17343) * C50266) *
                 C16957 +
             ((C17346 - C17345 + C17348 - C17347) * C118 +
              (C17350 - C17349 + C17352 - C17351) * C50266) *
                 C16958 +
             ((C17682 - C17683 + C17684 - C17685) * C118 +
              (C17686 - C17687 + C17688 - C17689) * C50266) *
                 C16959) *
                C50234) *
               C50395 +
           ((((C17160 - C17159 + C17162 - C17161) * C118 +
              (C17164 - C17163 + C17166 - C17165) * C50266) *
                 C16957 +
             ((C17168 - C17167 + C17170 - C17169) * C118 +
              (C17172 - C17171 + C17174 - C17173) * C50266) *
                 C16958 +
             ((C17519 - C17520 + C17521 - C17522) * C118 +
              (C17523 - C17524 + C17525 - C17526) * C50266) *
                 C16959) *
                C50396 +
            (((C17890 - C17889 + C17892 - C17891) * C118 +
              (C17894 - C17893 + C17896 - C17895) * C50266) *
                 C16957 +
             ((C17898 - C17897 + C17900 - C17899) * C118 +
              (C17902 - C17901 + C17904 - C17903) * C50266) *
                 C16958 +
             ((C16960 * C891 - C16955 * C899 + C16961 * C1558 -
               C50302 * C1565) *
                  C118 +
              (C16960 * C900 - C16955 * C906 + C16961 * C1566 -
               C50302 * C1570) *
                  C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
              C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                 C118 +
             (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
              C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                 C50266) *
                C50109 * C50396 +
            ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
              C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
              C19725 * C3203) *
                 C118 +
             (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
              C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
              C19725 * C3209) *
                 C50266) *
                C50109 * C50234) *
               C50395 +
           (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
              C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
              C19725 * C2475) *
                 C118 +
             (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
              C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
              C19725 * C2481) *
                 C50266) *
                C50109 * C50396 +
            ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
              C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
              C19730 * C4116) *
                 C118 +
             (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
              C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
              C19730 * C4119) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C288 +
          ((((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
              C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                 C118 +
             (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
              C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                 C50266) *
                C50109 * C50396 +
            ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
              C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
              C19730 * C3201) *
                 C118 +
             (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
              C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
              C19730 * C3206) *
                 C50266) *
                C50109 * C50234) *
               C50395 +
           (((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
              C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
              C19730 * C2473) *
                 C118 +
             (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
              C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
              C19730 * C2478) *
                 C50266) *
                C50109 * C50396 +
            ((C19727 * C889 - C19722 * C895 + C19728 * C1556 - C19723 * C1561 +
              C19729 * C3201 - C19724 * C3205 + C19730 * C4117 -
              C19725 * C4120) *
                 C118 +
             (C19727 * C896 - C19722 * C904 + C19728 * C1562 - C19723 * C1568 +
              C19729 * C3206 - C19724 * C3210 + C19730 * C4121 -
              C19725 * C4123) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C285 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            ((C17167 - C17168 + C17169 - C17170) * C118 +
             (C17171 - C17172 + C17173 - C17174) * C50266) *
                C16959) *
               C50170 * C286 +
           (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C50170 * C287) *
              C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C285 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C16955 * C306 - C16960 * C293 + C50302 * C314 - C16961 * C297) *
                 C118 +
             (C16955 * C323 - C16960 * C307 + C50302 * C327 - C16961 * C315) *
                 C50266) *
                C16959) *
               C50170 * C286 +
           (((C17176 - C17175 + C17178 - C17177) * C118 +
             (C17180 - C17179 + C17182 - C17181) * C50266) *
                C16957 +
            ((C17184 - C17183 + C17186 - C17185) * C118 +
             (C17188 - C17187 + C17190 - C17189) * C50266) *
                C16958 +
            ((C16960 * C297 - C16955 * C314 + C16961 * C1097 - C50302 * C1104) *
                 C118 +
             (C16960 * C315 - C16955 * C327 + C16961 * C1105 - C50302 * C1109) *
                 C50266) *
                C16959) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C118 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50266) *
               C16957 +
           ((C16963 - C16964 + C16965 - C16966) * C118 +
            (C16967 - C16968 + C16969 - C16970) * C50266) *
               C16958 +
           C17011 * C16959) *
              C50170 * C50154 * C113 +
          (((C16964 - C16963 + C16966 - C16965) * C118 +
            (C16968 - C16967 + C16970 - C16969) * C50266) *
               C16957 +
           ((C16972 - C16971 + C16974 - C16973) * C118 +
            (C16976 - C16975 + C16978 - C16977) * C50266) *
               C16958 +
           C17012 * C16959) *
              C50170 * C50154 * C114 +
          (C17011 * C16957 +
           ((C16980 - C16979 + C16982 - C16981) * C118 +
            (C16984 - C16983 + C16986 - C16985) * C50266) *
               C16958 +
           ((C16987 - C16988 + C16989 - C16990) * C118 +
            (C16991 - C16992 + C16993 - C16994) * C50266) *
               C16959) *
              C50170 * C50154 * C115 +
          (C17012 * C16957 +
           ((C16988 - C16987 + C16990 - C16989) * C118 +
            (C16992 - C16991 + C16994 - C16993) * C50266) *
               C16958 +
           ((C16960 * C124 - C16955 * C136 + C16961 * C622 - C50302 * C623) *
                C118 +
            (C16960 * C137 - C16955 * C145 + C16961 * C624 - C50302 * C625) *
                C50266) *
               C16959) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C452 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            ((C17345 - C17346 + C17347 - C17348) * C118 +
             (C17349 - C17350 + C17351 - C17352) * C50266) *
                C16959) *
               C453 +
           (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                 C118 +
             (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                 C50266) *
                C16957 +
            ((C17353 - C17354 + C17355 - C17356) * C118 +
             (C17357 - C17358 + C17359 - C17360) * C50266) *
                C16958 +
            ((C17361 - C17362 + C17363 - C17364) * C118 +
             (C17365 - C17366 + C17367 - C17368) * C50266) *
                C16959) *
               C454) *
              C50154 * C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C452 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C16955 * C471 - C16960 * C458 + C50302 * C899 - C16961 * C891) *
                 C118 +
             (C16955 * C488 - C16960 * C472 + C50302 * C906 - C16961 * C900) *
                 C50266) *
                C16959) *
               C453 +
           (((C17354 - C17353 + C17356 - C17355) * C118 +
             (C17358 - C17357 + C17360 - C17359) * C50266) *
                C16957 +
            ((C17362 - C17361 + C17364 - C17363) * C118 +
             (C17366 - C17365 + C17368 - C17367) * C50266) *
                C16958 +
            ((C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
                 C118 +
             (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
                 C50266) *
                C16959) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C50170 * C50154 * C113 +
          ((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
            C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
               C118 +
           (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
            C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
               C50266) *
              C50109 * C50170 * C50154 * C114 +
          ((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
            C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
               C118 +
           (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
            C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
               C50266) *
              C50109 * C50170 * C50154 * C115 +
          ((C19727 * C122 - C19722 * C132 + C19728 * C293 - C19723 * C306 +
            C19729 * C297 - C19724 * C314 + C19730 * C1097 - C19725 * C1104) *
               C118 +
           (C19727 * C133 - C19722 * C143 + C19728 * C307 - C19723 * C323 +
            C19729 * C315 - C19724 * C327 + C19730 * C1105 - C19725 * C1109) *
               C50266) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C285 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C286 +
           ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C50170 * C287) *
              C288 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C285 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C286 +
           ((C19727 * C295 - C19722 * C310 + C19728 * C1095 - C19723 * C1100 +
             C19729 * C2473 - C19724 * C2477 + C19730 * C3469 -
             C19725 * C3472) *
                C118 +
            (C19727 * C311 - C19722 * C325 + C19728 * C1101 - C19723 * C1107 +
             C19729 * C2478 - C19724 * C2482 + C19730 * C3473 -
             C19725 * C3475) *
                C50266) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C452 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C453 +
           ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
             C19724 * C2657 - C19729 * C2654 + C19725 * C3624 -
             C19730 * C3622) *
                C118 +
            (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
             C19724 * C2663 - C19729 * C2658 + C19725 * C3628 -
             C19730 * C3625) *
                C50266) *
               C50109 * C454) *
              C50154 * C288 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C452 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C453 +
           ((C19727 * C460 - C19722 * C475 + C19728 * C1209 - C19723 * C1214 +
             C19729 * C2655 - C19724 * C2659 + C19730 * C3623 -
             C19725 * C3626) *
                C118 +
            (C19727 * C476 - C19722 * C490 + C19728 * C1215 - C19723 * C1221 +
             C19729 * C2660 - C19724 * C2664 + C19730 * C3627 -
             C19725 * C3629) *
                C50266) *
               C50109 * C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50396 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C50154 * C50438 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50396 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C17682 - C17683 + C17684 - C17685) * C118 +
             (C17686 - C17687 + C17688 - C17689) * C50266) *
                C16959) *
               C50234) *
              C50154 * C50439 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C50396 +
           (C17694 * C16957 +
            ((C17683 - C17682 + C17685 - C17684) * C118 +
             (C17687 - C17686 + C17689 - C17688) * C50266) *
                C16958 +
            ((C16960 * C463 - C16955 * C481 + C16961 * C892 - C50302 * C901) *
                 C118 +
             (C16960 * C482 - C16955 * C493 + C16961 * C902 - C50302 * C907) *
                 C50266) *
                C16959) *
               C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50396 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C50154 * C50438 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50396 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C50234) *
              C50154 * C50439 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C50396 +
           ((C19727 * C457 - C19722 * C469 + C19728 * C890 - C19723 * C897 +
             C19729 * C1557 - C19724 * C1563 + C19730 * C3202 -
             C19725 * C3207) *
                C118 +
            (C19727 * C470 - C19722 * C487 + C19728 * C898 - C19723 * C905 +
             C19729 * C1564 - C19724 * C1569 + C19730 * C3208 -
             C19725 * C3211) *
                C50266) *
               C50109 * C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C118 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50266) *
               C16957 +
           ((C16963 - C16964 + C16965 - C16966) * C118 +
            (C16967 - C16968 + C16969 - C16970) * C50266) *
               C16958 +
           C17011 * C16959) *
              C50170 * C50154 * C113 +
          (((C16964 - C16963 + C16966 - C16965) * C118 +
            (C16968 - C16967 + C16970 - C16969) * C50266) *
               C16957 +
           ((C16972 - C16971 + C16974 - C16973) * C118 +
            (C16976 - C16975 + C16978 - C16977) * C50266) *
               C16958 +
           C17012 * C16959) *
              C50170 * C50154 * C114 +
          (C17011 * C16957 +
           ((C16980 - C16979 + C16982 - C16981) * C118 +
            (C16984 - C16983 + C16986 - C16985) * C50266) *
               C16958 +
           ((C16987 - C16988 + C16989 - C16990) * C118 +
            (C16991 - C16992 + C16993 - C16994) * C50266) *
               C16959) *
              C50170 * C50154 * C115 +
          (C17012 * C16957 +
           ((C16988 - C16987 + C16990 - C16989) * C118 +
            (C16992 - C16991 + C16994 - C16993) * C50266) *
               C16958 +
           ((C16960 * C124 - C16955 * C136 + C16961 * C622 - C50302 * C623) *
                C118 +
            (C16960 * C137 - C16955 * C145 + C16961 * C624 - C50302 * C625) *
                C50266) *
               C16959) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C285 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            ((C17167 - C17168 + C17169 - C17170) * C118 +
             (C17171 - C17172 + C17173 - C17174) * C50266) *
                C16959) *
               C50170 * C286 +
           (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C50170 * C287) *
              C288 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C285 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C16955 * C306 - C16960 * C293 + C50302 * C314 - C16961 * C297) *
                 C118 +
             (C16955 * C323 - C16960 * C307 + C50302 * C327 - C16961 * C315) *
                 C50266) *
                C16959) *
               C50170 * C286 +
           (((C17176 - C17175 + C17178 - C17177) * C118 +
             (C17180 - C17179 + C17182 - C17181) * C50266) *
                C16957 +
            ((C17184 - C17183 + C17186 - C17185) * C118 +
             (C17188 - C17187 + C17190 - C17189) * C50266) *
                C16958 +
            ((C16960 * C297 - C16955 * C314 + C16961 * C1097 - C50302 * C1104) *
                 C118 +
             (C16960 * C315 - C16955 * C327 + C16961 * C1105 - C50302 * C1109) *
                 C50266) *
                C16959) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C50170 * C50154 * C113 +
          ((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
            C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
               C118 +
           (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
            C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
               C50266) *
              C50109 * C50170 * C50154 * C114 +
          ((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
            C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
               C118 +
           (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
            C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
               C50266) *
              C50109 * C50170 * C50154 * C115 +
          ((C19727 * C122 - C19722 * C132 + C19728 * C293 - C19723 * C306 +
            C19729 * C297 - C19724 * C314 + C19730 * C1097 - C19725 * C1104) *
               C118 +
           (C19727 * C133 - C19722 * C143 + C19728 * C307 - C19723 * C323 +
            C19729 * C315 - C19724 * C327 + C19730 * C1105 - C19725 * C1109) *
               C50266) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C285 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C286 +
           ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C50170 * C287) *
              C288 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C285 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C286 +
           ((C19727 * C295 - C19722 * C310 + C19728 * C1095 - C19723 * C1100 +
             C19729 * C2473 - C19724 * C2477 + C19730 * C3469 -
             C19725 * C3472) *
                C118 +
            (C19727 * C311 - C19722 * C325 + C19728 * C1101 - C19723 * C1107 +
             C19729 * C2478 - C19724 * C2482 + C19730 * C3473 -
             C19725 * C3475) *
                C50266) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C50440 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50170 * C50441 +
           (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C50170 * C1324) *
              C50387 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C50440 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C17519 - C17520 + C17521 - C17522) * C118 +
             (C17523 - C17524 + C17525 - C17526) * C50266) *
                C16959) *
               C50170 * C50441 +
           (((C17176 - C17175 + C17178 - C17177) * C118 +
             (C17180 - C17179 + C17182 - C17181) * C50266) *
                C16957 +
            ((C17184 - C17183 + C17186 - C17185) * C118 +
             (C17188 - C17187 + C17190 - C17189) * C50266) *
                C16958 +
            ((C16960 * C297 - C16955 * C314 + C16961 * C1097 - C50302 * C1104) *
                 C118 +
             (C16960 * C315 - C16955 * C327 + C16961 * C1105 - C50302 * C1109) *
                 C50266) *
                C16959) *
               C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C50440 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C50441 +
           ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C50170 * C1324) *
              C50387 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C50440 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C50441 +
           ((C19727 * C295 - C19722 * C310 + C19728 * C1095 - C19723 * C1100 +
             C19729 * C2473 - C19724 * C2477 + C19730 * C3469 -
             C19725 * C3472) *
                C118 +
            (C19727 * C311 - C19722 * C325 + C19728 * C1101 - C19723 * C1107 +
             C19729 * C2478 - C19724 * C2482 + C19730 * C3473 -
             C19725 * C3475) *
                C50266) *
               C50109 * C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50396 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C50440 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50396 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C50234) *
              C50441 +
          ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C50396 +
           (((C16960 * C1555 - C16955 * C1559 + C16961 * C3200 -
              C50302 * C3203) *
                 C118 +
             (C16960 * C1560 - C16955 * C1567 + C16961 * C3204 -
              C50302 * C3209) *
                 C50266) *
                C16957 +
            ((C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
              C50302 * C3205) *
                 C118 +
             (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
              C50302 * C3210) *
                 C50266) *
                C16958 +
            ((C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
              C50302 * C3207) *
                 C118 +
             (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
              C50302 * C3211) *
                 C50266) *
                C16959) *
               C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50396 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C50440 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50396 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C50234) *
              C50441 +
          (((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C50396 +
           ((C19727 * C1555 - C19722 * C1559 + C19728 * C3200 - C19723 * C3203 +
             C19729 * C4116 - C19724 * C4118 + C19730 * C20849 -
             C19725 * C20850) *
                C118 +
            (C19727 * C1560 - C19722 * C1567 + C19728 * C3204 - C19723 * C3209 +
             C19729 * C4119 - C19724 * C4122 + C19730 * C20851 -
             C19725 * C20852) *
                C50266) *
               C50109 * C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C118 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50266) *
               C16957 +
           ((C16963 - C16964 + C16965 - C16966) * C118 +
            (C16967 - C16968 + C16969 - C16970) * C50266) *
               C16958 +
           C17011 * C16959) *
              C50170 * C1089 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C118 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C50266) *
               C16957 +
           ((C17159 - C17160 + C17161 - C17162) * C118 +
            (C17163 - C17164 + C17165 - C17166) * C50266) *
               C16958 +
           C17531 * C16959) *
              C50170 * C1090 +
          (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C118 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C50266) *
               C16957 +
           ((C17175 - C17176 + C17177 - C17178) * C118 +
            (C17179 - C17180 + C17181 - C17182) * C50266) *
               C16958 +
           ((C17183 - C17184 + C17185 - C17186) * C118 +
            (C17187 - C17188 + C17189 - C17190) * C50266) *
               C16959) *
              C50170 * C1091 +
          (((C16960 * C1094 - C16955 * C1098 + C16961 * C2472 -
             C50302 * C2475) *
                C118 +
            (C16960 * C1099 - C16955 * C1106 + C16961 * C2476 -
             C50302 * C2481) *
                C50266) *
               C16957 +
           ((C16960 * C1095 - C16955 * C1100 + C16961 * C2473 -
             C50302 * C2477) *
                C118 +
            (C16960 * C1101 - C16955 * C1107 + C16961 * C2478 -
             C50302 * C2482) *
                C50266) *
               C16958 +
           ((C16960 * C1096 - C16955 * C1102 + C16961 * C2474 -
             C50302 * C2479) *
                C118 +
            (C16960 * C1103 - C16955 * C1108 + C16961 * C2480 -
             C50302 * C2483) *
                C50266) *
               C16959) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C1018 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50170 * C50206) *
              C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C1018 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C17519 - C17520 + C17521 - C17522) * C118 +
             (C17523 - C17524 + C17525 - C17526) * C50266) *
                C16959) *
               C50170 * C50206) *
              C1021 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C50170 * C1018 +
           (C17531 * C16957 +
            ((C17520 - C17519 + C17522 - C17521) * C118 +
             (C17524 - C17523 + C17526 - C17525) * C50266) *
                C16958 +
            ((C16960 * C298 - C16955 * C316 + C16961 * C299 - C50302 * C318) *
                 C118 +
             (C16960 * C317 - C16955 * C328 + C16961 * C319 - C50302 * C329) *
                 C50266) *
                C16959) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C452 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C453 +
           (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                 C118 +
             (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                 C50266) *
                C16957 +
            ((C17353 - C17354 + C17355 - C17356) * C118 +
             (C17357 - C17358 + C17359 - C17360) * C50266) *
                C16958 +
            ((C17361 - C17362 + C17363 - C17364) * C118 +
             (C17365 - C17366 + C17367 - C17368) * C50266) *
                C16959) *
               C454) *
              C1018 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C452 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C453 +
           (((C16960 * C1208 - C16955 * C1212 + C16961 * C2654 -
              C50302 * C2657) *
                 C118 +
             (C16960 * C1213 - C16955 * C1220 + C16961 * C2658 -
              C50302 * C2663) *
                 C50266) *
                C16957 +
            ((C16960 * C1209 - C16955 * C1214 + C16961 * C2655 -
              C50302 * C2659) *
                 C118 +
             (C16960 * C1215 - C16955 * C1221 + C16961 * C2660 -
              C50302 * C2664) *
                 C50266) *
                C16958 +
            ((C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
              C50302 * C2661) *
                 C118 +
             (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
              C50302 * C2665) *
                 C50266) *
                C16959) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19727 * C292 - C19722 * C304 + C19728 * C296 - C19723 * C312 +
             C19729 * C1096 - C19724 * C1102 + C19730 * C2474 -
             C19725 * C2479) *
                C118 +
            (C19727 * C305 - C19722 * C322 + C19728 * C313 - C19723 * C326 +
             C19729 * C1103 - C19724 * C1108 + C19730 * C2480 -
             C19725 * C2483) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C50170 * C1089 +
          ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
            C19729 * C1094 - C19724 * C1098 + C19730 * C2472 - C19725 * C2475) *
               C118 +
           (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
            C19729 * C1099 - C19724 * C1106 + C19730 * C2476 - C19725 * C2481) *
               C50266) *
              C50109 * C50170 * C1090 +
          ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
            C19724 * C2475 - C19729 * C2472 + C19725 * C3470 - C19730 * C3468) *
               C118 +
           (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
            C19724 * C2481 - C19729 * C2476 + C19725 * C3474 - C19730 * C3471) *
               C50266) *
              C50109 * C50170 * C1091 +
          ((C19727 * C1094 - C19722 * C1098 + C19728 * C2472 - C19723 * C2475 +
            C19729 * C3468 - C19724 * C3470 + C19730 * C20417 -
            C19725 * C20418) *
               C118 +
           (C19727 * C1099 - C19722 * C1106 + C19728 * C2476 - C19723 * C2481 +
            C19729 * C3471 - C19724 * C3474 + C19730 * C20419 -
            C19725 * C20420) *
               C50266) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C452 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C453 +
           ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
             C19724 * C2657 - C19729 * C2654 + C19725 * C3624 -
             C19730 * C3622) *
                C118 +
            (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
             C19724 * C2663 - C19729 * C2658 + C19725 * C3628 -
             C19730 * C3625) *
                C50266) *
               C50109 * C454) *
              C1018 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C452 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C453 +
           ((C19727 * C1208 - C19722 * C1212 + C19728 * C2654 - C19723 * C2657 +
             C19729 * C3622 - C19724 * C3624 + C19730 * C20519 -
             C19725 * C20520) *
                C118 +
            (C19727 * C1213 - C19722 * C1220 + C19728 * C2658 - C19723 * C2663 +
             C19729 * C3625 - C19724 * C3628 + C19730 * C20521 -
             C19725 * C20522) *
                C50266) *
               C50109 * C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C118 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50266) *
                 C16957 +
             ((C16963 - C16964 + C16965 - C16966) * C118 +
              (C16967 - C16968 + C16969 - C16970) * C50266) *
                 C16958 +
             C17011 * C16959) *
                C50396 +
            (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                  C118 +
              (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                  C50266) *
                 C16957 +
             ((C17337 - C17338 + C17339 - C17340) * C118 +
              (C17341 - C17342 + C17343 - C17344) * C50266) *
                 C16958 +
             C17694 * C16959) *
                C50234) *
               C1018 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C118 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50266) *
                 C16957 +
             ((C17159 - C17160 + C17161 - C17162) * C118 +
              (C17163 - C17164 + C17165 - C17166) * C50266) *
                 C16958 +
             C17531 * C16959) *
                C50396 +
            (((C16955 * C893 - C16960 * C888 + C50302 * C1559 -
               C16961 * C1555) *
                  C118 +
              (C16955 * C903 - C16960 * C894 + C50302 * C1567 -
               C16961 * C1560) *
                  C50266) *
                 C16957 +
             ((C17889 - C17890 + C17891 - C17892) * C118 +
              (C17893 - C17894 + C17895 - C17896) * C50266) *
                 C16958 +
             ((C17897 - C17898 + C17899 - C17900) * C118 +
              (C17901 - C17902 + C17903 - C17904) * C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50387 +
          (((((C16964 - C16963 + C16966 - C16965) * C118 +
              (C16968 - C16967 + C16970 - C16969) * C50266) *
                 C16957 +
             ((C16972 - C16971 + C16974 - C16973) * C118 +
              (C16976 - C16975 + C16978 - C16977) * C50266) *
                 C16958 +
             C17012 * C16959) *
                C50396 +
            (((C17338 - C17337 + C17340 - C17339) * C118 +
              (C17342 - C17341 + C17344 - C17343) * C50266) *
                 C16957 +
             ((C17346 - C17345 + C17348 - C17347) * C118 +
              (C17350 - C17349 + C17352 - C17351) * C50266) *
                 C16958 +
             ((C17682 - C17683 + C17684 - C17685) * C118 +
              (C17686 - C17687 + C17688 - C17689) * C50266) *
                 C16959) *
                C50234) *
               C1018 +
           ((((C17160 - C17159 + C17162 - C17161) * C118 +
              (C17164 - C17163 + C17166 - C17165) * C50266) *
                 C16957 +
             ((C17168 - C17167 + C17170 - C17169) * C118 +
              (C17172 - C17171 + C17174 - C17173) * C50266) *
                 C16958 +
             ((C17519 - C17520 + C17521 - C17522) * C118 +
              (C17523 - C17524 + C17525 - C17526) * C50266) *
                 C16959) *
                C50396 +
            (((C17890 - C17889 + C17892 - C17891) * C118 +
              (C17894 - C17893 + C17896 - C17895) * C50266) *
                 C16957 +
             ((C17898 - C17897 + C17900 - C17899) * C118 +
              (C17902 - C17901 + C17904 - C17903) * C50266) *
                 C16958 +
             ((C16960 * C891 - C16955 * C899 + C16961 * C1558 -
               C50302 * C1565) *
                  C118 +
              (C16960 * C900 - C16955 * C906 + C16961 * C1566 -
               C50302 * C1570) *
                  C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
              C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                 C118 +
             (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
              C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                 C50266) *
                C50109 * C50396 +
            ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
              C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
              C19725 * C3203) *
                 C118 +
             (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
              C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
              C19725 * C3209) *
                 C50266) *
                C50109 * C50234) *
               C1018 +
           (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
              C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
              C19725 * C2475) *
                 C118 +
             (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
              C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
              C19725 * C2481) *
                 C50266) *
                C50109 * C50396 +
            ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
              C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
              C19730 * C4116) *
                 C118 +
             (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
              C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
              C19730 * C4119) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
              C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                 C118 +
             (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
              C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                 C50266) *
                C50109 * C50396 +
            ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
              C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
              C19730 * C3201) *
                 C118 +
             (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
              C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
              C19730 * C3206) *
                 C50266) *
                C50109 * C50234) *
               C1018 +
           (((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
              C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
              C19730 * C2473) *
                 C118 +
             (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
              C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
              C19730 * C2478) *
                 C50266) *
                C50109 * C50396 +
            ((C19727 * C889 - C19722 * C895 + C19728 * C1556 - C19723 * C1561 +
              C19729 * C3201 - C19724 * C3205 + C19730 * C4117 -
              C19725 * C4120) *
                 C118 +
             (C19727 * C896 - C19722 * C904 + C19728 * C1562 - C19723 * C1568 +
              C19729 * C3206 - C19724 * C3210 + C19730 * C4121 -
              C19725 * C4123) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50170 * C1018 +
           (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50170 * C50206) *
              C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50170 * C1018 +
           (((C17160 - C17159 + C17162 - C17161) * C118 +
             (C17164 - C17163 + C17166 - C17165) * C50266) *
                C16957 +
            ((C17168 - C17167 + C17170 - C17169) * C118 +
             (C17172 - C17171 + C17174 - C17173) * C50266) *
                C16958 +
            ((C17519 - C17520 + C17521 - C17522) * C118 +
             (C17523 - C17524 + C17525 - C17526) * C50266) *
                C16959) *
               C50170 * C50206) *
              C1021 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C50170 * C1018 +
           (C17531 * C16957 +
            ((C17520 - C17519 + C17522 - C17521) * C118 +
             (C17524 - C17523 + C17526 - C17525) * C50266) *
                C16958 +
            ((C16960 * C298 - C16955 * C316 + C16961 * C299 - C50302 * C318) *
                 C118 +
             (C16960 * C317 - C16955 * C328 + C16961 * C319 - C50302 * C329) *
                 C50266) *
                C16959) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C118 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50266) *
               C16957 +
           ((C16963 - C16964 + C16965 - C16966) * C118 +
            (C16967 - C16968 + C16969 - C16970) * C50266) *
               C16958 +
           C17011 * C16959) *
              C50170 * C1089 +
          (((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                C118 +
            (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                C50266) *
               C16957 +
           ((C17159 - C17160 + C17161 - C17162) * C118 +
            (C17163 - C17164 + C17165 - C17166) * C50266) *
               C16958 +
           C17531 * C16959) *
              C50170 * C1090 +
          (((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                C118 +
            (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                C50266) *
               C16957 +
           ((C17175 - C17176 + C17177 - C17178) * C118 +
            (C17179 - C17180 + C17181 - C17182) * C50266) *
               C16958 +
           ((C17183 - C17184 + C17185 - C17186) * C118 +
            (C17187 - C17188 + C17189 - C17190) * C50266) *
               C16959) *
              C50170 * C1091 +
          (((C16960 * C1094 - C16955 * C1098 + C16961 * C2472 -
             C50302 * C2475) *
                C118 +
            (C16960 * C1099 - C16955 * C1106 + C16961 * C2476 -
             C50302 * C2481) *
                C50266) *
               C16957 +
           ((C16960 * C1095 - C16955 * C1100 + C16961 * C2473 -
             C50302 * C2477) *
                C118 +
            (C16960 * C1101 - C16955 * C1107 + C16961 * C2478 -
             C50302 * C2482) *
                C50266) *
               C16958 +
           ((C16960 * C1096 - C16955 * C1102 + C16961 * C2474 -
             C50302 * C2479) *
                C118 +
            (C16960 * C1103 - C16955 * C1108 + C16961 * C2480 -
             C50302 * C2483) *
                C50266) *
               C16959) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
             C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
             C19730 * C2473) *
                C118 +
            (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
             C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
             C19730 * C2478) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C50170 * C1018 +
           ((C19727 * C292 - C19722 * C304 + C19728 * C296 - C19723 * C312 +
             C19729 * C1096 - C19724 * C1102 + C19730 * C2474 -
             C19725 * C2479) *
                C118 +
            (C19727 * C305 - C19722 * C322 + C19728 * C313 - C19723 * C326 +
             C19729 * C1103 - C19724 * C1108 + C19730 * C2480 -
             C19725 * C2483) *
                C50266) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C50170 * C1089 +
          ((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
            C19729 * C1094 - C19724 * C1098 + C19730 * C2472 - C19725 * C2475) *
               C118 +
           (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
            C19729 * C1099 - C19724 * C1106 + C19730 * C2476 - C19725 * C2481) *
               C50266) *
              C50109 * C50170 * C1090 +
          ((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
            C19724 * C2475 - C19729 * C2472 + C19725 * C3470 - C19730 * C3468) *
               C118 +
           (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
            C19724 * C2481 - C19729 * C2476 + C19725 * C3474 - C19730 * C3471) *
               C50266) *
              C50109 * C50170 * C1091 +
          ((C19727 * C1094 - C19722 * C1098 + C19728 * C2472 - C19723 * C2475 +
            C19729 * C3468 - C19724 * C3470 + C19730 * C20417 -
            C19725 * C20418) *
               C118 +
           (C19727 * C1099 - C19722 * C1106 + C19728 * C2476 - C19723 * C2481 +
            C19729 * C3471 - C19724 * C3474 + C19730 * C20419 -
            C19725 * C20420) *
               C50266) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                  C118 +
              (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                  C50266) *
                 C16957 +
             ((C16963 - C16964 + C16965 - C16966) * C118 +
              (C16967 - C16968 + C16969 - C16970) * C50266) *
                 C16958 +
             C17011 * C16959) *
                C1669 +
            (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                  C118 +
              (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                  C50266) *
                 C16957 +
             ((C17337 - C17338 + C17339 - C17340) * C118 +
              (C17341 - C17342 + C17343 - C17344) * C50266) *
                 C16958 +
             C17694 * C16959) *
                C50234) *
               C50395 +
           ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                  C118 +
              (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                  C50266) *
                 C16957 +
             ((C17159 - C17160 + C17161 - C17162) * C118 +
              (C17163 - C17164 + C17165 - C17166) * C50266) *
                 C16958 +
             C17531 * C16959) *
                C1669 +
            (((C16955 * C893 - C16960 * C888 + C50302 * C1559 -
               C16961 * C1555) *
                  C118 +
              (C16955 * C903 - C16960 * C894 + C50302 * C1567 -
               C16961 * C1560) *
                  C50266) *
                 C16957 +
             ((C17889 - C17890 + C17891 - C17892) * C118 +
              (C17893 - C17894 + C17895 - C17896) * C50266) *
                 C16958 +
             ((C17897 - C17898 + C17899 - C17900) * C118 +
              (C17901 - C17902 + C17903 - C17904) * C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50387 +
          (((((C16964 - C16963 + C16966 - C16965) * C118 +
              (C16968 - C16967 + C16970 - C16969) * C50266) *
                 C16957 +
             ((C16972 - C16971 + C16974 - C16973) * C118 +
              (C16976 - C16975 + C16978 - C16977) * C50266) *
                 C16958 +
             C17012 * C16959) *
                C1669 +
            (((C17338 - C17337 + C17340 - C17339) * C118 +
              (C17342 - C17341 + C17344 - C17343) * C50266) *
                 C16957 +
             ((C17346 - C17345 + C17348 - C17347) * C118 +
              (C17350 - C17349 + C17352 - C17351) * C50266) *
                 C16958 +
             ((C17682 - C17683 + C17684 - C17685) * C118 +
              (C17686 - C17687 + C17688 - C17689) * C50266) *
                 C16959) *
                C50234) *
               C50395 +
           ((((C17160 - C17159 + C17162 - C17161) * C118 +
              (C17164 - C17163 + C17166 - C17165) * C50266) *
                 C16957 +
             ((C17168 - C17167 + C17170 - C17169) * C118 +
              (C17172 - C17171 + C17174 - C17173) * C50266) *
                 C16958 +
             ((C17519 - C17520 + C17521 - C17522) * C118 +
              (C17523 - C17524 + C17525 - C17526) * C50266) *
                 C16959) *
                C1669 +
            (((C17890 - C17889 + C17892 - C17891) * C118 +
              (C17894 - C17893 + C17896 - C17895) * C50266) *
                 C16957 +
             ((C17898 - C17897 + C17900 - C17899) * C118 +
              (C17902 - C17901 + C17904 - C17903) * C50266) *
                 C16958 +
             ((C16960 * C891 - C16955 * C899 + C16961 * C1558 -
               C50302 * C1565) *
                  C118 +
              (C16960 * C900 - C16955 * C906 + C16961 * C1566 -
               C50302 * C1570) *
                  C50266) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
              C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                 C118 +
             (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
              C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                 C50266) *
                C50109 * C1669 +
            ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
              C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
              C19725 * C3203) *
                 C118 +
             (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
              C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
              C19725 * C3209) *
                 C50266) *
                C50109 * C50234) *
               C50395 +
           (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
              C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
              C19725 * C2475) *
                 C118 +
             (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
              C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
              C19725 * C2481) *
                 C50266) *
                C50109 * C1669 +
            ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
              C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
              C19730 * C4116) *
                 C118 +
             (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
              C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
              C19730 * C4119) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
              C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                 C118 +
             (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
              C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                 C50266) *
                C50109 * C1669 +
            ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
              C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
              C19730 * C3201) *
                 C118 +
             (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
              C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
              C19730 * C3206) *
                 C50266) *
                C50109 * C50234) *
               C50395 +
           (((C19722 * C302 - C19727 * C291 + C19723 * C310 - C19728 * C295 +
              C19724 * C1100 - C19729 * C1095 + C19725 * C2477 -
              C19730 * C2473) *
                 C118 +
             (C19722 * C321 - C19727 * C303 + C19723 * C325 - C19728 * C311 +
              C19724 * C1107 - C19729 * C1101 + C19725 * C2482 -
              C19730 * C2478) *
                 C50266) *
                C50109 * C1669 +
            ((C19727 * C889 - C19722 * C895 + C19728 * C1556 - C19723 * C1561 +
              C19729 * C3201 - C19724 * C3205 + C19730 * C4117 -
              C19725 * C4120) *
                 C118 +
             (C19727 * C896 - C19722 * C904 + C19728 * C1562 - C19723 * C1568 +
              C19729 * C3206 - C19724 * C3210 + C19730 * C4121 -
              C19725 * C4123) *
                 C50266) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50442 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50443 +
           (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                 C118 +
             (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                 C50266) *
                C16957 +
            ((C17353 - C17354 + C17355 - C17356) * C118 +
             (C17357 - C17358 + C17359 - C17360) * C50266) *
                C16958 +
            ((C17361 - C17362 + C17363 - C17364) * C118 +
             (C17365 - C17366 + C17367 - C17368) * C50266) *
                C16959) *
               C2085) *
              C50395 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C50442 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C50443 +
           (((C16960 * C1208 - C16955 * C1212 + C16961 * C2654 -
              C50302 * C2657) *
                 C118 +
             (C16960 * C1213 - C16955 * C1220 + C16961 * C2658 -
              C50302 * C2663) *
                 C50266) *
                C16957 +
            ((C16960 * C1209 - C16955 * C1214 + C16961 * C2655 -
              C50302 * C2659) *
                 C118 +
             (C16960 * C1215 - C16955 * C1221 + C16961 * C2660 -
              C50302 * C2664) *
                 C50266) *
                C16958 +
            ((C16960 * C1210 - C16955 * C1216 + C16961 * C2656 -
              C50302 * C2661) *
                 C118 +
             (C16960 * C1217 - C16955 * C1222 + C16961 * C2662 -
              C50302 * C2665) *
                 C50266) *
                C16959) *
               C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50442 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50443 +
           ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
             C19724 * C2657 - C19729 * C2654 + C19725 * C3624 -
             C19730 * C3622) *
                C118 +
            (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
             C19724 * C2663 - C19729 * C2658 + C19725 * C3628 -
             C19730 * C3625) *
                C50266) *
               C50109 * C2085) *
              C50395 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C50442 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C50443 +
           ((C19727 * C1208 - C19722 * C1212 + C19728 * C2654 - C19723 * C2657 +
             C19729 * C3622 - C19724 * C3624 + C19730 * C20519 -
             C19725 * C20520) *
                C118 +
            (C19727 * C1213 - C19722 * C1220 + C19728 * C2658 - C19723 * C2663 +
             C19729 * C3625 - C19724 * C3628 + C19730 * C20521 -
             C19725 * C20522) *
                C50266) *
               C50109 * C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C1669 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C285 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C1669 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C50234) *
              C286 +
          ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C1669 +
           (((C16960 * C1555 - C16955 * C1559 + C16961 * C3200 -
              C50302 * C3203) *
                 C118 +
             (C16960 * C1560 - C16955 * C1567 + C16961 * C3204 -
              C50302 * C3209) *
                 C50266) *
                C16957 +
            ((C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
              C50302 * C3205) *
                 C118 +
             (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
              C50302 * C3210) *
                 C50266) *
                C16958 +
            ((C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
              C50302 * C3207) *
                 C118 +
             (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
              C50302 * C3211) *
                 C50266) *
                C16959) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C1669 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C50154 * C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C1669 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C17682 - C17683 + C17684 - C17685) * C118 +
             (C17686 - C17687 + C17688 - C17689) * C50266) *
                C16959) *
               C50234) *
              C50154 * C1021 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C1669 +
           (C17694 * C16957 +
            ((C17683 - C17682 + C17685 - C17684) * C118 +
             (C17687 - C17686 + C17689 - C17688) * C50266) *
                C16958 +
            ((C16960 * C463 - C16955 * C481 + C16961 * C892 - C50302 * C901) *
                 C118 +
             (C16960 * C482 - C16955 * C493 + C16961 * C902 - C50302 * C907) *
                 C50266) *
                C16959) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                C118 +
            (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                C50266) *
               C16957 +
           ((C16963 - C16964 + C16965 - C16966) * C118 +
            (C16967 - C16968 + C16969 - C16970) * C50266) *
               C16958 +
           C17011 * C16959) *
              C1835 +
          (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                C118 +
            (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                C50266) *
               C16957 +
           ((C17337 - C17338 + C17339 - C17340) * C118 +
            (C17341 - C17342 + C17343 - C17344) * C50266) *
               C16958 +
           C17694 * C16959) *
              C1836 +
          (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                C118 +
            (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                C50266) *
               C16957 +
           ((C17353 - C17354 + C17355 - C17356) * C118 +
            (C17357 - C17358 + C17359 - C17360) * C50266) *
               C16958 +
           ((C17361 - C17362 + C17363 - C17364) * C118 +
            (C17365 - C17366 + C17367 - C17368) * C50266) *
               C16959) *
              C1837 +
          (((C16960 * C1839 - C16955 * C1843 + C16961 * C4514 -
             C50302 * C4518) *
                C118 +
            (C16960 * C1844 - C16955 * C1851 + C16961 * C4520 -
             C50302 * C4526) *
                C50266) *
               C16957 +
           ((C16960 * C1840 - C16955 * C1845 + C16961 * C4516 -
             C50302 * C4522) *
                C118 +
            (C16960 * C1846 - C16955 * C1852 + C16961 * C4524 -
             C50302 * C4528) *
                C50266) *
               C16958 +
           ((C16960 * C1841 - C16955 * C1847 + C16961 * C5970 -
             C50302 * C5971) *
                C118 +
            (C16960 * C1848 - C16955 * C1853 + C16961 * C5972 -
             C50302 * C5973) *
                C50266) *
               C16959) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C1669 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C457 - C19722 * C469 + C19728 * C890 - C19723 * C897 +
             C19729 * C1557 - C19724 * C1563 + C19730 * C3202 -
             C19725 * C3207) *
                C118 +
            (C19727 * C470 - C19722 * C487 + C19728 * C898 - C19723 * C905 +
             C19729 * C1564 - C19724 * C1569 + C19730 * C3208 -
             C19725 * C3211) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C285 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C1669 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C50234) *
              C286 +
          (((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C1555 - C19722 * C1559 + C19728 * C3200 - C19723 * C3203 +
             C19729 * C4116 - C19724 * C4118 + C19730 * C20849 -
             C19725 * C20850) *
                C118 +
            (C19727 * C1560 - C19722 * C1567 + C19728 * C3204 - C19723 * C3209 +
             C19729 * C4119 - C19724 * C4122 + C19730 * C20851 -
             C19725 * C20852) *
                C50266) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
            C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
               C118 +
           (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
            C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
               C50266) *
              C50109 * C1835 +
          ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
            C19729 * C1555 - C19724 * C1559 + C19730 * C3200 - C19725 * C3203) *
               C118 +
           (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
            C19729 * C1560 - C19724 * C1567 + C19730 * C3204 - C19725 * C3209) *
               C50266) *
              C50109 * C1836 +
          ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
            C19724 * C2657 - C19729 * C2654 + C19725 * C3624 - C19730 * C3622) *
               C118 +
           (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
            C19724 * C2663 - C19729 * C2658 + C19725 * C3628 - C19730 * C3625) *
               C50266) *
              C50109 * C1837 +
          ((C19727 * C1839 - C19722 * C1843 + C19728 * C4514 - C19723 * C4518 +
            C19729 * C4515 - C19724 * C4519 + C19730 * C21115 -
            C19725 * C21116) *
               C118 +
           (C19727 * C1844 - C19722 * C1851 + C19728 * C4520 - C19723 * C4526 +
            C19729 * C4521 - C19724 * C4527 + C19730 * C21117 -
            C19725 * C21118) *
               C50266) *
              C50109 * C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C50442 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50443 +
           (((C16955 * C473 - C16960 * C459 + C50302 * C1212 - C16961 * C1208) *
                 C118 +
             (C16955 * C489 - C16960 * C474 + C50302 * C1220 - C16961 * C1213) *
                 C50266) *
                C16957 +
            ((C17353 - C17354 + C17355 - C17356) * C118 +
             (C17357 - C17358 + C17359 - C17360) * C50266) *
                C16958 +
            ((C17361 - C17362 + C17363 - C17364) * C118 +
             (C17365 - C17366 + C17367 - C17368) * C50266) *
                C16959) *
               C2085) *
              C50154 * C50387 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C50442 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C17682 - C17683 + C17684 - C17685) * C118 +
             (C17686 - C17687 + C17688 - C17689) * C50266) *
                C16959) *
               C50443 +
           (((C17354 - C17353 + C17356 - C17355) * C118 +
             (C17358 - C17357 + C17360 - C17359) * C50266) *
                C16957 +
            ((C17362 - C17361 + C17364 - C17363) * C118 +
             (C17366 - C17365 + C17368 - C17367) * C50266) *
                C16958 +
            ((C16960 * C462 - C16955 * C479 + C16961 * C1211 - C50302 * C1218) *
                 C118 +
             (C16960 * C480 - C16955 * C492 + C16961 * C1219 - C50302 * C1223) *
                 C50266) *
                C16959) *
               C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C50442 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50443 +
           ((C19722 * C473 - C19727 * C459 + C19723 * C1212 - C19728 * C1208 +
             C19724 * C2657 - C19729 * C2654 + C19725 * C3624 -
             C19730 * C3622) *
                C118 +
            (C19722 * C489 - C19727 * C474 + C19723 * C1220 - C19728 * C1213 +
             C19724 * C2663 - C19729 * C2658 + C19725 * C3628 -
             C19730 * C3625) *
                C50266) *
               C50109 * C2085) *
              C50154 * C50387 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C50442 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C50443 +
           ((C19727 * C460 - C19722 * C475 + C19728 * C1209 - C19723 * C1214 +
             C19729 * C2655 - C19724 * C2659 + C19730 * C3623 -
             C19725 * C3626) *
                C118 +
            (C19727 * C476 - C19722 * C490 + C19728 * C1215 - C19723 * C1221 +
             C19729 * C2660 - C19724 * C2664 + C19730 * C3627 -
             C19725 * C3629) *
                C50266) *
               C50109 * C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C1669 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C50154 * C1020 +
          ((((C16964 - C16963 + C16966 - C16965) * C118 +
             (C16968 - C16967 + C16970 - C16969) * C50266) *
                C16957 +
            ((C16972 - C16971 + C16974 - C16973) * C118 +
             (C16976 - C16975 + C16978 - C16977) * C50266) *
                C16958 +
            C17012 * C16959) *
               C1669 +
           (((C17338 - C17337 + C17340 - C17339) * C118 +
             (C17342 - C17341 + C17344 - C17343) * C50266) *
                C16957 +
            ((C17346 - C17345 + C17348 - C17347) * C118 +
             (C17350 - C17349 + C17352 - C17351) * C50266) *
                C16958 +
            ((C17682 - C17683 + C17684 - C17685) * C118 +
             (C17686 - C17687 + C17688 - C17689) * C50266) *
                C16959) *
               C50234) *
              C50154 * C1021 +
          ((C17011 * C16957 +
            ((C16980 - C16979 + C16982 - C16981) * C118 +
             (C16984 - C16983 + C16986 - C16985) * C50266) *
                C16958 +
            ((C16987 - C16988 + C16989 - C16990) * C118 +
             (C16991 - C16992 + C16993 - C16994) * C50266) *
                C16959) *
               C1669 +
           (C17694 * C16957 +
            ((C17683 - C17682 + C17685 - C17684) * C118 +
             (C17687 - C17686 + C17689 - C17688) * C50266) *
                C16958 +
            ((C16960 * C463 - C16955 * C481 + C16961 * C892 - C50302 * C901) *
                 C118 +
             (C16960 * C482 - C16955 * C493 + C16961 * C902 - C50302 * C907) *
                 C50266) *
                C16959) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16955 * C126 - C16960 * C119 + C50302 * C300 - C16961 * C290) *
                 C118 +
             (C16955 * C140 - C16960 * C127 + C50302 * C320 - C16961 * C301) *
                 C50266) *
                C16957 +
            ((C16963 - C16964 + C16965 - C16966) * C118 +
             (C16967 - C16968 + C16969 - C16970) * C50266) *
                C16958 +
            C17011 * C16959) *
               C1669 +
           (((C16960 * C455 - C16955 * C465 + C16961 * C888 - C50302 * C893) *
                 C118 +
             (C16960 * C466 - C16955 * C485 + C16961 * C894 - C50302 * C903) *
                 C50266) *
                C16957 +
            ((C17337 - C17338 + C17339 - C17340) * C118 +
             (C17341 - C17342 + C17343 - C17344) * C50266) *
                C16958 +
            C17694 * C16959) *
               C50234) *
              C285 +
          ((((C16960 * C290 - C16955 * C300 + C16961 * C294 - C50302 * C308) *
                 C118 +
             (C16960 * C301 - C16955 * C320 + C16961 * C309 - C50302 * C324) *
                 C50266) *
                C16957 +
            ((C17159 - C17160 + C17161 - C17162) * C118 +
             (C17163 - C17164 + C17165 - C17166) * C50266) *
                C16958 +
            C17531 * C16959) *
               C1669 +
           (((C16955 * C893 - C16960 * C888 + C50302 * C1559 - C16961 * C1555) *
                 C118 +
             (C16955 * C903 - C16960 * C894 + C50302 * C1567 - C16961 * C1560) *
                 C50266) *
                C16957 +
            ((C17889 - C17890 + C17891 - C17892) * C118 +
             (C17893 - C17894 + C17895 - C17896) * C50266) *
                C16958 +
            ((C17897 - C17898 + C17899 - C17900) * C118 +
             (C17901 - C17902 + C17903 - C17904) * C50266) *
                C16959) *
               C50234) *
              C286 +
          ((((C16955 * C308 - C16960 * C294 + C50302 * C1098 - C16961 * C1094) *
                 C118 +
             (C16955 * C324 - C16960 * C309 + C50302 * C1106 - C16961 * C1099) *
                 C50266) *
                C16957 +
            ((C17175 - C17176 + C17177 - C17178) * C118 +
             (C17179 - C17180 + C17181 - C17182) * C50266) *
                C16958 +
            ((C17183 - C17184 + C17185 - C17186) * C118 +
             (C17187 - C17188 + C17189 - C17190) * C50266) *
                C16959) *
               C1669 +
           (((C16960 * C1555 - C16955 * C1559 + C16961 * C3200 -
              C50302 * C3203) *
                 C118 +
             (C16960 * C1560 - C16955 * C1567 + C16961 * C3204 -
              C50302 * C3209) *
                 C50266) *
                C16957 +
            ((C16960 * C1556 - C16955 * C1561 + C16961 * C3201 -
              C50302 * C3205) *
                 C118 +
             (C16960 * C1562 - C16955 * C1568 + C16961 * C3206 -
              C50302 * C3210) *
                 C50266) *
                C16958 +
            ((C16960 * C1557 - C16955 * C1563 + C16961 * C3202 -
              C50302 * C3207) *
                 C118 +
             (C16960 * C1564 - C16955 * C1569 + C16961 * C3208 -
              C50302 * C3211) *
                 C50266) *
                C16959) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C19727 * C120 - C19722 * C128 + C19728 * C291 - C19723 * C302 +
             C19729 * C295 - C19724 * C310 + C19730 * C1095 - C19725 * C1100) *
                C118 +
            (C19727 * C129 - C19722 * C141 + C19728 * C303 - C19723 * C321 +
             C19729 * C311 - C19724 * C325 + C19730 * C1101 - C19725 * C1107) *
                C50266) *
               C50109 * C1669 +
           ((C19722 * C467 - C19727 * C456 + C19723 * C895 - C19728 * C889 +
             C19724 * C1561 - C19729 * C1556 + C19725 * C3205 -
             C19730 * C3201) *
                C118 +
            (C19722 * C486 - C19727 * C468 + C19723 * C904 - C19728 * C896 +
             C19724 * C1568 - C19729 * C1562 + C19725 * C3210 -
             C19730 * C3206) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C19722 * C130 - C19727 * C121 + C19723 * C304 - C19728 * C292 +
             C19724 * C312 - C19729 * C296 + C19725 * C1102 - C19730 * C1096) *
                C118 +
            (C19722 * C142 - C19727 * C131 + C19723 * C322 - C19728 * C305 +
             C19724 * C326 - C19729 * C313 + C19725 * C1108 - C19730 * C1103) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C457 - C19722 * C469 + C19728 * C890 - C19723 * C897 +
             C19729 * C1557 - C19724 * C1563 + C19730 * C3202 -
             C19725 * C3207) *
                C118 +
            (C19727 * C470 - C19722 * C487 + C19728 * C898 - C19723 * C905 +
             C19729 * C1564 - C19724 * C1569 + C19730 * C3208 -
             C19725 * C3211) *
                C50266) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19722 * C126 - C19727 * C119 + C19723 * C300 - C19728 * C290 +
             C19724 * C308 - C19729 * C294 + C19725 * C1098 - C19730 * C1094) *
                C118 +
            (C19722 * C140 - C19727 * C127 + C19723 * C320 - C19728 * C301 +
             C19724 * C324 - C19729 * C309 + C19725 * C1106 - C19730 * C1099) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C455 - C19722 * C465 + C19728 * C888 - C19723 * C893 +
             C19729 * C1555 - C19724 * C1559 + C19730 * C3200 -
             C19725 * C3203) *
                C118 +
            (C19727 * C466 - C19722 * C485 + C19728 * C894 - C19723 * C903 +
             C19729 * C1560 - C19724 * C1567 + C19730 * C3204 -
             C19725 * C3209) *
                C50266) *
               C50109 * C50234) *
              C285 +
          (((C19727 * C290 - C19722 * C300 + C19728 * C294 - C19723 * C308 +
             C19729 * C1094 - C19724 * C1098 + C19730 * C2472 -
             C19725 * C2475) *
                C118 +
            (C19727 * C301 - C19722 * C320 + C19728 * C309 - C19723 * C324 +
             C19729 * C1099 - C19724 * C1106 + C19730 * C2476 -
             C19725 * C2481) *
                C50266) *
               C50109 * C1669 +
           ((C19722 * C893 - C19727 * C888 + C19723 * C1559 - C19728 * C1555 +
             C19724 * C3203 - C19729 * C3200 + C19725 * C4118 -
             C19730 * C4116) *
                C118 +
            (C19722 * C903 - C19727 * C894 + C19723 * C1567 - C19728 * C1560 +
             C19724 * C3209 - C19729 * C3204 + C19725 * C4122 -
             C19730 * C4119) *
                C50266) *
               C50109 * C50234) *
              C286 +
          (((C19722 * C308 - C19727 * C294 + C19723 * C1098 - C19728 * C1094 +
             C19724 * C2475 - C19729 * C2472 + C19725 * C3470 -
             C19730 * C3468) *
                C118 +
            (C19722 * C324 - C19727 * C309 + C19723 * C1106 - C19728 * C1099 +
             C19724 * C2481 - C19729 * C2476 + C19725 * C3474 -
             C19730 * C3471) *
                C50266) *
               C50109 * C1669 +
           ((C19727 * C1555 - C19722 * C1559 + C19728 * C3200 - C19723 * C3203 +
             C19729 * C4116 - C19724 * C4118 + C19730 * C20849 -
             C19725 * C20850) *
                C118 +
            (C19727 * C1560 - C19722 * C1567 + C19728 * C3204 - C19723 * C3209 +
             C19729 * C4119 - C19724 * C4122 + C19730 * C20851 -
             C19725 * C20852) *
                C50266) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50170 * C50395 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C50170 * C50206) *
              C50438 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C50170 * C50395 +
           (((C8085 - C8084 + C8087 - C8086) * C33285 +
             (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
             C14505 * C50330) *
                C50380 +
            ((C8093 - C8092 + C8095 - C8094) * C33285 +
             (C8097 - C8096 + C8099 - C8098) * C33283 +
             (C8822 - C8823 + C8824 - C8825) * C33286 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C50206) *
              C50439 +
          (((C7928 * C33285 + C7929 * C33283 + C14218 * C33286 +
             C14219 * C50330) *
                C50380 +
            ((C7905 - C7904 + C7907 - C7906) * C33285 +
             (C7909 - C7908 + C7911 - C7910) * C33283 +
             (C8607 - C8608 + C8609 - C8610) * C33286 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C50170 * C50395 +
           ((C8452 * C33285 + C8453 * C33283 +
             (C8823 - C8822 + C8825 - C8824) * C33286 +
             (C8827 - C8826 + C8829 - C8828) * C50330) *
                C50380 +
            ((C8445 - C8444 + C8447 - C8446) * C33285 +
             (C8449 - C8448 + C8451 - C8450) * C33283 +
             (C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                 C33286 +
             (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C33285 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C33283 +
              (C13778 - C13779 + C13780 - C13781) * C33286 +
              (C13782 - C13783 + C13784 - C13785) * C50330) *
                 C50380 +
             ((C7888 - C7889 + C7890 - C7891) * C33285 +
              (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
              C13819 * C50330) *
                 C50114) *
                C50396 +
            (((C13779 - C13778 + C13781 - C13780) * C33285 +
              (C13783 - C13782 + C13785 - C13784) * C33283 +
              (C13790 - C13791 + C13792 - C13793) * C33286 +
              (C13794 - C13795 + C13796 - C13797) * C50330) *
                 C50380 +
             (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
              C13823 * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C33285 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C33283 +
              (C14478 - C14479 + C14480 - C14481) * C33286 +
              (C14482 - C14483 + C14484 - C14485) * C50330) *
                 C50380 +
             ((C8084 - C8085 + C8086 - C8087) * C33285 +
              (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
              C14503 * C50330) *
                 C50114) *
                C50396 +
            (((C14479 - C14478 + C14481 - C14480) * C33285 +
              (C14483 - C14482 + C14485 - C14484) * C33283 +
              (C15024 - C15025 + C15026 - C15027) * C33286 +
              (C15028 - C15029 + C15030 - C15031) * C50330) *
                 C50380 +
             (C14504 * C33285 + C14505 * C33283 +
              (C14494 - C14495 + C14496 - C14497) * C33286 +
              (C14498 - C14499 + C14500 - C14501) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C288 +
          (((((C7889 - C7888 + C7891 - C7890) * C33285 +
              (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
              C13821 * C50330) *
                 C50380 +
             ((C7897 - C7896 + C7899 - C7898) * C33285 +
              (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
              C8616 * C50330) *
                 C50114) *
                C50396 +
            ((C13818 * C33285 + C13819 * C33283 + C13824 * C33286 +
              C13825 * C50330) *
                 C50380 +
             (C14218 * C33285 + C14219 * C33283 +
              (C8286 - C8287 + C8288 - C8289) * C33286 +
              (C8290 - C8291 + C8292 - C8293) * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C8085 - C8084 + C8087 - C8086) * C33285 +
              (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
              C14505 * C50330) *
                 C50380 +
             ((C8093 - C8092 + C8095 - C8094) * C33285 +
              (C8097 - C8096 + C8099 - C8098) * C33283 +
              (C8822 - C8823 + C8824 - C8825) * C33286 +
              (C8826 - C8827 + C8828 - C8829) * C50330) *
                 C50114) *
                C50396 +
            ((C14502 * C33285 + C14503 * C33283 +
              (C14495 - C14494 + C14497 - C14496) * C33286 +
              (C14499 - C14498 + C14501 - C14500) * C50330) *
                 C50380 +
             ((C8823 - C8822 + C8825 - C8824) * C33285 +
              (C8827 - C8826 + C8829 - C8828) * C33283 +
              (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 -
               C50302 * C2661) *
                  C33286 +
              (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50170 * C285 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C50170 * C286 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C33285 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C33283 +
             (C15678 - C15679 + C15680 - C15681) * C33286 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C50380 +
            ((C8100 - C8101 + C8102 - C8103) * C33285 +
             (C8104 - C8105 + C8106 - C8107) * C33283 +
             (C13576 - C13577 + C13578 - C13579) * C33286 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C50170 * C285 +
           (((C8085 - C8084 + C8087 - C8086) * C33285 +
             (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
             C14505 * C50330) *
                C50380 +
            ((C8093 - C8092 + C8095 - C8094) * C33285 +
             (C8097 - C8096 + C8099 - C8098) * C33283 +
             (C8822 - C8823 + C8824 - C8825) * C33286 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C8101 - C8100 + C8103 - C8102) * C33285 +
             (C8105 - C8104 + C8107 - C8106) * C33283 +
             (C13577 - C13576 + C13579 - C13578) * C33286 +
             (C13581 - C13580 + C13583 - C13582) * C50330) *
                C50380 +
            ((C8109 - C8108 + C8111 - C8110) * C33285 +
             (C8113 - C8112 + C8115 - C8114) * C33283 +
             (C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C33286 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C33285 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C33283 +
            (C13778 - C13779 + C13780 - C13781) * C33286 +
            (C13782 - C13783 + C13784 - C13785) * C50330) *
               C50380 +
           ((C7888 - C7889 + C7890 - C7891) * C33285 +
            (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
            C13819 * C50330) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C7889 - C7888 + C7891 - C7890) * C33285 +
            (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
            C13821 * C50330) *
               C50380 +
           ((C7897 - C7896 + C7899 - C7898) * C33285 +
            (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
            C8616 * C50330) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C7928 * C33285 + C7929 * C33283 + C14218 * C33286 +
            C14219 * C50330) *
               C50380 +
           ((C7905 - C7904 + C7907 - C7906) * C33285 +
            (C7909 - C7908 + C7911 - C7910) * C33283 +
            (C8607 - C8608 + C8609 - C8610) * C33286 +
            (C8611 - C8612 + C8613 - C8614) * C50330) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C7930 * C33285 + C7931 * C33283 +
            (C8608 - C8607 + C8610 - C8609) * C33286 +
            (C8612 - C8611 + C8614 - C8613) * C50330) *
               C50380 +
           ((C7913 - C7912 + C7915 - C7914) * C33285 +
            (C7917 - C7916 + C7919 - C7918) * C33283 +
            (C7885 * C463 - C50408 * C481 + C7886 * C892 - C50302 * C901) *
                C33286 +
            (C7885 * C482 - C50408 * C493 + C7886 * C902 - C50302 * C907) *
                C50330) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C452 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C453 +
           (((C13791 - C13790 + C13793 - C13792) * C33285 +
             (C13795 - C13794 + C13797 - C13796) * C33283 +
             (C16204 - C16205 + C16206 - C16207) * C33286 +
             (C16208 - C16209 + C16210 - C16211) * C50330) *
                C50380 +
            (C13824 * C33285 + C13825 * C33283 +
             (C13810 - C13811 + C13812 - C13813) * C33286 +
             (C13814 - C13815 + C13816 - C13817) * C50330) *
                C50114) *
               C454) *
              C50154 * C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C452 +
           ((C13818 * C33285 + C13819 * C33283 + C13824 * C33286 +
             C13825 * C50330) *
                C50380 +
            (C14218 * C33285 + C14219 * C33283 +
             (C8286 - C8287 + C8288 - C8289) * C33286 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C453 +
           ((C13822 * C33285 + C13823 * C33283 +
             (C13811 - C13810 + C13813 - C13812) * C33286 +
             (C13815 - C13814 + C13817 - C13816) * C50330) *
                C50380 +
            ((C8287 - C8286 + C8289 - C8288) * C33285 +
             (C8291 - C8290 + C8293 - C8292) * C33283 +
             (C7885 * C1841 - C50408 * C1847 + C7886 * C5970 - C50302 * C5971) *
                 C33286 +
             (C7885 * C1848 - C50408 * C1853 + C7886 * C5972 - C50302 * C5973) *
                 C50330) *
                C50114) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50396 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C50154 * C50438 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C50396 +
           ((C13818 * C33285 + C13819 * C33283 + C13824 * C33286 +
             C13825 * C50330) *
                C50380 +
            (C14218 * C33285 + C14219 * C33283 +
             (C8286 - C8287 + C8288 - C8289) * C33286 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C50234) *
              C50154 * C50439 +
          (((C7928 * C33285 + C7929 * C33283 + C14218 * C33286 +
             C14219 * C50330) *
                C50380 +
            ((C7905 - C7904 + C7907 - C7906) * C33285 +
             (C7909 - C7908 + C7911 - C7910) * C33283 +
             (C8607 - C8608 + C8609 - C8610) * C33286 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C50396 +
           ((C8615 * C33285 + C8616 * C33283 +
             (C8287 - C8286 + C8289 - C8288) * C33286 +
             (C8291 - C8290 + C8293 - C8292) * C50330) *
                C50380 +
            ((C8608 - C8607 + C8610 - C8609) * C33285 +
             (C8612 - C8611 + C8614 - C8613) * C33283 +
             (C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
                 C33286 +
             (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C33285 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C33283 +
            (C13778 - C13779 + C13780 - C13781) * C33286 +
            (C13782 - C13783 + C13784 - C13785) * C50330) *
               C50380 +
           ((C7888 - C7889 + C7890 - C7891) * C33285 +
            (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
            C13819 * C50330) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C7889 - C7888 + C7891 - C7890) * C33285 +
            (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
            C13821 * C50330) *
               C50380 +
           ((C7897 - C7896 + C7899 - C7898) * C33285 +
            (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
            C8616 * C50330) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C7928 * C33285 + C7929 * C33283 + C14218 * C33286 +
            C14219 * C50330) *
               C50380 +
           ((C7905 - C7904 + C7907 - C7906) * C33285 +
            (C7909 - C7908 + C7911 - C7910) * C33283 +
            (C8607 - C8608 + C8609 - C8610) * C33286 +
            (C8611 - C8612 + C8613 - C8614) * C50330) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C7930 * C33285 + C7931 * C33283 +
            (C8608 - C8607 + C8610 - C8609) * C33286 +
            (C8612 - C8611 + C8614 - C8613) * C50330) *
               C50380 +
           ((C7913 - C7912 + C7915 - C7914) * C33285 +
            (C7917 - C7916 + C7919 - C7918) * C33283 +
            (C7885 * C463 - C50408 * C481 + C7886 * C892 - C50302 * C901) *
                C33286 +
            (C7885 * C482 - C50408 * C493 + C7886 * C902 - C50302 * C907) *
                C50330) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50170 * C285 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C50170 * C286 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C33285 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C33283 +
             (C15678 - C15679 + C15680 - C15681) * C33286 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C50380 +
            ((C8100 - C8101 + C8102 - C8103) * C33285 +
             (C8104 - C8105 + C8106 - C8107) * C33283 +
             (C13576 - C13577 + C13578 - C13579) * C33286 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C50170 * C285 +
           (((C8085 - C8084 + C8087 - C8086) * C33285 +
             (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
             C14505 * C50330) *
                C50380 +
            ((C8093 - C8092 + C8095 - C8094) * C33285 +
             (C8097 - C8096 + C8099 - C8098) * C33283 +
             (C8822 - C8823 + C8824 - C8825) * C33286 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C286 +
           (((C8101 - C8100 + C8103 - C8102) * C33285 +
             (C8105 - C8104 + C8107 - C8106) * C33283 +
             (C13577 - C13576 + C13579 - C13578) * C33286 +
             (C13581 - C13580 + C13583 - C13582) * C50330) *
                C50380 +
            ((C8109 - C8108 + C8111 - C8110) * C33285 +
             (C8113 - C8112 + C8115 - C8114) * C33283 +
             (C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C33286 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50170 * C50440 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C50170 * C50441 +
           (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C33285 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C33283 +
             (C15678 - C15679 + C15680 - C15681) * C33286 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C50380 +
            ((C8100 - C8101 + C8102 - C8103) * C33285 +
             (C8104 - C8105 + C8106 - C8107) * C33283 +
             (C13576 - C13577 + C13578 - C13579) * C33286 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C50170 * C1324) *
              C50387 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C50170 * C50440 +
           (((C8085 - C8084 + C8087 - C8086) * C33285 +
             (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
             C14505 * C50330) *
                C50380 +
            ((C8093 - C8092 + C8095 - C8094) * C33285 +
             (C8097 - C8096 + C8099 - C8098) * C33283 +
             (C8822 - C8823 + C8824 - C8825) * C33286 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C50441 +
           (((C8101 - C8100 + C8103 - C8102) * C33285 +
             (C8105 - C8104 + C8107 - C8106) * C33283 +
             (C13577 - C13576 + C13579 - C13578) * C33286 +
             (C13581 - C13580 + C13583 - C13582) * C50330) *
                C50380 +
            ((C8109 - C8108 + C8111 - C8110) * C33285 +
             (C8113 - C8112 + C8115 - C8114) * C33283 +
             (C7885 * C1557 - C50408 * C1563 + C7886 * C3202 - C50302 * C3207) *
                 C33286 +
             (C7885 * C1564 - C50408 * C1569 + C7886 * C3208 - C50302 * C3211) *
                 C50330) *
                C50114) *
               C50170 * C1324) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50396 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C50440 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C50396 +
           (((C14479 - C14478 + C14481 - C14480) * C33285 +
             (C14483 - C14482 + C14485 - C14484) * C33283 +
             (C15024 - C15025 + C15026 - C15027) * C33286 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C50380 +
            (C14504 * C33285 + C14505 * C33283 +
             (C14494 - C14495 + C14496 - C14497) * C33286 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C50234) *
              C50441 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C33285 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C33283 +
             (C15678 - C15679 + C15680 - C15681) * C33286 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C50380 +
            ((C8100 - C8101 + C8102 - C8103) * C33285 +
             (C8104 - C8105 + C8106 - C8107) * C33283 +
             (C13576 - C13577 + C13578 - C13579) * C33286 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C50396 +
           (((C15679 - C15678 + C15681 - C15680) * C33285 +
             (C15683 - C15682 + C15685 - C15684) * C33283 +
             (C7885 * C2654 - C50408 * C2657 + C7886 * C3622 - C50302 * C3624) *
                 C33286 +
             (C7885 * C2658 - C50408 * C2663 + C7886 * C3625 - C50302 * C3628) *
                 C50330) *
                C50380 +
            ((C13577 - C13576 + C13579 - C13578) * C33285 +
             (C13581 - C13580 + C13583 - C13582) * C33283 +
             (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                 C33286 +
             (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C1324) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C33285 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C33283 +
            (C13778 - C13779 + C13780 - C13781) * C33286 +
            (C13782 - C13783 + C13784 - C13785) * C50330) *
               C50380 +
           ((C7888 - C7889 + C7890 - C7891) * C33285 +
            (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
            C13819 * C50330) *
               C50114) *
              C50170 * C1089 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C33285 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C33283 +
            (C14478 - C14479 + C14480 - C14481) * C33286 +
            (C14482 - C14483 + C14484 - C14485) * C50330) *
               C50380 +
           ((C8084 - C8085 + C8086 - C8087) * C33285 +
            (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
            C14503 * C50330) *
               C50114) *
              C50170 * C1090 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C33285 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C33283 +
            (C15678 - C15679 + C15680 - C15681) * C33286 +
            (C15682 - C15683 + C15684 - C15685) * C50330) *
               C50380 +
           ((C8100 - C8101 + C8102 - C8103) * C33285 +
            (C8104 - C8105 + C8106 - C8107) * C33283 +
            (C13576 - C13577 + C13578 - C13579) * C33286 +
            (C13580 - C13581 + C13582 - C13583) * C50330) *
               C50114) *
              C50170 * C1091 +
          (((C7885 * C1094 - C50408 * C1098 + C7886 * C2472 - C50302 * C2475) *
                C33285 +
            (C7885 * C1099 - C50408 * C1106 + C7886 * C2476 - C50302 * C2481) *
                C33283 +
            (C7885 * C3200 - C50408 * C3203 + C7886 * C4116 - C50302 * C4118) *
                C33286 +
            (C7885 * C3204 - C50408 * C3209 + C7886 * C4119 - C50302 * C4122) *
                C50330) *
               C50380 +
           ((C7885 * C1095 - C50408 * C1100 + C7886 * C2473 - C50302 * C2477) *
                C33285 +
            (C7885 * C1101 - C50408 * C1107 + C7886 * C2478 - C50302 * C2482) *
                C33283 +
            (C7885 * C3201 - C50408 * C3205 + C7886 * C4117 - C50302 * C4120) *
                C33286 +
            (C7885 * C3206 - C50408 * C3210 + C7886 * C4121 - C50302 * C4123) *
                C50330) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C8085 - C8084 + C8087 - C8086) * C33285 +
             (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
             C14505 * C50330) *
                C50380 +
            ((C8093 - C8092 + C8095 - C8094) * C33285 +
             (C8097 - C8096 + C8099 - C8098) * C33283 +
             (C8822 - C8823 + C8824 - C8825) * C33286 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C7928 * C33285 + C7929 * C33283 + C14218 * C33286 +
             C14219 * C50330) *
                C50380 +
            ((C7905 - C7904 + C7907 - C7906) * C33285 +
             (C7909 - C7908 + C7911 - C7910) * C33283 +
             (C8607 - C8608 + C8609 - C8610) * C33286 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C50170 * C1018 +
           ((C8452 * C33285 + C8453 * C33283 +
             (C8823 - C8822 + C8825 - C8824) * C33286 +
             (C8827 - C8826 + C8829 - C8828) * C50330) *
                C50380 +
            ((C8445 - C8444 + C8447 - C8446) * C33285 +
             (C8449 - C8448 + C8451 - C8450) * C33283 +
             (C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                 C33286 +
             (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C452 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C453 +
           (((C13791 - C13790 + C13793 - C13792) * C33285 +
             (C13795 - C13794 + C13797 - C13796) * C33283 +
             (C16204 - C16205 + C16206 - C16207) * C33286 +
             (C16208 - C16209 + C16210 - C16211) * C50330) *
                C50380 +
            (C13824 * C33285 + C13825 * C33283 +
             (C13810 - C13811 + C13812 - C13813) * C33286 +
             (C13814 - C13815 + C13816 - C13817) * C50330) *
                C50114) *
               C454) *
              C1018 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C452 +
           (((C14479 - C14478 + C14481 - C14480) * C33285 +
             (C14483 - C14482 + C14485 - C14484) * C33283 +
             (C15024 - C15025 + C15026 - C15027) * C33286 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C50380 +
            (C14504 * C33285 + C14505 * C33283 +
             (C14494 - C14495 + C14496 - C14497) * C33286 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C453 +
           (((C15025 - C15024 + C15027 - C15026) * C33285 +
             (C15029 - C15028 + C15031 - C15030) * C33283 +
             (C7885 * C4514 - C50408 * C4518 + C7886 * C4515 - C50302 * C4519) *
                 C33286 +
             (C7885 * C4520 - C50408 * C4526 + C7886 * C4521 - C50302 * C4527) *
                 C50330) *
                C50380 +
            ((C14495 - C14494 + C14497 - C14496) * C33285 +
             (C14499 - C14498 + C14501 - C14500) * C33283 +
             (C7885 * C4516 - C50408 * C4522 + C7886 * C4517 - C50302 * C4523) *
                 C33286 +
             (C7885 * C4524 - C50408 * C4528 + C7886 * C4525 - C50302 * C4529) *
                 C50330) *
                C50114) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C33285 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C33283 +
              (C13778 - C13779 + C13780 - C13781) * C33286 +
              (C13782 - C13783 + C13784 - C13785) * C50330) *
                 C50380 +
             ((C7888 - C7889 + C7890 - C7891) * C33285 +
              (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
              C13819 * C50330) *
                 C50114) *
                C50396 +
            (((C13779 - C13778 + C13781 - C13780) * C33285 +
              (C13783 - C13782 + C13785 - C13784) * C33283 +
              (C13790 - C13791 + C13792 - C13793) * C33286 +
              (C13794 - C13795 + C13796 - C13797) * C50330) *
                 C50380 +
             (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
              C13823 * C50330) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C33285 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C33283 +
              (C14478 - C14479 + C14480 - C14481) * C33286 +
              (C14482 - C14483 + C14484 - C14485) * C50330) *
                 C50380 +
             ((C8084 - C8085 + C8086 - C8087) * C33285 +
              (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
              C14503 * C50330) *
                 C50114) *
                C50396 +
            (((C14479 - C14478 + C14481 - C14480) * C33285 +
              (C14483 - C14482 + C14485 - C14484) * C33283 +
              (C15024 - C15025 + C15026 - C15027) * C33286 +
              (C15028 - C15029 + C15030 - C15031) * C50330) *
                 C50380 +
             (C14504 * C33285 + C14505 * C33283 +
              (C14494 - C14495 + C14496 - C14497) * C33286 +
              (C14498 - C14499 + C14500 - C14501) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C7889 - C7888 + C7891 - C7890) * C33285 +
              (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
              C13821 * C50330) *
                 C50380 +
             ((C7897 - C7896 + C7899 - C7898) * C33285 +
              (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
              C8616 * C50330) *
                 C50114) *
                C50396 +
            ((C13818 * C33285 + C13819 * C33283 + C13824 * C33286 +
              C13825 * C50330) *
                 C50380 +
             (C14218 * C33285 + C14219 * C33283 +
              (C8286 - C8287 + C8288 - C8289) * C33286 +
              (C8290 - C8291 + C8292 - C8293) * C50330) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C8085 - C8084 + C8087 - C8086) * C33285 +
              (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
              C14505 * C50330) *
                 C50380 +
             ((C8093 - C8092 + C8095 - C8094) * C33285 +
              (C8097 - C8096 + C8099 - C8098) * C33283 +
              (C8822 - C8823 + C8824 - C8825) * C33286 +
              (C8826 - C8827 + C8828 - C8829) * C50330) *
                 C50114) *
                C50396 +
            ((C14502 * C33285 + C14503 * C33283 +
              (C14495 - C14494 + C14497 - C14496) * C33286 +
              (C14499 - C14498 + C14501 - C14500) * C50330) *
                 C50380 +
             ((C8823 - C8822 + C8825 - C8824) * C33285 +
              (C8827 - C8826 + C8829 - C8828) * C33283 +
              (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 -
               C50302 * C2661) *
                  C33286 +
              (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C50170 * C1018 +
           (((C8085 - C8084 + C8087 - C8086) * C33285 +
             (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
             C14505 * C50330) *
                C50380 +
            ((C8093 - C8092 + C8095 - C8094) * C33285 +
             (C8097 - C8096 + C8099 - C8098) * C33283 +
             (C8822 - C8823 + C8824 - C8825) * C33286 +
             (C8826 - C8827 + C8828 - C8829) * C50330) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C7928 * C33285 + C7929 * C33283 + C14218 * C33286 +
             C14219 * C50330) *
                C50380 +
            ((C7905 - C7904 + C7907 - C7906) * C33285 +
             (C7909 - C7908 + C7911 - C7910) * C33283 +
             (C8607 - C8608 + C8609 - C8610) * C33286 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C50170 * C1018 +
           ((C8452 * C33285 + C8453 * C33283 +
             (C8823 - C8822 + C8825 - C8824) * C33286 +
             (C8827 - C8826 + C8829 - C8828) * C50330) *
                C50380 +
            ((C8445 - C8444 + C8447 - C8446) * C33285 +
             (C8449 - C8448 + C8451 - C8450) * C33283 +
             (C7885 * C891 - C50408 * C899 + C7886 * C1558 - C50302 * C1565) *
                 C33286 +
             (C7885 * C900 - C50408 * C906 + C7886 * C1566 - C50302 * C1570) *
                 C50330) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C33285 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C33283 +
            (C13778 - C13779 + C13780 - C13781) * C33286 +
            (C13782 - C13783 + C13784 - C13785) * C50330) *
               C50380 +
           ((C7888 - C7889 + C7890 - C7891) * C33285 +
            (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
            C13819 * C50330) *
               C50114) *
              C50170 * C1089 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C33285 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C33283 +
            (C14478 - C14479 + C14480 - C14481) * C33286 +
            (C14482 - C14483 + C14484 - C14485) * C50330) *
               C50380 +
           ((C8084 - C8085 + C8086 - C8087) * C33285 +
            (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
            C14503 * C50330) *
               C50114) *
              C50170 * C1090 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C33285 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C33283 +
            (C15678 - C15679 + C15680 - C15681) * C33286 +
            (C15682 - C15683 + C15684 - C15685) * C50330) *
               C50380 +
           ((C8100 - C8101 + C8102 - C8103) * C33285 +
            (C8104 - C8105 + C8106 - C8107) * C33283 +
            (C13576 - C13577 + C13578 - C13579) * C33286 +
            (C13580 - C13581 + C13582 - C13583) * C50330) *
               C50114) *
              C50170 * C1091 +
          (((C7885 * C1094 - C50408 * C1098 + C7886 * C2472 - C50302 * C2475) *
                C33285 +
            (C7885 * C1099 - C50408 * C1106 + C7886 * C2476 - C50302 * C2481) *
                C33283 +
            (C7885 * C3200 - C50408 * C3203 + C7886 * C4116 - C50302 * C4118) *
                C33286 +
            (C7885 * C3204 - C50408 * C3209 + C7886 * C4119 - C50302 * C4122) *
                C50330) *
               C50380 +
           ((C7885 * C1095 - C50408 * C1100 + C7886 * C2473 - C50302 * C2477) *
                C33285 +
            (C7885 * C1101 - C50408 * C1107 + C7886 * C2478 - C50302 * C2482) *
                C33283 +
            (C7885 * C3201 - C50408 * C3205 + C7886 * C4117 - C50302 * C4120) *
                C33286 +
            (C7885 * C3206 - C50408 * C3210 + C7886 * C4121 - C50302 * C4123) *
                C50330) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                  C33285 +
              (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                  C33283 +
              (C13778 - C13779 + C13780 - C13781) * C33286 +
              (C13782 - C13783 + C13784 - C13785) * C50330) *
                 C50380 +
             ((C7888 - C7889 + C7890 - C7891) * C33285 +
              (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
              C13819 * C50330) *
                 C50114) *
                C1669 +
            (((C13779 - C13778 + C13781 - C13780) * C33285 +
              (C13783 - C13782 + C13785 - C13784) * C33283 +
              (C13790 - C13791 + C13792 - C13793) * C33286 +
              (C13794 - C13795 + C13796 - C13797) * C50330) *
                 C50380 +
             (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
              C13823 * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                  C33285 +
              (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                  C33283 +
              (C14478 - C14479 + C14480 - C14481) * C33286 +
              (C14482 - C14483 + C14484 - C14485) * C50330) *
                 C50380 +
             ((C8084 - C8085 + C8086 - C8087) * C33285 +
              (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
              C14503 * C50330) *
                 C50114) *
                C1669 +
            (((C14479 - C14478 + C14481 - C14480) * C33285 +
              (C14483 - C14482 + C14485 - C14484) * C33283 +
              (C15024 - C15025 + C15026 - C15027) * C33286 +
              (C15028 - C15029 + C15030 - C15031) * C50330) *
                 C50380 +
             (C14504 * C33285 + C14505 * C33283 +
              (C14494 - C14495 + C14496 - C14497) * C33286 +
              (C14498 - C14499 + C14500 - C14501) * C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C7889 - C7888 + C7891 - C7890) * C33285 +
              (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
              C13821 * C50330) *
                 C50380 +
             ((C7897 - C7896 + C7899 - C7898) * C33285 +
              (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
              C8616 * C50330) *
                 C50114) *
                C1669 +
            ((C13818 * C33285 + C13819 * C33283 + C13824 * C33286 +
              C13825 * C50330) *
                 C50380 +
             (C14218 * C33285 + C14219 * C33283 +
              (C8286 - C8287 + C8288 - C8289) * C33286 +
              (C8290 - C8291 + C8292 - C8293) * C50330) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C8085 - C8084 + C8087 - C8086) * C33285 +
              (C8089 - C8088 + C8091 - C8090) * C33283 + C14504 * C33286 +
              C14505 * C50330) *
                 C50380 +
             ((C8093 - C8092 + C8095 - C8094) * C33285 +
              (C8097 - C8096 + C8099 - C8098) * C33283 +
              (C8822 - C8823 + C8824 - C8825) * C33286 +
              (C8826 - C8827 + C8828 - C8829) * C50330) *
                 C50114) *
                C1669 +
            ((C14502 * C33285 + C14503 * C33283 +
              (C14495 - C14494 + C14497 - C14496) * C33286 +
              (C14499 - C14498 + C14501 - C14500) * C50330) *
                 C50380 +
             ((C8823 - C8822 + C8825 - C8824) * C33285 +
              (C8827 - C8826 + C8829 - C8828) * C33283 +
              (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 -
               C50302 * C2661) *
                  C33286 +
              (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 -
               C50302 * C2665) *
                  C50330) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50442 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C50443 +
           (((C13791 - C13790 + C13793 - C13792) * C33285 +
             (C13795 - C13794 + C13797 - C13796) * C33283 +
             (C16204 - C16205 + C16206 - C16207) * C33286 +
             (C16208 - C16209 + C16210 - C16211) * C50330) *
                C50380 +
            (C13824 * C33285 + C13825 * C33283 +
             (C13810 - C13811 + C13812 - C13813) * C33286 +
             (C13814 - C13815 + C13816 - C13817) * C50330) *
                C50114) *
               C2085) *
              C50395 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C50442 +
           (((C14479 - C14478 + C14481 - C14480) * C33285 +
             (C14483 - C14482 + C14485 - C14484) * C33283 +
             (C15024 - C15025 + C15026 - C15027) * C33286 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C50380 +
            (C14504 * C33285 + C14505 * C33283 +
             (C14494 - C14495 + C14496 - C14497) * C33286 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C50443 +
           (((C15025 - C15024 + C15027 - C15026) * C33285 +
             (C15029 - C15028 + C15031 - C15030) * C33283 +
             (C7885 * C4514 - C50408 * C4518 + C7886 * C4515 - C50302 * C4519) *
                 C33286 +
             (C7885 * C4520 - C50408 * C4526 + C7886 * C4521 - C50302 * C4527) *
                 C50330) *
                C50380 +
            ((C14495 - C14494 + C14497 - C14496) * C33285 +
             (C14499 - C14498 + C14501 - C14500) * C33283 +
             (C7885 * C4516 - C50408 * C4522 + C7886 * C4517 - C50302 * C4523) *
                 C33286 +
             (C7885 * C4524 - C50408 * C4528 + C7886 * C4525 - C50302 * C4529) *
                 C50330) *
                C50114) *
               C2085) *
              C50206) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C1669 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C285 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C1669 +
           (((C14479 - C14478 + C14481 - C14480) * C33285 +
             (C14483 - C14482 + C14485 - C14484) * C33283 +
             (C15024 - C15025 + C15026 - C15027) * C33286 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C50380 +
            (C14504 * C33285 + C14505 * C33283 +
             (C14494 - C14495 + C14496 - C14497) * C33286 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C50234) *
              C286 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C33285 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C33283 +
             (C15678 - C15679 + C15680 - C15681) * C33286 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C50380 +
            ((C8100 - C8101 + C8102 - C8103) * C33285 +
             (C8104 - C8105 + C8106 - C8107) * C33283 +
             (C13576 - C13577 + C13578 - C13579) * C33286 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C1669 +
           (((C15679 - C15678 + C15681 - C15680) * C33285 +
             (C15683 - C15682 + C15685 - C15684) * C33283 +
             (C7885 * C2654 - C50408 * C2657 + C7886 * C3622 - C50302 * C3624) *
                 C33286 +
             (C7885 * C2658 - C50408 * C2663 + C7886 * C3625 - C50302 * C3628) *
                 C50330) *
                C50380 +
            ((C13577 - C13576 + C13579 - C13578) * C33285 +
             (C13581 - C13580 + C13583 - C13582) * C33283 +
             (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                 C33286 +
             (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C1669 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C1669 +
           ((C13818 * C33285 + C13819 * C33283 + C13824 * C33286 +
             C13825 * C50330) *
                C50380 +
            (C14218 * C33285 + C14219 * C33283 +
             (C8286 - C8287 + C8288 - C8289) * C33286 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C7928 * C33285 + C7929 * C33283 + C14218 * C33286 +
             C14219 * C50330) *
                C50380 +
            ((C7905 - C7904 + C7907 - C7906) * C33285 +
             (C7909 - C7908 + C7911 - C7910) * C33283 +
             (C8607 - C8608 + C8609 - C8610) * C33286 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C1669 +
           ((C8615 * C33285 + C8616 * C33283 +
             (C8287 - C8286 + C8289 - C8288) * C33286 +
             (C8291 - C8290 + C8293 - C8292) * C50330) *
                C50380 +
            ((C8608 - C8607 + C8610 - C8609) * C33285 +
             (C8612 - C8611 + C8614 - C8613) * C33283 +
             (C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
                 C33286 +
             (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C33285 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C33283 +
            (C13778 - C13779 + C13780 - C13781) * C33286 +
            (C13782 - C13783 + C13784 - C13785) * C50330) *
               C50380 +
           ((C7888 - C7889 + C7890 - C7891) * C33285 +
            (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
            C13819 * C50330) *
               C50114) *
              C1835 +
          (((C13779 - C13778 + C13781 - C13780) * C33285 +
            (C13783 - C13782 + C13785 - C13784) * C33283 +
            (C13790 - C13791 + C13792 - C13793) * C33286 +
            (C13794 - C13795 + C13796 - C13797) * C50330) *
               C50380 +
           (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
            C13823 * C50330) *
               C50114) *
              C1836 +
          (((C13791 - C13790 + C13793 - C13792) * C33285 +
            (C13795 - C13794 + C13797 - C13796) * C33283 +
            (C16204 - C16205 + C16206 - C16207) * C33286 +
            (C16208 - C16209 + C16210 - C16211) * C50330) *
               C50380 +
           (C13824 * C33285 + C13825 * C33283 +
            (C13810 - C13811 + C13812 - C13813) * C33286 +
            (C13814 - C13815 + C13816 - C13817) * C50330) *
               C50114) *
              C1837 +
          (((C16205 - C16204 + C16207 - C16206) * C33285 +
            (C16209 - C16208 + C16211 - C16210) * C33283 +
            (C7885 * C5424 - C50408 * C5427 + C7886 * C6384 - C50302 * C6386) *
                C33286 +
            (C7885 * C5428 - C50408 * C5433 + C7886 * C6387 - C50302 * C6390) *
                C50330) *
               C50380 +
           ((C13811 - C13810 + C13813 - C13812) * C33285 +
            (C13815 - C13814 + C13817 - C13816) * C33283 +
            (C7885 * C5425 - C50408 * C5429 + C7886 * C6385 - C50302 * C6388) *
                C33286 +
            (C7885 * C5430 - C50408 * C5434 + C7886 * C6389 - C50302 * C6391) *
                C50330) *
               C50114) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C50442 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C50443 +
           (((C13791 - C13790 + C13793 - C13792) * C33285 +
             (C13795 - C13794 + C13797 - C13796) * C33283 +
             (C16204 - C16205 + C16206 - C16207) * C33286 +
             (C16208 - C16209 + C16210 - C16211) * C50330) *
                C50380 +
            (C13824 * C33285 + C13825 * C33283 +
             (C13810 - C13811 + C13812 - C13813) * C33286 +
             (C13814 - C13815 + C13816 - C13817) * C50330) *
                C50114) *
               C2085) *
              C50154 * C50387 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C50442 +
           ((C13818 * C33285 + C13819 * C33283 + C13824 * C33286 +
             C13825 * C50330) *
                C50380 +
            (C14218 * C33285 + C14219 * C33283 +
             (C8286 - C8287 + C8288 - C8289) * C33286 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C50443 +
           ((C13822 * C33285 + C13823 * C33283 +
             (C13811 - C13810 + C13813 - C13812) * C33286 +
             (C13815 - C13814 + C13817 - C13816) * C50330) *
                C50380 +
            ((C8287 - C8286 + C8289 - C8288) * C33285 +
             (C8291 - C8290 + C8293 - C8292) * C33283 +
             (C7885 * C1841 - C50408 * C1847 + C7886 * C5970 - C50302 * C5971) *
                 C33286 +
             (C7885 * C1848 - C50408 * C1853 + C7886 * C5972 - C50302 * C5973) *
                 C50330) *
                C50114) *
               C2085) *
              C50154 * C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C1669 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C7889 - C7888 + C7891 - C7890) * C33285 +
             (C7893 - C7892 + C7895 - C7894) * C33283 + C13820 * C33286 +
             C13821 * C50330) *
                C50380 +
            ((C7897 - C7896 + C7899 - C7898) * C33285 +
             (C7901 - C7900 + C7903 - C7902) * C33283 + C8615 * C33286 +
             C8616 * C50330) *
                C50114) *
               C1669 +
           ((C13818 * C33285 + C13819 * C33283 + C13824 * C33286 +
             C13825 * C50330) *
                C50380 +
            (C14218 * C33285 + C14219 * C33283 +
             (C8286 - C8287 + C8288 - C8289) * C33286 +
             (C8290 - C8291 + C8292 - C8293) * C50330) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C7928 * C33285 + C7929 * C33283 + C14218 * C33286 +
             C14219 * C50330) *
                C50380 +
            ((C7905 - C7904 + C7907 - C7906) * C33285 +
             (C7909 - C7908 + C7911 - C7910) * C33283 +
             (C8607 - C8608 + C8609 - C8610) * C33286 +
             (C8611 - C8612 + C8613 - C8614) * C50330) *
                C50114) *
               C1669 +
           ((C8615 * C33285 + C8616 * C33283 +
             (C8287 - C8286 + C8289 - C8288) * C33286 +
             (C8291 - C8290 + C8293 - C8292) * C50330) *
                C50380 +
            ((C8608 - C8607 + C8610 - C8609) * C33285 +
             (C8612 - C8611 + C8614 - C8613) * C33283 +
             (C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
                 C33286 +
             (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
                 C50330) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C33285 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C33283 +
             (C13778 - C13779 + C13780 - C13781) * C33286 +
             (C13782 - C13783 + C13784 - C13785) * C50330) *
                C50380 +
            ((C7888 - C7889 + C7890 - C7891) * C33285 +
             (C7892 - C7893 + C7894 - C7895) * C33283 + C13818 * C33286 +
             C13819 * C50330) *
                C50114) *
               C1669 +
           (((C13779 - C13778 + C13781 - C13780) * C33285 +
             (C13783 - C13782 + C13785 - C13784) * C33283 +
             (C13790 - C13791 + C13792 - C13793) * C33286 +
             (C13794 - C13795 + C13796 - C13797) * C50330) *
                C50380 +
            (C13820 * C33285 + C13821 * C33283 + C13822 * C33286 +
             C13823 * C50330) *
                C50114) *
               C50234) *
              C285 +
          ((((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C33285 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C33283 +
             (C14478 - C14479 + C14480 - C14481) * C33286 +
             (C14482 - C14483 + C14484 - C14485) * C50330) *
                C50380 +
            ((C8084 - C8085 + C8086 - C8087) * C33285 +
             (C8088 - C8089 + C8090 - C8091) * C33283 + C14502 * C33286 +
             C14503 * C50330) *
                C50114) *
               C1669 +
           (((C14479 - C14478 + C14481 - C14480) * C33285 +
             (C14483 - C14482 + C14485 - C14484) * C33283 +
             (C15024 - C15025 + C15026 - C15027) * C33286 +
             (C15028 - C15029 + C15030 - C15031) * C50330) *
                C50380 +
            (C14504 * C33285 + C14505 * C33283 +
             (C14494 - C14495 + C14496 - C14497) * C33286 +
             (C14498 - C14499 + C14500 - C14501) * C50330) *
                C50114) *
               C50234) *
              C286 +
          ((((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                 C33285 +
             (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                 C33283 +
             (C15678 - C15679 + C15680 - C15681) * C33286 +
             (C15682 - C15683 + C15684 - C15685) * C50330) *
                C50380 +
            ((C8100 - C8101 + C8102 - C8103) * C33285 +
             (C8104 - C8105 + C8106 - C8107) * C33283 +
             (C13576 - C13577 + C13578 - C13579) * C33286 +
             (C13580 - C13581 + C13582 - C13583) * C50330) *
                C50114) *
               C1669 +
           (((C15679 - C15678 + C15681 - C15680) * C33285 +
             (C15683 - C15682 + C15685 - C15684) * C33283 +
             (C7885 * C2654 - C50408 * C2657 + C7886 * C3622 - C50302 * C3624) *
                 C33286 +
             (C7885 * C2658 - C50408 * C2663 + C7886 * C3625 - C50302 * C3628) *
                 C50330) *
                C50380 +
            ((C13577 - C13576 + C13579 - C13578) * C33285 +
             (C13581 - C13580 + C13583 - C13582) * C33283 +
             (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                 C33286 +
             (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                 C50330) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C50170 * C50395 +
           ((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 +
            (C15025 - C15024 + C15027 - C15026) * C43934 +
            (C15029 - C15028 + C15031 - C15030) * C43931) *
               C50109 * C50170 * C50206) *
              C50438 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C50170 * C50395 +
           ((C8085 - C8084 + C8087 - C8086) * C43932 +
            (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
            C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
            (C14498 - C14499 + C14500 - C14501) * C43931) *
               C50109 * C50170 * C50206) *
              C50439 +
          ((C7928 * C43932 + C7929 * C50446 + C14218 * C43933 +
            C14219 * C50447 + (C8286 - C8287 + C8288 - C8289) * C43934 +
            (C8290 - C8291 + C8292 - C8293) * C43931) *
               C50109 * C50170 * C50395 +
           (C8452 * C43932 + C8453 * C50446 +
            (C8823 - C8822 + C8825 - C8824) * C43933 +
            (C8827 - C8826 + C8829 - C8828) * C50447 +
            (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 - C50302 * C2661) *
                C43934 +
            (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 - C50302 * C2665) *
                C43931) *
               C50109 * C50170 * C50206) *
              C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C43932 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50446 +
             (C13778 - C13779 + C13780 - C13781) * C43933 +
             (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
             C46861 * C43931) *
                C50109 * C50396 +
            ((C13779 - C13778 + C13781 - C13780) * C43932 +
             (C13783 - C13782 + C13785 - C13784) * C50446 +
             (C13790 - C13791 + C13792 - C13793) * C43933 +
             (C13794 - C13795 + C13796 - C13797) * C50447 +
             (C16205 - C16204 + C16207 - C16206) * C43934 +
             (C16209 - C16208 + C16211 - C16210) * C43931) *
                C50109 * C50234) *
               C50395 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C43932 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50446 +
             (C14478 - C14479 + C14480 - C14481) * C43933 +
             (C14482 - C14483 + C14484 - C14485) * C50447 +
             (C15025 - C15024 + C15027 - C15026) * C43934 +
             (C15029 - C15028 + C15031 - C15030) * C43931) *
                C50109 * C50396 +
            ((C14479 - C14478 + C14481 - C14480) * C43932 +
             (C14483 - C14482 + C14485 - C14484) * C50446 +
             (C15024 - C15025 + C15026 - C15027) * C43933 +
             (C15028 - C15029 + C15030 - C15031) * C50447 +
             (C50408 * C4518 - C7885 * C4514 + C50302 * C4519 - C7886 * C4515) *
                 C43934 +
             (C50408 * C4526 - C7885 * C4520 + C50302 * C4527 - C7886 * C4521) *
                 C43931) *
                C50109 * C50234) *
               C50206) *
              C288 +
          ((((C7889 - C7888 + C7891 - C7890) * C43932 +
             (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
             C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
                C50109 * C50396 +
            (C13818 * C43932 + C13819 * C50446 + C13824 * C43933 +
             C13825 * C50447 + (C13810 - C13811 + C13812 - C13813) * C43934 +
             (C13814 - C13815 + C13816 - C13817) * C43931) *
                C50109 * C50234) *
               C50395 +
           (((C8085 - C8084 + C8087 - C8086) * C43932 +
             (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
             C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
             (C14498 - C14499 + C14500 - C14501) * C43931) *
                C50109 * C50396 +
            (C14502 * C43932 + C14503 * C50446 +
             (C14495 - C14494 + C14497 - C14496) * C43933 +
             (C14499 - C14498 + C14501 - C14500) * C50447 +
             (C7885 * C4516 - C50408 * C4522 + C7886 * C4517 - C50302 * C4523) *
                 C43934 +
             (C7885 * C4524 - C50408 * C4528 + C7886 * C4525 - C50302 * C4529) *
                 C43931) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 +
            (C13791 - C13790 + C13793 - C13792) * C43934 +
            (C13795 - C13794 + C13797 - C13796) * C43931) *
               C50109 * C50170 * C285 +
           ((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 +
            (C15025 - C15024 + C15027 - C15026) * C43934 +
            (C15029 - C15028 + C15031 - C15030) * C43931) *
               C50109 * C50170 * C286 +
           ((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C43932 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50446 +
            (C15678 - C15679 + C15680 - C15681) * C43933 +
            (C15682 - C15683 + C15684 - C15685) * C50447 +
            (C50408 * C2657 - C7885 * C2654 + C50302 * C3624 - C7886 * C3622) *
                C43934 +
            (C50408 * C2663 - C7885 * C2658 + C50302 * C3628 - C7886 * C3625) *
                C43931) *
               C50109 * C50170 * C287) *
              C288 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C50170 * C285 +
           ((C8085 - C8084 + C8087 - C8086) * C43932 +
            (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
            C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
            (C14498 - C14499 + C14500 - C14501) * C43931) *
               C50109 * C50170 * C286 +
           ((C8101 - C8100 + C8103 - C8102) * C43932 +
            (C8105 - C8104 + C8107 - C8106) * C50446 +
            (C13577 - C13576 + C13579 - C13578) * C43933 +
            (C13581 - C13580 + C13583 - C13582) * C50447 +
            (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                C43934 +
            (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                C43931) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
               C43932 +
           (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
               C50446 +
           (C13778 - C13779 + C13780 - C13781) * C43933 +
           (C13782 - C13783 + C13784 - C13785) * C50447 +
           (C13791 - C13790 + C13793 - C13792) * C43934 +
           (C13795 - C13794 + C13797 - C13796) * C43931) *
              C50109 * C50170 * C50154 * C113 +
          ((C7889 - C7888 + C7891 - C7890) * C43932 +
           (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
           C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
              C50109 * C50170 * C50154 * C114 +
          (C7928 * C43932 + C7929 * C50446 + C14218 * C43933 + C14219 * C50447 +
           (C8286 - C8287 + C8288 - C8289) * C43934 +
           (C8290 - C8291 + C8292 - C8293) * C43931) *
              C50109 * C50170 * C50154 * C115 +
          (C7930 * C43932 + C7931 * C50446 +
           (C8608 - C8607 + C8610 - C8609) * C43933 +
           (C8612 - C8611 + C8614 - C8613) * C50447 +
           (C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
               C43934 +
           (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
               C43931) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C452 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 +
            (C16205 - C16204 + C16207 - C16206) * C43934 +
            (C16209 - C16208 + C16211 - C16210) * C43931) *
               C50109 * C453 +
           (C46860 * C43932 + C46861 * C50446 +
            (C16204 - C16205 + C16206 - C16207) * C43933 +
            (C16208 - C16209 + C16210 - C16211) * C50447 +
            (C50408 * C5427 - C7885 * C5424 + C50302 * C6386 - C7886 * C6384) *
                C43934 +
            (C50408 * C5433 - C7885 * C5428 + C50302 * C6390 - C7886 * C6387) *
                C43931) *
               C50109 * C454) *
              C50154 * C288 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C452 +
           (C13818 * C43932 + C13819 * C50446 + C13824 * C43933 +
            C13825 * C50447 + (C13810 - C13811 + C13812 - C13813) * C43934 +
            (C13814 - C13815 + C13816 - C13817) * C43931) *
               C50109 * C453 +
           (C13822 * C43932 + C13823 * C50446 +
            (C13811 - C13810 + C13813 - C13812) * C43933 +
            (C13815 - C13814 + C13817 - C13816) * C50447 +
            (C7885 * C5425 - C50408 * C5429 + C7886 * C6385 - C50302 * C6388) *
                C43934 +
            (C7885 * C5430 - C50408 * C5434 + C7886 * C6389 - C50302 * C6391) *
                C43931) *
               C50109 * C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C50396 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 +
            (C16205 - C16204 + C16207 - C16206) * C43934 +
            (C16209 - C16208 + C16211 - C16210) * C43931) *
               C50109 * C50234) *
              C50154 * C50438 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C50396 +
           (C13818 * C43932 + C13819 * C50446 + C13824 * C43933 +
            C13825 * C50447 + (C13810 - C13811 + C13812 - C13813) * C43934 +
            (C13814 - C13815 + C13816 - C13817) * C43931) *
               C50109 * C50234) *
              C50154 * C50439 +
          ((C7928 * C43932 + C7929 * C50446 + C14218 * C43933 +
            C14219 * C50447 + (C8286 - C8287 + C8288 - C8289) * C43934 +
            (C8290 - C8291 + C8292 - C8293) * C43931) *
               C50109 * C50396 +
           (C8615 * C43932 + C8616 * C50446 +
            (C8287 - C8286 + C8289 - C8288) * C43933 +
            (C8291 - C8290 + C8293 - C8292) * C50447 +
            (C7885 * C1841 - C50408 * C1847 + C7886 * C5970 - C50302 * C5971) *
                C43934 +
            (C7885 * C1848 - C50408 * C1853 + C7886 * C5972 - C50302 * C5973) *
                C43931) *
               C50109 * C50234) *
              C50154 * C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
               C43932 +
           (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
               C50446 +
           (C13778 - C13779 + C13780 - C13781) * C43933 +
           (C13782 - C13783 + C13784 - C13785) * C50447 +
           (C13791 - C13790 + C13793 - C13792) * C43934 +
           (C13795 - C13794 + C13797 - C13796) * C43931) *
              C50109 * C50170 * C50154 * C113 +
          ((C7889 - C7888 + C7891 - C7890) * C43932 +
           (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
           C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
              C50109 * C50170 * C50154 * C114 +
          (C7928 * C43932 + C7929 * C50446 + C14218 * C43933 + C14219 * C50447 +
           (C8286 - C8287 + C8288 - C8289) * C43934 +
           (C8290 - C8291 + C8292 - C8293) * C43931) *
              C50109 * C50170 * C50154 * C115 +
          (C7930 * C43932 + C7931 * C50446 +
           (C8608 - C8607 + C8610 - C8609) * C43933 +
           (C8612 - C8611 + C8614 - C8613) * C50447 +
           (C7885 * C462 - C50408 * C479 + C7886 * C1211 - C50302 * C1218) *
               C43934 +
           (C7885 * C480 - C50408 * C492 + C7886 * C1219 - C50302 * C1223) *
               C43931) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 +
            (C13791 - C13790 + C13793 - C13792) * C43934 +
            (C13795 - C13794 + C13797 - C13796) * C43931) *
               C50109 * C50170 * C285 +
           ((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 +
            (C15025 - C15024 + C15027 - C15026) * C43934 +
            (C15029 - C15028 + C15031 - C15030) * C43931) *
               C50109 * C50170 * C286 +
           ((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C43932 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50446 +
            (C15678 - C15679 + C15680 - C15681) * C43933 +
            (C15682 - C15683 + C15684 - C15685) * C50447 +
            (C50408 * C2657 - C7885 * C2654 + C50302 * C3624 - C7886 * C3622) *
                C43934 +
            (C50408 * C2663 - C7885 * C2658 + C50302 * C3628 - C7886 * C3625) *
                C43931) *
               C50109 * C50170 * C287) *
              C288 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C50170 * C285 +
           ((C8085 - C8084 + C8087 - C8086) * C43932 +
            (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
            C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
            (C14498 - C14499 + C14500 - C14501) * C43931) *
               C50109 * C50170 * C286 +
           ((C8101 - C8100 + C8103 - C8102) * C43932 +
            (C8105 - C8104 + C8107 - C8106) * C50446 +
            (C13577 - C13576 + C13579 - C13578) * C43933 +
            (C13581 - C13580 + C13583 - C13582) * C50447 +
            (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                C43934 +
            (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                C43931) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C50170 * C50440 +
           ((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 + C47750 * C43934 +
            C47751 * C43931) *
               C50109 * C50170 * C50441 +
           ((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C43932 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50446 +
            (C15678 - C15679 + C15680 - C15681) * C43933 +
            (C15682 - C15683 + C15684 - C15685) * C50447 +
            (C50408 * C2657 - C7885 * C2654 + C50302 * C3624 - C7886 * C3622) *
                C43934 +
            (C50408 * C2663 - C7885 * C2658 + C50302 * C3628 - C7886 * C3625) *
                C43931) *
               C50109 * C50170 * C1324) *
              C50387 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C50170 * C50440 +
           ((C8085 - C8084 + C8087 - C8086) * C43932 +
            (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
            C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
            (C14498 - C14499 + C14500 - C14501) * C43931) *
               C50109 * C50170 * C50441 +
           ((C8101 - C8100 + C8103 - C8102) * C43932 +
            (C8105 - C8104 + C8107 - C8106) * C50446 +
            (C13577 - C13576 + C13579 - C13578) * C43933 +
            (C13581 - C13580 + C13583 - C13582) * C50447 +
            (C7885 * C2655 - C50408 * C2659 + C7886 * C3623 - C50302 * C3626) *
                C43934 +
            (C7885 * C2660 - C50408 * C2664 + C7886 * C3627 - C50302 * C3629) *
                C43931) *
               C50109 * C50170 * C1324) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C50396 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 +
            (C16205 - C16204 + C16207 - C16206) * C43934 +
            (C16209 - C16208 + C16211 - C16210) * C43931) *
               C50109 * C50234) *
              C50440 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 + C47750 * C43934 +
            C47751 * C43931) *
               C50109 * C50396 +
           ((C14479 - C14478 + C14481 - C14480) * C43932 +
            (C14483 - C14482 + C14485 - C14484) * C50446 +
            (C15024 - C15025 + C15026 - C15027) * C43933 +
            (C15028 - C15029 + C15030 - C15031) * C50447 +
            (C47742 - C47743 + C47744 - C47745) * C43934 +
            (C47746 - C47747 + C47748 - C47749) * C43931) *
               C50109 * C50234) *
              C50441 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C43932 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50446 +
            (C15678 - C15679 + C15680 - C15681) * C43933 +
            (C15682 - C15683 + C15684 - C15685) * C50447 +
            (C48238 - C48239 + C48240 - C48241) * C43934 +
            (C48242 - C48243 + C48244 - C48245) * C43931) *
               C50109 * C50396 +
           ((C15679 - C15678 + C15681 - C15680) * C43932 +
            (C15683 - C15682 + C15685 - C15684) * C50446 +
            (C48239 - C48238 + C48241 - C48240) * C43933 +
            (C48243 - C48242 + C48245 - C48244) * C50447 +
            (C7885 * C4515 - C50408 * C4519 + C7886 * C21115 -
             C50302 * C21116) *
                C43934 +
            (C7885 * C4521 - C50408 * C4527 + C7886 * C21117 -
             C50302 * C21118) *
                C43931) *
               C50109 * C50234) *
              C1324) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
               C43932 +
           (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
               C50446 +
           (C13778 - C13779 + C13780 - C13781) * C43933 +
           (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
           C46861 * C43931) *
              C50109 * C50170 * C1089 +
          ((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
               C43932 +
           (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
               C50446 +
           (C14478 - C14479 + C14480 - C14481) * C43933 +
           (C14482 - C14483 + C14484 - C14485) * C50447 +
           (C15025 - C15024 + C15027 - C15026) * C43934 +
           (C15029 - C15028 + C15031 - C15030) * C43931) *
              C50109 * C50170 * C1090 +
          ((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
               C43932 +
           (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
               C50446 +
           (C15678 - C15679 + C15680 - C15681) * C43933 +
           (C15682 - C15683 + C15684 - C15685) * C50447 +
           (C50408 * C2657 - C7885 * C2654 + C50302 * C3624 - C7886 * C3622) *
               C43934 +
           (C50408 * C2663 - C7885 * C2658 + C50302 * C3628 - C7886 * C3625) *
               C43931) *
              C50109 * C50170 * C1091 +
          ((C7885 * C1094 - C50408 * C1098 + C7886 * C2472 - C50302 * C2475) *
               C43932 +
           (C7885 * C1099 - C50408 * C1106 + C7886 * C2476 - C50302 * C2481) *
               C50446 +
           (C7885 * C3200 - C50408 * C3203 + C7886 * C4116 - C50302 * C4118) *
               C43933 +
           (C7885 * C3204 - C50408 * C3209 + C7886 * C4119 - C50302 * C4122) *
               C50447 +
           (C7885 * C3622 - C50408 * C3624 + C7886 * C20519 - C50302 * C20520) *
               C43934 +
           (C7885 * C3625 - C50408 * C3628 + C7886 * C20521 - C50302 * C20522) *
               C43931) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C50170 * C1018 +
           ((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 +
            (C15025 - C15024 + C15027 - C15026) * C43934 +
            (C15029 - C15028 + C15031 - C15030) * C43931) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C50170 * C1018 +
           ((C8085 - C8084 + C8087 - C8086) * C43932 +
            (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
            C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
            (C14498 - C14499 + C14500 - C14501) * C43931) *
               C50109 * C50170 * C50206) *
              C1021 +
          ((C7928 * C43932 + C7929 * C50446 + C14218 * C43933 +
            C14219 * C50447 + (C8286 - C8287 + C8288 - C8289) * C43934 +
            (C8290 - C8291 + C8292 - C8293) * C43931) *
               C50109 * C50170 * C1018 +
           (C8452 * C43932 + C8453 * C50446 +
            (C8823 - C8822 + C8825 - C8824) * C43933 +
            (C8827 - C8826 + C8829 - C8828) * C50447 +
            (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 - C50302 * C2661) *
                C43934 +
            (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 - C50302 * C2665) *
                C43931) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C452 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 +
            (C16205 - C16204 + C16207 - C16206) * C43934 +
            (C16209 - C16208 + C16211 - C16210) * C43931) *
               C50109 * C453 +
           (C46860 * C43932 + C46861 * C50446 +
            (C16204 - C16205 + C16206 - C16207) * C43933 +
            (C16208 - C16209 + C16210 - C16211) * C50447 +
            (C50408 * C5427 - C7885 * C5424 + C50302 * C6386 - C7886 * C6384) *
                C43934 +
            (C50408 * C5433 - C7885 * C5428 + C50302 * C6390 - C7886 * C6387) *
                C43931) *
               C50109 * C454) *
              C1018 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 + C47750 * C43934 +
            C47751 * C43931) *
               C50109 * C452 +
           ((C14479 - C14478 + C14481 - C14480) * C43932 +
            (C14483 - C14482 + C14485 - C14484) * C50446 +
            (C15024 - C15025 + C15026 - C15027) * C43933 +
            (C15028 - C15029 + C15030 - C15031) * C50447 +
            (C47742 - C47743 + C47744 - C47745) * C43934 +
            (C47746 - C47747 + C47748 - C47749) * C43931) *
               C50109 * C453 +
           (C47750 * C43932 + C47751 * C50446 +
            (C47743 - C47742 + C47745 - C47744) * C43933 +
            (C47747 - C47746 + C47749 - C47748) * C50447 +
            (C7885 * C6384 - C50408 * C6386 + C7886 * C22779 -
             C50302 * C22780) *
                C43934 +
            (C7885 * C6387 - C50408 * C6390 + C7886 * C22781 -
             C50302 * C22782) *
                C43931) *
               C50109 * C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C43932 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50446 +
             (C13778 - C13779 + C13780 - C13781) * C43933 +
             (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
             C46861 * C43931) *
                C50109 * C50396 +
            ((C13779 - C13778 + C13781 - C13780) * C43932 +
             (C13783 - C13782 + C13785 - C13784) * C50446 +
             (C13790 - C13791 + C13792 - C13793) * C43933 +
             (C13794 - C13795 + C13796 - C13797) * C50447 +
             (C16205 - C16204 + C16207 - C16206) * C43934 +
             (C16209 - C16208 + C16211 - C16210) * C43931) *
                C50109 * C50234) *
               C1018 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C43932 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50446 +
             (C14478 - C14479 + C14480 - C14481) * C43933 +
             (C14482 - C14483 + C14484 - C14485) * C50447 + C47750 * C43934 +
             C47751 * C43931) *
                C50109 * C50396 +
            ((C14479 - C14478 + C14481 - C14480) * C43932 +
             (C14483 - C14482 + C14485 - C14484) * C50446 +
             (C15024 - C15025 + C15026 - C15027) * C43933 +
             (C15028 - C15029 + C15030 - C15031) * C50447 +
             (C47742 - C47743 + C47744 - C47745) * C43934 +
             (C47746 - C47747 + C47748 - C47749) * C43931) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C7889 - C7888 + C7891 - C7890) * C43932 +
             (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
             C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
                C50109 * C50396 +
            (C13818 * C43932 + C13819 * C50446 + C13824 * C43933 +
             C13825 * C50447 + (C13810 - C13811 + C13812 - C13813) * C43934 +
             (C13814 - C13815 + C13816 - C13817) * C43931) *
                C50109 * C50234) *
               C1018 +
           (((C8085 - C8084 + C8087 - C8086) * C43932 +
             (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
             C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
             (C14498 - C14499 + C14500 - C14501) * C43931) *
                C50109 * C50396 +
            (C14502 * C43932 + C14503 * C50446 +
             (C14495 - C14494 + C14497 - C14496) * C43933 +
             (C14499 - C14498 + C14501 - C14500) * C50447 +
             (C7885 * C4516 - C50408 * C4522 + C7886 * C4517 - C50302 * C4523) *
                 C43934 +
             (C7885 * C4524 - C50408 * C4528 + C7886 * C4525 - C50302 * C4529) *
                 C43931) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C50170 * C1018 +
           ((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 +
            (C15025 - C15024 + C15027 - C15026) * C43934 +
            (C15029 - C15028 + C15031 - C15030) * C43931) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C50170 * C1018 +
           ((C8085 - C8084 + C8087 - C8086) * C43932 +
            (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
            C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
            (C14498 - C14499 + C14500 - C14501) * C43931) *
               C50109 * C50170 * C50206) *
              C1021 +
          ((C7928 * C43932 + C7929 * C50446 + C14218 * C43933 +
            C14219 * C50447 + (C8286 - C8287 + C8288 - C8289) * C43934 +
            (C8290 - C8291 + C8292 - C8293) * C43931) *
               C50109 * C50170 * C1018 +
           (C8452 * C43932 + C8453 * C50446 +
            (C8823 - C8822 + C8825 - C8824) * C43933 +
            (C8827 - C8826 + C8829 - C8828) * C50447 +
            (C7885 * C1210 - C50408 * C1216 + C7886 * C2656 - C50302 * C2661) *
                C43934 +
            (C7885 * C1217 - C50408 * C1222 + C7886 * C2662 - C50302 * C2665) *
                C43931) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
               C43932 +
           (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
               C50446 +
           (C13778 - C13779 + C13780 - C13781) * C43933 +
           (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
           C46861 * C43931) *
              C50109 * C50170 * C1089 +
          ((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
               C43932 +
           (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
               C50446 +
           (C14478 - C14479 + C14480 - C14481) * C43933 +
           (C14482 - C14483 + C14484 - C14485) * C50447 +
           (C15025 - C15024 + C15027 - C15026) * C43934 +
           (C15029 - C15028 + C15031 - C15030) * C43931) *
              C50109 * C50170 * C1090 +
          ((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
               C43932 +
           (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
               C50446 +
           (C15678 - C15679 + C15680 - C15681) * C43933 +
           (C15682 - C15683 + C15684 - C15685) * C50447 +
           (C50408 * C2657 - C7885 * C2654 + C50302 * C3624 - C7886 * C3622) *
               C43934 +
           (C50408 * C2663 - C7885 * C2658 + C50302 * C3628 - C7886 * C3625) *
               C43931) *
              C50109 * C50170 * C1091 +
          ((C7885 * C1094 - C50408 * C1098 + C7886 * C2472 - C50302 * C2475) *
               C43932 +
           (C7885 * C1099 - C50408 * C1106 + C7886 * C2476 - C50302 * C2481) *
               C50446 +
           (C7885 * C3200 - C50408 * C3203 + C7886 * C4116 - C50302 * C4118) *
               C43933 +
           (C7885 * C3204 - C50408 * C3209 + C7886 * C4119 - C50302 * C4122) *
               C50447 +
           (C7885 * C3622 - C50408 * C3624 + C7886 * C20519 - C50302 * C20520) *
               C43934 +
           (C7885 * C3625 - C50408 * C3628 + C7886 * C20521 - C50302 * C20522) *
               C43931) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                 C43932 +
             (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                 C50446 +
             (C13778 - C13779 + C13780 - C13781) * C43933 +
             (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
             C46861 * C43931) *
                C50109 * C1669 +
            ((C13779 - C13778 + C13781 - C13780) * C43932 +
             (C13783 - C13782 + C13785 - C13784) * C50446 +
             (C13790 - C13791 + C13792 - C13793) * C43933 +
             (C13794 - C13795 + C13796 - C13797) * C50447 + C48648 * C43934 +
             C48649 * C43931) *
                C50109 * C50234) *
               C50395 +
           (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                 C43932 +
             (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                 C50446 +
             (C14478 - C14479 + C14480 - C14481) * C43933 +
             (C14482 - C14483 + C14484 - C14485) * C50447 + C47750 * C43934 +
             C47751 * C43931) *
                C50109 * C1669 +
            ((C14479 - C14478 + C14481 - C14480) * C43932 +
             (C14483 - C14482 + C14485 - C14484) * C50446 +
             (C15024 - C15025 + C15026 - C15027) * C43933 +
             (C15028 - C15029 + C15030 - C15031) * C50447 +
             (C47742 - C47743 + C47744 - C47745) * C43934 +
             (C47746 - C47747 + C47748 - C47749) * C43931) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C7889 - C7888 + C7891 - C7890) * C43932 +
             (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
             C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
                C50109 * C1669 +
            (C13818 * C43932 + C13819 * C50446 + C13824 * C43933 +
             C13825 * C50447 + (C13810 - C13811 + C13812 - C13813) * C43934 +
             (C13814 - C13815 + C13816 - C13817) * C43931) *
                C50109 * C50234) *
               C50395 +
           (((C8085 - C8084 + C8087 - C8086) * C43932 +
             (C8089 - C8088 + C8091 - C8090) * C50446 + C14504 * C43933 +
             C14505 * C50447 + (C14494 - C14495 + C14496 - C14497) * C43934 +
             (C14498 - C14499 + C14500 - C14501) * C43931) *
                C50109 * C1669 +
            (C14502 * C43932 + C14503 * C50446 +
             (C14495 - C14494 + C14497 - C14496) * C43933 +
             (C14499 - C14498 + C14501 - C14500) * C50447 +
             (C7885 * C4516 - C50408 * C4522 + C7886 * C4517 - C50302 * C4523) *
                 C43934 +
             (C7885 * C4524 - C50408 * C4528 + C7886 * C4525 - C50302 * C4529) *
                 C43931) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C50442 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 + C48648 * C43934 +
            C48649 * C43931) *
               C50109 * C50443 +
           (C46860 * C43932 + C46861 * C50446 +
            (C16204 - C16205 + C16206 - C16207) * C43933 +
            (C16208 - C16209 + C16210 - C16211) * C50447 +
            (C48640 - C48641 + C48642 - C48643) * C43934 +
            (C48644 - C48645 + C48646 - C48647) * C43931) *
               C50109 * C2085) *
              C50395 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 + C47750 * C43934 +
            C47751 * C43931) *
               C50109 * C50442 +
           ((C14479 - C14478 + C14481 - C14480) * C43932 +
            (C14483 - C14482 + C14485 - C14484) * C50446 +
            (C15024 - C15025 + C15026 - C15027) * C43933 +
            (C15028 - C15029 + C15030 - C15031) * C50447 +
            (C47742 - C47743 + C47744 - C47745) * C43934 +
            (C47746 - C47747 + C47748 - C47749) * C43931) *
               C50109 * C50443 +
           (C47750 * C43932 + C47751 * C50446 +
            (C47743 - C47742 + C47745 - C47744) * C43933 +
            (C47747 - C47746 + C47749 - C47748) * C50447 +
            (C7885 * C6384 - C50408 * C6386 + C7886 * C22779 -
             C50302 * C22780) *
                C43934 +
            (C7885 * C6387 - C50408 * C6390 + C7886 * C22781 -
             C50302 * C22782) *
                C43931) *
               C50109 * C2085) *
              C50206) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C1669 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 +
            (C16205 - C16204 + C16207 - C16206) * C43934 +
            (C16209 - C16208 + C16211 - C16210) * C43931) *
               C50109 * C50234) *
              C285 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 + C47750 * C43934 +
            C47751 * C43931) *
               C50109 * C1669 +
           ((C14479 - C14478 + C14481 - C14480) * C43932 +
            (C14483 - C14482 + C14485 - C14484) * C50446 +
            (C15024 - C15025 + C15026 - C15027) * C43933 +
            (C15028 - C15029 + C15030 - C15031) * C50447 +
            (C47742 - C47743 + C47744 - C47745) * C43934 +
            (C47746 - C47747 + C47748 - C47749) * C43931) *
               C50109 * C50234) *
              C286 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C43932 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50446 +
            (C15678 - C15679 + C15680 - C15681) * C43933 +
            (C15682 - C15683 + C15684 - C15685) * C50447 +
            (C48238 - C48239 + C48240 - C48241) * C43934 +
            (C48242 - C48243 + C48244 - C48245) * C43931) *
               C50109 * C1669 +
           ((C15679 - C15678 + C15681 - C15680) * C43932 +
            (C15683 - C15682 + C15685 - C15684) * C50446 +
            (C48239 - C48238 + C48241 - C48240) * C43933 +
            (C48243 - C48242 + C48245 - C48244) * C50447 +
            (C7885 * C4515 - C50408 * C4519 + C7886 * C21115 -
             C50302 * C21116) *
                C43934 +
            (C7885 * C4521 - C50408 * C4527 + C7886 * C21117 -
             C50302 * C21118) *
                C43931) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C1669 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 +
            (C16205 - C16204 + C16207 - C16206) * C43934 +
            (C16209 - C16208 + C16211 - C16210) * C43931) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C1669 +
           (C13818 * C43932 + C13819 * C50446 + C13824 * C43933 +
            C13825 * C50447 + (C13810 - C13811 + C13812 - C13813) * C43934 +
            (C13814 - C13815 + C13816 - C13817) * C43931) *
               C50109 * C50234) *
              C50154 * C1021 +
          ((C7928 * C43932 + C7929 * C50446 + C14218 * C43933 +
            C14219 * C50447 + (C8286 - C8287 + C8288 - C8289) * C43934 +
            (C8290 - C8291 + C8292 - C8293) * C43931) *
               C50109 * C1669 +
           (C8615 * C43932 + C8616 * C50446 +
            (C8287 - C8286 + C8289 - C8288) * C43933 +
            (C8291 - C8290 + C8293 - C8292) * C50447 +
            (C7885 * C1841 - C50408 * C1847 + C7886 * C5970 - C50302 * C5971) *
                C43934 +
            (C7885 * C1848 - C50408 * C1853 + C7886 * C5972 - C50302 * C5973) *
                C43931) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
               C43932 +
           (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
               C50446 +
           (C13778 - C13779 + C13780 - C13781) * C43933 +
           (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
           C46861 * C43931) *
              C50109 * C1835 +
          ((C13779 - C13778 + C13781 - C13780) * C43932 +
           (C13783 - C13782 + C13785 - C13784) * C50446 +
           (C13790 - C13791 + C13792 - C13793) * C43933 +
           (C13794 - C13795 + C13796 - C13797) * C50447 + C48648 * C43934 +
           C48649 * C43931) *
              C50109 * C1836 +
          (C46860 * C43932 + C46861 * C50446 +
           (C16204 - C16205 + C16206 - C16207) * C43933 +
           (C16208 - C16209 + C16210 - C16211) * C50447 +
           (C48640 - C48641 + C48642 - C48643) * C43934 +
           (C48644 - C48645 + C48646 - C48647) * C43931) *
              C50109 * C1837 +
          (C48648 * C43932 + C48649 * C50446 +
           (C48641 - C48640 + C48643 - C48642) * C43933 +
           (C48645 - C48644 + C48647 - C48646) * C50447 +
           (C7885 * C7282 - C50408 * C7284 + C7886 * C23689 - C50302 * C23690) *
               C43934 +
           (C7885 * C7285 - C50408 * C7288 + C7886 * C23691 - C50302 * C23692) *
               C43931) *
              C50109 * C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C50442 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 + C48648 * C43934 +
            C48649 * C43931) *
               C50109 * C50443 +
           (C46860 * C43932 + C46861 * C50446 +
            (C16204 - C16205 + C16206 - C16207) * C43933 +
            (C16208 - C16209 + C16210 - C16211) * C50447 +
            (C48640 - C48641 + C48642 - C48643) * C43934 +
            (C48644 - C48645 + C48646 - C48647) * C43931) *
               C50109 * C2085) *
              C50154 * C50387 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C50442 +
           (C13818 * C43932 + C13819 * C50446 + C13824 * C43933 +
            C13825 * C50447 + (C13810 - C13811 + C13812 - C13813) * C43934 +
            (C13814 - C13815 + C13816 - C13817) * C43931) *
               C50109 * C50443 +
           (C13822 * C43932 + C13823 * C50446 +
            (C13811 - C13810 + C13813 - C13812) * C43933 +
            (C13815 - C13814 + C13817 - C13816) * C50447 +
            (C7885 * C5425 - C50408 * C5429 + C7886 * C6385 - C50302 * C6388) *
                C43934 +
            (C7885 * C5430 - C50408 * C5434 + C7886 * C6389 - C50302 * C6391) *
                C43931) *
               C50109 * C2085) *
              C50154 * C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C1669 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 +
            (C16205 - C16204 + C16207 - C16206) * C43934 +
            (C16209 - C16208 + C16211 - C16210) * C43931) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C7889 - C7888 + C7891 - C7890) * C43932 +
            (C7893 - C7892 + C7895 - C7894) * C50446 + C13820 * C43933 +
            C13821 * C50447 + C13822 * C43934 + C13823 * C43931) *
               C50109 * C1669 +
           (C13818 * C43932 + C13819 * C50446 + C13824 * C43933 +
            C13825 * C50447 + (C13810 - C13811 + C13812 - C13813) * C43934 +
            (C13814 - C13815 + C13816 - C13817) * C43931) *
               C50109 * C50234) *
              C50154 * C1021 +
          ((C7928 * C43932 + C7929 * C50446 + C14218 * C43933 +
            C14219 * C50447 + (C8286 - C8287 + C8288 - C8289) * C43934 +
            (C8290 - C8291 + C8292 - C8293) * C43931) *
               C50109 * C1669 +
           (C8615 * C43932 + C8616 * C50446 +
            (C8287 - C8286 + C8289 - C8288) * C43933 +
            (C8291 - C8290 + C8293 - C8292) * C50447 +
            (C7885 * C1841 - C50408 * C1847 + C7886 * C5970 - C50302 * C5971) *
                C43934 +
            (C7885 * C1848 - C50408 * C1853 + C7886 * C5972 - C50302 * C5973) *
                C43931) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50408 * C126 - C7885 * C119 + C50302 * C300 - C7886 * C290) *
                C43932 +
            (C50408 * C140 - C7885 * C127 + C50302 * C320 - C7886 * C301) *
                C50446 +
            (C13778 - C13779 + C13780 - C13781) * C43933 +
            (C13782 - C13783 + C13784 - C13785) * C50447 + C46860 * C43934 +
            C46861 * C43931) *
               C50109 * C1669 +
           ((C13779 - C13778 + C13781 - C13780) * C43932 +
            (C13783 - C13782 + C13785 - C13784) * C50446 +
            (C13790 - C13791 + C13792 - C13793) * C43933 +
            (C13794 - C13795 + C13796 - C13797) * C50447 +
            (C16205 - C16204 + C16207 - C16206) * C43934 +
            (C16209 - C16208 + C16211 - C16210) * C43931) *
               C50109 * C50234) *
              C285 +
          (((C7885 * C290 - C50408 * C300 + C7886 * C294 - C50302 * C308) *
                C43932 +
            (C7885 * C301 - C50408 * C320 + C7886 * C309 - C50302 * C324) *
                C50446 +
            (C14478 - C14479 + C14480 - C14481) * C43933 +
            (C14482 - C14483 + C14484 - C14485) * C50447 + C47750 * C43934 +
            C47751 * C43931) *
               C50109 * C1669 +
           ((C14479 - C14478 + C14481 - C14480) * C43932 +
            (C14483 - C14482 + C14485 - C14484) * C50446 +
            (C15024 - C15025 + C15026 - C15027) * C43933 +
            (C15028 - C15029 + C15030 - C15031) * C50447 +
            (C47742 - C47743 + C47744 - C47745) * C43934 +
            (C47746 - C47747 + C47748 - C47749) * C43931) *
               C50109 * C50234) *
              C286 +
          (((C50408 * C308 - C7885 * C294 + C50302 * C1098 - C7886 * C1094) *
                C43932 +
            (C50408 * C324 - C7885 * C309 + C50302 * C1106 - C7886 * C1099) *
                C50446 +
            (C15678 - C15679 + C15680 - C15681) * C43933 +
            (C15682 - C15683 + C15684 - C15685) * C50447 +
            (C48238 - C48239 + C48240 - C48241) * C43934 +
            (C48242 - C48243 + C48244 - C48245) * C43931) *
               C50109 * C1669 +
           ((C15679 - C15678 + C15681 - C15680) * C43932 +
            (C15683 - C15682 + C15685 - C15684) * C50446 +
            (C48239 - C48238 + C48241 - C48240) * C43933 +
            (C48243 - C48242 + C48245 - C48244) * C50447 +
            (C7885 * C4515 - C50408 * C4519 + C7886 * C21115 -
             C50302 * C21116) *
                C43934 +
            (C7885 * C4521 - C50408 * C4527 + C7886 * C21117 -
             C50302 * C21118) *
                C43931) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50170 * C50395 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C2287 * C888 - C2282 * C893 + C2288 * C1555 - C2283 * C1559 +
             C2289 * C3200 - C2284 * C3203) *
                C33286 +
            (C2287 * C894 - C2282 * C903 + C2288 * C1560 - C2283 * C1567 +
             C2289 * C3204 - C2284 * C3209) *
                C50330) *
               C50109 * C50170 * C50206) *
              C50438 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C50395 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C50206) *
              C50439 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C50170 * C50395 +
           ((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C33285 +
            (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C33283 +
            (C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
             C2289 * C3202 - C2284 * C3207) *
                C33286 +
            (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
             C2289 * C3208 - C2284 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C50395 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50170 * C50206) *
              C50438 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C50395 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C50206) *
              C50439 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C50170 * C50395 +
           (C33746 * C16957 +
            (C629 * C33285 + C630 * C33283 + (C918 - C917) * C33286 +
             (C920 - C919) * C50330) *
                C16958 +
            ((C632 - C631) * C33285 + (C634 - C633) * C33283 +
             (C117 * C892 - C50251 * C901) * C33286 +
             (C117 * C902 - C50251 * C907) * C50330) *
                C16959) *
               C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C50170 * C50395 +
           ((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            (C6396 - C6395) * C38618 + (C6398 - C6397) * C38614) *
               C50109 * C50170 * C50206) *
              C50438 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C50170 * C50395 +
           ((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
            C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
            (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
               C50109 * C50170 * C50206) *
              C50439 +
          ((C168 * C38615 + C169 * C38611 + C5773 * C38616 + C5774 * C38612 +
            C5775 * C38617 + C5776 * C38613 + (C5467 - C5468) * C38618 +
            (C5469 - C5470) * C38614) *
               C50109 * C50170 * C50395 +
           (C627 * C38615 + C628 * C38611 + C11142 * C38616 + C11143 * C38612 +
            (C5624 - C5623) * C38617 + (C5626 - C5625) * C38613 +
            (C117 * C5970 - C50251 * C5971) * C38618 +
            (C117 * C5972 - C50251 * C5973) * C38614) *
               C50109 * C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C33285 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C33283 +
             (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
             (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
                C50109 * C50396 +
            ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
             (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
             (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
             (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C33285 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C33283 +
             (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
             (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
                C50109 * C50396 +
            ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
             (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
             (C2282 * C1212 - C2287 * C1208 + C2283 * C2657 - C2288 * C2654 +
              C2284 * C3624 - C2289 * C3622) *
                 C33286 +
             (C2282 * C1220 - C2287 * C1213 + C2283 * C2663 - C2288 * C2658 +
              C2284 * C3628 - C2289 * C3625) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C288 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
                C50109 * C50396 +
            ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
             (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
             (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
                C50109 * C50396 +
            ((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C33285 +
             (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C33283 +
             (C2287 * C1209 - C2282 * C1214 + C2288 * C2655 - C2283 * C2659 +
              C2289 * C3623 - C2284 * C3626) *
                 C33286 +
             (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 - C2283 * C2664 +
              C2289 * C3627 - C2284 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C33285 +
              (C50251 * C140 - C117 * C127) * C33283 +
              (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                 C16957 +
             ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
              C5446 * C50330) *
                 C16958 +
             C33300 * C16959) *
                C50396 +
            (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
              (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                 C16957 +
             (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
              C5456 * C50330) *
                 C16958 +
             C33899 * C16959) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C33285 +
              (C117 * C301 - C50251 * C320) * C33283 +
              (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                 C16957 +
             ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
              C5984 * C50330) *
                 C16958 +
             C33746 * C16959) *
                C50396 +
            (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
              (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                 C16957 +
             (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
              C5990 * C50330) *
                 C16958 +
             (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
              (C5625 - C5626) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C288 +
          (((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
              C5454 * C50330) *
                 C16957 +
             ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
              C746 * C50330) *
                 C16958 +
             C33301 * C16959) *
                C50396 +
            ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
              C5448 * C50330) *
                 C16957 +
             (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
              C5776 * C50330) *
                 C16958 +
             (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
              (C518 - C519) * C50330) *
                 C16959) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
              C5988 * C50330) *
                 C16957 +
             ((C336 - C335) * C33285 + (C338 - C337) * C33283 +
              C11498 * C33286 + C11499 * C50330) *
                 C16958 +
             ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
              (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                 C16959) *
                C50396 +
            ((C5983 * C33285 + C5984 * C33283 + C5985 * C33286 +
              C5986 * C50330) *
                 C16957 +
             (C11142 * C33285 + C11143 * C33283 + (C5624 - C5623) * C33286 +
              (C5626 - C5625) * C50330) *
                 C16958 +
             ((C918 - C917) * C33285 + (C920 - C919) * C33283 +
              (C117 * C1211 - C50251 * C1218) * C33286 +
              (C117 * C1219 - C50251 * C1223) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C38615 +
             (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
             (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
             C38816 * C38618 + C38817 * C38614) *
                C50109 * C50396 +
            ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
             (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
             C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
             (C7296 - C7295) * C38614) *
                C50109 * C50234) *
               C50395 +
           (((C117 * C290 - C50251 * C300) * C38615 +
             (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
             (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
             (C6396 - C6395) * C38618 + (C6398 - C6397) * C38614) *
                C50109 * C50396 +
            ((C5976 - C5975) * C38615 + (C5978 - C5977) * C38611 +
             (C5980 - C5979) * C38616 + (C5982 - C5981) * C38612 +
             (C6395 - C6396) * C38617 + (C6397 - C6398) * C38613 +
             (C50251 * C6386 - C117 * C6384) * C38618 +
             (C50251 * C6390 - C117 * C6387) * C38614) *
                C50109 * C50234) *
               C50206) *
              C288 +
          ((((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
             C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
             C5474 * C38614) *
                C50109 * C50396 +
            (C5445 * C38615 + C5446 * C38611 + C5447 * C38616 + C5448 * C38612 +
             C5475 * C38617 + C5476 * C38613 + (C5461 - C5462) * C38618 +
             (C5463 - C5464) * C38614) *
                C50109 * C50234) *
               C50395 +
           (((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
             C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
             (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
                C50109 * C50396 +
            (C5983 * C38615 + C5984 * C38611 + C5985 * C38616 + C5986 * C38612 +
             (C5992 - C5991) * C38617 + (C5994 - C5993) * C38613 +
             (C117 * C6385 - C50251 * C6388) * C38618 +
             (C117 * C6389 - C50251 * C6391) * C38614) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C50251 * C126 - C117 * C119) * C33285 +
                (C50251 * C140 - C117 * C127) * C33283 +
                (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                   C16957 +
               ((C148 - C149) * C33285 + (C150 - C151) * C33283 +
                C5445 * C33286 + C5446 * C50330) *
                   C16958 +
               C33300 * C16959) *
                  C50170 * C50154 * C113 +
              (((C149 - C148) * C33285 + (C151 - C150) * C33283 +
                C5453 * C33286 + C5454 * C50330) *
                   C16957 +
               ((C153 - C152) * C33285 + (C155 - C154) * C33283 +
                C745 * C33286 + C746 * C50330) *
                   C16958 +
               C33301 * C16959) *
                  C50170 * C50154 * C114 +
              (C33300 * C16957 +
               (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
                C11300 * C50330) *
                   C16958 +
               ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
                (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                   C16959) *
                  C50170 * C50154 * C115 +
              (C33301 * C16957 +
               (C174 * C33285 + C175 * C33283 + (C750 - C749) * C33286 +
                (C752 - C751) * C50330) *
                   C16958 +
               ((C165 - C164) * C33285 + (C167 - C166) * C33283 +
                (C117 * C740 - C50251 * C741) * C33286 +
                (C117 * C742 - C50251 * C743) * C50330) *
                   C16959) *
                  C50170 * C50154 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C50251 * C126 - C117 * C119) * C33285 +
                 (C50251 * C140 - C117 * C127) * C33283 +
                 (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                    C16957 +
                ((C148 - C149) * C33285 + (C150 - C151) * C33283 +
                 C5445 * C33286 + C5446 * C50330) *
                    C16958 +
                C33300 * C16959) *
                   C50170 * C285 +
               (((C117 * C290 - C50251 * C300) * C33285 +
                 (C117 * C301 - C50251 * C320) * C33283 +
                 (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                    C16957 +
                ((C331 - C332) * C33285 + (C333 - C334) * C33283 +
                 C5983 * C33286 + C5984 * C50330) *
                    C16958 +
                (C627 * C33285 + C628 * C33283 + C11142 * C33286 +
                 C11143 * C50330) *
                    C16959) *
                   C50170 * C286 +
               (((C50251 * C308 - C117 * C294) * C33285 +
                 (C50251 * C324 - C117 * C309) * C33283 +
                 (C6885 - C6886) * C33286 + (C6887 - C6888) * C50330) *
                    C16957 +
                ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
                 (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                    C16958 +
                ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
                 (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                    C16959) *
                   C50170 * C287) *
                  C288 +
              ((((C149 - C148) * C33285 + (C151 - C150) * C33283 +
                 C5453 * C33286 + C5454 * C50330) *
                    C16957 +
                ((C153 - C152) * C33285 + (C155 - C154) * C33283 +
                 C745 * C33286 + C746 * C50330) *
                    C16958 +
                C33301 * C16959) *
                   C50170 * C285 +
               (((C332 - C331) * C33285 + (C334 - C333) * C33283 +
                 C5987 * C33286 + C5988 * C50330) *
                    C16957 +
                ((C336 - C335) * C33285 + (C338 - C337) * C33283 +
                 C11498 * C33286 + C11499 * C50330) *
                    C16958 +
                ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
                 (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                    C16959) *
                   C50170 * C286 +
               (((C344 - C343) * C33285 + (C346 - C345) * C33283 +
                 (C5272 - C5271) * C33286 + (C5274 - C5273) * C50330) *
                    C16957 +
                ((C348 - C347) * C33285 + (C350 - C349) * C33283 +
                 (C10845 - C10844) * C33286 + (C10847 - C10846) * C50330) *
                    C16958 +
                ((C352 - C351) * C33285 + (C354 - C353) * C33283 +
                 (C117 * C1558 - C50251 * C1565) * C33286 +
                 (C117 * C1566 - C50251 * C1570) * C50330) *
                    C16959) *
                   C50170 * C287) *
                  C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C452 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            (C745 * C33285 + C746 * C33283 + C5465 * C33286 + C5466 * C50330) *
                C16959) *
               C453 +
           ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
             (C5452 - C5451) * C50330) *
                C16957 +
            (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 +
             C5476 * C50330) *
                C16958 +
            (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
             (C5469 - C5470) * C50330) *
                C16959) *
               C454) *
              C50154 * C288 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C452 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C453 +
           ((C5455 * C33285 + C5456 * C33283 + C5473 * C33286 +
             C5474 * C50330) *
                C16957 +
            (C5465 * C33285 + C5466 * C33283 + (C5468 - C5467) * C33286 +
             (C5470 - C5469) * C50330) *
                C16958 +
            ((C517 - C516) * C33285 + (C519 - C518) * C33283 +
             (C117 * C1842 - C50251 * C1849) * C33286 +
             (C117 * C1850 - C50251 * C1854) * C50330) *
                C16959) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C2282 * C465 - C2287 * C455 + C2283 * C893 - C2288 * C888 +
            C2284 * C1559 - C2289 * C1555) *
               C33286 +
           (C2282 * C485 - C2287 * C466 + C2283 * C903 - C2288 * C894 +
            C2284 * C1567 - C2289 * C1560) *
               C50330) *
              C50109 * C50170 * C50154 * C113 +
          ((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
           (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
           (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
           (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
              C50109 * C50170 * C50154 * C114 +
          ((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
           (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
           (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
           (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
              C50109 * C50170 * C50154 * C115 +
          ((C2316 - C2315 + C2318 - C2317 + C2320 - C2319) * C33285 +
           (C2322 - C2321 + C2324 - C2323 + C2326 - C2325) * C33283 +
           (C2287 * C458 - C2282 * C471 + C2288 * C891 - C2283 * C899 +
            C2289 * C1558 - C2284 * C1565) *
               C33286 +
           (C2287 * C472 - C2282 * C488 + C2288 * C900 - C2283 * C906 +
            C2289 * C1566 - C2284 * C1570) *
               C50330) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C2282 * C465 - C2287 * C455 + C2283 * C893 - C2288 * C888 +
             C2284 * C1559 - C2289 * C1555) *
                C33286 +
            (C2282 * C485 - C2287 * C466 + C2283 * C903 - C2288 * C894 +
             C2284 * C1567 - C2289 * C1560) *
                C50330) *
               C50109 * C50170 * C285 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C2287 * C888 - C2282 * C893 + C2288 * C1555 - C2283 * C1559 +
             C2289 * C3200 - C2284 * C3203) *
                C33286 +
            (C2287 * C894 - C2282 * C903 + C2288 * C1560 - C2283 * C1567 +
             C2289 * C3204 - C2284 * C3209) *
                C50330) *
               C50109 * C50170 * C286 +
           ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
             C2284 * C4118 - C2289 * C4116) *
                C33286 +
            (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
             C2284 * C4122 - C2289 * C4119) *
                C50330) *
               C50109 * C50170 * C287) *
              C288 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C285 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C286 +
           ((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C33285 +
            (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C33283 +
            (C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
             C2289 * C4117 - C2284 * C4120) *
                C33286 +
            (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
             C2289 * C4121 - C2284 * C4123) *
                C50330) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C452 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C453 +
           ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
            (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
            (C2282 * C1843 - C2287 * C1839 + C2283 * C4518 - C2288 * C4514 +
             C2284 * C4519 - C2289 * C4515) *
                C33286 +
            (C2282 * C1851 - C2287 * C1844 + C2283 * C4526 - C2288 * C4520 +
             C2284 * C4527 - C2289 * C4521) *
                C50330) *
               C50109 * C454) *
              C50154 * C288 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C452 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C453 +
           ((C2680 - C2679 + C2682 - C2681 + C2684 - C2683) * C33285 +
            (C2686 - C2685 + C2688 - C2687 + C2690 - C2689) * C33283 +
            (C2287 * C1840 - C2282 * C1845 + C2288 * C4516 - C2283 * C4522 +
             C2289 * C4517 - C2284 * C4523) *
                C33286 +
            (C2287 * C1846 - C2282 * C1852 + C2288 * C4524 - C2283 * C4528 +
             C2289 * C4525 - C2284 * C4529) *
                C50330) *
               C50109 * C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C50251 * C126 - C117 * C119) * C38615 +
           (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
           (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
           (C5450 - C5449) * C38618 + (C5452 - C5451) * C38614) *
              C50109 * C50170 * C50154 * C113 +
          ((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
           C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
           C5474 * C38614) *
              C50109 * C50170 * C50154 * C114 +
          (C168 * C38615 + C169 * C38611 + C5773 * C38616 + C5774 * C38612 +
           C5775 * C38617 + C5776 * C38613 + (C5467 - C5468) * C38618 +
           (C5469 - C5470) * C38614) *
              C50109 * C50170 * C50154 * C115 +
          (C172 * C38615 + C173 * C38611 + C747 * C38616 + C748 * C38612 +
           (C517 - C516) * C38617 + (C519 - C518) * C38613 +
           (C117 * C1842 - C50251 * C1849) * C38618 +
           (C117 * C1850 - C50251 * C1854) * C38614) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            (C5450 - C5449) * C38618 + (C5452 - C5451) * C38614) *
               C50109 * C50170 * C285 +
           ((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            (C6396 - C6395) * C38618 + (C6398 - C6397) * C38614) *
               C50109 * C50170 * C286 +
           ((C50251 * C308 - C117 * C294) * C38615 +
            (C50251 * C324 - C117 * C309) * C38611 + (C6885 - C6886) * C38616 +
            (C6887 - C6888) * C38612 + (C6889 - C6890) * C38617 +
            (C6891 - C6892) * C38613 +
            (C50251 * C4519 - C117 * C4515) * C38618 +
            (C50251 * C4527 - C117 * C4521) * C38614) *
               C50109 * C50170 * C287) *
              C288 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C50170 * C285 +
           ((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
            C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
            (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
               C50109 * C50170 * C286 +
           ((C344 - C343) * C38615 + (C346 - C345) * C38611 +
            (C5272 - C5271) * C38616 + (C5274 - C5273) * C38612 +
            (C5276 - C5275) * C38617 + (C5278 - C5277) * C38613 +
            (C117 * C4517 - C50251 * C4523) * C38618 +
            (C117 * C4525 - C50251 * C4529) * C38614) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C452 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
            (C7296 - C7295) * C38614) *
               C50109 * C453 +
           (C5471 * C38615 + C5472 * C38611 + C38816 * C38616 +
            C38817 * C38612 + (C7293 - C7294) * C38617 +
            (C7295 - C7296) * C38613 +
            (C50251 * C7284 - C117 * C7282) * C38618 +
            (C50251 * C7288 - C117 * C7285) * C38614) *
               C50109 * C454) *
              C50154 * C288 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C452 +
           (C5445 * C38615 + C5446 * C38611 + C5447 * C38616 + C5448 * C38612 +
            C5475 * C38617 + C5476 * C38613 + (C5461 - C5462) * C38618 +
            (C5463 - C5464) * C38614) *
               C50109 * C453 +
           (C5455 * C38615 + C5456 * C38611 + C5473 * C38616 + C5474 * C38612 +
            (C5462 - C5461) * C38617 + (C5464 - C5463) * C38613 +
            (C117 * C7283 - C50251 * C7286) * C38618 +
            (C117 * C7287 - C50251 * C7289) * C38614) *
               C50109 * C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50396 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C50154 * C50438 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50396 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C50234) *
              C50154 * C50439 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C50396 +
           ((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C33285 +
            (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C33283 +
            (C2287 * C461 - C2282 * C477 + C2288 * C1210 - C2283 * C1216 +
             C2289 * C2656 - C2284 * C2661) *
                C33286 +
            (C2287 * C478 - C2282 * C491 + C2288 * C1217 - C2283 * C1222 +
             C2289 * C2662 - C2284 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50396 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C50154 * C50438 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50396 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C50234) *
              C50154 * C50439 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C50396 +
           (C33899 * C16957 +
            (C747 * C33285 + C748 * C33283 + (C517 - C516) * C33286 +
             (C519 - C518) * C50330) *
                C16958 +
            ((C750 - C749) * C33285 + (C752 - C751) * C33283 +
             (C117 * C464 - C50251 * C483) * C33286 +
             (C117 * C484 - C50251 * C494) * C50330) *
                C16959) *
               C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C50396 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
            (C7296 - C7295) * C38614) *
               C50109 * C50234) *
              C50154 * C50438 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C50396 +
           (C5445 * C38615 + C5446 * C38611 + C5447 * C38616 + C5448 * C38612 +
            C5475 * C38617 + C5476 * C38613 + (C5461 - C5462) * C38618 +
            (C5463 - C5464) * C38614) *
               C50109 * C50234) *
              C50154 * C50439 +
          ((C168 * C38615 + C169 * C38611 + C5773 * C38616 + C5774 * C38612 +
            C5775 * C38617 + C5776 * C38613 + (C5467 - C5468) * C38618 +
            (C5469 - C5470) * C38614) *
               C50109 * C50396 +
           (C745 * C38615 + C746 * C38611 + C5465 * C38616 + C5466 * C38612 +
            (C5468 - C5467) * C38617 + (C5470 - C5469) * C38613 +
            (C117 * C5426 - C50251 * C5431) * C38618 +
            (C117 * C5432 - C50251 * C5435) * C38614) *
               C50109 * C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            (C627 * C33285 + C628 * C33283 + C11142 * C33286 +
             C11143 * C50330) *
                C16959) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C285 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C286 +
           (((C344 - C343) * C33285 + (C346 - C345) * C33283 +
             (C5272 - C5271) * C33286 + (C5274 - C5273) * C50330) *
                C16957 +
            ((C348 - C347) * C33285 + (C350 - C349) * C33283 +
             (C10845 - C10844) * C33286 + (C10847 - C10846) * C50330) *
                C16958 +
            ((C352 - C351) * C33285 + (C354 - C353) * C33283 +
             (C117 * C1558 - C50251 * C1565) * C33286 +
             (C117 * C1566 - C50251 * C1570) * C50330) *
                C16959) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C33285 +
            (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
            (C5439 - C5440) * C50330) *
               C16957 +
           ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
            C5446 * C50330) *
               C16958 +
           C33300 * C16959) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
            C5454 * C50330) *
               C16957 +
           ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
            C746 * C50330) *
               C16958 +
           C33301 * C16959) *
              C50170 * C50154 * C114 +
          (C33300 * C16957 +
           (C170 * C33285 + C171 * C33283 + C11299 * C33286 + C11300 * C50330) *
               C16958 +
           ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
            (C749 - C750) * C33286 + (C751 - C752) * C50330) *
               C16959) *
              C50170 * C50154 * C115 +
          (C33301 * C16957 +
           (C174 * C33285 + C175 * C33283 + (C750 - C749) * C33286 +
            (C752 - C751) * C50330) *
               C16958 +
           ((C165 - C164) * C33285 + (C167 - C166) * C33283 +
            (C117 * C740 - C50251 * C741) * C33286 +
            (C117 * C742 - C50251 * C743) * C50330) *
               C16959) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C2282 * C465 - C2287 * C455 + C2283 * C893 - C2288 * C888 +
            C2284 * C1559 - C2289 * C1555) *
               C33286 +
           (C2282 * C485 - C2287 * C466 + C2283 * C903 - C2288 * C894 +
            C2284 * C1567 - C2289 * C1560) *
               C50330) *
              C50109 * C50170 * C50154 * C113 +
          ((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
           (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
           (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
           (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
              C50109 * C50170 * C50154 * C114 +
          ((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
           (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
           (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
           (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
              C50109 * C50170 * C50154 * C115 +
          ((C2316 - C2315 + C2318 - C2317 + C2320 - C2319) * C33285 +
           (C2322 - C2321 + C2324 - C2323 + C2326 - C2325) * C33283 +
           (C2287 * C458 - C2282 * C471 + C2288 * C891 - C2283 * C899 +
            C2289 * C1558 - C2284 * C1565) *
               C33286 +
           (C2287 * C472 - C2282 * C488 + C2288 * C900 - C2283 * C906 +
            C2289 * C1566 - C2284 * C1570) *
               C50330) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C2282 * C465 - C2287 * C455 + C2283 * C893 - C2288 * C888 +
             C2284 * C1559 - C2289 * C1555) *
                C33286 +
            (C2282 * C485 - C2287 * C466 + C2283 * C903 - C2288 * C894 +
             C2284 * C1567 - C2289 * C1560) *
                C50330) *
               C50109 * C50170 * C285 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C2287 * C888 - C2282 * C893 + C2288 * C1555 - C2283 * C1559 +
             C2289 * C3200 - C2284 * C3203) *
                C33286 +
            (C2287 * C894 - C2282 * C903 + C2288 * C1560 - C2283 * C1567 +
             C2289 * C3204 - C2284 * C3209) *
                C50330) *
               C50109 * C50170 * C286 +
           ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
             C2284 * C4118 - C2289 * C4116) *
                C33286 +
            (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
             C2284 * C4122 - C2289 * C4119) *
                C50330) *
               C50109 * C50170 * C287) *
              C288 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C285 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C286 +
           ((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C33285 +
            (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C33283 +
            (C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
             C2289 * C4117 - C2284 * C4120) *
                C33286 +
            (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
             C2289 * C4121 - C2284 * C4123) *
                C50330) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C50251 * C126 - C117 * C119) * C38615 +
           (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
           (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
           (C5450 - C5449) * C38618 + (C5452 - C5451) * C38614) *
              C50109 * C50170 * C50154 * C113 +
          ((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
           C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
           C5474 * C38614) *
              C50109 * C50170 * C50154 * C114 +
          (C168 * C38615 + C169 * C38611 + C5773 * C38616 + C5774 * C38612 +
           C5775 * C38617 + C5776 * C38613 + (C5467 - C5468) * C38618 +
           (C5469 - C5470) * C38614) *
              C50109 * C50170 * C50154 * C115 +
          (C172 * C38615 + C173 * C38611 + C747 * C38616 + C748 * C38612 +
           (C517 - C516) * C38617 + (C519 - C518) * C38613 +
           (C117 * C1842 - C50251 * C1849) * C38618 +
           (C117 * C1850 - C50251 * C1854) * C38614) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            (C5450 - C5449) * C38618 + (C5452 - C5451) * C38614) *
               C50109 * C50170 * C285 +
           ((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            (C6396 - C6395) * C38618 + (C6398 - C6397) * C38614) *
               C50109 * C50170 * C286 +
           ((C50251 * C308 - C117 * C294) * C38615 +
            (C50251 * C324 - C117 * C309) * C38611 + (C6885 - C6886) * C38616 +
            (C6887 - C6888) * C38612 + (C6889 - C6890) * C38617 +
            (C6891 - C6892) * C38613 +
            (C50251 * C4519 - C117 * C4515) * C38618 +
            (C50251 * C4527 - C117 * C4521) * C38614) *
               C50109 * C50170 * C287) *
              C288 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C50170 * C285 +
           ((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
            C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
            (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
               C50109 * C50170 * C286 +
           ((C344 - C343) * C38615 + (C346 - C345) * C38611 +
            (C5272 - C5271) * C38616 + (C5274 - C5273) * C38612 +
            (C5276 - C5275) * C38617 + (C5278 - C5277) * C38613 +
            (C117 * C4517 - C50251 * C4523) * C38618 +
            (C117 * C4525 - C50251 * C4529) * C38614) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50170 * C50440 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50170 * C50441 +
           ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
             C2284 * C4118 - C2289 * C4116) *
                C33286 +
            (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
             C2284 * C4122 - C2289 * C4119) *
                C50330) *
               C50109 * C50170 * C1324) *
              C50387 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C50440 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C50441 +
           ((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C33285 +
            (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C33283 +
            (C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
             C2289 * C4117 - C2284 * C4120) *
                C33286 +
            (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
             C2289 * C4121 - C2284 * C4123) *
                C50330) *
               C50109 * C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C50440 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50170 * C50441 +
           (((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C50170 * C1324) *
              C50387 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C50440 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C50441 +
           (((C344 - C343) * C33285 + (C346 - C345) * C33283 +
             (C5272 - C5271) * C33286 + (C5274 - C5273) * C50330) *
                C16957 +
            ((C348 - C347) * C33285 + (C350 - C349) * C33283 +
             (C10845 - C10844) * C33286 + (C10847 - C10846) * C50330) *
                C16958 +
            ((C352 - C351) * C33285 + (C354 - C353) * C33283 +
             (C117 * C1558 - C50251 * C1565) * C33286 +
             (C117 * C1566 - C50251 * C1570) * C50330) *
                C16959) *
               C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C50170 * C50440 +
           ((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            C39406 * C38618 + C39407 * C38614) *
               C50109 * C50170 * C50441 +
           ((C50251 * C308 - C117 * C294) * C38615 +
            (C50251 * C324 - C117 * C309) * C38611 + (C6885 - C6886) * C38616 +
            (C6887 - C6888) * C38612 + (C6889 - C6890) * C38617 +
            (C6891 - C6892) * C38613 +
            (C50251 * C4519 - C117 * C4515) * C38618 +
            (C50251 * C4527 - C117 * C4521) * C38614) *
               C50109 * C50170 * C1324) *
              C50387 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C50170 * C50440 +
           ((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
            C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
            (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
               C50109 * C50170 * C50441 +
           ((C344 - C343) * C38615 + (C346 - C345) * C38611 +
            (C5272 - C5271) * C38616 + (C5274 - C5273) * C38612 +
            (C5276 - C5275) * C38617 + (C5278 - C5277) * C38613 +
            (C117 * C4517 - C50251 * C4523) * C38618 +
            (C117 * C4525 - C50251 * C4529) * C38614) *
               C50109 * C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50396 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C50440 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50396 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C50234) *
              C50441 +
          (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C37646 - C37647 + C37648 - C37649 + C37650 - C37651) * C33286 +
            (C37652 - C37653 + C37654 - C37655 + C37656 - C37657) * C50330) *
               C50109 * C50396 +
           ((C37647 - C37646 + C37649 - C37648 + C37651 - C37650) * C33285 +
            (C37653 - C37652 + C37655 - C37654 + C37657 - C37656) * C33283 +
            (C2287 * C2654 - C2282 * C2657 + C2288 * C3622 - C2283 * C3624 +
             C2289 * C20519 - C2284 * C20520) *
                C33286 +
            (C2287 * C2658 - C2282 * C2663 + C2288 * C3625 - C2283 * C3628 +
             C2289 * C20521 - C2284 * C20522) *
                C50330) *
               C50109 * C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50396 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C50440 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50396 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C50234) *
              C50441 +
          ((((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C50396 +
           (((C6886 - C6885) * C33285 + (C6888 - C6887) * C33283 +
             (C6890 - C6889) * C33286 + (C6892 - C6891) * C50330) *
                C16957 +
            ((C5272 - C5271) * C33285 + (C5274 - C5273) * C33283 +
             (C5276 - C5275) * C33286 + (C5278 - C5277) * C50330) *
                C16958 +
            ((C10845 - C10844) * C33285 + (C10847 - C10846) * C33283 +
             (C117 * C2656 - C50251 * C2661) * C33286 +
             (C117 * C2662 - C50251 * C2665) * C50330) *
                C16959) *
               C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C50396 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
            (C7296 - C7295) * C38614) *
               C50109 * C50234) *
              C50440 +
          (((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            C39406 * C38618 + C39407 * C38614) *
               C50109 * C50396 +
           ((C5976 - C5975) * C38615 + (C5978 - C5977) * C38611 +
            (C5980 - C5979) * C38616 + (C5982 - C5981) * C38612 +
            (C6395 - C6396) * C38617 + (C6397 - C6398) * C38613 +
            (C39408 - C39409) * C38618 + (C39410 - C39411) * C38614) *
               C50109 * C50234) *
              C50441 +
          (((C50251 * C308 - C117 * C294) * C38615 +
            (C50251 * C324 - C117 * C309) * C38611 + (C6885 - C6886) * C38616 +
            (C6887 - C6888) * C38612 + (C6889 - C6890) * C38617 +
            (C6891 - C6892) * C38613 + (C39738 - C39739) * C38618 +
            (C39740 - C39741) * C38614) *
               C50109 * C50396 +
           ((C6886 - C6885) * C38615 + (C6888 - C6887) * C38611 +
            (C6890 - C6889) * C38616 + (C6892 - C6891) * C38612 +
            (C39739 - C39738) * C38617 + (C39741 - C39740) * C38613 +
            (C117 * C22779 - C50251 * C22780) * C38618 +
            (C117 * C22781 - C50251 * C22782) * C38614) *
               C50109 * C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C50251 * C126 - C117 * C119) * C33285 +
                 (C50251 * C140 - C117 * C127) * C33283 +
                 (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                    C16957 +
                ((C148 - C149) * C33285 + (C150 - C151) * C33283 +
                 C5445 * C33286 + C5446 * C50330) *
                    C16958 +
                C33300 * C16959) *
                   C50170 * C1018 +
               (((C117 * C290 - C50251 * C300) * C33285 +
                 (C117 * C301 - C50251 * C320) * C33283 +
                 (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                    C16957 +
                ((C331 - C332) * C33285 + (C333 - C334) * C33283 +
                 C5983 * C33286 + C5984 * C50330) *
                    C16958 +
                C33746 * C16959) *
                   C50170 * C50206) *
                  C1020 +
              ((((C149 - C148) * C33285 + (C151 - C150) * C33283 +
                 C5453 * C33286 + C5454 * C50330) *
                    C16957 +
                ((C153 - C152) * C33285 + (C155 - C154) * C33283 +
                 C745 * C33286 + C746 * C50330) *
                    C16958 +
                C33301 * C16959) *
                   C50170 * C1018 +
               (((C332 - C331) * C33285 + (C334 - C333) * C33283 +
                 C5987 * C33286 + C5988 * C50330) *
                    C16957 +
                ((C336 - C335) * C33285 + (C338 - C337) * C33283 +
                 C11498 * C33286 + C11499 * C50330) *
                    C16958 +
                ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
                 (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                    C16959) *
                   C50170 * C50206) *
                  C1021 +
              ((C33300 * C16957 +
                (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
                 C11300 * C50330) *
                    C16958 +
                ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
                 (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                    C16959) *
                   C50170 * C1018 +
               (C33746 * C16957 +
                (C629 * C33285 + C630 * C33283 + (C918 - C917) * C33286 +
                 (C920 - C919) * C50330) *
                    C16958 +
                ((C632 - C631) * C33285 + (C634 - C633) * C33283 +
                 (C117 * C892 - C50251 * C901) * C33286 +
                 (C117 * C902 - C50251 * C907) * C50330) *
                    C16959) *
                   C50170 * C50206) *
                  C1022) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C50251 * C126 - C117 * C119) * C33285 +
                (C50251 * C140 - C117 * C127) * C33283 +
                (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                   C16957 +
               ((C148 - C149) * C33285 + (C150 - C151) * C33283 +
                C5445 * C33286 + C5446 * C50330) *
                   C16958 +
               C33300 * C16959) *
                  C50170 * C1089 +
              (((C117 * C290 - C50251 * C300) * C33285 +
                (C117 * C301 - C50251 * C320) * C33283 +
                (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                   C16957 +
               ((C331 - C332) * C33285 + (C333 - C334) * C33283 +
                C5983 * C33286 + C5984 * C50330) *
                   C16958 +
               C33746 * C16959) *
                  C50170 * C1090 +
              (((C50251 * C308 - C117 * C294) * C33285 +
                (C50251 * C324 - C117 * C309) * C33283 +
                (C6885 - C6886) * C33286 + (C6887 - C6888) * C50330) *
                   C16957 +
               ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
                (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                   C16958 +
               ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
                (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                   C16959) *
                  C50170 * C1091 +
              (((C117 * C1094 - C50251 * C1098) * C33285 +
                (C117 * C1099 - C50251 * C1106) * C33283 +
                (C117 * C3200 - C50251 * C3203) * C33286 +
                (C117 * C3204 - C50251 * C3209) * C50330) *
                   C16957 +
               ((C117 * C1095 - C50251 * C1100) * C33285 +
                (C117 * C1101 - C50251 * C1107) * C33283 +
                (C117 * C3201 - C50251 * C3205) * C33286 +
                (C117 * C3206 - C50251 * C3210) * C50330) *
                   C16958 +
               ((C117 * C1096 - C50251 * C1102) * C33285 +
                (C117 * C1103 - C50251 * C1108) * C33283 +
                (C117 * C3202 - C50251 * C3207) * C33286 +
                (C117 * C3208 - C50251 * C3211) * C50330) *
                   C16959) *
                  C50170 * C1092) *
             C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C452 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C453 +
           ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
             (C5452 - C5451) * C50330) *
                C16957 +
            (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 +
             C5476 * C50330) *
                C16958 +
            (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
             (C5469 - C5470) * C50330) *
                C16959) *
               C454) *
              C1018 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C452 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C453 +
           ((C6393 * C33285 + C6394 * C33283 + (C6396 - C6395) * C33286 +
             (C6398 - C6397) * C50330) *
                C16957 +
            (C5985 * C33285 + C5986 * C33283 + (C5992 - C5991) * C33286 +
             (C5994 - C5993) * C50330) *
                C16958 +
            ((C5624 - C5623) * C33285 + (C5626 - C5625) * C33283 +
             (C117 * C5970 - C50251 * C5971) * C33286 +
             (C117 * C5972 - C50251 * C5973) * C50330) *
                C16959) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C33285 +
            (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C33283 +
            (C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
             C2289 * C3202 - C2284 * C3207) *
                C33286 +
            (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
             C2289 * C3208 - C2284 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
           (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
              C50109 * C50170 * C1089 +
          ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
            C2289 * C1094 - C2284 * C1098) *
               C33285 +
           (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
            C2289 * C1099 - C2284 * C1106) *
               C33283 +
           (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
           (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
              C50109 * C50170 * C1090 +
          ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
            C2284 * C2475 - C2289 * C2472) *
               C33285 +
           (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
            C2284 * C2481 - C2289 * C2476) *
               C33283 +
           (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
            C2284 * C4118 - C2289 * C4116) *
               C33286 +
           (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
            C2284 * C4122 - C2289 * C4119) *
               C50330) *
              C50109 * C50170 * C1091 +
          ((C2287 * C1094 - C2282 * C1098 + C2288 * C2472 - C2283 * C2475 +
            C2289 * C3468 - C2284 * C3470) *
               C33285 +
           (C2287 * C1099 - C2282 * C1106 + C2288 * C2476 - C2283 * C2481 +
            C2289 * C3471 - C2284 * C3474) *
               C33283 +
           (C2287 * C3200 - C2282 * C3203 + C2288 * C4116 - C2283 * C4118 +
            C2289 * C20849 - C2284 * C20850) *
               C33286 +
           (C2287 * C3204 - C2282 * C3209 + C2288 * C4119 - C2283 * C4122 +
            C2289 * C20851 - C2284 * C20852) *
               C50330) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C452 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C453 +
           ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
            (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
            (C2282 * C1843 - C2287 * C1839 + C2283 * C4518 - C2288 * C4514 +
             C2284 * C4519 - C2289 * C4515) *
                C33286 +
            (C2282 * C1851 - C2287 * C1844 + C2283 * C4526 - C2288 * C4520 +
             C2284 * C4527 - C2289 * C4521) *
                C50330) *
               C50109 * C454) *
              C1018 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C452 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C453 +
           ((C37149 - C37148 + C37151 - C37150 + C37153 - C37152) * C33285 +
            (C37155 - C37154 + C37157 - C37156 + C37159 - C37158) * C33283 +
            (C2287 * C4514 - C2282 * C4518 + C2288 * C4515 - C2283 * C4519 +
             C2289 * C21115 - C2284 * C21116) *
                C33286 +
            (C2287 * C4520 - C2282 * C4526 + C2288 * C4521 - C2283 * C4527 +
             C2289 * C21117 - C2284 * C21118) *
                C50330) *
               C50109 * C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C50170 * C1018 +
           ((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            (C6396 - C6395) * C38618 + (C6398 - C6397) * C38614) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C50170 * C1018 +
           ((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
            C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
            (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
               C50109 * C50170 * C50206) *
              C1021 +
          ((C168 * C38615 + C169 * C38611 + C5773 * C38616 + C5774 * C38612 +
            C5775 * C38617 + C5776 * C38613 + (C5467 - C5468) * C38618 +
            (C5469 - C5470) * C38614) *
               C50109 * C50170 * C1018 +
           (C627 * C38615 + C628 * C38611 + C11142 * C38616 + C11143 * C38612 +
            (C5624 - C5623) * C38617 + (C5626 - C5625) * C38613 +
            (C117 * C5970 - C50251 * C5971) * C38618 +
            (C117 * C5972 - C50251 * C5973) * C38614) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C50251 * C126 - C117 * C119) * C38615 +
           (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
           (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
           C38816 * C38618 + C38817 * C38614) *
              C50109 * C50170 * C1089 +
          ((C117 * C290 - C50251 * C300) * C38615 +
           (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
           (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
           (C6396 - C6395) * C38618 + (C6398 - C6397) * C38614) *
              C50109 * C50170 * C1090 +
          ((C50251 * C308 - C117 * C294) * C38615 +
           (C50251 * C324 - C117 * C309) * C38611 + (C6885 - C6886) * C38616 +
           (C6887 - C6888) * C38612 + (C6889 - C6890) * C38617 +
           (C6891 - C6892) * C38613 + (C50251 * C4519 - C117 * C4515) * C38618 +
           (C50251 * C4527 - C117 * C4521) * C38614) *
              C50109 * C50170 * C1091 +
          ((C117 * C1094 - C50251 * C1098) * C38615 +
           (C117 * C1099 - C50251 * C1106) * C38611 +
           (C117 * C3200 - C50251 * C3203) * C38616 +
           (C117 * C3204 - C50251 * C3209) * C38612 +
           (C117 * C3622 - C50251 * C3624) * C38617 +
           (C117 * C3625 - C50251 * C3628) * C38613 +
           (C117 * C21115 - C50251 * C21116) * C38618 +
           (C117 * C21117 - C50251 * C21118) * C38614) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C452 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
            (C7296 - C7295) * C38614) *
               C50109 * C453 +
           (C5471 * C38615 + C5472 * C38611 + C38816 * C38616 +
            C38817 * C38612 + (C7293 - C7294) * C38617 +
            (C7295 - C7296) * C38613 +
            (C50251 * C7284 - C117 * C7282) * C38618 +
            (C50251 * C7288 - C117 * C7285) * C38614) *
               C50109 * C454) *
              C1018 +
          (((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            C39406 * C38618 + C39407 * C38614) *
               C50109 * C452 +
           ((C5976 - C5975) * C38615 + (C5978 - C5977) * C38611 +
            (C5980 - C5979) * C38616 + (C5982 - C5981) * C38612 +
            (C6395 - C6396) * C38617 + (C6397 - C6398) * C38613 +
            (C39408 - C39409) * C38618 + (C39410 - C39411) * C38614) *
               C50109 * C453 +
           (C6393 * C38615 + C6394 * C38611 + C39406 * C38616 +
            C39407 * C38612 + (C39409 - C39408) * C38617 +
            (C39411 - C39410) * C38613 +
            (C117 * C23689 - C50251 * C23690) * C38618 +
            (C117 * C23691 - C50251 * C23692) * C38614) *
               C50109 * C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C33285 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C33283 +
             (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
             (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
                C50109 * C50396 +
            ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
             (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
             (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
             (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
                C50109 * C50234) *
               C1018 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C33285 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C33283 +
             (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
             (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
                C50109 * C50396 +
            ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
             (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
             (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
             (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
                C50109 * C50396 +
            ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
             (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
                C50109 * C50234) *
               C1018 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
             (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
                C50109 * C50396 +
            ((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C33285 +
             (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C33283 +
             (C2287 * C1209 - C2282 * C1214 + C2288 * C2655 - C2283 * C2659 +
              C2289 * C3623 - C2284 * C3626) *
                 C33286 +
             (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 - C2283 * C2664 +
              C2289 * C3627 - C2284 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C33285 +
              (C50251 * C140 - C117 * C127) * C33283 +
              (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                 C16957 +
             ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
              C5446 * C50330) *
                 C16958 +
             C33300 * C16959) *
                C50396 +
            (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
              (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                 C16957 +
             (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
              C5456 * C50330) *
                 C16958 +
             C33899 * C16959) *
                C50234) *
               C1018 +
           ((((C117 * C290 - C50251 * C300) * C33285 +
              (C117 * C301 - C50251 * C320) * C33283 +
              (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                 C16957 +
             ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
              C5984 * C50330) *
                 C16958 +
             C33746 * C16959) *
                C50396 +
            (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
              (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                 C16957 +
             (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
              C5990 * C50330) *
                 C16958 +
             (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
              (C5625 - C5626) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
              C5454 * C50330) *
                 C16957 +
             ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
              C746 * C50330) *
                 C16958 +
             C33301 * C16959) *
                C50396 +
            ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
              C5448 * C50330) *
                 C16957 +
             (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
              C5776 * C50330) *
                 C16958 +
             (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
              (C518 - C519) * C50330) *
                 C16959) *
                C50234) *
               C1018 +
           ((((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
              C5988 * C50330) *
                 C16957 +
             ((C336 - C335) * C33285 + (C338 - C337) * C33283 +
              C11498 * C33286 + C11499 * C50330) *
                 C16958 +
             ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
              (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                 C16959) *
                C50396 +
            ((C5983 * C33285 + C5984 * C33283 + C5985 * C33286 +
              C5986 * C50330) *
                 C16957 +
             (C11142 * C33285 + C11143 * C33283 + (C5624 - C5623) * C33286 +
              (C5626 - C5625) * C50330) *
                 C16958 +
             ((C918 - C917) * C33285 + (C920 - C919) * C33283 +
              (C117 * C1211 - C50251 * C1218) * C33286 +
              (C117 * C1219 - C50251 * C1223) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C38615 +
             (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
             (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
             C38816 * C38618 + C38817 * C38614) *
                C50109 * C50396 +
            ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
             (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
             C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
             (C7296 - C7295) * C38614) *
                C50109 * C50234) *
               C1018 +
           (((C117 * C290 - C50251 * C300) * C38615 +
             (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
             (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
             C39406 * C38618 + C39407 * C38614) *
                C50109 * C50396 +
            ((C5976 - C5975) * C38615 + (C5978 - C5977) * C38611 +
             (C5980 - C5979) * C38616 + (C5982 - C5981) * C38612 +
             (C6395 - C6396) * C38617 + (C6397 - C6398) * C38613 +
             (C39408 - C39409) * C38618 + (C39410 - C39411) * C38614) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
             C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
             C5474 * C38614) *
                C50109 * C50396 +
            (C5445 * C38615 + C5446 * C38611 + C5447 * C38616 + C5448 * C38612 +
             C5475 * C38617 + C5476 * C38613 + (C5461 - C5462) * C38618 +
             (C5463 - C5464) * C38614) *
                C50109 * C50234) *
               C1018 +
           (((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
             C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
             (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
                C50109 * C50396 +
            (C5983 * C38615 + C5984 * C38611 + C5985 * C38616 + C5986 * C38612 +
             (C5992 - C5991) * C38617 + (C5994 - C5993) * C38613 +
             (C117 * C6385 - C50251 * C6388) * C38618 +
             (C117 * C6389 - C50251 * C6391) * C38614) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C33285 +
            (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
            (C5439 - C5440) * C50330) *
               C16957 +
           ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
            C5446 * C50330) *
               C16958 +
           C33300 * C16959) *
              C50170 * C1089 +
          (((C117 * C290 - C50251 * C300) * C33285 +
            (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
            (C5977 - C5978) * C50330) *
               C16957 +
           ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
            C5984 * C50330) *
               C16958 +
           C33746 * C16959) *
              C50170 * C1090 +
          (((C50251 * C308 - C117 * C294) * C33285 +
            (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
            (C6887 - C6888) * C50330) *
               C16957 +
           ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
            (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
               C16958 +
           ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
            (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
               C16959) *
              C50170 * C1091 +
          (((C117 * C1094 - C50251 * C1098) * C33285 +
            (C117 * C1099 - C50251 * C1106) * C33283 +
            (C117 * C3200 - C50251 * C3203) * C33286 +
            (C117 * C3204 - C50251 * C3209) * C50330) *
               C16957 +
           ((C117 * C1095 - C50251 * C1100) * C33285 +
            (C117 * C1101 - C50251 * C1107) * C33283 +
            (C117 * C3201 - C50251 * C3205) * C33286 +
            (C117 * C3206 - C50251 * C3210) * C50330) *
               C16958 +
           ((C117 * C1096 - C50251 * C1102) * C33285 +
            (C117 * C1103 - C50251 * C1108) * C33283 +
            (C117 * C3202 - C50251 * C3207) * C33286 +
            (C117 * C3208 - C50251 * C3211) * C50330) *
               C16959) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C1018 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50170 * C50206) *
              C1020 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C1018 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C50206) *
              C1021 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C50170 * C1018 +
           (C33746 * C16957 +
            (C629 * C33285 + C630 * C33283 + (C918 - C917) * C33286 +
             (C920 - C919) * C50330) *
                C16958 +
            ((C632 - C631) * C33285 + (C634 - C633) * C33283 +
             (C117 * C892 - C50251 * C901) * C33286 +
             (C117 * C902 - C50251 * C907) * C50330) *
                C16959) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C33285 +
            (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C33283 +
            (C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
             C2289 * C3202 - C2284 * C3207) *
                C33286 +
            (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
             C2289 * C3208 - C2284 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
           (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
              C50109 * C50170 * C1089 +
          ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
            C2289 * C1094 - C2284 * C1098) *
               C33285 +
           (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
            C2289 * C1099 - C2284 * C1106) *
               C33283 +
           (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
           (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
              C50109 * C50170 * C1090 +
          ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
            C2284 * C2475 - C2289 * C2472) *
               C33285 +
           (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
            C2284 * C2481 - C2289 * C2476) *
               C33283 +
           (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
            C2284 * C4118 - C2289 * C4116) *
               C33286 +
           (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
            C2284 * C4122 - C2289 * C4119) *
               C50330) *
              C50109 * C50170 * C1091 +
          ((C2287 * C1094 - C2282 * C1098 + C2288 * C2472 - C2283 * C2475 +
            C2289 * C3468 - C2284 * C3470) *
               C33285 +
           (C2287 * C1099 - C2282 * C1106 + C2288 * C2476 - C2283 * C2481 +
            C2289 * C3471 - C2284 * C3474) *
               C33283 +
           (C2287 * C3200 - C2282 * C3203 + C2288 * C4116 - C2283 * C4118 +
            C2289 * C20849 - C2284 * C20850) *
               C33286 +
           (C2287 * C3204 - C2282 * C3209 + C2288 * C4119 - C2283 * C4122 +
            C2289 * C20851 - C2284 * C20852) *
               C50330) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C50170 * C1018 +
           ((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            (C6396 - C6395) * C38618 + (C6398 - C6397) * C38614) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C50170 * C1018 +
           ((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
            C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
            (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
               C50109 * C50170 * C50206) *
              C1021 +
          ((C168 * C38615 + C169 * C38611 + C5773 * C38616 + C5774 * C38612 +
            C5775 * C38617 + C5776 * C38613 + (C5467 - C5468) * C38618 +
            (C5469 - C5470) * C38614) *
               C50109 * C50170 * C1018 +
           (C627 * C38615 + C628 * C38611 + C11142 * C38616 + C11143 * C38612 +
            (C5624 - C5623) * C38617 + (C5626 - C5625) * C38613 +
            (C117 * C5970 - C50251 * C5971) * C38618 +
            (C117 * C5972 - C50251 * C5973) * C38614) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C50251 * C126 - C117 * C119) * C38615 +
           (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
           (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
           C38816 * C38618 + C38817 * C38614) *
              C50109 * C50170 * C1089 +
          ((C117 * C290 - C50251 * C300) * C38615 +
           (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
           (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
           (C6396 - C6395) * C38618 + (C6398 - C6397) * C38614) *
              C50109 * C50170 * C1090 +
          ((C50251 * C308 - C117 * C294) * C38615 +
           (C50251 * C324 - C117 * C309) * C38611 + (C6885 - C6886) * C38616 +
           (C6887 - C6888) * C38612 + (C6889 - C6890) * C38617 +
           (C6891 - C6892) * C38613 + (C50251 * C4519 - C117 * C4515) * C38618 +
           (C50251 * C4527 - C117 * C4521) * C38614) *
              C50109 * C50170 * C1091 +
          ((C117 * C1094 - C50251 * C1098) * C38615 +
           (C117 * C1099 - C50251 * C1106) * C38611 +
           (C117 * C3200 - C50251 * C3203) * C38616 +
           (C117 * C3204 - C50251 * C3209) * C38612 +
           (C117 * C3622 - C50251 * C3624) * C38617 +
           (C117 * C3625 - C50251 * C3628) * C38613 +
           (C117 * C21115 - C50251 * C21116) * C38618 +
           (C117 * C21117 - C50251 * C21118) * C38614) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C33285 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C33283 +
             (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
             (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
                C50109 * C1669 +
            ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
             (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
             (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
             (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C33285 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C33283 +
             (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
             (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
                C50109 * C1669 +
            ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
             (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
             (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
             (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
                C50109 * C1669 +
            ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
             (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
             (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
                C50109 * C1669 +
            ((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C33285 +
             (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C33283 +
             (C2287 * C1209 - C2282 * C1214 + C2288 * C2655 - C2283 * C2659 +
              C2289 * C3623 - C2284 * C3626) *
                 C33286 +
             (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 - C2283 * C2664 +
              C2289 * C3627 - C2284 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C33285 +
              (C50251 * C140 - C117 * C127) * C33283 +
              (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                 C16957 +
             ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
              C5446 * C50330) *
                 C16958 +
             C33300 * C16959) *
                C1669 +
            (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
              (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                 C16957 +
             (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
              C5456 * C50330) *
                 C16958 +
             C33899 * C16959) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C33285 +
              (C117 * C301 - C50251 * C320) * C33283 +
              (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                 C16957 +
             ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
              C5984 * C50330) *
                 C16958 +
             C33746 * C16959) *
                C1669 +
            (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
              (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                 C16957 +
             (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
              C5990 * C50330) *
                 C16958 +
             (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
              (C5625 - C5626) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
              C5454 * C50330) *
                 C16957 +
             ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
              C746 * C50330) *
                 C16958 +
             C33301 * C16959) *
                C1669 +
            ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
              C5448 * C50330) *
                 C16957 +
             (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
              C5776 * C50330) *
                 C16958 +
             (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
              (C518 - C519) * C50330) *
                 C16959) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
              C5988 * C50330) *
                 C16957 +
             ((C336 - C335) * C33285 + (C338 - C337) * C33283 +
              C11498 * C33286 + C11499 * C50330) *
                 C16958 +
             ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
              (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                 C16959) *
                C1669 +
            ((C5983 * C33285 + C5984 * C33283 + C5985 * C33286 +
              C5986 * C50330) *
                 C16957 +
             (C11142 * C33285 + C11143 * C33283 + (C5624 - C5623) * C33286 +
              (C5626 - C5625) * C50330) *
                 C16958 +
             ((C918 - C917) * C33285 + (C920 - C919) * C33283 +
              (C117 * C1211 - C50251 * C1218) * C33286 +
              (C117 * C1219 - C50251 * C1223) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C38615 +
             (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
             (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
             C38816 * C38618 + C38817 * C38614) *
                C50109 * C1669 +
            ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
             (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
             C7291 * C38617 + C7292 * C38613 + C40008 * C38618 +
             C40009 * C38614) *
                C50109 * C50234) *
               C50395 +
           (((C117 * C290 - C50251 * C300) * C38615 +
             (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
             (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
             C39406 * C38618 + C39407 * C38614) *
                C50109 * C1669 +
            ((C5976 - C5975) * C38615 + (C5978 - C5977) * C38611 +
             (C5980 - C5979) * C38616 + (C5982 - C5981) * C38612 +
             (C6395 - C6396) * C38617 + (C6397 - C6398) * C38613 +
             (C39408 - C39409) * C38618 + (C39410 - C39411) * C38614) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
             C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
             C5474 * C38614) *
                C50109 * C1669 +
            (C5445 * C38615 + C5446 * C38611 + C5447 * C38616 + C5448 * C38612 +
             C5475 * C38617 + C5476 * C38613 + (C5461 - C5462) * C38618 +
             (C5463 - C5464) * C38614) *
                C50109 * C50234) *
               C50395 +
           (((C332 - C331) * C38615 + (C334 - C333) * C38611 + C5987 * C38616 +
             C5988 * C38612 + C5989 * C38617 + C5990 * C38613 +
             (C5991 - C5992) * C38618 + (C5993 - C5994) * C38614) *
                C50109 * C1669 +
            (C5983 * C38615 + C5984 * C38611 + C5985 * C38616 + C5986 * C38612 +
             (C5992 - C5991) * C38617 + (C5994 - C5993) * C38613 +
             (C117 * C6385 - C50251 * C6388) * C38618 +
             (C117 * C6389 - C50251 * C6391) * C38614) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50442 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50443 +
           ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
            (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
            (C38048 - C38049 + C38050 - C38051 + C38052 - C38053) * C33286 +
            (C38054 - C38055 + C38056 - C38057 + C38058 - C38059) * C50330) *
               C50109 * C2085) *
              C50395 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50442 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C50443 +
           ((C37149 - C37148 + C37151 - C37150 + C37153 - C37152) * C33285 +
            (C37155 - C37154 + C37157 - C37156 + C37159 - C37158) * C33283 +
            (C2287 * C4514 - C2282 * C4518 + C2288 * C4515 - C2283 * C4519 +
             C2289 * C21115 - C2284 * C21116) *
                C33286 +
            (C2287 * C4520 - C2282 * C4526 + C2288 * C4521 - C2283 * C4527 +
             C2289 * C21117 - C2284 * C21118) *
                C50330) *
               C50109 * C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50442 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50443 +
           ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
             (C5452 - C5451) * C50330) *
                C16957 +
            (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 +
             C5476 * C50330) *
                C16958 +
            (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
             (C5469 - C5470) * C50330) *
                C16959) *
               C2085) *
              C50395 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50442 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C50443 +
           ((C6393 * C33285 + C6394 * C33283 + (C6396 - C6395) * C33286 +
             (C6398 - C6397) * C50330) *
                C16957 +
            (C5985 * C33285 + C5986 * C33283 + (C5992 - C5991) * C33286 +
             (C5994 - C5993) * C50330) *
                C16958 +
            ((C5624 - C5623) * C33285 + (C5626 - C5625) * C33283 +
             (C117 * C5970 - C50251 * C5971) * C33286 +
             (C117 * C5972 - C50251 * C5973) * C50330) *
                C16959) *
               C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C50442 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + C40008 * C38618 +
            C40009 * C38614) *
               C50109 * C50443 +
           (C5471 * C38615 + C5472 * C38611 + C38816 * C38616 +
            C38817 * C38612 + (C7293 - C7294) * C38617 +
            (C7295 - C7296) * C38613 + (C40010 - C40011) * C38618 +
            (C40012 - C40013) * C38614) *
               C50109 * C2085) *
              C50395 +
          (((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            C39406 * C38618 + C39407 * C38614) *
               C50109 * C50442 +
           ((C5976 - C5975) * C38615 + (C5978 - C5977) * C38611 +
            (C5980 - C5979) * C38616 + (C5982 - C5981) * C38612 +
            (C6395 - C6396) * C38617 + (C6397 - C6398) * C38613 +
            (C39408 - C39409) * C38618 + (C39410 - C39411) * C38614) *
               C50109 * C50443 +
           (C6393 * C38615 + C6394 * C38611 + C39406 * C38616 +
            C39407 * C38612 + (C39409 - C39408) * C38617 +
            (C39411 - C39410) * C38613 +
            (C117 * C23689 - C50251 * C23690) * C38618 +
            (C117 * C23691 - C50251 * C23692) * C38614) *
               C50109 * C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C50251 * C126 - C117 * C119) * C33285 +
                 (C50251 * C140 - C117 * C127) * C33283 +
                 (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                    C16957 +
                ((C148 - C149) * C33285 + (C150 - C151) * C33283 +
                 C5445 * C33286 + C5446 * C50330) *
                    C16958 +
                C33300 * C16959) *
                   C1669 +
               (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
                 (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                    C16957 +
                (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
                 C5456 * C50330) *
                    C16958 +
                C33899 * C16959) *
                   C50234) *
                  C50154 * C1020 +
              ((((C149 - C148) * C33285 + (C151 - C150) * C33283 +
                 C5453 * C33286 + C5454 * C50330) *
                    C16957 +
                ((C153 - C152) * C33285 + (C155 - C154) * C33283 +
                 C745 * C33286 + C746 * C50330) *
                    C16958 +
                C33301 * C16959) *
                   C1669 +
               ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
                 C5448 * C50330) *
                    C16957 +
                (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
                 C5776 * C50330) *
                    C16958 +
                (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
                 (C518 - C519) * C50330) *
                    C16959) *
                   C50234) *
                  C50154 * C1021 +
              ((C33300 * C16957 +
                (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
                 C11300 * C50330) *
                    C16958 +
                ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
                 (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                    C16959) *
                   C1669 +
               (C33899 * C16957 +
                (C747 * C33285 + C748 * C33283 + (C517 - C516) * C33286 +
                 (C519 - C518) * C50330) *
                    C16958 +
                ((C750 - C749) * C33285 + (C752 - C751) * C33283 +
                 (C117 * C464 - C50251 * C483) * C33286 +
                 (C117 * C484 - C50251 * C494) * C50330) *
                    C16959) *
                   C50234) *
                  C50154 * C1022) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C50251 * C126 - C117 * C119) * C33285 +
                 (C50251 * C140 - C117 * C127) * C33283 +
                 (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                    C16957 +
                ((C148 - C149) * C33285 + (C150 - C151) * C33283 +
                 C5445 * C33286 + C5446 * C50330) *
                    C16958 +
                C33300 * C16959) *
                   C1669 +
               (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
                 (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                    C16957 +
                (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
                 C5456 * C50330) *
                    C16958 +
                C33899 * C16959) *
                   C50234) *
                  C285 +
              ((((C117 * C290 - C50251 * C300) * C33285 +
                 (C117 * C301 - C50251 * C320) * C33283 +
                 (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                    C16957 +
                ((C331 - C332) * C33285 + (C333 - C334) * C33283 +
                 C5983 * C33286 + C5984 * C50330) *
                    C16958 +
                C33746 * C16959) *
                   C1669 +
               (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
                 (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                    C16957 +
                (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
                 C5990 * C50330) *
                    C16958 +
                (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
                 (C5625 - C5626) * C50330) *
                    C16959) *
                   C50234) *
                  C286 +
              ((((C50251 * C308 - C117 * C294) * C33285 +
                 (C50251 * C324 - C117 * C309) * C33283 +
                 (C6885 - C6886) * C33286 + (C6887 - C6888) * C50330) *
                    C16957 +
                ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
                 (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                    C16958 +
                ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
                 (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                    C16959) *
                   C1669 +
               (((C6886 - C6885) * C33285 + (C6888 - C6887) * C33283 +
                 (C6890 - C6889) * C33286 + (C6892 - C6891) * C50330) *
                    C16957 +
                ((C5272 - C5271) * C33285 + (C5274 - C5273) * C33283 +
                 (C5276 - C5275) * C33286 + (C5278 - C5277) * C50330) *
                    C16958 +
                ((C10845 - C10844) * C33285 + (C10847 - C10846) * C33283 +
                 (C117 * C2656 - C50251 * C2661) * C33286 +
                 (C117 * C2662 - C50251 * C2665) * C50330) *
                    C16959) *
                   C50234) *
                  C287) *
             C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C33285 +
            (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
            (C5439 - C5440) * C50330) *
               C16957 +
           ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
            C5446 * C50330) *
               C16958 +
           C33300 * C16959) *
              C1835 +
          (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
            (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
               C16957 +
           (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 + C5456 * C50330) *
               C16958 +
           C33899 * C16959) *
              C1836 +
          ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
            (C5452 - C5451) * C50330) *
               C16957 +
           (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 + C5476 * C50330) *
               C16958 +
           (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
            (C5469 - C5470) * C50330) *
               C16959) *
              C1837 +
          ((C7291 * C33285 + C7292 * C33283 + (C7294 - C7293) * C33286 +
            (C7296 - C7295) * C50330) *
               C16957 +
           (C5473 * C33285 + C5474 * C33283 + (C5462 - C5461) * C33286 +
            (C5464 - C5463) * C50330) *
               C16958 +
           ((C5468 - C5467) * C33285 + (C5470 - C5469) * C33283 +
            (C117 * C5426 - C50251 * C5431) * C33286 +
            (C117 * C5432 - C50251 * C5435) * C50330) *
               C16959) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C1669 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C1669 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C1669 +
           ((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C33285 +
            (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C33283 +
            (C2287 * C461 - C2282 * C477 + C2288 * C1210 - C2283 * C1216 +
             C2289 * C2656 - C2284 * C2661) *
                C33286 +
            (C2287 * C478 - C2282 * C491 + C2288 * C1217 - C2283 * C1222 +
             C2289 * C2662 - C2284 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C1669 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C285 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C1669 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C50234) *
              C286 +
          (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C37646 - C37647 + C37648 - C37649 + C37650 - C37651) * C33286 +
            (C37652 - C37653 + C37654 - C37655 + C37656 - C37657) * C50330) *
               C50109 * C1669 +
           ((C37647 - C37646 + C37649 - C37648 + C37651 - C37650) * C33285 +
            (C37653 - C37652 + C37655 - C37654 + C37657 - C37656) * C33283 +
            (C2287 * C2654 - C2282 * C2657 + C2288 * C3622 - C2283 * C3624 +
             C2289 * C20519 - C2284 * C20520) *
                C33286 +
            (C2287 * C2658 - C2282 * C2663 + C2288 * C3625 - C2283 * C3628 +
             C2289 * C20521 - C2284 * C20522) *
                C50330) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
           (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
              C50109 * C1835 +
          ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
           (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
           (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
           (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
              C50109 * C1836 +
          ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
           (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
           (C38048 - C38049 + C38050 - C38051 + C38052 - C38053) * C33286 +
           (C38054 - C38055 + C38056 - C38057 + C38058 - C38059) * C50330) *
              C50109 * C1837 +
          ((C38049 - C38048 + C38051 - C38050 + C38053 - C38052) * C33285 +
           (C38055 - C38054 + C38057 - C38056 + C38059 - C38058) * C33283 +
           (C2287 * C5424 - C2282 * C5427 + C2288 * C6384 - C2283 * C6386 +
            C2289 * C22779 - C2284 * C22780) *
               C33286 +
           (C2287 * C5428 - C2282 * C5433 + C2288 * C6387 - C2283 * C6390 +
            C2289 * C22781 - C2284 * C22782) *
               C50330) *
              C50109 * C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C1669 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
            (C7296 - C7295) * C38614) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C1669 +
           (C5445 * C38615 + C5446 * C38611 + C5447 * C38616 + C5448 * C38612 +
            C5475 * C38617 + C5476 * C38613 + (C5461 - C5462) * C38618 +
            (C5463 - C5464) * C38614) *
               C50109 * C50234) *
              C50154 * C1021 +
          ((C168 * C38615 + C169 * C38611 + C5773 * C38616 + C5774 * C38612 +
            C5775 * C38617 + C5776 * C38613 + (C5467 - C5468) * C38618 +
            (C5469 - C5470) * C38614) *
               C50109 * C1669 +
           (C745 * C38615 + C746 * C38611 + C5465 * C38616 + C5466 * C38612 +
            (C5468 - C5467) * C38617 + (C5470 - C5469) * C38613 +
            (C117 * C5426 - C50251 * C5431) * C38618 +
            (C117 * C5432 - C50251 * C5435) * C38614) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C1669 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
            (C7296 - C7295) * C38614) *
               C50109 * C50234) *
              C285 +
          (((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            C39406 * C38618 + C39407 * C38614) *
               C50109 * C1669 +
           ((C5976 - C5975) * C38615 + (C5978 - C5977) * C38611 +
            (C5980 - C5979) * C38616 + (C5982 - C5981) * C38612 +
            (C6395 - C6396) * C38617 + (C6397 - C6398) * C38613 +
            (C39408 - C39409) * C38618 + (C39410 - C39411) * C38614) *
               C50109 * C50234) *
              C286 +
          (((C50251 * C308 - C117 * C294) * C38615 +
            (C50251 * C324 - C117 * C309) * C38611 + (C6885 - C6886) * C38616 +
            (C6887 - C6888) * C38612 + (C6889 - C6890) * C38617 +
            (C6891 - C6892) * C38613 + (C39738 - C39739) * C38618 +
            (C39740 - C39741) * C38614) *
               C50109 * C1669 +
           ((C6886 - C6885) * C38615 + (C6888 - C6887) * C38611 +
            (C6890 - C6889) * C38616 + (C6892 - C6891) * C38612 +
            (C39739 - C39738) * C38617 + (C39741 - C39740) * C38613 +
            (C117 * C22779 - C50251 * C22780) * C38618 +
            (C117 * C22781 - C50251 * C22782) * C38614) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C50251 * C126 - C117 * C119) * C38615 +
           (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
           (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
           C38816 * C38618 + C38817 * C38614) *
              C50109 * C1835 +
          ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
           (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
           C7291 * C38617 + C7292 * C38613 + C40008 * C38618 +
           C40009 * C38614) *
              C50109 * C1836 +
          (C5471 * C38615 + C5472 * C38611 + C38816 * C38616 + C38817 * C38612 +
           (C7293 - C7294) * C38617 + (C7295 - C7296) * C38613 +
           (C40010 - C40011) * C38618 + (C40012 - C40013) * C38614) *
              C50109 * C1837 +
          (C7291 * C38615 + C7292 * C38611 + C40008 * C38616 + C40009 * C38612 +
           (C40011 - C40010) * C38617 + (C40013 - C40012) * C38613 +
           (C117 * C40003 - C50251 * C40004) * C38618 +
           (C117 * C40005 - C50251 * C40006) * C38614) *
              C50109 * C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50442 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50443 +
           ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
            (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
            (C38048 - C38049 + C38050 - C38051 + C38052 - C38053) * C33286 +
            (C38054 - C38055 + C38056 - C38057 + C38058 - C38059) * C50330) *
               C50109 * C2085) *
              C50154 * C50387 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50442 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C50443 +
           ((C2680 - C2679 + C2682 - C2681 + C2684 - C2683) * C33285 +
            (C2686 - C2685 + C2688 - C2687 + C2690 - C2689) * C33283 +
            (C2287 * C1840 - C2282 * C1845 + C2288 * C4516 - C2283 * C4522 +
             C2289 * C4517 - C2284 * C4523) *
                C33286 +
            (C2287 * C1846 - C2282 * C1852 + C2288 * C4524 - C2283 * C4528 +
             C2289 * C4525 - C2284 * C4529) *
                C50330) *
               C50109 * C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50442 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50443 +
           ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
             (C5452 - C5451) * C50330) *
                C16957 +
            (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 +
             C5476 * C50330) *
                C16958 +
            (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
             (C5469 - C5470) * C50330) *
                C16959) *
               C2085) *
              C50154 * C50387 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50442 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C50443 +
           ((C5455 * C33285 + C5456 * C33283 + C5473 * C33286 +
             C5474 * C50330) *
                C16957 +
            (C5465 * C33285 + C5466 * C33283 + (C5468 - C5467) * C33286 +
             (C5470 - C5469) * C50330) *
                C16958 +
            ((C517 - C516) * C33285 + (C519 - C518) * C33283 +
             (C117 * C1842 - C50251 * C1849) * C33286 +
             (C117 * C1850 - C50251 * C1854) * C50330) *
                C16959) *
               C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C50442 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + C40008 * C38618 +
            C40009 * C38614) *
               C50109 * C50443 +
           (C5471 * C38615 + C5472 * C38611 + C38816 * C38616 +
            C38817 * C38612 + (C7293 - C7294) * C38617 +
            (C7295 - C7296) * C38613 + (C40010 - C40011) * C38618 +
            (C40012 - C40013) * C38614) *
               C50109 * C2085) *
              C50154 * C50387 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C50442 +
           (C5445 * C38615 + C5446 * C38611 + C5447 * C38616 + C5448 * C38612 +
            C5475 * C38617 + C5476 * C38613 + (C5461 - C5462) * C38618 +
            (C5463 - C5464) * C38614) *
               C50109 * C50443 +
           (C5455 * C38615 + C5456 * C38611 + C5473 * C38616 + C5474 * C38612 +
            (C5462 - C5461) * C38617 + (C5464 - C5463) * C38613 +
            (C117 * C7283 - C50251 * C7286) * C38618 +
            (C117 * C7287 - C50251 * C7289) * C38614) *
               C50109 * C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C1669 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C1669 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C1669 +
           (((C6886 - C6885) * C33285 + (C6888 - C6887) * C33283 +
             (C6890 - C6889) * C33286 + (C6892 - C6891) * C50330) *
                C16957 +
            ((C5272 - C5271) * C33285 + (C5274 - C5273) * C33283 +
             (C5276 - C5275) * C33286 + (C5278 - C5277) * C50330) *
                C16958 +
            ((C10845 - C10844) * C33285 + (C10847 - C10846) * C33283 +
             (C117 * C2656 - C50251 * C2661) * C33286 +
             (C117 * C2662 - C50251 * C2665) * C50330) *
                C16959) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C1669 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C1669 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C50234) *
              C50154 * C1021 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C1669 +
           (C33899 * C16957 +
            (C747 * C33285 + C748 * C33283 + (C517 - C516) * C33286 +
             (C519 - C518) * C50330) *
                C16958 +
            ((C750 - C749) * C33285 + (C752 - C751) * C33283 +
             (C117 * C464 - C50251 * C483) * C33286 +
             (C117 * C484 - C50251 * C494) * C50330) *
                C16959) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C1669 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C1669 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C1669 +
           ((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C33285 +
            (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C33283 +
            (C2287 * C461 - C2282 * C477 + C2288 * C1210 - C2283 * C1216 +
             C2289 * C2656 - C2284 * C2661) *
                C33286 +
            (C2287 * C478 - C2282 * C491 + C2288 * C1217 - C2283 * C1222 +
             C2289 * C2662 - C2284 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C1669 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C285 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C1669 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C50234) *
              C286 +
          (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C37646 - C37647 + C37648 - C37649 + C37650 - C37651) * C33286 +
            (C37652 - C37653 + C37654 - C37655 + C37656 - C37657) * C50330) *
               C50109 * C1669 +
           ((C37647 - C37646 + C37649 - C37648 + C37651 - C37650) * C33285 +
            (C37653 - C37652 + C37655 - C37654 + C37657 - C37656) * C33283 +
            (C2287 * C2654 - C2282 * C2657 + C2288 * C3622 - C2283 * C3624 +
             C2289 * C20519 - C2284 * C20520) *
                C33286 +
            (C2287 * C2658 - C2282 * C2663 + C2288 * C3625 - C2283 * C3628 +
             C2289 * C20521 - C2284 * C20522) *
                C50330) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C1669 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
            (C7296 - C7295) * C38614) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C149 - C148) * C38615 + (C151 - C150) * C38611 + C5453 * C38616 +
            C5454 * C38612 + C5455 * C38617 + C5456 * C38613 + C5473 * C38618 +
            C5474 * C38614) *
               C50109 * C1669 +
           (C5445 * C38615 + C5446 * C38611 + C5447 * C38616 + C5448 * C38612 +
            C5475 * C38617 + C5476 * C38613 + (C5461 - C5462) * C38618 +
            (C5463 - C5464) * C38614) *
               C50109 * C50234) *
              C50154 * C1021 +
          ((C168 * C38615 + C169 * C38611 + C5773 * C38616 + C5774 * C38612 +
            C5775 * C38617 + C5776 * C38613 + (C5467 - C5468) * C38618 +
            (C5469 - C5470) * C38614) *
               C50109 * C1669 +
           (C745 * C38615 + C746 * C38611 + C5465 * C38616 + C5466 * C38612 +
            (C5468 - C5467) * C38617 + (C5470 - C5469) * C38613 +
            (C117 * C5426 - C50251 * C5431) * C38618 +
            (C117 * C5432 - C50251 * C5435) * C38614) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C38615 +
            (C50251 * C140 - C117 * C127) * C38611 + (C5437 - C5438) * C38616 +
            (C5439 - C5440) * C38612 + C5471 * C38617 + C5472 * C38613 +
            C38816 * C38618 + C38817 * C38614) *
               C50109 * C1669 +
           ((C5438 - C5437) * C38615 + (C5440 - C5439) * C38611 +
            (C5442 - C5441) * C38616 + (C5444 - C5443) * C38612 +
            C7291 * C38617 + C7292 * C38613 + (C7294 - C7293) * C38618 +
            (C7296 - C7295) * C38614) *
               C50109 * C50234) *
              C285 +
          (((C117 * C290 - C50251 * C300) * C38615 +
            (C117 * C301 - C50251 * C320) * C38611 + (C5975 - C5976) * C38616 +
            (C5977 - C5978) * C38612 + C6393 * C38617 + C6394 * C38613 +
            C39406 * C38618 + C39407 * C38614) *
               C50109 * C1669 +
           ((C5976 - C5975) * C38615 + (C5978 - C5977) * C38611 +
            (C5980 - C5979) * C38616 + (C5982 - C5981) * C38612 +
            (C6395 - C6396) * C38617 + (C6397 - C6398) * C38613 +
            (C39408 - C39409) * C38618 + (C39410 - C39411) * C38614) *
               C50109 * C50234) *
              C286 +
          (((C50251 * C308 - C117 * C294) * C38615 +
            (C50251 * C324 - C117 * C309) * C38611 + (C6885 - C6886) * C38616 +
            (C6887 - C6888) * C38612 + (C6889 - C6890) * C38617 +
            (C6891 - C6892) * C38613 + (C39738 - C39739) * C38618 +
            (C39740 - C39741) * C38614) *
               C50109 * C1669 +
           ((C6886 - C6885) * C38615 + (C6888 - C6887) * C38611 +
            (C6890 - C6889) * C38616 + (C6892 - C6891) * C38612 +
            (C39739 - C39738) * C38617 + (C39741 - C39740) * C38613 +
            (C117 * C22779 - C50251 * C22780) * C38618 +
            (C117 * C22781 - C50251 * C22782) * C38614) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50170 * C50395 +
           (((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C50170 * C50206) *
              C50438 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C50170 * C50395 +
           (((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
             C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                C50380 +
            ((C336 - C335) * C43932 + (C338 - C337) * C50446 + C11498 * C43933 +
             C11499 * C50447 + (C5623 - C5624) * C43934 +
             (C5625 - C5626) * C43931) *
                C50114) *
               C50170 * C50206) *
              C50439 +
          (((C168 * C43932 + C169 * C50446 + C5773 * C43933 + C5774 * C50447 +
             C5775 * C43934 + C5776 * C43931) *
                C50380 +
            (C170 * C43932 + C171 * C50446 + C11299 * C43933 + C11300 * C50447 +
             (C516 - C517) * C43934 + (C518 - C519) * C43931) *
                C50114) *
               C50170 * C50395 +
           ((C627 * C43932 + C628 * C50446 + C11142 * C43933 + C11143 * C50447 +
             (C5624 - C5623) * C43934 + (C5626 - C5625) * C43931) *
                C50380 +
            (C629 * C43932 + C630 * C50446 + (C918 - C917) * C43933 +
             (C920 - C919) * C50447 + (C117 * C1211 - C50251 * C1218) * C43934 +
             (C117 * C1219 - C50251 * C1223) * C43931) *
                C50114) *
               C50170 * C50206) *
              C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C43932 +
              (C50251 * C140 - C117 * C127) * C50446 +
              (C5437 - C5438) * C43933 + (C5439 - C5440) * C50447 +
              C5471 * C43934 + C5472 * C43931) *
                 C50380 +
             ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
              C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                 C50114) *
                C50396 +
            (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
              (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
              C7291 * C43934 + C7292 * C43931) *
                 C50380 +
             (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 +
              C5456 * C50447 + C5473 * C43934 + C5474 * C43931) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C43932 +
              (C117 * C301 - C50251 * C320) * C50446 +
              (C5975 - C5976) * C43933 + (C5977 - C5978) * C50447 +
              C6393 * C43934 + C6394 * C43931) *
                 C50380 +
             ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
              C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                 C50114) *
                C50396 +
            (((C5976 - C5975) * C43932 + (C5978 - C5977) * C50446 +
              (C5980 - C5979) * C43933 + (C5982 - C5981) * C50447 +
              (C6395 - C6396) * C43934 + (C6397 - C6398) * C43931) *
                 C50380 +
             (C5987 * C43932 + C5988 * C50446 + C5989 * C43933 +
              C5990 * C50447 + (C5991 - C5992) * C43934 +
              (C5993 - C5994) * C43931) *
                 C50114) *
                C50234) *
               C50206) *
              C288 +
          (((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
              C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                 C50380 +
             ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
              C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                 C50114) *
                C50396 +
            ((C5445 * C43932 + C5446 * C50446 + C5447 * C43933 +
              C5448 * C50447 + C5475 * C43934 + C5476 * C43931) *
                 C50380 +
             (C5773 * C43932 + C5774 * C50446 + C5775 * C43933 +
              C5776 * C50447 + (C5467 - C5468) * C43934 +
              (C5469 - C5470) * C43931) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
              C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                 C50380 +
             ((C336 - C335) * C43932 + (C338 - C337) * C50446 +
              C11498 * C43933 + C11499 * C50447 + (C5623 - C5624) * C43934 +
              (C5625 - C5626) * C43931) *
                 C50114) *
                C50396 +
            ((C5983 * C43932 + C5984 * C50446 + C5985 * C43933 +
              C5986 * C50447 + (C5992 - C5991) * C43934 +
              (C5994 - C5993) * C43931) *
                 C50380 +
             (C11142 * C43932 + C11143 * C50446 + (C5624 - C5623) * C43933 +
              (C5626 - C5625) * C50447 +
              (C117 * C5970 - C50251 * C5971) * C43934 +
              (C117 * C5972 - C50251 * C5973) * C43931) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C43932 +
             (C50251 * C324 - C117 * C309) * C50446 + (C6885 - C6886) * C43933 +
             (C6887 - C6888) * C50447 + (C6889 - C6890) * C43934 +
             (C6891 - C6892) * C43931) *
                C50380 +
            ((C343 - C344) * C43932 + (C345 - C346) * C50446 +
             (C5271 - C5272) * C43933 + (C5273 - C5274) * C50447 +
             (C5275 - C5276) * C43934 + (C5277 - C5278) * C43931) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C50170 * C285 +
           (((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
             C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                C50380 +
            ((C336 - C335) * C43932 + (C338 - C337) * C50446 + C11498 * C43933 +
             C11499 * C50447 + (C5623 - C5624) * C43934 +
             (C5625 - C5626) * C43931) *
                C50114) *
               C50170 * C286 +
           (((C344 - C343) * C43932 + (C346 - C345) * C50446 +
             (C5272 - C5271) * C43933 + (C5274 - C5273) * C50447 +
             (C5276 - C5275) * C43934 + (C5278 - C5277) * C43931) *
                C50380 +
            ((C348 - C347) * C43932 + (C350 - C349) * C50446 +
             (C10845 - C10844) * C43933 + (C10847 - C10846) * C50447 +
             (C117 * C2656 - C50251 * C2661) * C43934 +
             (C117 * C2662 - C50251 * C2665) * C43931) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C43932 +
            (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
            (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
               C50380 +
           ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
            C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
            C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
               C50380 +
           ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
            C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C168 * C43932 + C169 * C50446 + C5773 * C43933 + C5774 * C50447 +
            C5775 * C43934 + C5776 * C43931) *
               C50380 +
           (C170 * C43932 + C171 * C50446 + C11299 * C43933 + C11300 * C50447 +
            (C516 - C517) * C43934 + (C518 - C519) * C43931) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C172 * C43932 + C173 * C50446 + C747 * C43933 + C748 * C50447 +
            (C517 - C516) * C43934 + (C519 - C518) * C43931) *
               C50380 +
           (C174 * C43932 + C175 * C50446 + (C750 - C749) * C43933 +
            (C752 - C751) * C50447 + (C117 * C464 - C50251 * C483) * C43934 +
            (C117 * C484 - C50251 * C494) * C43931) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C452 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C453 +
           ((C5471 * C43932 + C5472 * C50446 + C38816 * C43933 +
             C38817 * C50447 + (C7293 - C7294) * C43934 +
             (C7295 - C7296) * C43931) *
                C50380 +
            (C5447 * C43932 + C5448 * C50446 + C5475 * C43933 + C5476 * C50447 +
             (C5461 - C5462) * C43934 + (C5463 - C5464) * C43931) *
                C50114) *
               C454) *
              C50154 * C288 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C452 +
           ((C5445 * C43932 + C5446 * C50446 + C5447 * C43933 + C5448 * C50447 +
             C5475 * C43934 + C5476 * C43931) *
                C50380 +
            (C5773 * C43932 + C5774 * C50446 + C5775 * C43933 + C5776 * C50447 +
             (C5467 - C5468) * C43934 + (C5469 - C5470) * C43931) *
                C50114) *
               C453 +
           ((C5455 * C43932 + C5456 * C50446 + C5473 * C43933 + C5474 * C50447 +
             (C5462 - C5461) * C43934 + (C5464 - C5463) * C43931) *
                C50380 +
            (C5465 * C43932 + C5466 * C50446 + (C5468 - C5467) * C43933 +
             (C5470 - C5469) * C50447 +
             (C117 * C5426 - C50251 * C5431) * C43934 +
             (C117 * C5432 - C50251 * C5435) * C43931) *
                C50114) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50396 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C50234) *
              C50154 * C50438 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C50396 +
           ((C5445 * C43932 + C5446 * C50446 + C5447 * C43933 + C5448 * C50447 +
             C5475 * C43934 + C5476 * C43931) *
                C50380 +
            (C5773 * C43932 + C5774 * C50446 + C5775 * C43933 + C5776 * C50447 +
             (C5467 - C5468) * C43934 + (C5469 - C5470) * C43931) *
                C50114) *
               C50234) *
              C50154 * C50439 +
          (((C168 * C43932 + C169 * C50446 + C5773 * C43933 + C5774 * C50447 +
             C5775 * C43934 + C5776 * C43931) *
                C50380 +
            (C170 * C43932 + C171 * C50446 + C11299 * C43933 + C11300 * C50447 +
             (C516 - C517) * C43934 + (C518 - C519) * C43931) *
                C50114) *
               C50396 +
           ((C745 * C43932 + C746 * C50446 + C5465 * C43933 + C5466 * C50447 +
             (C5468 - C5467) * C43934 + (C5470 - C5469) * C43931) *
                C50380 +
            (C747 * C43932 + C748 * C50446 + (C517 - C516) * C43933 +
             (C519 - C518) * C50447 + (C117 * C1842 - C50251 * C1849) * C43934 +
             (C117 * C1850 - C50251 * C1854) * C43931) *
                C50114) *
               C50234) *
              C50154 * C621)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C43932 +
            (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
            (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
               C50380 +
           ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
            C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
               C50114) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
            C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
               C50380 +
           ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
            C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
               C50114) *
              C50170 * C50154 * C114 +
          ((C168 * C43932 + C169 * C50446 + C5773 * C43933 + C5774 * C50447 +
            C5775 * C43934 + C5776 * C43931) *
               C50380 +
           (C170 * C43932 + C171 * C50446 + C11299 * C43933 + C11300 * C50447 +
            (C516 - C517) * C43934 + (C518 - C519) * C43931) *
               C50114) *
              C50170 * C50154 * C115 +
          ((C172 * C43932 + C173 * C50446 + C747 * C43933 + C748 * C50447 +
            (C517 - C516) * C43934 + (C519 - C518) * C43931) *
               C50380 +
           (C174 * C43932 + C175 * C50446 + (C750 - C749) * C43933 +
            (C752 - C751) * C50447 + (C117 * C464 - C50251 * C483) * C43934 +
            (C117 * C484 - C50251 * C494) * C43931) *
               C50114) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C43932 +
             (C50251 * C324 - C117 * C309) * C50446 + (C6885 - C6886) * C43933 +
             (C6887 - C6888) * C50447 + (C6889 - C6890) * C43934 +
             (C6891 - C6892) * C43931) *
                C50380 +
            ((C343 - C344) * C43932 + (C345 - C346) * C50446 +
             (C5271 - C5272) * C43933 + (C5273 - C5274) * C50447 +
             (C5275 - C5276) * C43934 + (C5277 - C5278) * C43931) *
                C50114) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C50170 * C285 +
           (((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
             C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                C50380 +
            ((C336 - C335) * C43932 + (C338 - C337) * C50446 + C11498 * C43933 +
             C11499 * C50447 + (C5623 - C5624) * C43934 +
             (C5625 - C5626) * C43931) *
                C50114) *
               C50170 * C286 +
           (((C344 - C343) * C43932 + (C346 - C345) * C50446 +
             (C5272 - C5271) * C43933 + (C5274 - C5273) * C50447 +
             (C5276 - C5275) * C43934 + (C5278 - C5277) * C43931) *
                C50380 +
            ((C348 - C347) * C43932 + (C350 - C349) * C50446 +
             (C10845 - C10844) * C43933 + (C10847 - C10846) * C50447 +
             (C117 * C2656 - C50251 * C2661) * C43934 +
             (C117 * C2662 - C50251 * C2665) * C43931) *
                C50114) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50170 * C50440 +
           (((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C50170 * C50441 +
           (((C50251 * C308 - C117 * C294) * C43932 +
             (C50251 * C324 - C117 * C309) * C50446 + (C6885 - C6886) * C43933 +
             (C6887 - C6888) * C50447 + (C6889 - C6890) * C43934 +
             (C6891 - C6892) * C43931) *
                C50380 +
            ((C343 - C344) * C43932 + (C345 - C346) * C50446 +
             (C5271 - C5272) * C43933 + (C5273 - C5274) * C50447 +
             (C5275 - C5276) * C43934 + (C5277 - C5278) * C43931) *
                C50114) *
               C50170 * C1324) *
              C50387 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C50170 * C50440 +
           (((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
             C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                C50380 +
            ((C336 - C335) * C43932 + (C338 - C337) * C50446 + C11498 * C43933 +
             C11499 * C50447 + (C5623 - C5624) * C43934 +
             (C5625 - C5626) * C43931) *
                C50114) *
               C50170 * C50441 +
           (((C344 - C343) * C43932 + (C346 - C345) * C50446 +
             (C5272 - C5271) * C43933 + (C5274 - C5273) * C50447 +
             (C5276 - C5275) * C43934 + (C5278 - C5277) * C43931) *
                C50380 +
            ((C348 - C347) * C43932 + (C350 - C349) * C50446 +
             (C10845 - C10844) * C43933 + (C10847 - C10846) * C50447 +
             (C117 * C2656 - C50251 * C2661) * C43934 +
             (C117 * C2662 - C50251 * C2665) * C43931) *
                C50114) *
               C50170 * C1324) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50396 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C50234) *
              C50440 +
          ((((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C50396 +
           (((C5976 - C5975) * C43932 + (C5978 - C5977) * C50446 +
             (C5980 - C5979) * C43933 + (C5982 - C5981) * C50447 +
             (C6395 - C6396) * C43934 + (C6397 - C6398) * C43931) *
                C50380 +
            (C5987 * C43932 + C5988 * C50446 + C5989 * C43933 + C5990 * C50447 +
             (C5991 - C5992) * C43934 + (C5993 - C5994) * C43931) *
                C50114) *
               C50234) *
              C50441 +
          ((((C50251 * C308 - C117 * C294) * C43932 +
             (C50251 * C324 - C117 * C309) * C50446 + (C6885 - C6886) * C43933 +
             (C6887 - C6888) * C50447 + (C6889 - C6890) * C43934 +
             (C6891 - C6892) * C43931) *
                C50380 +
            ((C343 - C344) * C43932 + (C345 - C346) * C50446 +
             (C5271 - C5272) * C43933 + (C5273 - C5274) * C50447 +
             (C5275 - C5276) * C43934 + (C5277 - C5278) * C43931) *
                C50114) *
               C50396 +
           (((C6886 - C6885) * C43932 + (C6888 - C6887) * C50446 +
             (C6890 - C6889) * C43933 + (C6892 - C6891) * C50447 +
             (C39739 - C39738) * C43934 + (C39741 - C39740) * C43931) *
                C50380 +
            ((C5272 - C5271) * C43932 + (C5274 - C5273) * C50446 +
             (C5276 - C5275) * C43933 + (C5278 - C5277) * C50447 +
             (C117 * C4517 - C50251 * C4523) * C43934 +
             (C117 * C4525 - C50251 * C4529) * C43931) *
                C50114) *
               C50234) *
              C1324) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C43932 +
            (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
            (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
               C50380 +
           ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
            C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
               C50114) *
              C50170 * C1089 +
          (((C117 * C290 - C50251 * C300) * C43932 +
            (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
            (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
               C50380 +
           ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
            C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
               C50114) *
              C50170 * C1090 +
          (((C50251 * C308 - C117 * C294) * C43932 +
            (C50251 * C324 - C117 * C309) * C50446 + (C6885 - C6886) * C43933 +
            (C6887 - C6888) * C50447 + (C6889 - C6890) * C43934 +
            (C6891 - C6892) * C43931) *
               C50380 +
           ((C343 - C344) * C43932 + (C345 - C346) * C50446 +
            (C5271 - C5272) * C43933 + (C5273 - C5274) * C50447 +
            (C5275 - C5276) * C43934 + (C5277 - C5278) * C43931) *
               C50114) *
              C50170 * C1091 +
          (((C117 * C1094 - C50251 * C1098) * C43932 +
            (C117 * C1099 - C50251 * C1106) * C50446 +
            (C117 * C3200 - C50251 * C3203) * C43933 +
            (C117 * C3204 - C50251 * C3209) * C50447 +
            (C117 * C3622 - C50251 * C3624) * C43934 +
            (C117 * C3625 - C50251 * C3628) * C43931) *
               C50380 +
           ((C117 * C1095 - C50251 * C1100) * C43932 +
            (C117 * C1101 - C50251 * C1107) * C50446 +
            (C117 * C3201 - C50251 * C3205) * C43933 +
            (C117 * C3206 - C50251 * C3210) * C50447 +
            (C117 * C3623 - C50251 * C3626) * C43934 +
            (C117 * C3627 - C50251 * C3629) * C43931) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50170 * C1018 +
           (((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C50170 * C1018 +
           (((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
             C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                C50380 +
            ((C336 - C335) * C43932 + (C338 - C337) * C50446 + C11498 * C43933 +
             C11499 * C50447 + (C5623 - C5624) * C43934 +
             (C5625 - C5626) * C43931) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C168 * C43932 + C169 * C50446 + C5773 * C43933 + C5774 * C50447 +
             C5775 * C43934 + C5776 * C43931) *
                C50380 +
            (C170 * C43932 + C171 * C50446 + C11299 * C43933 + C11300 * C50447 +
             (C516 - C517) * C43934 + (C518 - C519) * C43931) *
                C50114) *
               C50170 * C1018 +
           ((C627 * C43932 + C628 * C50446 + C11142 * C43933 + C11143 * C50447 +
             (C5624 - C5623) * C43934 + (C5626 - C5625) * C43931) *
                C50380 +
            (C629 * C43932 + C630 * C50446 + (C918 - C917) * C43933 +
             (C920 - C919) * C50447 + (C117 * C1211 - C50251 * C1218) * C43934 +
             (C117 * C1219 - C50251 * C1223) * C43931) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C452 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C453 +
           ((C5471 * C43932 + C5472 * C50446 + C38816 * C43933 +
             C38817 * C50447 + (C7293 - C7294) * C43934 +
             (C7295 - C7296) * C43931) *
                C50380 +
            (C5447 * C43932 + C5448 * C50446 + C5475 * C43933 + C5476 * C50447 +
             (C5461 - C5462) * C43934 + (C5463 - C5464) * C43931) *
                C50114) *
               C454) *
              C1018 +
          ((((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C452 +
           (((C5976 - C5975) * C43932 + (C5978 - C5977) * C50446 +
             (C5980 - C5979) * C43933 + (C5982 - C5981) * C50447 +
             (C6395 - C6396) * C43934 + (C6397 - C6398) * C43931) *
                C50380 +
            (C5987 * C43932 + C5988 * C50446 + C5989 * C43933 + C5990 * C50447 +
             (C5991 - C5992) * C43934 + (C5993 - C5994) * C43931) *
                C50114) *
               C453 +
           ((C6393 * C43932 + C6394 * C50446 + C39406 * C43933 +
             C39407 * C50447 + (C39409 - C39408) * C43934 +
             (C39411 - C39410) * C43931) *
                C50380 +
            (C5985 * C43932 + C5986 * C50446 + (C5992 - C5991) * C43933 +
             (C5994 - C5993) * C50447 +
             (C117 * C6385 - C50251 * C6388) * C43934 +
             (C117 * C6389 - C50251 * C6391) * C43931) *
                C50114) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C43932 +
              (C50251 * C140 - C117 * C127) * C50446 +
              (C5437 - C5438) * C43933 + (C5439 - C5440) * C50447 +
              C5471 * C43934 + C5472 * C43931) *
                 C50380 +
             ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
              C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                 C50114) *
                C50396 +
            (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
              (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
              C7291 * C43934 + C7292 * C43931) *
                 C50380 +
             (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 +
              C5456 * C50447 + C5473 * C43934 + C5474 * C43931) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C117 * C290 - C50251 * C300) * C43932 +
              (C117 * C301 - C50251 * C320) * C50446 +
              (C5975 - C5976) * C43933 + (C5977 - C5978) * C50447 +
              C6393 * C43934 + C6394 * C43931) *
                 C50380 +
             ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
              C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                 C50114) *
                C50396 +
            (((C5976 - C5975) * C43932 + (C5978 - C5977) * C50446 +
              (C5980 - C5979) * C43933 + (C5982 - C5981) * C50447 +
              (C6395 - C6396) * C43934 + (C6397 - C6398) * C43931) *
                 C50380 +
             (C5987 * C43932 + C5988 * C50446 + C5989 * C43933 +
              C5990 * C50447 + (C5991 - C5992) * C43934 +
              (C5993 - C5994) * C43931) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
              C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                 C50380 +
             ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
              C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                 C50114) *
                C50396 +
            ((C5445 * C43932 + C5446 * C50446 + C5447 * C43933 +
              C5448 * C50447 + C5475 * C43934 + C5476 * C43931) *
                 C50380 +
             (C5773 * C43932 + C5774 * C50446 + C5775 * C43933 +
              C5776 * C50447 + (C5467 - C5468) * C43934 +
              (C5469 - C5470) * C43931) *
                 C50114) *
                C50234) *
               C1018 +
           ((((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
              C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                 C50380 +
             ((C336 - C335) * C43932 + (C338 - C337) * C50446 +
              C11498 * C43933 + C11499 * C50447 + (C5623 - C5624) * C43934 +
              (C5625 - C5626) * C43931) *
                 C50114) *
                C50396 +
            ((C5983 * C43932 + C5984 * C50446 + C5985 * C43933 +
              C5986 * C50447 + (C5992 - C5991) * C43934 +
              (C5994 - C5993) * C43931) *
                 C50380 +
             (C11142 * C43932 + C11143 * C50446 + (C5624 - C5623) * C43933 +
              (C5626 - C5625) * C50447 +
              (C117 * C5970 - C50251 * C5971) * C43934 +
              (C117 * C5972 - C50251 * C5973) * C43931) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50170 * C1018 +
           (((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C50170 * C50206) *
              C1020 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C50170 * C1018 +
           (((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
             C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                C50380 +
            ((C336 - C335) * C43932 + (C338 - C337) * C50446 + C11498 * C43933 +
             C11499 * C50447 + (C5623 - C5624) * C43934 +
             (C5625 - C5626) * C43931) *
                C50114) *
               C50170 * C50206) *
              C1021 +
          (((C168 * C43932 + C169 * C50446 + C5773 * C43933 + C5774 * C50447 +
             C5775 * C43934 + C5776 * C43931) *
                C50380 +
            (C170 * C43932 + C171 * C50446 + C11299 * C43933 + C11300 * C50447 +
             (C516 - C517) * C43934 + (C518 - C519) * C43931) *
                C50114) *
               C50170 * C1018 +
           ((C627 * C43932 + C628 * C50446 + C11142 * C43933 + C11143 * C50447 +
             (C5624 - C5623) * C43934 + (C5626 - C5625) * C43931) *
                C50380 +
            (C629 * C43932 + C630 * C50446 + (C918 - C917) * C43933 +
             (C920 - C919) * C50447 + (C117 * C1211 - C50251 * C1218) * C43934 +
             (C117 * C1219 - C50251 * C1223) * C43931) *
                C50114) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C43932 +
            (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
            (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
               C50380 +
           ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
            C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
               C50114) *
              C50170 * C1089 +
          (((C117 * C290 - C50251 * C300) * C43932 +
            (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
            (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
               C50380 +
           ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
            C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
               C50114) *
              C50170 * C1090 +
          (((C50251 * C308 - C117 * C294) * C43932 +
            (C50251 * C324 - C117 * C309) * C50446 + (C6885 - C6886) * C43933 +
            (C6887 - C6888) * C50447 + (C6889 - C6890) * C43934 +
            (C6891 - C6892) * C43931) *
               C50380 +
           ((C343 - C344) * C43932 + (C345 - C346) * C50446 +
            (C5271 - C5272) * C43933 + (C5273 - C5274) * C50447 +
            (C5275 - C5276) * C43934 + (C5277 - C5278) * C43931) *
               C50114) *
              C50170 * C1091 +
          (((C117 * C1094 - C50251 * C1098) * C43932 +
            (C117 * C1099 - C50251 * C1106) * C50446 +
            (C117 * C3200 - C50251 * C3203) * C43933 +
            (C117 * C3204 - C50251 * C3209) * C50447 +
            (C117 * C3622 - C50251 * C3624) * C43934 +
            (C117 * C3625 - C50251 * C3628) * C43931) *
               C50380 +
           ((C117 * C1095 - C50251 * C1100) * C43932 +
            (C117 * C1101 - C50251 * C1107) * C50446 +
            (C117 * C3201 - C50251 * C3205) * C43933 +
            (C117 * C3206 - C50251 * C3210) * C50447 +
            (C117 * C3623 - C50251 * C3626) * C43934 +
            (C117 * C3627 - C50251 * C3629) * C43931) *
               C50114) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C43932 +
              (C50251 * C140 - C117 * C127) * C50446 +
              (C5437 - C5438) * C43933 + (C5439 - C5440) * C50447 +
              C5471 * C43934 + C5472 * C43931) *
                 C50380 +
             ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
              C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                 C50114) *
                C1669 +
            (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
              (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
              C7291 * C43934 + C7292 * C43931) *
                 C50380 +
             (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 +
              C5456 * C50447 + C5473 * C43934 + C5474 * C43931) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C43932 +
              (C117 * C301 - C50251 * C320) * C50446 +
              (C5975 - C5976) * C43933 + (C5977 - C5978) * C50447 +
              C6393 * C43934 + C6394 * C43931) *
                 C50380 +
             ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
              C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                 C50114) *
                C1669 +
            (((C5976 - C5975) * C43932 + (C5978 - C5977) * C50446 +
              (C5980 - C5979) * C43933 + (C5982 - C5981) * C50447 +
              (C6395 - C6396) * C43934 + (C6397 - C6398) * C43931) *
                 C50380 +
             (C5987 * C43932 + C5988 * C50446 + C5989 * C43933 +
              C5990 * C50447 + (C5991 - C5992) * C43934 +
              (C5993 - C5994) * C43931) *
                 C50114) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
              C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                 C50380 +
             ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
              C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                 C50114) *
                C1669 +
            ((C5445 * C43932 + C5446 * C50446 + C5447 * C43933 +
              C5448 * C50447 + C5475 * C43934 + C5476 * C43931) *
                 C50380 +
             (C5773 * C43932 + C5774 * C50446 + C5775 * C43933 +
              C5776 * C50447 + (C5467 - C5468) * C43934 +
              (C5469 - C5470) * C43931) *
                 C50114) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C43932 + (C334 - C333) * C50446 + C5987 * C43933 +
              C5988 * C50447 + C5989 * C43934 + C5990 * C43931) *
                 C50380 +
             ((C336 - C335) * C43932 + (C338 - C337) * C50446 +
              C11498 * C43933 + C11499 * C50447 + (C5623 - C5624) * C43934 +
              (C5625 - C5626) * C43931) *
                 C50114) *
                C1669 +
            ((C5983 * C43932 + C5984 * C50446 + C5985 * C43933 +
              C5986 * C50447 + (C5992 - C5991) * C43934 +
              (C5994 - C5993) * C43931) *
                 C50380 +
             (C11142 * C43932 + C11143 * C50446 + (C5624 - C5623) * C43933 +
              (C5626 - C5625) * C50447 +
              (C117 * C5970 - C50251 * C5971) * C43934 +
              (C117 * C5972 - C50251 * C5973) * C43931) *
                 C50114) *
                C50234) *
               C50206) *
              C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50442 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C50443 +
           ((C5471 * C43932 + C5472 * C50446 + C38816 * C43933 +
             C38817 * C50447 + (C7293 - C7294) * C43934 +
             (C7295 - C7296) * C43931) *
                C50380 +
            (C5447 * C43932 + C5448 * C50446 + C5475 * C43933 + C5476 * C50447 +
             (C5461 - C5462) * C43934 + (C5463 - C5464) * C43931) *
                C50114) *
               C2085) *
              C50395 +
          ((((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C50442 +
           (((C5976 - C5975) * C43932 + (C5978 - C5977) * C50446 +
             (C5980 - C5979) * C43933 + (C5982 - C5981) * C50447 +
             (C6395 - C6396) * C43934 + (C6397 - C6398) * C43931) *
                C50380 +
            (C5987 * C43932 + C5988 * C50446 + C5989 * C43933 + C5990 * C50447 +
             (C5991 - C5992) * C43934 + (C5993 - C5994) * C43931) *
                C50114) *
               C50443 +
           ((C6393 * C43932 + C6394 * C50446 + C39406 * C43933 +
             C39407 * C50447 + (C39409 - C39408) * C43934 +
             (C39411 - C39410) * C43931) *
                C50380 +
            (C5985 * C43932 + C5986 * C50446 + (C5992 - C5991) * C43933 +
             (C5994 - C5993) * C50447 +
             (C117 * C6385 - C50251 * C6388) * C43934 +
             (C117 * C6389 - C50251 * C6391) * C43931) *
                C50114) *
               C2085) *
              C50206) *
         C50135) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C1669 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C1669 +
           (((C5976 - C5975) * C43932 + (C5978 - C5977) * C50446 +
             (C5980 - C5979) * C43933 + (C5982 - C5981) * C50447 +
             (C6395 - C6396) * C43934 + (C6397 - C6398) * C43931) *
                C50380 +
            (C5987 * C43932 + C5988 * C50446 + C5989 * C43933 + C5990 * C50447 +
             (C5991 - C5992) * C43934 + (C5993 - C5994) * C43931) *
                C50114) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C43932 +
             (C50251 * C324 - C117 * C309) * C50446 + (C6885 - C6886) * C43933 +
             (C6887 - C6888) * C50447 + (C6889 - C6890) * C43934 +
             (C6891 - C6892) * C43931) *
                C50380 +
            ((C343 - C344) * C43932 + (C345 - C346) * C50446 +
             (C5271 - C5272) * C43933 + (C5273 - C5274) * C50447 +
             (C5275 - C5276) * C43934 + (C5277 - C5278) * C43931) *
                C50114) *
               C1669 +
           (((C6886 - C6885) * C43932 + (C6888 - C6887) * C50446 +
             (C6890 - C6889) * C43933 + (C6892 - C6891) * C50447 +
             (C39739 - C39738) * C43934 + (C39741 - C39740) * C43931) *
                C50380 +
            ((C5272 - C5271) * C43932 + (C5274 - C5273) * C50446 +
             (C5276 - C5275) * C43933 + (C5278 - C5277) * C50447 +
             (C117 * C4517 - C50251 * C4523) * C43934 +
             (C117 * C4525 - C50251 * C4529) * C43931) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C1669 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C1669 +
           ((C5445 * C43932 + C5446 * C50446 + C5447 * C43933 + C5448 * C50447 +
             C5475 * C43934 + C5476 * C43931) *
                C50380 +
            (C5773 * C43932 + C5774 * C50446 + C5775 * C43933 + C5776 * C50447 +
             (C5467 - C5468) * C43934 + (C5469 - C5470) * C43931) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C168 * C43932 + C169 * C50446 + C5773 * C43933 + C5774 * C50447 +
             C5775 * C43934 + C5776 * C43931) *
                C50380 +
            (C170 * C43932 + C171 * C50446 + C11299 * C43933 + C11300 * C50447 +
             (C516 - C517) * C43934 + (C518 - C519) * C43931) *
                C50114) *
               C1669 +
           ((C745 * C43932 + C746 * C50446 + C5465 * C43933 + C5466 * C50447 +
             (C5468 - C5467) * C43934 + (C5470 - C5469) * C43931) *
                C50380 +
            (C747 * C43932 + C748 * C50446 + (C517 - C516) * C43933 +
             (C519 - C518) * C50447 + (C117 * C1842 - C50251 * C1849) * C43934 +
             (C117 * C1850 - C50251 * C1854) * C43931) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C43932 +
            (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
            (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
               C50380 +
           ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
            C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
               C50114) *
              C1835 +
          (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
            (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
            C7291 * C43934 + C7292 * C43931) *
               C50380 +
           (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
            C5473 * C43934 + C5474 * C43931) *
               C50114) *
              C1836 +
          ((C5471 * C43932 + C5472 * C50446 + C38816 * C43933 +
            C38817 * C50447 + (C7293 - C7294) * C43934 +
            (C7295 - C7296) * C43931) *
               C50380 +
           (C5447 * C43932 + C5448 * C50446 + C5475 * C43933 + C5476 * C50447 +
            (C5461 - C5462) * C43934 + (C5463 - C5464) * C43931) *
               C50114) *
              C1837 +
          ((C7291 * C43932 + C7292 * C50446 + C40008 * C43933 +
            C40009 * C50447 + (C40011 - C40010) * C43934 +
            (C40013 - C40012) * C43931) *
               C50380 +
           (C5473 * C43932 + C5474 * C50446 + (C5462 - C5461) * C43933 +
            (C5464 - C5463) * C50447 +
            (C117 * C7283 - C50251 * C7286) * C43934 +
            (C117 * C7287 - C50251 * C7289) * C43931) *
               C50114) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C50442 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C50443 +
           ((C5471 * C43932 + C5472 * C50446 + C38816 * C43933 +
             C38817 * C50447 + (C7293 - C7294) * C43934 +
             (C7295 - C7296) * C43931) *
                C50380 +
            (C5447 * C43932 + C5448 * C50446 + C5475 * C43933 + C5476 * C50447 +
             (C5461 - C5462) * C43934 + (C5463 - C5464) * C43931) *
                C50114) *
               C2085) *
              C50154 * C50387 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C50442 +
           ((C5445 * C43932 + C5446 * C50446 + C5447 * C43933 + C5448 * C50447 +
             C5475 * C43934 + C5476 * C43931) *
                C50380 +
            (C5773 * C43932 + C5774 * C50446 + C5775 * C43933 + C5776 * C50447 +
             (C5467 - C5468) * C43934 + (C5469 - C5470) * C43931) *
                C50114) *
               C50443 +
           ((C5455 * C43932 + C5456 * C50446 + C5473 * C43933 + C5474 * C50447 +
             (C5462 - C5461) * C43934 + (C5464 - C5463) * C43931) *
                C50380 +
            (C5465 * C43932 + C5466 * C50446 + (C5468 - C5467) * C43933 +
             (C5470 - C5469) * C50447 +
             (C117 * C5426 - C50251 * C5431) * C43934 +
             (C117 * C5432 - C50251 * C5435) * C43931) *
                C50114) *
               C2085) *
              C50154 * C50141)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C1669 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C43932 + (C151 - C150) * C50446 + C5453 * C43933 +
             C5454 * C50447 + C5455 * C43934 + C5456 * C43931) *
                C50380 +
            ((C153 - C152) * C43932 + (C155 - C154) * C50446 + C745 * C43933 +
             C746 * C50447 + C5465 * C43934 + C5466 * C43931) *
                C50114) *
               C1669 +
           ((C5445 * C43932 + C5446 * C50446 + C5447 * C43933 + C5448 * C50447 +
             C5475 * C43934 + C5476 * C43931) *
                C50380 +
            (C5773 * C43932 + C5774 * C50446 + C5775 * C43933 + C5776 * C50447 +
             (C5467 - C5468) * C43934 + (C5469 - C5470) * C43931) *
                C50114) *
               C50234) *
              C50154 * C1021 +
          (((C168 * C43932 + C169 * C50446 + C5773 * C43933 + C5774 * C50447 +
             C5775 * C43934 + C5776 * C43931) *
                C50380 +
            (C170 * C43932 + C171 * C50446 + C11299 * C43933 + C11300 * C50447 +
             (C516 - C517) * C43934 + (C518 - C519) * C43931) *
                C50114) *
               C1669 +
           ((C745 * C43932 + C746 * C50446 + C5465 * C43933 + C5466 * C50447 +
             (C5468 - C5467) * C43934 + (C5470 - C5469) * C43931) *
                C50380 +
            (C747 * C43932 + C748 * C50446 + (C517 - C516) * C43933 +
             (C519 - C518) * C50447 + (C117 * C1842 - C50251 * C1849) * C43934 +
             (C117 * C1850 - C50251 * C1854) * C43931) *
                C50114) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C43932 +
             (C50251 * C140 - C117 * C127) * C50446 + (C5437 - C5438) * C43933 +
             (C5439 - C5440) * C50447 + C5471 * C43934 + C5472 * C43931) *
                C50380 +
            ((C148 - C149) * C43932 + (C150 - C151) * C50446 + C5445 * C43933 +
             C5446 * C50447 + C5447 * C43934 + C5448 * C43931) *
                C50114) *
               C1669 +
           (((C5438 - C5437) * C43932 + (C5440 - C5439) * C50446 +
             (C5442 - C5441) * C43933 + (C5444 - C5443) * C50447 +
             C7291 * C43934 + C7292 * C43931) *
                C50380 +
            (C5453 * C43932 + C5454 * C50446 + C5455 * C43933 + C5456 * C50447 +
             C5473 * C43934 + C5474 * C43931) *
                C50114) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C43932 +
             (C117 * C301 - C50251 * C320) * C50446 + (C5975 - C5976) * C43933 +
             (C5977 - C5978) * C50447 + C6393 * C43934 + C6394 * C43931) *
                C50380 +
            ((C331 - C332) * C43932 + (C333 - C334) * C50446 + C5983 * C43933 +
             C5984 * C50447 + C5985 * C43934 + C5986 * C43931) *
                C50114) *
               C1669 +
           (((C5976 - C5975) * C43932 + (C5978 - C5977) * C50446 +
             (C5980 - C5979) * C43933 + (C5982 - C5981) * C50447 +
             (C6395 - C6396) * C43934 + (C6397 - C6398) * C43931) *
                C50380 +
            (C5987 * C43932 + C5988 * C50446 + C5989 * C43933 + C5990 * C50447 +
             (C5991 - C5992) * C43934 + (C5993 - C5994) * C43931) *
                C50114) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C43932 +
             (C50251 * C324 - C117 * C309) * C50446 + (C6885 - C6886) * C43933 +
             (C6887 - C6888) * C50447 + (C6889 - C6890) * C43934 +
             (C6891 - C6892) * C43931) *
                C50380 +
            ((C343 - C344) * C43932 + (C345 - C346) * C50446 +
             (C5271 - C5272) * C43933 + (C5273 - C5274) * C50447 +
             (C5275 - C5276) * C43934 + (C5277 - C5278) * C43931) *
                C50114) *
               C1669 +
           (((C6886 - C6885) * C43932 + (C6888 - C6887) * C50446 +
             (C6890 - C6889) * C43933 + (C6892 - C6891) * C50447 +
             (C39739 - C39738) * C43934 + (C39741 - C39740) * C43931) *
                C50380 +
            ((C5272 - C5271) * C43932 + (C5274 - C5273) * C50446 +
             (C5276 - C5275) * C43933 + (C5278 - C5277) * C50447 +
             (C117 * C4517 - C50251 * C4523) * C43934 +
             (C117 * C4525 - C50251 * C4529) * C43931) *
                C50114) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C50395 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50170 * C50206) *
              C50438 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C50395 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C50206) *
              C50439 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C50170 * C50395 +
           (C33746 * C16957 +
            (C629 * C33285 + C630 * C33283 + (C918 - C917) * C33286 +
             (C920 - C919) * C50330) *
                C16958 +
            ((C632 - C631) * C33285 + (C634 - C633) * C33283 +
             (C117 * C892 - C50251 * C901) * C33286 +
             (C117 * C902 - C50251 * C907) * C50330) *
                C16959) *
               C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50170 * C50395 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C2287 * C888 - C2282 * C893 + C2288 * C1555 - C2283 * C1559 +
             C2289 * C3200 - C2284 * C3203) *
                C33286 +
            (C2287 * C894 - C2282 * C903 + C2288 * C1560 - C2283 * C1567 +
             C2289 * C3204 - C2284 * C3209) *
                C50330) *
               C50109 * C50170 * C50206) *
              C50438 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C50395 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C50206) *
              C50439 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C50170 * C50395 +
           ((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C33285 +
            (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C33283 +
            (C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
             C2289 * C3202 - C2284 * C3207) *
                C33286 +
            (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
             C2289 * C3208 - C2284 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C33285 +
              (C50251 * C140 - C117 * C127) * C33283 +
              (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                 C16957 +
             ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
              C5446 * C50330) *
                 C16958 +
             C33300 * C16959) *
                C50396 +
            (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
              (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                 C16957 +
             (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
              C5456 * C50330) *
                 C16958 +
             C33899 * C16959) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C33285 +
              (C117 * C301 - C50251 * C320) * C33283 +
              (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                 C16957 +
             ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
              C5984 * C50330) *
                 C16958 +
             C33746 * C16959) *
                C50396 +
            (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
              (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                 C16957 +
             (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
              C5990 * C50330) *
                 C16958 +
             (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
              (C5625 - C5626) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C288 +
          (((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
              C5454 * C50330) *
                 C16957 +
             ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
              C746 * C50330) *
                 C16958 +
             C33301 * C16959) *
                C50396 +
            ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
              C5448 * C50330) *
                 C16957 +
             (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
              C5776 * C50330) *
                 C16958 +
             (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
              (C518 - C519) * C50330) *
                 C16959) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
              C5988 * C50330) *
                 C16957 +
             ((C336 - C335) * C33285 + (C338 - C337) * C33283 +
              C11498 * C33286 + C11499 * C50330) *
                 C16958 +
             ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
              (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                 C16959) *
                C50396 +
            ((C5983 * C33285 + C5984 * C33283 + C5985 * C33286 +
              C5986 * C50330) *
                 C16957 +
             (C11142 * C33285 + C11143 * C33283 + (C5624 - C5623) * C33286 +
              (C5626 - C5625) * C50330) *
                 C16958 +
             ((C918 - C917) * C33285 + (C920 - C919) * C33283 +
              (C117 * C1211 - C50251 * C1218) * C33286 +
              (C117 * C1219 - C50251 * C1223) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C33285 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C33283 +
             (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
             (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
                C50109 * C50396 +
            ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
             (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
             (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
             (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C33285 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C33283 +
             (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
             (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
                C50109 * C50396 +
            ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
             (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
             (C2282 * C1212 - C2287 * C1208 + C2283 * C2657 - C2288 * C2654 +
              C2284 * C3624 - C2289 * C3622) *
                 C33286 +
             (C2282 * C1220 - C2287 * C1213 + C2283 * C2663 - C2288 * C2658 +
              C2284 * C3628 - C2289 * C3625) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C288 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
                C50109 * C50396 +
            ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
             (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
             (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
                C50109 * C50396 +
            ((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C33285 +
             (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C33283 +
             (C2287 * C1209 - C2282 * C1214 + C2288 * C2655 - C2283 * C2659 +
              C2289 * C3623 - C2284 * C3626) *
                 C33286 +
             (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 - C2283 * C2664 +
              C2289 * C3627 - C2284 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            (C627 * C33285 + C628 * C33283 + C11142 * C33286 +
             C11143 * C50330) *
                C16959) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C285 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C286 +
           (((C344 - C343) * C33285 + (C346 - C345) * C33283 +
             (C5272 - C5271) * C33286 + (C5274 - C5273) * C50330) *
                C16957 +
            ((C348 - C347) * C33285 + (C350 - C349) * C33283 +
             (C10845 - C10844) * C33286 + (C10847 - C10846) * C50330) *
                C16958 +
            ((C352 - C351) * C33285 + (C354 - C353) * C33283 +
             (C117 * C1558 - C50251 * C1565) * C33286 +
             (C117 * C1566 - C50251 * C1570) * C50330) *
                C16959) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C33285 +
            (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
            (C5439 - C5440) * C50330) *
               C16957 +
           ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
            C5446 * C50330) *
               C16958 +
           C33300 * C16959) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
            C5454 * C50330) *
               C16957 +
           ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
            C746 * C50330) *
               C16958 +
           C33301 * C16959) *
              C50170 * C50154 * C114 +
          (C33300 * C16957 +
           (C170 * C33285 + C171 * C33283 + C11299 * C33286 + C11300 * C50330) *
               C16958 +
           ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
            (C749 - C750) * C33286 + (C751 - C752) * C50330) *
               C16959) *
              C50170 * C50154 * C115 +
          (C33301 * C16957 +
           (C174 * C33285 + C175 * C33283 + (C750 - C749) * C33286 +
            (C752 - C751) * C50330) *
               C16958 +
           ((C165 - C164) * C33285 + (C167 - C166) * C33283 +
            (C117 * C740 - C50251 * C741) * C33286 +
            (C117 * C742 - C50251 * C743) * C50330) *
               C16959) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C452 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            (C745 * C33285 + C746 * C33283 + C5465 * C33286 + C5466 * C50330) *
                C16959) *
               C453 +
           ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
             (C5452 - C5451) * C50330) *
                C16957 +
            (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 +
             C5476 * C50330) *
                C16958 +
            (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
             (C5469 - C5470) * C50330) *
                C16959) *
               C454) *
              C50154 * C288 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C452 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C453 +
           ((C5455 * C33285 + C5456 * C33283 + C5473 * C33286 +
             C5474 * C50330) *
                C16957 +
            (C5465 * C33285 + C5466 * C33283 + (C5468 - C5467) * C33286 +
             (C5470 - C5469) * C50330) *
                C16958 +
            ((C517 - C516) * C33285 + (C519 - C518) * C33283 +
             (C117 * C1842 - C50251 * C1849) * C33286 +
             (C117 * C1850 - C50251 * C1854) * C50330) *
                C16959) *
               C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C2282 * C465 - C2287 * C455 + C2283 * C893 - C2288 * C888 +
            C2284 * C1559 - C2289 * C1555) *
               C33286 +
           (C2282 * C485 - C2287 * C466 + C2283 * C903 - C2288 * C894 +
            C2284 * C1567 - C2289 * C1560) *
               C50330) *
              C50109 * C50170 * C50154 * C113 +
          ((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
           (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
           (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
           (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
              C50109 * C50170 * C50154 * C114 +
          ((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
           (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
           (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
           (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
              C50109 * C50170 * C50154 * C115 +
          ((C2316 - C2315 + C2318 - C2317 + C2320 - C2319) * C33285 +
           (C2322 - C2321 + C2324 - C2323 + C2326 - C2325) * C33283 +
           (C2287 * C458 - C2282 * C471 + C2288 * C891 - C2283 * C899 +
            C2289 * C1558 - C2284 * C1565) *
               C33286 +
           (C2287 * C472 - C2282 * C488 + C2288 * C900 - C2283 * C906 +
            C2289 * C1566 - C2284 * C1570) *
               C50330) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C2282 * C465 - C2287 * C455 + C2283 * C893 - C2288 * C888 +
             C2284 * C1559 - C2289 * C1555) *
                C33286 +
            (C2282 * C485 - C2287 * C466 + C2283 * C903 - C2288 * C894 +
             C2284 * C1567 - C2289 * C1560) *
                C50330) *
               C50109 * C50170 * C285 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C2287 * C888 - C2282 * C893 + C2288 * C1555 - C2283 * C1559 +
             C2289 * C3200 - C2284 * C3203) *
                C33286 +
            (C2287 * C894 - C2282 * C903 + C2288 * C1560 - C2283 * C1567 +
             C2289 * C3204 - C2284 * C3209) *
                C50330) *
               C50109 * C50170 * C286 +
           ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
             C2284 * C4118 - C2289 * C4116) *
                C33286 +
            (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
             C2284 * C4122 - C2289 * C4119) *
                C50330) *
               C50109 * C50170 * C287) *
              C288 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C285 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C286 +
           ((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C33285 +
            (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C33283 +
            (C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
             C2289 * C4117 - C2284 * C4120) *
                C33286 +
            (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
             C2289 * C4121 - C2284 * C4123) *
                C50330) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C452 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C453 +
           ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
            (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
            (C2282 * C1843 - C2287 * C1839 + C2283 * C4518 - C2288 * C4514 +
             C2284 * C4519 - C2289 * C4515) *
                C33286 +
            (C2282 * C1851 - C2287 * C1844 + C2283 * C4526 - C2288 * C4520 +
             C2284 * C4527 - C2289 * C4521) *
                C50330) *
               C50109 * C454) *
              C50154 * C288 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C452 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C453 +
           ((C2680 - C2679 + C2682 - C2681 + C2684 - C2683) * C33285 +
            (C2686 - C2685 + C2688 - C2687 + C2690 - C2689) * C33283 +
            (C2287 * C1840 - C2282 * C1845 + C2288 * C4516 - C2283 * C4522 +
             C2289 * C4517 - C2284 * C4523) *
                C33286 +
            (C2287 * C1846 - C2282 * C1852 + C2288 * C4524 - C2283 * C4528 +
             C2289 * C4525 - C2284 * C4529) *
                C50330) *
               C50109 * C454) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50396 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C50154 * C50438 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50396 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C50234) *
              C50154 * C50439 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C50396 +
           (C33899 * C16957 +
            (C747 * C33285 + C748 * C33283 + (C517 - C516) * C33286 +
             (C519 - C518) * C50330) *
                C16958 +
            ((C750 - C749) * C33285 + (C752 - C751) * C33283 +
             (C117 * C464 - C50251 * C483) * C33286 +
             (C117 * C484 - C50251 * C494) * C50330) *
                C16959) *
               C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50396 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C50154 * C50438 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50396 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C50234) *
              C50154 * C50439 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C50396 +
           ((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C33285 +
            (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C33283 +
            (C2287 * C461 - C2282 * C477 + C2288 * C1210 - C2283 * C1216 +
             C2289 * C2656 - C2284 * C2661) *
                C33286 +
            (C2287 * C478 - C2282 * C491 + C2288 * C1217 - C2283 * C1222 +
             C2289 * C2662 - C2284 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C621)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C33285 +
            (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
            (C5439 - C5440) * C50330) *
               C16957 +
           ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
            C5446 * C50330) *
               C16958 +
           C33300 * C16959) *
              C50170 * C50154 * C113 +
          (((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
            C5454 * C50330) *
               C16957 +
           ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
            C746 * C50330) *
               C16958 +
           C33301 * C16959) *
              C50170 * C50154 * C114 +
          (C33300 * C16957 +
           (C170 * C33285 + C171 * C33283 + C11299 * C33286 + C11300 * C50330) *
               C16958 +
           ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
            (C749 - C750) * C33286 + (C751 - C752) * C50330) *
               C16959) *
              C50170 * C50154 * C115 +
          (C33301 * C16957 +
           (C174 * C33285 + C175 * C33283 + (C750 - C749) * C33286 +
            (C752 - C751) * C50330) *
               C16958 +
           ((C165 - C164) * C33285 + (C167 - C166) * C33283 +
            (C117 * C740 - C50251 * C741) * C33286 +
            (C117 * C742 - C50251 * C743) * C50330) *
               C16959) *
              C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C285 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            (C627 * C33285 + C628 * C33283 + C11142 * C33286 +
             C11143 * C50330) *
                C16959) *
               C50170 * C286 +
           (((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C50170 * C287) *
              C288 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C285 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C286 +
           (((C344 - C343) * C33285 + (C346 - C345) * C33283 +
             (C5272 - C5271) * C33286 + (C5274 - C5273) * C50330) *
                C16957 +
            ((C348 - C347) * C33285 + (C350 - C349) * C33283 +
             (C10845 - C10844) * C33286 + (C10847 - C10846) * C50330) *
                C16958 +
            ((C352 - C351) * C33285 + (C354 - C353) * C33283 +
             (C117 * C1558 - C50251 * C1565) * C33286 +
             (C117 * C1566 - C50251 * C1570) * C50330) *
                C16959) *
               C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C2282 * C465 - C2287 * C455 + C2283 * C893 - C2288 * C888 +
            C2284 * C1559 - C2289 * C1555) *
               C33286 +
           (C2282 * C485 - C2287 * C466 + C2283 * C903 - C2288 * C894 +
            C2284 * C1567 - C2289 * C1560) *
               C50330) *
              C50109 * C50170 * C50154 * C113 +
          ((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
           (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
           (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
           (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
              C50109 * C50170 * C50154 * C114 +
          ((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
           (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
           (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
           (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
              C50109 * C50170 * C50154 * C115 +
          ((C2316 - C2315 + C2318 - C2317 + C2320 - C2319) * C33285 +
           (C2322 - C2321 + C2324 - C2323 + C2326 - C2325) * C33283 +
           (C2287 * C458 - C2282 * C471 + C2288 * C891 - C2283 * C899 +
            C2289 * C1558 - C2284 * C1565) *
               C33286 +
           (C2287 * C472 - C2282 * C488 + C2288 * C900 - C2283 * C906 +
            C2289 * C1566 - C2284 * C1570) *
               C50330) *
              C50109 * C50170 * C50154 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C2282 * C465 - C2287 * C455 + C2283 * C893 - C2288 * C888 +
             C2284 * C1559 - C2289 * C1555) *
                C33286 +
            (C2282 * C485 - C2287 * C466 + C2283 * C903 - C2288 * C894 +
             C2284 * C1567 - C2289 * C1560) *
                C50330) *
               C50109 * C50170 * C285 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C2287 * C888 - C2282 * C893 + C2288 * C1555 - C2283 * C1559 +
             C2289 * C3200 - C2284 * C3203) *
                C33286 +
            (C2287 * C894 - C2282 * C903 + C2288 * C1560 - C2283 * C1567 +
             C2289 * C3204 - C2284 * C3209) *
                C50330) *
               C50109 * C50170 * C286 +
           ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
             C2284 * C4118 - C2289 * C4116) *
                C33286 +
            (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
             C2284 * C4122 - C2289 * C4119) *
                C50330) *
               C50109 * C50170 * C287) *
              C288 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C285 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C286 +
           ((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C33285 +
            (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C33283 +
            (C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
             C2289 * C4117 - C2284 * C4120) *
                C33286 +
            (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
             C2289 * C4121 - C2284 * C4123) *
                C50330) *
               C50109 * C50170 * C287) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C50440 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50170 * C50441 +
           (((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C50170 * C1324) *
              C50387 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C50440 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C50441 +
           (((C344 - C343) * C33285 + (C346 - C345) * C33283 +
             (C5272 - C5271) * C33286 + (C5274 - C5273) * C50330) *
                C16957 +
            ((C348 - C347) * C33285 + (C350 - C349) * C33283 +
             (C10845 - C10844) * C33286 + (C10847 - C10846) * C50330) *
                C16958 +
            ((C352 - C351) * C33285 + (C354 - C353) * C33283 +
             (C117 * C1558 - C50251 * C1565) * C33286 +
             (C117 * C1566 - C50251 * C1570) * C50330) *
                C16959) *
               C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50170 * C50440 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50170 * C50441 +
           ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
             C2284 * C4118 - C2289 * C4116) *
                C33286 +
            (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
             C2284 * C4122 - C2289 * C4119) *
                C50330) *
               C50109 * C50170 * C1324) *
              C50387 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C50440 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C50441 +
           ((C2498 - C2497 + C2500 - C2499 + C2502 - C2501) * C33285 +
            (C2504 - C2503 + C2506 - C2505 + C2508 - C2507) * C33283 +
            (C2287 * C1556 - C2282 * C1561 + C2288 * C3201 - C2283 * C3205 +
             C2289 * C4117 - C2284 * C4120) *
                C33286 +
            (C2287 * C1562 - C2282 * C1568 + C2288 * C3206 - C2283 * C3210 +
             C2289 * C4121 - C2284 * C4123) *
                C50330) *
               C50109 * C50170 * C1324) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50396 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C50440 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50396 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C50234) *
              C50441 +
          ((((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C50396 +
           (((C6886 - C6885) * C33285 + (C6888 - C6887) * C33283 +
             (C6890 - C6889) * C33286 + (C6892 - C6891) * C50330) *
                C16957 +
            ((C5272 - C5271) * C33285 + (C5274 - C5273) * C33283 +
             (C5276 - C5275) * C33286 + (C5278 - C5277) * C50330) *
                C16958 +
            ((C10845 - C10844) * C33285 + (C10847 - C10846) * C33283 +
             (C117 * C2656 - C50251 * C2661) * C33286 +
             (C117 * C2662 - C50251 * C2665) * C50330) *
                C16959) *
               C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50396 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C50440 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50396 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C50234) *
              C50441 +
          (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C37646 - C37647 + C37648 - C37649 + C37650 - C37651) * C33286 +
            (C37652 - C37653 + C37654 - C37655 + C37656 - C37657) * C50330) *
               C50109 * C50396 +
           ((C37647 - C37646 + C37649 - C37648 + C37651 - C37650) * C33285 +
            (C37653 - C37652 + C37655 - C37654 + C37657 - C37656) * C33283 +
            (C2287 * C2654 - C2282 * C2657 + C2288 * C3622 - C2283 * C3624 +
             C2289 * C20519 - C2284 * C20520) *
                C33286 +
            (C2287 * C2658 - C2282 * C2663 + C2288 * C3625 - C2283 * C3628 +
             C2289 * C20521 - C2284 * C20522) *
                C50330) *
               C50109 * C50234) *
              C1324) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C33285 +
            (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
            (C5439 - C5440) * C50330) *
               C16957 +
           ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
            C5446 * C50330) *
               C16958 +
           C33300 * C16959) *
              C50170 * C1089 +
          (((C117 * C290 - C50251 * C300) * C33285 +
            (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
            (C5977 - C5978) * C50330) *
               C16957 +
           ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
            C5984 * C50330) *
               C16958 +
           C33746 * C16959) *
              C50170 * C1090 +
          (((C50251 * C308 - C117 * C294) * C33285 +
            (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
            (C6887 - C6888) * C50330) *
               C16957 +
           ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
            (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
               C16958 +
           ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
            (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
               C16959) *
              C50170 * C1091 +
          (((C117 * C1094 - C50251 * C1098) * C33285 +
            (C117 * C1099 - C50251 * C1106) * C33283 +
            (C117 * C3200 - C50251 * C3203) * C33286 +
            (C117 * C3204 - C50251 * C3209) * C50330) *
               C16957 +
           ((C117 * C1095 - C50251 * C1100) * C33285 +
            (C117 * C1101 - C50251 * C1107) * C33283 +
            (C117 * C3201 - C50251 * C3205) * C33286 +
            (C117 * C3206 - C50251 * C3210) * C50330) *
               C16958 +
           ((C117 * C1096 - C50251 * C1102) * C33285 +
            (C117 * C1103 - C50251 * C1108) * C33283 +
            (C117 * C3202 - C50251 * C3207) * C33286 +
            (C117 * C3208 - C50251 * C3211) * C50330) *
               C16959) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C1018 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50170 * C50206) *
              C1020 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C1018 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C50206) *
              C1021 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C50170 * C1018 +
           (C33746 * C16957 +
            (C629 * C33285 + C630 * C33283 + (C918 - C917) * C33286 +
             (C920 - C919) * C50330) *
                C16958 +
            ((C632 - C631) * C33285 + (C634 - C633) * C33283 +
             (C117 * C892 - C50251 * C901) * C33286 +
             (C117 * C902 - C50251 * C907) * C50330) *
                C16959) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C452 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C453 +
           ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
             (C5452 - C5451) * C50330) *
                C16957 +
            (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 +
             C5476 * C50330) *
                C16958 +
            (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
             (C5469 - C5470) * C50330) *
                C16959) *
               C454) *
              C1018 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C452 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C453 +
           ((C6393 * C33285 + C6394 * C33283 + (C6396 - C6395) * C33286 +
             (C6398 - C6397) * C50330) *
                C16957 +
            (C5985 * C33285 + C5986 * C33283 + (C5992 - C5991) * C33286 +
             (C5994 - C5993) * C50330) *
                C16958 +
            ((C5624 - C5623) * C33285 + (C5626 - C5625) * C33283 +
             (C117 * C5970 - C50251 * C5971) * C33286 +
             (C117 * C5972 - C50251 * C5973) * C50330) *
                C16959) *
               C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C33285 +
            (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C33283 +
            (C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
             C2289 * C3202 - C2284 * C3207) *
                C33286 +
            (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
             C2289 * C3208 - C2284 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
           (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
              C50109 * C50170 * C1089 +
          ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
            C2289 * C1094 - C2284 * C1098) *
               C33285 +
           (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
            C2289 * C1099 - C2284 * C1106) *
               C33283 +
           (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
           (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
              C50109 * C50170 * C1090 +
          ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
            C2284 * C2475 - C2289 * C2472) *
               C33285 +
           (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
            C2284 * C2481 - C2289 * C2476) *
               C33283 +
           (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
            C2284 * C4118 - C2289 * C4116) *
               C33286 +
           (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
            C2284 * C4122 - C2289 * C4119) *
               C50330) *
              C50109 * C50170 * C1091 +
          ((C2287 * C1094 - C2282 * C1098 + C2288 * C2472 - C2283 * C2475 +
            C2289 * C3468 - C2284 * C3470) *
               C33285 +
           (C2287 * C1099 - C2282 * C1106 + C2288 * C2476 - C2283 * C2481 +
            C2289 * C3471 - C2284 * C3474) *
               C33283 +
           (C2287 * C3200 - C2282 * C3203 + C2288 * C4116 - C2283 * C4118 +
            C2289 * C20849 - C2284 * C20850) *
               C33286 +
           (C2287 * C3204 - C2282 * C3209 + C2288 * C4119 - C2283 * C4122 +
            C2289 * C20851 - C2284 * C20852) *
               C50330) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C452 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C453 +
           ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
            (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
            (C2282 * C1843 - C2287 * C1839 + C2283 * C4518 - C2288 * C4514 +
             C2284 * C4519 - C2289 * C4515) *
                C33286 +
            (C2282 * C1851 - C2287 * C1844 + C2283 * C4526 - C2288 * C4520 +
             C2284 * C4527 - C2289 * C4521) *
                C50330) *
               C50109 * C454) *
              C1018 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C452 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C453 +
           ((C37149 - C37148 + C37151 - C37150 + C37153 - C37152) * C33285 +
            (C37155 - C37154 + C37157 - C37156 + C37159 - C37158) * C33283 +
            (C2287 * C4514 - C2282 * C4518 + C2288 * C4515 - C2283 * C4519 +
             C2289 * C21115 - C2284 * C21116) *
                C33286 +
            (C2287 * C4520 - C2282 * C4526 + C2288 * C4521 - C2283 * C4527 +
             C2289 * C21117 - C2284 * C21118) *
                C50330) *
               C50109 * C454) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C33285 +
              (C50251 * C140 - C117 * C127) * C33283 +
              (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                 C16957 +
             ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
              C5446 * C50330) *
                 C16958 +
             C33300 * C16959) *
                C50396 +
            (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
              (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                 C16957 +
             (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
              C5456 * C50330) *
                 C16958 +
             C33899 * C16959) *
                C50234) *
               C1018 +
           ((((C117 * C290 - C50251 * C300) * C33285 +
              (C117 * C301 - C50251 * C320) * C33283 +
              (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                 C16957 +
             ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
              C5984 * C50330) *
                 C16958 +
             C33746 * C16959) *
                C50396 +
            (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
              (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                 C16957 +
             (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
              C5990 * C50330) *
                 C16958 +
             (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
              (C5625 - C5626) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
              C5454 * C50330) *
                 C16957 +
             ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
              C746 * C50330) *
                 C16958 +
             C33301 * C16959) *
                C50396 +
            ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
              C5448 * C50330) *
                 C16957 +
             (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
              C5776 * C50330) *
                 C16958 +
             (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
              (C518 - C519) * C50330) *
                 C16959) *
                C50234) *
               C1018 +
           ((((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
              C5988 * C50330) *
                 C16957 +
             ((C336 - C335) * C33285 + (C338 - C337) * C33283 +
              C11498 * C33286 + C11499 * C50330) *
                 C16958 +
             ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
              (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                 C16959) *
                C50396 +
            ((C5983 * C33285 + C5984 * C33283 + C5985 * C33286 +
              C5986 * C50330) *
                 C16957 +
             (C11142 * C33285 + C11143 * C33283 + (C5624 - C5623) * C33286 +
              (C5626 - C5625) * C50330) *
                 C16958 +
             ((C918 - C917) * C33285 + (C920 - C919) * C33283 +
              (C117 * C1211 - C50251 * C1218) * C33286 +
              (C117 * C1219 - C50251 * C1223) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C33285 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C33283 +
             (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
             (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
                C50109 * C50396 +
            ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
             (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
             (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
             (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
                C50109 * C50234) *
               C1018 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C33285 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C33283 +
             (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
             (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
                C50109 * C50396 +
            ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
             (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
             (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
             (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
                C50109 * C50396 +
            ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
             (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
                C50109 * C50234) *
               C1018 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
             (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
                C50109 * C50396 +
            ((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C33285 +
             (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C33283 +
             (C2287 * C1209 - C2282 * C1214 + C2288 * C2655 - C2283 * C2659 +
              C2289 * C3623 - C2284 * C3626) *
                 C33286 +
             (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 - C2283 * C2664 +
              C2289 * C3627 - C2284 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50170 * C1018 +
           (((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50170 * C50206) *
              C1020 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50170 * C1018 +
           (((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
             C5988 * C50330) *
                C16957 +
            ((C336 - C335) * C33285 + (C338 - C337) * C33283 + C11498 * C33286 +
             C11499 * C50330) *
                C16958 +
            ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
             (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                C16959) *
               C50170 * C50206) *
              C1021 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C50170 * C1018 +
           (C33746 * C16957 +
            (C629 * C33285 + C630 * C33283 + (C918 - C917) * C33286 +
             (C920 - C919) * C50330) *
                C16958 +
            ((C632 - C631) * C33285 + (C634 - C633) * C33283 +
             (C117 * C892 - C50251 * C901) * C33286 +
             (C117 * C902 - C50251 * C907) * C50330) *
                C16959) *
               C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C33285 +
            (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
            (C5439 - C5440) * C50330) *
               C16957 +
           ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
            C5446 * C50330) *
               C16958 +
           C33300 * C16959) *
              C50170 * C1089 +
          (((C117 * C290 - C50251 * C300) * C33285 +
            (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
            (C5977 - C5978) * C50330) *
               C16957 +
           ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
            C5984 * C50330) *
               C16958 +
           C33746 * C16959) *
              C50170 * C1090 +
          (((C50251 * C308 - C117 * C294) * C33285 +
            (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
            (C6887 - C6888) * C50330) *
               C16957 +
           ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
            (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
               C16958 +
           ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
            (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
               C16959) *
              C50170 * C1091 +
          (((C117 * C1094 - C50251 * C1098) * C33285 +
            (C117 * C1099 - C50251 * C1106) * C33283 +
            (C117 * C3200 - C50251 * C3203) * C33286 +
            (C117 * C3204 - C50251 * C3209) * C50330) *
               C16957 +
           ((C117 * C1095 - C50251 * C1100) * C33285 +
            (C117 * C1101 - C50251 * C1107) * C33283 +
            (C117 * C3201 - C50251 * C3205) * C33286 +
            (C117 * C3206 - C50251 * C3210) * C50330) *
               C16958 +
           ((C117 * C1096 - C50251 * C1102) * C33285 +
            (C117 * C1103 - C50251 * C1108) * C33283 +
            (C117 * C3202 - C50251 * C3207) * C33286 +
            (C117 * C3208 - C50251 * C3211) * C50330) *
               C16959) *
              C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50170 * C50206) *
              C1020 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
            (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
            (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
            (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
               C50109 * C50170 * C50206) *
              C1021 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C50170 * C1018 +
           ((C2838 - C2837 + C2840 - C2839 + C2842 - C2841) * C33285 +
            (C2844 - C2843 + C2846 - C2845 + C2848 - C2847) * C33283 +
            (C2287 * C890 - C2282 * C897 + C2288 * C1557 - C2283 * C1563 +
             C2289 * C3202 - C2284 * C3207) *
                C33286 +
            (C2287 * C898 - C2282 * C905 + C2288 * C1564 - C2283 * C1569 +
             C2289 * C3208 - C2284 * C3211) *
                C50330) *
               C50109 * C50170 * C50206) *
              C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
           (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
              C50109 * C50170 * C1089 +
          ((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
            C2289 * C1094 - C2284 * C1098) *
               C33285 +
           (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
            C2289 * C1099 - C2284 * C1106) *
               C33283 +
           (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
           (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
              C50109 * C50170 * C1090 +
          ((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
            C2284 * C2475 - C2289 * C2472) *
               C33285 +
           (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
            C2284 * C2481 - C2289 * C2476) *
               C33283 +
           (C2282 * C1559 - C2287 * C1555 + C2283 * C3203 - C2288 * C3200 +
            C2284 * C4118 - C2289 * C4116) *
               C33286 +
           (C2282 * C1567 - C2287 * C1560 + C2283 * C3209 - C2288 * C3204 +
            C2284 * C4122 - C2289 * C4119) *
               C50330) *
              C50109 * C50170 * C1091 +
          ((C2287 * C1094 - C2282 * C1098 + C2288 * C2472 - C2283 * C2475 +
            C2289 * C3468 - C2284 * C3470) *
               C33285 +
           (C2287 * C1099 - C2282 * C1106 + C2288 * C2476 - C2283 * C2481 +
            C2289 * C3471 - C2284 * C3474) *
               C33283 +
           (C2287 * C3200 - C2282 * C3203 + C2288 * C4116 - C2283 * C4118 +
            C2289 * C20849 - C2284 * C20850) *
               C33286 +
           (C2287 * C3204 - C2282 * C3209 + C2288 * C4119 - C2283 * C4122 +
            C2289 * C20851 - C2284 * C20852) *
               C50330) *
              C50109 * C50170 * C1092) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C50251 * C126 - C117 * C119) * C33285 +
              (C50251 * C140 - C117 * C127) * C33283 +
              (C5437 - C5438) * C33286 + (C5439 - C5440) * C50330) *
                 C16957 +
             ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
              C5446 * C50330) *
                 C16958 +
             C33300 * C16959) *
                C1669 +
            (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
              (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                 C16957 +
             (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
              C5456 * C50330) *
                 C16958 +
             C33899 * C16959) *
                C50234) *
               C50395 +
           ((((C117 * C290 - C50251 * C300) * C33285 +
              (C117 * C301 - C50251 * C320) * C33283 +
              (C5975 - C5976) * C33286 + (C5977 - C5978) * C50330) *
                 C16957 +
             ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
              C5984 * C50330) *
                 C16958 +
             C33746 * C16959) *
                C1669 +
            (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
              (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                 C16957 +
             (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
              C5990 * C50330) *
                 C16958 +
             (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
              (C5625 - C5626) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50387 +
          (((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
              C5454 * C50330) *
                 C16957 +
             ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
              C746 * C50330) *
                 C16958 +
             C33301 * C16959) *
                C1669 +
            ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
              C5448 * C50330) *
                 C16957 +
             (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
              C5776 * C50330) *
                 C16958 +
             (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
              (C518 - C519) * C50330) *
                 C16959) *
                C50234) *
               C50395 +
           ((((C332 - C331) * C33285 + (C334 - C333) * C33283 + C5987 * C33286 +
              C5988 * C50330) *
                 C16957 +
             ((C336 - C335) * C33285 + (C338 - C337) * C33283 +
              C11498 * C33286 + C11499 * C50330) *
                 C16958 +
             ((C340 - C339) * C33285 + (C342 - C341) * C33283 +
              (C917 - C918) * C33286 + (C919 - C920) * C50330) *
                 C16959) *
                C1669 +
            ((C5983 * C33285 + C5984 * C33283 + C5985 * C33286 +
              C5986 * C50330) *
                 C16957 +
             (C11142 * C33285 + C11143 * C33283 + (C5624 - C5623) * C33286 +
              (C5626 - C5625) * C50330) *
                 C16958 +
             ((C918 - C917) * C33285 + (C920 - C919) * C33283 +
              (C117 * C1211 - C50251 * C1218) * C33286 +
              (C117 * C1219 - C50251 * C1223) * C50330) *
                 C16959) *
                C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
              C2284 * C308 - C2289 * C294) *
                 C33285 +
             (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
              C2284 * C324 - C2289 * C309) *
                 C33283 +
             (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
             (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
                C50109 * C1669 +
            ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
             (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
             (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
             (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
              C2289 * C1094 - C2284 * C1098) *
                 C33285 +
             (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
              C2289 * C1099 - C2284 * C1106) *
                 C33283 +
             (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
             (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
                C50109 * C1669 +
            ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
             (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
             (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
             (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
                C50109 * C50234) *
               C50206) *
              C50387 +
          ((((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
             (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
             (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
                C50109 * C1669 +
            ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
             (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
             (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
             (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
                C50109 * C50234) *
               C50395 +
           (((C2486 - C2485 + C2488 - C2487 + C2490 - C2489) * C33285 +
             (C2492 - C2491 + C2494 - C2493 + C2496 - C2495) * C33283 +
             (C3213 - C3214 + C3215 - C3216 + C3217 - C3218) * C33286 +
             (C3219 - C3220 + C3221 - C3222 + C3223 - C3224) * C50330) *
                C50109 * C1669 +
            ((C3214 - C3213 + C3216 - C3215 + C3218 - C3217) * C33285 +
             (C3220 - C3219 + C3222 - C3221 + C3224 - C3223) * C33283 +
             (C2287 * C1209 - C2282 * C1214 + C2288 * C2655 - C2283 * C2659 +
              C2289 * C3623 - C2284 * C3626) *
                 C33286 +
             (C2287 * C1215 - C2282 * C1221 + C2288 * C2660 - C2283 * C2664 +
              C2289 * C3627 - C2284 * C3629) *
                 C50330) *
                C50109 * C50234) *
               C50206) *
              C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50442 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50443 +
           ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
             (C5452 - C5451) * C50330) *
                C16957 +
            (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 +
             C5476 * C50330) *
                C16958 +
            (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
             (C5469 - C5470) * C50330) *
                C16959) *
               C2085) *
              C50395 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C50442 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C50443 +
           ((C6393 * C33285 + C6394 * C33283 + (C6396 - C6395) * C33286 +
             (C6398 - C6397) * C50330) *
                C16957 +
            (C5985 * C33285 + C5986 * C33283 + (C5992 - C5991) * C33286 +
             (C5994 - C5993) * C50330) *
                C16958 +
            ((C5624 - C5623) * C33285 + (C5626 - C5625) * C33283 +
             (C117 * C5970 - C50251 * C5971) * C33286 +
             (C117 * C5972 - C50251 * C5973) * C50330) *
                C16959) *
               C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50442 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50443 +
           ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
            (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
            (C38048 - C38049 + C38050 - C38051 + C38052 - C38053) * C33286 +
            (C38054 - C38055 + C38056 - C38057 + C38058 - C38059) * C50330) *
               C50109 * C2085) *
              C50395 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C50442 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C50443 +
           ((C37149 - C37148 + C37151 - C37150 + C37153 - C37152) * C33285 +
            (C37155 - C37154 + C37157 - C37156 + C37159 - C37158) * C33283 +
            (C2287 * C4514 - C2282 * C4518 + C2288 * C4515 - C2283 * C4519 +
             C2289 * C21115 - C2284 * C21116) *
                C33286 +
            (C2287 * C4520 - C2282 * C4526 + C2288 * C4521 - C2283 * C4527 +
             C2289 * C21117 - C2284 * C21118) *
                C50330) *
               C50109 * C2085) *
              C50206) *
         C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C1669 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C1669 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C1669 +
           (((C6886 - C6885) * C33285 + (C6888 - C6887) * C33283 +
             (C6890 - C6889) * C33286 + (C6892 - C6891) * C50330) *
                C16957 +
            ((C5272 - C5271) * C33285 + (C5274 - C5273) * C33283 +
             (C5276 - C5275) * C33286 + (C5278 - C5277) * C50330) *
                C16958 +
            ((C10845 - C10844) * C33285 + (C10847 - C10846) * C33283 +
             (C117 * C2656 - C50251 * C2661) * C33286 +
             (C117 * C2662 - C50251 * C2665) * C50330) *
                C16959) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C1669 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C1669 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C50234) *
              C50154 * C1021 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C1669 +
           (C33899 * C16957 +
            (C747 * C33285 + C748 * C33283 + (C517 - C516) * C33286 +
             (C519 - C518) * C50330) *
                C16958 +
            ((C750 - C749) * C33285 + (C752 - C751) * C33283 +
             (C117 * C464 - C50251 * C483) * C33286 +
             (C117 * C484 - C50251 * C494) * C50330) *
                C16959) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C50251 * C126 - C117 * C119) * C33285 +
            (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
            (C5439 - C5440) * C50330) *
               C16957 +
           ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
            C5446 * C50330) *
               C16958 +
           C33300 * C16959) *
              C1835 +
          (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
            (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
               C16957 +
           (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 + C5456 * C50330) *
               C16958 +
           C33899 * C16959) *
              C1836 +
          ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
            (C5452 - C5451) * C50330) *
               C16957 +
           (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 + C5476 * C50330) *
               C16958 +
           (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
            (C5469 - C5470) * C50330) *
               C16959) *
              C1837 +
          ((C7291 * C33285 + C7292 * C33283 + (C7294 - C7293) * C33286 +
            (C7296 - C7295) * C50330) *
               C16957 +
           (C5473 * C33285 + C5474 * C33283 + (C5462 - C5461) * C33286 +
            (C5464 - C5463) * C50330) *
               C16958 +
           ((C5468 - C5467) * C33285 + (C5470 - C5469) * C33283 +
            (C117 * C5426 - C50251 * C5431) * C33286 +
            (C117 * C5432 - C50251 * C5435) * C50330) *
               C16959) *
              C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C1669 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C1669 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C1669 +
           ((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C33285 +
            (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C33283 +
            (C2287 * C461 - C2282 * C477 + C2288 * C1210 - C2283 * C1216 +
             C2289 * C2656 - C2284 * C2661) *
                C33286 +
            (C2287 * C478 - C2282 * C491 + C2288 * C1217 - C2283 * C1222 +
             C2289 * C2662 - C2284 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C1669 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C285 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C1669 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C50234) *
              C286 +
          (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C37646 - C37647 + C37648 - C37649 + C37650 - C37651) * C33286 +
            (C37652 - C37653 + C37654 - C37655 + C37656 - C37657) * C50330) *
               C50109 * C1669 +
           ((C37647 - C37646 + C37649 - C37648 + C37651 - C37650) * C33285 +
            (C37653 - C37652 + C37655 - C37654 + C37657 - C37656) * C33283 +
            (C2287 * C2654 - C2282 * C2657 + C2288 * C3622 - C2283 * C3624 +
             C2289 * C20519 - C2284 * C20520) *
                C33286 +
            (C2287 * C2658 - C2282 * C2663 + C2288 * C3625 - C2283 * C3628 +
             C2289 * C20521 - C2284 * C20522) *
                C50330) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
            C2284 * C308 - C2289 * C294) *
               C33285 +
           (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
            C2284 * C324 - C2289 * C309) *
               C33283 +
           (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
           (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
              C50109 * C1835 +
          ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
           (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
           (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
           (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
              C50109 * C1836 +
          ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
           (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
           (C38048 - C38049 + C38050 - C38051 + C38052 - C38053) * C33286 +
           (C38054 - C38055 + C38056 - C38057 + C38058 - C38059) * C50330) *
              C50109 * C1837 +
          ((C38049 - C38048 + C38051 - C38050 + C38053 - C38052) * C33285 +
           (C38055 - C38054 + C38057 - C38056 + C38059 - C38058) * C33283 +
           (C2287 * C5424 - C2282 * C5427 + C2288 * C6384 - C2283 * C6386 +
            C2289 * C22779 - C2284 * C22780) *
               C33286 +
           (C2287 * C5428 - C2282 * C5433 + C2288 * C6387 - C2283 * C6390 +
            C2289 * C22781 - C2284 * C22782) *
               C50330) *
              C50109 * C1838) *
         C50154 * C50135) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C50442 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50443 +
           ((C5471 * C33285 + C5472 * C33283 + (C5450 - C5449) * C33286 +
             (C5452 - C5451) * C50330) *
                C16957 +
            (C5447 * C33285 + C5448 * C33283 + C5475 * C33286 +
             C5476 * C50330) *
                C16958 +
            (C5775 * C33285 + C5776 * C33283 + (C5467 - C5468) * C33286 +
             (C5469 - C5470) * C50330) *
                C16959) *
               C2085) *
              C50154 * C50387 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C50442 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C50443 +
           ((C5455 * C33285 + C5456 * C33283 + C5473 * C33286 +
             C5474 * C50330) *
                C16957 +
            (C5465 * C33285 + C5466 * C33283 + (C5468 - C5467) * C33286 +
             (C5470 - C5469) * C50330) *
                C16958 +
            ((C517 - C516) * C33285 + (C519 - C518) * C33283 +
             (C117 * C1842 - C50251 * C1849) * C33286 +
             (C117 * C1850 - C50251 * C1854) * C50330) *
                C16959) *
               C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C50442 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50443 +
           ((C36249 - C36248 + C36251 - C36250 + C36253 - C36252) * C33285 +
            (C36255 - C36254 + C36257 - C36256 + C36259 - C36258) * C33283 +
            (C38048 - C38049 + C38050 - C38051 + C38052 - C38053) * C33286 +
            (C38054 - C38055 + C38056 - C38057 + C38058 - C38059) * C50330) *
               C50109 * C2085) *
              C50154 * C50387 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C50442 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C50443 +
           ((C2680 - C2679 + C2682 - C2681 + C2684 - C2683) * C33285 +
            (C2686 - C2685 + C2688 - C2687 + C2690 - C2689) * C33283 +
            (C2287 * C1840 - C2282 * C1845 + C2288 * C4516 - C2283 * C4522 +
             C2289 * C4517 - C2284 * C4523) *
                C33286 +
            (C2287 * C1846 - C2282 * C1852 + C2288 * C4524 - C2283 * C4528 +
             C2289 * C4525 - C2284 * C4529) *
                C50330) *
               C50109 * C2085) *
              C50154 * C50141)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C1669 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C50154 * C1020 +
          ((((C149 - C148) * C33285 + (C151 - C150) * C33283 + C5453 * C33286 +
             C5454 * C50330) *
                C16957 +
            ((C153 - C152) * C33285 + (C155 - C154) * C33283 + C745 * C33286 +
             C746 * C50330) *
                C16958 +
            C33301 * C16959) *
               C1669 +
           ((C5445 * C33285 + C5446 * C33283 + C5447 * C33286 +
             C5448 * C50330) *
                C16957 +
            (C5773 * C33285 + C5774 * C33283 + C5775 * C33286 +
             C5776 * C50330) *
                C16958 +
            (C11299 * C33285 + C11300 * C33283 + (C516 - C517) * C33286 +
             (C518 - C519) * C50330) *
                C16959) *
               C50234) *
              C50154 * C1021 +
          ((C33300 * C16957 +
            (C170 * C33285 + C171 * C33283 + C11299 * C33286 +
             C11300 * C50330) *
                C16958 +
            ((C161 - C160) * C33285 + (C163 - C162) * C33283 +
             (C749 - C750) * C33286 + (C751 - C752) * C50330) *
                C16959) *
               C1669 +
           (C33899 * C16957 +
            (C747 * C33285 + C748 * C33283 + (C517 - C516) * C33286 +
             (C519 - C518) * C50330) *
                C16958 +
            ((C750 - C749) * C33285 + (C752 - C751) * C33283 +
             (C117 * C464 - C50251 * C483) * C33286 +
             (C117 * C484 - C50251 * C494) * C50330) *
                C16959) *
               C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C50251 * C126 - C117 * C119) * C33285 +
             (C50251 * C140 - C117 * C127) * C33283 + (C5437 - C5438) * C33286 +
             (C5439 - C5440) * C50330) *
                C16957 +
            ((C148 - C149) * C33285 + (C150 - C151) * C33283 + C5445 * C33286 +
             C5446 * C50330) *
                C16958 +
            C33300 * C16959) *
               C1669 +
           (((C5438 - C5437) * C33285 + (C5440 - C5439) * C33283 +
             (C5442 - C5441) * C33286 + (C5444 - C5443) * C50330) *
                C16957 +
            (C5453 * C33285 + C5454 * C33283 + C5455 * C33286 +
             C5456 * C50330) *
                C16958 +
            C33899 * C16959) *
               C50234) *
              C285 +
          ((((C117 * C290 - C50251 * C300) * C33285 +
             (C117 * C301 - C50251 * C320) * C33283 + (C5975 - C5976) * C33286 +
             (C5977 - C5978) * C50330) *
                C16957 +
            ((C331 - C332) * C33285 + (C333 - C334) * C33283 + C5983 * C33286 +
             C5984 * C50330) *
                C16958 +
            C33746 * C16959) *
               C1669 +
           (((C5976 - C5975) * C33285 + (C5978 - C5977) * C33283 +
             (C5980 - C5979) * C33286 + (C5982 - C5981) * C50330) *
                C16957 +
            (C5987 * C33285 + C5988 * C33283 + C5989 * C33286 +
             C5990 * C50330) *
                C16958 +
            (C11498 * C33285 + C11499 * C33283 + (C5623 - C5624) * C33286 +
             (C5625 - C5626) * C50330) *
                C16959) *
               C50234) *
              C286 +
          ((((C50251 * C308 - C117 * C294) * C33285 +
             (C50251 * C324 - C117 * C309) * C33283 + (C6885 - C6886) * C33286 +
             (C6887 - C6888) * C50330) *
                C16957 +
            ((C343 - C344) * C33285 + (C345 - C346) * C33283 +
             (C5271 - C5272) * C33286 + (C5273 - C5274) * C50330) *
                C16958 +
            ((C347 - C348) * C33285 + (C349 - C350) * C33283 +
             (C10844 - C10845) * C33286 + (C10846 - C10847) * C50330) *
                C16959) *
               C1669 +
           (((C6886 - C6885) * C33285 + (C6888 - C6887) * C33283 +
             (C6890 - C6889) * C33286 + (C6892 - C6891) * C50330) *
                C16957 +
            ((C5272 - C5271) * C33285 + (C5274 - C5273) * C33283 +
             (C5276 - C5275) * C33286 + (C5278 - C5277) * C50330) *
                C16958 +
            ((C10845 - C10844) * C33285 + (C10847 - C10846) * C33283 +
             (C117 * C2656 - C50251 * C2661) * C33286 +
             (C117 * C2662 - C50251 * C2665) * C50330) *
                C16959) *
               C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C1669 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C50154 * C1020 +
          (((C2292 - C2291 + C2294 - C2293 + C2296 - C2295) * C33285 +
            (C2298 - C2297 + C2300 - C2299 + C2302 - C2301) * C33283 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C33286 +
            (C2673 - C2674 + C2675 - C2676 + C2677 - C2678) * C50330) *
               C50109 * C1669 +
           ((C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C33285 +
            (C2674 - C2673 + C2676 - C2675 + C2678 - C2677) * C33283 +
            (C2679 - C2680 + C2681 - C2682 + C2683 - C2684) * C33286 +
            (C2685 - C2686 + C2687 - C2688 + C2689 - C2690) * C50330) *
               C50109 * C50234) *
              C50154 * C1021 +
          (((C2304 - C2303 + C2306 - C2305 + C2308 - C2307) * C33285 +
            (C2310 - C2309 + C2312 - C2311 + C2314 - C2313) * C33283 +
            (C2995 - C2996 + C2997 - C2998 + C2999 - C3000) * C33286 +
            (C3001 - C3002 + C3003 - C3004 + C3005 - C3006) * C50330) *
               C50109 * C1669 +
           ((C2996 - C2995 + C2998 - C2997 + C3000 - C2999) * C33285 +
            (C3002 - C3001 + C3004 - C3003 + C3006 - C3005) * C33283 +
            (C2287 * C461 - C2282 * C477 + C2288 * C1210 - C2283 * C1216 +
             C2289 * C2656 - C2284 * C2661) *
                C33286 +
            (C2287 * C478 - C2282 * C491 + C2288 * C1217 - C2283 * C1222 +
             C2289 * C2662 - C2284 * C2665) *
                C50330) *
               C50109 * C50234) *
              C50154 * C1022)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2282 * C126 - C2287 * C119 + C2283 * C300 - C2288 * C290 +
             C2284 * C308 - C2289 * C294) *
                C33285 +
            (C2282 * C140 - C2287 * C127 + C2283 * C320 - C2288 * C301 +
             C2284 * C324 - C2289 * C309) *
                C33283 +
            (C36236 - C36237 + C36238 - C36239 + C36240 - C36241) * C33286 +
            (C36242 - C36243 + C36244 - C36245 + C36246 - C36247) * C50330) *
               C50109 * C1669 +
           ((C36237 - C36236 + C36239 - C36238 + C36241 - C36240) * C33285 +
            (C36243 - C36242 + C36245 - C36244 + C36247 - C36246) * C33283 +
            (C36248 - C36249 + C36250 - C36251 + C36252 - C36253) * C33286 +
            (C36254 - C36255 + C36256 - C36257 + C36258 - C36259) * C50330) *
               C50109 * C50234) *
              C285 +
          (((C2287 * C290 - C2282 * C300 + C2288 * C294 - C2283 * C308 +
             C2289 * C1094 - C2284 * C1098) *
                C33285 +
            (C2287 * C301 - C2282 * C320 + C2288 * C309 - C2283 * C324 +
             C2289 * C1099 - C2284 * C1106) *
                C33283 +
            (C36746 - C36747 + C36748 - C36749 + C36750 - C36751) * C33286 +
            (C36752 - C36753 + C36754 - C36755 + C36756 - C36757) * C50330) *
               C50109 * C1669 +
           ((C36747 - C36746 + C36749 - C36748 + C36751 - C36750) * C33285 +
            (C36753 - C36752 + C36755 - C36754 + C36757 - C36756) * C33283 +
            (C37148 - C37149 + C37150 - C37151 + C37152 - C37153) * C33286 +
            (C37154 - C37155 + C37156 - C37157 + C37158 - C37159) * C50330) *
               C50109 * C50234) *
              C286 +
          (((C2282 * C308 - C2287 * C294 + C2283 * C1098 - C2288 * C1094 +
             C2284 * C2475 - C2289 * C2472) *
                C33285 +
            (C2282 * C324 - C2287 * C309 + C2283 * C1106 - C2288 * C1099 +
             C2284 * C2481 - C2289 * C2476) *
                C33283 +
            (C37646 - C37647 + C37648 - C37649 + C37650 - C37651) * C33286 +
            (C37652 - C37653 + C37654 - C37655 + C37656 - C37657) * C50330) *
               C50109 * C1669 +
           ((C37647 - C37646 + C37649 - C37648 + C37651 - C37650) * C33285 +
            (C37653 - C37652 + C37655 - C37654 + C37657 - C37656) * C33283 +
            (C2287 * C2654 - C2282 * C2657 + C2288 * C3622 - C2283 * C3624 +
             C2289 * C20519 - C2284 * C20520) *
                C33286 +
            (C2287 * C2658 - C2282 * C2663 + C2288 * C3625 - C2283 * C3628 +
             C2289 * C20521 - C2284 * C20522) *
                C50330) *
               C50109 * C50234) *
              C287) *
         C50135) /
            (p * q * std::sqrt(p + q));
}
