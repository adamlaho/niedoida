/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AB_zz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_12_33(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49753 = ae + be;
    const double C49752 = ae * be;
    const double C49751 = zA - zB;
    const double C49760 = 0 * be;
    const double C49809 = 0 * ae;
    const double C49804 = 0 * be;
    const double C49858 = p + q;
    const double C49857 = p * q;
    const double C49864 = bs[3];
    const double C49863 = zP - zQ;
    const double C49871 = bs[4];
    const double C49869 = xP - xQ;
    const double C49879 = bs[5];
    const double C49888 = bs[6];
    const double C49899 = bs[7];
    const double C49931 = bs[2];
    const double C50012 = yP - yQ;
    const double C119 = bs[0];
    const double C50834 = xA - xB;
    const double C50859 = ce + de;
    const double C50858 = ce * de;
    const double C50857 = xC - xD;
    const double C50881 = yC - yD;
    const double C50897 = zC - zD;
    const double C50979 = yA - yB;
    const double C49761 = std::pow(C49753, 2);
    const double C49805 = 2 * C49753;
    const double C49768 = 2 * C49752;
    const double C49762 = C49752 * C49751;
    const double C50995 = std::pow(C49751, 2);
    const double C51059 = C49751 * be;
    const double C51058 = C49751 * ae;
    const double C49806 = C49751 * C49760;
    const double C49824 = -2 * C49760;
    const double C49814 = C49809 / C49753;
    const double C49859 = 2 * C49857;
    const double C49866 = std::pow(C49863, 2);
    const double C49922 = C49863 * ae;
    const double C49921 = C49863 * be;
    const double C49881 = std::pow(C49869, 2);
    const double C50039 = std::pow(C50012, 2);
    const double C50837 = C50834 * be;
    const double C50836 = C50834 * ae;
    const double C50835 = std::pow(C50834, 2);
    const double C50861 = 2 * C50859;
    const double C50871 = std::pow(C50859, 2);
    const double C50863 = C50857 * de;
    const double C50862 = C50857 * ce;
    const double C50860 = std::pow(C50857, 2);
    const double C50882 = std::pow(C50881, 2);
    const double C50934 = C50881 * de;
    const double C50933 = C50881 * ce;
    const double C50898 = std::pow(C50897, 2);
    const double C50962 = C50897 * de;
    const double C50961 = C50897 * ce;
    const double C50980 = std::pow(C50979, 2);
    const double C51031 = C50979 * be;
    const double C51030 = C50979 * ae;
    const double C49763 = 2 * C49761;
    const double C51099 = 4 * C49761;
    const double C49823 = C49761 * C49805;
    const double C50845 = std::pow(C49805, -1);
    const double C51121 = std::pow(C49805, -2);
    const double C50996 = C50995 * C49752;
    const double C49811 = C49806 / C49753;
    const double C49827 = ae * C49824;
    const double C49861 = C49859 / C49858;
    const double C140 =
        ((std::pow(zP - zQ, 2) * bs[2] * std::pow(C49859 / C49858, 2) -
          (bs[1] * C49859) / C49858) *
         C49752) /
        C49761;
    const double C120 = -(C49869 * bs[1] * C49859) / C49858;
    const double C293 = -(C50012 * bs[1] * C49859) / C49858;
    const double C482 = -(C49863 * bs[1] * C49859) / C49858;
    const double C49873 = C49866 * C49871;
    const double C49882 = C49866 * C49879;
    const double C49890 = C49866 * C49888;
    const double C49902 = C49866 * C49899;
    const double C49924 = C49871 * C49922;
    const double C49935 = C49864 * C49922;
    const double C49945 = C49879 * C49922;
    const double C49959 = C49888 * C49922;
    const double C49986 = C49899 * C49922;
    const double C127 = (-(bs[1] * C49922 * C49859) / C49858) / C49753;
    const double C49923 = C49871 * C49921;
    const double C49934 = C49864 * C49921;
    const double C49943 = C49879 * C49921;
    const double C49955 = C49888 * C49921;
    const double C49980 = C49899 * C49921;
    const double C126 = (-(bs[1] * C49921 * C49859) / C49858) / C49753;
    const double C50838 = C50835 * C49752;
    const double C50872 = std::pow(C50861, -1);
    const double C51108 = std::pow(C50861, -2);
    const double C50876 = 2 * C50871;
    const double C51106 = 4 * C50871;
    const double C50864 = C50860 * C50858;
    const double C50883 = C50882 * C50858;
    const double C50899 = C50898 * C50858;
    const double C50981 = C50980 * C49752;
    const double C49808 = C49760 / C49763;
    const double C49812 = C49804 / C49763;
    const double C50997 = C50996 / C49753;
    const double C49815 = 0 - C49811;
    const double C49865 = -C49861;
    const double C49872 = std::pow(C49861, 4);
    const double C49889 = std::pow(C49861, 6);
    const double C49930 = std::pow(C49861, 2);
    const double C141 = ((xP - xQ) *
                         (bs[2] * std::pow(C49861, 2) +
                          std::pow(zP - zQ, 2) * bs[3] * std::pow(-C49861, 3)) *
                         C49752) /
                        C49761;
    const double C50839 = C50838 / C49753;
    const double C50865 = C50864 / C50859;
    const double C50884 = C50883 / C50859;
    const double C50900 = C50899 / C50859;
    const double C50982 = C50981 / C49753;
    const double C50998 = -C50997;
    const double C49818 = C49815 * ae;
    const double C49867 = std::pow(C49865, 3);
    const double C49880 = std::pow(C49865, 5);
    const double C49900 = std::pow(C49865, 7);
    const double C49874 = C49873 * C49872;
    const double C49878 = C49871 * C49872;
    const double C49926 = C49872 * C49924;
    const double C49925 = C49872 * C49923;
    const double C49891 = C49890 * C49889;
    const double C49898 = C49888 * C49889;
    const double C49965 = C49889 * C49959;
    const double C49961 = C49889 * C49955;
    const double C49933 = C49931 * C49930;
    const double C128 = (C49869 * C49930 * C49931 * C49921) / C49753;
    const double C129 = (C49869 * C49930 * C49931 * C49922) / C49753;
    const double C306 = (C50012 * C49930 * C49931 * C49921) / C49753;
    const double C307 = (C50012 * C49930 * C49931 * C49922) / C49753;
    const double C495 = (C49863 * C49930 * C49931 * C49921) / C49753 -
                        (be * bs[1] * C49859) / (C49858 * C49753);
    const double C496 = (C49863 * C49930 * C49931 * C49922) / C49753 -
                        (ae * bs[1] * C49859) / (C49858 * C49753);
    const double C50840 = -C50839;
    const double C50866 = -C50865;
    const double C50885 = -C50884;
    const double C50901 = -C50900;
    const double C50983 = -C50982;
    const double C50999 = std::exp(C50998);
    const double C49819 = C49818 / C49753;
    const double C49870 = C49864 * C49867;
    const double C49937 = C49867 * C49935;
    const double C49936 = C49867 * C49934;
    const double C142 =
        ((bs[2] * std::pow(C49861, 2) + C49866 * C49864 * C49867) * C49752 +
         (C49864 * C49867 + C49866 * bs[4] * std::pow(C49861, 4)) * C49752 *
             std::pow(xP - xQ, 2)) /
        C49761;
    const double C323 =
        ((yP - yQ) * (bs[2] * std::pow(C49861, 2) + C49866 * C49864 * C49867) *
         C49752) /
        C49761;
    const double C512 =
        (ae * C49930 * C49931 * C49921 + be * C49930 * C49931 * C49922 +
         C49863 * (C49931 * C49930 + C49866 * C49864 * C49867) * C49752) /
        C49761;
    const double C49883 = C49882 * C49880;
    const double C49887 = C49879 * C49880;
    const double C49948 = C49880 * C49945;
    const double C49946 = C49880 * C49943;
    const double C49903 = C49902 * C49900;
    const double C49992 = C49900 * C49986;
    const double C49988 = C49900 * C49980;
    const double C49944 = C49878 * C49881;
    const double C49956 = C49869 * C49878;
    const double C50080 = C49878 * C50039;
    const double C50134 = C50012 * C49878;
    const double C50195 = C49878 * ae;
    const double C50193 = C49878 * C49866;
    const double C50192 = C49863 * C49878;
    const double C50191 = C49878 * be;
    const double C49941 = C49869 * C49926;
    const double C50037 = C50012 * C49926;
    const double C50071 = C49863 * C49926;
    const double C50188 = be * C49926;
    const double C49939 = C49869 * C49925;
    const double C50035 = C50012 * C49925;
    const double C50068 = C49863 * C49925;
    const double C50187 = ae * C49925;
    const double C49983 = C49898 * C49881;
    const double C50113 = C49869 * C49898;
    const double C50417 = C49898 * C50039;
    const double C50476 = C50012 * C49898;
    const double C50534 = C49898 * ae;
    const double C50528 = C49898 * C49866;
    const double C50527 = C49863 * C49898;
    const double C50526 = C49898 * be;
    const double C49968 = C49965 * C49881;
    const double C49985 = C49869 * C49965;
    const double C50137 = C49965 * C50039;
    const double C50300 = C50012 * C49965;
    const double C50376 = C49863 * C49965;
    const double C50521 = be * C49965;
    const double C49966 = C49961 * C49881;
    const double C49979 = C49869 * C49961;
    const double C50133 = C49961 * C50039;
    const double C50298 = C50012 * C49961;
    const double C50370 = C49863 * C49961;
    const double C50520 = ae * C49961;
    const double C121 = C49933 * C49881 - (bs[1] * C49859) / C49858;
    const double C292 = C50012 * C49869 * C49933;
    const double C294 = C49933 * C50039 - (bs[1] * C49859) / C49858;
    const double C481 = C49863 * C49869 * C49933;
    const double C483 = C49933 * C49866 - (bs[1] * C49859) / C49858;
    const double C924 = C49863 * C50012 * C49933;
    const double C50841 = std::exp(C50840);
    const double C50867 = std::exp(C50866);
    const double C50886 = std::exp(C50885);
    const double C50902 = std::exp(C50901);
    const double C50984 = std::exp(C50983);
    const double C151 = C50999 * C141;
    const double C49764 = C49762 * C50999;
    const double C117 = -(2 * ae * be * (zA - zB) * C50999) / (ae + be);
    const double C118 =
        -((C50999 - (C49751 * 2 * C49752 * C49751 * C50999) / C49753) * 2 *
          C49752) /
        C49753;
    const double C51060 = C50999 * C51058;
    const double C51063 = C50845 * C50999;
    const double C51129 = C50999 * C51059;
    const double C51122 = C50999 / C49805;
    const double C5190 = C51121 * C50999;
    const double C49820 = C49819 - C49812;
    const double C49875 = C49870 + C49874;
    const double C49940 = C49869 * C49870;
    const double C50036 = C50012 * C49870;
    const double C50072 = C49870 * ae;
    const double C50070 = C49863 * C49870;
    const double C50069 = C49870 * be;
    const double C122 =
        2 * C49869 * C49933 + C49869 * (C49933 + C49870 * C49881);
    const double C291 = C50012 * (C49933 + C49870 * C49881);
    const double C480 = C49863 * (C49933 + C49870 * C49881);
    const double C1145 =
        2 * C50012 * C49933 + C50012 * (C49933 + C49870 * C50039);
    const double C1606 = C49863 * (C49933 + C49870 * C50039);
    const double C1890 =
        2 * C49863 * C49933 + C49863 * (C49933 + C49870 * C49866);
    const double C131 = (C49930 * C49931 * C49922 + C49937 * C49881) / C49753;
    const double C133 =
        (2 * C49869 * C49937 + C49869 * (C49937 + C49926 * C49881)) / C49753;
    const double C303 = (C50012 * (C49937 + C49926 * C49881)) / C49753;
    const double C305 = (C50012 * C49869 * C49937) / C49753;
    const double C309 = (C49930 * C49931 * C49922 + C49937 * C50039) / C49753;
    const double C492 = (C49863 * (C49937 + C49926 * C49881) +
                         (C49933 + C49870 * C49881) * ae) /
                        C49753;
    const double C494 =
        (C49863 * C49869 * C49937 + C49869 * C49933 * ae) / C49753;
    const double C498 =
        (C49930 * C49931 * C49922 + C49863 * (C49863 * C49937 + C49933 * ae) +
         C49863 * C49933 * ae) /
        C49753;
    const double C930 =
        (C49863 * C50012 * C49937 + C50012 * C49933 * ae) / C49753;
    const double C1153 =
        (2 * C50012 * C49937 + C50012 * (C49937 + C49926 * C50039)) / C49753;
    const double C1614 = (C49863 * (C49937 + C49926 * C50039) +
                          (C49933 + C49870 * C50039) * ae) /
                         C49753;
    const double C130 = (C49930 * C49931 * C49921 + C49936 * C49881) / C49753;
    const double C132 =
        (2 * C49869 * C49936 + C49869 * (C49936 + C49925 * C49881)) / C49753;
    const double C302 = (C50012 * (C49936 + C49925 * C49881)) / C49753;
    const double C304 = (C50012 * C49869 * C49936) / C49753;
    const double C308 = (C49930 * C49931 * C49921 + C49936 * C50039) / C49753;
    const double C491 = (C49863 * (C49936 + C49925 * C49881) +
                         (C49933 + C49870 * C49881) * be) /
                        C49753;
    const double C493 =
        (C49863 * C49869 * C49936 + C49869 * C49933 * be) / C49753;
    const double C497 =
        (C49930 * C49931 * C49921 + C49863 * (C49863 * C49936 + C49933 * be) +
         C49863 * C49933 * be) /
        C49753;
    const double C929 =
        (C49863 * C50012 * C49936 + C50012 * C49933 * be) / C49753;
    const double C1152 =
        (2 * C50012 * C49936 + C50012 * (C49936 + C49925 * C50039)) / C49753;
    const double C1613 = (C49863 * (C49936 + C49925 * C50039) +
                          (C49933 + C49870 * C50039) * be) /
                         C49753;
    const double C155 = C50999 * C142;
    const double C2506 = C50999 * C323;
    const double C49884 = C49878 + C49883;
    const double C49892 = C49887 + C49891;
    const double C49957 = C49887 * C49881;
    const double C49982 = C49869 * C49887;
    const double C50135 = C49887 * C50039;
    const double C50299 = C50012 * C49887;
    const double C50377 = C49887 * ae;
    const double C50373 = C49887 * C49866;
    const double C50372 = C49863 * C49887;
    const double C50371 = C49887 * be;
    const double C49950 = C49948 * C49881;
    const double C49958 = C49869 * C49948;
    const double C50081 = C49948 * C50039;
    const double C50136 = C50012 * C49948;
    const double C50194 = C49863 * C49948;
    const double C50367 = be * C49948;
    const double C49949 = C49946 * C49881;
    const double C49954 = C49869 * C49946;
    const double C50079 = C49946 * C50039;
    const double C50132 = C50012 * C49946;
    const double C50190 = C49863 * C49946;
    const double C50366 = ae * C49946;
    const double C49904 = C49898 + C49903;
    const double C49995 = C49992 * C49881;
    const double C50115 = C49869 * C49992;
    const double C50420 = C49992 * C50039;
    const double C50479 = C50012 * C49992;
    const double C50533 = C49863 * C49992;
    const double C49993 = C49988 * C49881;
    const double C50111 = C49869 * C49988;
    const double C50414 = C49988 * C50039;
    const double C50475 = C50012 * C49988;
    const double C50525 = C49863 * C49988;
    const double C49947 = C49870 + C49944;
    const double C49962 = 2 * C49956;
    const double C50032 = C50012 * C49956;
    const double C50064 = C49956 * ae;
    const double C50062 = C49863 * C49956;
    const double C50061 = C49956 * be;
    const double C50083 = C49870 + C50080;
    const double C50140 = 2 * C50134;
    const double C50183 = C50134 * ae;
    const double C50181 = C49863 * C50134;
    const double C50180 = C50134 * be;
    const double C50199 = C49870 + C50193;
    const double C50201 = C50192 * ae;
    const double C50198 = C50192 * be;
    const double C50374 = 2 * C50192;
    const double C311 = (C49869 * C49937 + C49941 * C50039) / C49753;
    const double C310 = (C49869 * C49936 + C49939 * C50039) / C49753;
    const double C50196 = C50187 + C50188;
    const double C49990 = C49887 + C49983;
    const double C50119 = C50113 * C50039;
    const double C50272 = C50012 * C50113;
    const double C50335 = C50113 * ae;
    const double C50331 = C50113 * C49866;
    const double C50330 = C49863 * C50113;
    const double C50329 = C50113 * be;
    const double C50422 = C49887 + C50417;
    const double C50488 = C50476 * ae;
    const double C50486 = C50476 * C49866;
    const double C50485 = C49863 * C50476;
    const double C50484 = C50476 * be;
    const double C50540 = C49887 + C50528;
    const double C50542 = C50527 * ae;
    const double C50539 = C50527 * be;
    const double C49971 = C49948 + C49968;
    const double C49991 = 2 * C49985;
    const double C50088 = C49985 * C50039;
    const double C50114 = C50012 * C49985;
    const double C50217 = C49863 * C49985;
    const double C50325 = be * C49985;
    const double C50143 = C49948 + C50137;
    const double C50307 = C49863 * C50300;
    const double C50419 = 2 * C50300;
    const double C50472 = be * C50300;
    const double C49969 = C49946 + C49966;
    const double C49987 = 2 * C49979;
    const double C50086 = C49979 * C50039;
    const double C50110 = C50012 * C49979;
    const double C50213 = C49863 * C49979;
    const double C50324 = ae * C49979;
    const double C50139 = C49946 + C50133;
    const double C50303 = C49863 * C50298;
    const double C50413 = 2 * C50298;
    const double C50471 = ae * C50298;
    const double C50537 = C50520 + C50521;
    const double C50842 = C50841 * C50836;
    const double C50846 = C50845 * C50841;
    const double C51096 = C50841 * C50837;
    const double C51093 = C50841 / C49805;
    const double C17238 = C51121 * C50841;
    const double C50868 = C50867 * C50862;
    const double C50873 = C50872 * C50867;
    const double C51103 = C50867 * C50863;
    const double C51100 = C50867 / C50861;
    const double C1070 = C51108 * C50867;
    const double C50935 = C50886 * C50933;
    const double C50938 = C50872 * C50886;
    const double C51112 = C50886 * C50934;
    const double C51107 = C50886 / C50861;
    const double C287 = C51108 * C50886;
    const double C50963 = C50902 * C50961;
    const double C50966 = C50872 * C50902;
    const double C51116 = C50902 * C50962;
    const double C51109 = C50902 / C50861;
    const double C478 = C51108 * C50902;
    const double C51032 = C50984 * C51030;
    const double C51035 = C50845 * C50984;
    const double C51125 = C50984 * C51031;
    const double C51120 = C50984 / C49805;
    const double C2332 = C51121 * C50984;
    const double C49767 = 2 * C49764;
    const double C49810 = C49764 / C49761;
    const double C49825 = -4 * C49764;
    const double C5195 = ((0 * ae) / C49753 - C49764 / C49761) / (2 * C49753) +
                         (0 * ae) / C49753;
    const double C10747 = (0 * ae) / C49753 - C49764 / C49761;
    const double C150 = C117 * C129;
    const double C148 = C117 * C128;
    const double C2505 = C117 * C307;
    const double C2503 = C117 * C306;
    const double C153 = C118 * C121;
    const double C149 = C118 * C120;
    const double C340 = C118 * C292;
    const double C529 = C118 * C481;
    const double C2508 = C118 * C294;
    const double C2504 = C118 * C293;
    const double C3252 = C118 * C924;
    const double C51131 = C51060 / C49763;
    const double C51130 = C51060 * C51059;
    const double C51124 = C51060 / C49753;
    const double C5189 = (2 * C50845 * C51060) / C49753;
    const double C51132 = C51063 * C51059;
    const double C38922 = C51063 / C51099;
    const double C44245 = C51063 / C49805;
    const double C51148 = C51129 / C49753;
    const double C5188 = (C50999 * std::pow(C51058, 2)) / C49761 + C51122;
    const double C49876 = C49875 * C49752;
    const double C499 =
        (C49869 * C49936 + C49863 * (C49863 * C49939 + C49940 * be) +
         C49863 * C49940 * be) /
        C49753;
    const double C500 =
        (C49869 * C49937 + C49863 * (C49863 * C49941 + C49940 * ae) +
         C49863 * C49940 * ae) /
        C49753;
    const double C931 =
        (C49863 * C50012 * C49939 + C50012 * C49940 * be) / C49753;
    const double C932 =
        (C49863 * C50012 * C49941 + C50012 * C49940 * ae) / C49753;
    const double C295 = C49869 * C49933 + C49940 * C50039;
    const double C484 = C49869 * C49933 + C49940 * C49866;
    const double C925 = C49863 * C50012 * C49940;
    const double C1144 =
        2 * C50012 * C49940 + C50012 * (C49940 + C49956 * C50039);
    const double C1605 = C49863 * (C49940 + C49956 * C50039);
    const double C1889 =
        2 * C49863 * C49940 + C49863 * (C49940 + C49956 * C49866);
    const double C1266 =
        (C50012 * C49936 + C49863 * (C49863 * C50035 + C50036 * be) +
         C49863 * C50036 * be) /
        C49753;
    const double C1267 =
        (C50012 * C49937 + C49863 * (C49863 * C50037 + C50036 * ae) +
         C49863 * C50036 * ae) /
        C49753;
    const double C1259 = C50012 * C49933 + C50036 * C49866;
    const double C4591 =
        2 * C49863 * C50036 + C49863 * (C50036 + C50134 * C49866);
    const double C50074 = C50071 + C50072;
    const double C50073 = C50068 + C50069;
    const double C157 = C118 * C122;
    const double C336 = C118 * C291;
    const double C525 = C118 * C480;
    const double C2518 = C118 * C1145;
    const double C3248 = C118 * C1606;
    const double C154 = C117 * C131;
    const double C158 = C117 * C133;
    const double C337 = C117 * C303;
    const double C341 = C117 * C305;
    const double C2509 = C117 * C309;
    const double C526 = C117 * C492;
    const double C530 = C117 * C494;
    const double C3253 = C117 * C930;
    const double C2519 = C117 * C1153;
    const double C3249 = C117 * C1614;
    const double C152 = C117 * C130;
    const double C156 = C117 * C132;
    const double C335 = C117 * C302;
    const double C339 = C117 * C304;
    const double C2507 = C117 * C308;
    const double C524 = C117 * C491;
    const double C528 = C117 * C493;
    const double C3251 = C117 * C929;
    const double C2517 = C117 * C1152;
    const double C3247 = C117 * C1613;
    const double C49885 = C49884 * C49752;
    const double C49893 = C49892 * C49752;
    const double C49963 = C49878 + C49957;
    const double C49989 = 2 * C49982;
    const double C50087 = C49982 * C50039;
    const double C50112 = C50012 * C49982;
    const double C50218 = C49982 * ae;
    const double C50216 = C49982 * C49866;
    const double C50215 = C49863 * C49982;
    const double C50214 = C49982 * be;
    const double C50141 = C49878 + C50135;
    const double C50308 = C50299 * ae;
    const double C50306 = C50299 * C49866;
    const double C50305 = C49863 * C50299;
    const double C50304 = C50299 * be;
    const double C50416 = 2 * C50299;
    const double C50383 = C50376 + C50377;
    const double C50382 = C49878 + C50373;
    const double C50384 = C50372 * ae;
    const double C50381 = C50372 * be;
    const double C50529 = 2 * C50372;
    const double C50380 = C50370 + C50371;
    const double C49952 = C49926 + C49950;
    const double C49964 = 2 * C49958;
    const double C50033 = C50012 * C49958;
    const double C50063 = C49863 * C49958;
    const double C50211 = be * C49958;
    const double C1151 =
        (2 * C50012 * C49941 + C50012 * (C49941 + C49958 * C50039)) / C49753;
    const double C1612 = (C49863 * (C49941 + C49958 * C50039) +
                          (C49940 + C49956 * C50039) * ae) /
                         C49753;
    const double C50084 = C49926 + C50081;
    const double C50142 = 2 * C50136;
    const double C50182 = C49863 * C50136;
    const double C50296 = be * C50136;
    const double C50200 = C50194 + C50195;
    const double C49951 = C49925 + C49949;
    const double C49960 = 2 * C49954;
    const double C50031 = C50012 * C49954;
    const double C50060 = C49863 * C49954;
    const double C50210 = ae * C49954;
    const double C1150 =
        (2 * C50012 * C49939 + C50012 * (C49939 + C49954 * C50039)) / C49753;
    const double C1611 = (C49863 * (C49939 + C49954 * C50039) +
                          (C49940 + C49956 * C50039) * be) /
                         C49753;
    const double C50082 = C49925 + C50079;
    const double C50138 = 2 * C50132;
    const double C50179 = C49863 * C50132;
    const double C50295 = ae * C50132;
    const double C50197 = C50190 + C50191;
    const double C50379 = C50366 + C50367;
    const double C49905 = C49904 * C49752;
    const double C49998 = C49965 + C49995;
    const double C50121 = C50115 * C50039;
    const double C50273 = C50012 * C50115;
    const double C50334 = C49863 * C50115;
    const double C50423 = C49965 + C50420;
    const double C50487 = C49863 * C50479;
    const double C50541 = C50533 + C50534;
    const double C49996 = C49961 + C49993;
    const double C50117 = C50111 * C50039;
    const double C50271 = C50012 * C50111;
    const double C50328 = C49863 * C50111;
    const double C50421 = C49961 + C50414;
    const double C50483 = C49863 * C50475;
    const double C50538 = C50525 + C50526;
    const double C123 = 3 * (C49933 + C49870 * C49881) +
                        C49869 * (2 * C49940 + C49869 * C49947);
    const double C290 = C50012 * (2 * C49940 + C49869 * C49947);
    const double C296 = C49933 + C49870 * C49881 + C49947 * C50039;
    const double C479 = C49863 * (2 * C49940 + C49869 * C49947);
    const double C485 = C49933 + C49870 * C49881 + C49947 * C49866;
    const double C926 = C49863 * C50012 * C49947;
    const double C1258 = C50012 * C49940 + C50032 * C49866;
    const double C2490 = 3 * (C49933 + C49870 * C50039) +
                         C50012 * (2 * C50036 + C50012 * C50083);
    const double C2696 = C49933 + C49870 * C50039 + C50083 * C49866;
    const double C3234 = C49863 * (2 * C50036 + C50012 * C50083);
    const double C5594 = 3 * (C49933 + C49870 * C49866) +
                         C49863 * (2 * C50070 + C49863 * C50199);
    const double C345 = C117 * C311;
    const double C343 = C117 * C310;
    const double C49994 = C49869 * C49990;
    const double C50094 = C49990 * C50039;
    const double C50241 = C49990 * ae;
    const double C50239 = C49990 * C49866;
    const double C50238 = C49863 * C49990;
    const double C50237 = C49990 * be;
    const double C50258 = C50012 * C49990;
    const double C50123 = C49982 + C50119;
    const double C50281 = C50272 * ae;
    const double C50279 = C50272 * C49866;
    const double C50278 = C49863 * C50272;
    const double C50277 = C50272 * be;
    const double C50340 = C49982 + C50331;
    const double C50342 = C50330 * ae;
    const double C50339 = C50330 * be;
    const double C50425 = C50012 * C50422;
    const double C50454 = C50422 * ae;
    const double C50452 = C50422 * C49866;
    const double C50451 = C49863 * C50422;
    const double C50450 = C50422 * be;
    const double C50493 = C50299 + C50486;
    const double C50495 = C50485 * ae;
    const double C50492 = C50485 * be;
    const double C50550 = C50540 * ae;
    const double C50548 = C49863 * C50540;
    const double C50547 = C50540 * be;
    const double C49973 = C49869 * C49971;
    const double C49984 = 3 * C49971;
    const double C50029 = C50012 * C49971;
    const double C50055 = C49863 * C49971;
    const double C50234 = be * C49971;
    const double C50091 = C49958 + C50088;
    const double C50120 = 2 * C50114;
    const double C50165 = C49863 * C50114;
    const double C50269 = be * C50114;
    const double C50146 = C50012 * C50143;
    const double C50173 = C49863 * C50143;
    const double C50418 = 3 * C50143;
    const double C50447 = be * C50143;
    const double C49972 = C49869 * C49969;
    const double C49978 = 3 * C49969;
    const double C50027 = C50012 * C49969;
    const double C50052 = C49863 * C49969;
    const double C50233 = ae * C49969;
    const double C50089 = C49954 + C50086;
    const double C50116 = 2 * C50110;
    const double C50162 = C49863 * C50110;
    const double C50268 = ae * C50110;
    const double C50337 = C50324 + C50325;
    const double C50144 = C50012 * C50139;
    const double C50170 = C49863 * C50139;
    const double C50412 = 3 * C50139;
    const double C50446 = ae * C50139;
    const double C50481 = C50471 + C50472;
    const double C51097 = C50842 / C49763;
    const double C51095 = C50842 / C49753;
    const double C51094 = C50842 * C50837;
    const double C17237 = (2 * C50845 * C50842) / C49753;
    const double C51098 = C50846 * C50837;
    const double C110 = C50846 / C51099;
    const double C8071 = C50846 / C49805;
    const double C51134 = C51096 / C49753;
    const double C17236 = (C50841 * std::pow(C50836, 2)) / C49761 + C51093;
    const double C51104 = C50868 / C50876;
    const double C51102 = C50868 / C50859;
    const double C51101 = C50868 * C50863;
    const double C1069 = (2 * C50872 * C50868) / C50859;
    const double C51105 = C50873 * C50863;
    const double C116 = C50873 / C51106;
    const double C669 = C50873 / C50861;
    const double C51137 = C51103 / C50859;
    const double C1068 = (C50867 * std::pow(C50862, 2)) / C50871 + C51100;
    const double C51114 = C50935 / C50876;
    const double C51113 = C50935 * C50934;
    const double C51110 = C50935 / C50859;
    const double C286 = (2 * C50872 * C50935) / C50859;
    const double C51115 = C50938 * C50934;
    const double C1140 = C50938 / C51106;
    const double C1372 = C50938 / C50861;
    const double C51139 = C51112 / C50859;
    const double C285 = (C50886 * std::pow(C50933, 2)) / C50871 + C51107;
    const double C51118 = C50963 / C50876;
    const double C51117 = C50963 * C50962;
    const double C51111 = C50963 / C50859;
    const double C477 = (2 * C50872 * C50963) / C50859;
    const double C51119 = C50966 * C50962;
    const double C1886 = C50966 / C51106;
    const double C2133 = C50966 / C50861;
    const double C51142 = C51116 / C50859;
    const double C476 = (C50902 * std::pow(C50961, 2)) / C50871 + C51109;
    const double C51127 = C51032 / C49763;
    const double C51126 = C51032 * C51031;
    const double C51123 = C51032 / C49753;
    const double C2331 = (2 * C50845 * C51032) / C49753;
    const double C51128 = C51035 * C51031;
    const double C19874 = C51035 / C51099;
    const double C24473 = C51035 / C49805;
    const double C51145 = C51125 / C49753;
    const double C2330 = (C50984 * std::pow(C51030, 2)) / C49761 + C51120;
    const double C49769 = C49751 * C49767;
    const double C33303 = (-C49767 / C49753) / (2 * C49753) - (0 * be) / C49753;
    const double C49817 = C49814 - C49810;
    const double C49828 = C49825 / C49753;
    const double C10764 = C10747 * C492;
    const double C10762 = C10747 * C491;
    const double C10756 = C10747 * C494;
    const double C10754 = C10747 * C493;
    const double C13849 = C10747 * C1614;
    const double C13847 = C10747 * C1613;
    const double C13842 = C10747 * C930;
    const double C13840 = C10747 * C929;
    const double C168 = C148 - C149;
    const double C2530 = C2503 - C2504;
    const double C51149 = C51130 / C49761;
    const double C10761 = C51124 * C142;
    const double C10753 = C51124 * C141;
    const double C13839 = C51124 * C323;
    const double C5191 =
        (((0 - (C49751 * C49760) / C49753) * ae) / C49753 - (0 * be) / C49763) /
            (2 * C49753) +
        ((C49751 * (((C50999 - (C49751 * 2 * C49764) / C49753) * ae) / C49753 -
                    C49760 / C49763) +
          C51124) *
         ae) /
            C49753 +
        (0 * ae) / C49753 - C49764 / C49761;
    const double C51150 = C51132 / C49753;
    const double C33299 = -C51148;
    const double C5221 = C5188 * C142;
    const double C5201 = C5188 * C141;
    const double C21859 = C5188 * C323;
    const double C143 =
        (2 * C49869 * C49876 +
         C49869 * (C49876 +
                   (C49871 * C49872 + C49866 * bs[5] * std::pow(C49865, 5)) *
                       C49752 * std::pow(C49869, 2))) /
        C49761;
    const double C322 = ((yP - yQ) * C49869 * C49876) / C49761;
    const double C324 =
        ((bs[2] * std::pow(C49861, 2) + C49866 * C49864 * C49867) * C49752 +
         C49876 * std::pow(yP - yQ, 2)) /
        C49761;
    const double C511 =
        (ae * C49869 * C49867 * C49864 * C49921 +
         be * C49869 * C49867 * C49864 * C49922 + C49863 * C49869 * C49876) /
        C49761;
    const double C513 =
        ((C49933 + C49866 * C49864 * C49867) * C49752 +
         ae * (C49863 * C49936 + C49933 * be) +
         be * (C49863 * C49937 + C49933 * ae) +
         C49863 * (ae * C49936 + be * C49937 + C49863 * C49876)) /
        C49761;
    const double C939 = (ae * C50012 * C49936 + be * C50012 * C49937 +
                         C49863 * C50012 * C49876) /
                        C49761;
    const double C532 = C117 * C499;
    const double C5206 = C5195 * C499;
    const double C11166 = C10747 * C499;
    const double C534 = C117 * C500;
    const double C5208 = C5195 * C500;
    const double C11168 = C10747 * C500;
    const double C945 = C117 * C931;
    const double C10964 = C10747 * C931;
    const double C947 = C117 * C932;
    const double C10966 = C10747 * C932;
    const double C344 = C118 * C295;
    const double C533 = C118 * C484;
    const double C946 = C118 * C925;
    const double C2512 = C118 * C1144;
    const double C2710 = C118 * C1605;
    const double C3684 = C117 * C1266;
    const double C14738 = C10747 * C1266;
    const double C21864 = C5195 * C1266;
    const double C3686 = C117 * C1267;
    const double C14740 = C10747 * C1267;
    const double C21866 = C5195 * C1267;
    const double C3685 = C118 * C1259;
    const double C1898 = (2 * (C49863 * C49937 + C49933 * ae) +
                          C49863 * (C49937 + C49863 * C50074 + C50070 * ae) +
                          (C49933 + C49870 * C49866) * ae) /
                         C49753;
    const double C1897 = (2 * (C49863 * C49936 + C49933 * be) +
                          C49863 * (C49936 + C49863 * C50073 + C50070 * be) +
                          (C49933 + C49870 * C49866) * be) /
                         C49753;
    const double C169 = C152 - C153;
    const double C170 = C156 - C157;
    const double C356 = C335 - C336;
    const double C357 = C339 - C340;
    const double C2531 = C2507 - C2508;
    const double C545 = C524 - C525;
    const double C546 = C528 - C529;
    const double C3262 = C3251 - C3252;
    const double C2533 = C2517 - C2518;
    const double C3261 = C3247 - C3248;
    const double C50020 = C49869 * C49885;
    const double C50178 = C50012 * C49885;
    const double C50189 = C49863 * C49885;
    const double C144 =
        (3 * (C49876 + C49885 * C49881) +
         C49869 * (2 * C49869 * C49885 +
                   C49869 * (C49885 + (C49879 * C49880 +
                                       C49866 * bs[6] * std::pow(C49861, 6)) *
                                          C49752 * C49881))) /
        C49761;
    const double C321 = ((yP - yQ) * (C49876 + C49885 * C49881)) / C49761;
    const double C325 =
        (C49869 * C49876 + C49869 * C49885 * std::pow(yP - yQ, 2)) / C49761;
    const double C510 = (ae * (C49867 * C49864 * C49921 + C49925 * C49881) +
                         be * (C49867 * C49864 * C49922 + C49926 * C49881) +
                         C49863 * (C49876 + C49885 * C49881)) /
                        C49761;
    const double C514 =
        (C49869 * C49876 + ae * (C49863 * C49939 + C49940 * be) +
         be * (C49863 * C49941 + C49940 * ae) +
         C49863 * (ae * C49939 + be * C49941 + C49863 * C49869 * C49885)) /
        C49761;
    const double C940 = (ae * C50012 * C49939 + be * C50012 * C49941 +
                         C49863 * C50012 * C49869 * C49885) /
                        C49761;
    const double C1157 = (2 * C50012 * C49876 +
                          C50012 * (C49876 + C49885 * std::pow(C50012, 2))) /
                         C49761;
    const double C1271 =
        (C50012 * C49876 + ae * (C49863 * C50035 + C50036 * be) +
         be * (C49863 * C50037 + C50036 * ae) +
         C49863 * (ae * C50035 + be * C50037 + C49863 * C50012 * C49885)) /
        C49761;
    const double C1618 =
        (ae * (C49936 + C49925 * C50039) + be * (C49937 + C49926 * C50039) +
         C49863 * (C49876 + C49885 * C50039)) /
        C49761;
    const double C1902 =
        (2 * (ae * C49936 + be * C49937 + C49863 * C49876) +
         ae * (C49936 + C49863 * C50073 + C50070 * be) +
         be * (C49937 + C49863 * C50074 + C50070 * ae) +
         C49863 * (C49876 + ae * C50073 + be * C50074 +
                   C49863 * (ae * C49925 + be * C49926 + C49863 * C49885))) /
        C49761;
    const double C49894 = C49893 * C49881;
    const double C49897 = C49869 * C49893;
    const double C50107 = C49893 * C50039;
    const double C50297 = C50012 * C49893;
    const double C50368 = C49863 * C49893;
    const double C2499 =
        (3 * (C49876 + C49885 * C50039) +
         C50012 * (2 * C50012 * C49885 + C50012 * (C49885 + C49893 * C50039))) /
        C49761;
    const double C49967 = C49869 * C49963;
    const double C49981 = 3 * C49963;
    const double C50028 = C50012 * C49963;
    const double C50056 = C49963 * ae;
    const double C50054 = C49863 * C49963;
    const double C50053 = C49963 * be;
    const double C1143 =
        2 * C50012 * C49947 + C50012 * (C49947 + C49963 * C50039);
    const double C1604 = C49863 * (C49947 + C49963 * C50039);
    const double C1888 =
        2 * C49863 * C49947 + C49863 * (C49947 + C49963 * C49866);
    const double C50090 = C49956 + C50087;
    const double C50118 = 2 * C50112;
    const double C50166 = C50112 * ae;
    const double C50164 = C49863 * C50112;
    const double C50163 = C50112 * be;
    const double C4589 =
        2 * C49863 * C50032 + C49863 * (C50032 + C50112 * C49866);
    const double C50223 = C50217 + C50218;
    const double C50222 = C49956 + C50216;
    const double C50224 = C50215 * ae;
    const double C50221 = C50215 * be;
    const double C50332 = 2 * C50215;
    const double C50220 = C50213 + C50214;
    const double C50145 = C50012 * C50141;
    const double C50174 = C50141 * ae;
    const double C50172 = C49863 * C50141;
    const double C50171 = C50141 * be;
    const double C50415 = 3 * C50141;
    const double C4590 =
        2 * C49863 * C50083 + C49863 * (C50083 + C50141 * C49866);
    const double C50313 = C50307 + C50308;
    const double C50312 = C50134 + C50306;
    const double C50314 = C50305 * ae;
    const double C50311 = C50305 * be;
    const double C50477 = 2 * C50305;
    const double C50310 = C50303 + C50304;
    const double C50390 = C49863 * C50383;
    const double C50532 = 2 * C50383;
    const double C50519 = be * C50383;
    const double C50391 = C50382 * ae;
    const double C50389 = C49863 * C50382;
    const double C50388 = C50382 * be;
    const double C50530 = 3 * C50382;
    const double C50387 = C49863 * C50380;
    const double C50524 = 2 * C50380;
    const double C50518 = ae * C50380;
    const double C135 = (3 * (C49937 + C49926 * C49881) +
                         C49869 * (2 * C49941 + C49869 * C49952)) /
                        C49753;
    const double C301 = (C50012 * (2 * C49941 + C49869 * C49952)) / C49753;
    const double C313 = (C49937 + C49926 * C49881 + C49952 * C50039) / C49753;
    const double C490 = (C49863 * (2 * C49941 + C49869 * C49952) +
                         (2 * C49940 + C49869 * C49947) * ae) /
                        C49753;
    const double C502 =
        (C49937 + C49926 * C49881 + C49863 * (C49863 * C49952 + C49947 * ae) +
         C49863 * C49947 * ae) /
        C49753;
    const double C934 =
        (C49863 * C50012 * C49952 + C50012 * C49947 * ae) / C49753;
    const double C1149 =
        (2 * C50012 * C49952 + C50012 * (C49952 + C49971 * C50039)) / C49753;
    const double C1610 = (C49863 * (C49952 + C49971 * C50039) +
                          (C49947 + C49963 * C50039) * ae) /
                         C49753;
    const double C1265 =
        (C50012 * C49941 + C49863 * (C49863 * C50033 + C50032 * ae) +
         C49863 * C50032 * ae) /
        C49753;
    const double C50066 = C50063 + C50064;
    const double C2513 = C117 * C1151;
    const double C2711 = C117 * C1612;
    const double C10978 = C10747 * C1612;
    const double C2494 = (3 * (C49937 + C49926 * C50039) +
                          C50012 * (2 * C50037 + C50012 * C50084)) /
                         C49753;
    const double C2700 =
        (C49937 + C49926 * C50039 + C49863 * (C49863 * C50084 + C50083 * ae) +
         C49863 * C50083 * ae) /
        C49753;
    const double C3238 = (C49863 * (2 * C50037 + C50012 * C50084) +
                          (2 * C50036 + C50012 * C50083) * ae) /
                         C49753;
    const double C50185 = C50182 + C50183;
    const double C50204 = C49863 * C50200;
    const double C50375 = 2 * C50200;
    const double C50365 = be * C50200;
    const double C134 = (3 * (C49936 + C49925 * C49881) +
                         C49869 * (2 * C49939 + C49869 * C49951)) /
                        C49753;
    const double C300 = (C50012 * (2 * C49939 + C49869 * C49951)) / C49753;
    const double C312 = (C49936 + C49925 * C49881 + C49951 * C50039) / C49753;
    const double C489 = (C49863 * (2 * C49939 + C49869 * C49951) +
                         (2 * C49940 + C49869 * C49947) * be) /
                        C49753;
    const double C501 =
        (C49936 + C49925 * C49881 + C49863 * (C49863 * C49951 + C49947 * be) +
         C49863 * C49947 * be) /
        C49753;
    const double C933 =
        (C49863 * C50012 * C49951 + C50012 * C49947 * be) / C49753;
    const double C1148 =
        (2 * C50012 * C49951 + C50012 * (C49951 + C49969 * C50039)) / C49753;
    const double C1609 = (C49863 * (C49951 + C49969 * C50039) +
                          (C49947 + C49963 * C50039) * be) /
                         C49753;
    const double C1264 =
        (C50012 * C49939 + C49863 * (C49863 * C50031 + C50032 * be) +
         C49863 * C50032 * be) /
        C49753;
    const double C50065 = C50060 + C50061;
    const double C50219 = C50210 + C50211;
    const double C2511 = C117 * C1150;
    const double C2709 = C117 * C1611;
    const double C10976 = C10747 * C1611;
    const double C2705 =
        (C49876 + C49885 * C50039 + ae * (C49863 * C50082 + C50083 * be) +
         be * (C49863 * C50084 + C50083 * ae) +
         C49863 * (ae * C50082 + be * C50084 +
                   C49863 * (C49885 + C49893 * C50039))) /
        C49761;
    const double C3243 =
        (ae * (2 * C50035 + C50012 * C50082) +
         be * (2 * C50037 + C50012 * C50084) +
         C49863 * (2 * C50012 * C49885 + C50012 * (C49885 + C49893 * C50039))) /
        C49761;
    const double C2493 = (3 * (C49936 + C49925 * C50039) +
                          C50012 * (2 * C50035 + C50012 * C50082)) /
                         C49753;
    const double C2699 =
        (C49936 + C49925 * C50039 + C49863 * (C49863 * C50082 + C50083 * be) +
         C49863 * C50083 * be) /
        C49753;
    const double C3237 = (C49863 * (2 * C50035 + C50012 * C50082) +
                          (2 * C50036 + C50012 * C50083) * be) /
                         C49753;
    const double C50184 = C50179 + C50180;
    const double C50301 = C50295 + C50296;
    const double C50203 = C49863 * C50197;
    const double C50369 = 2 * C50197;
    const double C50364 = ae * C50197;
    const double C49906 = C49905 * C49881;
    const double C50103 = C49869 * C49905;
    const double C50407 = C49905 * C50039;
    const double C50473 = C50012 * C49905;
    const double C50522 = C49863 * C49905;
    const double C50001 = C49869 * C49998;
    const double C50095 = C49998 * C50039;
    const double C50240 = C49863 * C49998;
    const double C50259 = C50012 * C49998;
    const double C50124 = C49985 + C50121;
    const double C50280 = C49863 * C50273;
    const double C50341 = C50334 + C50335;
    const double C50426 = C50012 * C50423;
    const double C50453 = C49863 * C50423;
    const double C50494 = C50487 + C50488;
    const double C50549 = C49863 * C50541;
    const double C49999 = C49869 * C49996;
    const double C50093 = C49996 * C50039;
    const double C50236 = C49863 * C49996;
    const double C50257 = C50012 * C49996;
    const double C50122 = C49979 + C50117;
    const double C50276 = C49863 * C50271;
    const double C50338 = C50328 + C50329;
    const double C50424 = C50012 * C50421;
    const double C50449 = C49863 * C50421;
    const double C50491 = C50483 + C50484;
    const double C50546 = C49863 * C50538;
    const double C161 = C118 * C123;
    const double C332 = C118 * C290;
    const double C348 = C118 * C296;
    const double C521 = C118 * C479;
    const double C537 = C118 * C485;
    const double C950 = C118 * C926;
    const double C2717 = C118 * C1258;
    const double C3524 = C118 * C2490;
    const double C3689 = C118 * C2696;
    const double C4193 = C118 * C3234;
    const double C49997 = C49989 + C49994;
    const double C50097 = C49963 + C50094;
    const double C50245 = C49963 + C50239;
    const double C50247 = C50238 * ae;
    const double C50244 = C50238 * be;
    const double C50264 = C50258 * ae;
    const double C50262 = C49863 * C50258;
    const double C50261 = C50258 * be;
    const double C50126 = C50012 * C50123;
    const double C50157 = C50123 * ae;
    const double C50155 = C49863 * C50123;
    const double C50154 = C50123 * be;
    const double C50285 = C50112 + C50279;
    const double C50287 = C50278 * ae;
    const double C50284 = C50278 * be;
    const double C50349 = C50340 * ae;
    const double C50347 = C49863 * C50340;
    const double C50346 = C50340 * be;
    const double C50428 = C50416 + C50425;
    const double C50458 = C50141 + C50452;
    const double C50460 = C50451 * ae;
    const double C50457 = C50451 * be;
    const double C50501 = C50493 * ae;
    const double C50499 = C49863 * C50493;
    const double C50498 = C50493 * be;
    const double C50553 = C50529 + C50548;
    const double C49975 = C49964 + C49973;
    const double C2496 = (3 * (C49941 + C49958 * C50039) +
                          C50012 * (2 * C50033 + C50012 * C50091)) /
                         C49753;
    const double C50149 = C50142 + C50146;
    const double C49974 = C49960 + C49972;
    const double C50242 = C50233 + C50234;
    const double C2495 = (3 * (C49939 + C49954 * C50039) +
                          C50012 * (2 * C50031 + C50012 * C50089)) /
                         C49753;
    const double C50274 = C50268 + C50269;
    const double C50147 = C50138 + C50144;
    const double C50455 = C50446 + C50447;
    const double C51133 = C51094 / C49761;
    const double C51135 = C51098 / C49753;
    const double C2333 = -C51134;
    const double C51136 = C51101 / C50871;
    const double C51138 = C51105 / C50859;
    const double C288 = -C51137;
    const double C51140 = C51113 / C50871;
    const double C51141 = C51115 / C50859;
    const double C1066 = -C51139;
    const double C51143 = C51117 / C50871;
    const double C51144 = C51119 / C50859;
    const double C1717 = -C51142;
    const double C51146 = C51126 / C49761;
    const double C51147 = C51128 / C49753;
    const double C17234 = -C51145;
    const double C49770 = C49769 / C49753;
    const double C33320 = C33303 * C492;
    const double C33318 = C33303 * C491;
    const double C33312 = C33303 * C494;
    const double C33310 = C33303 * C493;
    const double C33534 = C33303 * C1612;
    const double C33532 = C33303 * C1611;
    const double C33522 = C33303 * C932;
    const double C33520 = C33303 * C931;
    const double C33724 = C33303 * C500;
    const double C33722 = C33303 * C499;
    const double C36326 = C33303 * C1614;
    const double C36324 = C33303 * C1613;
    const double C36318 = C33303 * C930;
    const double C36316 = C33303 * C929;
    const double C37012 = C33303 * C1267;
    const double C37010 = C33303 * C1266;
    const double C38929 =
        (C49817 / C49805 - (0 * be) / C49753) / C49805 + (0 * ae) / C49753;
    const double C44250 = C49817 / C49805 - (0 * be) / C49753;
    const double C173 = C168 - C150;
    const double C2536 = C2530 - C2505;
    const double C51161 = C51122 - C51149;
    const double C5224 = C5191 * C133;
    const double C5222 = C5191 * C132;
    const double C5220 = C5191 * C131;
    const double C5218 = C5191 * C130;
    const double C5200 = C5191 * C129;
    const double C5198 = C5191 * C128;
    const double C5421 = C5191 * C311;
    const double C5419 = C5191 * C310;
    const double C5417 = C5191 * C305;
    const double C5415 = C5191 * C304;
    const double C5621 = C5191 * C500;
    const double C5619 = C5191 * C499;
    const double C5617 = C5191 * C494;
    const double C5615 = C5191 * C493;
    const double C5797 = C5191 * C303;
    const double C5795 = C5191 * C302;
    const double C5964 = C5191 * C492;
    const double C5962 = C5191 * C491;
    const double C6183 = C5191 * C932;
    const double C6181 = C5191 * C931;
    const double C21878 = C5191 * C309;
    const double C21876 = C5191 * C308;
    const double C21858 = C5191 * C307;
    const double C21856 = C5191 * C306;
    const double C22540 = C5191 * C930;
    const double C22538 = C5191 * C929;
    const double C22797 = C5191 * C1153;
    const double C22795 = C5191 * C1152;
    const double C22968 = C5191 * C1267;
    const double C22966 = C5191 * C1266;
    const double C23475 = C5191 * C1614;
    const double C23473 = C5191 * C1613;
    const double C51162 = C51131 - C51150;
    const double C33317 = C33299 * C142;
    const double C33309 = C33299 * C141;
    const double C36315 = C33299 * C323;
    const double C159 = C50999 * C143;
    const double C5225 = C5188 * C143;
    const double C10773 = C51124 * C143;
    const double C33329 = C33299 * C143;
    const double C342 = C50999 * C322;
    const double C5418 = C5188 * C322;
    const double C10971 = C51124 * C322;
    const double C33527 = C33299 * C322;
    const double C2510 = C50999 * C324;
    const double C13854 = C51124 * C324;
    const double C21879 = C5188 * C324;
    const double C36323 = C33299 * C324;
    const double C531 = C50999 * C511;
    const double C5205 = C5189 * C511;
    const double C5618 = C5188 * C511;
    const double C10757 = C51063 * C511;
    const double C11173 = C51124 * C511;
    const double C33313 = C51063 * C511;
    const double C33729 = C33299 * C511;
    const double C3254 = C50999 * C939;
    const double C13843 = C51063 * C939;
    const double C14745 = C51124 * C939;
    const double C21863 = C5189 * C939;
    const double C22541 = C5188 * C939;
    const double C36319 = C51063 * C939;
    const double C37017 = C33299 * C939;
    const double C358 = C343 - C344;
    const double C547 = C532 - C533;
    const double C957 = C945 - C946;
    const double C3692 = C3684 - C3685;
    const double C174 = C169 - C154;
    const double C175 = C170 - C158;
    const double C362 = C356 - C337;
    const double C363 = C357 - C341;
    const double C2537 = C2531 - C2509;
    const double C551 = C545 - C526;
    const double C552 = C546 - C530;
    const double C3265 = C3262 - C3253;
    const double C2539 = C2533 - C2519;
    const double C3264 = C3261 - C3249;
    const double C50202 = C50196 + C50189;
    const double C163 = C50999 * C144;
    const double C10777 = C51124 * C144;
    const double C33333 = C33299 * C144;
    const double C338 = C50999 * C321;
    const double C5798 = C5188 * C321;
    const double C10963 = C51124 * C321;
    const double C33519 = C33299 * C321;
    const double C346 = C50999 * C325;
    const double C5422 = C5188 * C325;
    const double C10975 = C51124 * C325;
    const double C33531 = C33299 * C325;
    const double C527 = C50999 * C510;
    const double C5217 = C5189 * C510;
    const double C5965 = C5188 * C510;
    const double C10765 = C51063 * C510;
    const double C11165 = C51124 * C510;
    const double C33321 = C51063 * C510;
    const double C33721 = C33299 * C510;
    const double C535 = C50999 * C514;
    const double C5209 = C5190 * C514;
    const double C5622 = C5188 * C514;
    const double C5614 = C5189 * C514;
    const double C11177 = C51124 * C514;
    const double C11169 = C51063 * C514;
    const double C33733 = C33299 * C514;
    const double C33725 = C51063 * C514;
    const double C44264 = C44245 * C514;
    const double C948 = C50999 * C940;
    const double C5414 = C5189 * C940;
    const double C6184 = C5188 * C940;
    const double C10967 = C51063 * C940;
    const double C11735 = C51124 * C940;
    const double C33523 = C51063 * C940;
    const double C34291 = C33299 * C940;
    const double C2520 = C50999 * C1157;
    const double C15094 = C51124 * C1157;
    const double C22798 = C5188 * C1157;
    const double C36335 = C33299 * C1157;
    const double C3687 = C50999 * C1271;
    const double C14741 = C51063 * C1271;
    const double C15302 = C51124 * C1271;
    const double C21867 = C5190 * C1271;
    const double C22537 = C5189 * C1271;
    const double C22969 = C5188 * C1271;
    const double C37013 = C51063 * C1271;
    const double C37452 = C33299 * C1271;
    const double C47248 = C44245 * C1271;
    const double C3250 = C50999 * C1618;
    const double C13850 = C51063 * C1618;
    const double C15962 = C51124 * C1618;
    const double C21875 = C5189 * C1618;
    const double C23476 = C5188 * C1618;
    const double C36327 = C51063 * C1618;
    const double C37009 = C33299 * C1618;
    const double C49895 = C49885 + C49894;
    const double C49901 = 2 * C49897;
    const double C50161 = C50012 * C49897;
    const double C50212 = C49863 * C49897;
    const double C1156 = (2 * C50012 * C50020 +
                          C50012 * (C50020 + C49897 * std::pow(C50012, 2))) /
                         C49761;
    const double C1270 =
        (C50012 * C50020 + ae * (C49863 * C50031 + C50032 * be) +
         be * (C49863 * C50033 + C50032 * ae) +
         C49863 * (ae * C50031 + be * C50033 + C49863 * C50012 * C49897)) /
        C49761;
    const double C1617 =
        (ae * (C49939 + C49954 * C50039) + be * (C49941 + C49958 * C50039) +
         C49863 * (C50020 + C49897 * C50039)) /
        C49761;
    const double C2500 =
        (3 * (C50020 + C49897 * C50039) +
         C50012 * (2 * C50012 * C49897 +
                   C50012 * (C49897 + C49869 * C49905 * C50039))) /
        C49761;
    const double C3244 =
        (ae * (2 * C50031 + C50012 * C50089) +
         be * (2 * C50033 + C50012 * C50091) +
         C49863 * (2 * C50012 * C49897 +
                   C50012 * (C49897 + C49869 * C49905 * C50039))) /
        C49761;
    const double C50108 = C49885 + C50107;
    const double C50302 = C49863 * C50297;
    const double C50406 = 2 * C50297;
    const double C50386 = C50379 + C50368;
    const double C3526 = C50999 * C2499;
    const double C31654 = C51124 * C2499;
    const double C37292 = C33299 * C2499;
    const double C49970 = C49962 + C49967;
    const double C1262 =
        (C50012 * C49951 + C49863 * (C49863 * C50027 + C50028 * be) +
         C49863 * C50028 * be) /
        C49753;
    const double C1263 =
        (C50012 * C49952 + C49863 * (C49863 * C50029 + C50028 * ae) +
         C49863 * C50028 * ae) /
        C49753;
    const double C1257 = C50012 * C49947 + C50028 * C49866;
    const double C6176 =
        2 * C49863 * C50028 + C49863 * (C50028 + C50258 * C49866);
    const double C50058 = C50055 + C50056;
    const double C50057 = C50052 + C50053;
    const double C2527 = C118 * C1143;
    const double C3034 = C118 * C1604;
    const double C2706 =
        (C50020 + C49897 * C50039 + ae * (C49863 * C50089 + C50090 * be) +
         be * (C49863 * C50091 + C50090 * ae) +
         C49863 * (ae * C50089 + be * C50091 +
                   C49863 * (C49897 + C49869 * C49905 * C50039))) /
        C49761;
    const double C2701 =
        (C49939 + C49954 * C50039 + C49863 * (C49863 * C50089 + C50090 * be) +
         C49863 * C50090 * be) /
        C49753;
    const double C2702 =
        (C49941 + C49958 * C50039 + C49863 * (C49863 * C50091 + C50090 * ae) +
         C49863 * C50090 * ae) /
        C49753;
    const double C3239 = (C49863 * (2 * C50031 + C50012 * C50089) +
                          (2 * C50032 + C50012 * C50090) * be) /
                         C49753;
    const double C3240 = (C49863 * (2 * C50033 + C50012 * C50091) +
                          (2 * C50032 + C50012 * C50090) * ae) /
                         C49753;
    const double C2491 = 3 * (C49940 + C49956 * C50039) +
                         C50012 * (2 * C50032 + C50012 * C50090);
    const double C2697 = C49940 + C49956 * C50039 + C50090 * C49866;
    const double C3235 = C49863 * (2 * C50032 + C50012 * C50090);
    const double C4588 =
        2 * C49863 * C50090 + C49863 * (C50090 + C50123 * C49866);
    const double C50168 = C50165 + C50166;
    const double C50167 = C50162 + C50163;
    const double C50227 = C49863 * C50223;
    const double C50333 = 2 * C50223;
    const double C50323 = be * C50223;
    const double C5595 = 3 * (C49940 + C49956 * C49866) +
                         C49863 * (2 * C50062 + C49863 * C50222);
    const double C50226 = C49863 * C50220;
    const double C50327 = 2 * C50220;
    const double C50322 = ae * C50220;
    const double C50148 = C50140 + C50145;
    const double C50176 = C50173 + C50174;
    const double C50175 = C50170 + C50171;
    const double C50316 = C49863 * C50313;
    const double C50478 = 2 * C50313;
    const double C50470 = be * C50313;
    const double C6592 = 3 * (C50036 + C50134 * C49866) +
                         C49863 * (2 * C50181 + C49863 * C50312);
    const double C50315 = C49863 * C50310;
    const double C50474 = 2 * C50310;
    const double C50469 = ae * C50310;
    const double C50395 = C49948 + C50390;
    const double C50394 = C50374 + C50389;
    const double C50393 = C49946 + C50387;
    const double C50536 = C49893 + C50518;
    const double C162 = C117 * C135;
    const double C333 = C117 * C301;
    const double C349 = C117 * C313;
    const double C522 = C117 * C490;
    const double C10768 = C10747 * C490;
    const double C33324 = C33303 * C490;
    const double C538 = C117 * C502;
    const double C5212 = C5195 * C502;
    const double C11160 = C10747 * C502;
    const double C33716 = C33303 * C502;
    const double C951 = C117 * C934;
    const double C10958 = C10747 * C934;
    const double C33514 = C33303 * C934;
    const double C2528 = C117 * C1149;
    const double C3035 = C117 * C1610;
    const double C10986 = C10747 * C1610;
    const double C33542 = C33303 * C1610;
    const double C2718 = C117 * C1265;
    const double C5409 = C5195 * C1265;
    const double C11738 = C10747 * C1265;
    const double C34294 = C33303 * C1265;
    const double C1896 = (2 * (C49863 * C49941 + C49940 * ae) +
                          C49863 * (C49941 + C49863 * C50066 + C50062 * ae) +
                          (C49940 + C49956 * C49866) * ae) /
                         C49753;
    const double C3525 = C117 * C2494;
    const double C3690 = C117 * C2700;
    const double C15965 = C10747 * C2700;
    const double C21870 = C5195 * C2700;
    const double C37004 = C33303 * C2700;
    const double C4194 = C117 * C3238;
    const double C15097 = C10747 * C3238;
    const double C36330 = C33303 * C3238;
    const double C4599 = (2 * (C49863 * C50037 + C50036 * ae) +
                          C49863 * (C50037 + C49863 * C50185 + C50181 * ae) +
                          (C50036 + C50134 * C49866) * ae) /
                         C49753;
    const double C50206 = C49926 + C50204;
    const double C160 = C117 * C134;
    const double C331 = C117 * C300;
    const double C347 = C117 * C312;
    const double C520 = C117 * C489;
    const double C10766 = C10747 * C489;
    const double C33322 = C33303 * C489;
    const double C536 = C117 * C501;
    const double C5210 = C5195 * C501;
    const double C11158 = C10747 * C501;
    const double C33714 = C33303 * C501;
    const double C949 = C117 * C933;
    const double C10956 = C10747 * C933;
    const double C33512 = C33303 * C933;
    const double C2526 = C117 * C1148;
    const double C3033 = C117 * C1609;
    const double C10984 = C10747 * C1609;
    const double C33540 = C33303 * C1609;
    const double C2716 = C117 * C1264;
    const double C5407 = C5195 * C1264;
    const double C11736 = C10747 * C1264;
    const double C34292 = C33303 * C1264;
    const double C1901 =
        (2 * (ae * C49939 + be * C49941 + C49863 * C50020) +
         ae * (C49939 + C49863 * C50065 + C50062 * be) +
         be * (C49941 + C49863 * C50066 + C50062 * ae) +
         C49863 * (C50020 + ae * C50065 + be * C50066 +
                   C49863 * (ae * C49954 + be * C49958 + C49863 * C49897))) /
        C49761;
    const double C1895 = (2 * (C49863 * C49939 + C49940 * be) +
                          C49863 * (C49939 + C49863 * C50065 + C50062 * be) +
                          (C49940 + C49956 * C49866) * be) /
                         C49753;
    const double C2532 = C2511 - C2512;
    const double C2724 = C2709 - C2710;
    const double C3691 = C50999 * C2705;
    const double C15966 = C51063 * C2705;
    const double C21871 = C5190 * C2705;
    const double C23480 = C5189 * C2705;
    const double C31814 = C51124 * C2705;
    const double C37005 = C51063 * C2705;
    const double C37460 = C33299 * C2705;
    const double C47252 = C44245 * C2705;
    const double C4195 = C50999 * C3243;
    const double C15098 = C51063 * C3243;
    const double C22802 = C5189 * C3243;
    const double C32315 = C51124 * C3243;
    const double C36331 = C51063 * C3243;
    const double C37967 = C33299 * C3243;
    const double C3523 = C117 * C2493;
    const double C3688 = C117 * C2699;
    const double C15963 = C10747 * C2699;
    const double C21868 = C5195 * C2699;
    const double C37002 = C33303 * C2699;
    const double C4192 = C117 * C3237;
    const double C15095 = C10747 * C3237;
    const double C36328 = C33303 * C3237;
    const double C4603 = (2 * (ae * C50035 + be * C50037 + C49863 * C50178) +
                          ae * (C50035 + C49863 * C50184 + C50181 * be) +
                          be * (C50037 + C49863 * C50185 + C50181 * ae) +
                          C49863 * (C50178 + ae * C50184 + be * C50185 +
                                    C49863 * (ae * C50132 + be * C50136 +
                                              C49863 * C50012 * C49893))) /
                         C49761;
    const double C4598 = (2 * (C49863 * C50035 + C50036 * be) +
                          C49863 * (C50035 + C49863 * C50184 + C50181 * be) +
                          (C50036 + C50134 * C49866) * be) /
                         C49753;
    const double C50205 = C49925 + C50203;
    const double C50378 = C49885 + C50364;
    const double C49907 = C49893 + C49906;
    const double C50104 = C50103 * C50039;
    const double C50270 = C50012 * C50103;
    const double C50326 = C49863 * C50103;
    const double C50408 = C49893 + C50407;
    const double C50482 = C49863 * C50473;
    const double C50545 = C50537 + C50522;
    const double C50004 = C49991 + C50001;
    const double C50098 = C49971 + C50095;
    const double C50246 = C50240 + C50241;
    const double C50263 = C49863 * C50259;
    const double C50127 = C50012 * C50124;
    const double C50156 = C49863 * C50124;
    const double C50286 = C50280 + C50281;
    const double C50348 = C49863 * C50341;
    const double C50429 = C50419 + C50426;
    const double C50459 = C50453 + C50454;
    const double C50500 = C49863 * C50494;
    const double C50554 = C49965 + C50549;
    const double C50002 = C49987 + C49999;
    const double C50096 = C49969 + C50093;
    const double C50243 = C50236 + C50237;
    const double C50260 = C49863 * C50257;
    const double C50125 = C50012 * C50122;
    const double C50153 = C49863 * C50122;
    const double C50283 = C50276 + C50277;
    const double C50345 = C49863 * C50338;
    const double C50427 = C50413 + C50424;
    const double C50456 = C50449 + C50450;
    const double C50497 = C49863 * C50491;
    const double C50552 = C49961 + C50546;
    const double C50000 = C49869 * C49997;
    const double C50024 = C50012 * C49997;
    const double C50048 = C49997 * ae;
    const double C50046 = C49863 * C49997;
    const double C50045 = C49997 * be;
    const double C2492 = 3 * (C49947 + C49963 * C50039) +
                         C50012 * (2 * C50028 + C50012 * C50097);
    const double C2698 = C49947 + C49963 * C50039 + C50097 * C49866;
    const double C3236 = C49863 * (2 * C50028 + C50012 * C50097);
    const double C5596 = 3 * (C49947 + C49963 * C49866) +
                         C49863 * (2 * C50054 + C49863 * C50245);
    const double C50129 = C50118 + C50126;
    const double C6591 = 3 * (C50032 + C50112 * C49866) +
                         C49863 * (2 * C50164 + C49863 * C50285);
    const double C50352 = C50332 + C50347;
    const double C50431 = C50012 * C50428;
    const double C50442 = C50428 * ae;
    const double C50440 = C49863 * C50428;
    const double C50439 = C50428 * be;
    const double C22961 = 3 * (C50083 + C50141 * C49866) +
                          C49863 * (2 * C50172 + C49863 * C50458);
    const double C50504 = C50477 + C50499;
    const double C50560 = C50553 * ae;
    const double C50558 = C49863 * C50553;
    const double C50557 = C50553 * be;
    const double C137 = (4 * (2 * C49941 + C49869 * C49952) +
                         C49869 * (3 * C49952 + C49869 * C49975)) /
                        C49753;
    const double C315 =
        (2 * C49941 + C49869 * C49952 + C49975 * C50039) / C49753;
    const double C317 = (C50012 * (3 * C49952 + C49869 * C49975)) / C49753;
    const double C2524 = C117 * C2496;
    const double C3519 = (4 * (2 * C50037 + C50012 * C50084) +
                          C50012 * (3 * C50084 + C50012 * C50149)) /
                         C49753;
    const double C136 = (4 * (2 * C49939 + C49869 * C49951) +
                         C49869 * (3 * C49951 + C49869 * C49974)) /
                        C49753;
    const double C314 =
        (2 * C49939 + C49869 * C49951 + C49974 * C50039) / C49753;
    const double C316 = (C50012 * (3 * C49951 + C49869 * C49974)) / C49753;
    const double C2522 = C117 * C2495;
    const double C3518 = (4 * (2 * C50035 + C50012 * C50082) +
                          C50012 * (3 * C50082 + C50012 * C50147)) /
                         C49753;
    const double C51151 = C51093 - C51133;
    const double C51152 = C51097 - C51135;
    const double C51153 = C51100 - C51136;
    const double C51154 = C51104 - C51138;
    const double C51155 = C51107 - C51140;
    const double C51156 = C51114 - C51141;
    const double C51157 = C51109 - C51143;
    const double C51158 = C51118 - C51144;
    const double C51159 = C51120 - C51146;
    const double C51160 = C51127 - C51147;
    const double C49771 = C50999 - C49770;
    const double C44267 = C44250 * C502;
    const double C44265 = C44250 * C501;
    const double C44263 = C44250 * C500;
    const double C44261 = C44250 * C499;
    const double C44464 = C44250 * C1265;
    const double C44462 = C44250 * C1264;
    const double C47251 = C44250 * C2700;
    const double C47249 = C44250 * C2699;
    const double C47247 = C44250 * C1267;
    const double C47245 = C44250 * C1266;
    const double C178 = C173 + C151;
    const double C2542 = C2536 + C2506;
    const double C44280 = C51161 * C143;
    const double C44276 = C51161 * C142;
    const double C44256 = C51161 * C141;
    const double C44477 = C51161 * C325;
    const double C44473 = C51161 * C322;
    const double C44665 = C51161 * C514;
    const double C44661 = C51161 * C511;
    const double C44841 = C51161 * C321;
    const double C45008 = C51161 * C510;
    const double C45223 = C51161 * C940;
    const double C47260 = C51161 * C324;
    const double C47240 = C51161 * C323;
    const double C47922 = C51161 * C939;
    const double C48179 = C51161 * C1157;
    const double C48346 = C51161 * C1271;
    const double C48853 = C51161 * C1618;
    const double C38919 =
        (C51161 * C51058) / C49753 + (C51124 - C51148) / C49805;
    const double C44272 = C51162 * C510;
    const double C44260 = C51162 * C511;
    const double C44469 = C51162 * C940;
    const double C44657 = C51162 * C514;
    const double C47256 = C51162 * C1618;
    const double C47244 = C51162 * C939;
    const double C47918 = C51162 * C1271;
    const double C48183 = C51162 * C3243;
    const double C48857 = C51162 * C2705;
    const double C38920 =
        (C51162 * C51058) / C49753 + (2 * C51063 + C51161) / C49805;
    const double C38921 = (C51058 * C51063) / C49763 + C51162 / C49805;
    const double C364 = C358 - C345;
    const double C553 = C547 - C534;
    const double C960 = C957 - C947;
    const double C3694 = C3692 - C3686;
    const double C179 = C174 + C155;
    const double C180 = C175 + C159;
    const double C369 = C363 + C342;
    const double C2543 = C2537 + C2510;
    const double C558 = C552 + C531;
    const double C3268 = C3265 + C3254;
    const double C368 = C362 + C338;
    const double C557 = C551 + C527;
    const double C2545 = C2539 + C2520;
    const double C3267 = C3264 + C3250;
    const double C145 =
        (4 * (2 * C49869 * C49885 + C49869 * C49895) +
         C49869 * (3 * C49895 +
                   C49869 * (2 * C49869 * C49893 +
                             C49869 * (C49893 +
                                       (C49888 * C49889 +
                                        C49866 * bs[7] * std::pow(C49865, 7)) *
                                           C49752 * C49881)))) /
        C49761;
    const double C320 =
        ((yP - yQ) * (2 * C49869 * C49885 + C49869 * C49895)) / C49761;
    const double C326 =
        (C49876 + C49885 * C49881 + C49895 * std::pow(yP - yQ, 2)) / C49761;
    const double C509 =
        (ae * (2 * C49869 * C49925 +
               C49869 * (C49925 + C49880 * C49879 * C49921 * C49881)) +
         be * (2 * C49869 * C49926 +
               C49869 * (C49926 + C49880 * C49879 * C49922 * C49881)) +
         C49863 * (2 * C49869 * C49885 + C49869 * C49895)) /
        C49761;
    const double C515 =
        (C49876 + C49885 * C49881 + ae * (C49863 * C49951 + C49947 * be) +
         be * (C49863 * C49952 + C49947 * ae) +
         C49863 * (ae * C49951 + be * C49952 + C49863 * C49895)) /
        C49761;
    const double C941 = (ae * C50012 * C49951 + be * C50012 * C49952 +
                         C49863 * C50012 * C49895) /
                        C49761;
    const double C50225 = C50219 + C50212;
    const double C2514 = C50999 * C1156;
    const double C13859 = C51124 * C1156;
    const double C36339 = C33299 * C1156;
    const double C2719 = C50999 * C1270;
    const double C5410 = C5190 * C1270;
    const double C6188 = C5189 * C1270;
    const double C11739 = C51063 * C1270;
    const double C14079 = C51124 * C1270;
    const double C34295 = C51063 * C1270;
    const double C41158 = C33299 * C1270;
    const double C44465 = C44245 * C1270;
    const double C45227 = C51162 * C1270;
    const double C2712 = C50999 * C1617;
    const double C5426 = C5189 * C1617;
    const double C10979 = C51063 * C1617;
    const double C14750 = C51124 * C1617;
    const double C33535 = C51063 * C1617;
    const double C37021 = C33299 * C1617;
    const double C44481 = C51162 * C1617;
    const double C2525 = C50999 * C2500;
    const double C3260 = C50999 * C3244;
    const double C13863 = C51063 * C3244;
    const double C36343 = C51063 * C3244;
    const double C3521 =
        (4 * (2 * C50012 * C49885 + C50012 * C50108) +
         C50012 *
             (3 * C50108 + C50012 * (2 * C50012 * C49893 +
                                     C50012 * (C49893 + C49905 * C50039)))) /
        C49761;
    const double C4190 =
        (ae * (3 * C50082 + C50012 * C50147) +
         be * (3 * C50084 + C50012 * C50149) +
         C49863 *
             (3 * C50108 + C50012 * (2 * C50012 * C49893 +
                                     C50012 * (C49893 + C49905 * C50039)))) /
        C49761;
    const double C50309 = C50301 + C50302;
    const double C50392 = C49863 * C50386;
    const double C50515 = 2 * C50386;
    const double C503 =
        (2 * C49939 + C49869 * C49951 +
         C49863 * (C49863 * C49974 + C49970 * be) + C49863 * C49970 * be) /
        C49753;
    const double C504 =
        (2 * C49941 + C49869 * C49952 +
         C49863 * (C49863 * C49975 + C49970 * ae) + C49863 * C49970 * ae) /
        C49753;
    const double C505 = (C49863 * (3 * C49951 + C49869 * C49974) +
                         (3 * C49947 + C49869 * C49970) * be) /
                        C49753;
    const double C506 = (C49863 * (3 * C49952 + C49869 * C49975) +
                         (3 * C49947 + C49869 * C49970) * ae) /
                        C49753;
    const double C935 =
        (C49863 * C50012 * C49974 + C50012 * C49970 * be) / C49753;
    const double C936 =
        (C49863 * C50012 * C49975 + C50012 * C49970 * ae) / C49753;
    const double C124 = 4 * (2 * C49940 + C49869 * C49947) +
                        C49869 * (3 * C49947 + C49869 * C49970);
    const double C297 = 2 * C49940 + C49869 * C49947 + C49970 * C50039;
    const double C298 = C50012 * (3 * C49947 + C49869 * C49970);
    const double C486 = 2 * C49940 + C49869 * C49947 + C49970 * C49866;
    const double C487 = C49863 * (3 * C49947 + C49869 * C49970);
    const double C927 = C49863 * C50012 * C49970;
    const double C1142 =
        2 * C50012 * C49970 + C50012 * (C49970 + C49997 * C50039);
    const double C1603 = C49863 * (C49970 + C49997 * C50039);
    const double C1887 =
        2 * C49863 * C49970 + C49863 * (C49970 + C49997 * C49866);
    const double C5803 = C5195 * C1262;
    const double C8390 = C117 * C1262;
    const double C11744 = C10747 * C1262;
    const double C34300 = C33303 * C1262;
    const double C44846 = C44250 * C1262;
    const double C5805 = C5195 * C1263;
    const double C8392 = C117 * C1263;
    const double C11746 = C10747 * C1263;
    const double C34302 = C33303 * C1263;
    const double C44848 = C44250 * C1263;
    const double C8391 = C118 * C1257;
    const double C1894 = (2 * (C49863 * C49952 + C49947 * ae) +
                          C49863 * (C49952 + C49863 * C50058 + C50054 * ae) +
                          (C49947 + C49963 * C49866) * ae) /
                         C49753;
    const double C1893 = (2 * (C49863 * C49951 + C49947 * be) +
                          C49863 * (C49951 + C49863 * C50057 + C50054 * be) +
                          (C49947 + C49963 * C49866) * be) /
                         C49753;
    const double C2723 = C50999 * C2706;
    const double C5430 = C5190 * C2706;
    const double C14754 = C51063 * C2706;
    const double C37025 = C51063 * C2706;
    const double C44485 = C44245 * C2706;
    const double C2720 = C117 * C2701;
    const double C5427 = C5195 * C2701;
    const double C14751 = C10747 * C2701;
    const double C37022 = C33303 * C2701;
    const double C44482 = C44250 * C2701;
    const double C2722 = C117 * C2702;
    const double C5429 = C5195 * C2702;
    const double C14753 = C10747 * C2702;
    const double C37024 = C33303 * C2702;
    const double C44484 = C44250 * C2702;
    const double C3257 = C117 * C3239;
    const double C13860 = C10747 * C3239;
    const double C36340 = C33303 * C3239;
    const double C3259 = C117 * C3240;
    const double C13862 = C10747 * C3240;
    const double C36342 = C33303 * C3240;
    const double C2523 = C118 * C2491;
    const double C2721 = C118 * C2697;
    const double C3258 = C118 * C3235;
    const double C4595 = (2 * (C49863 * C50033 + C50032 * ae) +
                          C49863 * (C50033 + C49863 * C50168 + C50164 * ae) +
                          (C50032 + C50112 * C49866) * ae) /
                         C49753;
    const double C4601 = (2 * (ae * C50031 + be * C50033 + C49863 * C50161) +
                          ae * (C50031 + C49863 * C50167 + C50164 * be) +
                          be * (C50033 + C49863 * C50168 + C50164 * ae) +
                          C49863 * (C50161 + ae * C50167 + be * C50168 +
                                    C49863 * (ae * C50110 + be * C50114 +
                                              C49863 * C50012 * C50103))) /
                         C49761;
    const double C4594 = (2 * (C49863 * C50031 + C50032 * be) +
                          C49863 * (C50031 + C49863 * C50167 + C50164 * be) +
                          (C50032 + C50112 * C49866) * be) /
                         C49753;
    const double C50229 = C49958 + C50227;
    const double C50228 = C49954 + C50226;
    const double C50336 = C49897 + C50322;
    const double C3682 =
        (2 * C50012 * C49885 + C50012 * C50108 +
         ae * (C49863 * C50147 + C50148 * be) +
         be * (C49863 * C50149 + C50148 * ae) +
         C49863 * (ae * C50147 + be * C50149 +
                   C49863 * (2 * C50012 * C49893 +
                             C50012 * (C49893 + C49905 * C50039)))) /
        C49761;
    const double C3679 =
        (2 * C50035 + C50012 * C50082 +
         C49863 * (C49863 * C50147 + C50148 * be) + C49863 * C50148 * be) /
        C49753;
    const double C3680 =
        (2 * C50037 + C50012 * C50084 +
         C49863 * (C49863 * C50149 + C50148 * ae) + C49863 * C50148 * ae) /
        C49753;
    const double C4187 = (C49863 * (3 * C50082 + C50012 * C50147) +
                          (3 * C50083 + C50012 * C50148) * be) /
                         C49753;
    const double C4188 = (C49863 * (3 * C50084 + C50012 * C50149) +
                          (3 * C50083 + C50012 * C50148) * ae) /
                         C49753;
    const double C3515 = 4 * (2 * C50036 + C50012 * C50083) +
                         C50012 * (3 * C50083 + C50012 * C50148);
    const double C3676 = 2 * C50036 + C50012 * C50083 + C50148 * C49866;
    const double C4184 = C49863 * (3 * C50083 + C50012 * C50148);
    const double C21281 =
        2 * C49863 * C50148 + C49863 * (C50148 + C50428 * C49866);
    const double C4597 = (2 * (C49863 * C50084 + C50083 * ae) +
                          C49863 * (C50084 + C49863 * C50176 + C50172 * ae) +
                          (C50083 + C50141 * C49866) * ae) /
                         C49753;
    const double C4602 =
        (2 * (ae * C50082 + be * C50084 + C49863 * C50108) +
         ae * (C50082 + C49863 * C50175 + C50172 * be) +
         be * (C50084 + C49863 * C50176 + C50172 * ae) +
         C49863 * (C50108 + ae * C50175 + be * C50176 +
                   C49863 * (ae * C50139 + be * C50143 +
                             C49863 * (C49893 + C49905 * C50039)))) /
        C49761;
    const double C4596 = (2 * (C49863 * C50082 + C50083 * be) +
                          C49863 * (C50082 + C49863 * C50175 + C50172 * be) +
                          (C50083 + C50141 * C49866) * be) /
                         C49753;
    const double C50318 = C50136 + C50316;
    const double C50317 = C50132 + C50315;
    const double C50480 = C50297 + C50469;
    const double C50398 = C50395 + C50384;
    const double C7476 = 4 * (2 * C50070 + C49863 * C50199) +
                         C49863 * (3 * C50199 + C49863 * C50394);
    const double C50397 = C50393 + C50381;
    const double C50544 = C50536 + C50519;
    const double C5609 = C5195 * C1896;
    const double C11180 = C10747 * C1896;
    const double C33736 = C33303 * C1896;
    const double C44652 = C44250 * C1896;
    const double C15305 = C10747 * C4599;
    const double C22532 = C5195 * C4599;
    const double C37455 = C33303 * C4599;
    const double C47913 = C44250 * C4599;
    const double C50208 = C50206 + C50201;
    const double C171 = C160 - C161;
    const double C355 = C331 - C332;
    const double C359 = C347 - C348;
    const double C544 = C520 - C521;
    const double C548 = C536 - C537;
    const double C958 = C949 - C950;
    const double C2535 = C2526 - C2527;
    const double C3037 = C3033 - C3034;
    const double C2725 = C2716 - C2717;
    const double C5626 = C5189 * C1901;
    const double C5610 = C5190 * C1901;
    const double C11181 = C51063 * C1901;
    const double C33737 = C51063 * C1901;
    const double C44669 = C51162 * C1901;
    const double C44653 = C44245 * C1901;
    const double C5607 = C5195 * C1895;
    const double C11178 = C10747 * C1895;
    const double C33734 = C33303 * C1895;
    const double C44650 = C44250 * C1895;
    const double C2538 = C2532 - C2513;
    const double C2727 = C2724 - C2711;
    const double C3527 = C3523 - C3524;
    const double C3693 = C3688 - C3689;
    const double C4196 = C4192 - C4193;
    const double C15306 = C51063 * C4603;
    const double C22533 = C5190 * C4603;
    const double C22973 = C5189 * C4603;
    const double C37456 = C51063 * C4603;
    const double C47914 = C44245 * C4603;
    const double C48350 = C51162 * C4603;
    const double C15303 = C10747 * C4598;
    const double C22530 = C5195 * C4598;
    const double C37453 = C33303 * C4598;
    const double C47911 = C44250 * C4598;
    const double C50207 = C50205 + C50198;
    const double C50385 = C50378 + C50365;
    const double C49908 = C49869 * C49907;
    const double C50235 = C49863 * C49907;
    const double C50256 = C50012 * C49907;
    const double C1155 = (2 * C50012 * C49895 +
                          C50012 * (C49895 + C49907 * std::pow(C50012, 2))) /
                         C49761;
    const double C1269 =
        (C50012 * C49895 + ae * (C49863 * C50027 + C50028 * be) +
         be * (C49863 * C50029 + C50028 * ae) +
         C49863 * (ae * C50027 + be * C50029 + C49863 * C50012 * C49907)) /
        C49761;
    const double C1616 =
        (ae * (C49951 + C49969 * C50039) + be * (C49952 + C49971 * C50039) +
         C49863 * (C49895 + C49907 * C50039)) /
        C49761;
    const double C1900 =
        (2 * (ae * C49951 + be * C49952 + C49863 * C49895) +
         ae * (C49951 + C49863 * C50057 + C50054 * be) +
         be * (C49952 + C49863 * C50058 + C50054 * ae) +
         C49863 * (C49895 + ae * C50057 + be * C50058 +
                   C49863 * (ae * C49969 + be * C49971 + C49863 * C49907))) /
        C49761;
    const double C2501 =
        (3 * (C49895 + C49907 * C50039) +
         C50012 * (2 * C50012 * C49907 +
                   C50012 * (C49907 +
                             (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881) *
                                 C50039))) /
        C49761;
    const double C50105 = C49897 + C50104;
    const double C50275 = C49863 * C50270;
    const double C50344 = C50337 + C50326;
    const double C50409 = C50012 * C50408;
    const double C50448 = C49863 * C50408;
    const double C50490 = C50481 + C50482;
    const double C50551 = C49863 * C50545;
    const double C50006 = C49869 * C50004;
    const double C50025 = C50012 * C50004;
    const double C50047 = C49863 * C50004;
    const double C1147 =
        (2 * C50012 * C49975 + C50012 * (C49975 + C50004 * C50039)) / C49753;
    const double C1608 = (C49863 * (C49975 + C50004 * C50039) +
                          (C49970 + C49997 * C50039) * ae) /
                         C49753;
    const double C2498 = (3 * (C49952 + C49971 * C50039) +
                          C50012 * (2 * C50029 + C50012 * C50098)) /
                         C49753;
    const double C2704 =
        (C49952 + C49971 * C50039 + C49863 * (C49863 * C50098 + C50097 * ae) +
         C49863 * C50097 * ae) /
        C49753;
    const double C3242 = (C49863 * (2 * C50029 + C50012 * C50098) +
                          (2 * C50028 + C50012 * C50097) * ae) /
                         C49753;
    const double C50250 = C49863 * C50246;
    const double C50266 = C50263 + C50264;
    const double C50130 = C50120 + C50127;
    const double C50159 = C50156 + C50157;
    const double C50289 = C49863 * C50286;
    const double C50353 = C49985 + C50348;
    const double C50432 = C50012 * C50429;
    const double C50441 = C49863 * C50429;
    const double C50463 = C49863 * C50459;
    const double C50505 = C50300 + C50500;
    const double C50559 = C50554 + C50542;
    const double C50005 = C49869 * C50002;
    const double C50023 = C50012 * C50002;
    const double C50044 = C49863 * C50002;
    const double C1146 =
        (2 * C50012 * C49974 + C50012 * (C49974 + C50002 * C50039)) / C49753;
    const double C1607 = (C49863 * (C49974 + C50002 * C50039) +
                          (C49970 + C49997 * C50039) * be) /
                         C49753;
    const double C2707 =
        (C49895 + C49907 * C50039 + ae * (C49863 * C50096 + C50097 * be) +
         be * (C49863 * C50098 + C50097 * ae) +
         C49863 * (ae * C50096 + be * C50098 +
                   C49863 * (C49907 +
                             (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881) *
                                 C50039))) /
        C49761;
    const double C3245 =
        (ae * (2 * C50027 + C50012 * C50096) +
         be * (2 * C50029 + C50012 * C50098) +
         C49863 * (2 * C50012 * C49907 +
                   C50012 * (C49907 +
                             (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881) *
                                 C50039))) /
        C49761;
    const double C2497 = (3 * (C49951 + C49969 * C50039) +
                          C50012 * (2 * C50027 + C50012 * C50096)) /
                         C49753;
    const double C2703 =
        (C49951 + C49969 * C50039 + C49863 * (C49863 * C50096 + C50097 * be) +
         C49863 * C50097 * be) /
        C49753;
    const double C3241 = (C49863 * (2 * C50027 + C50012 * C50096) +
                          (2 * C50028 + C50012 * C50097) * be) /
                         C49753;
    const double C50249 = C49863 * C50243;
    const double C50265 = C50260 + C50261;
    const double C50128 = C50116 + C50125;
    const double C50158 = C50153 + C50154;
    const double C50288 = C49863 * C50283;
    const double C50351 = C49979 + C50345;
    const double C50430 = C50012 * C50427;
    const double C50438 = C49863 * C50427;
    const double C50462 = C49863 * C50456;
    const double C50503 = C50298 + C50497;
    const double C50556 = C50552 + C50539;
    const double C50003 = C49981 + C50000;
    const double C1256 = C50012 * C49970 + C50024 * C49866;
    const double C3514 = 4 * (2 * C50032 + C50012 * C50090) +
                         C50012 * (3 * C50090 + C50012 * C50129);
    const double C3675 = 2 * C50032 + C50012 * C50090 + C50129 * C49866;
    const double C4183 = C49863 * (3 * C50090 + C50012 * C50129);
    const double C7475 = 4 * (2 * C50062 + C49863 * C50222) +
                         C49863 * (3 * C50222 + C49863 * C50352);
    const double C50434 = C50415 + C50431;
    const double C23883 = 4 * (2 * C50181 + C49863 * C50312) +
                          C49863 * (3 * C50312 + C49863 * C50504);
    const double C50563 = C50530 + C50558;
    const double C166 = C117 * C137;
    const double C353 = C117 * C315;
    const double C677 = C117 * C317;
    const double C20569 = C117 * C3519;
    const double C164 = C117 * C136;
    const double C351 = C117 * C314;
    const double C675 = C117 * C316;
    const double C20567 = C117 * C3518;
    const double C107 = (C51151 * C50836) / C49753 + (C51095 - C51134) / C49805;
    const double C108 =
        (C51152 * C50836) / C49753 + (2 * C50846 + C51151) / C49805;
    const double C109 = (C50836 * C50846) / C49763 + C51152 / C49805;
    const double C113 = (C51153 * C50862) / C50859 + (C51102 - C51137) / C50861;
    const double C114 =
        (C51154 * C50862) / C50859 + (2 * C50873 + C51153) / C50861;
    const double C115 = (C50862 * C50873) / C50876 + C51154 / C50861;
    const double C1137 =
        (C51155 * C50933) / C50859 + (C51110 - C51139) / C50861;
    const double C1138 =
        (C51156 * C50933) / C50859 + (2 * C50938 + C51155) / C50861;
    const double C1139 = (C50933 * C50938) / C50876 + C51156 / C50861;
    const double C1883 =
        (C51157 * C50961) / C50859 + (C51111 - C51142) / C50861;
    const double C1884 =
        (C51158 * C50961) / C50859 + (2 * C50966 + C51157) / C50861;
    const double C1885 = (C50961 * C50966) / C50876 + C51158 / C50861;
    const double C19871 =
        (C51159 * C51030) / C49753 + (C51123 - C51145) / C49805;
    const double C19872 =
        (C51160 * C51030) / C49753 + (2 * C51035 + C51159) / C49805;
    const double C19873 = (C51030 * C51035) / C49763 + C51160 / C49805;
    const double C49772 = C49771 * C49768;
    const double C49807 = C49771 * ae;
    const double C5193 =
        ((C49771 * ae) / C49753 - C49760 / C49763) / (2 * C49753) +
        ((C49751 * ((0 * ae) / C49753 - C49764 / C49761) + C51063) * ae) /
            C49753;
    const double C10745 = (C49771 * ae) / C49753 - C49760 / C49763;
    const double C33301 =
        (-C49760 / C49753) / (2 * C49753) - (C49771 * be) / C49753;
    const double C183 = C178 * C50984;
    const double C2336 = C178 * C2330;
    const double C8073 = C178 * C51123;
    const double C17240 = C178 * C17234;
    const double C24477 = C178 * C51159;
    const double C370 = C364 + C346;
    const double C559 = C553 + C535;
    const double C963 = C960 + C948;
    const double C3696 = C3694 + C3687;
    const double C184 = C179 * C50984;
    const double C2341 = C179 * C2330;
    const double C8075 = C179 * C51123;
    const double C17242 = C179 * C17234;
    const double C24482 = C179 * C51159;
    const double C185 = C180 * C50984;
    const double C2342 = C180 * C2330;
    const double C8078 = C180 * C51123;
    const double C17245 = C180 * C17234;
    const double C24483 = C180 * C51159;
    const double C375 = C369 * C50984;
    const double C2337 = C369 * C2331;
    const double C2516 = C369 * C2330;
    const double C8074 = C369 * C51035;
    const double C8232 = C369 * C51123;
    const double C17241 = C369 * C51035;
    const double C17399 = C369 * C17234;
    const double C24478 = C369 * C51160;
    const double C24634 = C369 * C51159;
    const double C564 = C558 * C50984;
    const double C2714 = C558 * C2330;
    const double C8386 = C558 * C51123;
    const double C17553 = C558 * C17234;
    const double C24786 = C558 * C51159;
    const double C374 = C368 * C50984;
    const double C2340 = C368 * C2331;
    const double C2882 = C368 * C2330;
    const double C8076 = C368 * C51035;
    const double C8230 = C368 * C51123;
    const double C17243 = C368 * C51035;
    const double C17397 = C368 * C17234;
    const double C24481 = C368 * C51160;
    const double C24936 = C368 * C51159;
    const double C563 = C557 * C50984;
    const double C3031 = C557 * C2330;
    const double C8384 = C557 * C51123;
    const double C17551 = C557 * C17234;
    const double C25085 = C557 * C51159;
    const double C167 = C50999 * C145;
    const double C334 = C50999 * C320;
    const double C11364 = C51124 * C320;
    const double C33920 = C33299 * C320;
    const double C350 = C50999 * C326;
    const double C10983 = C51124 * C326;
    const double C33539 = C33299 * C326;
    const double C523 = C50999 * C509;
    const double C5229 = C5189 * C509;
    const double C10769 = C51063 * C509;
    const double C11526 = C51124 * C509;
    const double C33325 = C51063 * C509;
    const double C34082 = C33299 * C509;
    const double C44284 = C51162 * C509;
    const double C539 = C50999 * C515;
    const double C5213 = C5190 * C515;
    const double C5969 = C5189 * C515;
    const double C11185 = C51124 * C515;
    const double C11161 = C51063 * C515;
    const double C33741 = C33299 * C515;
    const double C33717 = C51063 * C515;
    const double C44268 = C44245 * C515;
    const double C45012 = C51162 * C515;
    const double C952 = C50999 * C941;
    const double C5802 = C5189 * C941;
    const double C10959 = C51063 * C941;
    const double C11743 = C51124 * C941;
    const double C33515 = C51063 * C941;
    const double C34299 = C33299 * C941;
    const double C44845 = C51162 * C941;
    const double C20570 = C50999 * C3521;
    const double C21016 = C50999 * C4190;
    const double C31658 = C51063 * C4190;
    const double C37296 = C51063 * C4190;
    const double C540 = C117 * C503;
    const double C5230 = C5195 * C503;
    const double C11527 = C10747 * C503;
    const double C34083 = C33303 * C503;
    const double C44285 = C44250 * C503;
    const double C542 = C117 * C504;
    const double C5232 = C5195 * C504;
    const double C11529 = C10747 * C504;
    const double C34085 = C33303 * C504;
    const double C44287 = C44250 * C504;
    const double C787 = C117 * C505;
    const double C10778 = C10747 * C505;
    const double C33334 = C33303 * C505;
    const double C789 = C117 * C506;
    const double C10780 = C10747 * C506;
    const double C33336 = C33303 * C506;
    const double C953 = C117 * C935;
    const double C11365 = C10747 * C935;
    const double C33921 = C33303 * C935;
    const double C955 = C117 * C936;
    const double C11367 = C10747 * C936;
    const double C33923 = C33303 * C936;
    const double C165 = C118 * C124;
    const double C352 = C118 * C297;
    const double C676 = C118 * C298;
    const double C541 = C118 * C486;
    const double C788 = C118 * C487;
    const double C954 = C118 * C927;
    const double C8394 = C8390 - C8391;
    const double C5972 = C5195 * C1894;
    const double C11188 = C10747 * C1894;
    const double C33744 = C33303 * C1894;
    const double C45015 = C44250 * C1894;
    const double C5970 = C5195 * C1893;
    const double C11186 = C10747 * C1893;
    const double C33742 = C33303 * C1893;
    const double C45013 = C44250 * C1893;
    const double C2534 = C2522 - C2523;
    const double C2726 = C2720 - C2721;
    const double C3263 = C3257 - C3258;
    const double C6191 = C5195 * C4595;
    const double C14082 = C10747 * C4595;
    const double C41161 = C33303 * C4595;
    const double C45230 = C44250 * C4595;
    const double C6192 = C5190 * C4601;
    const double C14083 = C51063 * C4601;
    const double C41162 = C51063 * C4601;
    const double C45231 = C44245 * C4601;
    const double C6189 = C5195 * C4594;
    const double C14080 = C10747 * C4594;
    const double C41159 = C33303 * C4594;
    const double C45228 = C44250 * C4594;
    const double C50231 = C50229 + C50224;
    const double C50230 = C50228 + C50221;
    const double C50343 = C50336 + C50323;
    const double C20679 = C50999 * C3682;
    const double C22806 = C5190 * C3682;
    const double C32319 = C51063 * C3682;
    const double C37971 = C51063 * C3682;
    const double C48187 = C44245 * C3682;
    const double C20676 = C117 * C3679;
    const double C22803 = C5195 * C3679;
    const double C32316 = C10747 * C3679;
    const double C37968 = C33303 * C3679;
    const double C48184 = C44250 * C3679;
    const double C20678 = C117 * C3680;
    const double C22805 = C5195 * C3680;
    const double C32318 = C10747 * C3680;
    const double C37970 = C33303 * C3680;
    const double C48186 = C44250 * C3680;
    const double C21013 = C117 * C4187;
    const double C31655 = C10747 * C4187;
    const double C37293 = C33303 * C4187;
    const double C21015 = C117 * C4188;
    const double C31657 = C10747 * C4188;
    const double C37295 = C33303 * C4188;
    const double C20568 = C118 * C3515;
    const double C20677 = C118 * C3676;
    const double C21014 = C118 * C4184;
    const double C23483 = C5195 * C4597;
    const double C31817 = C10747 * C4597;
    const double C37463 = C33303 * C4597;
    const double C48860 = C44250 * C4597;
    const double C23484 = C5190 * C4602;
    const double C31818 = C51063 * C4602;
    const double C37464 = C51063 * C4602;
    const double C48861 = C44245 * C4602;
    const double C23481 = C5195 * C4596;
    const double C31815 = C10747 * C4596;
    const double C37461 = C33303 * C4596;
    const double C48858 = C44250 * C4596;
    const double C50320 = C50318 + C50314;
    const double C50319 = C50317 + C50311;
    const double C50489 = C50480 + C50470;
    const double C50400 = C49863 * C50398;
    const double C50531 = 3 * C50398;
    const double C50517 = be * C50398;
    const double C50399 = C49863 * C50397;
    const double C50523 = 3 * C50397;
    const double C50516 = ae * C50397;
    const double C5598 =
        (3 * (C49937 + C49863 * C50074 + C50070 * ae) +
         C49863 * (2 * C50074 + C49863 * C50208 + C50199 * ae) +
         (2 * C50070 + C49863 * C50199) * ae) /
        C49753;
    const double C176 = C171 - C162;
    const double C361 = C355 - C333;
    const double C365 = C359 - C349;
    const double C550 = C544 - C522;
    const double C554 = C548 - C538;
    const double C961 = C958 - C951;
    const double C2541 = C2535 - C2528;
    const double C3038 = C3037 - C3035;
    const double C2728 = C2725 - C2718;
    const double C2544 = C2538 + C2514;
    const double C2730 = C2727 + C2712;
    const double C3528 = C3527 - C3525;
    const double C3695 = C3693 - C3690;
    const double C4197 = C4196 - C4194;
    const double C5603 =
        (3 * (C49876 + ae * C50073 + be * C50074 + C49863 * C50202) +
         ae * (2 * C50073 + C49863 * C50207 + C50199 * be) +
         be * (2 * C50074 + C49863 * C50208 + C50199 * ae) +
         C49863 * (2 * C50202 + ae * C50207 + be * C50208 +
                   C49863 * (C49885 + ae * C50197 + be * C50200 +
                             C49863 * (ae * C49946 + be * C49948 +
                                       C49863 * C49893)))) /
        C49761;
    const double C5597 =
        (3 * (C49936 + C49863 * C50073 + C50070 * be) +
         C49863 * (2 * C50073 + C49863 * C50207 + C50199 * be) +
         (2 * C50070 + C49863 * C50199) * be) /
        C49753;
    const double C50396 = C50385 + C50392;
    const double C49909 = C49901 + C49908;
    const double C50248 = C50242 + C50235;
    const double C2529 = C50999 * C1155;
    const double C5806 = C5190 * C1269;
    const double C8393 = C50999 * C1269;
    const double C11747 = C51063 * C1269;
    const double C34303 = C51063 * C1269;
    const double C44849 = C44245 * C1269;
    const double C3036 = C50999 * C1616;
    const double C10987 = C51063 * C1616;
    const double C33543 = C51063 * C1616;
    const double C5973 = C5190 * C1900;
    const double C11189 = C51063 * C1900;
    const double C33745 = C51063 * C1900;
    const double C45016 = C44245 * C1900;
    const double C3520 =
        (4 * (2 * C50012 * C49897 + C50012 * C50105) +
         C50012 * (3 * C50105 +
                   C50012 * (2 * C50012 * C50103 +
                             C50012 * (C50103 + C49869 *
                                                    (C49899 * C49900 +
                                                     C49866 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49752 * C50039)))) /
        C49761;
    const double C50282 = C50274 + C50275;
    const double C50350 = C49863 * C50344;
    const double C50410 = C50406 + C50409;
    const double C50461 = C50455 + C50448;
    const double C50496 = C49863 * C50490;
    const double C50555 = C50544 + C50551;
    const double C50008 = C49984 + C50006;
    const double C1261 =
        (C50012 * C49975 + C49863 * (C49863 * C50025 + C50024 * ae) +
         C49863 * C50024 * ae) /
        C49753;
    const double C50050 = C50047 + C50048;
    const double C50252 = C49971 + C50250;
    const double C6178 = (2 * (C49863 * C50029 + C50028 * ae) +
                          C49863 * (C50029 + C49863 * C50266 + C50262 * ae) +
                          (C50028 + C50258 * C49866) * ae) /
                         C49753;
    const double C3517 = (4 * (2 * C50033 + C50012 * C50091) +
                          C50012 * (3 * C50091 + C50012 * C50130)) /
                         C49753;
    const double C3678 =
        (2 * C50033 + C50012 * C50091 +
         C49863 * (C49863 * C50130 + C50129 * ae) + C49863 * C50129 * ae) /
        C49753;
    const double C4186 = (C49863 * (3 * C50091 + C50012 * C50130) +
                          (3 * C50090 + C50012 * C50129) * ae) /
                         C49753;
    const double C4593 = (2 * (C49863 * C50091 + C50090 * ae) +
                          C49863 * (C50091 + C49863 * C50159 + C50155 * ae) +
                          (C50090 + C50123 * C49866) * ae) /
                         C49753;
    const double C50291 = C50114 + C50289;
    const double C50356 = C50353 + C50342;
    const double C50435 = C50418 + C50432;
    const double C50444 = C50441 + C50442;
    const double C50465 = C50143 + C50463;
    const double C50507 = C50505 + C50495;
    const double C50564 = C49863 * C50559;
    const double C50007 = C49978 + C50005;
    const double C1260 =
        (C50012 * C49974 + C49863 * (C49863 * C50023 + C50024 * be) +
         C49863 * C50024 * be) /
        C49753;
    const double C50049 = C50044 + C50045;
    const double C50251 = C49969 + C50249;
    const double C6179 =
        (2 * (ae * C50027 + be * C50029 + C49863 * C50256) +
         ae * (C50027 + C49863 * C50265 + C50262 * be) +
         be * (C50029 + C49863 * C50266 + C50262 * ae) +
         C49863 *
             (C50256 + ae * C50265 + be * C50266 +
              C49863 * (ae * C50257 + be * C50259 +
                        C49863 * C50012 *
                            (C49905 + (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                          C49752 * C49881)))) /
        C49761;
    const double C6177 = (2 * (C49863 * C50027 + C50028 * be) +
                          C49863 * (C50027 + C49863 * C50265 + C50262 * be) +
                          (C50028 + C50258 * C49866) * be) /
                         C49753;
    const double C3681 =
        (2 * C50012 * C49897 + C50012 * C50105 +
         ae * (C49863 * C50128 + C50129 * be) +
         be * (C49863 * C50130 + C50129 * ae) +
         C49863 * (ae * C50128 + be * C50130 +
                   C49863 * (2 * C50012 * C50103 +
                             C50012 * (C50103 + C49869 *
                                                    (C49899 * C49900 +
                                                     C49866 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49752 * C50039)))) /
        C49761;
    const double C4189 =
        (ae * (3 * C50089 + C50012 * C50128) +
         be * (3 * C50091 + C50012 * C50130) +
         C49863 * (3 * C50105 +
                   C50012 * (2 * C50012 * C50103 +
                             C50012 * (C50103 + C49869 *
                                                    (C49899 * C49900 +
                                                     C49866 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49752 * C50039)))) /
        C49761;
    const double C3516 = (4 * (2 * C50031 + C50012 * C50089) +
                          C50012 * (3 * C50089 + C50012 * C50128)) /
                         C49753;
    const double C3677 =
        (2 * C50031 + C50012 * C50089 +
         C49863 * (C49863 * C50128 + C50129 * be) + C49863 * C50129 * be) /
        C49753;
    const double C4185 = (C49863 * (3 * C50089 + C50012 * C50128) +
                          (3 * C50090 + C50012 * C50129) * be) /
                         C49753;
    const double C4600 =
        (2 * (ae * C50089 + be * C50091 + C49863 * C50105) +
         ae * (C50089 + C49863 * C50158 + C50155 * be) +
         be * (C50091 + C49863 * C50159 + C50155 * ae) +
         C49863 * (C50105 + ae * C50158 + be * C50159 +
                   C49863 * (ae * C50122 + be * C50124 +
                             C49863 * (C50103 + C49869 *
                                                    (C49899 * C49900 +
                                                     C49866 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49752 * C50039)))) /
        C49761;
    const double C4592 = (2 * (C49863 * C50089 + C50090 * be) +
                          C49863 * (C50089 + C49863 * C50158 + C50155 * be) +
                          (C50090 + C50123 * C49866) * be) /
                         C49753;
    const double C50290 = C50110 + C50288;
    const double C50355 = C50351 + C50339;
    const double C50433 = C50412 + C50430;
    const double C50443 = C50438 + C50439;
    const double C50464 = C50139 + C50462;
    const double C50506 = C50503 + C50492;
    const double C50562 = C49863 * C50556;
    const double C125 = 5 * (3 * C49947 + C49869 * C49970) +
                        C49869 * (4 * C49970 + C49869 * C50003);
    const double C299 = 3 * C49947 + C49869 * C49970 + C50003 * C50039;
    const double C488 = 3 * C49947 + C49869 * C49970 + C50003 * C49866;
    const double C670 = C50012 * (4 * C49970 + C49869 * C50003);
    const double C782 = C49863 * (4 * C49970 + C49869 * C50003);
    const double C928 = C49863 * C50012 * C50003;
    const double C20562 = 5 * (3 * C50083 + C50012 * C50148) +
                          C50012 * (4 * C50148 + C50012 * C50434);
    const double C20671 = 3 * C50083 + C50012 * C50148 + C50434 * C49866;
    const double C21008 = C49863 * (4 * C50148 + C50012 * C50434);
    const double C40303 = 5 * (3 * C50199 + C49863 * C50394) +
                          C49863 * (4 * C50394 + C49863 * C50563);
    const double C49777 = C49751 * C49772;
    const double C5192 =
        (ae * -2 * C49760) / (C49761 * 2 * C49753) +
        (((C49751 * ((-4 * C49764) / C49753 - (C49751 * C49772) / C49753) *
           ae) /
              C49753 +
          2 * ((C49771 * ae) / C49753 - C49760 / C49763)) *
         ae) /
            C49753 -
        C49772 / C49763;
    const double C5196 = (-C49772 / C49753) / (4 * C49761);
    const double C10748 = (-C49772 / C49753) / (2 * C49753);
    const double C33304 = (-C49772 / C49753) / (2 * C49753);
    const double C38930 = (-C49772 / C49753) / (4 * C49823);
    const double C44251 = (-C49772 / C49753) / (4 * C49761);
    const double C49813 = C49807 / C49753;
    const double C5228 = C5193 * C490;
    const double C5226 = C5193 * C489;
    const double C5216 = C5193 * C492;
    const double C5214 = C5193 * C491;
    const double C5204 = C5193 * C494;
    const double C5202 = C5193 * C493;
    const double C5425 = C5193 * C1612;
    const double C5423 = C5193 * C1611;
    const double C5413 = C5193 * C932;
    const double C5411 = C5193 * C931;
    const double C5625 = C5193 * C1896;
    const double C5623 = C5193 * C1895;
    const double C5613 = C5193 * C500;
    const double C5611 = C5193 * C499;
    const double C5801 = C5193 * C934;
    const double C5799 = C5193 * C933;
    const double C5968 = C5193 * C502;
    const double C5966 = C5193 * C501;
    const double C6187 = C5193 * C1265;
    const double C6185 = C5193 * C1264;
    const double C21874 = C5193 * C1614;
    const double C21872 = C5193 * C1613;
    const double C21862 = C5193 * C930;
    const double C21860 = C5193 * C929;
    const double C22536 = C5193 * C1267;
    const double C22534 = C5193 * C1266;
    const double C22801 = C5193 * C3238;
    const double C22799 = C5193 * C3237;
    const double C22972 = C5193 * C4599;
    const double C22970 = C5193 * C4598;
    const double C23479 = C5193 * C2700;
    const double C23477 = C5193 * C2699;
    const double C10776 = C10745 * C135;
    const double C10774 = C10745 * C134;
    const double C10772 = C10745 * C133;
    const double C10770 = C10745 * C132;
    const double C10760 = C10745 * C131;
    const double C10758 = C10745 * C130;
    const double C10752 = C10745 * C129;
    const double C10750 = C10745 * C128;
    const double C10982 = C10745 * C313;
    const double C10980 = C10745 * C312;
    const double C10974 = C10745 * C311;
    const double C10972 = C10745 * C310;
    const double C10970 = C10745 * C305;
    const double C10968 = C10745 * C304;
    const double C10962 = C10745 * C303;
    const double C10960 = C10745 * C302;
    const double C11184 = C10745 * C502;
    const double C11182 = C10745 * C501;
    const double C11176 = C10745 * C500;
    const double C11174 = C10745 * C499;
    const double C11172 = C10745 * C494;
    const double C11170 = C10745 * C493;
    const double C11164 = C10745 * C492;
    const double C11162 = C10745 * C491;
    const double C11363 = C10745 * C301;
    const double C11361 = C10745 * C300;
    const double C11525 = C10745 * C490;
    const double C11523 = C10745 * C489;
    const double C11742 = C10745 * C934;
    const double C11740 = C10745 * C933;
    const double C11734 = C10745 * C932;
    const double C11732 = C10745 * C931;
    const double C13858 = C10745 * C1151;
    const double C13856 = C10745 * C1150;
    const double C13853 = C10745 * C309;
    const double C13851 = C10745 * C308;
    const double C13838 = C10745 * C307;
    const double C13836 = C10745 * C306;
    const double C14078 = C10745 * C1265;
    const double C14076 = C10745 * C1264;
    const double C14749 = C10745 * C1612;
    const double C14747 = C10745 * C1611;
    const double C14744 = C10745 * C930;
    const double C14742 = C10745 * C929;
    const double C15093 = C10745 * C1153;
    const double C15091 = C10745 * C1152;
    const double C15301 = C10745 * C1267;
    const double C15299 = C10745 * C1266;
    const double C15961 = C10745 * C1614;
    const double C15959 = C10745 * C1613;
    const double C31653 = C10745 * C2494;
    const double C31651 = C10745 * C2493;
    const double C31813 = C10745 * C2700;
    const double C31811 = C10745 * C2699;
    const double C32314 = C10745 * C3238;
    const double C32312 = C10745 * C3237;
    const double C33332 = C33301 * C135;
    const double C33330 = C33301 * C134;
    const double C33328 = C33301 * C133;
    const double C33326 = C33301 * C132;
    const double C33316 = C33301 * C131;
    const double C33314 = C33301 * C130;
    const double C33308 = C33301 * C129;
    const double C33306 = C33301 * C128;
    const double C33538 = C33301 * C313;
    const double C33536 = C33301 * C312;
    const double C33530 = C33301 * C311;
    const double C33528 = C33301 * C310;
    const double C33526 = C33301 * C305;
    const double C33524 = C33301 * C304;
    const double C33518 = C33301 * C303;
    const double C33516 = C33301 * C302;
    const double C33740 = C33301 * C502;
    const double C33738 = C33301 * C501;
    const double C33732 = C33301 * C500;
    const double C33730 = C33301 * C499;
    const double C33728 = C33301 * C494;
    const double C33726 = C33301 * C493;
    const double C33720 = C33301 * C492;
    const double C33718 = C33301 * C491;
    const double C33919 = C33301 * C301;
    const double C33917 = C33301 * C300;
    const double C34081 = C33301 * C490;
    const double C34079 = C33301 * C489;
    const double C34298 = C33301 * C934;
    const double C34296 = C33301 * C933;
    const double C34290 = C33301 * C932;
    const double C34288 = C33301 * C931;
    const double C36338 = C33301 * C1151;
    const double C36336 = C33301 * C1150;
    const double C36334 = C33301 * C1153;
    const double C36332 = C33301 * C1152;
    const double C36322 = C33301 * C309;
    const double C36320 = C33301 * C308;
    const double C36314 = C33301 * C307;
    const double C36312 = C33301 * C306;
    const double C37020 = C33301 * C1612;
    const double C37018 = C33301 * C1611;
    const double C37016 = C33301 * C930;
    const double C37014 = C33301 * C929;
    const double C37008 = C33301 * C1614;
    const double C37006 = C33301 * C1613;
    const double C37291 = C33301 * C2494;
    const double C37289 = C33301 * C2493;
    const double C37459 = C33301 * C2700;
    const double C37457 = C33301 * C2699;
    const double C37451 = C33301 * C1267;
    const double C37449 = C33301 * C1266;
    const double C37966 = C33301 * C3238;
    const double C37964 = C33301 * C3237;
    const double C41157 = C33301 * C1265;
    const double C41155 = C33301 * C1264;
    const double C376 = C370 * C50984;
    const double C2338 = C370 * C2332;
    const double C2521 = C370 * C2330;
    const double C2515 = C370 * C2331;
    const double C8233 = C370 * C51123;
    const double C8231 = C370 * C51035;
    const double C17400 = C370 * C17234;
    const double C17398 = C370 * C51035;
    const double C24479 = C370 * C24473;
    const double C24635 = C370 * C51159;
    const double C24633 = C370 * C51160;
    const double C565 = C559 * C50984;
    const double C2715 = C559 * C2330;
    const double C8387 = C559 * C51123;
    const double C17554 = C559 * C17234;
    const double C24787 = C559 * C51159;
    const double C966 = C963 * C50984;
    const double C2713 = C963 * C2331;
    const double C3255 = C963 * C2330;
    const double C8385 = C963 * C51035;
    const double C8890 = C963 * C51123;
    const double C17552 = C963 * C51035;
    const double C18050 = C963 * C17234;
    const double C24785 = C963 * C51160;
    const double C25282 = C963 * C51159;
    const double C8081 = C8075 + C8076;
    const double C17248 = C17242 + C17243;
    const double C172 = C164 - C165;
    const double C360 = C351 - C352;
    const double C679 = C675 - C676;
    const double C549 = C540 - C541;
    const double C791 = C787 - C788;
    const double C959 = C953 - C954;
    const double C8395 = C8394 - C8392;
    const double C2540 = C2534 - C2524;
    const double C2729 = C2726 - C2722;
    const double C3266 = C3263 - C3259;
    const double C5600 =
        (3 * (C49941 + C49863 * C50066 + C50062 * ae) +
         C49863 * (2 * C50066 + C49863 * C50231 + C50222 * ae) +
         (2 * C50062 + C49863 * C50222) * ae) /
        C49753;
    const double C5604 =
        (3 * (C50020 + ae * C50065 + be * C50066 + C49863 * C50225) +
         ae * (2 * C50065 + C49863 * C50230 + C50222 * be) +
         be * (2 * C50066 + C49863 * C50231 + C50222 * ae) +
         C49863 * (2 * C50225 + ae * C50230 + be * C50231 +
                   C49863 * (C49897 + ae * C50220 + be * C50223 +
                             C49863 * (ae * C49979 + be * C49985 +
                                       C49863 * C50103)))) /
        C49761;
    const double C5599 =
        (3 * (C49939 + C49863 * C50065 + C50062 * be) +
         C49863 * (2 * C50065 + C49863 * C50230 + C50222 * be) +
         (2 * C50062 + C49863 * C50222) * be) /
        C49753;
    const double C20571 = C20567 - C20568;
    const double C20680 = C20676 - C20677;
    const double C21017 = C21013 - C21014;
    const double C6596 =
        (3 * (C50037 + C49863 * C50185 + C50181 * ae) +
         C49863 * (2 * C50185 + C49863 * C50320 + C50312 * ae) +
         (2 * C50181 + C49863 * C50312) * ae) /
        C49753;
    const double C6598 =
        (3 * (C50178 + ae * C50184 + be * C50185 + C49863 * C50309) +
         ae * (2 * C50184 + C49863 * C50319 + C50312 * be) +
         be * (2 * C50185 + C49863 * C50320 + C50312 * ae) +
         C49863 * (2 * C50309 + ae * C50319 + be * C50320 +
                   C49863 * (C50297 + ae * C50310 + be * C50313 +
                             C49863 * (ae * C50298 + be * C50300 +
                                       C49863 * C50012 * C49905)))) /
        C49761;
    const double C6595 =
        (3 * (C50035 + C49863 * C50184 + C50181 * be) +
         C49863 * (2 * C50184 + C49863 * C50319 + C50312 * be) +
         (2 * C50181 + C49863 * C50312) * be) /
        C49753;
    const double C50402 = C50375 + C50400;
    const double C50401 = C50369 + C50399;
    const double C50535 = C50515 + C50516;
    const double C181 = C176 + C163;
    const double C367 = C361 + C334;
    const double C371 = C365 + C350;
    const double C556 = C550 + C523;
    const double C560 = C554 + C539;
    const double C964 = C961 + C952;
    const double C2731 = C2728 + C2719;
    const double C2549 = C2544 * C2331;
    const double C2548 = C2544 * C2332;
    const double C8234 = C2544 * C51035;
    const double C17401 = C2544 * C51035;
    const double C24636 = C2544 * C51160;
    const double C24632 = C2544 * C24473;
    const double C2733 = C2730 * C2332;
    const double C3256 = C2730 * C2331;
    const double C8891 = C2730 * C51035;
    const double C18051 = C2730 * C51035;
    const double C24784 = C2730 * C24473;
    const double C25283 = C2730 * C51160;
    const double C3529 = C3528 + C3526;
    const double C3697 = C3695 + C3691;
    const double C4198 = C4197 + C4195;
    const double C146 =
        (5 * (3 * C49895 + C49869 * C49909) +
         C49869 *
             (4 * C49909 +
              C49869 * (3 * C49907 +
                        C49869 * (2 * C49869 * C49905 +
                                  C49869 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C327 = (2 * C49869 * C49885 + C49869 * C49895 +
                         C49909 * std::pow(yP - yQ, 2)) /
                        C49761;
    const double C328 = ((yP - yQ) * (3 * C49895 + C49869 * C49909)) / C49761;
    const double C329 =
        (3 * C49895 + C49869 * C49909 +
         (3 * C49907 +
          C49869 * (2 * C49869 * C49905 +
                    C49869 * (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881))) *
             std::pow(yP - yQ, 2)) /
        C49761;
    const double C516 =
        (2 * C49869 * C49885 + C49869 * C49895 +
         ae * (C49863 * C49974 + C49970 * be) +
         be * (C49863 * C49975 + C49970 * ae) +
         C49863 * (ae * C49974 + be * C49975 + C49863 * C49909)) /
        C49761;
    const double C517 = (ae * (3 * C49951 + C49869 * C49974) +
                         be * (3 * C49952 + C49869 * C49975) +
                         C49863 * (3 * C49895 + C49869 * C49909)) /
                        C49761;
    const double C673 =
        ((yP - yQ) *
         (4 * C49909 +
          C49869 * (3 * C49907 +
                    C49869 * (2 * C49869 * C49905 +
                              C49869 * (C49905 +
                                        (C49899 * C49900 +
                                         C49866 * bs[8] * std::pow(C49861, 8)) *
                                            C49752 * C49881))))) /
        C49761;
    const double C942 = (ae * C50012 * C49974 + be * C50012 * C49975 +
                         C49863 * C50012 * C49909) /
                        C49761;
    const double C1154 =
        (2 * C50012 * C49909 +
         C50012 * (C49909 +
                   (2 * C49869 * C49905 +
                    C49869 * (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881)) *
                       std::pow(C50012, 2))) /
        C49761;
    const double C1268 =
        (C50012 * C49909 + ae * (C49863 * C50023 + C50024 * be) +
         be * (C49863 * C50025 + C50024 * ae) +
         C49863 *
             (ae * C50023 + be * C50025 +
              C49863 * C50012 *
                  (2 * C49869 * C49905 +
                   C49869 * (C49905 + (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                          C49752 * C49881)))) /
        C49761;
    const double C1615 =
        (ae * (C49974 + C50002 * C50039) + be * (C49975 + C50004 * C50039) +
         C49863 * (C49909 +
                   (2 * C49869 * C49905 +
                    C49869 * (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881)) *
                       C50039)) /
        C49761;
    const double C2547 = C2541 + C2529;
    const double C3039 = C3038 + C3036;
    const double C50354 = C50343 + C50350;
    const double C20565 =
        (5 * (3 * C50108 + C50012 * C50410) +
         C50012 *
             (4 * C50410 +
              C50012 * (3 * C50408 +
                        C50012 * (2 * C50012 * C49905 +
                                  C50012 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50039))))) /
        C49761;
    const double C50502 = C50489 + C50496;
    const double C50561 = C49863 * C50555;
    const double C139 = (5 * (3 * C49952 + C49869 * C49975) +
                         C49869 * (4 * C49975 + C49869 * C50008)) /
                        C49753;
    const double C319 =
        (3 * C49952 + C49869 * C49975 + C50008 * C50039) / C49753;
    const double C508 =
        (3 * C49952 + C49869 * C49975 +
         C49863 * (C49863 * C50008 + C50003 * ae) + C49863 * C50003 * ae) /
        C49753;
    const double C672 = (C50012 * (4 * C49975 + C49869 * C50008)) / C49753;
    const double C784 = (C49863 * (4 * C49975 + C49869 * C50008) +
                         (4 * C49970 + C49869 * C50003) * ae) /
                        C49753;
    const double C938 =
        (C49863 * C50012 * C50008 + C50012 * C50003 * ae) / C49753;
    const double C1892 = (2 * (C49863 * C49975 + C49970 * ae) +
                          C49863 * (C49975 + C49863 * C50050 + C50046 * ae) +
                          (C49970 + C49997 * C49866) * ae) /
                         C49753;
    const double C50254 = C50252 + C50247;
    const double C50293 = C50291 + C50287;
    const double C50358 = C49863 * C50356;
    const double C20564 = (5 * (3 * C50084 + C50012 * C50149) +
                           C50012 * (4 * C50149 + C50012 * C50435)) /
                          C49753;
    const double C20673 =
        (3 * C50084 + C50012 * C50149 +
         C49863 * (C49863 * C50435 + C50434 * ae) + C49863 * C50434 * ae) /
        C49753;
    const double C21010 = (C49863 * (4 * C50149 + C50012 * C50435) +
                           (4 * C50148 + C50012 * C50434) * ae) /
                          C49753;
    const double C21283 = (2 * (C49863 * C50149 + C50148 * ae) +
                           C49863 * (C50149 + C49863 * C50444 + C50440 * ae) +
                           (C50148 + C50428 * C49866) * ae) /
                          C49753;
    const double C50467 = C50465 + C50460;
    const double C50509 = C49863 * C50507;
    const double C50567 = C50532 + C50564;
    const double C518 =
        (3 * C49895 + C49869 * C49909 + ae * (C49863 * C50007 + C50003 * be) +
         be * (C49863 * C50008 + C50003 * ae) +
         C49863 *
             (ae * C50007 + be * C50008 +
              C49863 * (3 * C49907 +
                        C49869 * (2 * C49869 * C49905 +
                                  C49869 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C785 =
        (ae * (4 * C49974 + C49869 * C50007) +
         be * (4 * C49975 + C49869 * C50008) +
         C49863 *
             (4 * C49909 +
              C49869 * (3 * C49907 +
                        C49869 * (2 * C49869 * C49905 +
                                  C49869 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C943 =
        (ae * C50012 * C50007 + be * C50012 * C50008 +
         C49863 * C50012 *
             (3 * C49907 +
              C49869 *
                  (2 * C49869 * C49905 +
                   C49869 * (C49905 + (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                          C49752 * C49881)))) /
        C49761;
    const double C138 = (5 * (3 * C49951 + C49869 * C49974) +
                         C49869 * (4 * C49974 + C49869 * C50007)) /
                        C49753;
    const double C318 =
        (3 * C49951 + C49869 * C49974 + C50007 * C50039) / C49753;
    const double C507 =
        (3 * C49951 + C49869 * C49974 +
         C49863 * (C49863 * C50007 + C50003 * be) + C49863 * C50003 * be) /
        C49753;
    const double C671 = (C50012 * (4 * C49974 + C49869 * C50007)) / C49753;
    const double C783 = (C49863 * (4 * C49974 + C49869 * C50007) +
                         (4 * C49970 + C49869 * C50003) * be) /
                        C49753;
    const double C937 =
        (C49863 * C50012 * C50007 + C50012 * C50003 * be) / C49753;
    const double C1899 =
        (2 * (ae * C49974 + be * C49975 + C49863 * C49909) +
         ae * (C49974 + C49863 * C50049 + C50046 * be) +
         be * (C49975 + C49863 * C50050 + C50046 * ae) +
         C49863 *
             (C49909 + ae * C50049 + be * C50050 +
              C49863 * (ae * C50002 + be * C50004 +
                        C49863 * (2 * C49869 * C49905 +
                                  C49869 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C1891 = (2 * (C49863 * C49974 + C49970 * be) +
                          C49863 * (C49974 + C49863 * C50049 + C50046 * be) +
                          (C49970 + C49997 * C49866) * be) /
                         C49753;
    const double C50253 = C50251 + C50244;
    const double C50292 = C50290 + C50284;
    const double C50357 = C49863 * C50355;
    const double C20674 =
        (3 * C50108 + C50012 * C50410 + ae * (C49863 * C50433 + C50434 * be) +
         be * (C49863 * C50435 + C50434 * ae) +
         C49863 *
             (ae * C50433 + be * C50435 +
              C49863 * (3 * C50408 +
                        C50012 * (2 * C50012 * C49905 +
                                  C50012 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50039))))) /
        C49761;
    const double C21011 =
        (ae * (4 * C50147 + C50012 * C50433) +
         be * (4 * C50149 + C50012 * C50435) +
         C49863 *
             (4 * C50410 +
              C50012 * (3 * C50408 +
                        C50012 * (2 * C50012 * C49905 +
                                  C50012 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50039))))) /
        C49761;
    const double C20563 = (5 * (3 * C50082 + C50012 * C50147) +
                           C50012 * (4 * C50147 + C50012 * C50433)) /
                          C49753;
    const double C20672 =
        (3 * C50082 + C50012 * C50147 +
         C49863 * (C49863 * C50433 + C50434 * be) + C49863 * C50434 * be) /
        C49753;
    const double C21009 = (C49863 * (4 * C50147 + C50012 * C50433) +
                           (4 * C50148 + C50012 * C50434) * be) /
                          C49753;
    const double C21284 =
        (2 * (ae * C50147 + be * C50149 + C49863 * C50410) +
         ae * (C50147 + C49863 * C50443 + C50440 * be) +
         be * (C50149 + C49863 * C50444 + C50440 * ae) +
         C49863 *
             (C50410 + ae * C50443 + be * C50444 +
              C49863 * (ae * C50427 + be * C50429 +
                        C49863 * (2 * C50012 * C49905 +
                                  C50012 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50039))))) /
        C49761;
    const double C21282 = (2 * (C49863 * C50147 + C50148 * be) +
                           C49863 * (C50147 + C49863 * C50443 + C50440 * be) +
                           (C50148 + C50428 * C49866) * be) /
                          C49753;
    const double C50466 = C50464 + C50457;
    const double C50508 = C49863 * C50506;
    const double C50566 = C50524 + C50562;
    const double C49826 = C49777 / C49753;
    const double C5194 =
        (((-4 * C49764) / C49753 - C49777 / C49753) * ae) / C49763 +
        ((2 * ((0 * ae) / C49753 - C49764 / C49761) - C49777 / C49763) * ae) /
            C49753;
    const double C10746 =
        (((-4 * C49764) / C49753 - C49777 / C49753) * ae) / C49753;
    const double C33302 =
        -(((-4 * C49764) / C49753 - C49777 / C49753) * be) / C49753;
    const double C5223 = C5192 * C122;
    const double C5219 = C5192 * C121;
    const double C5199 = C5192 * C120;
    const double C5420 = C5192 * C295;
    const double C5416 = C5192 * C292;
    const double C5620 = C5192 * C484;
    const double C5616 = C5192 * C481;
    const double C5796 = C5192 * C291;
    const double C5963 = C5192 * C480;
    const double C6182 = C5192 * C925;
    const double C21877 = C5192 * C294;
    const double C21857 = C5192 * C293;
    const double C22539 = C5192 * C924;
    const double C22796 = C5192 * C1145;
    const double C22967 = C5192 * C1259;
    const double C23474 = C5192 * C1606;
    const double C5231 = C5196 * C486;
    const double C5211 = C5196 * C485;
    const double C5207 = C5196 * C484;
    const double C5428 = C5196 * C2697;
    const double C5408 = C5196 * C1258;
    const double C5628 = C5196 * C5595;
    const double C5608 = C5196 * C1889;
    const double C5804 = C5196 * C1257;
    const double C5971 = C5196 * C1888;
    const double C6190 = C5196 * C4589;
    const double C21869 = C5196 * C2696;
    const double C21865 = C5196 * C1259;
    const double C22531 = C5196 * C4591;
    const double C22804 = C5196 * C3676;
    const double C22975 = C5196 * C6592;
    const double C23482 = C5196 * C4590;
    const double C10779 = C10748 * C487;
    const double C10767 = C10748 * C479;
    const double C10763 = C10748 * C480;
    const double C10755 = C10748 * C481;
    const double C10985 = C10748 * C1604;
    const double C10977 = C10748 * C1605;
    const double C10965 = C10748 * C925;
    const double C10957 = C10748 * C926;
    const double C11187 = C10748 * C1888;
    const double C11179 = C10748 * C1889;
    const double C11167 = C10748 * C484;
    const double C11159 = C10748 * C485;
    const double C11366 = C10748 * C927;
    const double C11528 = C10748 * C486;
    const double C11745 = C10748 * C1257;
    const double C11737 = C10748 * C1258;
    const double C13861 = C10748 * C3235;
    const double C13848 = C10748 * C1606;
    const double C13841 = C10748 * C924;
    const double C14081 = C10748 * C4589;
    const double C14752 = C10748 * C2697;
    const double C14739 = C10748 * C1259;
    const double C15096 = C10748 * C3234;
    const double C15304 = C10748 * C4591;
    const double C15964 = C10748 * C2696;
    const double C31656 = C10748 * C4184;
    const double C31816 = C10748 * C4590;
    const double C32317 = C10748 * C3676;
    const double C33335 = C33304 * C487;
    const double C33323 = C33304 * C479;
    const double C33319 = C33304 * C480;
    const double C33311 = C33304 * C481;
    const double C33541 = C33304 * C1604;
    const double C33533 = C33304 * C1605;
    const double C33521 = C33304 * C925;
    const double C33513 = C33304 * C926;
    const double C33743 = C33304 * C1888;
    const double C33735 = C33304 * C1889;
    const double C33723 = C33304 * C484;
    const double C33715 = C33304 * C485;
    const double C33922 = C33304 * C927;
    const double C34084 = C33304 * C486;
    const double C34301 = C33304 * C1257;
    const double C34293 = C33304 * C1258;
    const double C36341 = C33304 * C3235;
    const double C36329 = C33304 * C3234;
    const double C36325 = C33304 * C1606;
    const double C36317 = C33304 * C924;
    const double C37023 = C33304 * C2697;
    const double C37011 = C33304 * C1259;
    const double C37003 = C33304 * C2696;
    const double C37294 = C33304 * C4184;
    const double C37462 = C33304 * C4590;
    const double C37454 = C33304 * C4591;
    const double C37969 = C33304 * C3676;
    const double C41160 = C33304 * C4589;
    const double C44286 = C44251 * C486;
    const double C44266 = C44251 * C485;
    const double C44262 = C44251 * C484;
    const double C44483 = C44251 * C2697;
    const double C44463 = C44251 * C1258;
    const double C44671 = C44251 * C5595;
    const double C44651 = C44251 * C1889;
    const double C44847 = C44251 * C1257;
    const double C45014 = C44251 * C1888;
    const double C45229 = C44251 * C4589;
    const double C47250 = C44251 * C2696;
    const double C47246 = C44251 * C1259;
    const double C47912 = C44251 * C4591;
    const double C48185 = C44251 * C3676;
    const double C48352 = C44251 * C6592;
    const double C48859 = C44251 * C4590;
    const double C49816 = C49813 - C49808;
    const double C177 = C172 - C166;
    const double C366 = C360 - C353;
    const double C680 = C679 - C677;
    const double C555 = C549 - C542;
    const double C792 = C791 - C789;
    const double C962 = C959 - C955;
    const double C8396 = C8395 + C8393;
    const double C2546 = C2540 + C2525;
    const double C2732 = C2729 + C2723;
    const double C3269 = C3266 + C3260;
    const double C5629 = C5195 * C5600;
    const double C44672 = C44250 * C5600;
    const double C5630 = C5190 * C5604;
    const double C44673 = C44245 * C5604;
    const double C5627 = C5195 * C5599;
    const double C44670 = C44250 * C5599;
    const double C20572 = C20571 - C20569;
    const double C20681 = C20680 - C20678;
    const double C21018 = C21017 - C21015;
    const double C22976 = C5195 * C6596;
    const double C48353 = C44250 * C6596;
    const double C22977 = C5190 * C6598;
    const double C48354 = C44245 * C6598;
    const double C22974 = C5195 * C6595;
    const double C48351 = C44250 * C6595;
    const double C50404 = C50402 + C50391;
    const double C50403 = C50401 + C50388;
    const double C50543 = C50535 + C50517;
    const double C186 = C181 * C50984;
    const double C8079 = C181 * C51123;
    const double C17246 = C181 * C17234;
    const double C373 = C367 * C50984;
    const double C2343 = C367 * C2331;
    const double C8077 = C367 * C51035;
    const double C8545 = C367 * C51123;
    const double C17244 = C367 * C51035;
    const double C17705 = C367 * C17234;
    const double C24484 = C367 * C51160;
    const double C377 = C371 * C50984;
    const double C2339 = C371 * C2332;
    const double C2883 = C371 * C2331;
    const double C8235 = C371 * C51123;
    const double C8229 = C371 * C51035;
    const double C17402 = C371 * C17234;
    const double C17396 = C371 * C51035;
    const double C24480 = C371 * C24473;
    const double C24937 = C371 * C51160;
    const double C562 = C556 * C50984;
    const double C8694 = C556 * C51123;
    const double C17854 = C556 * C17234;
    const double C566 = C560 * C50984;
    const double C8389 = C560 * C51123;
    const double C17556 = C560 * C17234;
    const double C967 = C964 * C50984;
    const double C3032 = C964 * C2331;
    const double C8383 = C964 * C51035;
    const double C8892 = C964 * C51123;
    const double C17550 = C964 * C51035;
    const double C18052 = C964 * C17234;
    const double C25086 = C964 * C51160;
    const double C2734 = C2731 * C2331;
    const double C8388 = C2731 * C51035;
    const double C17555 = C2731 * C51035;
    const double C24788 = C2731 * C51160;
    const double C354 = C50999 * C327;
    const double C678 = C50999 * C328;
    const double C543 = C50999 * C516;
    const double C5233 = C5190 * C516;
    const double C11530 = C51063 * C516;
    const double C34086 = C51063 * C516;
    const double C44288 = C44245 * C516;
    const double C790 = C50999 * C517;
    const double C10781 = C51063 * C517;
    const double C33337 = C51063 * C517;
    const double C956 = C50999 * C942;
    const double C11368 = C51063 * C942;
    const double C33924 = C51063 * C942;
    const double C2884 = C2547 * C2332;
    const double C8236 = C2547 * C51035;
    const double C17403 = C2547 * C51035;
    const double C24938 = C2547 * C24473;
    const double C3040 = C3039 * C2332;
    const double C8893 = C3039 * C51035;
    const double C18053 = C3039 * C51035;
    const double C25087 = C3039 * C24473;
    const double C5602 =
        (3 * (C49952 + C49863 * C50058 + C50054 * ae) +
         C49863 * (2 * C50058 + C49863 * C50254 + C50245 * ae) +
         (2 * C50054 + C49863 * C50245) * ae) /
        C49753;
    const double C6594 =
        (3 * (C50033 + C49863 * C50168 + C50164 * ae) +
         C49863 * (2 * C50168 + C49863 * C50293 + C50285 * ae) +
         (2 * C50164 + C49863 * C50285) * ae) /
        C49753;
    const double C50360 = C50333 + C50358;
    const double C22963 =
        (3 * (C50084 + C49863 * C50176 + C50172 * ae) +
         C49863 * (2 * C50176 + C49863 * C50467 + C50458 * ae) +
         (2 * C50172 + C49863 * C50458) * ae) /
        C49753;
    const double C50511 = C50478 + C50509;
    const double C50569 = C50567 + C50550;
    const double C5605 =
        (3 * (C49895 + ae * C50057 + be * C50058 + C49863 * C50248) +
         ae * (2 * C50057 + C49863 * C50253 + C50245 * be) +
         be * (2 * C50058 + C49863 * C50254 + C50245 * ae) +
         C49863 *
             (2 * C50248 + ae * C50253 + be * C50254 +
              C49863 * (C49907 + ae * C50243 + be * C50246 +
                        C49863 * (ae * C49996 + be * C49998 +
                                  C49863 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C5601 =
        (3 * (C49951 + C49863 * C50057 + C50054 * be) +
         C49863 * (2 * C50057 + C49863 * C50253 + C50245 * be) +
         (2 * C50054 + C49863 * C50245) * be) /
        C49753;
    const double C6597 =
        (3 * (C50161 + ae * C50167 + be * C50168 + C49863 * C50282) +
         ae * (2 * C50167 + C49863 * C50292 + C50285 * be) +
         be * (2 * C50168 + C49863 * C50293 + C50285 * ae) +
         C49863 *
             (2 * C50282 + ae * C50292 + be * C50293 +
              C49863 * (C50270 + ae * C50283 + be * C50286 +
                        C49863 * (ae * C50271 + be * C50273 +
                                  C49863 * C50012 * C49869 *
                                      (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                      C49752)))) /
        C49761;
    const double C6593 =
        (3 * (C50031 + C49863 * C50167 + C50164 * be) +
         C49863 * (2 * C50167 + C49863 * C50292 + C50285 * be) +
         (2 * C50164 + C49863 * C50285) * be) /
        C49753;
    const double C50359 = C50327 + C50357;
    const double C22964 =
        (3 * (C50108 + ae * C50175 + be * C50176 + C49863 * C50461) +
         ae * (2 * C50175 + C49863 * C50466 + C50458 * be) +
         be * (2 * C50176 + C49863 * C50467 + C50458 * ae) +
         C49863 *
             (2 * C50461 + ae * C50466 + be * C50467 +
              C49863 * (C50408 + ae * C50456 + be * C50459 +
                        C49863 * (ae * C50421 + be * C50423 +
                                  C49863 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50039))))) /
        C49761;
    const double C22962 =
        (3 * (C50082 + C49863 * C50175 + C50172 * be) +
         C49863 * (2 * C50175 + C49863 * C50466 + C50458 * be) +
         (2 * C50172 + C49863 * C50458) * be) /
        C49753;
    const double C50510 = C50474 + C50508;
    const double C50568 = C50566 + C50547;
    const double C49829 = C49828 - C49826;
    const double C5227 = C5194 * C479;
    const double C5215 = C5194 * C480;
    const double C5203 = C5194 * C481;
    const double C5424 = C5194 * C1605;
    const double C5412 = C5194 * C925;
    const double C5624 = C5194 * C1889;
    const double C5612 = C5194 * C484;
    const double C5800 = C5194 * C926;
    const double C5967 = C5194 * C485;
    const double C6186 = C5194 * C1258;
    const double C21873 = C5194 * C1606;
    const double C21861 = C5194 * C924;
    const double C22535 = C5194 * C1259;
    const double C22800 = C5194 * C3234;
    const double C22971 = C5194 * C4591;
    const double C23478 = C5194 * C2696;
    const double C10775 = C10746 * C123;
    const double C10771 = C10746 * C122;
    const double C10759 = C10746 * C121;
    const double C10751 = C10746 * C120;
    const double C10981 = C10746 * C296;
    const double C10973 = C10746 * C295;
    const double C10969 = C10746 * C292;
    const double C10961 = C10746 * C291;
    const double C11183 = C10746 * C485;
    const double C11175 = C10746 * C484;
    const double C11171 = C10746 * C481;
    const double C11163 = C10746 * C480;
    const double C11362 = C10746 * C290;
    const double C11524 = C10746 * C479;
    const double C11741 = C10746 * C926;
    const double C11733 = C10746 * C925;
    const double C13857 = C10746 * C1144;
    const double C13852 = C10746 * C294;
    const double C13837 = C10746 * C293;
    const double C14077 = C10746 * C1258;
    const double C14748 = C10746 * C1605;
    const double C14743 = C10746 * C924;
    const double C15092 = C10746 * C1145;
    const double C15300 = C10746 * C1259;
    const double C15960 = C10746 * C1606;
    const double C31652 = C10746 * C2490;
    const double C31812 = C10746 * C2696;
    const double C32313 = C10746 * C3234;
    const double C33331 = C33302 * C123;
    const double C33327 = C33302 * C122;
    const double C33315 = C33302 * C121;
    const double C33307 = C33302 * C120;
    const double C33537 = C33302 * C296;
    const double C33529 = C33302 * C295;
    const double C33525 = C33302 * C292;
    const double C33517 = C33302 * C291;
    const double C33739 = C33302 * C485;
    const double C33731 = C33302 * C484;
    const double C33727 = C33302 * C481;
    const double C33719 = C33302 * C480;
    const double C33918 = C33302 * C290;
    const double C34080 = C33302 * C479;
    const double C34297 = C33302 * C926;
    const double C34289 = C33302 * C925;
    const double C36337 = C33302 * C1144;
    const double C36333 = C33302 * C1145;
    const double C36321 = C33302 * C294;
    const double C36313 = C33302 * C293;
    const double C37019 = C33302 * C1605;
    const double C37015 = C33302 * C924;
    const double C37007 = C33302 * C1606;
    const double C37290 = C33302 * C2490;
    const double C37458 = C33302 * C2696;
    const double C37450 = C33302 * C1259;
    const double C37965 = C33302 * C3234;
    const double C41156 = C33302 * C1258;
    const double C5240 = C5222 - C5223;
    const double C5239 = C5218 - C5219;
    const double C5234 = C5198 - C5199;
    const double C5434 = C5419 - C5420;
    const double C5433 = C5415 - C5416;
    const double C5634 = C5619 - C5620;
    const double C5633 = C5615 - C5616;
    const double C5807 = C5795 - C5796;
    const double C5974 = C5962 - C5963;
    const double C6193 = C6181 - C6182;
    const double C21885 = C21876 - C21877;
    const double C21880 = C21856 - C21857;
    const double C22544 = C22538 - C22539;
    const double C22807 = C22795 - C22796;
    const double C22978 = C22966 - C22967;
    const double C23485 = C23473 - C23474;
    const double C5242 = C5230 - C5231;
    const double C5237 = C5210 - C5211;
    const double C5236 = C5206 - C5207;
    const double C5436 = C5427 - C5428;
    const double C5431 = C5407 - C5408;
    const double C5631 = C5607 - C5608;
    const double C5809 = C5803 - C5804;
    const double C5976 = C5970 - C5971;
    const double C6195 = C6189 - C6190;
    const double C21883 = C21868 - C21869;
    const double C21882 = C21864 - C21865;
    const double C22542 = C22530 - C22531;
    const double C22809 = C22803 - C22804;
    const double C23487 = C23481 - C23482;
    const double C10789 = C10778 - C10779;
    const double C10786 = C10766 - C10767;
    const double C10785 = C10762 - C10763;
    const double C10783 = C10754 - C10755;
    const double C10995 = C10984 - C10985;
    const double C10993 = C10976 - C10977;
    const double C10990 = C10964 - C10965;
    const double C10988 = C10956 - C10957;
    const double C11197 = C11186 - C11187;
    const double C11195 = C11178 - C11179;
    const double C11192 = C11166 - C11167;
    const double C11190 = C11158 - C11159;
    const double C11371 = C11365 - C11366;
    const double C11533 = C11527 - C11528;
    const double C11751 = C11744 - C11745;
    const double C11749 = C11736 - C11737;
    const double C13869 = C13860 - C13861;
    const double C13866 = C13847 - C13848;
    const double C13865 = C13840 - C13841;
    const double C14085 = C14080 - C14081;
    const double C14758 = C14751 - C14752;
    const double C14755 = C14738 - C14739;
    const double C15100 = C15095 - C15096;
    const double C15308 = C15303 - C15304;
    const double C15968 = C15963 - C15964;
    const double C31660 = C31655 - C31656;
    const double C31820 = C31815 - C31816;
    const double C32321 = C32316 - C32317;
    const double C33345 = C33334 - C33335;
    const double C33342 = C33322 - C33323;
    const double C33341 = C33318 - C33319;
    const double C33339 = C33310 - C33311;
    const double C33551 = C33540 - C33541;
    const double C33549 = C33532 - C33533;
    const double C33546 = C33520 - C33521;
    const double C33544 = C33512 - C33513;
    const double C33753 = C33742 - C33743;
    const double C33751 = C33734 - C33735;
    const double C33748 = C33722 - C33723;
    const double C33746 = C33714 - C33715;
    const double C33927 = C33921 - C33922;
    const double C34089 = C34083 - C34084;
    const double C34307 = C34300 - C34301;
    const double C34305 = C34292 - C34293;
    const double C36352 = C36340 - C36341;
    const double C36349 = C36328 - C36329;
    const double C36348 = C36324 - C36325;
    const double C36346 = C36316 - C36317;
    const double C37031 = C37022 - C37023;
    const double C37028 = C37010 - C37011;
    const double C37026 = C37002 - C37003;
    const double C37298 = C37293 - C37294;
    const double C37468 = C37461 - C37462;
    const double C37466 = C37453 - C37454;
    const double C37973 = C37968 - C37969;
    const double C41164 = C41159 - C41160;
    const double C44297 = C44285 - C44286;
    const double C44292 = C44265 - C44266;
    const double C44291 = C44261 - C44262;
    const double C44491 = C44482 - C44483;
    const double C44486 = C44462 - C44463;
    const double C44674 = C44650 - C44651;
    const double C44852 = C44846 - C44847;
    const double C45019 = C45013 - C45014;
    const double C45234 = C45228 - C45229;
    const double C47264 = C47249 - C47250;
    const double C47263 = C47245 - C47246;
    const double C47923 = C47911 - C47912;
    const double C48190 = C48184 - C48185;
    const double C48864 = C48858 - C48859;
    const double C38923 =
        ((((0 - (C49751 * C49804) / C49753) * ae) / C49753 - (0 * be) / C49763 +
          C49760 / C49753) /
             C49805 -
         ((C49751 * C49820 + 0) * be) / C49753) /
            C49805 +
        ((C49751 * (C49820 / C49805 -
                    ((C49751 * C49816 + C51124) * be) / C49753 + C49817) +
          C51161) *
         ae) /
            C49753 +
        C49816 / C49805 - ((C49751 * C49817 + C51063) * be) / C49753;
    const double C38925 =
        (C49820 / C49805 - ((C49751 * C49816 + C51124) * be) / C49753 +
         C49817) /
            C49805 +
        ((C49751 *
              (C49816 / C49805 - ((C49751 * C49817 + C51063) * be) / C49753) +
          C51162) *
         ae) /
            C49753 +
        2 * (C49817 / C49805 - (0 * be) / C49753);
    const double C38927 =
        (C49816 / C49805 - ((C49751 * C49817 + C51063) * be) / C49753) /
            C49805 +
        ((C49751 * (C49817 / C49805 - (0 * be) / C49753) + C44245) * ae) /
            C49753;
    const double C44246 =
        C49820 / C49805 - ((C49751 * C49816 + C51124) * be) / C49753 + C49817;
    const double C44248 =
        C49816 / C49805 - ((C49751 * C49817 + C51063) * be) / C49753;
    const double C182 = C177 + C167;
    const double C8397 = C8396 * C51035;
    const double C17557 = C8396 * C51035;
    const double C2550 = C2546 * C2332;
    const double C24637 = C2546 * C24473;
    const double C2735 = C2732 * C2332;
    const double C24789 = C2732 * C24473;
    const double C3270 = C3269 * C2332;
    const double C25284 = C3269 * C24473;
    const double C5636 = C5627 - C5628;
    const double C44679 = C44670 - C44671;
    const double C20573 = C20572 + C20570;
    const double C20682 = C20681 + C20679;
    const double C21019 = C21018 + C21016;
    const double C22980 = C22974 - C22975;
    const double C48357 = C48351 - C48352;
    const double C7480 =
        (4 * (2 * C50074 + C49863 * C50208 + C50199 * ae) +
         C49863 * (3 * C50208 + C49863 * C50404 + C50394 * ae) +
         (3 * C50199 + C49863 * C50394) * ae) /
        C49753;
    const double C7482 =
        (4 * (2 * C50202 + ae * C50207 + be * C50208 + C49863 * C50396) +
         ae * (3 * C50207 + C49863 * C50403 + C50394 * be) +
         be * (3 * C50208 + C49863 * C50404 + C50394 * ae) +
         C49863 * (3 * C50396 + ae * C50403 + be * C50404 +
                   C49863 * (2 * C50386 + ae * C50397 + be * C50398 +
                             C49863 * (C49893 + ae * C50380 + be * C50383 +
                                       C49863 * (ae * C49961 + be * C49965 +
                                                 C49863 * C49905))))) /
        C49761;
    const double C7479 =
        (4 * (2 * C50073 + C49863 * C50207 + C50199 * be) +
         C49863 * (3 * C50207 + C49863 * C50403 + C50394 * be) +
         (3 * C50199 + C49863 * C50394) * be) /
        C49753;
    const double C50565 = C50543 + C50561;
    const double C8082 = C8077 + C8078;
    const double C17249 = C17244 + C17245;
    const double C8544 = C8229 + C8230;
    const double C17704 = C17396 + C17397;
    const double C8693 = C8383 + C8384;
    const double C17853 = C17550 + C17551;
    const double C372 = C366 + C354;
    const double C681 = C680 + C678;
    const double C561 = C555 + C543;
    const double C793 = C792 + C790;
    const double C965 = C962 + C956;
    const double C50362 = C50360 + C50349;
    const double C50513 = C50511 + C50501;
    const double C50571 = C49863 * C50569;
    const double C50361 = C50359 + C50346;
    const double C50512 = C50510 + C50498;
    const double C50570 = C49863 * C50568;
    const double C49830 = C49829 * ae;
    const double C5241 = C5226 - C5227;
    const double C5238 = C5214 - C5215;
    const double C5235 = C5202 - C5203;
    const double C5435 = C5423 - C5424;
    const double C5432 = C5411 - C5412;
    const double C5635 = C5623 - C5624;
    const double C5632 = C5611 - C5612;
    const double C5808 = C5799 - C5800;
    const double C5975 = C5966 - C5967;
    const double C6194 = C6185 - C6186;
    const double C21884 = C21872 - C21873;
    const double C21881 = C21860 - C21861;
    const double C22543 = C22534 - C22535;
    const double C22808 = C22799 - C22800;
    const double C22979 = C22970 - C22971;
    const double C23486 = C23477 - C23478;
    const double C10788 = C10774 - C10775;
    const double C10787 = C10770 - C10771;
    const double C10784 = C10758 - C10759;
    const double C10782 = C10750 - C10751;
    const double C10994 = C10980 - C10981;
    const double C10992 = C10972 - C10973;
    const double C10991 = C10968 - C10969;
    const double C10989 = C10960 - C10961;
    const double C11196 = C11182 - C11183;
    const double C11194 = C11174 - C11175;
    const double C11193 = C11170 - C11171;
    const double C11191 = C11162 - C11163;
    const double C11370 = C11361 - C11362;
    const double C11532 = C11523 - C11524;
    const double C11750 = C11740 - C11741;
    const double C11748 = C11732 - C11733;
    const double C13868 = C13856 - C13857;
    const double C13867 = C13851 - C13852;
    const double C13864 = C13836 - C13837;
    const double C14084 = C14076 - C14077;
    const double C14757 = C14747 - C14748;
    const double C14756 = C14742 - C14743;
    const double C15099 = C15091 - C15092;
    const double C15307 = C15299 - C15300;
    const double C15967 = C15959 - C15960;
    const double C31659 = C31651 - C31652;
    const double C31819 = C31811 - C31812;
    const double C32320 = C32312 - C32313;
    const double C33344 = C33330 - C33331;
    const double C33343 = C33326 - C33327;
    const double C33340 = C33314 - C33315;
    const double C33338 = C33306 - C33307;
    const double C33550 = C33536 - C33537;
    const double C33548 = C33528 - C33529;
    const double C33547 = C33524 - C33525;
    const double C33545 = C33516 - C33517;
    const double C33752 = C33738 - C33739;
    const double C33750 = C33730 - C33731;
    const double C33749 = C33726 - C33727;
    const double C33747 = C33718 - C33719;
    const double C33926 = C33917 - C33918;
    const double C34088 = C34079 - C34080;
    const double C34306 = C34296 - C34297;
    const double C34304 = C34288 - C34289;
    const double C36351 = C36336 - C36337;
    const double C36350 = C36332 - C36333;
    const double C36347 = C36320 - C36321;
    const double C36345 = C36312 - C36313;
    const double C37030 = C37018 - C37019;
    const double C37029 = C37014 - C37015;
    const double C37027 = C37006 - C37007;
    const double C37297 = C37289 - C37290;
    const double C37467 = C37457 - C37458;
    const double C37465 = C37449 - C37450;
    const double C37972 = C37964 - C37965;
    const double C41163 = C41155 - C41156;
    const double C5249 = C5240 - C5224;
    const double C5248 = C5239 - C5220;
    const double C5243 = C5234 - C5200;
    const double C5440 = C5434 - C5421;
    const double C5439 = C5433 - C5417;
    const double C5640 = C5634 - C5621;
    const double C5639 = C5633 - C5617;
    const double C5810 = C5807 - C5797;
    const double C5977 = C5974 - C5964;
    const double C6196 = C6193 - C6183;
    const double C21891 = C21885 - C21878;
    const double C21886 = C21880 - C21858;
    const double C22547 = C22544 - C22540;
    const double C22810 = C22807 - C22797;
    const double C22981 = C22978 - C22968;
    const double C23488 = C23485 - C23475;
    const double C5251 = C5242 - C5232;
    const double C5246 = C5237 - C5212;
    const double C5245 = C5236 - C5208;
    const double C5442 = C5436 - C5429;
    const double C5437 = C5431 - C5409;
    const double C5637 = C5631 - C5609;
    const double C5812 = C5809 - C5805;
    const double C5979 = C5976 - C5972;
    const double C6198 = C6195 - C6191;
    const double C21889 = C21883 - C21870;
    const double C21888 = C21882 - C21866;
    const double C22545 = C22542 - C22532;
    const double C22812 = C22809 - C22805;
    const double C23490 = C23487 - C23483;
    const double C10797 = C10789 - C10780;
    const double C10794 = C10786 - C10768;
    const double C10793 = C10785 - C10764;
    const double C10791 = C10783 - C10756;
    const double C11003 = C10995 - C10986;
    const double C11001 = C10993 - C10978;
    const double C10998 = C10990 - C10966;
    const double C10996 = C10988 - C10958;
    const double C11205 = C11197 - C11188;
    const double C11203 = C11195 - C11180;
    const double C11200 = C11192 - C11168;
    const double C11198 = C11190 - C11160;
    const double C11373 = C11371 - C11367;
    const double C11535 = C11533 - C11529;
    const double C11755 = C11751 - C11746;
    const double C11753 = C11749 - C11738;
    const double C13875 = C13869 - C13862;
    const double C13872 = C13866 - C13849;
    const double C13871 = C13865 - C13842;
    const double C14087 = C14085 - C14082;
    const double C14762 = C14758 - C14753;
    const double C14759 = C14755 - C14740;
    const double C15102 = C15100 - C15097;
    const double C15310 = C15308 - C15305;
    const double C15970 = C15968 - C15965;
    const double C31662 = C31660 - C31657;
    const double C31822 = C31820 - C31817;
    const double C32323 = C32321 - C32318;
    const double C33353 = C33345 - C33336;
    const double C33350 = C33342 - C33324;
    const double C33349 = C33341 - C33320;
    const double C33347 = C33339 - C33312;
    const double C33559 = C33551 - C33542;
    const double C33557 = C33549 - C33534;
    const double C33554 = C33546 - C33522;
    const double C33552 = C33544 - C33514;
    const double C33761 = C33753 - C33744;
    const double C33759 = C33751 - C33736;
    const double C33756 = C33748 - C33724;
    const double C33754 = C33746 - C33716;
    const double C33929 = C33927 - C33923;
    const double C34091 = C34089 - C34085;
    const double C34311 = C34307 - C34302;
    const double C34309 = C34305 - C34294;
    const double C36360 = C36352 - C36342;
    const double C36357 = C36349 - C36330;
    const double C36356 = C36348 - C36326;
    const double C36354 = C36346 - C36318;
    const double C37037 = C37031 - C37024;
    const double C37034 = C37028 - C37012;
    const double C37032 = C37026 - C37004;
    const double C37300 = C37298 - C37295;
    const double C37472 = C37468 - C37463;
    const double C37470 = C37466 - C37455;
    const double C37975 = C37973 - C37970;
    const double C41166 = C41164 - C41161;
    const double C44306 = C44297 - C44287;
    const double C44301 = C44292 - C44267;
    const double C44300 = C44291 - C44263;
    const double C44497 = C44491 - C44484;
    const double C44492 = C44486 - C44464;
    const double C44680 = C44674 - C44652;
    const double C44855 = C44852 - C44848;
    const double C45022 = C45019 - C45015;
    const double C45237 = C45234 - C45230;
    const double C47270 = C47264 - C47251;
    const double C47269 = C47263 - C47247;
    const double C47926 = C47923 - C47913;
    const double C48193 = C48190 - C48186;
    const double C48867 = C48864 - C48860;
    const double C44279 = C44246 * C133;
    const double C44277 = C44246 * C132;
    const double C44275 = C44246 * C131;
    const double C44273 = C44246 * C130;
    const double C44255 = C44246 * C129;
    const double C44253 = C44246 * C128;
    const double C44476 = C44246 * C311;
    const double C44474 = C44246 * C310;
    const double C44472 = C44246 * C305;
    const double C44470 = C44246 * C304;
    const double C44664 = C44246 * C500;
    const double C44662 = C44246 * C499;
    const double C44660 = C44246 * C494;
    const double C44658 = C44246 * C493;
    const double C44840 = C44246 * C303;
    const double C44838 = C44246 * C302;
    const double C45007 = C44246 * C492;
    const double C45005 = C44246 * C491;
    const double C45222 = C44246 * C932;
    const double C45220 = C44246 * C931;
    const double C47259 = C44246 * C309;
    const double C47257 = C44246 * C308;
    const double C47239 = C44246 * C307;
    const double C47237 = C44246 * C306;
    const double C47921 = C44246 * C930;
    const double C47919 = C44246 * C929;
    const double C48178 = C44246 * C1153;
    const double C48176 = C44246 * C1152;
    const double C48345 = C44246 * C1267;
    const double C48343 = C44246 * C1266;
    const double C48852 = C44246 * C1614;
    const double C48850 = C44246 * C1613;
    const double C44283 = C44248 * C490;
    const double C44281 = C44248 * C489;
    const double C44271 = C44248 * C492;
    const double C44269 = C44248 * C491;
    const double C44259 = C44248 * C494;
    const double C44257 = C44248 * C493;
    const double C44480 = C44248 * C1612;
    const double C44478 = C44248 * C1611;
    const double C44468 = C44248 * C932;
    const double C44466 = C44248 * C931;
    const double C44668 = C44248 * C1896;
    const double C44666 = C44248 * C1895;
    const double C44656 = C44248 * C500;
    const double C44654 = C44248 * C499;
    const double C44844 = C44248 * C934;
    const double C44842 = C44248 * C933;
    const double C45011 = C44248 * C502;
    const double C45009 = C44248 * C501;
    const double C45226 = C44248 * C1265;
    const double C45224 = C44248 * C1264;
    const double C47255 = C44248 * C1614;
    const double C47253 = C44248 * C1613;
    const double C47243 = C44248 * C930;
    const double C47241 = C44248 * C929;
    const double C47917 = C44248 * C1267;
    const double C47915 = C44248 * C1266;
    const double C48182 = C44248 * C3238;
    const double C48180 = C44248 * C3237;
    const double C48349 = C44248 * C4599;
    const double C48347 = C44248 * C4598;
    const double C48856 = C44248 * C2700;
    const double C48854 = C44248 * C2699;
    const double C187 = C182 * C50984;
    const double C5642 = C5636 - C5629;
    const double C44685 = C44679 - C44672;
    const double C22983 = C22980 - C22976;
    const double C48360 = C48357 - C48353;
    const double C378 = C372 * C50984;
    const double C2344 = C372 * C2332;
    const double C8546 = C372 * C51035;
    const double C17706 = C372 * C51035;
    const double C24485 = C372 * C24473;
    const double C682 = C681 * C50984;
    const double C8080 = C681 * C51035;
    const double C17247 = C681 * C51035;
    const double C567 = C561 * C50984;
    const double C794 = C793 * C50984;
    const double C968 = C965 * C50984;
    const double C8695 = C965 * C51035;
    const double C17855 = C965 * C51035;
    const double C7478 =
        (4 * (2 * C50066 + C49863 * C50231 + C50222 * ae) +
         C49863 * (3 * C50231 + C49863 * C50362 + C50352 * ae) +
         (3 * C50222 + C49863 * C50352) * ae) /
        C49753;
    const double C23885 =
        (4 * (2 * C50185 + C49863 * C50320 + C50312 * ae) +
         C49863 * (3 * C50320 + C49863 * C50513 + C50504 * ae) +
         (3 * C50312 + C49863 * C50504) * ae) /
        C49753;
    const double C50573 = C50531 + C50571;
    const double C7481 =
        (4 * (2 * C50225 + ae * C50230 + be * C50231 + C49863 * C50354) +
         ae * (3 * C50230 + C49863 * C50361 + C50352 * be) +
         be * (3 * C50231 + C49863 * C50362 + C50352 * ae) +
         C49863 * (3 * C50354 + ae * C50361 + be * C50362 +
                   C49863 * (2 * C50344 + ae * C50355 + be * C50356 +
                             C49863 * (C50103 + ae * C50338 + be * C50341 +
                                       C49863 * (ae * C50111 + be * C50115 +
                                                 C49863 * C49869 *
                                                     (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                     C49752))))) /
        C49761;
    const double C7477 =
        (4 * (2 * C50065 + C49863 * C50230 + C50222 * be) +
         C49863 * (3 * C50230 + C49863 * C50361 + C50352 * be) +
         (3 * C50222 + C49863 * C50352) * be) /
        C49753;
    const double C23886 =
        (4 * (2 * C50309 + ae * C50319 + be * C50320 + C49863 * C50502) +
         ae * (3 * C50319 + C49863 * C50512 + C50504 * be) +
         be * (3 * C50320 + C49863 * C50513 + C50504 * ae) +
         C49863 * (3 * C50502 + ae * C50512 + be * C50513 +
                   C49863 * (2 * C50490 + ae * C50506 + be * C50507 +
                             C49863 * (C50473 + ae * C50491 + be * C50494 +
                                       C49863 * (ae * C50475 + be * C50479 +
                                                 C49863 * C50012 *
                                                     (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                     C49752))))) /
        C49761;
    const double C23884 =
        (4 * (2 * C50184 + C49863 * C50319 + C50312 * be) +
         C49863 * (3 * C50319 + C49863 * C50512 + C50504 * be) +
         (3 * C50312 + C49863 * C50504) * be) /
        C49753;
    const double C50572 = C50523 + C50570;
    const double C38924 =
        ((ae * -2 * C49804) / C49823 -
         (((C49751 * C49827) / C49761 + 2 * C49820) * be) / C49753) /
            C49805 +
        ((C49751 * (C49827 / C49823 -
                    (((C49751 * C49830) / C49753 + 2 * C49816) * be) / C49753 -
                    C49772 / C49763) +
          2 * (C49820 / C49805 - ((C49751 * C49816 + C51124) * be) / C49753 +
               C49817)) *
         ae) /
            C49753 +
        C49830 / C49763 - ((2 * C49817 - C49777 / C49763) * be) / C49753;
    const double C38926 =
        (C49827 / C49823 -
         (((C49751 * C49830) / C49753 + 2 * C49816) * be) / C49753 -
         C49772 / C49763) /
            C49805 +
        ((C49751 * (C49830 / C49763 -
                    ((2 * C49817 - C49777 / C49763) * be) / C49753) +
          2 * (C49816 / C49805 - ((C49751 * C49817 + C51063) * be) / C49753)) *
         ae) /
            C49753 +
        (-2 * C49772) / (C49753 * 4 * C49761);
    const double C38928 =
        (C49830 / C49763 - ((2 * C49817 - C49777 / C49763) * be) / C49753) /
            C49805 +
        ((2 * (C49817 / C49805 - (0 * be) / C49753) -
          C49777 / (C49753 * 4 * C49761)) *
         ae) /
            C49753;
    const double C44247 =
        C49827 / C49823 -
        (((C49751 * C49830) / C49753 + 2 * C49816) * be) / C49753 -
        C49772 / C49763;
    const double C44249 =
        C49830 / C49763 - ((2 * C49817 - C49777 / C49763) * be) / C49753;
    const double C5250 = C5241 - C5228;
    const double C5247 = C5238 - C5216;
    const double C5244 = C5235 - C5204;
    const double C5441 = C5435 - C5425;
    const double C5438 = C5432 - C5413;
    const double C5641 = C5635 - C5625;
    const double C5638 = C5632 - C5613;
    const double C5811 = C5808 - C5801;
    const double C5978 = C5975 - C5968;
    const double C6197 = C6194 - C6187;
    const double C21890 = C21884 - C21874;
    const double C21887 = C21881 - C21862;
    const double C22546 = C22543 - C22536;
    const double C22811 = C22808 - C22801;
    const double C22982 = C22979 - C22972;
    const double C23489 = C23486 - C23479;
    const double C10796 = C10788 - C10776;
    const double C10795 = C10787 - C10772;
    const double C10792 = C10784 - C10760;
    const double C10790 = C10782 - C10752;
    const double C11002 = C10994 - C10982;
    const double C11000 = C10992 - C10974;
    const double C10999 = C10991 - C10970;
    const double C10997 = C10989 - C10962;
    const double C11204 = C11196 - C11184;
    const double C11202 = C11194 - C11176;
    const double C11201 = C11193 - C11172;
    const double C11199 = C11191 - C11164;
    const double C11372 = C11370 - C11363;
    const double C11534 = C11532 - C11525;
    const double C11754 = C11750 - C11742;
    const double C11752 = C11748 - C11734;
    const double C13874 = C13868 - C13858;
    const double C13873 = C13867 - C13853;
    const double C13870 = C13864 - C13838;
    const double C14086 = C14084 - C14078;
    const double C14761 = C14757 - C14749;
    const double C14760 = C14756 - C14744;
    const double C15101 = C15099 - C15093;
    const double C15309 = C15307 - C15301;
    const double C15969 = C15967 - C15961;
    const double C31661 = C31659 - C31653;
    const double C31821 = C31819 - C31813;
    const double C32322 = C32320 - C32314;
    const double C33352 = C33344 - C33332;
    const double C33351 = C33343 - C33328;
    const double C33348 = C33340 - C33316;
    const double C33346 = C33338 - C33308;
    const double C33558 = C33550 - C33538;
    const double C33556 = C33548 - C33530;
    const double C33555 = C33547 - C33526;
    const double C33553 = C33545 - C33518;
    const double C33760 = C33752 - C33740;
    const double C33758 = C33750 - C33732;
    const double C33757 = C33749 - C33728;
    const double C33755 = C33747 - C33720;
    const double C33928 = C33926 - C33919;
    const double C34090 = C34088 - C34081;
    const double C34310 = C34306 - C34298;
    const double C34308 = C34304 - C34290;
    const double C36359 = C36351 - C36338;
    const double C36358 = C36350 - C36334;
    const double C36355 = C36347 - C36322;
    const double C36353 = C36345 - C36314;
    const double C37036 = C37030 - C37020;
    const double C37035 = C37029 - C37016;
    const double C37033 = C37027 - C37008;
    const double C37299 = C37297 - C37291;
    const double C37471 = C37467 - C37459;
    const double C37469 = C37465 - C37451;
    const double C37974 = C37972 - C37966;
    const double C41165 = C41163 - C41157;
    const double C5258 = C5249 + C5225;
    const double C5257 = C5248 + C5221;
    const double C5252 = C5243 + C5201;
    const double C5446 = C5440 + C5422;
    const double C5445 = C5439 + C5418;
    const double C5646 = C5640 + C5622;
    const double C5645 = C5639 + C5618;
    const double C5813 = C5810 + C5798;
    const double C5980 = C5977 + C5965;
    const double C6199 = C6196 + C6184;
    const double C21897 = C21891 + C21879;
    const double C21892 = C21886 + C21859;
    const double C22550 = C22547 + C22541;
    const double C22813 = C22810 + C22798;
    const double C22984 = C22981 + C22969;
    const double C23491 = C23488 + C23476;
    const double C5260 = C5251 + C5233;
    const double C5255 = C5246 + C5213;
    const double C5254 = C5245 + C5209;
    const double C5448 = C5442 + C5430;
    const double C5443 = C5437 + C5410;
    const double C5643 = C5637 + C5610;
    const double C5815 = C5812 + C5806;
    const double C5982 = C5979 + C5973;
    const double C6201 = C6198 + C6192;
    const double C21895 = C21889 + C21871;
    const double C21894 = C21888 + C21867;
    const double C22548 = C22545 + C22533;
    const double C22815 = C22812 + C22806;
    const double C23493 = C23490 + C23484;
    const double C10805 = C10797 + C10781;
    const double C10802 = C10794 + C10769;
    const double C10801 = C10793 + C10765;
    const double C10799 = C10791 + C10757;
    const double C11011 = C11003 + C10987;
    const double C11009 = C11001 + C10979;
    const double C11006 = C10998 + C10967;
    const double C11004 = C10996 + C10959;
    const double C11213 = C11205 + C11189;
    const double C11211 = C11203 + C11181;
    const double C11208 = C11200 + C11169;
    const double C11206 = C11198 + C11161;
    const double C11375 = C11373 + C11368;
    const double C11537 = C11535 + C11530;
    const double C11759 = C11755 + C11747;
    const double C11757 = C11753 + C11739;
    const double C13881 = C13875 + C13863;
    const double C13878 = C13872 + C13850;
    const double C13877 = C13871 + C13843;
    const double C14089 = C14087 + C14083;
    const double C14766 = C14762 + C14754;
    const double C14763 = C14759 + C14741;
    const double C15104 = C15102 + C15098;
    const double C15312 = C15310 + C15306;
    const double C15972 = C15970 + C15966;
    const double C31664 = C31662 + C31658;
    const double C31824 = C31822 + C31818;
    const double C32325 = C32323 + C32319;
    const double C33361 = C33353 + C33337;
    const double C33358 = C33350 + C33325;
    const double C33357 = C33349 + C33321;
    const double C33355 = C33347 + C33313;
    const double C33567 = C33559 + C33543;
    const double C33565 = C33557 + C33535;
    const double C33562 = C33554 + C33523;
    const double C33560 = C33552 + C33515;
    const double C33769 = C33761 + C33745;
    const double C33767 = C33759 + C33737;
    const double C33764 = C33756 + C33725;
    const double C33762 = C33754 + C33717;
    const double C33931 = C33929 + C33924;
    const double C34093 = C34091 + C34086;
    const double C34315 = C34311 + C34303;
    const double C34313 = C34309 + C34295;
    const double C36368 = C36360 + C36343;
    const double C36365 = C36357 + C36331;
    const double C36364 = C36356 + C36327;
    const double C36362 = C36354 + C36319;
    const double C37043 = C37037 + C37025;
    const double C37040 = C37034 + C37013;
    const double C37038 = C37032 + C37005;
    const double C37302 = C37300 + C37296;
    const double C37476 = C37472 + C37464;
    const double C37474 = C37470 + C37456;
    const double C37977 = C37975 + C37971;
    const double C41168 = C41166 + C41162;
    const double C44315 = C44306 + C44288;
    const double C44310 = C44301 + C44268;
    const double C44309 = C44300 + C44264;
    const double C44503 = C44497 + C44485;
    const double C44498 = C44492 + C44465;
    const double C44686 = C44680 + C44653;
    const double C44858 = C44855 + C44849;
    const double C45025 = C45022 + C45016;
    const double C45240 = C45237 + C45231;
    const double C47276 = C47270 + C47252;
    const double C47275 = C47269 + C47248;
    const double C47929 = C47926 + C47914;
    const double C48196 = C48193 + C48187;
    const double C48870 = C48867 + C48861;
    const double C5648 = C5642 + C5630;
    const double C44691 = C44685 + C44673;
    const double C22986 = C22983 + C22977;
    const double C48363 = C48360 + C48354;
    const double C50575 = C50573 + C50560;
    const double C50574 = C50572 + C50557;
    const double C44278 = C44247 * C122;
    const double C44274 = C44247 * C121;
    const double C44254 = C44247 * C120;
    const double C44475 = C44247 * C295;
    const double C44471 = C44247 * C292;
    const double C44663 = C44247 * C484;
    const double C44659 = C44247 * C481;
    const double C44839 = C44247 * C291;
    const double C45006 = C44247 * C480;
    const double C45221 = C44247 * C925;
    const double C47258 = C44247 * C294;
    const double C47238 = C44247 * C293;
    const double C47920 = C44247 * C924;
    const double C48177 = C44247 * C1145;
    const double C48344 = C44247 * C1259;
    const double C48851 = C44247 * C1606;
    const double C44282 = C44249 * C479;
    const double C44270 = C44249 * C480;
    const double C44258 = C44249 * C481;
    const double C44479 = C44249 * C1605;
    const double C44467 = C44249 * C925;
    const double C44667 = C44249 * C1889;
    const double C44655 = C44249 * C484;
    const double C44843 = C44249 * C926;
    const double C45010 = C44249 * C485;
    const double C45225 = C44249 * C1258;
    const double C47254 = C44249 * C1606;
    const double C47242 = C44249 * C924;
    const double C47916 = C44249 * C1259;
    const double C48181 = C44249 * C3234;
    const double C48348 = C44249 * C4591;
    const double C48855 = C44249 * C2696;
    const double C5259 = C5250 + C5229;
    const double C5256 = C5247 + C5217;
    const double C5253 = C5244 + C5205;
    const double C5447 = C5441 + C5426;
    const double C5444 = C5438 + C5414;
    const double C5647 = C5641 + C5626;
    const double C5644 = C5638 + C5614;
    const double C5814 = C5811 + C5802;
    const double C5981 = C5978 + C5969;
    const double C6200 = C6197 + C6188;
    const double C21896 = C21890 + C21875;
    const double C21893 = C21887 + C21863;
    const double C22549 = C22546 + C22537;
    const double C22814 = C22811 + C22802;
    const double C22985 = C22982 + C22973;
    const double C23492 = C23489 + C23480;
    const double C10804 = C10796 + C10777;
    const double C10803 = C10795 + C10773;
    const double C10800 = C10792 + C10761;
    const double C10798 = C10790 + C10753;
    const double C11010 = C11002 + C10983;
    const double C11008 = C11000 + C10975;
    const double C11007 = C10999 + C10971;
    const double C11005 = C10997 + C10963;
    const double C11212 = C11204 + C11185;
    const double C11210 = C11202 + C11177;
    const double C11209 = C11201 + C11173;
    const double C11207 = C11199 + C11165;
    const double C11374 = C11372 + C11364;
    const double C11536 = C11534 + C11526;
    const double C11758 = C11754 + C11743;
    const double C11756 = C11752 + C11735;
    const double C13880 = C13874 + C13859;
    const double C13879 = C13873 + C13854;
    const double C13876 = C13870 + C13839;
    const double C14088 = C14086 + C14079;
    const double C14765 = C14761 + C14750;
    const double C14764 = C14760 + C14745;
    const double C15103 = C15101 + C15094;
    const double C15311 = C15309 + C15302;
    const double C15971 = C15969 + C15962;
    const double C31663 = C31661 + C31654;
    const double C31823 = C31821 + C31814;
    const double C32324 = C32322 + C32315;
    const double C33360 = C33352 + C33333;
    const double C33359 = C33351 + C33329;
    const double C33356 = C33348 + C33317;
    const double C33354 = C33346 + C33309;
    const double C33566 = C33558 + C33539;
    const double C33564 = C33556 + C33531;
    const double C33563 = C33555 + C33527;
    const double C33561 = C33553 + C33519;
    const double C33768 = C33760 + C33741;
    const double C33766 = C33758 + C33733;
    const double C33765 = C33757 + C33729;
    const double C33763 = C33755 + C33721;
    const double C33930 = C33928 + C33920;
    const double C34092 = C34090 + C34082;
    const double C34314 = C34310 + C34299;
    const double C34312 = C34308 + C34291;
    const double C36367 = C36359 + C36339;
    const double C36366 = C36358 + C36335;
    const double C36363 = C36355 + C36323;
    const double C36361 = C36353 + C36315;
    const double C37042 = C37036 + C37021;
    const double C37041 = C37035 + C37017;
    const double C37039 = C37033 + C37009;
    const double C37301 = C37299 + C37292;
    const double C37475 = C37471 + C37460;
    const double C37473 = C37469 + C37452;
    const double C37976 = C37974 + C37967;
    const double C41167 = C41165 + C41158;
    const double C40305 =
        (5 * (3 * C50208 + C49863 * C50404 + C50394 * ae) +
         C49863 * (4 * C50404 + C49863 * C50575 + C50563 * ae) +
         (4 * C50394 + C49863 * C50563) * ae) /
        C49753;
    const double C40306 =
        (5 * (3 * C50396 + ae * C50403 + be * C50404 + C49863 * C50565) +
         ae * (4 * C50403 + C49863 * C50574 + C50563 * be) +
         be * (4 * C50404 + C49863 * C50575 + C50563 * ae) +
         C49863 *
             (4 * C50565 + ae * C50574 + be * C50575 +
              C49863 *
                  (3 * C50555 + ae * C50568 + be * C50569 +
                   C49863 * (2 * C50545 + ae * C50556 + be * C50559 +
                             C49863 * (C49905 + ae * C50538 + be * C50541 +
                                       C49863 * (ae * C49988 + be * C49992 +
                                                 C49863 *
                                                     (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                     C49752)))))) /
        C49761;
    const double C40304 =
        (5 * (3 * C50207 + C49863 * C50403 + C50394 * be) +
         C49863 * (4 * C50403 + C49863 * C50574 + C50563 * be) +
         (4 * C50394 + C49863 * C50563) * be) /
        C49753;
    const double C44295 = C44277 - C44278;
    const double C44294 = C44273 - C44274;
    const double C44289 = C44253 - C44254;
    const double C44489 = C44474 - C44475;
    const double C44488 = C44470 - C44471;
    const double C44677 = C44662 - C44663;
    const double C44676 = C44658 - C44659;
    const double C44850 = C44838 - C44839;
    const double C45017 = C45005 - C45006;
    const double C45232 = C45220 - C45221;
    const double C47266 = C47257 - C47258;
    const double C47261 = C47237 - C47238;
    const double C47925 = C47919 - C47920;
    const double C48188 = C48176 - C48177;
    const double C48355 = C48343 - C48344;
    const double C48862 = C48850 - C48851;
    const double C44296 = C44281 - C44282;
    const double C44293 = C44269 - C44270;
    const double C44290 = C44257 - C44258;
    const double C44490 = C44478 - C44479;
    const double C44487 = C44466 - C44467;
    const double C44678 = C44666 - C44667;
    const double C44675 = C44654 - C44655;
    const double C44851 = C44842 - C44843;
    const double C45018 = C45009 - C45010;
    const double C45233 = C45224 - C45225;
    const double C47265 = C47253 - C47254;
    const double C47262 = C47241 - C47242;
    const double C47924 = C47915 - C47916;
    const double C48189 = C48180 - C48181;
    const double C48356 = C48347 - C48348;
    const double C48863 = C48854 - C48855;
    const double C10807 = C10802 + C10803;
    const double C10806 = C10800 + C10801;
    const double C13855 = C11008 + C11009;
    const double C13845 = C11009 + C11008;
    const double C13846 = C11006 + C11007;
    const double C13844 = C11007 + C11006;
    const double C11360 = C11004 + C11005;
    const double C14284 = C11005 + C11004;
    const double C11522 = C11206 + C11207;
    const double C14746 = C11756 + C11757;
    const double C14737 = C11757 + C11756;
    const double C30773 = C13879 + C13878;
    const double C31650 = C15104 + C15103;
    const double C32311 = C15972 + C15971;
    const double C33363 = C33358 + C33359;
    const double C33362 = C33356 + C33357;
    const double C36344 = C33565 + C33564;
    const double C40960 = C33564 + C33565;
    const double C40959 = C33562 + C33563;
    const double C40958 = C33563 + C33562;
    const double C33916 = C33560 + C33561;
    const double C41363 = C33561 + C33560;
    const double C34078 = C33762 + C33763;
    const double C41817 = C34312 + C34313;
    const double C41816 = C34313 + C34312;
    const double C37288 = C36365 + C36366;
    const double C36369 = C36363 + C36364;
    const double C37963 = C37038 + C37039;
    const double C44304 = C44295 - C44279;
    const double C44303 = C44294 - C44275;
    const double C44298 = C44289 - C44255;
    const double C44495 = C44489 - C44476;
    const double C44494 = C44488 - C44472;
    const double C44683 = C44677 - C44664;
    const double C44682 = C44676 - C44660;
    const double C44853 = C44850 - C44840;
    const double C45020 = C45017 - C45007;
    const double C45235 = C45232 - C45222;
    const double C47272 = C47266 - C47259;
    const double C47267 = C47261 - C47239;
    const double C47928 = C47925 - C47921;
    const double C48191 = C48188 - C48178;
    const double C48358 = C48355 - C48345;
    const double C48865 = C48862 - C48852;
    const double C44305 = C44296 - C44283;
    const double C44302 = C44293 - C44271;
    const double C44299 = C44290 - C44259;
    const double C44496 = C44490 - C44480;
    const double C44493 = C44487 - C44468;
    const double C44684 = C44678 - C44668;
    const double C44681 = C44675 - C44656;
    const double C44854 = C44851 - C44844;
    const double C45021 = C45018 - C45011;
    const double C45236 = C45233 - C45226;
    const double C47271 = C47265 - C47255;
    const double C47268 = C47262 - C47243;
    const double C47927 = C47924 - C47917;
    const double C48192 = C48189 - C48182;
    const double C48359 = C48356 - C48349;
    const double C48866 = C48863 - C48856;
    const double C10809 = C10807 * C50984;
    const double C10808 = C10806 * C50984;
    const double C11369 = C11360 * C50984;
    const double C11531 = C11522 * C50984;
    const double C33365 = C33363 * C50984;
    const double C33364 = C33362 * C50984;
    const double C33925 = C33916 * C50984;
    const double C34087 = C34078 * C50984;
    const double C44313 = C44304 + C44280;
    const double C44312 = C44303 + C44276;
    const double C44307 = C44298 + C44256;
    const double C44501 = C44495 + C44477;
    const double C44500 = C44494 + C44473;
    const double C44689 = C44683 + C44665;
    const double C44688 = C44682 + C44661;
    const double C44856 = C44853 + C44841;
    const double C45023 = C45020 + C45008;
    const double C45238 = C45235 + C45223;
    const double C47278 = C47272 + C47260;
    const double C47273 = C47267 + C47240;
    const double C47931 = C47928 + C47922;
    const double C48194 = C48191 + C48179;
    const double C48361 = C48358 + C48346;
    const double C48868 = C48865 + C48853;
    const double C44314 = C44305 + C44284;
    const double C44311 = C44302 + C44272;
    const double C44308 = C44299 + C44260;
    const double C44502 = C44496 + C44481;
    const double C44499 = C44493 + C44469;
    const double C44690 = C44684 + C44669;
    const double C44687 = C44681 + C44657;
    const double C44857 = C44854 + C44845;
    const double C45024 = C45021 + C45012;
    const double C45239 = C45236 + C45227;
    const double C47277 = C47271 + C47256;
    const double C47274 = C47268 + C47244;
    const double C47930 = C47927 + C47918;
    const double C48195 = C48192 + C48183;
    const double C48362 = C48359 + C48350;
    const double C48869 = C48866 + C48857;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                        C51123 +
                    C2542 * C51035) *
                       C51151 +
                   (C8073 + C8074) * C51152 + C8081 * C8071) *
                      C50902 * C51110 -
                  (C8544 * C8071 + (C8231 + C8232) * C51152 +
                   (C2543 * C51035 + C2542 * C51123) * C51151) *
                      C50902 * C50938) *
                     C51153 +
                 (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
                   (C8545 + C8546) * C8071) *
                      C50902 * C50938 -
                  (C8082 * C8071 + (C8076 + C8075) * C51152 +
                   (C8074 + C8073) * C51151) *
                      C50902 * C51110) *
                     C51154 +
                 ((C8081 * C51151 + (C8078 + C8077) * C51152 +
                   (C8079 + C8080) * C8071) *
                      C50902 * C51110 -
                  (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                        C51035 +
                    C681 * C51123) *
                       C8071 +
                   (C8546 + C8545) * C51152 + C8544 * C51151) *
                      C50902 * C50938) *
                     C669)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C51123 +
              C2542 * C51035) *
                 C51151 +
             (C8073 + C8074) * C51152 + C8081 * C8071) *
                C51111 -
            (C8693 * C8071 + (C8385 + C8386) * C51152 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C51123) *
                 C51151) *
                C50966) *
               C51110 +
           (((C3268 * C51123 + C3267 * C51035) * C51151 +
             (C8890 + C8891) * C51152 + (C8892 + C8893) * C8071) *
                C50966 -
            (C8544 * C8071 + (C8231 + C8232) * C51152 +
             (C2543 * C51035 + C2542 * C51123) * C51151) *
                C51111) *
               C50938) *
              C288 +
          ((((C8386 + C8385) * C51151 + (C8384 + C8383) * C51152 +
             (C8694 + C8695) * C8071) *
                C50966 -
            (C8082 * C8071 + (C8076 + C8075) * C51152 +
             (C8074 + C8073) * C51151) *
                C51111) *
               C51110 +
           (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
             (C8545 + C8546) * C8071) *
                C51111 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C51123) *
                 C8071 +
             (C8893 + C8892) * C51152 + (C8891 + C8890) * C51151) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C50902 * C285 -
           ((C8229 + C8230) * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C50902 * C286 +
           ((C2543 * C51123 + C2545 * C51035) * C51151 +
            (C8233 + C8234) * C51152 + (C8235 + C8236) * C8071) *
               C50902 * C287) *
              C288 +
          (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
            (C367 * C51123 + C372 * C51035) * C8071) *
               C50902 * C286 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C50902 * C285 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C51035 +
             C372 * C51123) *
                C8071 +
            (C8236 + C8235) * C51152 + (C8234 + C8233) * C51151) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51123 +
            C2542 * C51035) *
               C51151 +
           (C8073 + C8074) * C51152 + C8081 * C8071) *
              C50902 * C50886 * C113 -
          (C8082 * C8071 + (C8076 + C8075) * C51152 +
           (C8074 + C8073) * C51151) *
              C50902 * C50886 * C114 +
          (C8081 * C51151 + (C8078 + C8077) * C51152 +
           (C8079 + C8080) * C8071) *
              C50902 * C50886 * C115 -
          (((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C51035 +
            C182 * C51123) *
               C8071 +
           (C8080 + C8079) * C51152 + C8082 * C51151) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C476 -
           ((C8383 + C8384) * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C51123 +
             C3696 * C51035) *
                C51151 +
            (C8387 + C8388) * C51152 + (C8389 + C8397) * C8071) *
               C478) *
              C50886 * C288 +
          (((C8386 + C8385) * C51151 + (C8384 + C8383) * C51152 +
            (C556 * C51123 + C965 * C51035) * C8071) *
               C477 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C476 -
           (((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                 C51035 +
             C561 * C51123) *
                C8071 +
            (C8397 + C8389) * C51152 + (C8388 + C8387) * C51151) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                        C51123 +
                    C2542 * C51035) *
                       C51151 +
                   (C8073 + C8074) * C51152 + C8081 * C8071) *
                      C51111 -
                  (C8693 * C8071 + (C8385 + C8386) * C51152 +
                   (C3268 * C51035 +
                    (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                        C51123) *
                       C51151) *
                      C50966) *
                     C50886 * C51153 +
                 (((C8386 + C8385) * C51151 + (C8384 + C8383) * C51152 +
                   (C8694 + C8695) * C8071) *
                      C50966 -
                  (C8082 * C8071 + (C8076 + C8075) * C51152 +
                   (C8074 + C8073) * C51151) *
                      C51111) *
                     C50886 * C51154 +
                 ((C8081 * C51151 + (C8078 + C8077) * C51152 +
                   (C8079 + C8080) * C8071) *
                      C51111 -
                  (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                        C51035 +
                    C793 * C51123) *
                       C8071 +
                   (C8695 + C8694) * C51152 + C8693 * C51151) *
                      C50966) *
                     C50886 * C669)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51123 +
            C2542 * C51035) *
               C51151 +
           (C8073 + C8074) * C51152 + C8081 * C8071) *
              C50902 * C50886 * C113 -
          (C8082 * C8071 + (C8076 + C8075) * C51152 +
           (C8074 + C8073) * C51151) *
              C50902 * C50886 * C114 +
          (C8081 * C51151 + (C8078 + C8077) * C51152 +
           (C8079 + C8080) * C8071) *
              C50902 * C50886 * C115 -
          (((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C51035 +
            C182 * C51123) *
               C8071 +
           (C8080 + C8079) * C51152 + C8082 * C51151) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C50902 * C285 -
           ((C8229 + C8230) * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C50902 * C286 +
           ((C2543 * C51123 + C2545 * C51035) * C51151 +
            (C8233 + C8234) * C51152 + (C8235 + C8236) * C8071) *
               C50902 * C287) *
              C288 +
          (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
            (C367 * C51123 + C372 * C51035) * C8071) *
               C50902 * C286 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C50902 * C285 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C51035 +
             C372 * C51123) *
                C8071 +
            (C8236 + C8235) * C51152 + (C8234 + C8233) * C51151) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C50902 * C51155 -
           (C8544 * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C50902 * C51156 +
           ((C2543 * C51123 + C2545 * C51035) * C51151 +
            (C8233 + C8234) * C51152 + (C8235 + C8236) * C8071) *
               C50902 * C1372) *
              C51102 +
          (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
            (C8545 + C8546) * C8071) *
               C50902 * C51156 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C50902 * C51155 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C51035 +
             C372 * C51123) *
                C8071 +
            (C8236 + C8235) * C51152 + (C8234 + C8233) * C51151) *
               C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C51111 -
           (C8693 * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C50966) *
              C51155 +
          (((C3268 * C51123 + C3267 * C51035) * C51151 +
            (C8890 + C8891) * C51152 + (C8892 + C8893) * C8071) *
               C50966 -
           (C8544 * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C51111) *
              C51156 +
          (((C2543 * C51123 + C2545 * C51035) * C51151 +
            (C8233 + C8234) * C51152 + (C8235 + C8236) * C8071) *
               C51111 -
           (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                 C51035 +
             C3039 * C51123) *
                C8071 +
            (C3269 * C51035 + C2730 * C51123) * C51152 +
            (C4198 * C51035 + C3267 * C51123) * C51151) *
               C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51123 +
            C2542 * C51035) *
               C51151 +
           (C8073 + C8074) * C51152 + C8081 * C8071) *
              C50902 * C1137 -
          (C8544 * C8071 + (C8231 + C8232) * C51152 +
           (C2543 * C51035 + C2542 * C51123) * C51151) *
              C50902 * C1138 +
          ((C2543 * C51123 + C2545 * C51035) * C51151 +
           (C8233 + C8234) * C51152 + (C8235 + C8236) * C8071) *
              C50902 * C1139 -
          (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C51035 +
            C2547 * C51123) *
               C8071 +
           (C2546 * C51035 + C2544 * C51123) * C51152 +
           (C3529 * C51035 + C2545 * C51123) * C51151) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C50902 * C1066 -
           (C8544 * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C50902 * C50938) *
              C1068 +
          (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
            (C8545 + C8546) * C8071) *
               C50902 * C50938 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C50902 * C1066) *
              C1069 +
          ((C8081 * C51151 + (C8078 + C8077) * C51152 +
            (C8079 + C8080) * C8071) *
               C50902 * C1066 -
           (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                 C51035 +
             C681 * C51123) *
                C8071 +
            (C8546 + C8545) * C51152 + C8544 * C51151) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C476 -
           (C8693 * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C51123 +
             C3696 * C51035) *
                C51151 +
            (C8387 + C8388) * C51152 + (C8389 + C8397) * C8071) *
               C478) *
              C1066 +
          (((C3268 * C51123 + C3267 * C51035) * C51151 +
            (C8890 + C8891) * C51152 + (C8892 + C8893) * C8071) *
               C477 -
           (C8544 * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C476 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C51035 +
             C8396 * C51123) *
                C8071 +
            (C2732 * C51035 + C2731 * C51123) * C51152 +
            (C3697 * C51035 + C3696 * C51123) * C51151) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C51123 +
              C2542 * C51035) *
                 C51151 +
             (C8073 + C8074) * C51152 + C8081 * C8071) *
                C51111 -
            (C8693 * C8071 + (C8385 + C8386) * C51152 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C51123) *
                 C51151) *
                C50966) *
               C1066 +
           (((C3268 * C51123 + C3267 * C51035) * C51151 +
             (C8890 + C8891) * C51152 + (C8892 + C8893) * C8071) *
                C50966 -
            (C8544 * C8071 + (C8231 + C8232) * C51152 +
             (C2543 * C51035 + C2542 * C51123) * C51151) *
                C51111) *
               C50938) *
              C51102 +
          ((((C8386 + C8385) * C51151 + (C8384 + C8383) * C51152 +
             (C8694 + C8695) * C8071) *
                C50966 -
            (C8082 * C8071 + (C8076 + C8075) * C51152 +
             (C8074 + C8073) * C51151) *
                C51111) *
               C1066 +
           (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
             (C8545 + C8546) * C8071) *
                C51111 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C51123) *
                 C8071 +
             (C8893 + C8892) * C51152 + (C8891 + C8890) * C51151) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C50902 * C1066 -
           (C8544 * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C50902 * C50938) *
              C1068 +
          (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
            (C8545 + C8546) * C8071) *
               C50902 * C50938 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C50902 * C1066) *
              C1069 +
          ((C8081 * C51151 + (C8078 + C8077) * C51152 +
            (C8079 + C8080) * C8071) *
               C50902 * C1066 -
           (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                 C51035 +
             C681 * C51123) *
                C8071 +
            (C8546 + C8545) * C51152 + C8544 * C51151) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51123 +
            C2542 * C51035) *
               C51151 +
           (C8073 + C8074) * C51152 + C8081 * C8071) *
              C50902 * C1137 -
          (C8544 * C8071 + (C8231 + C8232) * C51152 +
           (C2543 * C51035 + C2542 * C51123) * C51151) *
              C50902 * C1138 +
          ((C2543 * C51123 + C2545 * C51035) * C51151 +
           (C8233 + C8234) * C51152 + (C8235 + C8236) * C8071) *
              C50902 * C1139 -
          (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C51035 +
            C2547 * C51123) *
               C8071 +
           (C2546 * C51035 + C2544 * C51123) * C51152 +
           (C3529 * C51035 + C2545 * C51123) * C51151) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C51123 +
              C2542 * C51035) *
                 C51151 +
             (C8073 + C8074) * C51152 + C8081 * C8071) *
                C1717 -
            (C8693 * C8071 + (C8385 + C8386) * C51152 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C51123) *
                 C51151) *
                C50966) *
               C51110 +
           (((C3268 * C51123 + C3267 * C51035) * C51151 +
             (C8890 + C8891) * C51152 + (C8892 + C8893) * C8071) *
                C50966 -
            (C8544 * C8071 + (C8231 + C8232) * C51152 +
             (C2543 * C51035 + C2542 * C51123) * C51151) *
                C1717) *
               C50938) *
              C51102 +
          ((((C8386 + C8385) * C51151 + (C8384 + C8383) * C51152 +
             (C8694 + C8695) * C8071) *
                C50966 -
            (C8082 * C8071 + (C8076 + C8075) * C51152 +
             (C8074 + C8073) * C51151) *
                C1717) *
               C51110 +
           (((C8232 + C8231) * C51151 + (C8230 + C8229) * C51152 +
             (C8545 + C8546) * C8071) *
                C1717 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C51123) *
                 C8071 +
             (C8893 + C8892) * C51152 + (C8891 + C8890) * C51151) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C51157 -
           (C8693 * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C51123 +
             C3696 * C51035) *
                C51151 +
            (C8387 + C8388) * C51152 + (C8389 + C8397) * C8071) *
               C2133) *
              C51110 +
          (((C3268 * C51123 + C3267 * C51035) * C51151 +
            (C8890 + C8891) * C51152 + (C8892 + C8893) * C8071) *
               C51158 -
           (C8544 * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C51157 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C51035 +
             C8396 * C51123) *
                C8071 +
            (C2732 * C51035 + C2731 * C51123) * C51152 +
            (C3697 * C51035 + C3696 * C51123) * C51151) *
               C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C1717 -
           (C8693 * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C50966) *
              C285 +
          (((C3268 * C51123 + C3267 * C51035) * C51151 +
            (C8890 + C8891) * C51152 + (C8892 + C8893) * C8071) *
               C50966 -
           (C8544 * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C1717) *
              C286 +
          (((C2543 * C51123 + C2545 * C51035) * C51151 +
            (C8233 + C8234) * C51152 + (C8235 + C8236) * C8071) *
               C1717 -
           (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                 C51035 +
             C3039 * C51123) *
                C8071 +
            (C3269 * C51035 + C2730 * C51123) * C51152 +
            (C4198 * C51035 + C3267 * C51123) * C51151) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C1717 -
           (C8693 * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C50966) *
              C50886 * C1068 +
          (((C8386 + C8385) * C51151 + (C8384 + C8383) * C51152 +
            (C8694 + C8695) * C8071) *
               C50966 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C1717) *
              C50886 * C1069 +
          ((C8081 * C51151 + (C8078 + C8077) * C51152 +
            (C8079 + C8080) * C8071) *
               C1717 -
           (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C51035 +
             C793 * C51123) *
                C8071 +
            (C8695 + C8694) * C51152 + C8693 * C51151) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51123 +
            C2542 * C51035) *
               C51151 +
           (C8073 + C8074) * C51152 + C8081 * C8071) *
              C1883 -
          (C8693 * C8071 + (C8385 + C8386) * C51152 +
           (C3268 * C51035 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C51123) *
               C51151) *
              C1884 +
          (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C51123 +
            C3696 * C51035) *
               C51151 +
           (C8387 + C8388) * C51152 + (C8389 + C8397) * C8071) *
              C1885 -
          (((C117 * C6177 - C118 * C6176 - C117 * C6178 + C50999 * C6179) *
                C51035 +
            (C117 * C1893 - C118 * C1888 - C117 * C1894 + C50999 * C1900) *
                C51123) *
               C8071 +
           ((C117 * C4594 - C118 * C4589 - C117 * C4595 + C50999 * C4601) *
                C51035 +
            (C117 * C1895 - C118 * C1889 - C117 * C1896 + C50999 * C1901) *
                C51123) *
               C51152 +
           ((C117 * C4598 - C118 * C4591 - C117 * C4599 + C50999 * C4603) *
                C51035 +
            (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
                C51123) *
               C51151) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C51157 -
           (C8693 * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C51123 +
             C3696 * C51035) *
                C51151 +
            (C8387 + C8388) * C51152 + (C8389 + C8397) * C8071) *
               C2133) *
              C50886 * C51102 +
          (((C8386 + C8385) * C51151 + (C8384 + C8383) * C51152 +
            (C8694 + C8695) * C8071) *
               C51158 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C51157 -
           (((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                 C51035 +
             C561 * C51123) *
                C8071 +
            (C8397 + C8389) * C51152 + (C8388 + C8387) * C51151) *
               C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C1717 -
           (C8693 * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C50966) *
              C50886 * C1068 +
          (((C8386 + C8385) * C51151 + (C8384 + C8383) * C51152 +
            (C8694 + C8695) * C8071) *
               C50966 -
           (C8082 * C8071 + (C8076 + C8075) * C51152 +
            (C8074 + C8073) * C51151) *
               C1717) *
              C50886 * C1069 +
          ((C8081 * C51151 + (C8078 + C8077) * C51152 +
            (C8079 + C8080) * C8071) *
               C1717 -
           (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C51035 +
             C793 * C51123) *
                C8071 +
            (C8695 + C8694) * C51152 + C8693 * C51151) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51123 +
             C2542 * C51035) *
                C51151 +
            (C8073 + C8074) * C51152 + C8081 * C8071) *
               C1717 -
           (C8693 * C8071 + (C8385 + C8386) * C51152 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51123) *
                C51151) *
               C50966) *
              C285 +
          (((C3268 * C51123 + C3267 * C51035) * C51151 +
            (C8890 + C8891) * C51152 + (C8892 + C8893) * C8071) *
               C50966 -
           (C8544 * C8071 + (C8231 + C8232) * C51152 +
            (C2543 * C51035 + C2542 * C51123) * C51151) *
               C1717) *
              C286 +
          (((C2543 * C51123 + C2545 * C51035) * C51151 +
            (C8233 + C8234) * C51152 + (C8235 + C8236) * C8071) *
               C1717 -
           (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                 C51035 +
             C3039 * C51123) *
                C8071 +
            (C3269 * C51035 + C2730 * C51123) * C51152 +
            (C4198 * C51035 + C3267 * C51123) * C51151) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C50902 * C51110 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C50902 * C50938) *
              C51153 +
          (((C13844 * C51123 + C13855 * C51035) * C2333 +
            (C14284 * C51123 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C50938 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C50902 * C51110) *
              C51154 +
          (((C10806 * C51123 + C14284 * C51035) * C2333 +
            ((C10803 + C10802) * C51123 + (C11374 + C11375) * C51035) *
                C50846) *
               C50902 * C51110 -
           (((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 +
              C51063 * C1615 + C10745 * C314 - C10746 * C297 - C10745 * C315 +
              C51124 * C327) *
                 C51035 +
             (C11375 + C11374) * C51123) *
                C50846 +
            ((C11011 + C11010) * C51035 + C11360 * C51123) * C2333) *
               C50902 * C50938) *
              C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
               C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                  C51123 +
              (C13876 + C13877) * C51035) *
                 C2333 +
             ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
                C51111 -
            ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
             ((C14763 + C14764) * C51035 +
              (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
               C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                  C51123) *
                 C2333) *
                C50966) *
               C51110 +
           ((((C14764 + C14763) * C51123 +
              (C10745 * C1613 - C10746 * C1606 - C10745 * C1614 +
               C51124 * C1618 + C10747 * C2699 - C10748 * C2696 -
               C10747 * C2700 + C51063 * C2705) *
                  C51035) *
                 C2333 +
             (C14746 * C51123 + (C14765 + C14766) * C51035) * C50846) *
                C50966 -
            ((C13845 * C51035 + C13846 * C51123) * C50846 +
             ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) *
                 C2333) *
                C51111) *
               C50938) *
              C288 +
          (((((C11209 + C11208) * C51123 + C14746 * C51035) * C2333 +
             ((C11207 + C11206) * C51123 + (C11758 + C11759) * C51035) *
                 C50846) *
                C50966 -
            ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
             (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
                C51111) *
               C51110 +
           (((C13844 * C51123 + C13855 * C51035) * C2333 +
             (C14284 * C51123 + (C11010 + C11011) * C51035) * C50846) *
                C51111 -
            (((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 +
               C51063 * C2707 + C10745 * C1609 - C10746 * C1604 -
               C10745 * C1610 + C51124 * C1616) *
                  C51035 +
              (C11759 + C11758) * C51123) *
                 C50846 +
             ((C14766 + C14765) * C51035 + C14737 * C51123) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C50902 * C285 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C50902 * C286 +
           (((C13879 + C13878) * C51123 +
             (C10745 * C1152 - C10746 * C1145 - C10745 * C1153 +
              C51124 * C1157 + C10747 * C3237 - C10748 * C3234 -
              C10747 * C3238 + C51063 * C3243) *
                 C51035) *
                C2333 +
            (C13855 * C51123 + (C13880 + C13881) * C51035) * C50846) *
               C50902 * C287) *
              C288 +
          (((C13844 * C51123 + C13855 * C51035) * C2333 +
            ((C11005 + C11004) * C51123 + (C11010 + C11011) * C51035) *
                C50846) *
               C50902 * C286 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C50902 * C285 -
           (((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 +
              C51063 * C3245 + C10745 * C1148 - C10746 * C1143 -
              C10745 * C1149 + C51124 * C1155) *
                 C51035 +
             (C11011 + C11010) * C51123) *
                C50846 +
            ((C13881 + C13880) * C51035 + C13845 * C51123) * C2333) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51123 +
            (C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323 +
             C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939) *
                C51035) *
               C2333 +
           ((C10798 + C10799) * C51123 + (C11007 + C11006) * C51035) * C50846) *
              C50902 * C50886 * C113 -
          ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
           ((C11006 + C11007) * C51035 + (C10799 + C10798) * C51123) * C2333) *
              C50902 * C50886 * C114 +
          ((C10806 * C51123 + (C11005 + C11004) * C51035) * C2333 +
           ((C10803 + C10802) * C51123 + (C11374 + C11375) * C51035) * C50846) *
              C50902 * C50886 * C115 -
          (((C10747 * C937 - C10748 * C928 - C10747 * C938 + C51063 * C943 +
             C10745 * C316 - C10746 * C298 - C10745 * C317 + C51124 * C328) *
                C51035 +
            (C10805 + C10804) * C51123) *
               C50846 +
           ((C11375 + C11374) * C51035 + C10807 * C51123) * C2333) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C476 -
           (((C11757 + C11756) * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
              C51063 * C1271 + C10745 * C929 - C10746 * C924 - C10745 * C930 +
              C51124 * C939) *
                 C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C477 +
           (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
              C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
              C51063 * C1902) *
                 C51123 +
             (C10745 * C1266 - C10746 * C1259 - C10745 * C1267 +
              C51124 * C1271 + C10747 * C4598 - C10748 * C4591 -
              C10747 * C4599 + C51063 * C4603) *
                 C51035) *
                C2333 +
            ((C11210 + C11211) * C51123 + (C14088 + C14089) * C51035) *
                C50846) *
               C478) *
              C50886 * C288 +
          ((((C11209 + C11208) * C51123 + (C11756 + C11757) * C51035) * C2333 +
            ((C11207 + C11206) * C51123 + (C11758 + C11759) * C51035) *
                C50846) *
               C477 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C476 -
           (((C10747 * C6177 - C10748 * C6176 - C10747 * C6178 +
              C51063 * C6179 + C10745 * C1262 - C10746 * C1257 -
              C10745 * C1263 + C51124 * C1269) *
                 C51035 +
             (C11213 + C11212) * C51123) *
                C50846 +
            ((C14089 + C14088) * C51035 + (C11211 + C11210) * C51123) * C2333) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C51111 -
           (((C11757 + C11756) * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
              C51063 * C1271 + C10745 * C929 - C10746 * C924 - C10745 * C930 +
              C51124 * C939) *
                 C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C50966) *
              C50886 * C51153 +
          ((((C11209 + C11208) * C51123 + (C11756 + C11757) * C51035) * C2333 +
            ((C11207 + C11206) * C51123 + (C11758 + C11759) * C51035) *
                C50846) *
               C50966 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C51111) *
              C50886 * C51154 +
          (((C10806 * C51123 + C14284 * C51035) * C2333 +
            ((C10803 + C10802) * C51123 + (C11374 + C11375) * C51035) *
                C50846) *
               C51111 -
           (((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C51035 +
             (C11537 + C11536) * C51123) *
                C50846 +
            ((C11759 + C11758) * C51035 + C11522 * C51123) * C2333) *
               C50966) *
              C50886 * C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51123 +
            (C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323 +
             C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939) *
                C51035) *
               C2333 +
           ((C10798 + C10799) * C51123 + (C11007 + C11006) * C51035) * C50846) *
              C50902 * C50886 * C113 -
          ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
           ((C11006 + C11007) * C51035 + (C10799 + C10798) * C51123) * C2333) *
              C50902 * C50886 * C114 +
          ((C10806 * C51123 + (C11005 + C11004) * C51035) * C2333 +
           ((C10803 + C10802) * C51123 + (C11374 + C11375) * C51035) * C50846) *
              C50902 * C50886 * C115 -
          (((C10747 * C937 - C10748 * C928 - C10747 * C938 + C51063 * C943 +
             C10745 * C316 - C10746 * C298 - C10745 * C317 + C51124 * C328) *
                C51035 +
            (C10805 + C10804) * C51123) *
               C50846 +
           ((C11375 + C11374) * C51035 + C10807 * C51123) * C2333) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C50902 * C285 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C50902 * C286 +
           (((C13879 + C13878) * C51123 +
             (C10745 * C1152 - C10746 * C1145 - C10745 * C1153 +
              C51124 * C1157 + C10747 * C3237 - C10748 * C3234 -
              C10747 * C3238 + C51063 * C3243) *
                 C51035) *
                C2333 +
            (C13855 * C51123 + (C13880 + C13881) * C51035) * C50846) *
               C50902 * C287) *
              C288 +
          (((C13844 * C51123 + C13855 * C51035) * C2333 +
            ((C11005 + C11004) * C51123 + (C11010 + C11011) * C51035) *
                C50846) *
               C50902 * C286 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C50902 * C285 -
           (((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 +
              C51063 * C3245 + C10745 * C1148 - C10746 * C1143 -
              C10745 * C1149 + C51124 * C1155) *
                 C51035 +
             (C11011 + C11010) * C51123) *
                C50846 +
            ((C13881 + C13880) * C51035 + C13845 * C51123) * C2333) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C50902 * C51155 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C50902 * C51156 +
           (((C13879 + C13878) * C51123 + (C15103 + C15104) * C51035) * C2333 +
            (C13855 * C51123 + (C13880 + C13881) * C51035) * C50846) *
               C50902 * C1372) *
              C51102 +
          (((C13844 * C51123 + C13855 * C51035) * C2333 +
            (C14284 * C51123 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C51156 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C50902 * C51155 -
           (((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 +
              C51063 * C3245 + C10745 * C1148 - C10746 * C1143 -
              C10745 * C1149 + C51124 * C1155) *
                 C51035 +
             (C11011 + C11010) * C51123) *
                C50846 +
            ((C13881 + C13880) * C51035 + C13845 * C51123) * C2333) *
               C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C51111 -
           ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C50966) *
              C51155 +
          ((((C14764 + C14763) * C51123 + (C15971 + C15972) * C51035) * C2333 +
            (C14746 * C51123 + (C14765 + C14766) * C51035) * C50846) *
               C50966 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C51111) *
              C51156 +
          ((((C13879 + C13878) * C51123 + (C15103 + C15104) * C51035) * C2333 +
            (C13855 * C51123 + (C13880 + C13881) * C51035) * C50846) *
               C51111 -
           (((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C51035 +
             (C14766 + C14765) * C51123) *
                C50846 +
            ((C10747 * C3679 - C10748 * C3676 - C10747 * C3680 +
              C51063 * C3682 + C10745 * C3237 - C10746 * C3234 -
              C10745 * C3238 + C51124 * C3243) *
                 C51035 +
             (C15972 + C15971) * C51123) *
                C2333) *
               C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51123 +
            (C13876 + C13877) * C51035) *
               C2333 +
           ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
              C50902 * C1137 -
          ((C13845 * C51035 + C13846 * C51123) * C50846 +
           ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
              C50902 * C1138 +
          (((C13879 + C13878) * C51123 + (C15103 + C15104) * C51035) * C2333 +
           (C13855 * C51123 + (C13880 + C13881) * C51035) * C50846) *
              C50902 * C1139 -
          (((C10747 * C4185 - C10748 * C4183 - C10747 * C4186 + C51063 * C4189 +
             C10745 * C2495 - C10746 * C2491 - C10745 * C2496 +
             C51124 * C2500) *
                C51035 +
            (C13881 + C13880) * C51123) *
               C50846 +
           ((C10747 * C4187 - C10748 * C4184 - C10747 * C4188 + C51063 * C4190 +
             C10745 * C2493 - C10746 * C2490 - C10745 * C2494 +
             C51124 * C2499) *
                C51035 +
            (C15104 + C15103) * C51123) *
               C2333) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C50902 * C1066 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C50902 * C50938) *
              C1068 +
          (((C13844 * C51123 + C13855 * C51035) * C2333 +
            (C14284 * C51123 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C50938 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C50902 * C1066) *
              C1069 +
          (((C10806 * C51123 + C14284 * C51035) * C2333 +
            ((C10803 + C10802) * C51123 + (C11374 + C11375) * C51035) *
                C50846) *
               C50902 * C1066 -
           (((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 +
              C51063 * C1615 + C10745 * C314 - C10746 * C297 - C10745 * C315 +
              C51124 * C327) *
                 C51035 +
             (C11375 + C11374) * C51123) *
                C50846 +
            ((C11011 + C11010) * C51035 + C11360 * C51123) * C2333) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C476 -
           ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C477 +
           (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
              C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
              C51063 * C1902) *
                 C51123 +
             (C15311 + C15312) * C51035) *
                C2333 +
            ((C11210 + C11211) * C51123 + (C14088 + C14089) * C51035) *
                C50846) *
               C478) *
              C1066 +
          ((((C14764 + C14763) * C51123 +
             (C10745 * C1613 - C10746 * C1606 - C10745 * C1614 +
              C51124 * C1618 + C10747 * C2699 - C10748 * C2696 -
              C10747 * C2700 + C51063 * C2705) *
                 C51035) *
                C2333 +
            (C14746 * C51123 + (C14765 + C14766) * C51035) * C50846) *
               C477 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C476 -
           (((C10747 * C4592 - C10748 * C4588 - C10747 * C4593 +
              C51063 * C4600 + C10745 * C2701 - C10746 * C2697 -
              C10745 * C2702 + C51124 * C2706) *
                 C51035 +
             (C14089 + C14088) * C51123) *
                C50846 +
            ((C10747 * C4596 - C10748 * C4590 - C10747 * C4597 +
              C51063 * C4602 + C10745 * C2699 - C10746 * C2696 -
              C10745 * C2700 + C51124 * C2705) *
                 C51035 +
             (C15312 + C15311) * C51123) *
                C2333) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
               C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                  C51123 +
              (C13876 + C13877) * C51035) *
                 C2333 +
             ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
                C51111 -
            ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
             ((C14763 + C14764) * C51035 +
              (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
               C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                  C51123) *
                 C2333) *
                C50966) *
               C1066 +
           ((((C14764 + C14763) * C51123 +
              (C10745 * C1613 - C10746 * C1606 - C10745 * C1614 +
               C51124 * C1618 + C10747 * C2699 - C10748 * C2696 -
               C10747 * C2700 + C51063 * C2705) *
                  C51035) *
                 C2333 +
             (C14746 * C51123 + (C14765 + C14766) * C51035) * C50846) *
                C50966 -
            ((C13845 * C51035 + C13846 * C51123) * C50846 +
             ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) *
                 C2333) *
                C51111) *
               C50938) *
              C51102 +
          (((((C11209 + C11208) * C51123 + C14746 * C51035) * C2333 +
             ((C11207 + C11206) * C51123 + (C11758 + C11759) * C51035) *
                 C50846) *
                C50966 -
            ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
             (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
                C51111) *
               C1066 +
           (((C13844 * C51123 + C13855 * C51035) * C2333 +
             (C14284 * C51123 + (C11010 + C11011) * C51035) * C50846) *
                C51111 -
            (((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 +
               C51063 * C2707 + C10745 * C1609 - C10746 * C1604 -
               C10745 * C1610 + C51124 * C1616) *
                  C51035 +
              (C11759 + C11758) * C51123) *
                 C50846 +
             ((C14766 + C14765) * C51035 + C14737 * C51123) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C50902 * C1066 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C50902 * C50938) *
              C1068 +
          (((C13844 * C51123 + C13855 * C51035) * C2333 +
            (C14284 * C51123 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C50938 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C50902 * C1066) *
              C1069 +
          (((C10806 * C51123 + C14284 * C51035) * C2333 +
            ((C10803 + C10802) * C51123 + (C11374 + C11375) * C51035) *
                C50846) *
               C50902 * C1066 -
           (((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 +
              C51063 * C1615 + C10745 * C314 - C10746 * C297 - C10745 * C315 +
              C51124 * C327) *
                 C51035 +
             (C11375 + C11374) * C51123) *
                C50846 +
            ((C11011 + C11010) * C51035 + C11360 * C51123) * C2333) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51123 +
            (C13876 + C13877) * C51035) *
               C2333 +
           ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
              C50902 * C1137 -
          ((C13845 * C51035 + C13846 * C51123) * C50846 +
           ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
              C50902 * C1138 +
          (((C13879 + C13878) * C51123 + (C15103 + C15104) * C51035) * C2333 +
           (C13855 * C51123 + (C13880 + C13881) * C51035) * C50846) *
              C50902 * C1139 -
          (((C10747 * C4185 - C10748 * C4183 - C10747 * C4186 + C51063 * C4189 +
             C10745 * C2495 - C10746 * C2491 - C10745 * C2496 +
             C51124 * C2500) *
                C51035 +
            (C13881 + C13880) * C51123) *
               C50846 +
           ((C10747 * C4187 - C10748 * C4184 - C10747 * C4188 + C51063 * C4190 +
             C10745 * C2493 - C10746 * C2490 - C10745 * C2494 +
             C51124 * C2499) *
                C51035 +
            (C15104 + C15103) * C51123) *
               C2333) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
               C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                  C51123 +
              (C13876 + C13877) * C51035) *
                 C2333 +
             ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
                C1717 -
            ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
             ((C14763 + C14764) * C51035 +
              (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
               C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                  C51123) *
                 C2333) *
                C50966) *
               C51110 +
           ((((C14764 + C14763) * C51123 + (C15971 + C15972) * C51035) * C2333 +
             (C14746 * C51123 + (C14765 + C14766) * C51035) * C50846) *
                C50966 -
            ((C13845 * C51035 + C13846 * C51123) * C50846 +
             ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) *
                 C2333) *
                C1717) *
               C50938) *
              C51102 +
          (((((C11209 + C11208) * C51123 + C14746 * C51035) * C2333 +
             ((C11207 + C11206) * C51123 + (C11758 + C11759) * C51035) *
                 C50846) *
                C50966 -
            ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
             (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
                C1717) *
               C51110 +
           (((C13844 * C51123 + C13855 * C51035) * C2333 +
             (C14284 * C51123 + (C11010 + C11011) * C51035) * C50846) *
                C1717 -
            (((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 +
               C51063 * C2707 + C10745 * C1609 - C10746 * C1604 -
               C10745 * C1610 + C51124 * C1616) *
                  C51035 +
              (C11759 + C11758) * C51123) *
                 C50846 +
             ((C14766 + C14765) * C51035 + C14737 * C51123) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C51157 -
           ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C51158 +
           (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
              C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
              C51063 * C1902) *
                 C51123 +
             (C15311 + C15312) * C51035) *
                C2333 +
            ((C11210 + C11211) * C51123 + (C14088 + C14089) * C51035) *
                C50846) *
               C2133) *
              C51110 +
          ((((C14764 + C14763) * C51123 + (C15971 + C15972) * C51035) * C2333 +
            (C14746 * C51123 + (C14765 + C14766) * C51035) * C50846) *
               C51158 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C51157 -
           (((C10747 * C4592 - C10748 * C4588 - C10747 * C4593 +
              C51063 * C4600 + C10745 * C2701 - C10746 * C2697 -
              C10745 * C2702 + C51124 * C2706) *
                 C51035 +
             (C14089 + C14088) * C51123) *
                C50846 +
            ((C10747 * C4596 - C10748 * C4590 - C10747 * C4597 +
              C51063 * C4602 + C10745 * C2699 - C10746 * C2696 -
              C10745 * C2700 + C51124 * C2705) *
                 C51035 +
             (C15312 + C15311) * C51123) *
                C2333) *
               C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C1717 -
           ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C50966) *
              C285 +
          ((((C14764 + C14763) * C51123 + (C15971 + C15972) * C51035) * C2333 +
            (C14746 * C51123 + (C14765 + C14766) * C51035) * C50846) *
               C50966 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C1717) *
              C286 +
          ((((C13879 + C13878) * C51123 + (C15103 + C15104) * C51035) * C2333 +
            (C13855 * C51123 + (C13880 + C13881) * C51035) * C50846) *
               C1717 -
           (((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C51035 +
             (C14766 + C14765) * C51123) *
                C50846 +
            ((C10747 * C3679 - C10748 * C3676 - C10747 * C3680 +
              C51063 * C3682 + C10745 * C3237 - C10746 * C3234 -
              C10745 * C3238 + C51124 * C3243) *
                 C51035 +
             (C15972 + C15971) * C51123) *
                C2333) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C1717 -
           ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C50966) *
              C50886 * C1068 +
          ((((C11209 + C11208) * C51123 + C14746 * C51035) * C2333 +
            ((C11207 + C11206) * C51123 + (C11758 + C11759) * C51035) *
                C50846) *
               C50966 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C1717) *
              C50886 * C1069 +
          (((C10806 * C51123 + C14284 * C51035) * C2333 +
            ((C10803 + C10802) * C51123 + (C11374 + C11375) * C51035) *
                C50846) *
               C1717 -
           (((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C51035 +
             (C11537 + C11536) * C51123) *
                C50846 +
            ((C11759 + C11758) * C51035 + C11522 * C51123) * C2333) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51123 +
            (C13876 + C13877) * C51035) *
               C2333 +
           ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
              C1883 -
          ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
           ((C14763 + C14764) * C51035 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51123) *
               C2333) *
              C1884 +
          (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C51123 +
            (C15311 + C15312) * C51035) *
               C2333 +
           ((C11210 + C11211) * C51123 + (C14088 + C14089) * C51035) * C50846) *
              C1885 -
          (((C10747 * C6593 - C10748 * C6591 - C10747 * C6594 + C51063 * C6597 +
             C10745 * C4594 - C10746 * C4589 - C10745 * C4595 +
             C51124 * C4601) *
                C51035 +
            (C10747 * C5599 - C10748 * C5595 - C10747 * C5600 + C51063 * C5604 +
             C10745 * C1895 - C10746 * C1889 - C10745 * C1896 +
             C51124 * C1901) *
                C51123) *
               C50846 +
           ((C10747 * C6595 - C10748 * C6592 - C10747 * C6596 + C51063 * C6598 +
             C10745 * C4598 - C10746 * C4591 - C10745 * C4599 +
             C51124 * C4603) *
                C51035 +
            (C10747 * C5597 - C10748 * C5594 - C10747 * C5598 + C51063 * C5603 +
             C10745 * C1897 - C10746 * C1890 - C10745 * C1898 +
             C51124 * C1902) *
                C51123) *
               C2333) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C51157 -
           ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C51158 +
           (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
              C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
              C51063 * C1902) *
                 C51123 +
             (C15311 + C15312) * C51035) *
                C2333 +
            ((C11210 + C11211) * C51123 + (C14088 + C14089) * C51035) *
                C50846) *
               C2133) *
              C50886 * C51102 +
          ((((C11209 + C11208) * C51123 + C14746 * C51035) * C2333 +
            ((C11207 + C11206) * C51123 + (C11758 + C11759) * C51035) *
                C50846) *
               C51158 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C51157 -
           (((C10747 * C6177 - C10748 * C6176 - C10747 * C6178 +
              C51063 * C6179 + C10745 * C1262 - C10746 * C1257 -
              C10745 * C1263 + C51124 * C1269) *
                 C51035 +
             (C11213 + C11212) * C51123) *
                C50846 +
            ((C14089 + C14088) * C51035 + (C11211 + C11210) * C51123) * C2333) *
               C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C1717 -
           ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C50966) *
              C50886 * C1068 +
          ((((C11209 + C11208) * C51123 + C14746 * C51035) * C2333 +
            ((C11207 + C11206) * C51123 + (C11758 + C11759) * C51035) *
                C50846) *
               C50966 -
           ((C11360 * C51035 + (C10801 + C10800) * C51123) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C51123) * C2333) *
               C1717) *
              C50886 * C1069 +
          (((C10806 * C51123 + C14284 * C51035) * C2333 +
            ((C10803 + C10802) * C51123 + (C11374 + C11375) * C51035) *
                C50846) *
               C1717 -
           (((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C51035 +
             (C11537 + C11536) * C51123) *
                C50846 +
            ((C11759 + C11758) * C51035 + C11522 * C51123) * C2333) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51123 +
             (C13876 + C13877) * C51035) *
                C2333 +
            ((C10798 + C10799) * C51123 + C13844 * C51035) * C50846) *
               C1717 -
           ((C14737 * C51035 + (C11208 + C11209) * C51123) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51123) *
                C2333) *
               C50966) *
              C285 +
          ((((C14764 + C14763) * C51123 + (C15971 + C15972) * C51035) * C2333 +
            (C14746 * C51123 + (C14765 + C14766) * C51035) * C50846) *
               C50966 -
           ((C13845 * C51035 + C13846 * C51123) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C51123) * C2333) *
               C1717) *
              C286 +
          ((((C13879 + C13878) * C51123 + (C15103 + C15104) * C51035) * C2333 +
            (C13855 * C51123 + (C13880 + C13881) * C51035) * C50846) *
               C1717 -
           (((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C51035 +
             (C14766 + C14765) * C51123) *
                C50846 +
            ((C10747 * C3679 - C10748 * C3676 - C10747 * C3680 +
              C51063 * C3682 + C10745 * C3237 - C10746 * C3234 -
              C10745 * C3238 + C51124 * C3243) *
                 C51035 +
             (C15972 + C15971) * C51123) *
                C2333) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C51110 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C50938) *
              C51153 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C2882 + C2883 + C2884) * C50846) *
               C50902 * C50938 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C51110) *
              C51154 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C50902 * C51110 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C2332 +
             C372 * C2331 + C367 * C2330) *
                C50846 +
            (C2884 + C2883 + C2882) * C2333) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C51110 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C50938) *
              C51153 +
          ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C50902 *
               C50938 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C51110) *
              C51154 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
               C51110 -
           ((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C50984 *
                C110 +
            C682 * C109 + C373 * C108 + C374 * C107) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C50902 * C51110 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C50902 * C50938) *
              C51153 +
          (((C5445 + C5444 + C5443) * C50984 * C2333 +
            (C5813 + C5814 + C5815) * C50984 * C50846) *
               C50902 * C50938 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C50902 * C51110) *
              C51154 +
          (((C5257 + C5256 + C5255) * C50984 * C2333 +
            (C5258 + C5259 + C5260) * C50984 * C50846) *
               C50902 * C51110 -
           ((C5195 * C1260 - C5196 * C1256 - C5195 * C1261 + C5190 * C1268 +
             C5193 * C935 - C5194 * C927 - C5193 * C936 + C5189 * C942 +
             C5191 * C300 - C5192 * C290 - C5191 * C301 + C5188 * C320) *
                C50984 * C50846 +
            (C5815 + C5814 + C5813) * C50984 * C2333) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C2330 +
              C2542 * C2331 + C2543 * C2332) *
                 C2333 +
             (C2336 + C2337 + C2338) * C50846) *
                C51111 -
            ((C2733 + C2713 + C2714) * C50846 +
             (C3267 * C2332 + C3268 * C2331 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C2330) *
                 C2333) *
                C50966) *
               C51110 +
           (((C3268 * C2330 + C3267 * C2331 +
              (C117 * C3237 - C118 * C3234 - C117 * C3238 + C50999 * C3243) *
                  C2332) *
                 C2333 +
             (C3255 + C3256 + C3270) * C50846) *
                C50966 -
            ((C2548 + C2515 + C2516) * C50846 +
             (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
                C51111) *
               C50938) *
              C288 +
          ((((C2714 + C2713 + C2733) * C2333 +
             (C3031 + C3032 + C3040) * C50846) *
                C50966 -
            ((C2339 + C2340 + C2341) * C50846 +
             (C2338 + C2337 + C2336) * C2333) *
                C51111) *
               C51110 +
           (((C2516 + C2515 + C2548) * C2333 +
             (C2882 + C2883 + C2884) * C50846) *
                C51111 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C2332 +
              C3039 * C2331 + C964 * C2330) *
                 C50846 +
             (C3270 + C3256 + C3255) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C50984 * C107 +
             C183 * C108 + C184 * C109 + C185 * C110) *
                C51111 -
            (C562 * C110 + C563 * C109 + C564 * C108 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C50984 * C107) *
                C50966) *
               C51110 +
           (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) *
                 C50984 * C107 +
             C966 * C108 + C967 * C109 + C968 * C110) *
                C50966 -
            (C373 * C110 + C374 * C109 + C375 * C108 +
             (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                 C50984 * C107) *
                C51111) *
               C50938) *
              C288 +
          (((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
            (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C51111) *
               C51110 +
           ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C51111 -
            ((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C50984 * C110 +
             C968 * C109 + C967 * C108 + C966 * C107) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
              C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
              C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                 C50984 * C2333 +
             (C5252 + C5253 + C5254) * C50984 * C50846) *
                C51111 -
            ((C5643 + C5644 + C5645) * C50984 * C50846 +
             (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
              C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
              C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                 C50984 * C2333) *
                C50966) *
               C51110 +
           (((C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939 +
              C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
              C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603) *
                 C50984 * C2333 +
             (C6199 + C6200 + C6201) * C50984 * C50846) *
                C50966 -
            ((C5443 + C5444 + C5445) * C50984 * C50846 +
             (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
              C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
              C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                 C50984 * C2333) *
                C51111) *
               C50938) *
              C288 +
          ((((C5645 + C5644 + C5643) * C50984 * C2333 +
             (C5980 + C5981 + C5982) * C50984 * C50846) *
                C50966 -
            ((C5255 + C5256 + C5257) * C50984 * C50846 +
             (C5254 + C5253 + C5252) * C50984 * C2333) *
                C51111) *
               C51110 +
           (((C5445 + C5444 + C5443) * C50984 * C2333 +
             (C5813 + C5814 + C5815) * C50984 * C50846) *
                C51111 -
            ((C5195 * C6177 - C5196 * C6176 - C5195 * C6178 + C5190 * C6179 +
              C5193 * C1262 - C5194 * C1257 - C5193 * C1263 + C5189 * C1269 +
              C5191 * C933 - C5192 * C926 - C5191 * C934 + C5188 * C941) *
                 C50984 * C50846 +
             (C6201 + C6200 + C6199) * C50984 * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                   C50984 * C107 +
               C183 * C108 + C184 * C109 + C185 * C110) *
                  C50902 * C50886 * C113 -
              (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
                  C50886 * C114 +
              (C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
                  C50886 * C115 -
              ((C117 * C138 - C118 * C125 - C117 * C139 + C50999 * C146) *
                   C50984 * C110 +
               C187 * C109 + C186 * C108 + C185 * C107) *
                  C50902 * C50886 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                    C50984 * C107 +
                C183 * C108 + C184 * C109 + C185 * C110) *
                   C50902 * C285 -
               (C373 * C110 + C374 * C109 + C375 * C108 +
                (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                    C50984 * C107) *
                   C50902 * C286 +
               ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) *
                    C50984 * C107 +
                C376 * C108 + C377 * C109 + C378 * C110) *
                   C50902 * C287) *
                  C288 +
              ((C375 * C107 + C374 * C108 + C373 * C109 +
                (C117 * C316 - C118 * C298 - C117 * C317 + C50999 * C328) *
                    C50984 * C110) *
                   C50902 * C286 -
               (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) *
                   C50902 * C285 -
               ((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                    C50984 * C110 +
                C378 * C109 + C377 * C108 + C376 * C107) *
                   C50902 * C287) *
                  C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C476 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C477 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
                C107 +
            C565 * C108 + C566 * C109 + C567 * C110) *
               C478) *
              C50886 * C288 +
          ((C564 * C107 + C563 * C108 + C562 * C109 +
            (C117 * C505 - C118 * C487 - C117 * C506 + C50999 * C517) * C50984 *
                C110) *
               C477 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C476 -
           ((C117 * C507 - C118 * C488 - C117 * C508 + C50999 * C518) * C50984 *
                C110 +
            C567 * C109 + C566 * C108 + C565 * C107) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C2331 +
            (C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C50902 * C50886 * C113 -
          ((C2339 + C2340 + C2341) * C50846 + (C2338 + C2337 + C2336) * C2333) *
              C50902 * C50886 * C114 +
          ((C2341 + C2340 + C2339) * C2333 + (C2342 + C2343 + C2344) * C50846) *
              C50902 * C50886 * C115 -
          (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C2332 +
            C681 * C2331 + C181 * C2330) *
               C50846 +
           (C2344 + C2343 + C2342) * C2333) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C285 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C286 +
           ((C2543 * C2330 + C2545 * C2331 +
             (C117 * C2493 - C118 * C2490 - C117 * C2494 + C50999 * C2499) *
                 C2332) *
                C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C50902 * C287) *
              C288 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C368 * C2330 + C371 * C2331 + C2547 * C2332) * C50846) *
               C50902 * C286 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C285 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C2332 +
             C2547 * C2331 + C371 * C2330) *
                C50846 +
            (C2550 + C2549 + C2521) * C2333) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C476 -
           ((C2733 + C2713 + C2714) * C50846 +
            ((C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                 C2332 +
             (C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
             (C117 * C1266 - C118 * C1259 - C117 * C1267 + C50999 * C1271) *
                 C2331 +
             (C117 * C2699 - C118 * C2696 - C117 * C2700 + C50999 * C2705) *
                 C2332) *
                C2333 +
            (C2715 + C2734 + C2735) * C50846) *
               C478) *
              C50886 * C288 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C557 * C2330 + C964 * C2331 +
             (C117 * C1609 - C118 * C1604 - C117 * C1610 + C50999 * C1616) *
                 C2332) *
                C50846) *
               C477 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C476 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C2332 +
             (C117 * C1262 - C118 * C1257 - C117 * C1263 + C50999 * C1269) *
                 C2331 +
             C560 * C2330) *
                C50846 +
            (C2735 + C2734 + C2715) * C2333) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C50984 * C2333 +
           (C5252 + C5253 + C5254) * C50984 * C50846) *
              C50902 * C50886 * C113 -
          ((C5255 + C5256 + C5257) * C50984 * C50846 +
           (C5254 + C5253 + C5252) * C50984 * C2333) *
              C50902 * C50886 * C114 +
          ((C5257 + C5256 + C5255) * C50984 * C2333 +
           (C5258 + C5259 + C5260) * C50984 * C50846) *
              C50902 * C50886 * C115 -
          ((C5195 * C507 - C5196 * C488 - C5195 * C508 + C5190 * C518 +
            C5193 * C505 - C5194 * C487 - C5193 * C506 + C5189 * C517 +
            C5191 * C134 - C5192 * C123 - C5191 * C135 + C5188 * C144) *
               C50984 * C50846 +
           (C5260 + C5259 + C5258) * C50984 * C2333) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C50902 * C285 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C50902 * C286 +
           ((C5191 * C308 - C5192 * C294 - C5191 * C309 + C5188 * C324 +
             C5193 * C1613 - C5194 * C1606 - C5193 * C1614 + C5189 * C1618 +
             C5195 * C2699 - C5196 * C2696 - C5195 * C2700 + C5190 * C2705) *
                C50984 * C2333 +
            (C5446 + C5447 + C5448) * C50984 * C50846) *
               C50902 * C287) *
              C288 +
          (((C5445 + C5444 + C5443) * C50984 * C2333 +
            (C5191 * C302 - C5192 * C291 - C5191 * C303 + C5188 * C321 +
             C5193 * C933 - C5194 * C926 - C5193 * C934 + C5189 * C941 +
             C5195 * C1262 - C5196 * C1257 - C5195 * C1263 + C5190 * C1269) *
                C50984 * C50846) *
               C50902 * C286 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C50902 * C285 -
           ((C5195 * C2703 - C5196 * C2698 - C5195 * C2704 + C5190 * C2707 +
             C5193 * C1609 - C5194 * C1604 - C5193 * C1610 + C5189 * C1616 +
             C5191 * C312 - C5192 * C296 - C5191 * C313 + C5188 * C326) *
                C50984 * C50846 +
            (C5448 + C5447 + C5446) * C50984 * C2333) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C476 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C477 +
           ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
             C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
             C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
                C50984 * C2333 +
            (C5646 + C5647 + C5648) * C50984 * C50846) *
               C478) *
              C50886 * C288 +
          (((C5645 + C5644 + C5643) * C50984 * C2333 +
            (C5191 * C491 - C5192 * C480 - C5191 * C492 + C5188 * C510 +
             C5193 * C501 - C5194 * C485 - C5193 * C502 + C5189 * C515 +
             C5195 * C1893 - C5196 * C1888 - C5195 * C1894 + C5190 * C1900) *
                C50984 * C50846) *
               C477 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C476 -
           ((C5195 * C5601 - C5196 * C5596 - C5195 * C5602 + C5190 * C5605 +
             C5193 * C1893 - C5194 * C1888 - C5193 * C1894 + C5189 * C1900 +
             C5191 * C501 - C5192 * C485 - C5191 * C502 + C5188 * C515) *
                C50984 * C50846 +
            (C5648 + C5647 + C5646) * C50984 * C2333) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C51111 -
           ((C2733 + C2713 + C2714) * C50846 +
            ((C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                 C2332 +
             (C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C50886 * C51153 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C3031 + C3032 + C3040) * C50846) *
               C50966 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C51111) *
              C50886 * C51154 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C51111 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C2332 +
             C965 * C2331 + C556 * C2330) *
                C50846 +
            (C3040 + C3032 + C3031) * C2333) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C51111 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C50886 * C51153 +
          ((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C51111) *
              C50886 * C51154 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C51111 -
           ((C117 * C783 - C118 * C782 - C117 * C784 + C50999 * C785) * C50984 *
                C110 +
            C794 * C109 + C562 * C108 + C563 * C107) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C51111 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C50966) *
              C50886 * C51153 +
          (((C5645 + C5644 + C5643) * C50984 * C2333 +
            (C5980 + C5981 + C5982) * C50984 * C50846) *
               C50966 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C51111) *
              C50886 * C51154 +
          (((C5257 + C5256 + C5255) * C50984 * C2333 +
            (C5258 + C5259 + C5260) * C50984 * C50846) *
               C51111 -
           ((C5195 * C1891 - C5196 * C1887 - C5195 * C1892 + C5190 * C1899 +
             C5193 * C503 - C5194 * C486 - C5193 * C504 + C5189 * C516 +
             C5191 * C489 - C5192 * C479 - C5191 * C490 + C5188 * C509) *
                C50984 * C50846 +
            (C5982 + C5981 + C5980) * C50984 * C2333) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C285 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C286 +
           ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C50902 * C287) *
              C288 +
          ((C375 * C107 + C374 * C108 + C373 * C109 +
            (C117 * C316 - C118 * C298 - C117 * C317 + C50999 * C328) * C50984 *
                C110) *
               C50902 * C286 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C285 -
           ((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C50984 *
                C110 +
            C378 * C109 + C377 * C108 + C376 * C107) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
               C107 +
           C183 * C108 + C184 * C109 + C185 * C110) *
              C50902 * C50886 * C113 -
          (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
              C50886 * C114 +
          (C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
              C50886 * C115 -
          ((C117 * C138 - C118 * C125 - C117 * C139 + C50999 * C146) * C50984 *
               C110 +
           C187 * C109 + C186 * C108 + C185 * C107) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C2331 +
            (C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C50902 * C50886 * C113 -
          ((C2339 + C2340 + C2341) * C50846 + (C2338 + C2337 + C2336) * C2333) *
              C50902 * C50886 * C114 +
          ((C2341 + C2340 + C2339) * C2333 + (C2342 + C2343 + C2344) * C50846) *
              C50902 * C50886 * C115 -
          (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C2332 +
            C681 * C2331 + C181 * C2330) *
               C50846 +
           (C2344 + C2343 + C2342) * C2333) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C285 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C286 +
           ((C2543 * C2330 + C2545 * C2331 +
             (C117 * C2493 - C118 * C2490 - C117 * C2494 + C50999 * C2499) *
                 C2332) *
                C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C50902 * C287) *
              C288 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C368 * C2330 + C371 * C2331 + C2547 * C2332) * C50846) *
               C50902 * C286 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C285 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C2332 +
             C2547 * C2331 + C371 * C2330) *
                C50846 +
            (C2550 + C2549 + C2521) * C2333) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C50984 * C2333 +
           (C5252 + C5253 + C5254) * C50984 * C50846) *
              C50902 * C50886 * C113 -
          ((C5255 + C5256 + C5257) * C50984 * C50846 +
           (C5254 + C5253 + C5252) * C50984 * C2333) *
              C50902 * C50886 * C114 +
          ((C5257 + C5256 + C5255) * C50984 * C2333 +
           (C5258 + C5259 + C5260) * C50984 * C50846) *
              C50902 * C50886 * C115 -
          ((C5195 * C507 - C5196 * C488 - C5195 * C508 + C5190 * C518 +
            C5193 * C505 - C5194 * C487 - C5193 * C506 + C5189 * C517 +
            C5191 * C134 - C5192 * C123 - C5191 * C135 + C5188 * C144) *
               C50984 * C50846 +
           (C5260 + C5259 + C5258) * C50984 * C2333) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C50902 * C285 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C50902 * C286 +
           ((C5191 * C308 - C5192 * C294 - C5191 * C309 + C5188 * C324 +
             C5193 * C1613 - C5194 * C1606 - C5193 * C1614 + C5189 * C1618 +
             C5195 * C2699 - C5196 * C2696 - C5195 * C2700 + C5190 * C2705) *
                C50984 * C2333 +
            (C5446 + C5447 + C5448) * C50984 * C50846) *
               C50902 * C287) *
              C288 +
          (((C5445 + C5444 + C5443) * C50984 * C2333 +
            (C5191 * C302 - C5192 * C291 - C5191 * C303 + C5188 * C321 +
             C5193 * C933 - C5194 * C926 - C5193 * C934 + C5189 * C941 +
             C5195 * C1262 - C5196 * C1257 - C5195 * C1263 + C5190 * C1269) *
                C50984 * C50846) *
               C50902 * C286 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C50902 * C285 -
           ((C5195 * C2703 - C5196 * C2698 - C5195 * C2704 + C5190 * C2707 +
             C5193 * C1609 - C5194 * C1604 - C5193 * C1610 + C5189 * C1616 +
             C5191 * C312 - C5192 * C296 - C5191 * C313 + C5188 * C326) *
                C50984 * C50846 +
            (C5448 + C5447 + C5446) * C50984 * C2333) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C51155 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C51156 +
           ((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C50902 * C1372) *
              C51102 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C2882 + C2883 + C2884) * C50846) *
               C50902 * C51156 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C51155 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C2332 +
             C2547 * C2331 + C371 * C2330) *
                C50846 +
            (C2550 + C2549 + C2521) * C2333) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C51155 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C51156 +
           ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C50902 * C1372) *
              C51102 +
          ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C50902 *
               C51156 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C51155 -
           ((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C50984 *
                C110 +
            C378 * C109 + C377 * C108 + C376 * C107) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C50902 * C51155 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C50902 * C51156 +
           ((C5191 * C308 - C5192 * C294 - C5191 * C309 + C5188 * C324 +
             C5193 * C1613 - C5194 * C1606 - C5193 * C1614 + C5189 * C1618 +
             C5195 * C2699 - C5196 * C2696 - C5195 * C2700 + C5190 * C2705) *
                C50984 * C2333 +
            (C5446 + C5447 + C5448) * C50984 * C50846) *
               C50902 * C1372) *
              C51102 +
          (((C5445 + C5444 + C5443) * C50984 * C2333 +
            (C5813 + C5814 + C5815) * C50984 * C50846) *
               C50902 * C51156 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C50902 * C51155 -
           ((C5195 * C2703 - C5196 * C2698 - C5195 * C2704 + C5190 * C2707 +
             C5193 * C1609 - C5194 * C1604 - C5193 * C1610 + C5189 * C1616 +
             C5191 * C312 - C5192 * C296 - C5191 * C313 + C5188 * C326) *
                C50984 * C50846 +
            (C5448 + C5447 + C5446) * C50984 * C2333) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C51111 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C51155 +
          (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C50966 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C51111) *
              C51156 +
          (((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C51111 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C2332 +
             C3269 * C2331 + C2730 * C2330) *
                C50846 +
            ((C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C2332 +
             C4198 * C2331 + C3267 * C2330) *
                C2333) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C51111 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C51155 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C50966 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C51111) *
              C51156 +
          (((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C51111 -
           ((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                C50984 * C110 +
            (C117 * C1609 - C118 * C1604 - C117 * C1610 + C50999 * C1616) *
                C50984 * C109 +
            (C117 * C1611 - C118 * C1605 - C117 * C1612 + C50999 * C1617) *
                C50984 * C108 +
            (C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                C50984 * C107) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C51111 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C50966) *
              C51155 +
          (((C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939 +
             C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
             C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603) *
                C50984 * C2333 +
            (C6199 + C6200 + C6201) * C50984 * C50846) *
               C50966 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C51111) *
              C51156 +
          (((C5191 * C308 - C5192 * C294 - C5191 * C309 + C5188 * C324 +
             C5193 * C1613 - C5194 * C1606 - C5193 * C1614 + C5189 * C1618 +
             C5195 * C2699 - C5196 * C2696 - C5195 * C2700 + C5190 * C2705) *
                C50984 * C2333 +
            (C5446 + C5447 + C5448) * C50984 * C50846) *
               C51111 -
           ((C5195 * C4592 - C5196 * C4588 - C5195 * C4593 + C5190 * C4600 +
             C5193 * C2701 - C5194 * C2697 - C5193 * C2702 + C5189 * C2706 +
             C5191 * C1611 - C5192 * C1605 - C5191 * C1612 + C5188 * C1617) *
                C50984 * C50846 +
            (C5195 * C4596 - C5196 * C4590 - C5195 * C4597 + C5190 * C4602 +
             C5193 * C2699 - C5194 * C2696 - C5193 * C2700 + C5189 * C2705 +
             C5191 * C1613 - C5192 * C1606 - C5191 * C1614 + C5188 * C1618) *
                C50984 * C2333) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                    C50984 * C107 +
                C183 * C108 + C184 * C109 + C185 * C110) *
                   C50902 * C1066 -
               (C373 * C110 + C374 * C109 + C375 * C108 +
                (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                    C50984 * C107) *
                   C50902 * C50938) *
                  C1068 +
              ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) *
                   C50902 * C50938 -
               (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) *
                   C50902 * C1066) *
                  C1069 +
              ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) *
                   C50902 * C1066 -
               ((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) *
                    C50984 * C110 +
                C682 * C109 + C373 * C108 + C374 * C107) *
                   C50902 * C50938) *
                  C1070) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                   C50984 * C107 +
               C183 * C108 + C184 * C109 + C185 * C110) *
                  C50902 * C1137 -
              (C373 * C110 + C374 * C109 + C375 * C108 +
               (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                   C50984 * C107) *
                  C50902 * C1138 +
              ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) *
                   C50984 * C107 +
               C376 * C108 + C377 * C109 + C378 * C110) *
                  C50902 * C1139 -
              ((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                   C50984 * C110 +
               (C117 * C1148 - C118 * C1143 - C117 * C1149 + C50999 * C1155) *
                   C50984 * C109 +
               (C117 * C1150 - C118 * C1144 - C117 * C1151 + C50999 * C1156) *
                   C50984 * C108 +
               (C117 * C1152 - C118 * C1145 - C117 * C1153 + C50999 * C1157) *
                   C50984 * C107) *
                  C50902 * C1140) *
             C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C476 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C477 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
                C107 +
            C565 * C108 + C566 * C109 + C567 * C110) *
               C478) *
              C1066 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C477 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C476 -
           ((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                C50984 * C110 +
            (C117 * C1262 - C118 * C1257 - C117 * C1263 + C50999 * C1269) *
                C50984 * C109 +
            (C117 * C1264 - C118 * C1258 - C117 * C1265 + C50999 * C1270) *
                C50984 * C108 +
            (C117 * C1266 - C118 * C1259 - C117 * C1267 + C50999 * C1271) *
                C50984 * C107) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C1066 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C50938) *
              C1068 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C2882 + C2883 + C2884) * C50846) *
               C50902 * C50938 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C1066) *
              C1069 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C50902 * C1066 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C2332 +
             C372 * C2331 + C367 * C2330) *
                C50846 +
            (C2884 + C2883 + C2882) * C2333) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            C2542 * C2331 + C2543 * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C50902 * C1137 -
          ((C2548 + C2515 + C2516) * C50846 +
           (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
              C50902 * C1138 +
          ((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
           (C2521 + C2549 + C2550) * C50846) *
              C50902 * C1139 -
          (((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C2332 +
            C2546 * C2331 + C2544 * C2330) *
               C50846 +
           ((C117 * C3518 - C118 * C3515 - C117 * C3519 + C50999 * C3521) *
                C2332 +
            C3529 * C2331 + C2545 * C2330) *
               C2333) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C476 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
             C3696 * C2331 + C3697 * C2332) *
                C2333 +
            (C2715 + C2734 + C2735) * C50846) *
               C478) *
              C1066 +
          (((C3268 * C2330 + C3267 * C2331 +
             (C117 * C3237 - C118 * C3234 - C117 * C3238 + C50999 * C3243) *
                 C2332) *
                C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C477 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C476 -
           (((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                 C2332 +
             C2732 * C2331 + C2731 * C2330) *
                C50846 +
            ((C117 * C3679 - C118 * C3676 - C117 * C3680 + C50999 * C3682) *
                 C2332 +
             C3697 * C2331 + C3696 * C2330) *
                C2333) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C50902 * C1066 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C50902 * C50938) *
              C1068 +
          (((C5445 + C5444 + C5443) * C50984 * C2333 +
            (C5813 + C5814 + C5815) * C50984 * C50846) *
               C50902 * C50938 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C50902 * C1066) *
              C1069 +
          (((C5257 + C5256 + C5255) * C50984 * C2333 +
            (C5258 + C5259 + C5260) * C50984 * C50846) *
               C50902 * C1066 -
           ((C5195 * C1260 - C5196 * C1256 - C5195 * C1261 + C5190 * C1268 +
             C5193 * C935 - C5194 * C927 - C5193 * C936 + C5189 * C942 +
             C5191 * C300 - C5192 * C290 - C5191 * C301 + C5188 * C320) *
                C50984 * C50846 +
            (C5815 + C5814 + C5813) * C50984 * C2333) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C50984 * C2333 +
           (C5252 + C5253 + C5254) * C50984 * C50846) *
              C50902 * C1137 -
          ((C5443 + C5444 + C5445) * C50984 * C50846 +
           (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
            C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
            C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
               C50984 * C2333) *
              C50902 * C1138 +
          ((C5191 * C308 - C5192 * C294 - C5191 * C309 + C5188 * C324 +
            C5193 * C1613 - C5194 * C1606 - C5193 * C1614 + C5189 * C1618 +
            C5195 * C2699 - C5196 * C2696 - C5195 * C2700 + C5190 * C2705) *
               C50984 * C2333 +
           (C5446 + C5447 + C5448) * C50984 * C50846) *
              C50902 * C1139 -
          ((C5195 * C3677 - C5196 * C3675 - C5195 * C3678 + C5190 * C3681 +
            C5193 * C3239 - C5194 * C3235 - C5193 * C3240 + C5189 * C3244 +
            C5191 * C1150 - C5192 * C1144 - C5191 * C1151 + C5188 * C1156) *
               C50984 * C50846 +
           (C5195 * C3679 - C5196 * C3676 - C5195 * C3680 + C5190 * C3682 +
            C5193 * C3237 - C5194 * C3234 - C5193 * C3238 + C5189 * C3243 +
            C5191 * C1152 - C5192 * C1145 - C5191 * C1153 + C5188 * C1157) *
               C50984 * C2333) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C476 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C477 +
           ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
             C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
             C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
                C50984 * C2333 +
            (C5646 + C5647 + C5648) * C50984 * C50846) *
               C478) *
              C1066 +
          (((C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939 +
             C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
             C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603) *
                C50984 * C2333 +
            (C6199 + C6200 + C6201) * C50984 * C50846) *
               C477 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C476 -
           ((C5195 * C6593 - C5196 * C6591 - C5195 * C6594 + C5190 * C6597 +
             C5193 * C4594 - C5194 * C4589 - C5193 * C4595 + C5189 * C4601 +
             C5191 * C1264 - C5192 * C1258 - C5191 * C1265 + C5188 * C1270) *
                C50984 * C50846 +
            (C5195 * C6595 - C5196 * C6592 - C5195 * C6596 + C5190 * C6598 +
             C5193 * C4598 - C5194 * C4591 - C5193 * C4599 + C5189 * C4603 +
             C5191 * C1266 - C5192 * C1259 - C5191 * C1267 + C5188 * C1271) *
                C50984 * C2333) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C2330 +
              C2542 * C2331 + C2543 * C2332) *
                 C2333 +
             (C2336 + C2337 + C2338) * C50846) *
                C51111 -
            ((C2733 + C2713 + C2714) * C50846 +
             (C3267 * C2332 + C3268 * C2331 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C2330) *
                 C2333) *
                C50966) *
               C1066 +
           (((C3268 * C2330 + C3267 * C2331 +
              (C117 * C3237 - C118 * C3234 - C117 * C3238 + C50999 * C3243) *
                  C2332) *
                 C2333 +
             (C3255 + C3256 + C3270) * C50846) *
                C50966 -
            ((C2548 + C2515 + C2516) * C50846 +
             (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
                C51111) *
               C50938) *
              C51102 +
          ((((C2714 + C2713 + C2733) * C2333 +
             (C3031 + C3032 + C3040) * C50846) *
                C50966 -
            ((C2339 + C2340 + C2341) * C50846 +
             (C2338 + C2337 + C2336) * C2333) *
                C51111) *
               C1066 +
           (((C2516 + C2515 + C2548) * C2333 +
             (C2882 + C2883 + C2884) * C50846) *
                C51111 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C2332 +
              C3039 * C2331 + C964 * C2330) *
                 C50846 +
             (C3270 + C3256 + C3255) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C50984 * C107 +
             C183 * C108 + C184 * C109 + C185 * C110) *
                C51111 -
            (C562 * C110 + C563 * C109 + C564 * C108 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C50984 * C107) *
                C50966) *
               C1066 +
           (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) *
                 C50984 * C107 +
             C966 * C108 + C967 * C109 + C968 * C110) *
                C50966 -
            (C373 * C110 + C374 * C109 + C375 * C108 +
             (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                 C50984 * C107) *
                C51111) *
               C50938) *
              C51102 +
          (((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
            (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C51111) *
               C1066 +
           ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C51111 -
            ((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C50984 * C110 +
             C968 * C109 + C967 * C108 + C966 * C107) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
              C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
              C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                 C50984 * C2333 +
             (C5252 + C5253 + C5254) * C50984 * C50846) *
                C51111 -
            ((C5643 + C5644 + C5645) * C50984 * C50846 +
             (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
              C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
              C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                 C50984 * C2333) *
                C50966) *
               C1066 +
           (((C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939 +
              C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
              C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603) *
                 C50984 * C2333 +
             (C6199 + C6200 + C6201) * C50984 * C50846) *
                C50966 -
            ((C5443 + C5444 + C5445) * C50984 * C50846 +
             (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
              C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
              C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                 C50984 * C2333) *
                C51111) *
               C50938) *
              C51102 +
          ((((C5645 + C5644 + C5643) * C50984 * C2333 +
             (C5980 + C5981 + C5982) * C50984 * C50846) *
                C50966 -
            ((C5255 + C5256 + C5257) * C50984 * C50846 +
             (C5254 + C5253 + C5252) * C50984 * C2333) *
                C51111) *
               C1066 +
           (((C5445 + C5444 + C5443) * C50984 * C2333 +
             (C5813 + C5814 + C5815) * C50984 * C50846) *
                C51111 -
            ((C5195 * C6177 - C5196 * C6176 - C5195 * C6178 + C5190 * C6179 +
              C5193 * C1262 - C5194 * C1257 - C5193 * C1263 + C5189 * C1269 +
              C5191 * C933 - C5192 * C926 - C5191 * C934 + C5188 * C941) *
                 C50984 * C50846 +
             (C6201 + C6200 + C6199) * C50984 * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
               C107 +
           C183 * C108 + C184 * C109 + C185 * C110) *
              C50902 * C1137 -
          (C373 * C110 + C374 * C109 + C375 * C108 +
           (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
               C107) *
              C50902 * C1138 +
          ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
               C107 +
           C376 * C108 + C377 * C109 + C378 * C110) *
              C50902 * C1139 -
          ((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
               C50984 * C110 +
           (C117 * C1148 - C118 * C1143 - C117 * C1149 + C50999 * C1155) *
               C50984 * C109 +
           (C117 * C1150 - C118 * C1144 - C117 * C1151 + C50999 * C1156) *
               C50984 * C108 +
           (C117 * C1152 - C118 * C1145 - C117 * C1153 + C50999 * C1157) *
               C50984 * C107) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C1066 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C50938) *
              C1068 +
          ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C50902 *
               C50938 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C1066) *
              C1069 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
               C1066 -
           ((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C50984 *
                C110 +
            C682 * C109 + C373 * C108 + C374 * C107) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C1066 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C50938) *
              C1068 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C2882 + C2883 + C2884) * C50846) *
               C50902 * C50938 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C1066) *
              C1069 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C50902 * C1066 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C2332 +
             C372 * C2331 + C367 * C2330) *
                C50846 +
            (C2884 + C2883 + C2882) * C2333) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            C2542 * C2331 + C2543 * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C50902 * C1137 -
          ((C2548 + C2515 + C2516) * C50846 +
           (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
              C50902 * C1138 +
          ((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
           (C2521 + C2549 + C2550) * C50846) *
              C50902 * C1139 -
          (((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C2332 +
            C2546 * C2331 + C2544 * C2330) *
               C50846 +
           ((C117 * C3518 - C118 * C3515 - C117 * C3519 + C50999 * C3521) *
                C2332 +
            C3529 * C2331 + C2545 * C2330) *
               C2333) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C50902 * C1066 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C50902 * C50938) *
              C1068 +
          (((C5445 + C5444 + C5443) * C50984 * C2333 +
            (C5813 + C5814 + C5815) * C50984 * C50846) *
               C50902 * C50938 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C50902 * C1066) *
              C1069 +
          (((C5257 + C5256 + C5255) * C50984 * C2333 +
            (C5258 + C5259 + C5260) * C50984 * C50846) *
               C50902 * C1066 -
           ((C5195 * C1260 - C5196 * C1256 - C5195 * C1261 + C5190 * C1268 +
             C5193 * C935 - C5194 * C927 - C5193 * C936 + C5189 * C942 +
             C5191 * C300 - C5192 * C290 - C5191 * C301 + C5188 * C320) *
                C50984 * C50846 +
            (C5815 + C5814 + C5813) * C50984 * C2333) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C50984 * C2333 +
           (C5252 + C5253 + C5254) * C50984 * C50846) *
              C50902 * C1137 -
          ((C5443 + C5444 + C5445) * C50984 * C50846 +
           (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
            C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
            C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
               C50984 * C2333) *
              C50902 * C1138 +
          ((C5191 * C308 - C5192 * C294 - C5191 * C309 + C5188 * C324 +
            C5193 * C1613 - C5194 * C1606 - C5193 * C1614 + C5189 * C1618 +
            C5195 * C2699 - C5196 * C2696 - C5195 * C2700 + C5190 * C2705) *
               C50984 * C2333 +
           (C5446 + C5447 + C5448) * C50984 * C50846) *
              C50902 * C1139 -
          ((C5195 * C3677 - C5196 * C3675 - C5195 * C3678 + C5190 * C3681 +
            C5193 * C3239 - C5194 * C3235 - C5193 * C3240 + C5189 * C3244 +
            C5191 * C1150 - C5192 * C1144 - C5191 * C1151 + C5188 * C1156) *
               C50984 * C50846 +
           (C5195 * C3679 - C5196 * C3676 - C5195 * C3680 + C5190 * C3682 +
            C5193 * C3237 - C5194 * C3234 - C5193 * C3238 + C5189 * C3243 +
            C5191 * C1152 - C5192 * C1145 - C5191 * C1153 + C5188 * C1157) *
               C50984 * C2333) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C2330 +
              C2542 * C2331 + C2543 * C2332) *
                 C2333 +
             (C2336 + C2337 + C2338) * C50846) *
                C1717 -
            ((C2733 + C2713 + C2714) * C50846 +
             (C3267 * C2332 + C3268 * C2331 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C2330) *
                 C2333) *
                C50966) *
               C51110 +
           (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
             (C3255 + C3256 + C3270) * C50846) *
                C50966 -
            ((C2548 + C2515 + C2516) * C50846 +
             (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
                C1717) *
               C50938) *
              C51102 +
          ((((C2714 + C2713 + C2733) * C2333 +
             (C3031 + C3032 + C3040) * C50846) *
                C50966 -
            ((C2339 + C2340 + C2341) * C50846 +
             (C2338 + C2337 + C2336) * C2333) *
                C1717) *
               C51110 +
           (((C2516 + C2515 + C2548) * C2333 +
             (C2882 + C2883 + C2884) * C50846) *
                C1717 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C2332 +
              C3039 * C2331 + C964 * C2330) *
                 C50846 +
             (C3270 + C3256 + C3255) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C50984 * C107 +
             C183 * C108 + C184 * C109 + C185 * C110) *
                C1717 -
            (C562 * C110 + C563 * C109 + C564 * C108 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C50984 * C107) *
                C50966) *
               C51110 +
           (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) *
                 C50984 * C107 +
             C966 * C108 + C967 * C109 + C968 * C110) *
                C50966 -
            (C373 * C110 + C374 * C109 + C375 * C108 +
             (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                 C50984 * C107) *
                C1717) *
               C50938) *
              C51102 +
          (((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
            (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C1717) *
               C51110 +
           ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C1717 -
            ((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C50984 * C110 +
             C968 * C109 + C967 * C108 + C966 * C107) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
              C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
              C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                 C50984 * C2333 +
             (C5252 + C5253 + C5254) * C50984 * C50846) *
                C1717 -
            ((C5643 + C5644 + C5645) * C50984 * C50846 +
             (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
              C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
              C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                 C50984 * C2333) *
                C50966) *
               C51110 +
           (((C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939 +
              C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
              C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603) *
                 C50984 * C2333 +
             (C6199 + C6200 + C6201) * C50984 * C50846) *
                C50966 -
            ((C5443 + C5444 + C5445) * C50984 * C50846 +
             (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
              C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
              C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                 C50984 * C2333) *
                C1717) *
               C50938) *
              C51102 +
          ((((C5645 + C5644 + C5643) * C50984 * C2333 +
             (C5980 + C5981 + C5982) * C50984 * C50846) *
                C50966 -
            ((C5255 + C5256 + C5257) * C50984 * C50846 +
             (C5254 + C5253 + C5252) * C50984 * C2333) *
                C1717) *
               C51110 +
           (((C5445 + C5444 + C5443) * C50984 * C2333 +
             (C5813 + C5814 + C5815) * C50984 * C50846) *
                C1717 -
            ((C5195 * C6177 - C5196 * C6176 - C5195 * C6178 + C5190 * C6179 +
              C5193 * C1262 - C5194 * C1257 - C5193 * C1263 + C5189 * C1269 +
              C5191 * C933 - C5192 * C926 - C5191 * C934 + C5188 * C941) *
                 C50984 * C50846 +
             (C6201 + C6200 + C6199) * C50984 * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C51157 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
             C3696 * C2331 + C3697 * C2332) *
                C2333 +
            (C2715 + C2734 + C2735) * C50846) *
               C2133) *
              C51110 +
          (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C51158 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C51157 -
           (((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                 C2332 +
             C2732 * C2331 + C2731 * C2330) *
                C50846 +
            ((C117 * C3679 - C118 * C3676 - C117 * C3680 + C50999 * C3682) *
                 C2332 +
             C3697 * C2331 + C3696 * C2330) *
                C2333) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C51157 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C51158 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
                C107 +
            C565 * C108 + C566 * C109 + C567 * C110) *
               C2133) *
              C51110 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C51158 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C51157 -
           ((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                C50984 * C110 +
            (C117 * C1262 - C118 * C1257 - C117 * C1263 + C50999 * C1269) *
                C50984 * C109 +
            (C117 * C1264 - C118 * C1258 - C117 * C1265 + C50999 * C1270) *
                C50984 * C108 +
            (C117 * C1266 - C118 * C1259 - C117 * C1267 + C50999 * C1271) *
                C50984 * C107) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C51157 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C51158 +
           ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
             C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
             C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
                C50984 * C2333 +
            (C5646 + C5647 + C5648) * C50984 * C50846) *
               C2133) *
              C51110 +
          (((C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939 +
             C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
             C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603) *
                C50984 * C2333 +
            (C6199 + C6200 + C6201) * C50984 * C50846) *
               C51158 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C51157 -
           ((C5195 * C6593 - C5196 * C6591 - C5195 * C6594 + C5190 * C6597 +
             C5193 * C4594 - C5194 * C4589 - C5193 * C4595 + C5189 * C4601 +
             C5191 * C1264 - C5192 * C1258 - C5191 * C1265 + C5188 * C1270) *
                C50984 * C50846 +
            (C5195 * C6595 - C5196 * C6592 - C5195 * C6596 + C5190 * C6598 +
             C5193 * C4598 - C5194 * C4591 - C5193 * C4599 + C5189 * C4603 +
             C5191 * C1266 - C5192 * C1259 - C5191 * C1267 + C5188 * C1271) *
                C50984 * C2333) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                    C50984 * C107 +
                C183 * C108 + C184 * C109 + C185 * C110) *
                   C1717 -
               (C562 * C110 + C563 * C109 + C564 * C108 +
                (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                    C50984 * C107) *
                   C50966) *
                  C50886 * C1068 +
              ((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) *
                   C50966 -
               (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) *
                   C1717) *
                  C50886 * C1069 +
              ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C1717 -
               ((C117 * C783 - C118 * C782 - C117 * C784 + C50999 * C785) *
                    C50984 * C110 +
                C794 * C109 + C562 * C108 + C563 * C107) *
                   C50966) *
                  C50886 * C1070) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                    C50984 * C107 +
                C183 * C108 + C184 * C109 + C185 * C110) *
                   C1717 -
               (C562 * C110 + C563 * C109 + C564 * C108 +
                (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                    C50984 * C107) *
                   C50966) *
                  C285 +
              (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) *
                    C50984 * C107 +
                C966 * C108 + C967 * C109 + C968 * C110) *
                   C50966 -
               (C373 * C110 + C374 * C109 + C375 * C108 +
                (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                    C50984 * C107) *
                   C1717) *
                  C286 +
              (((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) *
                    C50984 * C107 +
                C376 * C108 + C377 * C109 + C378 * C110) *
                   C1717 -
               ((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                    C50984 * C110 +
                (C117 * C1609 - C118 * C1604 - C117 * C1610 + C50999 * C1616) *
                    C50984 * C109 +
                (C117 * C1611 - C118 * C1605 - C117 * C1612 + C50999 * C1617) *
                    C50984 * C108 +
                (C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                    C50984 * C107) *
                   C50966) *
                  C287) *
             C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
               C107 +
           C183 * C108 + C184 * C109 + C185 * C110) *
              C1883 -
          (C562 * C110 + C563 * C109 + C564 * C108 +
           (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
               C107) *
              C1884 +
          ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
               C107 +
           C565 * C108 + C566 * C109 + C567 * C110) *
              C1885 -
          ((C117 * C1891 - C118 * C1887 - C117 * C1892 + C50999 * C1899) *
               C50984 * C110 +
           (C117 * C1893 - C118 * C1888 - C117 * C1894 + C50999 * C1900) *
               C50984 * C109 +
           (C117 * C1895 - C118 * C1889 - C117 * C1896 + C50999 * C1901) *
               C50984 * C108 +
           (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
               C50984 * C107) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C1717 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C50886 * C1068 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C3031 + C3032 + C3040) * C50846) *
               C50966 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C1717) *
              C50886 * C1069 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C1717 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C2332 +
             C965 * C2331 + C556 * C2330) *
                C50846 +
            (C3040 + C3032 + C3031) * C2333) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C1717 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C285 +
          (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C50966 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C1717) *
              C286 +
          (((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C1717 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C2332 +
             C3269 * C2331 + C2730 * C2330) *
                C50846 +
            ((C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C2332 +
             C4198 * C2331 + C3267 * C2330) *
                C2333) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            C2542 * C2331 + C2543 * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C1883 -
          ((C2733 + C2713 + C2714) * C50846 +
           (C3267 * C2332 + C3268 * C2331 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C2330) *
               C2333) *
              C1884 +
          (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
            C3696 * C2331 + C3697 * C2332) *
               C2333 +
           (C2715 + C2734 + C2735) * C50846) *
              C1885 -
          (((C117 * C4592 - C118 * C4588 - C117 * C4593 + C50999 * C4600) *
                C2332 +
            (C117 * C4594 - C118 * C4589 - C117 * C4595 + C50999 * C4601) *
                C2331 +
            (C117 * C1895 - C118 * C1889 - C117 * C1896 + C50999 * C1901) *
                C2330) *
               C50846 +
           ((C117 * C4596 - C118 * C4590 - C117 * C4597 + C50999 * C4602) *
                C2332 +
            (C117 * C4598 - C118 * C4591 - C117 * C4599 + C50999 * C4603) *
                C2331 +
            (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
                C2330) *
               C2333) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C1717 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C50966) *
              C50886 * C1068 +
          (((C5645 + C5644 + C5643) * C50984 * C2333 +
            (C5980 + C5981 + C5982) * C50984 * C50846) *
               C50966 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C1717) *
              C50886 * C1069 +
          (((C5257 + C5256 + C5255) * C50984 * C2333 +
            (C5258 + C5259 + C5260) * C50984 * C50846) *
               C1717 -
           ((C5195 * C1891 - C5196 * C1887 - C5195 * C1892 + C5190 * C1899 +
             C5193 * C503 - C5194 * C486 - C5193 * C504 + C5189 * C516 +
             C5191 * C489 - C5192 * C479 - C5191 * C490 + C5188 * C509) *
                C50984 * C50846 +
            (C5982 + C5981 + C5980) * C50984 * C2333) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C1717 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C50966) *
              C285 +
          (((C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939 +
             C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
             C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603) *
                C50984 * C2333 +
            (C6199 + C6200 + C6201) * C50984 * C50846) *
               C50966 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C1717) *
              C286 +
          (((C5191 * C308 - C5192 * C294 - C5191 * C309 + C5188 * C324 +
             C5193 * C1613 - C5194 * C1606 - C5193 * C1614 + C5189 * C1618 +
             C5195 * C2699 - C5196 * C2696 - C5195 * C2700 + C5190 * C2705) *
                C50984 * C2333 +
            (C5446 + C5447 + C5448) * C50984 * C50846) *
               C1717 -
           ((C5195 * C4592 - C5196 * C4588 - C5195 * C4593 + C5190 * C4600 +
             C5193 * C2701 - C5194 * C2697 - C5193 * C2702 + C5189 * C2706 +
             C5191 * C1611 - C5192 * C1605 - C5191 * C1612 + C5188 * C1617) *
                C50984 * C50846 +
            (C5195 * C4596 - C5196 * C4590 - C5195 * C4597 + C5190 * C4602 +
             C5193 * C2699 - C5194 * C2696 - C5193 * C2700 + C5189 * C2705 +
             C5191 * C1613 - C5192 * C1606 - C5191 * C1614 + C5188 * C1618) *
                C50984 * C2333) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C50984 * C2333 +
           (C5252 + C5253 + C5254) * C50984 * C50846) *
              C1883 -
          ((C5643 + C5644 + C5645) * C50984 * C50846 +
           (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
            C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
            C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
               C50984 * C2333) *
              C1884 +
          ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
            C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
            C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
               C50984 * C2333 +
           (C5646 + C5647 + C5648) * C50984 * C50846) *
              C1885 -
          ((C5195 * C7477 - C5196 * C7475 - C5195 * C7478 + C5190 * C7481 +
            C5193 * C5599 - C5194 * C5595 - C5193 * C5600 + C5189 * C5604 +
            C5191 * C1895 - C5192 * C1889 - C5191 * C1896 + C5188 * C1901) *
               C50984 * C50846 +
           (C5195 * C7479 - C5196 * C7476 - C5195 * C7480 + C5190 * C7482 +
            C5193 * C5597 - C5194 * C5594 - C5193 * C5598 + C5189 * C5603 +
            C5191 * C1897 - C5192 * C1890 - C5191 * C1898 + C5188 * C1902) *
               C50984 * C2333) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C51157 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
             C3696 * C2331 + C3697 * C2332) *
                C2333 +
            (C2715 + C2734 + C2735) * C50846) *
               C2133) *
              C50886 * C51102 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C3031 + C3032 + C3040) * C50846) *
               C51158 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C51157 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C2332 +
             (C117 * C1262 - C118 * C1257 - C117 * C1263 + C50999 * C1269) *
                 C2331 +
             C560 * C2330) *
                C50846 +
            (C2735 + C2734 + C2715) * C2333) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C51157 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C51158 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
                C107 +
            C565 * C108 + C566 * C109 + C567 * C110) *
               C2133) *
              C50886 * C51102 +
          ((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C51158 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C51157 -
           ((C117 * C507 - C118 * C488 - C117 * C508 + C50999 * C518) * C50984 *
                C110 +
            C567 * C109 + C566 * C108 + C565 * C107) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C51157 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C51158 +
           ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
             C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
             C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
                C50984 * C2333 +
            (C5646 + C5647 + C5648) * C50984 * C50846) *
               C2133) *
              C50886 * C51102 +
          (((C5645 + C5644 + C5643) * C50984 * C2333 +
            (C5980 + C5981 + C5982) * C50984 * C50846) *
               C51158 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C51157 -
           ((C5195 * C5601 - C5196 * C5596 - C5195 * C5602 + C5190 * C5605 +
             C5193 * C1893 - C5194 * C1888 - C5193 * C1894 + C5189 * C1900 +
             C5191 * C501 - C5192 * C485 - C5191 * C502 + C5188 * C515) *
                C50984 * C50846 +
            (C5648 + C5647 + C5646) * C50984 * C2333) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C1717 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C285 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C50966 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C1717) *
              C286 +
          (((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C1717 -
           ((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                C50984 * C110 +
            (C117 * C1609 - C118 * C1604 - C117 * C1610 + C50999 * C1616) *
                C50984 * C109 +
            (C117 * C1611 - C118 * C1605 - C117 * C1612 + C50999 * C1617) *
                C50984 * C108 +
            (C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                C50984 * C107) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C1717 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C50886 * C1068 +
          ((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C1717) *
              C50886 * C1069 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C1717 -
           ((C117 * C783 - C118 * C782 - C117 * C784 + C50999 * C785) * C50984 *
                C110 +
            C794 * C109 + C562 * C108 + C563 * C107) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C1717 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C50886 * C1068 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C3031 + C3032 + C3040) * C50846) *
               C50966 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C1717) *
              C50886 * C1069 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C1717 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C2332 +
             C965 * C2331 + C556 * C2330) *
                C50846 +
            (C3040 + C3032 + C3031) * C2333) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C1717 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C285 +
          (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C50966 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C1717) *
              C286 +
          (((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C1717 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C2332 +
             C3269 * C2331 + C2730 * C2330) *
                C50846 +
            ((C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C2332 +
             C4198 * C2331 + C3267 * C2330) *
                C2333) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C1717 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C50966) *
              C50886 * C1068 +
          (((C5645 + C5644 + C5643) * C50984 * C2333 +
            (C5980 + C5981 + C5982) * C50984 * C50846) *
               C50966 -
           ((C5255 + C5256 + C5257) * C50984 * C50846 +
            (C5254 + C5253 + C5252) * C50984 * C2333) *
               C1717) *
              C50886 * C1069 +
          (((C5257 + C5256 + C5255) * C50984 * C2333 +
            (C5258 + C5259 + C5260) * C50984 * C50846) *
               C1717 -
           ((C5195 * C1891 - C5196 * C1887 - C5195 * C1892 + C5190 * C1899 +
             C5193 * C503 - C5194 * C486 - C5193 * C504 + C5189 * C516 +
             C5191 * C489 - C5192 * C479 - C5191 * C490 + C5188 * C509) *
                C50984 * C50846 +
            (C5982 + C5981 + C5980) * C50984 * C2333) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C50984 * C2333 +
            (C5252 + C5253 + C5254) * C50984 * C50846) *
               C1717 -
           ((C5643 + C5644 + C5645) * C50984 * C50846 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C50984 * C2333) *
               C50966) *
              C285 +
          (((C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939 +
             C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
             C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603) *
                C50984 * C2333 +
            (C6199 + C6200 + C6201) * C50984 * C50846) *
               C50966 -
           ((C5443 + C5444 + C5445) * C50984 * C50846 +
            (C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271 +
             C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
             C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323) *
                C50984 * C2333) *
               C1717) *
              C286 +
          (((C5191 * C308 - C5192 * C294 - C5191 * C309 + C5188 * C324 +
             C5193 * C1613 - C5194 * C1606 - C5193 * C1614 + C5189 * C1618 +
             C5195 * C2699 - C5196 * C2696 - C5195 * C2700 + C5190 * C2705) *
                C50984 * C2333 +
            (C5446 + C5447 + C5448) * C50984 * C50846) *
               C1717 -
           ((C5195 * C4592 - C5196 * C4588 - C5195 * C4593 + C5190 * C4600 +
             C5193 * C2701 - C5194 * C2697 - C5193 * C2702 + C5189 * C2706 +
             C5191 * C1611 - C5192 * C1605 - C5191 * C1612 + C5188 * C1617) *
                C50984 * C50846 +
            (C5195 * C4596 - C5196 * C4590 - C5195 * C4597 + C5190 * C4602 +
             C5193 * C2699 - C5194 * C2696 - C5193 * C2700 + C5189 * C2705 +
             C5191 * C1613 - C5192 * C1606 - C5191 * C1614 + C5188 * C1618) *
                C50984 * C2333) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C50902 * C51110 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C50902 * C50938) *
              C51153 +
          (((C11007 + C11006) * C50984 * C51151 +
            (C11005 + C11004) * C50984 * C51152 +
            (C11374 + C11375) * C50984 * C8071) *
               C50902 * C50938 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C50902 * C51110) *
              C51154 +
          ((C10808 * C51151 + (C10803 + C10802) * C50984 * C51152 +
            (C10804 + C10805) * C50984 * C8071) *
               C50902 * C51110 -
           ((C10747 * C937 - C10748 * C928 - C10747 * C938 + C51063 * C943 +
             C10745 * C316 - C10746 * C298 - C10745 * C317 + C51124 * C328) *
                C50984 * C8071 +
            (C11375 + C11374) * C50984 * C51152 + C11369 * C51151) *
               C50902 * C50938) *
              C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C50984 * C51151 +
             (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
                C51111 -
            (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C50984 * C51151) *
                C50966) *
               C51110 +
           (((C10745 * C929 - C10746 * C924 - C10745 * C930 + C51124 * C939 +
              C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
              C51063 * C1271) *
                 C50984 * C51151 +
             (C11756 + C11757) * C50984 * C51152 +
             (C11758 + C11759) * C50984 * C8071) *
                C50966 -
            (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
             (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
              C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                 C50984 * C51151) *
                C51111) *
               C50938) *
              C288 +
          ((((C11209 + C11208) * C50984 * C51151 +
             (C11207 + C11206) * C50984 * C51152 +
             (C11536 + C11537) * C50984 * C8071) *
                C50966 -
            (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
             (C10799 + C10798) * C50984 * C51151) *
                C51111) *
               C51110 +
           (((C11007 + C11006) * C50984 * C51151 +
             (C11005 + C11004) * C50984 * C51152 +
             (C11374 + C11375) * C50984 * C8071) *
                C51111 -
            ((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C50984 * C8071 +
             (C11759 + C11758) * C50984 * C51152 +
             (C11757 + C11756) * C50984 * C51151) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C50902 * C285 -
           ((C11004 + C11005) * C50984 * C8071 +
            (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C50902 * C286 +
           ((C10745 * C308 - C10746 * C294 - C10745 * C309 + C51124 * C324 +
             C10747 * C1613 - C10748 * C1606 - C10747 * C1614 +
             C51063 * C1618) *
                C50984 * C51151 +
            (C11008 + C11009) * C50984 * C51152 +
            (C11010 + C11011) * C50984 * C8071) *
               C50902 * C287) *
              C288 +
          (((C11007 + C11006) * C50984 * C51151 +
            (C11005 + C11004) * C50984 * C51152 +
            (C10745 * C300 - C10746 * C290 - C10745 * C301 + C51124 * C320 +
             C10747 * C935 - C10748 * C927 - C10747 * C936 + C51063 * C942) *
                C50984 * C8071) *
               C50902 * C286 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C50902 * C285 -
           ((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 + C51063 * C1615 +
             C10745 * C314 - C10746 * C297 - C10745 * C315 + C51124 * C327) *
                C50984 * C8071 +
            (C11011 + C11010) * C50984 * C51152 +
            (C11009 + C11008) * C50984 * C51151) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C50984 * C51151 +
           (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
              C50902 * C50886 * C113 -
          (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
           (C10799 + C10798) * C50984 * C51151) *
              C50902 * C50886 * C114 +
          (C10808 * C51151 + (C10803 + C10802) * C50984 * C51152 +
           (C10804 + C10805) * C50984 * C8071) *
              C50902 * C50886 * C115 -
          ((C10747 * C783 - C10748 * C782 - C10747 * C784 + C51063 * C785 +
            C10745 * C136 - C10746 * C124 - C10745 * C137 + C51124 * C145) *
               C50984 * C8071 +
           (C10805 + C10804) * C50984 * C51152 + C10809 * C51151) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C476 -
           ((C11206 + C11207) * C50984 * C8071 +
            (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C477 +
           ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C50984 * C51151 +
            (C11210 + C11211) * C50984 * C51152 +
            (C11212 + C11213) * C50984 * C8071) *
               C478) *
              C50886 * C288 +
          (((C11209 + C11208) * C50984 * C51151 +
            (C11207 + C11206) * C50984 * C51152 +
            (C10745 * C489 - C10746 * C479 - C10745 * C490 + C51124 * C509 +
             C10747 * C503 - C10748 * C486 - C10747 * C504 + C51063 * C516) *
                C50984 * C8071) *
               C477 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C476 -
           ((C10747 * C1891 - C10748 * C1887 - C10747 * C1892 + C51063 * C1899 +
             C10745 * C503 - C10746 * C486 - C10745 * C504 + C51124 * C516) *
                C50984 * C8071 +
            (C11213 + C11212) * C50984 * C51152 +
            (C11211 + C11210) * C50984 * C51151) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C51111 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C50966) *
              C50886 * C51153 +
          (((C11209 + C11208) * C50984 * C51151 +
            (C11207 + C11206) * C50984 * C51152 +
            (C11536 + C11537) * C50984 * C8071) *
               C50966 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C51111) *
              C50886 * C51154 +
          ((C10808 * C51151 + (C10803 + C10802) * C50984 * C51152 +
            (C10804 + C10805) * C50984 * C8071) *
               C51111 -
           ((C10747 * C507 - C10748 * C488 - C10747 * C508 + C51063 * C518 +
             C10745 * C505 - C10746 * C487 - C10745 * C506 + C51124 * C517) *
                C50984 * C8071 +
            (C11537 + C11536) * C50984 * C51152 + C11531 * C51151) *
               C50966) *
              C50886 * C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C50984 * C51151 +
           (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
              C50902 * C50886 * C113 -
          (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
           (C10799 + C10798) * C50984 * C51151) *
              C50902 * C50886 * C114 +
          (C10808 * C51151 + (C10803 + C10802) * C50984 * C51152 +
           (C10804 + C10805) * C50984 * C8071) *
              C50902 * C50886 * C115 -
          ((C10747 * C783 - C10748 * C782 - C10747 * C784 + C51063 * C785 +
            C10745 * C136 - C10746 * C124 - C10745 * C137 + C51124 * C145) *
               C50984 * C8071 +
           (C10805 + C10804) * C50984 * C51152 + C10809 * C51151) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C50902 * C285 -
           ((C11004 + C11005) * C50984 * C8071 +
            (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C50902 * C286 +
           ((C10745 * C308 - C10746 * C294 - C10745 * C309 + C51124 * C324 +
             C10747 * C1613 - C10748 * C1606 - C10747 * C1614 +
             C51063 * C1618) *
                C50984 * C51151 +
            (C11008 + C11009) * C50984 * C51152 +
            (C11010 + C11011) * C50984 * C8071) *
               C50902 * C287) *
              C288 +
          (((C11007 + C11006) * C50984 * C51151 +
            (C11005 + C11004) * C50984 * C51152 +
            (C10745 * C300 - C10746 * C290 - C10745 * C301 + C51124 * C320 +
             C10747 * C935 - C10748 * C927 - C10747 * C936 + C51063 * C942) *
                C50984 * C8071) *
               C50902 * C286 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C50902 * C285 -
           ((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 + C51063 * C1615 +
             C10745 * C314 - C10746 * C297 - C10745 * C315 + C51124 * C327) *
                C50984 * C8071 +
            (C11011 + C11010) * C50984 * C51152 +
            (C11009 + C11008) * C50984 * C51151) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C50902 * C51155 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C50902 * C51156 +
           ((C10745 * C308 - C10746 * C294 - C10745 * C309 + C51124 * C324 +
             C10747 * C1613 - C10748 * C1606 - C10747 * C1614 +
             C51063 * C1618) *
                C50984 * C51151 +
            (C11008 + C11009) * C50984 * C51152 +
            (C11010 + C11011) * C50984 * C8071) *
               C50902 * C1372) *
              C51102 +
          (((C11007 + C11006) * C50984 * C51151 +
            (C11005 + C11004) * C50984 * C51152 +
            (C11374 + C11375) * C50984 * C8071) *
               C50902 * C51156 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C50902 * C51155 -
           ((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 + C51063 * C1615 +
             C10745 * C314 - C10746 * C297 - C10745 * C315 + C51124 * C327) *
                C50984 * C8071 +
            (C11011 + C11010) * C50984 * C51152 +
            (C11009 + C11008) * C50984 * C51151) *
               C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C51111 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C50966) *
              C51155 +
          (((C10745 * C929 - C10746 * C924 - C10745 * C930 + C51124 * C939 +
             C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
             C51063 * C1271) *
                C50984 * C51151 +
            (C11756 + C11757) * C50984 * C51152 +
            (C11758 + C11759) * C50984 * C8071) *
               C50966 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C51111) *
              C51156 +
          (((C10745 * C308 - C10746 * C294 - C10745 * C309 + C51124 * C324 +
             C10747 * C1613 - C10748 * C1606 - C10747 * C1614 +
             C51063 * C1618) *
                C50984 * C51151 +
            (C11008 + C11009) * C50984 * C51152 +
            (C11010 + C11011) * C50984 * C8071) *
               C51111 -
           ((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 + C51063 * C2707 +
             C10745 * C1609 - C10746 * C1604 - C10745 * C1610 +
             C51124 * C1616) *
                C50984 * C8071 +
            (C10747 * C2701 - C10748 * C2697 - C10747 * C2702 + C51063 * C2706 +
             C10745 * C1611 - C10746 * C1605 - C10745 * C1612 +
             C51124 * C1617) *
                C50984 * C51152 +
            (C10747 * C2699 - C10748 * C2696 - C10747 * C2700 + C51063 * C2705 +
             C10745 * C1613 - C10746 * C1606 - C10745 * C1614 +
             C51124 * C1618) *
                C50984 * C51151) *
               C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C50984 * C51151 +
           (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
              C50902 * C1137 -
          (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
           (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
            C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
               C50984 * C51151) *
              C50902 * C1138 +
          ((C10745 * C308 - C10746 * C294 - C10745 * C309 + C51124 * C324 +
            C10747 * C1613 - C10748 * C1606 - C10747 * C1614 + C51063 * C1618) *
               C50984 * C51151 +
           (C11008 + C11009) * C50984 * C51152 +
           (C11010 + C11011) * C50984 * C8071) *
              C50902 * C1139 -
          ((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 + C51063 * C3245 +
            C10745 * C1148 - C10746 * C1143 - C10745 * C1149 + C51124 * C1155) *
               C50984 * C8071 +
           (C10747 * C3239 - C10748 * C3235 - C10747 * C3240 + C51063 * C3244 +
            C10745 * C1150 - C10746 * C1144 - C10745 * C1151 + C51124 * C1156) *
               C50984 * C51152 +
           (C10747 * C3237 - C10748 * C3234 - C10747 * C3238 + C51063 * C3243 +
            C10745 * C1152 - C10746 * C1145 - C10745 * C1153 + C51124 * C1157) *
               C50984 * C51151) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C50902 * C1066 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C50902 * C50938) *
              C1068 +
          (((C11007 + C11006) * C50984 * C51151 +
            (C11005 + C11004) * C50984 * C51152 +
            (C11374 + C11375) * C50984 * C8071) *
               C50902 * C50938 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C50902 * C1066) *
              C1069 +
          ((C10808 * C51151 + (C10803 + C10802) * C50984 * C51152 +
            (C10804 + C10805) * C50984 * C8071) *
               C50902 * C1066 -
           ((C10747 * C937 - C10748 * C928 - C10747 * C938 + C51063 * C943 +
             C10745 * C316 - C10746 * C298 - C10745 * C317 + C51124 * C328) *
                C50984 * C8071 +
            (C11375 + C11374) * C50984 * C51152 + C11369 * C51151) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C476 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C477 +
           ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C50984 * C51151 +
            (C11210 + C11211) * C50984 * C51152 +
            (C11212 + C11213) * C50984 * C8071) *
               C478) *
              C1066 +
          (((C10745 * C929 - C10746 * C924 - C10745 * C930 + C51124 * C939 +
             C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
             C51063 * C1271) *
                C50984 * C51151 +
            (C11756 + C11757) * C50984 * C51152 +
            (C11758 + C11759) * C50984 * C8071) *
               C477 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C476 -
           ((C10747 * C6177 - C10748 * C6176 - C10747 * C6178 + C51063 * C6179 +
             C10745 * C1262 - C10746 * C1257 - C10745 * C1263 +
             C51124 * C1269) *
                C50984 * C8071 +
            (C10747 * C4594 - C10748 * C4589 - C10747 * C4595 + C51063 * C4601 +
             C10745 * C1264 - C10746 * C1258 - C10745 * C1265 +
             C51124 * C1270) *
                C50984 * C51152 +
            (C10747 * C4598 - C10748 * C4591 - C10747 * C4599 + C51063 * C4603 +
             C10745 * C1266 - C10746 * C1259 - C10745 * C1267 +
             C51124 * C1271) *
                C50984 * C51151) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C50984 * C51151 +
             (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
                C51111 -
            (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C50984 * C51151) *
                C50966) *
               C1066 +
           (((C10745 * C929 - C10746 * C924 - C10745 * C930 + C51124 * C939 +
              C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
              C51063 * C1271) *
                 C50984 * C51151 +
             (C11756 + C11757) * C50984 * C51152 +
             (C11758 + C11759) * C50984 * C8071) *
                C50966 -
            (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
             (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
              C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                 C50984 * C51151) *
                C51111) *
               C50938) *
              C51102 +
          ((((C11209 + C11208) * C50984 * C51151 +
             (C11207 + C11206) * C50984 * C51152 +
             (C11536 + C11537) * C50984 * C8071) *
                C50966 -
            (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
             (C10799 + C10798) * C50984 * C51151) *
                C51111) *
               C1066 +
           (((C11007 + C11006) * C50984 * C51151 +
             (C11005 + C11004) * C50984 * C51152 +
             (C11374 + C11375) * C50984 * C8071) *
                C51111 -
            ((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C50984 * C8071 +
             (C11759 + C11758) * C50984 * C51152 +
             (C11757 + C11756) * C50984 * C51151) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C50902 * C1066 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C50902 * C50938) *
              C1068 +
          (((C11007 + C11006) * C50984 * C51151 +
            (C11005 + C11004) * C50984 * C51152 +
            (C11374 + C11375) * C50984 * C8071) *
               C50902 * C50938 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C50902 * C1066) *
              C1069 +
          ((C10808 * C51151 + (C10803 + C10802) * C50984 * C51152 +
            (C10804 + C10805) * C50984 * C8071) *
               C50902 * C1066 -
           ((C10747 * C937 - C10748 * C928 - C10747 * C938 + C51063 * C943 +
             C10745 * C316 - C10746 * C298 - C10745 * C317 + C51124 * C328) *
                C50984 * C8071 +
            (C11375 + C11374) * C50984 * C51152 + C11369 * C51151) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C50984 * C51151 +
           (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
              C50902 * C1137 -
          (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
           (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
            C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
               C50984 * C51151) *
              C50902 * C1138 +
          ((C10745 * C308 - C10746 * C294 - C10745 * C309 + C51124 * C324 +
            C10747 * C1613 - C10748 * C1606 - C10747 * C1614 + C51063 * C1618) *
               C50984 * C51151 +
           (C11008 + C11009) * C50984 * C51152 +
           (C11010 + C11011) * C50984 * C8071) *
              C50902 * C1139 -
          ((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 + C51063 * C3245 +
            C10745 * C1148 - C10746 * C1143 - C10745 * C1149 + C51124 * C1155) *
               C50984 * C8071 +
           (C10747 * C3239 - C10748 * C3235 - C10747 * C3240 + C51063 * C3244 +
            C10745 * C1150 - C10746 * C1144 - C10745 * C1151 + C51124 * C1156) *
               C50984 * C51152 +
           (C10747 * C3237 - C10748 * C3234 - C10747 * C3238 + C51063 * C3243 +
            C10745 * C1152 - C10746 * C1145 - C10745 * C1153 + C51124 * C1157) *
               C50984 * C51151) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C50984 * C51151 +
             (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
                C1717 -
            (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C50984 * C51151) *
                C50966) *
               C51110 +
           (((C10745 * C929 - C10746 * C924 - C10745 * C930 + C51124 * C939 +
              C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
              C51063 * C1271) *
                 C50984 * C51151 +
             (C11756 + C11757) * C50984 * C51152 +
             (C11758 + C11759) * C50984 * C8071) *
                C50966 -
            (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
             (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
              C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                 C50984 * C51151) *
                C1717) *
               C50938) *
              C51102 +
          ((((C11209 + C11208) * C50984 * C51151 +
             (C11207 + C11206) * C50984 * C51152 +
             (C11536 + C11537) * C50984 * C8071) *
                C50966 -
            (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
             (C10799 + C10798) * C50984 * C51151) *
                C1717) *
               C51110 +
           (((C11007 + C11006) * C50984 * C51151 +
             (C11005 + C11004) * C50984 * C51152 +
             (C11374 + C11375) * C50984 * C8071) *
                C1717 -
            ((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C50984 * C8071 +
             (C11759 + C11758) * C50984 * C51152 +
             (C11757 + C11756) * C50984 * C51151) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C51157 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C51158 +
           ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C50984 * C51151 +
            (C11210 + C11211) * C50984 * C51152 +
            (C11212 + C11213) * C50984 * C8071) *
               C2133) *
              C51110 +
          (((C10745 * C929 - C10746 * C924 - C10745 * C930 + C51124 * C939 +
             C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
             C51063 * C1271) *
                C50984 * C51151 +
            (C11756 + C11757) * C50984 * C51152 +
            (C11758 + C11759) * C50984 * C8071) *
               C51158 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C51157 -
           ((C10747 * C6177 - C10748 * C6176 - C10747 * C6178 + C51063 * C6179 +
             C10745 * C1262 - C10746 * C1257 - C10745 * C1263 +
             C51124 * C1269) *
                C50984 * C8071 +
            (C10747 * C4594 - C10748 * C4589 - C10747 * C4595 + C51063 * C4601 +
             C10745 * C1264 - C10746 * C1258 - C10745 * C1265 +
             C51124 * C1270) *
                C50984 * C51152 +
            (C10747 * C4598 - C10748 * C4591 - C10747 * C4599 + C51063 * C4603 +
             C10745 * C1266 - C10746 * C1259 - C10745 * C1267 +
             C51124 * C1271) *
                C50984 * C51151) *
               C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C1717 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C50966) *
              C285 +
          (((C10745 * C929 - C10746 * C924 - C10745 * C930 + C51124 * C939 +
             C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
             C51063 * C1271) *
                C50984 * C51151 +
            (C11756 + C11757) * C50984 * C51152 +
            (C11758 + C11759) * C50984 * C8071) *
               C50966 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C1717) *
              C286 +
          (((C10745 * C308 - C10746 * C294 - C10745 * C309 + C51124 * C324 +
             C10747 * C1613 - C10748 * C1606 - C10747 * C1614 +
             C51063 * C1618) *
                C50984 * C51151 +
            (C11008 + C11009) * C50984 * C51152 +
            (C11010 + C11011) * C50984 * C8071) *
               C1717 -
           ((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 + C51063 * C2707 +
             C10745 * C1609 - C10746 * C1604 - C10745 * C1610 +
             C51124 * C1616) *
                C50984 * C8071 +
            (C10747 * C2701 - C10748 * C2697 - C10747 * C2702 + C51063 * C2706 +
             C10745 * C1611 - C10746 * C1605 - C10745 * C1612 +
             C51124 * C1617) *
                C50984 * C51152 +
            (C10747 * C2699 - C10748 * C2696 - C10747 * C2700 + C51063 * C2705 +
             C10745 * C1613 - C10746 * C1606 - C10745 * C1614 +
             C51124 * C1618) *
                C50984 * C51151) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C1717 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C50966) *
              C50886 * C1068 +
          (((C11209 + C11208) * C50984 * C51151 +
            (C11207 + C11206) * C50984 * C51152 +
            (C11536 + C11537) * C50984 * C8071) *
               C50966 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C1717) *
              C50886 * C1069 +
          ((C10808 * C51151 + (C10803 + C10802) * C50984 * C51152 +
            (C10804 + C10805) * C50984 * C8071) *
               C1717 -
           ((C10747 * C507 - C10748 * C488 - C10747 * C508 + C51063 * C518 +
             C10745 * C505 - C10746 * C487 - C10745 * C506 + C51124 * C517) *
                C50984 * C8071 +
            (C11537 + C11536) * C50984 * C51152 + C11531 * C51151) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C50984 * C51151 +
           (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
              C1883 -
          (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
           (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
            C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
               C50984 * C51151) *
              C1884 +
          ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
            C10747 * C1897 - C10748 * C1890 - C10747 * C1898 + C51063 * C1902) *
               C50984 * C51151 +
           (C11210 + C11211) * C50984 * C51152 +
           (C11212 + C11213) * C50984 * C8071) *
              C1885 -
          ((C10747 * C5601 - C10748 * C5596 - C10747 * C5602 + C51063 * C5605 +
            C10745 * C1893 - C10746 * C1888 - C10745 * C1894 + C51124 * C1900) *
               C50984 * C8071 +
           (C10747 * C5599 - C10748 * C5595 - C10747 * C5600 + C51063 * C5604 +
            C10745 * C1895 - C10746 * C1889 - C10745 * C1896 + C51124 * C1901) *
               C50984 * C51152 +
           (C10747 * C5597 - C10748 * C5594 - C10747 * C5598 + C51063 * C5603 +
            C10745 * C1897 - C10746 * C1890 - C10745 * C1898 + C51124 * C1902) *
               C50984 * C51151) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C51157 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C51158 +
           ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C50984 * C51151 +
            (C11210 + C11211) * C50984 * C51152 +
            (C11212 + C11213) * C50984 * C8071) *
               C2133) *
              C50886 * C51102 +
          (((C11209 + C11208) * C50984 * C51151 +
            (C11207 + C11206) * C50984 * C51152 +
            (C11536 + C11537) * C50984 * C8071) *
               C51158 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C51157 -
           ((C10747 * C1891 - C10748 * C1887 - C10747 * C1892 + C51063 * C1899 +
             C10745 * C503 - C10746 * C486 - C10745 * C504 + C51124 * C516) *
                C50984 * C8071 +
            (C11213 + C11212) * C50984 * C51152 +
            (C11211 + C11210) * C50984 * C51151) *
               C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C1717 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C50966) *
              C50886 * C1068 +
          (((C11209 + C11208) * C50984 * C51151 +
            (C11207 + C11206) * C50984 * C51152 +
            (C11536 + C11537) * C50984 * C8071) *
               C50966 -
           (C10809 * C8071 + (C10801 + C10800) * C50984 * C51152 +
            (C10799 + C10798) * C50984 * C51151) *
               C1717) *
              C50886 * C1069 +
          ((C10808 * C51151 + (C10803 + C10802) * C50984 * C51152 +
            (C10804 + C10805) * C50984 * C8071) *
               C1717 -
           ((C10747 * C507 - C10748 * C488 - C10747 * C508 + C51063 * C518 +
             C10745 * C505 - C10746 * C487 - C10745 * C506 + C51124 * C517) *
                C50984 * C8071 +
            (C11537 + C11536) * C50984 * C51152 + C11531 * C51151) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C50984 * C51151 +
            (C10798 + C10799) * C50984 * C51152 + C10808 * C8071) *
               C1717 -
           (C11531 * C8071 + (C11208 + C11209) * C50984 * C51152 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C50984 * C51151) *
               C50966) *
              C285 +
          (((C10745 * C929 - C10746 * C924 - C10745 * C930 + C51124 * C939 +
             C10747 * C1266 - C10748 * C1259 - C10747 * C1267 +
             C51063 * C1271) *
                C50984 * C51151 +
            (C11756 + C11757) * C50984 * C51152 +
            (C11758 + C11759) * C50984 * C8071) *
               C50966 -
           (C11369 * C8071 + (C11006 + C11007) * C50984 * C51152 +
            (C10747 * C929 - C10748 * C924 - C10747 * C930 + C51063 * C939 +
             C10745 * C306 - C10746 * C293 - C10745 * C307 + C51124 * C323) *
                C50984 * C51151) *
               C1717) *
              C286 +
          (((C10745 * C308 - C10746 * C294 - C10745 * C309 + C51124 * C324 +
             C10747 * C1613 - C10748 * C1606 - C10747 * C1614 +
             C51063 * C1618) *
                C50984 * C51151 +
            (C11008 + C11009) * C50984 * C51152 +
            (C11010 + C11011) * C50984 * C8071) *
               C1717 -
           ((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 + C51063 * C2707 +
             C10745 * C1609 - C10746 * C1604 - C10745 * C1610 +
             C51124 * C1616) *
                C50984 * C8071 +
            (C10747 * C2701 - C10748 * C2697 - C10747 * C2702 + C51063 * C2706 +
             C10745 * C1611 - C10746 * C1605 - C10745 * C1612 +
             C51124 * C1617) *
                C50984 * C51152 +
            (C10747 * C2699 - C10748 * C2696 - C10747 * C2700 + C51063 * C2705 +
             C10745 * C1613 - C10746 * C1606 - C10745 * C1614 +
             C51124 * C1618) *
                C50984 * C51151) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C51110 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C50938) *
              C51153 +
          ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C50902 *
               C50938 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C51110) *
              C51154 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
               C51110 -
           ((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C50984 *
                C110 +
            C682 * C109 + C373 * C108 + C374 * C107) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C51110 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C50938) *
              C51153 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C2882 + C2883 + C2884) * C50846) *
               C50902 * C50938 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C51110) *
              C51154 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C50902 * C51110 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C2332 +
             C372 * C2331 + C367 * C2330) *
                C50846 +
            (C2884 + C2883 + C2882) * C2333) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C50984 * C107 +
             C183 * C108 + C184 * C109 + C185 * C110) *
                C51111 -
            (C562 * C110 + C563 * C109 + C564 * C108 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C50984 * C107) *
                C50966) *
               C51110 +
           (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) *
                 C50984 * C107 +
             C966 * C108 + C967 * C109 + C968 * C110) *
                C50966 -
            (C373 * C110 + C374 * C109 + C375 * C108 +
             (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                 C50984 * C107) *
                C51111) *
               C50938) *
              C288 +
          (((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
            (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C51111) *
               C51110 +
           ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C51111 -
            ((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C50984 * C110 +
             C968 * C109 + C967 * C108 + C966 * C107) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C2330 +
              C2542 * C2331 + C2543 * C2332) *
                 C2333 +
             (C2336 + C2337 + C2338) * C50846) *
                C51111 -
            ((C2733 + C2713 + C2714) * C50846 +
             (C3267 * C2332 + C3268 * C2331 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C2330) *
                 C2333) *
                C50966) *
               C51110 +
           (((C3268 * C2330 + C3267 * C2331 +
              (C117 * C3237 - C118 * C3234 - C117 * C3238 + C50999 * C3243) *
                  C2332) *
                 C2333 +
             (C3255 + C3256 + C3270) * C50846) *
                C50966 -
            ((C2548 + C2515 + C2516) * C50846 +
             (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
                C51111) *
               C50938) *
              C288 +
          ((((C2714 + C2713 + C2733) * C2333 +
             (C3031 + C3032 + C3040) * C50846) *
                C50966 -
            ((C2339 + C2340 + C2341) * C50846 +
             (C2338 + C2337 + C2336) * C2333) *
                C51111) *
               C51110 +
           (((C2516 + C2515 + C2548) * C2333 +
             (C2882 + C2883 + C2884) * C50846) *
                C51111 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C2332 +
              C3039 * C2331 + C964 * C2330) *
                 C50846 +
             (C3270 + C3256 + C3255) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C285 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C286 +
           ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C50902 * C287) *
              C288 +
          ((C375 * C107 + C374 * C108 + C373 * C109 +
            (C117 * C316 - C118 * C298 - C117 * C317 + C50999 * C328) * C50984 *
                C110) *
               C50902 * C286 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C285 -
           ((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C50984 *
                C110 +
            C378 * C109 + C377 * C108 + C376 * C107) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
               C107 +
           C183 * C108 + C184 * C109 + C185 * C110) *
              C50902 * C50886 * C113 -
          (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
              C50886 * C114 +
          (C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
              C50886 * C115 -
          ((C117 * C138 - C118 * C125 - C117 * C139 + C50999 * C146) * C50984 *
               C110 +
           C187 * C109 + C186 * C108 + C185 * C107) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C476 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C477 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
                C107 +
            C565 * C108 + C566 * C109 + C567 * C110) *
               C478) *
              C50886 * C288 +
          ((C564 * C107 + C563 * C108 + C562 * C109 +
            (C117 * C505 - C118 * C487 - C117 * C506 + C50999 * C517) * C50984 *
                C110) *
               C477 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C476 -
           ((C117 * C507 - C118 * C488 - C117 * C508 + C50999 * C518) * C50984 *
                C110 +
            C567 * C109 + C566 * C108 + C565 * C107) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C2331 +
            (C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C50902 * C50886 * C113 -
          ((C2339 + C2340 + C2341) * C50846 + (C2338 + C2337 + C2336) * C2333) *
              C50902 * C50886 * C114 +
          ((C2341 + C2340 + C2339) * C2333 + (C2342 + C2343 + C2344) * C50846) *
              C50902 * C50886 * C115 -
          (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C2332 +
            C681 * C2331 + C181 * C2330) *
               C50846 +
           (C2344 + C2343 + C2342) * C2333) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C285 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C286 +
           ((C2543 * C2330 + C2545 * C2331 +
             (C117 * C2493 - C118 * C2490 - C117 * C2494 + C50999 * C2499) *
                 C2332) *
                C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C50902 * C287) *
              C288 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C368 * C2330 + C371 * C2331 + C2547 * C2332) * C50846) *
               C50902 * C286 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C285 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C2332 +
             C2547 * C2331 + C371 * C2330) *
                C50846 +
            (C2550 + C2549 + C2521) * C2333) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C476 -
           ((C2733 + C2713 + C2714) * C50846 +
            ((C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                 C2332 +
             (C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
             (C117 * C1266 - C118 * C1259 - C117 * C1267 + C50999 * C1271) *
                 C2331 +
             (C117 * C2699 - C118 * C2696 - C117 * C2700 + C50999 * C2705) *
                 C2332) *
                C2333 +
            (C2715 + C2734 + C2735) * C50846) *
               C478) *
              C50886 * C288 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C557 * C2330 + C964 * C2331 +
             (C117 * C1609 - C118 * C1604 - C117 * C1610 + C50999 * C1616) *
                 C2332) *
                C50846) *
               C477 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C476 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C2332 +
             (C117 * C1262 - C118 * C1257 - C117 * C1263 + C50999 * C1269) *
                 C2331 +
             C560 * C2330) *
                C50846 +
            (C2735 + C2734 + C2715) * C2333) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C51111 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C50886 * C51153 +
          ((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C51111) *
              C50886 * C51154 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C51111 -
           ((C117 * C783 - C118 * C782 - C117 * C784 + C50999 * C785) * C50984 *
                C110 +
            C794 * C109 + C562 * C108 + C563 * C107) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C51111 -
           ((C2733 + C2713 + C2714) * C50846 +
            ((C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                 C2332 +
             (C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C50886 * C51153 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C3031 + C3032 + C3040) * C50846) *
               C50966 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C51111) *
              C50886 * C51154 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C51111 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C2332 +
             C965 * C2331 + C556 * C2330) *
                C50846 +
            (C3040 + C3032 + C3031) * C2333) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
               C107 +
           C183 * C108 + C184 * C109 + C185 * C110) *
              C50902 * C50886 * C113 -
          (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
              C50886 * C114 +
          (C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
              C50886 * C115 -
          ((C117 * C138 - C118 * C125 - C117 * C139 + C50999 * C146) * C50984 *
               C110 +
           C187 * C109 + C186 * C108 + C185 * C107) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C285 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C286 +
           ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C50902 * C287) *
              C288 +
          ((C375 * C107 + C374 * C108 + C373 * C109 +
            (C117 * C316 - C118 * C298 - C117 * C317 + C50999 * C328) * C50984 *
                C110) *
               C50902 * C286 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C285 -
           ((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C50984 *
                C110 +
            C378 * C109 + C377 * C108 + C376 * C107) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C2331 +
            (C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C50902 * C50886 * C113 -
          ((C2339 + C2340 + C2341) * C50846 + (C2338 + C2337 + C2336) * C2333) *
              C50902 * C50886 * C114 +
          ((C2341 + C2340 + C2339) * C2333 + (C2342 + C2343 + C2344) * C50846) *
              C50902 * C50886 * C115 -
          (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C2332 +
            C681 * C2331 + C181 * C2330) *
               C50846 +
           (C2344 + C2343 + C2342) * C2333) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C285 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C286 +
           ((C2543 * C2330 + C2545 * C2331 +
             (C117 * C2493 - C118 * C2490 - C117 * C2494 + C50999 * C2499) *
                 C2332) *
                C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C50902 * C287) *
              C288 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C368 * C2330 + C371 * C2331 + C2547 * C2332) * C50846) *
               C50902 * C286 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C285 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C2332 +
             C2547 * C2331 + C371 * C2330) *
                C50846 +
            (C2550 + C2549 + C2521) * C2333) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C51155 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C51156 +
           ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C50902 * C1372) *
              C51102 +
          ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C50902 *
               C51156 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C51155 -
           ((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C50984 *
                C110 +
            C378 * C109 + C377 * C108 + C376 * C107) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C51155 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C51156 +
           ((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C50902 * C1372) *
              C51102 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C2882 + C2883 + C2884) * C50846) *
               C50902 * C51156 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C51155 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C2332 +
             C2547 * C2331 + C371 * C2330) *
                C50846 +
            (C2550 + C2549 + C2521) * C2333) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C51111 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C51155 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C50966 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C51111) *
              C51156 +
          (((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C51111 -
           ((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                C50984 * C110 +
            (C117 * C1609 - C118 * C1604 - C117 * C1610 + C50999 * C1616) *
                C50984 * C109 +
            (C117 * C1611 - C118 * C1605 - C117 * C1612 + C50999 * C1617) *
                C50984 * C108 +
            (C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                C50984 * C107) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C51111 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C51155 +
          (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C50966 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C51111) *
              C51156 +
          (((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C51111 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C2332 +
             C3269 * C2331 + C2730 * C2330) *
                C50846 +
            ((C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C2332 +
             C4198 * C2331 + C3267 * C2330) *
                C2333) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
               C107 +
           C183 * C108 + C184 * C109 + C185 * C110) *
              C50902 * C1137 -
          (C373 * C110 + C374 * C109 + C375 * C108 +
           (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
               C107) *
              C50902 * C1138 +
          ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
               C107 +
           C376 * C108 + C377 * C109 + C378 * C110) *
              C50902 * C1139 -
          ((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
               C50984 * C110 +
           (C117 * C1148 - C118 * C1143 - C117 * C1149 + C50999 * C1155) *
               C50984 * C109 +
           (C117 * C1150 - C118 * C1144 - C117 * C1151 + C50999 * C1156) *
               C50984 * C108 +
           (C117 * C1152 - C118 * C1145 - C117 * C1153 + C50999 * C1157) *
               C50984 * C107) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C1066 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C50938) *
              C1068 +
          ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C50902 *
               C50938 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C1066) *
              C1069 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
               C1066 -
           ((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C50984 *
                C110 +
            C682 * C109 + C373 * C108 + C374 * C107) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C476 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C477 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
                C107 +
            C565 * C108 + C566 * C109 + C567 * C110) *
               C478) *
              C1066 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C477 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C476 -
           ((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                C50984 * C110 +
            (C117 * C1262 - C118 * C1257 - C117 * C1263 + C50999 * C1269) *
                C50984 * C109 +
            (C117 * C1264 - C118 * C1258 - C117 * C1265 + C50999 * C1270) *
                C50984 * C108 +
            (C117 * C1266 - C118 * C1259 - C117 * C1267 + C50999 * C1271) *
                C50984 * C107) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C1066 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C50938) *
              C1068 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C2882 + C2883 + C2884) * C50846) *
               C50902 * C50938 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C1066) *
              C1069 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C50902 * C1066 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C2332 +
             C372 * C2331 + C367 * C2330) *
                C50846 +
            (C2884 + C2883 + C2882) * C2333) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            C2542 * C2331 + C2543 * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C50902 * C1137 -
          ((C2548 + C2515 + C2516) * C50846 +
           (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
              C50902 * C1138 +
          ((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
           (C2521 + C2549 + C2550) * C50846) *
              C50902 * C1139 -
          (((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C2332 +
            C2546 * C2331 + C2544 * C2330) *
               C50846 +
           ((C117 * C3518 - C118 * C3515 - C117 * C3519 + C50999 * C3521) *
                C2332 +
            C3529 * C2331 + C2545 * C2330) *
               C2333) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C476 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
             C3696 * C2331 + C3697 * C2332) *
                C2333 +
            (C2715 + C2734 + C2735) * C50846) *
               C478) *
              C1066 +
          (((C3268 * C2330 + C3267 * C2331 +
             (C117 * C3237 - C118 * C3234 - C117 * C3238 + C50999 * C3243) *
                 C2332) *
                C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C477 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C476 -
           (((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                 C2332 +
             C2732 * C2331 + C2731 * C2330) *
                C50846 +
            ((C117 * C3679 - C118 * C3676 - C117 * C3680 + C50999 * C3682) *
                 C2332 +
             C3697 * C2331 + C3696 * C2330) *
                C2333) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C50984 * C107 +
             C183 * C108 + C184 * C109 + C185 * C110) *
                C51111 -
            (C562 * C110 + C563 * C109 + C564 * C108 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C50984 * C107) *
                C50966) *
               C1066 +
           (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) *
                 C50984 * C107 +
             C966 * C108 + C967 * C109 + C968 * C110) *
                C50966 -
            (C373 * C110 + C374 * C109 + C375 * C108 +
             (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                 C50984 * C107) *
                C51111) *
               C50938) *
              C51102 +
          (((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
            (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C51111) *
               C1066 +
           ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C51111 -
            ((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C50984 * C110 +
             C968 * C109 + C967 * C108 + C966 * C107) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C2330 +
              C2542 * C2331 + C2543 * C2332) *
                 C2333 +
             (C2336 + C2337 + C2338) * C50846) *
                C51111 -
            ((C2733 + C2713 + C2714) * C50846 +
             (C3267 * C2332 + C3268 * C2331 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C2330) *
                 C2333) *
                C50966) *
               C1066 +
           (((C3268 * C2330 + C3267 * C2331 +
              (C117 * C3237 - C118 * C3234 - C117 * C3238 + C50999 * C3243) *
                  C2332) *
                 C2333 +
             (C3255 + C3256 + C3270) * C50846) *
                C50966 -
            ((C2548 + C2515 + C2516) * C50846 +
             (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
                C51111) *
               C50938) *
              C51102 +
          ((((C2714 + C2713 + C2733) * C2333 +
             (C3031 + C3032 + C3040) * C50846) *
                C50966 -
            ((C2339 + C2340 + C2341) * C50846 +
             (C2338 + C2337 + C2336) * C2333) *
                C51111) *
               C1066 +
           (((C2516 + C2515 + C2548) * C2333 +
             (C2882 + C2883 + C2884) * C50846) *
                C51111 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C2332 +
              C3039 * C2331 + C964 * C2330) *
                 C50846 +
             (C3270 + C3256 + C3255) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C50902 * C1066 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C50902 * C50938) *
              C1068 +
          ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C50902 *
               C50938 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C50902 *
               C1066) *
              C1069 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C50902 *
               C1066 -
           ((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C50984 *
                C110 +
            C682 * C109 + C373 * C108 + C374 * C107) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
               C107 +
           C183 * C108 + C184 * C109 + C185 * C110) *
              C50902 * C1137 -
          (C373 * C110 + C374 * C109 + C375 * C108 +
           (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
               C107) *
              C50902 * C1138 +
          ((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
               C107 +
           C376 * C108 + C377 * C109 + C378 * C110) *
              C50902 * C1139 -
          ((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
               C50984 * C110 +
           (C117 * C1148 - C118 * C1143 - C117 * C1149 + C50999 * C1155) *
               C50984 * C109 +
           (C117 * C1150 - C118 * C1144 - C117 * C1151 + C50999 * C1156) *
               C50984 * C108 +
           (C117 * C1152 - C118 * C1145 - C117 * C1153 + C50999 * C1157) *
               C50984 * C107) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C50902 * C1066 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C50902 * C50938) *
              C1068 +
          (((C2516 + C2515 + C2548) * C2333 +
            (C2882 + C2883 + C2884) * C50846) *
               C50902 * C50938 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C50902 * C1066) *
              C1069 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C50902 * C1066 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C2332 +
             C372 * C2331 + C367 * C2330) *
                C50846 +
            (C2884 + C2883 + C2882) * C2333) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            C2542 * C2331 + C2543 * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C50902 * C1137 -
          ((C2548 + C2515 + C2516) * C50846 +
           (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
              C50902 * C1138 +
          ((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
           (C2521 + C2549 + C2550) * C50846) *
              C50902 * C1139 -
          (((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C2332 +
            C2546 * C2331 + C2544 * C2330) *
               C50846 +
           ((C117 * C3518 - C118 * C3515 - C117 * C3519 + C50999 * C3521) *
                C2332 +
            C3529 * C2331 + C2545 * C2330) *
               C2333) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C50984 * C107 +
             C183 * C108 + C184 * C109 + C185 * C110) *
                C1717 -
            (C562 * C110 + C563 * C109 + C564 * C108 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C50984 * C107) *
                C50966) *
               C51110 +
           (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) *
                 C50984 * C107 +
             C966 * C108 + C967 * C109 + C968 * C110) *
                C50966 -
            (C373 * C110 + C374 * C109 + C375 * C108 +
             (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) *
                 C50984 * C107) *
                C1717) *
               C50938) *
              C51102 +
          (((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
            (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C1717) *
               C51110 +
           ((C375 * C107 + C374 * C108 + C373 * C109 + C682 * C110) * C1717 -
            ((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C50984 * C110 +
             C968 * C109 + C967 * C108 + C966 * C107) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C2330 +
              C2542 * C2331 + C2543 * C2332) *
                 C2333 +
             (C2336 + C2337 + C2338) * C50846) *
                C1717 -
            ((C2733 + C2713 + C2714) * C50846 +
             (C3267 * C2332 + C3268 * C2331 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C2330) *
                 C2333) *
                C50966) *
               C51110 +
           (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
             (C3255 + C3256 + C3270) * C50846) *
                C50966 -
            ((C2548 + C2515 + C2516) * C50846 +
             (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
                C1717) *
               C50938) *
              C51102 +
          ((((C2714 + C2713 + C2733) * C2333 +
             (C3031 + C3032 + C3040) * C50846) *
                C50966 -
            ((C2339 + C2340 + C2341) * C50846 +
             (C2338 + C2337 + C2336) * C2333) *
                C1717) *
               C51110 +
           (((C2516 + C2515 + C2548) * C2333 +
             (C2882 + C2883 + C2884) * C50846) *
                C1717 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C2332 +
              C3039 * C2331 + C964 * C2330) *
                 C50846 +
             (C3270 + C3256 + C3255) * C2333) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C51157 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C51158 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
                C107 +
            C565 * C108 + C566 * C109 + C567 * C110) *
               C2133) *
              C51110 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C51158 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C51157 -
           ((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                C50984 * C110 +
            (C117 * C1262 - C118 * C1257 - C117 * C1263 + C50999 * C1269) *
                C50984 * C109 +
            (C117 * C1264 - C118 * C1258 - C117 * C1265 + C50999 * C1270) *
                C50984 * C108 +
            (C117 * C1266 - C118 * C1259 - C117 * C1267 + C50999 * C1271) *
                C50984 * C107) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C51157 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
             C3696 * C2331 + C3697 * C2332) *
                C2333 +
            (C2715 + C2734 + C2735) * C50846) *
               C2133) *
              C51110 +
          (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C51158 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C51157 -
           (((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                 C2332 +
             C2732 * C2331 + C2731 * C2330) *
                C50846 +
            ((C117 * C3679 - C118 * C3676 - C117 * C3680 + C50999 * C3682) *
                 C2332 +
             C3697 * C2331 + C3696 * C2330) *
                C2333) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C1717 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C285 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C50966 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C1717) *
              C286 +
          (((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C1717 -
           ((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                C50984 * C110 +
            (C117 * C1609 - C118 * C1604 - C117 * C1610 + C50999 * C1616) *
                C50984 * C109 +
            (C117 * C1611 - C118 * C1605 - C117 * C1612 + C50999 * C1617) *
                C50984 * C108 +
            (C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                C50984 * C107) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C1717 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C50886 * C1068 +
          ((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C1717) *
              C50886 * C1069 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C1717 -
           ((C117 * C783 - C118 * C782 - C117 * C784 + C50999 * C785) * C50984 *
                C110 +
            C794 * C109 + C562 * C108 + C563 * C107) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
               C107 +
           C183 * C108 + C184 * C109 + C185 * C110) *
              C1883 -
          (C562 * C110 + C563 * C109 + C564 * C108 +
           (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
               C107) *
              C1884 +
          ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
               C107 +
           C565 * C108 + C566 * C109 + C567 * C110) *
              C1885 -
          ((C117 * C1891 - C118 * C1887 - C117 * C1892 + C50999 * C1899) *
               C50984 * C110 +
           (C117 * C1893 - C118 * C1888 - C117 * C1894 + C50999 * C1900) *
               C50984 * C109 +
           (C117 * C1895 - C118 * C1889 - C117 * C1896 + C50999 * C1901) *
               C50984 * C108 +
           (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
               C50984 * C107) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C1717 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C50886 * C1068 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C3031 + C3032 + C3040) * C50846) *
               C50966 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C1717) *
              C50886 * C1069 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C1717 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C2332 +
             C965 * C2331 + C556 * C2330) *
                C50846 +
            (C3040 + C3032 + C3031) * C2333) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C1717 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C285 +
          (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C50966 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C1717) *
              C286 +
          (((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C1717 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C2332 +
             C3269 * C2331 + C2730 * C2330) *
                C50846 +
            ((C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C2332 +
             C4198 * C2331 + C3267 * C2330) *
                C2333) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
            C2542 * C2331 + C2543 * C2332) *
               C2333 +
           (C2336 + C2337 + C2338) * C50846) *
              C1883 -
          ((C2733 + C2713 + C2714) * C50846 +
           (C3267 * C2332 + C3268 * C2331 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C2330) *
               C2333) *
              C1884 +
          (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
            C3696 * C2331 + C3697 * C2332) *
               C2333 +
           (C2715 + C2734 + C2735) * C50846) *
              C1885 -
          (((C117 * C4592 - C118 * C4588 - C117 * C4593 + C50999 * C4600) *
                C2332 +
            (C117 * C4594 - C118 * C4589 - C117 * C4595 + C50999 * C4601) *
                C2331 +
            (C117 * C1895 - C118 * C1889 - C117 * C1896 + C50999 * C1901) *
                C2330) *
               C50846 +
           ((C117 * C4596 - C118 * C4590 - C117 * C4597 + C50999 * C4602) *
                C2332 +
            (C117 * C4598 - C118 * C4591 - C117 * C4599 + C50999 * C4603) *
                C2331 +
            (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
                C2330) *
               C2333) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C51157 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C51158 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C50984 *
                C107 +
            C565 * C108 + C566 * C109 + C567 * C110) *
               C2133) *
              C50886 * C51102 +
          ((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C51158 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C51157 -
           ((C117 * C507 - C118 * C488 - C117 * C508 + C50999 * C518) * C50984 *
                C110 +
            C567 * C109 + C566 * C108 + C565 * C107) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C51157 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C2330 +
             C3696 * C2331 + C3697 * C2332) *
                C2333 +
            (C2715 + C2734 + C2735) * C50846) *
               C2133) *
              C50886 * C51102 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C3031 + C3032 + C3040) * C50846) *
               C51158 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C51157 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C2332 +
             (C117 * C1262 - C118 * C1257 - C117 * C1263 + C50999 * C1269) *
                 C2331 +
             C560 * C2330) *
                C50846 +
            (C2735 + C2734 + C2715) * C2333) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C1717 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C50886 * C1068 +
          ((C564 * C107 + C563 * C108 + C562 * C109 + C794 * C110) * C50966 -
           (C186 * C110 + C185 * C109 + C184 * C108 + C183 * C107) * C1717) *
              C50886 * C1069 +
          ((C184 * C107 + C185 * C108 + C186 * C109 + C187 * C110) * C1717 -
           ((C117 * C783 - C118 * C782 - C117 * C784 + C50999 * C785) * C50984 *
                C110 +
            C794 * C109 + C562 * C108 + C563 * C107) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C50984 *
                C107 +
            C183 * C108 + C184 * C109 + C185 * C110) *
               C1717 -
           (C562 * C110 + C563 * C109 + C564 * C108 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C50984 *
                C107) *
               C50966) *
              C285 +
          (((C117 * C929 - C118 * C924 - C117 * C930 + C50999 * C939) * C50984 *
                C107 +
            C966 * C108 + C967 * C109 + C968 * C110) *
               C50966 -
           (C373 * C110 + C374 * C109 + C375 * C108 +
            (C117 * C306 - C118 * C293 - C117 * C307 + C50999 * C323) * C50984 *
                C107) *
               C1717) *
              C286 +
          (((C117 * C308 - C118 * C294 - C117 * C309 + C50999 * C324) * C50984 *
                C107 +
            C376 * C108 + C377 * C109 + C378 * C110) *
               C1717 -
           ((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                C50984 * C110 +
            (C117 * C1609 - C118 * C1604 - C117 * C1610 + C50999 * C1616) *
                C50984 * C109 +
            (C117 * C1611 - C118 * C1605 - C117 * C1612 + C50999 * C1617) *
                C50984 * C108 +
            (C117 * C1613 - C118 * C1606 - C117 * C1614 + C50999 * C1618) *
                C50984 * C107) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C1717 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C50886 * C1068 +
          (((C2714 + C2713 + C2733) * C2333 +
            (C3031 + C3032 + C3040) * C50846) *
               C50966 -
           ((C2339 + C2340 + C2341) * C50846 +
            (C2338 + C2337 + C2336) * C2333) *
               C1717) *
              C50886 * C1069 +
          (((C2341 + C2340 + C2339) * C2333 +
            (C2342 + C2343 + C2344) * C50846) *
               C1717 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C2332 +
             C965 * C2331 + C556 * C2330) *
                C50846 +
            (C3040 + C3032 + C3031) * C2333) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C2330 +
             C2542 * C2331 + C2543 * C2332) *
                C2333 +
            (C2336 + C2337 + C2338) * C50846) *
               C1717 -
           ((C2733 + C2713 + C2714) * C50846 +
            (C3267 * C2332 + C3268 * C2331 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C2330) *
                C2333) *
               C50966) *
              C285 +
          (((C3268 * C2330 + C3267 * C2331 + C4198 * C2332) * C2333 +
            (C3255 + C3256 + C3270) * C50846) *
               C50966 -
           ((C2548 + C2515 + C2516) * C50846 +
            (C2545 * C2332 + C2543 * C2331 + C2542 * C2330) * C2333) *
               C1717) *
              C286 +
          (((C2543 * C2330 + C2545 * C2331 + C3529 * C2332) * C2333 +
            (C2521 + C2549 + C2550) * C50846) *
               C1717 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C2332 +
             C3269 * C2331 + C2730 * C2330) *
                C50846 +
            ((C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C2332 +
             C4198 * C2331 + C3267 * C2330) *
                C2333) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C50902 * C51110 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C50902 * C50938) *
              C51153 +
          (((C24634 + C24633 + C24632) * C51095 +
            (C24936 + C24937 + C24938) * C50846) *
               C50902 * C50938 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C50902 * C51110) *
              C51154 +
          (((C24482 + C24481 + C24480) * C51095 +
            (C24483 + C24484 + C24485) * C50846) *
               C50902 * C51110 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C24473 +
             C372 * C51160 + C367 * C51159) *
                C50846 +
            (C24938 + C24937 + C24936) * C51095) *
               C50902 * C50938) *
              C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C51159 +
              C2542 * C51160 + C2543 * C24473) *
                 C51095 +
             (C24477 + C24478 + C24479) * C50846) *
                C51111 -
            ((C24784 + C24785 + C24786) * C50846 +
             (C3267 * C24473 + C3268 * C51160 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C51159) *
                 C51095) *
                C50966) *
               C51110 +
           (((C3268 * C51159 + C3267 * C51160 + C4198 * C24473) * C51095 +
             (C25282 + C25283 + C25284) * C50846) *
                C50966 -
            ((C24632 + C24633 + C24634) * C50846 +
             (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
                C51111) *
               C50938) *
              C288 +
          ((((C24786 + C24785 + C24784) * C51095 +
             (C25085 + C25086 + C25087) * C50846) *
                C50966 -
            ((C24480 + C24481 + C24482) * C50846 +
             (C24479 + C24478 + C24477) * C51095) *
                C51111) *
               C51110 +
           (((C24634 + C24633 + C24632) * C51095 +
             (C24936 + C24937 + C24938) * C50846) *
                C51111 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C24473 +
              C3039 * C51160 + C964 * C51159) *
                 C50846 +
             (C25284 + C25283 + C25282) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C50902 * C285 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C50902 * C286 +
           ((C2543 * C51159 + C2545 * C51160 + C3529 * C24473) * C51095 +
            (C24635 + C24636 + C24637) * C50846) *
               C50902 * C287) *
              C288 +
          (((C24634 + C24633 + C24632) * C51095 +
            (C368 * C51159 + C371 * C51160 + C2547 * C24473) * C50846) *
               C50902 * C286 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C50902 * C285 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C24473 +
             C2547 * C51160 + C371 * C51159) *
                C50846 +
            (C24637 + C24636 + C24635) * C51095) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51159 +
            C2542 * C51160 + C2543 * C24473) *
               C51095 +
           (C24477 + C24478 + C24479) * C50846) *
              C50902 * C50886 * C113 -
          ((C24480 + C24481 + C24482) * C50846 +
           (C24479 + C24478 + C24477) * C51095) *
              C50902 * C50886 * C114 +
          ((C24482 + C24481 + C24480) * C51095 +
           (C24483 + C24484 + C24485) * C50846) *
              C50902 * C50886 * C115 -
          (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C24473 +
            C681 * C51160 + C181 * C51159) *
               C50846 +
           (C24485 + C24484 + C24483) * C51095) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C476 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C51159 +
             C3696 * C51160 + C3697 * C24473) *
                C51095 +
            (C24787 + C24788 + C24789) * C50846) *
               C478) *
              C50886 * C288 +
          (((C24786 + C24785 + C24784) * C51095 +
            (C557 * C51159 + C964 * C51160 + C3039 * C24473) * C50846) *
               C477 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C476 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C24473 +
             C8396 * C51160 + C560 * C51159) *
                C50846 +
            (C24789 + C24788 + C24787) * C51095) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C51111 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C50966) *
              C50886 * C51153 +
          (((C24786 + C24785 + C24784) * C51095 +
            (C25085 + C25086 + C25087) * C50846) *
               C50966 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C51111) *
              C50886 * C51154 +
          (((C24482 + C24481 + C24480) * C51095 +
            (C24483 + C24484 + C24485) * C50846) *
               C51111 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C24473 +
             C965 * C51160 + C556 * C51159) *
                C50846 +
            (C25087 + C25086 + C25085) * C51095) *
               C50966) *
              C50886 * C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51159 +
            C2542 * C51160 + C2543 * C24473) *
               C51095 +
           (C24477 + C24478 + C24479) * C50846) *
              C50902 * C50886 * C113 -
          ((C24480 + C24481 + C24482) * C50846 +
           (C24479 + C24478 + C24477) * C51095) *
              C50902 * C50886 * C114 +
          ((C24482 + C24481 + C24480) * C51095 +
           (C24483 + C24484 + C24485) * C50846) *
              C50902 * C50886 * C115 -
          (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) * C24473 +
            C681 * C51160 + C181 * C51159) *
               C50846 +
           (C24485 + C24484 + C24483) * C51095) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C50902 * C285 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C50902 * C286 +
           ((C2543 * C51159 + C2545 * C51160 + C3529 * C24473) * C51095 +
            (C24635 + C24636 + C24637) * C50846) *
               C50902 * C287) *
              C288 +
          (((C24634 + C24633 + C24632) * C51095 +
            (C368 * C51159 + C371 * C51160 + C2547 * C24473) * C50846) *
               C50902 * C286 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C50902 * C285 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C24473 +
             C2547 * C51160 + C371 * C51159) *
                C50846 +
            (C24637 + C24636 + C24635) * C51095) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C50902 * C51155 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C50902 * C51156 +
           ((C2543 * C51159 + C2545 * C51160 + C3529 * C24473) * C51095 +
            (C24635 + C24636 + C24637) * C50846) *
               C50902 * C1372) *
              C51102 +
          (((C24634 + C24633 + C24632) * C51095 +
            (C24936 + C24937 + C24938) * C50846) *
               C50902 * C51156 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C50902 * C51155 -
           (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                 C24473 +
             C2547 * C51160 + C371 * C51159) *
                C50846 +
            (C24637 + C24636 + C24635) * C51095) *
               C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C51111 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C50966) *
              C51155 +
          (((C3268 * C51159 + C3267 * C51160 + C4198 * C24473) * C51095 +
            (C25282 + C25283 + C25284) * C50846) *
               C50966 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C51111) *
              C51156 +
          (((C2543 * C51159 + C2545 * C51160 + C3529 * C24473) * C51095 +
            (C24635 + C24636 + C24637) * C50846) *
               C51111 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C24473 +
             C3269 * C51160 + C2730 * C51159) *
                C50846 +
            (C21019 * C24473 + C4198 * C51160 + C3267 * C51159) * C51095) *
               C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51159 +
            C2542 * C51160 + C2543 * C24473) *
               C51095 +
           (C24477 + C24478 + C24479) * C50846) *
              C50902 * C1137 -
          ((C24632 + C24633 + C24634) * C50846 +
           (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
              C50902 * C1138 +
          ((C2543 * C51159 + C2545 * C51160 + C3529 * C24473) * C51095 +
           (C24635 + C24636 + C24637) * C50846) *
              C50902 * C1139 -
          (((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C24473 +
            C2546 * C51160 + C2544 * C51159) *
               C50846 +
           (C20573 * C24473 + C3529 * C51160 + C2545 * C51159) * C51095) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C50902 * C1066 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C50902 * C50938) *
              C1068 +
          (((C24634 + C24633 + C24632) * C51095 +
            (C24936 + C24937 + C24938) * C50846) *
               C50902 * C50938 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C50902 * C1066) *
              C1069 +
          (((C24482 + C24481 + C24480) * C51095 +
            (C24483 + C24484 + C24485) * C50846) *
               C50902 * C1066 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C24473 +
             C372 * C51160 + C367 * C51159) *
                C50846 +
            (C24938 + C24937 + C24936) * C51095) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C476 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C51159 +
             C3696 * C51160 + C3697 * C24473) *
                C51095 +
            (C24787 + C24788 + C24789) * C50846) *
               C478) *
              C1066 +
          (((C3268 * C51159 + C3267 * C51160 + C4198 * C24473) * C51095 +
            (C25282 + C25283 + C25284) * C50846) *
               C477 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C476 -
           (((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                 C24473 +
             C2732 * C51160 + C2731 * C51159) *
                C50846 +
            (C20682 * C24473 + C3697 * C51160 + C3696 * C51159) * C51095) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C51159 +
              C2542 * C51160 + C2543 * C24473) *
                 C51095 +
             (C24477 + C24478 + C24479) * C50846) *
                C51111 -
            ((C24784 + C24785 + C24786) * C50846 +
             (C3267 * C24473 + C3268 * C51160 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C51159) *
                 C51095) *
                C50966) *
               C1066 +
           (((C3268 * C51159 + C3267 * C51160 + C4198 * C24473) * C51095 +
             (C25282 + C25283 + C25284) * C50846) *
                C50966 -
            ((C24632 + C24633 + C24634) * C50846 +
             (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
                C51111) *
               C50938) *
              C51102 +
          ((((C24786 + C24785 + C24784) * C51095 +
             (C25085 + C25086 + C25087) * C50846) *
                C50966 -
            ((C24480 + C24481 + C24482) * C50846 +
             (C24479 + C24478 + C24477) * C51095) *
                C51111) *
               C1066 +
           (((C24634 + C24633 + C24632) * C51095 +
             (C24936 + C24937 + C24938) * C50846) *
                C51111 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C24473 +
              C3039 * C51160 + C964 * C51159) *
                 C50846 +
             (C25284 + C25283 + C25282) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C50902 * C1066 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C50902 * C50938) *
              C1068 +
          (((C24634 + C24633 + C24632) * C51095 +
            (C24936 + C24937 + C24938) * C50846) *
               C50902 * C50938 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C50902 * C1066) *
              C1069 +
          (((C24482 + C24481 + C24480) * C51095 +
            (C24483 + C24484 + C24485) * C50846) *
               C50902 * C1066 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C24473 +
             C372 * C51160 + C367 * C51159) *
                C50846 +
            (C24938 + C24937 + C24936) * C51095) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51159 +
            C2542 * C51160 + C2543 * C24473) *
               C51095 +
           (C24477 + C24478 + C24479) * C50846) *
              C50902 * C1137 -
          ((C24632 + C24633 + C24634) * C50846 +
           (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
              C50902 * C1138 +
          ((C2543 * C51159 + C2545 * C51160 + C3529 * C24473) * C51095 +
           (C24635 + C24636 + C24637) * C50846) *
              C50902 * C1139 -
          (((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C24473 +
            C2546 * C51160 + C2544 * C51159) *
               C50846 +
           (C20573 * C24473 + C3529 * C51160 + C2545 * C51159) * C51095) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C51159 +
              C2542 * C51160 + C2543 * C24473) *
                 C51095 +
             (C24477 + C24478 + C24479) * C50846) *
                C1717 -
            ((C24784 + C24785 + C24786) * C50846 +
             (C3267 * C24473 + C3268 * C51160 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C51159) *
                 C51095) *
                C50966) *
               C51110 +
           (((C3268 * C51159 + C3267 * C51160 + C4198 * C24473) * C51095 +
             (C25282 + C25283 + C25284) * C50846) *
                C50966 -
            ((C24632 + C24633 + C24634) * C50846 +
             (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
                C1717) *
               C50938) *
              C51102 +
          ((((C24786 + C24785 + C24784) * C51095 +
             (C25085 + C25086 + C25087) * C50846) *
                C50966 -
            ((C24480 + C24481 + C24482) * C50846 +
             (C24479 + C24478 + C24477) * C51095) *
                C1717) *
               C51110 +
           (((C24634 + C24633 + C24632) * C51095 +
             (C24936 + C24937 + C24938) * C50846) *
                C1717 -
            (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                  C24473 +
              C3039 * C51160 + C964 * C51159) *
                 C50846 +
             (C25284 + C25283 + C25282) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C51157 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C51159 +
             C3696 * C51160 + C3697 * C24473) *
                C51095 +
            (C24787 + C24788 + C24789) * C50846) *
               C2133) *
              C51110 +
          (((C3268 * C51159 + C3267 * C51160 + C4198 * C24473) * C51095 +
            (C25282 + C25283 + C25284) * C50846) *
               C51158 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C51157 -
           (((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                 C24473 +
             C2732 * C51160 + C2731 * C51159) *
                C50846 +
            (C20682 * C24473 + C3697 * C51160 + C3696 * C51159) * C51095) *
               C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C1717 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C50966) *
              C285 +
          (((C3268 * C51159 + C3267 * C51160 + C4198 * C24473) * C51095 +
            (C25282 + C25283 + C25284) * C50846) *
               C50966 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C1717) *
              C286 +
          (((C2543 * C51159 + C2545 * C51160 + C3529 * C24473) * C51095 +
            (C24635 + C24636 + C24637) * C50846) *
               C1717 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C24473 +
             C3269 * C51160 + C2730 * C51159) *
                C50846 +
            (C21019 * C24473 + C4198 * C51160 + C3267 * C51159) * C51095) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C1717 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C50966) *
              C50886 * C1068 +
          (((C24786 + C24785 + C24784) * C51095 +
            (C25085 + C25086 + C25087) * C50846) *
               C50966 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C1717) *
              C50886 * C1069 +
          (((C24482 + C24481 + C24480) * C51095 +
            (C24483 + C24484 + C24485) * C50846) *
               C1717 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C24473 +
             C965 * C51160 + C556 * C51159) *
                C50846 +
            (C25087 + C25086 + C25085) * C51095) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C51159 +
            C2542 * C51160 + C2543 * C24473) *
               C51095 +
           (C24477 + C24478 + C24479) * C50846) *
              C1883 -
          ((C24784 + C24785 + C24786) * C50846 +
           (C3267 * C24473 + C3268 * C51160 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C51159) *
               C51095) *
              C1884 +
          (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C51159 +
            C3696 * C51160 + C3697 * C24473) *
               C51095 +
           (C24787 + C24788 + C24789) * C50846) *
              C1885 -
          (((C117 * C4592 - C118 * C4588 - C117 * C4593 + C50999 * C4600) *
                C24473 +
            (C117 * C4594 - C118 * C4589 - C117 * C4595 + C50999 * C4601) *
                C51160 +
            (C117 * C1895 - C118 * C1889 - C117 * C1896 + C50999 * C1901) *
                C51159) *
               C50846 +
           ((C117 * C4596 - C118 * C4590 - C117 * C4597 + C50999 * C4602) *
                C24473 +
            (C117 * C4598 - C118 * C4591 - C117 * C4599 + C50999 * C4603) *
                C51160 +
            (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
                C51159) *
               C51095) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C51157 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C51159 +
             C3696 * C51160 + C3697 * C24473) *
                C51095 +
            (C24787 + C24788 + C24789) * C50846) *
               C2133) *
              C50886 * C51102 +
          (((C24786 + C24785 + C24784) * C51095 +
            (C25085 + C25086 + C25087) * C50846) *
               C51158 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C51157 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C24473 +
             C8396 * C51160 + C560 * C51159) *
                C50846 +
            (C24789 + C24788 + C24787) * C51095) *
               C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C1717 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C50966) *
              C50886 * C1068 +
          (((C24786 + C24785 + C24784) * C51095 +
            (C25085 + C25086 + C25087) * C50846) *
               C50966 -
           ((C24480 + C24481 + C24482) * C50846 +
            (C24479 + C24478 + C24477) * C51095) *
               C1717) *
              C50886 * C1069 +
          (((C24482 + C24481 + C24480) * C51095 +
            (C24483 + C24484 + C24485) * C50846) *
               C1717 -
           (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                 C24473 +
             C965 * C51160 + C556 * C51159) *
                C50846 +
            (C25087 + C25086 + C25085) * C51095) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C51159 +
             C2542 * C51160 + C2543 * C24473) *
                C51095 +
            (C24477 + C24478 + C24479) * C50846) *
               C1717 -
           ((C24784 + C24785 + C24786) * C50846 +
            (C3267 * C24473 + C3268 * C51160 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C51159) *
                C51095) *
               C50966) *
              C285 +
          (((C3268 * C51159 + C3267 * C51160 + C4198 * C24473) * C51095 +
            (C25282 + C25283 + C25284) * C50846) *
               C50966 -
           ((C24632 + C24633 + C24634) * C50846 +
            (C2545 * C24473 + C2543 * C51160 + C2542 * C51159) * C51095) *
               C1717) *
              C286 +
          (((C2543 * C51159 + C2545 * C51160 + C3529 * C24473) * C51095 +
            (C24635 + C24636 + C24637) * C50846) *
               C1717 -
           (((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C24473 +
             C3269 * C51160 + C2730 * C51159) *
                C50846 +
            (C21019 * C24473 + C4198 * C51160 + C3267 * C51159) * C51095) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C50902 * C51110 -
           ((C15104 + C15103) * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C50902 * C50938) *
              C51153 +
          ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
               C50841 * C50902 * C50938 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C50902 * C51110) *
              C51154 +
          ((C10806 * C51159 + C14284 * C51160 + (C11010 + C11011) * C24473) *
               C50841 * C50902 * C51110 -
           ((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 + C51063 * C3245 +
             C10745 * C1148 - C10746 * C1143 - C10745 * C1149 +
             C51124 * C1155) *
                C24473 +
            (C11011 + C11010) * C51160 + C11360 * C51159) *
               C50841 * C50902 * C50938) *
              C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51159 +
             (C13876 + C13877) * C51160 + C30773 * C24473) *
                C50841 * C51111 -
            ((C15972 + C15971) * C24473 + (C14763 + C14764) * C51160 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51159) *
                C50841 * C50966) *
               C51110 +
           (((C14764 + C14763) * C51159 + (C15971 + C15972) * C51160 +
             (C10745 * C3237 - C10746 * C3234 - C10745 * C3238 +
              C51124 * C3243 + C10747 * C3679 - C10748 * C3676 -
              C10747 * C3680 + C51063 * C3682) *
                 C24473) *
                C50841 * C50966 -
            ((C15104 + C15103) * C24473 + (C13878 + C13879) * C51160 +
             (C13877 + C13876) * C51159) *
                C50841 * C51111) *
               C50938) *
              C288 +
          ((((C11209 + C11208) * C51159 + C14746 * C51160 +
             (C14765 + C14766) * C24473) *
                C50841 * C50966 -
            (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
                C50841 * C51111) *
               C51110 +
           ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
                C50841 * C51111 -
            ((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C24473 +
             (C14766 + C14765) * C51160 + C14737 * C51159) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C50902 * C285 -
           ((C15104 + C15103) * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C50902 * C286 +
           (C30773 * C51159 + (C15103 + C15104) * C51160 +
            (C10745 * C2493 - C10746 * C2490 - C10745 * C2494 + C51124 * C2499 +
             C10747 * C4187 - C10748 * C4184 - C10747 * C4188 +
             C51063 * C4190) *
                C24473) *
               C50841 * C50902 * C287) *
              C288 +
          ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
               C50841 * C50902 * C286 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C50902 * C285 -
           ((C10747 * C4185 - C10748 * C4183 - C10747 * C4186 + C51063 * C4189 +
             C10745 * C2495 - C10746 * C2491 - C10745 * C2496 +
             C51124 * C2500) *
                C24473 +
            (C13881 + C13880) * C51160 + C13845 * C51159) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C51159 +
           (C13876 + C13877) * C51160 + (C13879 + C13878) * C24473) *
              C50841 * C50902 * C50886 * C113 -
          (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
              C50841 * C50902 * C50886 * C114 +
          (C10806 * C51159 + C14284 * C51160 + (C11010 + C11011) * C24473) *
              C50841 * C50902 * C50886 * C115 -
          ((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 + C51063 * C1615 +
            C10745 * C314 - C10746 * C297 - C10745 * C315 + C51124 * C327) *
               C24473 +
           (C11375 + C11374) * C51160 + C10807 * C51159) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C476 -
           ((C15972 + C15971) * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C477 +
           ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C51159 +
            (C15311 + C15312) * C51160 +
            (C10745 * C2699 - C10746 * C2696 - C10745 * C2700 + C51124 * C2705 +
             C10747 * C4596 - C10748 * C4590 - C10747 * C4597 +
             C51063 * C4602) *
                C24473) *
               C50841 * C478) *
              C50886 * C288 +
          (((C11209 + C11208) * C51159 + C14746 * C51160 +
            (C14765 + C14766) * C24473) *
               C50841 * C477 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C476 -
           ((C10747 * C4592 - C10748 * C4588 - C10747 * C4593 + C51063 * C4600 +
             C10745 * C2701 - C10746 * C2697 - C10745 * C2702 +
             C51124 * C2706) *
                C24473 +
            (C14089 + C14088) * C51160 + (C11211 + C11210) * C51159) *
               C50841 * C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C51111 -
           ((C15972 + C15971) * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C50966) *
              C50886 * C51153 +
          (((C11209 + C11208) * C51159 + C14746 * C51160 +
            (C14765 + C14766) * C24473) *
               C50841 * C50966 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C51111) *
              C50886 * C51154 +
          ((C10806 * C51159 + C14284 * C51160 + (C11010 + C11011) * C24473) *
               C50841 * C51111 -
           ((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 + C51063 * C2707 +
             C10745 * C1609 - C10746 * C1604 - C10745 * C1610 +
             C51124 * C1616) *
                C24473 +
            (C11759 + C11758) * C51160 + C11522 * C51159) *
               C50841 * C50966) *
              C50886 * C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C51159 +
           (C13876 + C13877) * C51160 + (C13879 + C13878) * C24473) *
              C50841 * C50902 * C50886 * C113 -
          (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
              C50841 * C50902 * C50886 * C114 +
          (C10806 * C51159 + C14284 * C51160 + (C11010 + C11011) * C24473) *
              C50841 * C50902 * C50886 * C115 -
          ((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 + C51063 * C1615 +
            C10745 * C314 - C10746 * C297 - C10745 * C315 + C51124 * C327) *
               C24473 +
           (C11375 + C11374) * C51160 + C10807 * C51159) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C50902 * C285 -
           ((C15104 + C15103) * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C50902 * C286 +
           (C30773 * C51159 + (C15103 + C15104) * C51160 +
            (C10745 * C2493 - C10746 * C2490 - C10745 * C2494 + C51124 * C2499 +
             C10747 * C4187 - C10748 * C4184 - C10747 * C4188 +
             C51063 * C4190) *
                C24473) *
               C50841 * C50902 * C287) *
              C288 +
          ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
               C50841 * C50902 * C286 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C50902 * C285 -
           ((C10747 * C4185 - C10748 * C4183 - C10747 * C4186 + C51063 * C4189 +
             C10745 * C2495 - C10746 * C2491 - C10745 * C2496 +
             C51124 * C2500) *
                C24473 +
            (C13881 + C13880) * C51160 + C13845 * C51159) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C50902 * C51155 -
           (C31650 * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C50902 * C51156 +
           (C30773 * C51159 + (C15103 + C15104) * C51160 +
            (C31663 + C31664) * C24473) *
               C50841 * C50902 * C1372) *
              C51102 +
          ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
               C50841 * C50902 * C51156 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C50902 * C51155 -
           ((C10747 * C4185 - C10748 * C4183 - C10747 * C4186 + C51063 * C4189 +
             C10745 * C2495 - C10746 * C2491 - C10745 * C2496 +
             C51124 * C2500) *
                C24473 +
            (C13881 + C13880) * C51160 + C13845 * C51159) *
               C50841 * C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C51111 -
           (C32311 * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C50966) *
              C51155 +
          (((C14764 + C14763) * C51159 + (C15971 + C15972) * C51160 +
            (C32324 + C32325) * C24473) *
               C50841 * C50966 -
           (C31650 * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C51111) *
              C51156 +
          ((C30773 * C51159 + (C15103 + C15104) * C51160 +
            (C31663 + C31664) * C24473) *
               C50841 * C51111 -
           ((C10747 * C20672 - C10748 * C20671 - C10747 * C20673 +
             C51063 * C20674 + C10745 * C4187 - C10746 * C4184 -
             C10745 * C4188 + C51124 * C4190) *
                C24473 +
            (C32325 + C32324) * C51160 + C32311 * C51159) *
               C50841 * C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C51159 +
           (C13876 + C13877) * C51160 + C30773 * C24473) *
              C50841 * C50902 * C1137 -
          (C31650 * C24473 + (C13878 + C13879) * C51160 +
           (C13877 + C13876) * C51159) *
              C50841 * C50902 * C1138 +
          (C30773 * C51159 + (C15103 + C15104) * C51160 +
           (C31663 + C31664) * C24473) *
              C50841 * C50902 * C1139 -
          ((C10747 * C21009 - C10748 * C21008 - C10747 * C21010 +
            C51063 * C21011 + C10745 * C3518 - C10746 * C3515 - C10745 * C3519 +
            C51124 * C3521) *
               C24473 +
           (C31664 + C31663) * C51160 + C31650 * C51159) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C50902 * C1066 -
           ((C15104 + C15103) * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C50902 * C50938) *
              C1068 +
          ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
               C50841 * C50902 * C50938 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C10806 * C51159 + C14284 * C51160 + (C11010 + C11011) * C24473) *
               C50841 * C50902 * C1066 -
           ((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 + C51063 * C3245 +
             C10745 * C1148 - C10746 * C1143 - C10745 * C1149 +
             C51124 * C1155) *
                C24473 +
            (C11011 + C11010) * C51160 + C11360 * C51159) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C476 -
           ((C15972 + C15971) * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C477 +
           ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C51159 +
            (C15311 + C15312) * C51160 + (C31823 + C31824) * C24473) *
               C50841 * C478) *
              C1066 +
          (((C14764 + C14763) * C51159 + (C15971 + C15972) * C51160 +
            (C10745 * C3237 - C10746 * C3234 - C10745 * C3238 + C51124 * C3243 +
             C10747 * C3679 - C10748 * C3676 - C10747 * C3680 +
             C51063 * C3682) *
                C24473) *
               C50841 * C477 -
           (C31650 * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C476 -
           ((C10747 * C21282 - C10748 * C21281 - C10747 * C21283 +
             C51063 * C21284 + C10745 * C3679 - C10746 * C3676 -
             C10745 * C3680 + C51124 * C3682) *
                C24473 +
            (C31824 + C31823) * C51160 + (C15312 + C15311) * C51159) *
               C50841 * C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51159 +
             (C13876 + C13877) * C51160 + C30773 * C24473) *
                C50841 * C51111 -
            ((C15972 + C15971) * C24473 + (C14763 + C14764) * C51160 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51159) *
                C50841 * C50966) *
               C1066 +
           (((C14764 + C14763) * C51159 + (C15971 + C15972) * C51160 +
             (C10745 * C3237 - C10746 * C3234 - C10745 * C3238 +
              C51124 * C3243 + C10747 * C3679 - C10748 * C3676 -
              C10747 * C3680 + C51063 * C3682) *
                 C24473) *
                C50841 * C50966 -
            (C31650 * C24473 + (C13878 + C13879) * C51160 +
             (C13877 + C13876) * C51159) *
                C50841 * C51111) *
               C50938) *
              C51102 +
          ((((C11209 + C11208) * C51159 + C14746 * C51160 +
             (C14765 + C14766) * C24473) *
                C50841 * C50966 -
            (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
                C50841 * C51111) *
               C1066 +
           ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
                C50841 * C51111 -
            ((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C24473 +
             (C14766 + C14765) * C51160 + C14737 * C51159) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C50902 * C1066 -
           ((C15104 + C15103) * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C50902 * C50938) *
              C1068 +
          ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
               C50841 * C50902 * C50938 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C10806 * C51159 + C14284 * C51160 + (C11010 + C11011) * C24473) *
               C50841 * C50902 * C1066 -
           ((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 + C51063 * C3245 +
             C10745 * C1148 - C10746 * C1143 - C10745 * C1149 +
             C51124 * C1155) *
                C24473 +
            (C11011 + C11010) * C51160 + C11360 * C51159) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C51159 +
           (C13876 + C13877) * C51160 + C30773 * C24473) *
              C50841 * C50902 * C1137 -
          (C31650 * C24473 + (C13878 + C13879) * C51160 +
           (C13877 + C13876) * C51159) *
              C50841 * C50902 * C1138 +
          (C30773 * C51159 + (C15103 + C15104) * C51160 +
           (C31663 + C31664) * C24473) *
              C50841 * C50902 * C1139 -
          ((C10747 * C21009 - C10748 * C21008 - C10747 * C21010 +
            C51063 * C21011 + C10745 * C3518 - C10746 * C3515 - C10745 * C3519 +
            C51124 * C3521) *
               C24473 +
           (C31664 + C31663) * C51160 + C31650 * C51159) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C51159 +
             (C13876 + C13877) * C51160 + C30773 * C24473) *
                C50841 * C1717 -
            (C32311 * C24473 + (C14763 + C14764) * C51160 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C51159) *
                C50841 * C50966) *
               C51110 +
           (((C14764 + C14763) * C51159 + (C15971 + C15972) * C51160 +
             (C32324 + C32325) * C24473) *
                C50841 * C50966 -
            (C31650 * C24473 + (C13878 + C13879) * C51160 +
             (C13877 + C13876) * C51159) *
                C50841 * C1717) *
               C50938) *
              C51102 +
          ((((C11209 + C11208) * C51159 + C14746 * C51160 +
             (C14765 + C14766) * C24473) *
                C50841 * C50966 -
            (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
                C50841 * C1717) *
               C51110 +
           ((C13844 * C51159 + C13855 * C51160 + (C13880 + C13881) * C24473) *
                C50841 * C1717 -
            ((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C24473 +
             (C14766 + C14765) * C51160 + C14737 * C51159) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C51157 -
           (C32311 * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C51158 +
           ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C51159 +
            (C15311 + C15312) * C51160 + (C31823 + C31824) * C24473) *
               C50841 * C2133) *
              C51110 +
          (((C14764 + C14763) * C51159 + (C15971 + C15972) * C51160 +
            (C32324 + C32325) * C24473) *
               C50841 * C51158 -
           (C31650 * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C51157 -
           ((C10747 * C21282 - C10748 * C21281 - C10747 * C21283 +
             C51063 * C21284 + C10745 * C3679 - C10746 * C3676 -
             C10745 * C3680 + C51124 * C3682) *
                C24473 +
            (C31824 + C31823) * C51160 + (C15312 + C15311) * C51159) *
               C50841 * C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C1717 -
           (C32311 * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C50966) *
              C285 +
          (((C14764 + C14763) * C51159 + (C15971 + C15972) * C51160 +
            (C32324 + C32325) * C24473) *
               C50841 * C50966 -
           (C31650 * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C1717) *
              C286 +
          ((C30773 * C51159 + (C15103 + C15104) * C51160 +
            (C31663 + C31664) * C24473) *
               C50841 * C1717 -
           ((C10747 * C20672 - C10748 * C20671 - C10747 * C20673 +
             C51063 * C20674 + C10745 * C4187 - C10746 * C4184 -
             C10745 * C4188 + C51124 * C4190) *
                C24473 +
            (C32325 + C32324) * C51160 + C32311 * C51159) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C1717 -
           (C32311 * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C11209 + C11208) * C51159 + C14746 * C51160 +
            (C14765 + C14766) * C24473) *
               C50841 * C50966 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C10806 * C51159 + C14284 * C51160 + (C11010 + C11011) * C24473) *
               C50841 * C1717 -
           ((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 + C51063 * C2707 +
             C10745 * C1609 - C10746 * C1604 - C10745 * C1610 +
             C51124 * C1616) *
                C24473 +
            (C11759 + C11758) * C51160 + C11522 * C51159) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
            C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
               C51159 +
           (C13876 + C13877) * C51160 + C30773 * C24473) *
              C50841 * C1883 -
          (C32311 * C24473 + (C14763 + C14764) * C51160 +
           (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
            C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
               C51159) *
              C50841 * C1884 +
          ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
            C10747 * C1897 - C10748 * C1890 - C10747 * C1898 + C51063 * C1902) *
               C51159 +
           (C15311 + C15312) * C51160 + (C31823 + C31824) * C24473) *
              C50841 * C1885 -
          ((C10747 * C22962 - C10748 * C22961 - C10747 * C22963 +
            C51063 * C22964 + C10745 * C4596 - C10746 * C4590 - C10745 * C4597 +
            C51124 * C4602) *
               C24473 +
           (C10747 * C6595 - C10748 * C6592 - C10747 * C6596 + C51063 * C6598 +
            C10745 * C4598 - C10746 * C4591 - C10745 * C4599 + C51124 * C4603) *
               C51160 +
           (C10747 * C5597 - C10748 * C5594 - C10747 * C5598 + C51063 * C5603 +
            C10745 * C1897 - C10746 * C1890 - C10745 * C1898 + C51124 * C1902) *
               C51159) *
              C50841 * C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C51157 -
           (C32311 * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C51158 +
           ((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C51159 +
            (C15311 + C15312) * C51160 + (C31823 + C31824) * C24473) *
               C50841 * C2133) *
              C50886 * C51102 +
          (((C11209 + C11208) * C51159 + C14746 * C51160 +
            (C14765 + C14766) * C24473) *
               C50841 * C51158 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C51157 -
           ((C10747 * C4592 - C10748 * C4588 - C10747 * C4593 + C51063 * C4600 +
             C10745 * C2701 - C10746 * C2697 - C10745 * C2702 +
             C51124 * C2706) *
                C24473 +
            (C14089 + C14088) * C51160 + (C11211 + C11210) * C51159) *
               C50841 * C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C1717 -
           (C32311 * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C11209 + C11208) * C51159 + C14746 * C51160 +
            (C14765 + C14766) * C24473) *
               C50841 * C50966 -
           (C13845 * C24473 + C13846 * C51160 + (C10799 + C10798) * C51159) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C10806 * C51159 + C14284 * C51160 + (C11010 + C11011) * C24473) *
               C50841 * C1717 -
           ((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 + C51063 * C2707 +
             C10745 * C1609 - C10746 * C1604 - C10745 * C1610 +
             C51124 * C1616) *
                C24473 +
            (C11759 + C11758) * C51160 + C11522 * C51159) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C51159 +
            (C13876 + C13877) * C51160 + C30773 * C24473) *
               C50841 * C1717 -
           (C32311 * C24473 + (C14763 + C14764) * C51160 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C51159) *
               C50841 * C50966) *
              C285 +
          (((C14764 + C14763) * C51159 + (C15971 + C15972) * C51160 +
            (C32324 + C32325) * C24473) *
               C50841 * C50966 -
           (C31650 * C24473 + (C13878 + C13879) * C51160 +
            (C13877 + C13876) * C51159) *
               C50841 * C1717) *
              C286 +
          ((C30773 * C51159 + (C15103 + C15104) * C51160 +
            (C31663 + C31664) * C24473) *
               C50841 * C1717 -
           ((C10747 * C20672 - C10748 * C20671 - C10747 * C20673 +
             C51063 * C20674 + C10745 * C4187 - C10746 * C4184 -
             C10745 * C4188 + C51124 * C4190) *
                C24473 +
            (C32325 + C32324) * C51160 + C32311 * C51159) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C51110 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C50938) *
              C51153 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C50938 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C51110) *
              C51154 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C50902 * C51110 -
           ((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C19874 +
            C2547 * C19873 + C371 * C19872 + C368 * C19871) *
               C50841 * C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C51110 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C50938) *
              C51153 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C17705 + C17706) * C17238) *
               C50902 * C50938 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C51110) *
              C51154 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C50902 * C51110 -
           (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                 C51035 +
             C681 * C17234) *
                C17238 +
            (C17706 + C17705) * C17237 + C17704 * C17236) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C50902 * C51110 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C50902 * C50938) *
              C51153 +
          (((C5445 + C5444 + C5443) * C17234 +
            (C5446 + C5447 + C5448) * C51035) *
               C50841 * C50902 * C50938 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C50902 * C51110) *
              C51154 +
          (((C5257 + C5256 + C5255) * C17234 +
            (C5813 + C5814 + C5815) * C51035) *
               C50841 * C50902 * C51110 -
           ((C5195 * C2703 - C5196 * C2698 - C5195 * C2704 + C5190 * C2707 +
             C5193 * C1609 - C5194 * C1604 - C5193 * C1610 + C5189 * C1616 +
             C5191 * C312 - C5192 * C296 - C5191 * C313 + C5188 * C326) *
                C51035 +
            (C5815 + C5814 + C5813) * C17234) *
               C50841 * C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C19871 +
             C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
                C50841 * C51111 -
            (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C19871) *
                C50841 * C50966) *
               C51110 +
           ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
             (C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C19874) *
                C50841 * C50966 -
            (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 +
             C2542 * C19871) *
                C50841 * C51111) *
               C50938) *
              C288 +
          (((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
                C50841 * C50966 -
            (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
                C50841 * C51111) *
               C51110 +
           ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
                C50841 * C51111 -
            ((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C19874 +
             C3269 * C19873 + C2730 * C19872 + C963 * C19871) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C17234 +
              C2542 * C51035) *
                 C17236 +
             (C17240 + C17241) * C17237 + C17248 * C17238) *
                C51111 -
            (C17853 * C17238 + (C17552 + C17553) * C17237 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C17234) *
                 C17236) *
                C50966) *
               C51110 +
           (((C3268 * C17234 + C3267 * C51035) * C17236 +
             (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
                C50966 -
            (C17704 * C17238 + (C17398 + C17399) * C17237 +
             (C2543 * C51035 + C2542 * C17234) * C17236) *
                C51111) *
               C50938) *
              C288 +
          ((((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
             (C17854 + C17855) * C17238) *
                C50966 -
            (C17249 * C17238 + (C17243 + C17242) * C17237 +
             (C17241 + C17240) * C17236) *
                C51111) *
               C51110 +
           (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
             (C17705 + C17706) * C17238) *
                C51111 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C17234) *
                 C17238 +
             (C18053 + C18052) * C17237 + (C18051 + C18050) * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
              C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
              C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                 C17234 +
             (C21892 + C21893 + C21894) * C51035) *
                C50841 * C51111 -
            ((C22548 + C22549 + C22550) * C51035 +
             (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
              C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
              C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                 C17234) *
                C50841 * C50966) *
               C51110 +
           (((C22550 + C22549 + C22548) * C17234 +
             (C5191 * C1613 - C5192 * C1606 - C5191 * C1614 + C5188 * C1618 +
              C5193 * C2699 - C5194 * C2696 - C5193 * C2700 + C5189 * C2705 +
              C5195 * C4596 - C5196 * C4590 - C5195 * C4597 + C5190 * C4602) *
                 C51035) *
                C50841 * C50966 -
            ((C21895 + C21896 + C21897) * C51035 +
             (C21894 + C21893 + C21892) * C17234) *
                C50841 * C51111) *
               C50938) *
              C288 +
          ((((C5645 + C5644 + C5643) * C17234 +
             (C6199 + C6200 + C6201) * C51035) *
                C50841 * C50966 -
            ((C5443 + C5444 + C5445) * C51035 +
             (C5254 + C5253 + C5252) * C17234) *
                C50841 * C51111) *
               C51110 +
           (((C5445 + C5444 + C5443) * C17234 +
             (C5446 + C5447 + C5448) * C51035) *
                C50841 * C51111 -
            ((C5195 * C4592 - C5196 * C4588 - C5195 * C4593 + C5190 * C4600 +
              C5193 * C2701 - C5194 * C2697 - C5193 * C2702 + C5189 * C2706 +
              C5191 * C1611 - C5192 * C1605 - C5191 * C1612 + C5188 * C1617) *
                 C51035 +
             (C6201 + C6200 + C6199) * C17234) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                    C17234 +
                C2542 * C51035) *
                   C17236 +
               (C17240 + C17241) * C17237 + C17248 * C17238) *
                  C50902 * C50886 * C113 -
              (C17249 * C17238 + (C17243 + C17242) * C17237 +
               (C17241 + C17240) * C17236) *
                  C50902 * C50886 * C114 +
              (C17248 * C17236 + (C17245 + C17244) * C17237 +
               (C17246 + C17247) * C17238) *
                  C50902 * C50886 * C115 -
              (((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) *
                    C51035 +
                C182 * C17234) *
                   C17238 +
               (C17247 + C17246) * C17237 + C17249 * C17236) *
                  C50902 * C50886 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                     C17234 +
                 C2542 * C51035) *
                    C17236 +
                (C17240 + C17241) * C17237 + C17248 * C17238) *
                   C50902 * C285 -
               ((C17396 + C17397) * C17238 + (C17398 + C17399) * C17237 +
                (C2543 * C51035 + C2542 * C17234) * C17236) *
                   C50902 * C286 +
               ((C2543 * C17234 + C2545 * C51035) * C17236 +
                (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
                   C50902 * C287) *
                  C288 +
              (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
                (C367 * C17234 + C372 * C51035) * C17238) *
                   C50902 * C286 -
               (C17249 * C17238 + (C17243 + C17242) * C17237 +
                (C17241 + C17240) * C17236) *
                   C50902 * C285 -
               (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                     C51035 +
                 C372 * C17234) *
                    C17238 +
                (C17403 + C17402) * C17237 + (C17401 + C17400) * C17236) *
                   C50902 * C287) *
                  C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C476 -
           ((C17550 + C17551) * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C17234 +
             C3696 * C51035) *
                C17236 +
            (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
               C478) *
              C50886 * C288 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C556 * C17234 + C965 * C51035) * C17238) *
               C477 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C476 -
           (((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                 C51035 +
             C561 * C17234) *
                C17238 +
            (C17557 + C17556) * C17237 + (C17555 + C17554) * C17236) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C50902 * C50886 * C113 -
          (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
              C50841 * C50902 * C50886 * C114 +
          (C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
              C50841 * C50902 * C50886 * C115 -
          ((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
               C19874 +
           C372 * C19873 + C367 * C19872 + C180 * C19871) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C285 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C286 +
           (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            (C117 * C3518 - C118 * C3515 - C117 * C3519 + C50999 * C3521) *
                C19874) *
               C50841 * C50902 * C287) *
              C288 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C286 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C285 -
           ((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C19874 +
            C2546 * C19873 + C2544 * C19872 + C370 * C19871) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C476 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C477 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
            C3696 * C19872 + C3697 * C19873 +
            (C117 * C3679 - C118 * C3676 - C117 * C3680 + C50999 * C3682) *
                C19874) *
               C50841 * C478) *
              C50886 * C288 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C477 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C476 -
           ((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                C19874 +
            C2732 * C19873 + C2731 * C19872 + C559 * C19871) *
               C50841 * C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C17234 +
           (C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323 +
            C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
            C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271) *
               C51035) *
              C50841 * C50902 * C50886 * C113 -
          ((C5443 + C5444 + C5445) * C51035 +
           (C5254 + C5253 + C5252) * C17234) *
              C50841 * C50902 * C50886 * C114 +
          ((C5257 + C5256 + C5255) * C17234 +
           (C5813 + C5814 + C5815) * C51035) *
              C50841 * C50902 * C50886 * C115 -
          ((C5195 * C1260 - C5196 * C1256 - C5195 * C1261 + C5190 * C1268 +
            C5193 * C935 - C5194 * C927 - C5193 * C936 + C5189 * C942 +
            C5191 * C300 - C5192 * C290 - C5191 * C301 + C5188 * C320) *
               C51035 +
           (C5260 + C5259 + C5258) * C17234) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C50902 * C285 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C50902 * C286 +
           ((C21897 + C21896 + C21895) * C17234 +
            (C5191 * C1152 - C5192 * C1145 - C5191 * C1153 + C5188 * C1157 +
             C5193 * C3237 - C5194 * C3234 - C5193 * C3238 + C5189 * C3243 +
             C5195 * C3679 - C5196 * C3676 - C5195 * C3680 + C5190 * C3682) *
                C51035) *
               C50841 * C50902 * C287) *
              C288 +
          (((C5445 + C5444 + C5443) * C17234 +
            (C5446 + C5447 + C5448) * C51035) *
               C50841 * C50902 * C286 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C50902 * C285 -
           ((C5195 * C3677 - C5196 * C3675 - C5195 * C3678 + C5190 * C3681 +
             C5193 * C3239 - C5194 * C3235 - C5193 * C3240 + C5189 * C3244 +
             C5191 * C1150 - C5192 * C1144 - C5191 * C1151 + C5188 * C1156) *
                C51035 +
            (C5448 + C5447 + C5446) * C17234) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C476 -
           ((C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603 +
             C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
             C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939) *
                C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C477 +
           ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
             C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
             C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
                C17234 +
            (C5191 * C1266 - C5192 * C1259 - C5191 * C1267 + C5188 * C1271 +
             C5193 * C4598 - C5194 * C4591 - C5193 * C4599 + C5189 * C4603 +
             C5195 * C6595 - C5196 * C6592 - C5195 * C6596 + C5190 * C6598) *
                C51035) *
               C50841 * C478) *
              C50886 * C288 +
          (((C5645 + C5644 + C5643) * C17234 +
            (C6199 + C6200 + C6201) * C51035) *
               C50841 * C477 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C476 -
           ((C5195 * C6593 - C5196 * C6591 - C5195 * C6594 + C5190 * C6597 +
             C5193 * C4594 - C5194 * C4589 - C5193 * C4595 + C5189 * C4601 +
             C5191 * C1264 - C5192 * C1258 - C5191 * C1265 + C5188 * C1270) *
                C51035 +
            (C5648 + C5647 + C5646) * C17234) *
               C50841 * C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C51111 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C50886 * C51153 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C50966 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C51111) *
              C50886 * C51154 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C51111 -
           ((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                C19874 +
            C3039 * C19873 + C964 * C19872 + C557 * C19871) *
               C50841 * C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C51111 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C50886 * C51153 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C17854 + C17855) * C17238) *
               C50966 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C51111) *
              C50886 * C51154 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C51111 -
           (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C51035 +
             C793 * C17234) *
                C17238 +
            (C17855 + C17854) * C17237 + C17853 * C17236) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C51111 -
           ((C5195 * C4598 - C5196 * C4591 - C5195 * C4599 + C5190 * C4603 +
             C5193 * C1266 - C5194 * C1259 - C5193 * C1267 + C5189 * C1271 +
             C5191 * C929 - C5192 * C924 - C5191 * C930 + C5188 * C939) *
                C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C50966) *
              C50886 * C51153 +
          (((C5645 + C5644 + C5643) * C17234 +
            (C6199 + C6200 + C6201) * C51035) *
               C50841 * C50966 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C51111) *
              C50886 * C51154 +
          (((C5257 + C5256 + C5255) * C17234 +
            (C5813 + C5814 + C5815) * C51035) *
               C50841 * C51111 -
           ((C5195 * C6177 - C5196 * C6176 - C5195 * C6178 + C5190 * C6179 +
             C5193 * C1262 - C5194 * C1257 - C5193 * C1263 + C5189 * C1269 +
             C5191 * C933 - C5192 * C926 - C5191 * C934 + C5188 * C941) *
                C51035 +
            (C5982 + C5981 + C5980) * C17234) *
               C50841 * C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C285 -
           ((C17396 + C17397) * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C286 +
           ((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C50902 * C287) *
              C288 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C367 * C17234 + C372 * C51035) * C17238) *
               C50902 * C286 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C285 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C51035 +
             C372 * C17234) *
                C17238 +
            (C17403 + C17402) * C17237 + (C17401 + C17400) * C17236) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C17234 +
            C2542 * C51035) *
               C17236 +
           (C17240 + C17241) * C17237 + C17248 * C17238) *
              C50902 * C50886 * C113 -
          (C17249 * C17238 + (C17243 + C17242) * C17237 +
           (C17241 + C17240) * C17236) *
              C50902 * C50886 * C114 +
          (C17248 * C17236 + (C17245 + C17244) * C17237 +
           (C17246 + C17247) * C17238) *
              C50902 * C50886 * C115 -
          (((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C51035 +
            C182 * C17234) *
               C17238 +
           (C17247 + C17246) * C17237 + C17249 * C17236) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C50902 * C50886 * C113 -
          (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
              C50841 * C50902 * C50886 * C114 +
          (C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
              C50841 * C50902 * C50886 * C115 -
          ((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
               C19874 +
           C372 * C19873 + C367 * C19872 + C180 * C19871) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C285 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C286 +
           (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            (C117 * C3518 - C118 * C3515 - C117 * C3519 + C50999 * C3521) *
                C19874) *
               C50841 * C50902 * C287) *
              C288 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C286 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C285 -
           ((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C19874 +
            C2546 * C19873 + C2544 * C19872 + C370 * C19871) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C17234 +
           (C5191 * C306 - C5192 * C293 - C5191 * C307 + C5188 * C323 +
            C5193 * C929 - C5194 * C924 - C5193 * C930 + C5189 * C939 +
            C5195 * C1266 - C5196 * C1259 - C5195 * C1267 + C5190 * C1271) *
               C51035) *
              C50841 * C50902 * C50886 * C113 -
          ((C5443 + C5444 + C5445) * C51035 +
           (C5254 + C5253 + C5252) * C17234) *
              C50841 * C50902 * C50886 * C114 +
          ((C5257 + C5256 + C5255) * C17234 +
           (C5813 + C5814 + C5815) * C51035) *
              C50841 * C50902 * C50886 * C115 -
          ((C5195 * C1260 - C5196 * C1256 - C5195 * C1261 + C5190 * C1268 +
            C5193 * C935 - C5194 * C927 - C5193 * C936 + C5189 * C942 +
            C5191 * C300 - C5192 * C290 - C5191 * C301 + C5188 * C320) *
               C51035 +
           (C5260 + C5259 + C5258) * C17234) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C50902 * C285 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C50902 * C286 +
           ((C21897 + C21896 + C21895) * C17234 +
            (C5191 * C1152 - C5192 * C1145 - C5191 * C1153 + C5188 * C1157 +
             C5193 * C3237 - C5194 * C3234 - C5193 * C3238 + C5189 * C3243 +
             C5195 * C3679 - C5196 * C3676 - C5195 * C3680 + C5190 * C3682) *
                C51035) *
               C50841 * C50902 * C287) *
              C288 +
          (((C5445 + C5444 + C5443) * C17234 +
            (C5446 + C5447 + C5448) * C51035) *
               C50841 * C50902 * C286 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C50902 * C285 -
           ((C5195 * C3677 - C5196 * C3675 - C5195 * C3678 + C5190 * C3681 +
             C5193 * C3239 - C5194 * C3235 - C5193 * C3240 + C5189 * C3244 +
             C5191 * C1150 - C5192 * C1144 - C5191 * C1151 + C5188 * C1156) *
                C51035 +
            (C5448 + C5447 + C5446) * C17234) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C51155 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C51156 +
           (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            C20573 * C19874) *
               C50841 * C50902 * C1372) *
              C51102 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C51156 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C51155 -
           ((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C19874 +
            C2546 * C19873 + C2544 * C19872 + C370 * C19871) *
               C50841 * C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C51155 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C51156 +
           ((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C50902 * C1372) *
              C51102 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C17705 + C17706) * C17238) *
               C50902 * C51156 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C51155 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C51035 +
             C372 * C17234) *
                C17238 +
            (C17403 + C17402) * C17237 + (C17401 + C17400) * C17236) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C50902 * C51155 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C50902 * C51156 +
           ((C21897 + C21896 + C21895) * C17234 +
            (C22813 + C22814 + C22815) * C51035) *
               C50841 * C50902 * C1372) *
              C51102 +
          (((C5445 + C5444 + C5443) * C17234 +
            (C5446 + C5447 + C5448) * C51035) *
               C50841 * C50902 * C51156 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C50902 * C51155 -
           ((C5195 * C3677 - C5196 * C3675 - C5195 * C3678 + C5190 * C3681 +
             C5193 * C3239 - C5194 * C3235 - C5193 * C3240 + C5189 * C3244 +
             C5191 * C1150 - C5192 * C1144 - C5191 * C1151 + C5188 * C1156) *
                C51035 +
            (C5448 + C5447 + C5446) * C17234) *
               C50841 * C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C51111 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C51155 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            C21019 * C19874) *
               C50841 * C50966 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C51111) *
              C51156 +
          ((C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            C20573 * C19874) *
               C50841 * C51111 -
           ((C117 * C21009 - C118 * C21008 - C117 * C21010 + C50999 * C21011) *
                C19874 +
            C21019 * C19873 + C4198 * C19872 + C3267 * C19871) *
               C50841 * C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C51111 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C51155 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C50966 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C51111) *
              C51156 +
          (((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C51111 -
           (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                 C51035 +
             C3039 * C17234) *
                C17238 +
            (C3269 * C51035 + C2730 * C17234) * C17237 +
            (C4198 * C51035 + C3267 * C17234) * C17236) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C51111 -
           ((C22548 + C22549 + C22550) * C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C50966) *
              C51155 +
          (((C22550 + C22549 + C22548) * C17234 +
            (C23491 + C23492 + C23493) * C51035) *
               C50841 * C50966 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C51111) *
              C51156 +
          (((C21897 + C21896 + C21895) * C17234 +
            (C22813 + C22814 + C22815) * C51035) *
               C50841 * C51111 -
           ((C5195 * C21282 - C5196 * C21281 - C5195 * C21283 + C5190 * C21284 +
             C5193 * C3679 - C5194 * C3676 - C5193 * C3680 + C5189 * C3682 +
             C5191 * C3237 - C5192 * C3234 - C5191 * C3238 + C5188 * C3243) *
                C51035 +
            (C23493 + C23492 + C23491) * C17234) *
               C50841 * C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                     C17234 +
                 C2542 * C51035) *
                    C17236 +
                (C17240 + C17241) * C17237 + C17248 * C17238) *
                   C50902 * C1066 -
               (C17704 * C17238 + (C17398 + C17399) * C17237 +
                (C2543 * C51035 + C2542 * C17234) * C17236) *
                   C50902 * C50938) *
                  C1068 +
              (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
                (C17705 + C17706) * C17238) *
                   C50902 * C50938 -
               (C17249 * C17238 + (C17243 + C17242) * C17237 +
                (C17241 + C17240) * C17236) *
                   C50902 * C1066) *
                  C1069 +
              ((C17248 * C17236 + (C17245 + C17244) * C17237 +
                (C17246 + C17247) * C17238) *
                   C50902 * C1066 -
               (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                     C51035 +
                 C681 * C17234) *
                    C17238 +
                (C17706 + C17705) * C17237 + C17704 * C17236) *
                   C50902 * C50938) *
                  C1070) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                    C17234 +
                C2542 * C51035) *
                   C17236 +
               (C17240 + C17241) * C17237 + C17248 * C17238) *
                  C50902 * C1137 -
              (C17704 * C17238 + (C17398 + C17399) * C17237 +
               (C2543 * C51035 + C2542 * C17234) * C17236) *
                  C50902 * C1138 +
              ((C2543 * C17234 + C2545 * C51035) * C17236 +
               (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
                  C50902 * C1139 -
              (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                    C51035 +
                C2547 * C17234) *
                   C17238 +
               (C2546 * C51035 + C2544 * C17234) * C17237 +
               (C3529 * C51035 + C2545 * C17234) * C17236) *
                  C50902 * C1140) *
             C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C476 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C17234 +
             C3696 * C51035) *
                C17236 +
            (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
               C478) *
              C1066 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C477 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C476 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C51035 +
             C8396 * C17234) *
                C17238 +
            (C2732 * C51035 + C2731 * C17234) * C17237 +
            (C3697 * C51035 + C3696 * C17234) * C17236) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C1066 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C50938) *
              C1068 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C50938 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C50902 * C1066 -
           ((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C19874 +
            C2547 * C19873 + C371 * C19872 + C368 * C19871) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C50902 * C1137 -
          (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
              C50841 * C50902 * C1138 +
          (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 + C20573 * C19874) *
              C50841 * C50902 * C1139 -
          ((C117 * C20563 - C118 * C20562 - C117 * C20564 + C50999 * C20565) *
               C19874 +
           C20573 * C19873 + C3529 * C19872 + C2545 * C19871) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C476 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C477 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
            C3696 * C19872 + C3697 * C19873 + C20682 * C19874) *
               C50841 * C478) *
              C1066 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            (C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                C19874) *
               C50841 * C477 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C476 -
           ((C117 * C20672 - C118 * C20671 - C117 * C20673 + C50999 * C20674) *
                C19874 +
            C20682 * C19873 + C3697 * C19872 + C3696 * C19871) *
               C50841 * C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C50902 * C1066 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C50902 * C50938) *
              C1068 +
          (((C5445 + C5444 + C5443) * C17234 +
            (C5446 + C5447 + C5448) * C51035) *
               C50841 * C50902 * C50938 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C50902 * C1066) *
              C1069 +
          (((C5257 + C5256 + C5255) * C17234 +
            (C5813 + C5814 + C5815) * C51035) *
               C50841 * C50902 * C1066 -
           ((C5195 * C2703 - C5196 * C2698 - C5195 * C2704 + C5190 * C2707 +
             C5193 * C1609 - C5194 * C1604 - C5193 * C1610 + C5189 * C1616 +
             C5191 * C312 - C5192 * C296 - C5191 * C313 + C5188 * C326) *
                C51035 +
            (C5815 + C5814 + C5813) * C17234) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C17234 +
           (C21892 + C21893 + C21894) * C51035) *
              C50841 * C50902 * C1137 -
          ((C21895 + C21896 + C21897) * C51035 +
           (C21894 + C21893 + C21892) * C17234) *
              C50841 * C50902 * C1138 +
          ((C21897 + C21896 + C21895) * C17234 +
           (C22813 + C22814 + C22815) * C51035) *
              C50841 * C50902 * C1139 -
          ((C5195 * C20672 - C5196 * C20671 - C5195 * C20673 + C5190 * C20674 +
            C5193 * C4187 - C5194 * C4184 - C5193 * C4188 + C5189 * C4190 +
            C5191 * C2493 - C5192 * C2490 - C5191 * C2494 + C5188 * C2499) *
               C51035 +
           (C22815 + C22814 + C22813) * C17234) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C476 -
           ((C22548 + C22549 + C22550) * C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C477 +
           ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
             C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
             C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
                C17234 +
            (C22984 + C22985 + C22986) * C51035) *
               C50841 * C478) *
              C1066 +
          (((C22550 + C22549 + C22548) * C17234 +
            (C5191 * C1613 - C5192 * C1606 - C5191 * C1614 + C5188 * C1618 +
             C5193 * C2699 - C5194 * C2696 - C5193 * C2700 + C5189 * C2705 +
             C5195 * C4596 - C5196 * C4590 - C5195 * C4597 + C5190 * C4602) *
                C51035) *
               C50841 * C477 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C476 -
           ((C5195 * C22962 - C5196 * C22961 - C5195 * C22963 + C5190 * C22964 +
             C5193 * C4596 - C5194 * C4590 - C5193 * C4597 + C5189 * C4602 +
             C5191 * C2699 - C5192 * C2696 - C5191 * C2700 + C5188 * C2705) *
                C51035 +
            (C22986 + C22985 + C22984) * C17234) *
               C50841 * C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C19871 +
             C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
                C50841 * C51111 -
            (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C19871) *
                C50841 * C50966) *
               C1066 +
           ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
             (C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C19874) *
                C50841 * C50966 -
            (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 +
             C2542 * C19871) *
                C50841 * C51111) *
               C50938) *
              C51102 +
          (((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
                C50841 * C50966 -
            (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
                C50841 * C51111) *
               C1066 +
           ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
                C50841 * C51111 -
            ((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C19874 +
             C3269 * C19873 + C2730 * C19872 + C963 * C19871) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C17234 +
              C2542 * C51035) *
                 C17236 +
             (C17240 + C17241) * C17237 + C17248 * C17238) *
                C51111 -
            (C17853 * C17238 + (C17552 + C17553) * C17237 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C17234) *
                 C17236) *
                C50966) *
               C1066 +
           (((C3268 * C17234 + C3267 * C51035) * C17236 +
             (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
                C50966 -
            (C17704 * C17238 + (C17398 + C17399) * C17237 +
             (C2543 * C51035 + C2542 * C17234) * C17236) *
                C51111) *
               C50938) *
              C51102 +
          ((((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
             (C17854 + C17855) * C17238) *
                C50966 -
            (C17249 * C17238 + (C17243 + C17242) * C17237 +
             (C17241 + C17240) * C17236) *
                C51111) *
               C1066 +
           (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
             (C17705 + C17706) * C17238) *
                C51111 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C17234) *
                 C17238 +
             (C18053 + C18052) * C17237 + (C18051 + C18050) * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
              C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
              C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                 C17234 +
             (C21892 + C21893 + C21894) * C51035) *
                C50841 * C51111 -
            ((C22548 + C22549 + C22550) * C51035 +
             (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
              C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
              C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                 C17234) *
                C50841 * C50966) *
               C1066 +
           (((C22550 + C22549 + C22548) * C17234 +
             (C5191 * C1613 - C5192 * C1606 - C5191 * C1614 + C5188 * C1618 +
              C5193 * C2699 - C5194 * C2696 - C5193 * C2700 + C5189 * C2705 +
              C5195 * C4596 - C5196 * C4590 - C5195 * C4597 + C5190 * C4602) *
                 C51035) *
                C50841 * C50966 -
            ((C21895 + C21896 + C21897) * C51035 +
             (C21894 + C21893 + C21892) * C17234) *
                C50841 * C51111) *
               C50938) *
              C51102 +
          ((((C5645 + C5644 + C5643) * C17234 +
             (C6199 + C6200 + C6201) * C51035) *
                C50841 * C50966 -
            ((C5443 + C5444 + C5445) * C51035 +
             (C5254 + C5253 + C5252) * C17234) *
                C50841 * C51111) *
               C1066 +
           (((C5445 + C5444 + C5443) * C17234 +
             (C5446 + C5447 + C5448) * C51035) *
                C50841 * C51111 -
            ((C5195 * C4592 - C5196 * C4588 - C5195 * C4593 + C5190 * C4600 +
              C5193 * C2701 - C5194 * C2697 - C5193 * C2702 + C5189 * C2706 +
              C5191 * C1611 - C5192 * C1605 - C5191 * C1612 + C5188 * C1617) *
                 C51035 +
             (C6201 + C6200 + C6199) * C17234) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C17234 +
            C2542 * C51035) *
               C17236 +
           (C17240 + C17241) * C17237 + C17248 * C17238) *
              C50902 * C1137 -
          (C17704 * C17238 + (C17398 + C17399) * C17237 +
           (C2543 * C51035 + C2542 * C17234) * C17236) *
              C50902 * C1138 +
          ((C2543 * C17234 + C2545 * C51035) * C17236 +
           (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
              C50902 * C1139 -
          (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C51035 +
            C2547 * C17234) *
               C17238 +
           (C2546 * C51035 + C2544 * C17234) * C17237 +
           (C3529 * C51035 + C2545 * C17234) * C17236) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C1066 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C50938) *
              C1068 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C17705 + C17706) * C17238) *
               C50902 * C50938 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C1066) *
              C1069 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C50902 * C1066 -
           (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                 C51035 +
             C681 * C17234) *
                C17238 +
            (C17706 + C17705) * C17237 + C17704 * C17236) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C1066 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C50938) *
              C1068 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C50938 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C50902 * C1066 -
           ((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C19874 +
            C2547 * C19873 + C371 * C19872 + C368 * C19871) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C50902 * C1137 -
          (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
              C50841 * C50902 * C1138 +
          (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 + C20573 * C19874) *
              C50841 * C50902 * C1139 -
          ((C117 * C20563 - C118 * C20562 - C117 * C20564 + C50999 * C20565) *
               C19874 +
           C20573 * C19873 + C3529 * C19872 + C2545 * C19871) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C50902 * C1066 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C50902 * C50938) *
              C1068 +
          (((C5445 + C5444 + C5443) * C17234 +
            (C5446 + C5447 + C5448) * C51035) *
               C50841 * C50902 * C50938 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C50902 * C1066) *
              C1069 +
          (((C5257 + C5256 + C5255) * C17234 +
            (C5813 + C5814 + C5815) * C51035) *
               C50841 * C50902 * C1066 -
           ((C5195 * C2703 - C5196 * C2698 - C5195 * C2704 + C5190 * C2707 +
             C5193 * C1609 - C5194 * C1604 - C5193 * C1610 + C5189 * C1616 +
             C5191 * C312 - C5192 * C296 - C5191 * C313 + C5188 * C326) *
                C51035 +
            (C5815 + C5814 + C5813) * C17234) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C17234 +
           (C21892 + C21893 + C21894) * C51035) *
              C50841 * C50902 * C1137 -
          ((C21895 + C21896 + C21897) * C51035 +
           (C21894 + C21893 + C21892) * C17234) *
              C50841 * C50902 * C1138 +
          ((C21897 + C21896 + C21895) * C17234 +
           (C22813 + C22814 + C22815) * C51035) *
              C50841 * C50902 * C1139 -
          ((C5195 * C20672 - C5196 * C20671 - C5195 * C20673 + C5190 * C20674 +
            C5193 * C4187 - C5194 * C4184 - C5193 * C4188 + C5189 * C4190 +
            C5191 * C2493 - C5192 * C2490 - C5191 * C2494 + C5188 * C2499) *
               C51035 +
           (C22815 + C22814 + C22813) * C17234) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C19871 +
             C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
                C50841 * C1717 -
            (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C19871) *
                C50841 * C50966) *
               C51110 +
           ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
             C21019 * C19874) *
                C50841 * C50966 -
            (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 +
             C2542 * C19871) *
                C50841 * C1717) *
               C50938) *
              C51102 +
          (((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
                C50841 * C50966 -
            (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
                C50841 * C1717) *
               C51110 +
           ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
                C50841 * C1717 -
            ((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C19874 +
             C3269 * C19873 + C2730 * C19872 + C963 * C19871) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C17234 +
              C2542 * C51035) *
                 C17236 +
             (C17240 + C17241) * C17237 + C17248 * C17238) *
                C1717 -
            (C17853 * C17238 + (C17552 + C17553) * C17237 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C17234) *
                 C17236) *
                C50966) *
               C51110 +
           (((C3268 * C17234 + C3267 * C51035) * C17236 +
             (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
                C50966 -
            (C17704 * C17238 + (C17398 + C17399) * C17237 +
             (C2543 * C51035 + C2542 * C17234) * C17236) *
                C1717) *
               C50938) *
              C51102 +
          ((((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
             (C17854 + C17855) * C17238) *
                C50966 -
            (C17249 * C17238 + (C17243 + C17242) * C17237 +
             (C17241 + C17240) * C17236) *
                C1717) *
               C51110 +
           (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
             (C17705 + C17706) * C17238) *
                C1717 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C17234) *
                 C17238 +
             (C18053 + C18052) * C17237 + (C18051 + C18050) * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
              C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
              C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                 C17234 +
             (C21892 + C21893 + C21894) * C51035) *
                C50841 * C1717 -
            ((C22548 + C22549 + C22550) * C51035 +
             (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
              C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
              C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                 C17234) *
                C50841 * C50966) *
               C51110 +
           (((C22550 + C22549 + C22548) * C17234 +
             (C23491 + C23492 + C23493) * C51035) *
                C50841 * C50966 -
            ((C21895 + C21896 + C21897) * C51035 +
             (C21894 + C21893 + C21892) * C17234) *
                C50841 * C1717) *
               C50938) *
              C51102 +
          ((((C5645 + C5644 + C5643) * C17234 +
             (C6199 + C6200 + C6201) * C51035) *
                C50841 * C50966 -
            ((C5443 + C5444 + C5445) * C51035 +
             (C5254 + C5253 + C5252) * C17234) *
                C50841 * C1717) *
               C51110 +
           (((C5445 + C5444 + C5443) * C17234 +
             (C5446 + C5447 + C5448) * C51035) *
                C50841 * C1717 -
            ((C5195 * C4592 - C5196 * C4588 - C5195 * C4593 + C5190 * C4600 +
              C5193 * C2701 - C5194 * C2697 - C5193 * C2702 + C5189 * C2706 +
              C5191 * C1611 - C5192 * C1605 - C5191 * C1612 + C5188 * C1617) *
                 C51035 +
             (C6201 + C6200 + C6199) * C17234) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C51157 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C51158 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
            C3696 * C19872 + C3697 * C19873 + C20682 * C19874) *
               C50841 * C2133) *
              C51110 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            C21019 * C19874) *
               C50841 * C51158 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C51157 -
           ((C117 * C20672 - C118 * C20671 - C117 * C20673 + C50999 * C20674) *
                C19874 +
            C20682 * C19873 + C3697 * C19872 + C3696 * C19871) *
               C50841 * C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C51157 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C17234 +
             C3696 * C51035) *
                C17236 +
            (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
               C2133) *
              C51110 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C51158 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C51157 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C51035 +
             C8396 * C17234) *
                C17238 +
            (C2732 * C51035 + C2731 * C17234) * C17237 +
            (C3697 * C51035 + C3696 * C17234) * C17236) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C51157 -
           ((C22548 + C22549 + C22550) * C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C51158 +
           ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
             C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
             C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
                C17234 +
            (C22984 + C22985 + C22986) * C51035) *
               C50841 * C2133) *
              C51110 +
          (((C22550 + C22549 + C22548) * C17234 +
            (C23491 + C23492 + C23493) * C51035) *
               C50841 * C51158 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C51157 -
           ((C5195 * C22962 - C5196 * C22961 - C5195 * C22963 + C5190 * C22964 +
             C5193 * C4596 - C5194 * C4590 - C5193 * C4597 + C5189 * C4602 +
             C5191 * C2699 - C5192 * C2696 - C5191 * C2700 + C5188 * C2705) *
                C51035 +
            (C22986 + C22985 + C22984) * C17234) *
               C50841 * C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                     C17234 +
                 C2542 * C51035) *
                    C17236 +
                (C17240 + C17241) * C17237 + C17248 * C17238) *
                   C1717 -
               (C17853 * C17238 + (C17552 + C17553) * C17237 +
                (C3268 * C51035 +
                 (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                     C17234) *
                    C17236) *
                   C50966) *
                  C50886 * C1068 +
              (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
                (C17854 + C17855) * C17238) *
                   C50966 -
               (C17249 * C17238 + (C17243 + C17242) * C17237 +
                (C17241 + C17240) * C17236) *
                   C1717) *
                  C50886 * C1069 +
              ((C17248 * C17236 + (C17245 + C17244) * C17237 +
                (C17246 + C17247) * C17238) *
                   C1717 -
               (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                     C51035 +
                 C793 * C17234) *
                    C17238 +
                (C17855 + C17854) * C17237 + C17853 * C17236) *
                   C50966) *
                  C50886 * C1070) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                     C17234 +
                 C2542 * C51035) *
                    C17236 +
                (C17240 + C17241) * C17237 + C17248 * C17238) *
                   C1717 -
               (C17853 * C17238 + (C17552 + C17553) * C17237 +
                (C3268 * C51035 +
                 (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                     C17234) *
                    C17236) *
                   C50966) *
                  C285 +
              (((C3268 * C17234 + C3267 * C51035) * C17236 +
                (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
                   C50966 -
               (C17704 * C17238 + (C17398 + C17399) * C17237 +
                (C2543 * C51035 + C2542 * C17234) * C17236) *
                   C1717) *
                  C286 +
              (((C2543 * C17234 + C2545 * C51035) * C17236 +
                (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
                   C1717 -
               (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                     C51035 +
                 C3039 * C17234) *
                    C17238 +
                (C3269 * C51035 + C2730 * C17234) * C17237 +
                (C4198 * C51035 + C3267 * C17234) * C17236) *
                   C50966) *
                  C287) *
             C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C17234 +
            C2542 * C51035) *
               C17236 +
           (C17240 + C17241) * C17237 + C17248 * C17238) *
              C1883 -
          (C17853 * C17238 + (C17552 + C17553) * C17237 +
           (C3268 * C51035 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C17234) *
               C17236) *
              C1884 +
          (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C17234 +
            C3696 * C51035) *
               C17236 +
           (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
              C1885 -
          (((C117 * C6177 - C118 * C6176 - C117 * C6178 + C50999 * C6179) *
                C51035 +
            (C117 * C1893 - C118 * C1888 - C117 * C1894 + C50999 * C1900) *
                C17234) *
               C17238 +
           ((C117 * C4594 - C118 * C4589 - C117 * C4595 + C50999 * C4601) *
                C51035 +
            (C117 * C1895 - C118 * C1889 - C117 * C1896 + C50999 * C1901) *
                C17234) *
               C17237 +
           ((C117 * C4598 - C118 * C4591 - C117 * C4599 + C50999 * C4603) *
                C51035 +
            (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
                C17234) *
               C17236) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C1717 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C50886 * C1068 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C50966 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C1717 -
           ((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                C19874 +
            C3039 * C19873 + C964 * C19872 + C557 * C19871) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C1717 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C285 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            C21019 * C19874) *
               C50841 * C50966 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C1717) *
              C286 +
          ((C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            C20573 * C19874) *
               C50841 * C1717 -
           ((C117 * C21009 - C118 * C21008 - C117 * C21010 + C50999 * C21011) *
                C19874 +
            C21019 * C19873 + C4198 * C19872 + C3267 * C19871) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C1883 -
          (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
           (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C19871) *
              C50841 * C1884 +
          ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
           C3696 * C19872 + C3697 * C19873 + C20682 * C19874) *
              C50841 * C1885 -
          ((C117 * C21282 - C118 * C21281 - C117 * C21283 + C50999 * C21284) *
               C19874 +
           (C117 * C4596 - C118 * C4590 - C117 * C4597 + C50999 * C4602) *
               C19873 +
           (C117 * C4598 - C118 * C4591 - C117 * C4599 + C50999 * C4603) *
               C19872 +
           (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
               C19871) *
              C50841 * C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C1717 -
           ((C22548 + C22549 + C22550) * C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C5645 + C5644 + C5643) * C17234 +
            (C6199 + C6200 + C6201) * C51035) *
               C50841 * C50966 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C1717) *
              C50886 * C1069 +
          (((C5257 + C5256 + C5255) * C17234 +
            (C5813 + C5814 + C5815) * C51035) *
               C50841 * C1717 -
           ((C5195 * C6177 - C5196 * C6176 - C5195 * C6178 + C5190 * C6179 +
             C5193 * C1262 - C5194 * C1257 - C5193 * C1263 + C5189 * C1269 +
             C5191 * C933 - C5192 * C926 - C5191 * C934 + C5188 * C941) *
                C51035 +
            (C5982 + C5981 + C5980) * C17234) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C1717 -
           ((C22548 + C22549 + C22550) * C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C50966) *
              C285 +
          (((C22550 + C22549 + C22548) * C17234 +
            (C23491 + C23492 + C23493) * C51035) *
               C50841 * C50966 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C1717) *
              C286 +
          (((C21897 + C21896 + C21895) * C17234 +
            (C22813 + C22814 + C22815) * C51035) *
               C50841 * C1717 -
           ((C5195 * C21282 - C5196 * C21281 - C5195 * C21283 + C5190 * C21284 +
             C5193 * C3679 - C5194 * C3676 - C5193 * C3680 + C5189 * C3682 +
             C5191 * C3237 - C5192 * C3234 - C5191 * C3238 + C5188 * C3243) *
                C51035 +
            (C23493 + C23492 + C23491) * C17234) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
            C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
            C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
               C17234 +
           (C21892 + C21893 + C21894) * C51035) *
              C50841 * C1883 -
          ((C22548 + C22549 + C22550) * C51035 +
           (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
            C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
            C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
               C17234) *
              C50841 * C1884 +
          ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
            C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
            C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
               C17234 +
           (C22984 + C22985 + C22986) * C51035) *
              C50841 * C1885 -
          ((C5195 * C23884 - C5196 * C23883 - C5195 * C23885 + C5190 * C23886 +
            C5193 * C6595 - C5194 * C6592 - C5193 * C6596 + C5189 * C6598 +
            C5191 * C4598 - C5192 * C4591 - C5191 * C4599 + C5188 * C4603) *
               C51035 +
           (C5195 * C7479 - C5196 * C7476 - C5195 * C7480 + C5190 * C7482 +
            C5193 * C5597 - C5194 * C5594 - C5193 * C5598 + C5189 * C5603 +
            C5191 * C1897 - C5192 * C1890 - C5191 * C1898 + C5188 * C1902) *
               C17234) *
              C50841 * C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C51157 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C51158 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
            C3696 * C19872 + C3697 * C19873 + C20682 * C19874) *
               C50841 * C2133) *
              C50886 * C51102 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C51158 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C51157 -
           ((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                C19874 +
            C2732 * C19873 + C2731 * C19872 + C559 * C19871) *
               C50841 * C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C51157 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C17234 +
             C3696 * C51035) *
                C17236 +
            (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
               C2133) *
              C50886 * C51102 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C17854 + C17855) * C17238) *
               C51158 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C51157 -
           (((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                 C51035 +
             C561 * C17234) *
                C17238 +
            (C17557 + C17556) * C17237 + (C17555 + C17554) * C17236) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C51157 -
           ((C22548 + C22549 + C22550) * C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C51158 +
           ((C5191 * C497 - C5192 * C483 - C5191 * C498 + C5188 * C513 +
             C5193 * C1897 - C5194 * C1890 - C5193 * C1898 + C5189 * C1902 +
             C5195 * C5597 - C5196 * C5594 - C5195 * C5598 + C5190 * C5603) *
                C17234 +
            (C22984 + C22985 + C22986) * C51035) *
               C50841 * C2133) *
              C50886 * C51102 +
          (((C5645 + C5644 + C5643) * C17234 +
            (C6199 + C6200 + C6201) * C51035) *
               C50841 * C51158 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C51157 -
           ((C5195 * C6593 - C5196 * C6591 - C5195 * C6594 + C5190 * C6597 +
             C5193 * C4594 - C5194 * C4589 - C5193 * C4595 + C5189 * C4601 +
             C5191 * C1264 - C5192 * C1258 - C5191 * C1265 + C5188 * C1270) *
                C51035 +
            (C5648 + C5647 + C5646) * C17234) *
               C50841 * C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C1717 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C285 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C50966 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C1717) *
              C286 +
          (((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C1717 -
           (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                 C51035 +
             C3039 * C17234) *
                C17238 +
            (C3269 * C51035 + C2730 * C17234) * C17237 +
            (C4198 * C51035 + C3267 * C17234) * C17236) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C1717 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C50886 * C1068 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C17854 + C17855) * C17238) *
               C50966 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C1717) *
              C50886 * C1069 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C1717 -
           (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C51035 +
             C793 * C17234) *
                C17238 +
            (C17855 + C17854) * C17237 + C17853 * C17236) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C1717 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C50886 * C1068 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C50966 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C1717 -
           ((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                C19874 +
            C3039 * C19873 + C964 * C19872 + C557 * C19871) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C1717 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C285 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            C21019 * C19874) *
               C50841 * C50966 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C1717) *
              C286 +
          ((C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            C20573 * C19874) *
               C50841 * C1717 -
           ((C117 * C21009 - C118 * C21008 - C117 * C21010 + C50999 * C21011) *
                C19874 +
            C21019 * C19873 + C4198 * C19872 + C3267 * C19871) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C1717 -
           ((C22548 + C22549 + C22550) * C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C5645 + C5644 + C5643) * C17234 +
            (C6199 + C6200 + C6201) * C51035) *
               C50841 * C50966 -
           ((C5443 + C5444 + C5445) * C51035 +
            (C5254 + C5253 + C5252) * C17234) *
               C50841 * C1717) *
              C50886 * C1069 +
          (((C5257 + C5256 + C5255) * C17234 +
            (C5813 + C5814 + C5815) * C51035) *
               C50841 * C1717 -
           ((C5195 * C6177 - C5196 * C6176 - C5195 * C6178 + C5190 * C6179 +
             C5193 * C1262 - C5194 * C1257 - C5193 * C1263 + C5189 * C1269 +
             C5191 * C933 - C5192 * C926 - C5191 * C934 + C5188 * C941) *
                C51035 +
            (C5982 + C5981 + C5980) * C17234) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5191 * C126 - C5192 * C119 - C5191 * C127 + C5188 * C140 +
             C5193 * C495 - C5194 * C482 - C5193 * C496 + C5189 * C512 +
             C5195 * C497 - C5196 * C483 - C5195 * C498 + C5190 * C513) *
                C17234 +
            (C21892 + C21893 + C21894) * C51035) *
               C50841 * C1717 -
           ((C22548 + C22549 + C22550) * C51035 +
            (C5195 * C1897 - C5196 * C1890 - C5195 * C1898 + C5190 * C1902 +
             C5193 * C497 - C5194 * C483 - C5193 * C498 + C5189 * C513 +
             C5191 * C495 - C5192 * C482 - C5191 * C496 + C5188 * C512) *
                C17234) *
               C50841 * C50966) *
              C285 +
          (((C22550 + C22549 + C22548) * C17234 +
            (C23491 + C23492 + C23493) * C51035) *
               C50841 * C50966 -
           ((C21895 + C21896 + C21897) * C51035 +
            (C21894 + C21893 + C21892) * C17234) *
               C50841 * C1717) *
              C286 +
          (((C21897 + C21896 + C21895) * C17234 +
            (C22813 + C22814 + C22815) * C51035) *
               C50841 * C1717 -
           ((C5195 * C21282 - C5196 * C21281 - C5195 * C21283 + C5190 * C21284 +
             C5193 * C3679 - C5194 * C3676 - C5193 * C3680 + C5189 * C3682 +
             C5191 * C3237 - C5192 * C3234 - C5191 * C3238 + C5188 * C3243) *
                C51035 +
            (C23493 + C23492 + C23491) * C17234) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C50902 * C51110 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C50902 * C50938) *
              C51153 +
          (((C13844 * C17234 + C13855 * C51035) * C51095 +
            (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C50938 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C50902 * C51110) *
              C51154 +
          (((C10806 * C17234 + C14284 * C51035) * C51095 +
            ((C10803 + C10802) * C17234 + (C11374 + C11375) * C51035) *
                C50846) *
               C50902 * C51110 -
           (((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 +
              C51063 * C1615 + C10745 * C314 - C10746 * C297 - C10745 * C315 +
              C51124 * C327) *
                 C51035 +
             (C11375 + C11374) * C17234) *
                C50846 +
            ((C11011 + C11010) * C51035 + C11360 * C17234) * C51095) *
               C50902 * C50938) *
              C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
               C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                  C17234 +
              (C13876 + C13877) * C51035) *
                 C51095 +
             ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
                C51111 -
            ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
             ((C14763 + C14764) * C51035 +
              (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
               C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                  C17234) *
                 C51095) *
                C50966) *
               C51110 +
           ((((C14764 + C14763) * C17234 + (C15971 + C15972) * C51035) *
                 C51095 +
             (C14746 * C17234 + (C14765 + C14766) * C51035) * C50846) *
                C50966 -
            ((C13845 * C51035 + C13846 * C17234) * C50846 +
             ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                 C51095) *
                C51111) *
               C50938) *
              C288 +
          (((((C11209 + C11208) * C17234 + C14746 * C51035) * C51095 +
             ((C11207 + C11206) * C17234 + (C11758 + C11759) * C51035) *
                 C50846) *
                C50966 -
            ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
             (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
                C51111) *
               C51110 +
           (((C13844 * C17234 + C13855 * C51035) * C51095 +
             (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
                C51111 -
            (((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 +
               C51063 * C2707 + C10745 * C1609 - C10746 * C1604 -
               C10745 * C1610 + C51124 * C1616) *
                  C51035 +
              (C11759 + C11758) * C17234) *
                 C50846 +
             ((C14766 + C14765) * C51035 + C14737 * C17234) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C50902 * C285 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C50902 * C286 +
           (((C13879 + C13878) * C17234 + (C15103 + C15104) * C51035) * C51095 +
            (C13855 * C17234 + (C13880 + C13881) * C51035) * C50846) *
               C50902 * C287) *
              C288 +
          (((C13844 * C17234 + C13855 * C51035) * C51095 +
            (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C286 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C50902 * C285 -
           (((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 +
              C51063 * C3245 + C10745 * C1148 - C10746 * C1143 -
              C10745 * C1149 + C51124 * C1155) *
                 C51035 +
             (C11011 + C11010) * C17234) *
                C50846 +
            ((C13881 + C13880) * C51035 + C13845 * C17234) * C51095) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C17234 +
            (C13876 + C13877) * C51035) *
               C51095 +
           ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
              C50902 * C50886 * C113 -
          ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
           (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
              C50902 * C50886 * C114 +
          ((C10806 * C17234 + C14284 * C51035) * C51095 +
           ((C10803 + C10802) * C17234 + (C11374 + C11375) * C51035) * C50846) *
              C50902 * C50886 * C115 -
          (((C10747 * C937 - C10748 * C928 - C10747 * C938 + C51063 * C943 +
             C10745 * C316 - C10746 * C298 - C10745 * C317 + C51124 * C328) *
                C51035 +
            (C10805 + C10804) * C17234) *
               C50846 +
           ((C11375 + C11374) * C51035 + C10807 * C17234) * C51095) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C476 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C477 +
           (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
              C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
              C51063 * C1902) *
                 C17234 +
             (C15311 + C15312) * C51035) *
                C51095 +
            ((C11210 + C11211) * C17234 + (C14088 + C14089) * C51035) *
                C50846) *
               C478) *
              C50886 * C288 +
          ((((C11209 + C11208) * C17234 + C14746 * C51035) * C51095 +
            ((C11207 + C11206) * C17234 + (C11758 + C11759) * C51035) *
                C50846) *
               C477 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C476 -
           (((C10747 * C6177 - C10748 * C6176 - C10747 * C6178 +
              C51063 * C6179 + C10745 * C1262 - C10746 * C1257 -
              C10745 * C1263 + C51124 * C1269) *
                 C51035 +
             (C11213 + C11212) * C17234) *
                C50846 +
            ((C14089 + C14088) * C51035 + (C11211 + C11210) * C17234) *
                C51095) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C51111 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C50966) *
              C50886 * C51153 +
          ((((C11209 + C11208) * C17234 + C14746 * C51035) * C51095 +
            ((C11207 + C11206) * C17234 + (C11758 + C11759) * C51035) *
                C50846) *
               C50966 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C51111) *
              C50886 * C51154 +
          (((C10806 * C17234 + C14284 * C51035) * C51095 +
            ((C10803 + C10802) * C17234 + (C11374 + C11375) * C51035) *
                C50846) *
               C51111 -
           (((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C51035 +
             (C11537 + C11536) * C17234) *
                C50846 +
            ((C11759 + C11758) * C51035 + C11522 * C17234) * C51095) *
               C50966) *
              C50886 * C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C17234 +
            (C13876 + C13877) * C51035) *
               C51095 +
           ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
              C50902 * C50886 * C113 -
          ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
           (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
              C50902 * C50886 * C114 +
          ((C10806 * C17234 + C14284 * C51035) * C51095 +
           ((C10803 + C10802) * C17234 + (C11374 + C11375) * C51035) * C50846) *
              C50902 * C50886 * C115 -
          (((C10747 * C937 - C10748 * C928 - C10747 * C938 + C51063 * C943 +
             C10745 * C316 - C10746 * C298 - C10745 * C317 + C51124 * C328) *
                C51035 +
            (C10805 + C10804) * C17234) *
               C50846 +
           ((C11375 + C11374) * C51035 + C10807 * C17234) * C51095) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C50902 * C285 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C50902 * C286 +
           (((C13879 + C13878) * C17234 + (C15103 + C15104) * C51035) * C51095 +
            (C13855 * C17234 + (C13880 + C13881) * C51035) * C50846) *
               C50902 * C287) *
              C288 +
          (((C13844 * C17234 + C13855 * C51035) * C51095 +
            (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C286 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C50902 * C285 -
           (((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 +
              C51063 * C3245 + C10745 * C1148 - C10746 * C1143 -
              C10745 * C1149 + C51124 * C1155) *
                 C51035 +
             (C11011 + C11010) * C17234) *
                C50846 +
            ((C13881 + C13880) * C51035 + C13845 * C17234) * C51095) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C50902 * C51155 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C50902 * C51156 +
           (((C13879 + C13878) * C17234 + (C15103 + C15104) * C51035) * C51095 +
            (C13855 * C17234 + (C13880 + C13881) * C51035) * C50846) *
               C50902 * C1372) *
              C51102 +
          (((C13844 * C17234 + C13855 * C51035) * C51095 +
            (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C51156 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C50902 * C51155 -
           (((C10747 * C3241 - C10748 * C3236 - C10747 * C3242 +
              C51063 * C3245 + C10745 * C1148 - C10746 * C1143 -
              C10745 * C1149 + C51124 * C1155) *
                 C51035 +
             (C11011 + C11010) * C17234) *
                C50846 +
            ((C13881 + C13880) * C51035 + C13845 * C17234) * C51095) *
               C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C51111 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C50966) *
              C51155 +
          ((((C14764 + C14763) * C17234 + (C15971 + C15972) * C51035) * C51095 +
            (C14746 * C17234 + (C14765 + C14766) * C51035) * C50846) *
               C50966 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C51111) *
              C51156 +
          ((((C13879 + C13878) * C17234 + (C15103 + C15104) * C51035) * C51095 +
            (C13855 * C17234 + (C13880 + C13881) * C51035) * C50846) *
               C51111 -
           (((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C51035 +
             (C14766 + C14765) * C17234) *
                C50846 +
            ((C10747 * C3679 - C10748 * C3676 - C10747 * C3680 +
              C51063 * C3682 + C10745 * C3237 - C10746 * C3234 -
              C10745 * C3238 + C51124 * C3243) *
                 C51035 +
             (C15972 + C15971) * C17234) *
                C51095) *
               C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C17234 +
            (C13876 + C13877) * C51035) *
               C51095 +
           ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
              C50902 * C1137 -
          ((C13845 * C51035 + C13846 * C17234) * C50846 +
           ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) * C51095) *
              C50902 * C1138 +
          (((C13879 + C13878) * C17234 + (C15103 + C15104) * C51035) * C51095 +
           (C13855 * C17234 + (C13880 + C13881) * C51035) * C50846) *
              C50902 * C1139 -
          (((C10747 * C4185 - C10748 * C4183 - C10747 * C4186 + C51063 * C4189 +
             C10745 * C2495 - C10746 * C2491 - C10745 * C2496 +
             C51124 * C2500) *
                C51035 +
            (C13881 + C13880) * C17234) *
               C50846 +
           ((C10747 * C4187 - C10748 * C4184 - C10747 * C4188 + C51063 * C4190 +
             C10745 * C2493 - C10746 * C2490 - C10745 * C2494 +
             C51124 * C2499) *
                C51035 +
            (C15104 + C15103) * C17234) *
               C51095) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C50902 * C1066 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C50902 * C50938) *
              C1068 +
          (((C13844 * C17234 + C13855 * C51035) * C51095 +
            (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C50938 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C50902 * C1066) *
              C1069 +
          (((C10806 * C17234 + C14284 * C51035) * C51095 +
            ((C10803 + C10802) * C17234 + (C11374 + C11375) * C51035) *
                C50846) *
               C50902 * C1066 -
           (((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 +
              C51063 * C1615 + C10745 * C314 - C10746 * C297 - C10745 * C315 +
              C51124 * C327) *
                 C51035 +
             (C11375 + C11374) * C17234) *
                C50846 +
            ((C11011 + C11010) * C51035 + C11360 * C17234) * C51095) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C476 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C477 +
           (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
              C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
              C51063 * C1902) *
                 C17234 +
             (C15311 + C15312) * C51035) *
                C51095 +
            ((C11210 + C11211) * C17234 + (C14088 + C14089) * C51035) *
                C50846) *
               C478) *
              C1066 +
          ((((C14764 + C14763) * C17234 + (C15971 + C15972) * C51035) * C51095 +
            (C14746 * C17234 + (C14765 + C14766) * C51035) * C50846) *
               C477 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C476 -
           (((C10747 * C4592 - C10748 * C4588 - C10747 * C4593 +
              C51063 * C4600 + C10745 * C2701 - C10746 * C2697 -
              C10745 * C2702 + C51124 * C2706) *
                 C51035 +
             (C14089 + C14088) * C17234) *
                C50846 +
            ((C10747 * C4596 - C10748 * C4590 - C10747 * C4597 +
              C51063 * C4602 + C10745 * C2699 - C10746 * C2696 -
              C10745 * C2700 + C51124 * C2705) *
                 C51035 +
             (C15312 + C15311) * C17234) *
                C51095) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
               C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                  C17234 +
              (C13876 + C13877) * C51035) *
                 C51095 +
             ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
                C51111 -
            ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
             ((C14763 + C14764) * C51035 +
              (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
               C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                  C17234) *
                 C51095) *
                C50966) *
               C1066 +
           ((((C14764 + C14763) * C17234 + (C15971 + C15972) * C51035) *
                 C51095 +
             (C14746 * C17234 + (C14765 + C14766) * C51035) * C50846) *
                C50966 -
            ((C13845 * C51035 + C13846 * C17234) * C50846 +
             ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                 C51095) *
                C51111) *
               C50938) *
              C51102 +
          (((((C11209 + C11208) * C17234 + C14746 * C51035) * C51095 +
             ((C11207 + C11206) * C17234 + (C11758 + C11759) * C51035) *
                 C50846) *
                C50966 -
            ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
             (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
                C51111) *
               C1066 +
           (((C13844 * C17234 + C13855 * C51035) * C51095 +
             (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
                C51111 -
            (((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 +
               C51063 * C2707 + C10745 * C1609 - C10746 * C1604 -
               C10745 * C1610 + C51124 * C1616) *
                  C51035 +
              (C11759 + C11758) * C17234) *
                 C50846 +
             ((C14766 + C14765) * C51035 + C14737 * C17234) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C50902 * C1066 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C50902 * C50938) *
              C1068 +
          (((C13844 * C17234 + C13855 * C51035) * C51095 +
            (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
               C50902 * C50938 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C50902 * C1066) *
              C1069 +
          (((C10806 * C17234 + C14284 * C51035) * C51095 +
            ((C10803 + C10802) * C17234 + (C11374 + C11375) * C51035) *
                C50846) *
               C50902 * C1066 -
           (((C10747 * C1607 - C10748 * C1603 - C10747 * C1608 +
              C51063 * C1615 + C10745 * C314 - C10746 * C297 - C10745 * C315 +
              C51124 * C327) *
                 C51035 +
             (C11375 + C11374) * C17234) *
                C50846 +
            ((C11011 + C11010) * C51035 + C11360 * C17234) * C51095) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C17234 +
            (C13876 + C13877) * C51035) *
               C51095 +
           ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
              C50902 * C1137 -
          ((C13845 * C51035 + C13846 * C17234) * C50846 +
           ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) * C51095) *
              C50902 * C1138 +
          (((C13879 + C13878) * C17234 + (C15103 + C15104) * C51035) * C51095 +
           (C13855 * C17234 + (C13880 + C13881) * C51035) * C50846) *
              C50902 * C1139 -
          (((C10747 * C4185 - C10748 * C4183 - C10747 * C4186 + C51063 * C4189 +
             C10745 * C2495 - C10746 * C2491 - C10745 * C2496 +
             C51124 * C2500) *
                C51035 +
            (C13881 + C13880) * C17234) *
               C50846 +
           ((C10747 * C4187 - C10748 * C4184 - C10747 * C4188 + C51063 * C4190 +
             C10745 * C2493 - C10746 * C2490 - C10745 * C2494 +
             C51124 * C2499) *
                C51035 +
            (C15104 + C15103) * C17234) *
               C51095) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
               C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                  C17234 +
              (C13876 + C13877) * C51035) *
                 C51095 +
             ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
                C1717 -
            ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
             ((C14763 + C14764) * C51035 +
              (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
               C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                  C17234) *
                 C51095) *
                C50966) *
               C51110 +
           ((((C14764 + C14763) * C17234 + (C15971 + C15972) * C51035) *
                 C51095 +
             (C14746 * C17234 + (C14765 + C14766) * C51035) * C50846) *
                C50966 -
            ((C13845 * C51035 + C13846 * C17234) * C50846 +
             ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                 C51095) *
                C1717) *
               C50938) *
              C51102 +
          (((((C11209 + C11208) * C17234 + C14746 * C51035) * C51095 +
             ((C11207 + C11206) * C17234 + (C11758 + C11759) * C51035) *
                 C50846) *
                C50966 -
            ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
             (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
                C1717) *
               C51110 +
           (((C13844 * C17234 + C13855 * C51035) * C51095 +
             (C14284 * C17234 + (C11010 + C11011) * C51035) * C50846) *
                C1717 -
            (((C10747 * C2703 - C10748 * C2698 - C10747 * C2704 +
               C51063 * C2707 + C10745 * C1609 - C10746 * C1604 -
               C10745 * C1610 + C51124 * C1616) *
                  C51035 +
              (C11759 + C11758) * C17234) *
                 C50846 +
             ((C14766 + C14765) * C51035 + C14737 * C17234) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C51157 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C51158 +
           (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
              C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
              C51063 * C1902) *
                 C17234 +
             (C15311 + C15312) * C51035) *
                C51095 +
            ((C11210 + C11211) * C17234 + (C14088 + C14089) * C51035) *
                C50846) *
               C2133) *
              C51110 +
          ((((C14764 + C14763) * C17234 + (C15971 + C15972) * C51035) * C51095 +
            (C14746 * C17234 + (C14765 + C14766) * C51035) * C50846) *
               C51158 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C51157 -
           (((C10747 * C4592 - C10748 * C4588 - C10747 * C4593 +
              C51063 * C4600 + C10745 * C2701 - C10746 * C2697 -
              C10745 * C2702 + C51124 * C2706) *
                 C51035 +
             (C14089 + C14088) * C17234) *
                C50846 +
            ((C10747 * C4596 - C10748 * C4590 - C10747 * C4597 +
              C51063 * C4602 + C10745 * C2699 - C10746 * C2696 -
              C10745 * C2700 + C51124 * C2705) *
                 C51035 +
             (C15312 + C15311) * C17234) *
                C51095) *
               C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C1717 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C50966) *
              C285 +
          ((((C14764 + C14763) * C17234 + (C15971 + C15972) * C51035) * C51095 +
            (C14746 * C17234 + (C14765 + C14766) * C51035) * C50846) *
               C50966 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C1717) *
              C286 +
          ((((C13879 + C13878) * C17234 + (C15103 + C15104) * C51035) * C51095 +
            (C13855 * C17234 + (C13880 + C13881) * C51035) * C50846) *
               C1717 -
           (((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C51035 +
             (C14766 + C14765) * C17234) *
                C50846 +
            ((C10747 * C3679 - C10748 * C3676 - C10747 * C3680 +
              C51063 * C3682 + C10745 * C3237 - C10746 * C3234 -
              C10745 * C3238 + C51124 * C3243) *
                 C51035 +
             (C15972 + C15971) * C17234) *
                C51095) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C1717 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C50966) *
              C50886 * C1068 +
          ((((C11209 + C11208) * C17234 + C14746 * C51035) * C51095 +
            ((C11207 + C11206) * C17234 + (C11758 + C11759) * C51035) *
                C50846) *
               C50966 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C1717) *
              C50886 * C1069 +
          (((C10806 * C17234 + C14284 * C51035) * C51095 +
            ((C10803 + C10802) * C17234 + (C11374 + C11375) * C51035) *
                C50846) *
               C1717 -
           (((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C51035 +
             (C11537 + C11536) * C17234) *
                C50846 +
            ((C11759 + C11758) * C51035 + C11522 * C17234) * C51095) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
             C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                C17234 +
            (C13876 + C13877) * C51035) *
               C51095 +
           ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
              C1883 -
          ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
           ((C14763 + C14764) * C51035 +
            (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
             C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                C17234) *
               C51095) *
              C1884 +
          (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
             C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
             C51063 * C1902) *
                C17234 +
            (C15311 + C15312) * C51035) *
               C51095 +
           ((C11210 + C11211) * C17234 + (C14088 + C14089) * C51035) * C50846) *
              C1885 -
          (((C10747 * C6593 - C10748 * C6591 - C10747 * C6594 + C51063 * C6597 +
             C10745 * C4594 - C10746 * C4589 - C10745 * C4595 +
             C51124 * C4601) *
                C51035 +
            (C10747 * C5599 - C10748 * C5595 - C10747 * C5600 + C51063 * C5604 +
             C10745 * C1895 - C10746 * C1889 - C10745 * C1896 +
             C51124 * C1901) *
                C17234) *
               C50846 +
           ((C10747 * C6595 - C10748 * C6592 - C10747 * C6596 + C51063 * C6598 +
             C10745 * C4598 - C10746 * C4591 - C10745 * C4599 +
             C51124 * C4603) *
                C51035 +
            (C10747 * C5597 - C10748 * C5594 - C10747 * C5598 + C51063 * C5603 +
             C10745 * C1897 - C10746 * C1890 - C10745 * C1898 +
             C51124 * C1902) *
                C17234) *
               C51095) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C51157 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C51158 +
           (((C10745 * C497 - C10746 * C483 - C10745 * C498 + C51124 * C513 +
              C10747 * C1897 - C10748 * C1890 - C10747 * C1898 +
              C51063 * C1902) *
                 C17234 +
             (C15311 + C15312) * C51035) *
                C51095 +
            ((C11210 + C11211) * C17234 + (C14088 + C14089) * C51035) *
                C50846) *
               C2133) *
              C50886 * C51102 +
          ((((C11209 + C11208) * C17234 + C14746 * C51035) * C51095 +
            ((C11207 + C11206) * C17234 + (C11758 + C11759) * C51035) *
                C50846) *
               C51158 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C51157 -
           (((C10747 * C6177 - C10748 * C6176 - C10747 * C6178 +
              C51063 * C6179 + C10745 * C1262 - C10746 * C1257 -
              C10745 * C1263 + C51124 * C1269) *
                 C51035 +
             (C11213 + C11212) * C17234) *
                C50846 +
            ((C14089 + C14088) * C51035 + (C11211 + C11210) * C17234) *
                C51095) *
               C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C1717 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C50966) *
              C50886 * C1068 +
          ((((C11209 + C11208) * C17234 + C14746 * C51035) * C51095 +
            ((C11207 + C11206) * C17234 + (C11758 + C11759) * C51035) *
                C50846) *
               C50966 -
           ((C11360 * C51035 + (C10801 + C10800) * C17234) * C50846 +
            (C13846 * C51035 + (C10799 + C10798) * C17234) * C51095) *
               C1717) *
              C50886 * C1069 +
          (((C10806 * C17234 + C14284 * C51035) * C51095 +
            ((C10803 + C10802) * C17234 + (C11374 + C11375) * C51035) *
                C50846) *
               C1717 -
           (((C10747 * C1260 - C10748 * C1256 - C10747 * C1261 +
              C51063 * C1268 + C10745 * C935 - C10746 * C927 - C10745 * C936 +
              C51124 * C942) *
                 C51035 +
             (C11537 + C11536) * C17234) *
                C50846 +
            ((C11759 + C11758) * C51035 + C11522 * C17234) * C51095) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10745 * C126 - C10746 * C119 - C10745 * C127 + C51124 * C140 +
              C10747 * C495 - C10748 * C482 - C10747 * C496 + C51063 * C512) *
                 C17234 +
             (C13876 + C13877) * C51035) *
                C51095 +
            ((C10798 + C10799) * C17234 + C13844 * C51035) * C50846) *
               C1717 -
           ((C14737 * C51035 + (C11208 + C11209) * C17234) * C50846 +
            ((C14763 + C14764) * C51035 +
             (C10747 * C497 - C10748 * C483 - C10747 * C498 + C51063 * C513 +
              C10745 * C495 - C10746 * C482 - C10745 * C496 + C51124 * C512) *
                 C17234) *
                C51095) *
               C50966) *
              C285 +
          ((((C14764 + C14763) * C17234 + (C15971 + C15972) * C51035) * C51095 +
            (C14746 * C17234 + (C14765 + C14766) * C51035) * C50846) *
               C50966 -
           ((C13845 * C51035 + C13846 * C17234) * C50846 +
            ((C13878 + C13879) * C51035 + (C13877 + C13876) * C17234) *
                C51095) *
               C1717) *
              C286 +
          ((((C13879 + C13878) * C17234 + (C15103 + C15104) * C51035) * C51095 +
            (C13855 * C17234 + (C13880 + C13881) * C51035) * C50846) *
               C1717 -
           (((C10747 * C3677 - C10748 * C3675 - C10747 * C3678 +
              C51063 * C3681 + C10745 * C3239 - C10746 * C3235 -
              C10745 * C3240 + C51124 * C3244) *
                 C51035 +
             (C14766 + C14765) * C17234) *
                C50846 +
            ((C10747 * C3679 - C10748 * C3676 - C10747 * C3680 +
              C51063 * C3682 + C10745 * C3237 - C10746 * C3234 -
              C10745 * C3238 + C51124 * C3243) *
                 C51035 +
             (C15972 + C15971) * C17234) *
                C51095) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C51110 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C50938) *
              C51153 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C17705 + C17706) * C17238) *
               C50902 * C50938 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C51110) *
              C51154 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C50902 * C51110 -
           (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                 C51035 +
             C681 * C17234) *
                C17238 +
            (C17706 + C17705) * C17237 + C17704 * C17236) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C51110 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C50938) *
              C51153 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C50938 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C51110) *
              C51154 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C50902 * C51110 -
           ((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C19874 +
            C2547 * C19873 + C371 * C19872 + C368 * C19871) *
               C50841 * C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C17234 +
              C2542 * C51035) *
                 C17236 +
             (C17240 + C17241) * C17237 + C17248 * C17238) *
                C51111 -
            (C17853 * C17238 + (C17552 + C17553) * C17237 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C17234) *
                 C17236) *
                C50966) *
               C51110 +
           (((C3268 * C17234 + C3267 * C51035) * C17236 +
             (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
                C50966 -
            (C17704 * C17238 + (C17398 + C17399) * C17237 +
             (C2543 * C51035 + C2542 * C17234) * C17236) *
                C51111) *
               C50938) *
              C288 +
          ((((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
             (C17854 + C17855) * C17238) *
                C50966 -
            (C17249 * C17238 + (C17243 + C17242) * C17237 +
             (C17241 + C17240) * C17236) *
                C51111) *
               C51110 +
           (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
             (C17705 + C17706) * C17238) *
                C51111 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C17234) *
                 C17238 +
             (C18053 + C18052) * C17237 + (C18051 + C18050) * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C19871 +
             C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
                C50841 * C51111 -
            (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C19871) *
                C50841 * C50966) *
               C51110 +
           ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
             (C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C19874) *
                C50841 * C50966 -
            (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 +
             C2542 * C19871) *
                C50841 * C51111) *
               C50938) *
              C288 +
          (((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
                C50841 * C50966 -
            (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
                C50841 * C51111) *
               C51110 +
           ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
                C50841 * C51111 -
            ((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C19874 +
             C3269 * C19873 + C2730 * C19872 + C963 * C19871) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C285 -
           ((C17396 + C17397) * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C286 +
           ((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C50902 * C287) *
              C288 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C367 * C17234 + C372 * C51035) * C17238) *
               C50902 * C286 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C285 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C51035 +
             C372 * C17234) *
                C17238 +
            (C17403 + C17402) * C17237 + (C17401 + C17400) * C17236) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C17234 +
            C2542 * C51035) *
               C17236 +
           (C17240 + C17241) * C17237 + C17248 * C17238) *
              C50902 * C50886 * C113 -
          (C17249 * C17238 + (C17243 + C17242) * C17237 +
           (C17241 + C17240) * C17236) *
              C50902 * C50886 * C114 +
          (C17248 * C17236 + (C17245 + C17244) * C17237 +
           (C17246 + C17247) * C17238) *
              C50902 * C50886 * C115 -
          (((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C51035 +
            C182 * C17234) *
               C17238 +
           (C17247 + C17246) * C17237 + C17249 * C17236) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C476 -
           ((C17550 + C17551) * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C17234 +
             C3696 * C51035) *
                C17236 +
            (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
               C478) *
              C50886 * C288 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C556 * C17234 + C965 * C51035) * C17238) *
               C477 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C476 -
           (((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                 C51035 +
             C561 * C17234) *
                C17238 +
            (C17557 + C17556) * C17237 + (C17555 + C17554) * C17236) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C50902 * C50886 * C113 -
          (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
              C50841 * C50902 * C50886 * C114 +
          (C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
              C50841 * C50902 * C50886 * C115 -
          ((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
               C19874 +
           C372 * C19873 + C367 * C19872 + C180 * C19871) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C285 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C286 +
           (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            (C117 * C3518 - C118 * C3515 - C117 * C3519 + C50999 * C3521) *
                C19874) *
               C50841 * C50902 * C287) *
              C288 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C286 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C285 -
           ((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C19874 +
            C2546 * C19873 + C2544 * C19872 + C370 * C19871) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C476 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C477 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
            C3696 * C19872 + C3697 * C19873 +
            (C117 * C3679 - C118 * C3676 - C117 * C3680 + C50999 * C3682) *
                C19874) *
               C50841 * C478) *
              C50886 * C288 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C477 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C476 -
           ((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                C19874 +
            C2732 * C19873 + C2731 * C19872 + C559 * C19871) *
               C50841 * C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C51111 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C50886 * C51153 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C17854 + C17855) * C17238) *
               C50966 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C51111) *
              C50886 * C51154 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C51111 -
           (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C51035 +
             C793 * C17234) *
                C17238 +
            (C17855 + C17854) * C17237 + C17853 * C17236) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C51111 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C50886 * C51153 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C50966 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C51111) *
              C50886 * C51154 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C51111 -
           ((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                C19874 +
            C3039 * C19873 + C964 * C19872 + C557 * C19871) *
               C50841 * C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C17234 +
            C2542 * C51035) *
               C17236 +
           (C17240 + C17241) * C17237 + C17248 * C17238) *
              C50902 * C50886 * C113 -
          (C17249 * C17238 + (C17243 + C17242) * C17237 +
           (C17241 + C17240) * C17236) *
              C50902 * C50886 * C114 +
          (C17248 * C17236 + (C17245 + C17244) * C17237 +
           (C17246 + C17247) * C17238) *
              C50902 * C50886 * C115 -
          (((C117 * C671 - C118 * C670 - C117 * C672 + C50999 * C673) * C51035 +
            C182 * C17234) *
               C17238 +
           (C17247 + C17246) * C17237 + C17249 * C17236) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C285 -
           ((C17396 + C17397) * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C286 +
           ((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C50902 * C287) *
              C288 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C367 * C17234 + C372 * C51035) * C17238) *
               C50902 * C286 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C285 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C51035 +
             C372 * C17234) *
                C17238 +
            (C17403 + C17402) * C17237 + (C17401 + C17400) * C17236) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C50902 * C50886 * C113 -
          (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
              C50841 * C50902 * C50886 * C114 +
          (C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
              C50841 * C50902 * C50886 * C115 -
          ((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
               C19874 +
           C372 * C19873 + C367 * C19872 + C180 * C19871) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C285 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C286 +
           (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            (C117 * C3518 - C118 * C3515 - C117 * C3519 + C50999 * C3521) *
                C19874) *
               C50841 * C50902 * C287) *
              C288 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C286 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C285 -
           ((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C19874 +
            C2546 * C19873 + C2544 * C19872 + C370 * C19871) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C51155 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C51156 +
           ((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C50902 * C1372) *
              C51102 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C17705 + C17706) * C17238) *
               C50902 * C51156 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C51155 -
           (((C117 * C1146 - C118 * C1142 - C117 * C1147 + C50999 * C1154) *
                 C51035 +
             C372 * C17234) *
                C17238 +
            (C17403 + C17402) * C17237 + (C17401 + C17400) * C17236) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C51155 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C51156 +
           (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            C20573 * C19874) *
               C50841 * C50902 * C1372) *
              C51102 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C51156 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C51155 -
           ((C117 * C3516 - C118 * C3514 - C117 * C3517 + C50999 * C3520) *
                C19874 +
            C2546 * C19873 + C2544 * C19872 + C370 * C19871) *
               C50841 * C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C51111 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C51155 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C50966 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C51111) *
              C51156 +
          (((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C51111 -
           (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                 C51035 +
             C3039 * C17234) *
                C17238 +
            (C3269 * C51035 + C2730 * C17234) * C17237 +
            (C4198 * C51035 + C3267 * C17234) * C17236) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C51111 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C51155 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            C21019 * C19874) *
               C50841 * C50966 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C51111) *
              C51156 +
          ((C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            C20573 * C19874) *
               C50841 * C51111 -
           ((C117 * C21009 - C118 * C21008 - C117 * C21010 + C50999 * C21011) *
                C19874 +
            C21019 * C19873 + C4198 * C19872 + C3267 * C19871) *
               C50841 * C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C17234 +
            C2542 * C51035) *
               C17236 +
           (C17240 + C17241) * C17237 + C17248 * C17238) *
              C50902 * C1137 -
          (C17704 * C17238 + (C17398 + C17399) * C17237 +
           (C2543 * C51035 + C2542 * C17234) * C17236) *
              C50902 * C1138 +
          ((C2543 * C17234 + C2545 * C51035) * C17236 +
           (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
              C50902 * C1139 -
          (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C51035 +
            C2547 * C17234) *
               C17238 +
           (C2546 * C51035 + C2544 * C17234) * C17237 +
           (C3529 * C51035 + C2545 * C17234) * C17236) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C1066 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C50938) *
              C1068 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C17705 + C17706) * C17238) *
               C50902 * C50938 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C1066) *
              C1069 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C50902 * C1066 -
           (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                 C51035 +
             C681 * C17234) *
                C17238 +
            (C17706 + C17705) * C17237 + C17704 * C17236) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C476 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C477 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C17234 +
             C3696 * C51035) *
                C17236 +
            (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
               C478) *
              C1066 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C477 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C476 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C51035 +
             C8396 * C17234) *
                C17238 +
            (C2732 * C51035 + C2731 * C17234) * C17237 +
            (C3697 * C51035 + C3696 * C17234) * C17236) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C1066 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C50938) *
              C1068 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C50938 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C50902 * C1066 -
           ((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C19874 +
            C2547 * C19873 + C371 * C19872 + C368 * C19871) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C50902 * C1137 -
          (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
              C50841 * C50902 * C1138 +
          (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 + C20573 * C19874) *
              C50841 * C50902 * C1139 -
          ((C117 * C20563 - C118 * C20562 - C117 * C20564 + C50999 * C20565) *
               C19874 +
           C20573 * C19873 + C3529 * C19872 + C2545 * C19871) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C476 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C477 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
            C3696 * C19872 + C3697 * C19873 + C20682 * C19874) *
               C50841 * C478) *
              C1066 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            (C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                C19874) *
               C50841 * C477 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C476 -
           ((C117 * C20672 - C118 * C20671 - C117 * C20673 + C50999 * C20674) *
                C19874 +
            C20682 * C19873 + C3697 * C19872 + C3696 * C19871) *
               C50841 * C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C17234 +
              C2542 * C51035) *
                 C17236 +
             (C17240 + C17241) * C17237 + C17248 * C17238) *
                C51111 -
            (C17853 * C17238 + (C17552 + C17553) * C17237 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C17234) *
                 C17236) *
                C50966) *
               C1066 +
           (((C3268 * C17234 + C3267 * C51035) * C17236 +
             (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
                C50966 -
            (C17704 * C17238 + (C17398 + C17399) * C17237 +
             (C2543 * C51035 + C2542 * C17234) * C17236) *
                C51111) *
               C50938) *
              C51102 +
          ((((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
             (C17854 + C17855) * C17238) *
                C50966 -
            (C17249 * C17238 + (C17243 + C17242) * C17237 +
             (C17241 + C17240) * C17236) *
                C51111) *
               C1066 +
           (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
             (C17705 + C17706) * C17238) *
                C51111 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C17234) *
                 C17238 +
             (C18053 + C18052) * C17237 + (C18051 + C18050) * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C19871 +
             C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
                C50841 * C51111 -
            (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C19871) *
                C50841 * C50966) *
               C1066 +
           ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
             (C117 * C4187 - C118 * C4184 - C117 * C4188 + C50999 * C4190) *
                 C19874) *
                C50841 * C50966 -
            (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 +
             C2542 * C19871) *
                C50841 * C51111) *
               C50938) *
              C51102 +
          (((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
                C50841 * C50966 -
            (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
                C50841 * C51111) *
               C1066 +
           ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
                C50841 * C51111 -
            ((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C19874 +
             C3269 * C19873 + C2730 * C19872 + C963 * C19871) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C50902 * C1066 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C50902 * C50938) *
              C1068 +
          (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
            (C17705 + C17706) * C17238) *
               C50902 * C50938 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C50902 * C1066) *
              C1069 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C50902 * C1066 -
           (((C117 * C318 - C118 * C299 - C117 * C319 + C50999 * C329) *
                 C51035 +
             C681 * C17234) *
                C17238 +
            (C17706 + C17705) * C17237 + C17704 * C17236) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C17234 +
            C2542 * C51035) *
               C17236 +
           (C17240 + C17241) * C17237 + C17248 * C17238) *
              C50902 * C1137 -
          (C17704 * C17238 + (C17398 + C17399) * C17237 +
           (C2543 * C51035 + C2542 * C17234) * C17236) *
              C50902 * C1138 +
          ((C2543 * C17234 + C2545 * C51035) * C17236 +
           (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
              C50902 * C1139 -
          (((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C51035 +
            C2547 * C17234) *
               C17238 +
           (C2546 * C51035 + C2544 * C17234) * C17237 +
           (C3529 * C51035 + C2545 * C17234) * C17236) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C50902 * C1066 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C50902 * C50938) *
              C1068 +
          ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
               C50841 * C50902 * C50938 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C50902 * C1066 -
           ((C117 * C2497 - C118 * C2492 - C117 * C2498 + C50999 * C2501) *
                C19874 +
            C2547 * C19873 + C371 * C19872 + C368 * C19871) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C50902 * C1137 -
          (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
              C50841 * C50902 * C1138 +
          (C2543 * C19871 + C2545 * C19872 + C3529 * C19873 + C20573 * C19874) *
              C50841 * C50902 * C1139 -
          ((C117 * C20563 - C118 * C20562 - C117 * C20564 + C50999 * C20565) *
               C19874 +
           C20573 * C19873 + C3529 * C19872 + C2545 * C19871) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                  C17234 +
              C2542 * C51035) *
                 C17236 +
             (C17240 + C17241) * C17237 + C17248 * C17238) *
                C1717 -
            (C17853 * C17238 + (C17552 + C17553) * C17237 +
             (C3268 * C51035 +
              (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                  C17234) *
                 C17236) *
                C50966) *
               C51110 +
           (((C3268 * C17234 + C3267 * C51035) * C17236 +
             (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
                C50966 -
            (C17704 * C17238 + (C17398 + C17399) * C17237 +
             (C2543 * C51035 + C2542 * C17234) * C17236) *
                C1717) *
               C50938) *
              C51102 +
          ((((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
             (C17854 + C17855) * C17238) *
                C50966 -
            (C17249 * C17238 + (C17243 + C17242) * C17237 +
             (C17241 + C17240) * C17236) *
                C1717) *
               C51110 +
           (((C17399 + C17398) * C17236 + (C17397 + C17396) * C17237 +
             (C17705 + C17706) * C17238) *
                C1717 -
            (((C117 * C1607 - C118 * C1603 - C117 * C1608 + C50999 * C1615) *
                  C51035 +
              C965 * C17234) *
                 C17238 +
             (C18053 + C18052) * C17237 + (C18051 + C18050) * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C19871 +
             C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
                C50841 * C1717 -
            (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C19871) *
                C50841 * C50966) *
               C51110 +
           ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
             C21019 * C19874) *
                C50841 * C50966 -
            (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 +
             C2542 * C19871) *
                C50841 * C1717) *
               C50938) *
              C51102 +
          (((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
                C50841 * C50966 -
            (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
                C50841 * C1717) *
               C51110 +
           ((C369 * C19871 + C370 * C19872 + C2544 * C19873 + C2546 * C19874) *
                C50841 * C1717 -
            ((C117 * C4185 - C118 * C4183 - C117 * C4186 + C50999 * C4189) *
                 C19874 +
             C3269 * C19873 + C2730 * C19872 + C963 * C19871) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C51157 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C17234 +
             C3696 * C51035) *
                C17236 +
            (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
               C2133) *
              C51110 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C51158 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C51157 -
           (((C117 * C2703 - C118 * C2698 - C117 * C2704 + C50999 * C2707) *
                 C51035 +
             C8396 * C17234) *
                C17238 +
            (C2732 * C51035 + C2731 * C17234) * C17237 +
            (C3697 * C51035 + C3696 * C17234) * C17236) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C51157 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C51158 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
            C3696 * C19872 + C3697 * C19873 + C20682 * C19874) *
               C50841 * C2133) *
              C51110 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            C21019 * C19874) *
               C50841 * C51158 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C51157 -
           ((C117 * C20672 - C118 * C20671 - C117 * C20673 + C50999 * C20674) *
                C19874 +
            C20682 * C19873 + C3697 * C19872 + C3696 * C19871) *
               C50841 * C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C1717 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C285 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C50966 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C1717) *
              C286 +
          (((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C1717 -
           (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                 C51035 +
             C3039 * C17234) *
                C17238 +
            (C3269 * C51035 + C2730 * C17234) * C17237 +
            (C4198 * C51035 + C3267 * C17234) * C17236) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C1717 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C50886 * C1068 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C17854 + C17855) * C17238) *
               C50966 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C1717) *
              C50886 * C1069 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C1717 -
           (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C51035 +
             C793 * C17234) *
                C17238 +
            (C17855 + C17854) * C17237 + C17853 * C17236) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C17234 +
            C2542 * C51035) *
               C17236 +
           (C17240 + C17241) * C17237 + C17248 * C17238) *
              C1883 -
          (C17853 * C17238 + (C17552 + C17553) * C17237 +
           (C3268 * C51035 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C17234) *
               C17236) *
              C1884 +
          (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C17234 +
            C3696 * C51035) *
               C17236 +
           (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
              C1885 -
          (((C117 * C6177 - C118 * C6176 - C117 * C6178 + C50999 * C6179) *
                C51035 +
            (C117 * C1893 - C118 * C1888 - C117 * C1894 + C50999 * C1900) *
                C17234) *
               C17238 +
           ((C117 * C4594 - C118 * C4589 - C117 * C4595 + C50999 * C4601) *
                C51035 +
            (C117 * C1895 - C118 * C1889 - C117 * C1896 + C50999 * C1901) *
                C17234) *
               C17237 +
           ((C117 * C4598 - C118 * C4591 - C117 * C4599 + C50999 * C4603) *
                C51035 +
            (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
                C17234) *
               C17236) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C1717 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C50886 * C1068 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C50966 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C1717 -
           ((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                C19874 +
            C3039 * C19873 + C964 * C19872 + C557 * C19871) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C1717 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C285 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            C21019 * C19874) *
               C50841 * C50966 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C1717) *
              C286 +
          ((C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            C20573 * C19874) *
               C50841 * C1717 -
           ((C117 * C21009 - C118 * C21008 - C117 * C21010 + C50999 * C21011) *
                C19874 +
            C21019 * C19873 + C4198 * C19872 + C3267 * C19871) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
           C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
              C50841 * C1883 -
          (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
           (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) * C19871) *
              C50841 * C1884 +
          ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
           C3696 * C19872 + C3697 * C19873 + C20682 * C19874) *
              C50841 * C1885 -
          ((C117 * C21282 - C118 * C21281 - C117 * C21283 + C50999 * C21284) *
               C19874 +
           (C117 * C4596 - C118 * C4590 - C117 * C4597 + C50999 * C4602) *
               C19873 +
           (C117 * C4598 - C118 * C4591 - C117 * C4599 + C50999 * C4603) *
               C19872 +
           (C117 * C1897 - C118 * C1890 - C117 * C1898 + C50999 * C1902) *
               C19871) *
              C50841 * C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C51157 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C51158 +
           (((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) *
                 C17234 +
             C3696 * C51035) *
                C17236 +
            (C17554 + C17555) * C17237 + (C17556 + C17557) * C17238) *
               C2133) *
              C50886 * C51102 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C17854 + C17855) * C17238) *
               C51158 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C51157 -
           (((C117 * C1260 - C118 * C1256 - C117 * C1261 + C50999 * C1268) *
                 C51035 +
             C561 * C17234) *
                C17238 +
            (C17557 + C17556) * C17237 + (C17555 + C17554) * C17236) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C51157 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C51158 +
           ((C117 * C497 - C118 * C483 - C117 * C498 + C50999 * C513) * C19871 +
            C3696 * C19872 + C3697 * C19873 + C20682 * C19874) *
               C50841 * C2133) *
              C50886 * C51102 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C51158 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C51157 -
           ((C117 * C3677 - C118 * C3675 - C117 * C3678 + C50999 * C3681) *
                C19874 +
            C2732 * C19873 + C2731 * C19872 + C559 * C19871) *
               C50841 * C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C1717 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C50886 * C1068 +
          (((C17553 + C17552) * C17236 + (C17551 + C17550) * C17237 +
            (C17854 + C17855) * C17238) *
               C50966 -
           (C17249 * C17238 + (C17243 + C17242) * C17237 +
            (C17241 + C17240) * C17236) *
               C1717) *
              C50886 * C1069 +
          ((C17248 * C17236 + (C17245 + C17244) * C17237 +
            (C17246 + C17247) * C17238) *
               C1717 -
           (((C117 * C937 - C118 * C928 - C117 * C938 + C50999 * C943) *
                 C51035 +
             C793 * C17234) *
                C17238 +
            (C17855 + C17854) * C17237 + C17853 * C17236) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) *
                 C17234 +
             C2542 * C51035) *
                C17236 +
            (C17240 + C17241) * C17237 + C17248 * C17238) *
               C1717 -
           (C17853 * C17238 + (C17552 + C17553) * C17237 +
            (C3268 * C51035 +
             (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                 C17234) *
                C17236) *
               C50966) *
              C285 +
          (((C3268 * C17234 + C3267 * C51035) * C17236 +
            (C18050 + C18051) * C17237 + (C18052 + C18053) * C17238) *
               C50966 -
           (C17704 * C17238 + (C17398 + C17399) * C17237 +
            (C2543 * C51035 + C2542 * C17234) * C17236) *
               C1717) *
              C286 +
          (((C2543 * C17234 + C2545 * C51035) * C17236 +
            (C17400 + C17401) * C17237 + (C17402 + C17403) * C17238) *
               C1717 -
           (((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                 C51035 +
             C3039 * C17234) *
                C17238 +
            (C3269 * C51035 + C2730 * C17234) * C17237 +
            (C4198 * C51035 + C3267 * C17234) * C17236) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C1717 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C50886 * C1068 +
          ((C558 * C19871 + C963 * C19872 + C2730 * C19873 + C3269 * C19874) *
               C50841 * C50966 -
           (C2544 * C19874 + C370 * C19873 + C369 * C19872 + C178 * C19871) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C179 * C19871 + C368 * C19872 + C371 * C19873 + C2547 * C19874) *
               C50841 * C1717 -
           ((C117 * C3241 - C118 * C3236 - C117 * C3242 + C50999 * C3245) *
                C19874 +
            C3039 * C19873 + C964 * C19872 + C557 * C19871) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50999 * C140) * C19871 +
            C2542 * C19872 + C2543 * C19873 + C2545 * C19874) *
               C50841 * C1717 -
           (C4198 * C19874 + C3267 * C19873 + C3268 * C19872 +
            (C117 * C495 - C118 * C482 - C117 * C496 + C50999 * C512) *
                C19871) *
               C50841 * C50966) *
              C285 +
          ((C3268 * C19871 + C3267 * C19872 + C4198 * C19873 +
            C21019 * C19874) *
               C50841 * C50966 -
           (C3529 * C19874 + C2545 * C19873 + C2543 * C19872 + C2542 * C19871) *
               C50841 * C1717) *
              C286 +
          ((C2543 * C19871 + C2545 * C19872 + C3529 * C19873 +
            C20573 * C19874) *
               C50841 * C1717 -
           ((C117 * C21009 - C118 * C21008 - C117 * C21010 + C50999 * C21011) *
                C19874 +
            C21019 * C19873 + C4198 * C19872 + C3267 * C19871) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C50902 * C51110 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C50902 * C50938) *
              C51153 +
          (((C40958 * C51123 + C40960 * C51035) * C51095 +
            (C41363 * C51123 + (C33566 + C33567) * C51035) * C50846) *
               C50902 * C50938 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C50902 * C51110) *
              C51154 +
          (((C33362 * C51123 + C41363 * C51035) * C51095 +
            ((C33359 + C33358) * C51123 + (C33930 + C33931) * C51035) *
                C50846) *
               C50902 * C51110 -
           (((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 +
              C51063 * C1615 + C33301 * C314 - C33302 * C297 - C33301 * C315 +
              C33299 * C327) *
                 C51035 +
             (C33931 + C33930) * C51123) *
                C50846 +
            ((C33567 + C33566) * C51035 + C33916 * C51123) * C51095) *
               C50902 * C50938) *
              C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
               C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                  C51123 +
              (C36361 + C36362) * C51035) *
                 C51095 +
             ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
                C51111 -
            ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
             ((C37040 + C37041) * C51035 +
              (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
               C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                  C51123) *
                 C51095) *
                C50966) *
               C51110 +
           ((((C37041 + C37040) * C51123 + (C37039 + C37038) * C51035) *
                 C51095 +
             (C41817 * C51123 + (C37042 + C37043) * C51035) * C50846) *
                C50966 -
            ((C36344 * C51035 + C40959 * C51123) * C50846 +
             ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                 C51095) *
                C51111) *
               C50938) *
              C288 +
          (((((C33765 + C33764) * C51123 + C41817 * C51035) * C51095 +
             ((C33763 + C33762) * C51123 + (C34314 + C34315) * C51035) *
                 C50846) *
                C50966 -
            ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
             (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
                C51111) *
               C51110 +
           (((C40958 * C51123 + C40960 * C51035) * C51095 +
             (C41363 * C51123 + (C33566 + C33567) * C51035) * C50846) *
                C51111 -
            (((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 +
               C51063 * C2707 + C33301 * C1609 - C33302 * C1604 -
               C33301 * C1610 + C33299 * C1616) *
                  C51035 +
              (C34315 + C34314) * C51123) *
                 C50846 +
             ((C37043 + C37042) * C51035 + C41816 * C51123) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C50902 * C285 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C50902 * C286 +
           ((C36369 * C51123 + (C36366 + C36365) * C51035) * C51095 +
            (C40960 * C51123 + (C36367 + C36368) * C51035) * C50846) *
               C50902 * C287) *
              C288 +
          (((C40958 * C51123 + C40960 * C51035) * C51095 +
            ((C33561 + C33560) * C51123 + (C33566 + C33567) * C51035) *
                C50846) *
               C50902 * C286 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C50902 * C285 -
           (((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 +
              C51063 * C3245 + C33301 * C1148 - C33302 * C1143 -
              C33301 * C1149 + C33299 * C1155) *
                 C51035 +
             (C33567 + C33566) * C51123) *
                C50846 +
            ((C36368 + C36367) * C51035 + C36344 * C51123) * C51095) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C51123 +
            (C36361 + C36362) * C51035) *
               C51095 +
           ((C33354 + C33355) * C51123 + (C33563 + C33562) * C51035) * C50846) *
              C50902 * C50886 * C113 -
          ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
           ((C33562 + C33563) * C51035 + (C33355 + C33354) * C51123) * C51095) *
              C50902 * C50886 * C114 +
          ((C33362 * C51123 + (C33561 + C33560) * C51035) * C51095 +
           ((C33359 + C33358) * C51123 + (C33930 + C33931) * C51035) * C50846) *
              C50902 * C50886 * C115 -
          (((C33303 * C937 - C33304 * C928 - C33303 * C938 + C51063 * C943 +
             C33301 * C316 - C33302 * C298 - C33301 * C317 + C33299 * C328) *
                C51035 +
            (C33361 + C33360) * C51123) *
               C50846 +
           ((C33931 + C33930) * C51035 + C33363 * C51123) * C51095) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C476 -
           (((C34313 + C34312) * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C477 +
           (((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
              C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
              C51063 * C1902) *
                 C51123 +
             (C37473 + C37474) * C51035) *
                C51095 +
            ((C33766 + C33767) * C51123 + (C41167 + C41168) * C51035) *
                C50846) *
               C478) *
              C50886 * C288 +
          ((((C33765 + C33764) * C51123 + (C34312 + C34313) * C51035) * C51095 +
            ((C33763 + C33762) * C51123 + (C34314 + C34315) * C51035) *
                C50846) *
               C477 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C476 -
           (((C33303 * C6177 - C33304 * C6176 - C33303 * C6178 +
              C51063 * C6179 + C33301 * C1262 - C33302 * C1257 -
              C33301 * C1263 + C33299 * C1269) *
                 C51035 +
             (C33769 + C33768) * C51123) *
                C50846 +
            ((C41168 + C41167) * C51035 + (C33767 + C33766) * C51123) *
                C51095) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C51111 -
           (((C34313 + C34312) * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C50966) *
              C50886 * C51153 +
          ((((C33765 + C33764) * C51123 + (C34312 + C34313) * C51035) * C51095 +
            ((C33763 + C33762) * C51123 + (C34314 + C34315) * C51035) *
                C50846) *
               C50966 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C51111) *
              C50886 * C51154 +
          (((C33362 * C51123 + C41363 * C51035) * C51095 +
            ((C33359 + C33358) * C51123 + (C33930 + C33931) * C51035) *
                C50846) *
               C51111 -
           (((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C51035 +
             (C34093 + C34092) * C51123) *
                C50846 +
            ((C34315 + C34314) * C51035 + C34078 * C51123) * C51095) *
               C50966) *
              C50886 * C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C51123 +
            (C36361 + C36362) * C51035) *
               C51095 +
           ((C33354 + C33355) * C51123 + (C33563 + C33562) * C51035) * C50846) *
              C50902 * C50886 * C113 -
          ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
           ((C33562 + C33563) * C51035 + (C33355 + C33354) * C51123) * C51095) *
              C50902 * C50886 * C114 +
          ((C33362 * C51123 + (C33561 + C33560) * C51035) * C51095 +
           ((C33359 + C33358) * C51123 + (C33930 + C33931) * C51035) * C50846) *
              C50902 * C50886 * C115 -
          (((C33303 * C937 - C33304 * C928 - C33303 * C938 + C51063 * C943 +
             C33301 * C316 - C33302 * C298 - C33301 * C317 + C33299 * C328) *
                C51035 +
            (C33361 + C33360) * C51123) *
               C50846 +
           ((C33931 + C33930) * C51035 + C33363 * C51123) * C51095) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C50902 * C285 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C50902 * C286 +
           ((C36369 * C51123 + (C36366 + C36365) * C51035) * C51095 +
            (C40960 * C51123 + (C36367 + C36368) * C51035) * C50846) *
               C50902 * C287) *
              C288 +
          (((C40958 * C51123 + C40960 * C51035) * C51095 +
            ((C33561 + C33560) * C51123 + (C33566 + C33567) * C51035) *
                C50846) *
               C50902 * C286 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C50902 * C285 -
           (((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 +
              C51063 * C3245 + C33301 * C1148 - C33302 * C1143 -
              C33301 * C1149 + C33299 * C1155) *
                 C51035 +
             (C33567 + C33566) * C51123) *
                C50846 +
            ((C36368 + C36367) * C51035 + C36344 * C51123) * C51095) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C50902 * C51155 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C50902 * C51156 +
           ((C36369 * C51123 + (C36366 + C36365) * C51035) * C51095 +
            (C40960 * C51123 + (C36367 + C36368) * C51035) * C50846) *
               C50902 * C1372) *
              C51102 +
          (((C40958 * C51123 + C40960 * C51035) * C51095 +
            (C41363 * C51123 + (C33566 + C33567) * C51035) * C50846) *
               C50902 * C51156 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C50902 * C51155 -
           (((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 +
              C51063 * C3245 + C33301 * C1148 - C33302 * C1143 -
              C33301 * C1149 + C33299 * C1155) *
                 C51035 +
             (C33567 + C33566) * C51123) *
                C50846 +
            ((C36368 + C36367) * C51035 + C36344 * C51123) * C51095) *
               C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C51111 -
           ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C50966) *
              C51155 +
          ((((C37041 + C37040) * C51123 + (C37039 + C37038) * C51035) * C51095 +
            (C41817 * C51123 + (C37042 + C37043) * C51035) * C50846) *
               C50966 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C51111) *
              C51156 +
          (((C36369 * C51123 + (C36366 + C36365) * C51035) * C51095 +
            (C40960 * C51123 + (C36367 + C36368) * C51035) * C50846) *
               C51111 -
           (((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C51035 +
             (C37043 + C37042) * C51123) *
                C50846 +
            ((C37977 + C37976) * C51035 + C37963 * C51123) * C51095) *
               C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C51123 +
            (C36361 + C36362) * C51035) *
               C51095 +
           ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
              C50902 * C1137 -
          ((C36344 * C51035 + C40959 * C51123) * C50846 +
           ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) * C51095) *
              C50902 * C1138 +
          ((C36369 * C51123 + (C36366 + C36365) * C51035) * C51095 +
           (C40960 * C51123 + (C36367 + C36368) * C51035) * C50846) *
              C50902 * C1139 -
          (((C33303 * C4185 - C33304 * C4183 - C33303 * C4186 + C51063 * C4189 +
             C33301 * C2495 - C33302 * C2491 - C33301 * C2496 +
             C33299 * C2500) *
                C51035 +
            (C36368 + C36367) * C51123) *
               C50846 +
           ((C37302 + C37301) * C51035 + C37288 * C51123) * C51095) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C50902 * C1066 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C50902 * C50938) *
              C1068 +
          (((C40958 * C51123 + C40960 * C51035) * C51095 +
            (C41363 * C51123 + (C33566 + C33567) * C51035) * C50846) *
               C50902 * C50938 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C50902 * C1066) *
              C1069 +
          (((C33362 * C51123 + C41363 * C51035) * C51095 +
            ((C33359 + C33358) * C51123 + (C33930 + C33931) * C51035) *
                C50846) *
               C50902 * C1066 -
           (((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 +
              C51063 * C1615 + C33301 * C314 - C33302 * C297 - C33301 * C315 +
              C33299 * C327) *
                 C51035 +
             (C33931 + C33930) * C51123) *
                C50846 +
            ((C33567 + C33566) * C51035 + C33916 * C51123) * C51095) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C476 -
           ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C477 +
           (((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
              C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
              C51063 * C1902) *
                 C51123 +
             (C37473 + C37474) * C51035) *
                C51095 +
            ((C33766 + C33767) * C51123 + (C41167 + C41168) * C51035) *
                C50846) *
               C478) *
              C1066 +
          ((((C37041 + C37040) * C51123 + (C37039 + C37038) * C51035) * C51095 +
            (C41817 * C51123 + (C37042 + C37043) * C51035) * C50846) *
               C477 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C476 -
           (((C33303 * C4592 - C33304 * C4588 - C33303 * C4593 +
              C51063 * C4600 + C33301 * C2701 - C33302 * C2697 -
              C33301 * C2702 + C33299 * C2706) *
                 C51035 +
             (C41168 + C41167) * C51123) *
                C50846 +
            ((C37476 + C37475) * C51035 + (C37474 + C37473) * C51123) *
                C51095) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
               C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                  C51123 +
              (C36361 + C36362) * C51035) *
                 C51095 +
             ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
                C51111 -
            ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
             ((C37040 + C37041) * C51035 +
              (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
               C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                  C51123) *
                 C51095) *
                C50966) *
               C1066 +
           ((((C37041 + C37040) * C51123 + (C37039 + C37038) * C51035) *
                 C51095 +
             (C41817 * C51123 + (C37042 + C37043) * C51035) * C50846) *
                C50966 -
            ((C36344 * C51035 + C40959 * C51123) * C50846 +
             ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                 C51095) *
                C51111) *
               C50938) *
              C51102 +
          (((((C33765 + C33764) * C51123 + C41817 * C51035) * C51095 +
             ((C33763 + C33762) * C51123 + (C34314 + C34315) * C51035) *
                 C50846) *
                C50966 -
            ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
             (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
                C51111) *
               C1066 +
           (((C40958 * C51123 + C40960 * C51035) * C51095 +
             (C41363 * C51123 + (C33566 + C33567) * C51035) * C50846) *
                C51111 -
            (((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 +
               C51063 * C2707 + C33301 * C1609 - C33302 * C1604 -
               C33301 * C1610 + C33299 * C1616) *
                  C51035 +
              (C34315 + C34314) * C51123) *
                 C50846 +
             ((C37043 + C37042) * C51035 + C41816 * C51123) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C50902 * C1066 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C50902 * C50938) *
              C1068 +
          (((C40958 * C51123 + C40960 * C51035) * C51095 +
            (C41363 * C51123 + (C33566 + C33567) * C51035) * C50846) *
               C50902 * C50938 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C50902 * C1066) *
              C1069 +
          (((C33362 * C51123 + C41363 * C51035) * C51095 +
            ((C33359 + C33358) * C51123 + (C33930 + C33931) * C51035) *
                C50846) *
               C50902 * C1066 -
           (((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 +
              C51063 * C1615 + C33301 * C314 - C33302 * C297 - C33301 * C315 +
              C33299 * C327) *
                 C51035 +
             (C33931 + C33930) * C51123) *
                C50846 +
            ((C33567 + C33566) * C51035 + C33916 * C51123) * C51095) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C51123 +
            (C36361 + C36362) * C51035) *
               C51095 +
           ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
              C50902 * C1137 -
          ((C36344 * C51035 + C40959 * C51123) * C50846 +
           ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) * C51095) *
              C50902 * C1138 +
          ((C36369 * C51123 + (C36366 + C36365) * C51035) * C51095 +
           (C40960 * C51123 + (C36367 + C36368) * C51035) * C50846) *
              C50902 * C1139 -
          (((C33303 * C4185 - C33304 * C4183 - C33303 * C4186 + C51063 * C4189 +
             C33301 * C2495 - C33302 * C2491 - C33301 * C2496 +
             C33299 * C2500) *
                C51035 +
            (C36368 + C36367) * C51123) *
               C50846 +
           ((C37302 + C37301) * C51035 + C37288 * C51123) * C51095) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
               C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                  C51123 +
              (C36361 + C36362) * C51035) *
                 C51095 +
             ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
                C1717 -
            ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
             ((C37040 + C37041) * C51035 +
              (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
               C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                  C51123) *
                 C51095) *
                C50966) *
               C51110 +
           ((((C37041 + C37040) * C51123 + (C37039 + C37038) * C51035) *
                 C51095 +
             (C41817 * C51123 + (C37042 + C37043) * C51035) * C50846) *
                C50966 -
            ((C36344 * C51035 + C40959 * C51123) * C50846 +
             ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                 C51095) *
                C1717) *
               C50938) *
              C51102 +
          (((((C33765 + C33764) * C51123 + C41817 * C51035) * C51095 +
             ((C33763 + C33762) * C51123 + (C34314 + C34315) * C51035) *
                 C50846) *
                C50966 -
            ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
             (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
                C1717) *
               C51110 +
           (((C40958 * C51123 + C40960 * C51035) * C51095 +
             (C41363 * C51123 + (C33566 + C33567) * C51035) * C50846) *
                C1717 -
            (((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 +
               C51063 * C2707 + C33301 * C1609 - C33302 * C1604 -
               C33301 * C1610 + C33299 * C1616) *
                  C51035 +
              (C34315 + C34314) * C51123) *
                 C50846 +
             ((C37043 + C37042) * C51035 + C41816 * C51123) * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C51157 -
           ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C51158 +
           (((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
              C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
              C51063 * C1902) *
                 C51123 +
             (C37473 + C37474) * C51035) *
                C51095 +
            ((C33766 + C33767) * C51123 + (C41167 + C41168) * C51035) *
                C50846) *
               C2133) *
              C51110 +
          ((((C37041 + C37040) * C51123 + (C37039 + C37038) * C51035) * C51095 +
            (C41817 * C51123 + (C37042 + C37043) * C51035) * C50846) *
               C51158 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C51157 -
           (((C33303 * C4592 - C33304 * C4588 - C33303 * C4593 +
              C51063 * C4600 + C33301 * C2701 - C33302 * C2697 -
              C33301 * C2702 + C33299 * C2706) *
                 C51035 +
             (C41168 + C41167) * C51123) *
                C50846 +
            ((C37476 + C37475) * C51035 + (C37474 + C37473) * C51123) *
                C51095) *
               C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C1717 -
           ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C50966) *
              C285 +
          ((((C37041 + C37040) * C51123 + (C37039 + C37038) * C51035) * C51095 +
            (C41817 * C51123 + (C37042 + C37043) * C51035) * C50846) *
               C50966 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C1717) *
              C286 +
          (((C36369 * C51123 + (C36366 + C36365) * C51035) * C51095 +
            (C40960 * C51123 + (C36367 + C36368) * C51035) * C50846) *
               C1717 -
           (((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C51035 +
             (C37043 + C37042) * C51123) *
                C50846 +
            ((C37977 + C37976) * C51035 + C37963 * C51123) * C51095) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C1717 -
           ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C50966) *
              C50886 * C1068 +
          ((((C33765 + C33764) * C51123 + C41817 * C51035) * C51095 +
            ((C33763 + C33762) * C51123 + (C34314 + C34315) * C51035) *
                C50846) *
               C50966 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C1717) *
              C50886 * C1069 +
          (((C33362 * C51123 + C41363 * C51035) * C51095 +
            ((C33359 + C33358) * C51123 + (C33930 + C33931) * C51035) *
                C50846) *
               C1717 -
           (((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C51035 +
             (C34093 + C34092) * C51123) *
                C50846 +
            ((C34315 + C34314) * C51035 + C34078 * C51123) * C51095) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C51123 +
            (C36361 + C36362) * C51035) *
               C51095 +
           ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
              C1883 -
          ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
           ((C37040 + C37041) * C51035 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C51123) *
               C51095) *
              C1884 +
          (((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C51123 +
            (C37473 + C37474) * C51035) *
               C51095 +
           ((C33766 + C33767) * C51123 + (C41167 + C41168) * C51035) * C50846) *
              C1885 -
          (((C33303 * C6593 - C33304 * C6591 - C33303 * C6594 + C51063 * C6597 +
             C33301 * C4594 - C33302 * C4589 - C33301 * C4595 +
             C33299 * C4601) *
                C51035 +
            (C33303 * C5599 - C33304 * C5595 - C33303 * C5600 + C51063 * C5604 +
             C33301 * C1895 - C33302 * C1889 - C33301 * C1896 +
             C33299 * C1901) *
                C51123) *
               C50846 +
           ((C33303 * C6595 - C33304 * C6592 - C33303 * C6596 + C51063 * C6598 +
             C33301 * C4598 - C33302 * C4591 - C33301 * C4599 +
             C33299 * C4603) *
                C51035 +
            (C33303 * C5597 - C33304 * C5594 - C33303 * C5598 + C51063 * C5603 +
             C33301 * C1897 - C33302 * C1890 - C33301 * C1898 +
             C33299 * C1902) *
                C51123) *
               C51095) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C51157 -
           ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C51158 +
           (((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
              C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
              C51063 * C1902) *
                 C51123 +
             (C37473 + C37474) * C51035) *
                C51095 +
            ((C33766 + C33767) * C51123 + (C41167 + C41168) * C51035) *
                C50846) *
               C2133) *
              C50886 * C51102 +
          ((((C33765 + C33764) * C51123 + C41817 * C51035) * C51095 +
            ((C33763 + C33762) * C51123 + (C34314 + C34315) * C51035) *
                C50846) *
               C51158 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C51157 -
           (((C33303 * C6177 - C33304 * C6176 - C33303 * C6178 +
              C51063 * C6179 + C33301 * C1262 - C33302 * C1257 -
              C33301 * C1263 + C33299 * C1269) *
                 C51035 +
             (C33769 + C33768) * C51123) *
                C50846 +
            ((C41168 + C41167) * C51035 + (C33767 + C33766) * C51123) *
                C51095) *
               C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C1717 -
           ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C50966) *
              C50886 * C1068 +
          ((((C33765 + C33764) * C51123 + C41817 * C51035) * C51095 +
            ((C33763 + C33762) * C51123 + (C34314 + C34315) * C51035) *
                C50846) *
               C50966 -
           ((C33916 * C51035 + (C33357 + C33356) * C51123) * C50846 +
            (C40959 * C51035 + (C33355 + C33354) * C51123) * C51095) *
               C1717) *
              C50886 * C1069 +
          (((C33362 * C51123 + C41363 * C51035) * C51095 +
            ((C33359 + C33358) * C51123 + (C33930 + C33931) * C51035) *
                C50846) *
               C1717 -
           (((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C51035 +
             (C34093 + C34092) * C51123) *
                C50846 +
            ((C34315 + C34314) * C51035 + C34078 * C51123) * C51095) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C51123 +
             (C36361 + C36362) * C51035) *
                C51095 +
            ((C33354 + C33355) * C51123 + C40958 * C51035) * C50846) *
               C1717 -
           ((C41816 * C51035 + (C33764 + C33765) * C51123) * C50846 +
            ((C37040 + C37041) * C51035 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C51123) *
                C51095) *
               C50966) *
              C285 +
          ((((C37041 + C37040) * C51123 + (C37039 + C37038) * C51035) * C51095 +
            (C41817 * C51123 + (C37042 + C37043) * C51035) * C50846) *
               C50966 -
           ((C36344 * C51035 + C40959 * C51123) * C50846 +
            ((C36364 + C36363) * C51035 + (C36362 + C36361) * C51123) *
                C51095) *
               C1717) *
              C286 +
          (((C36369 * C51123 + (C36366 + C36365) * C51035) * C51095 +
            (C40960 * C51123 + (C36367 + C36368) * C51035) * C50846) *
               C1717 -
           (((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C51035 +
             (C37043 + C37042) * C51123) *
                C50846 +
            ((C37977 + C37976) * C51035 + C37963 * C51123) * C51095) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C50902 * C51110 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C50902 * C50938) *
              C51153 +
          (((C44500 + C44499 + C44498) * C51123 +
            (C44501 + C44502 + C44503) * C51035) *
               C50841 * C50902 * C50938 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C50902 * C51110) *
              C51154 +
          (((C44312 + C44311 + C44310) * C51123 +
            (C44856 + C44857 + C44858) * C51035) *
               C50841 * C50902 * C51110 -
           ((C44250 * C2703 - C44251 * C2698 - C44250 * C2704 + C44245 * C2707 +
             C44248 * C1609 - C44249 * C1604 - C44248 * C1610 + C51162 * C1616 +
             C44246 * C312 - C44247 * C296 - C44246 * C313 + C51161 * C326) *
                C51035 +
            (C44858 + C44857 + C44856) * C51123) *
               C50841 * C50902 * C50938) *
              C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
              C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
              C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                 C51123 +
             (C47273 + C47274 + C47275) * C51035) *
                C50841 * C51111 -
            ((C47929 + C47930 + C47931) * C51035 +
             (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 +
              C44245 * C1902 + C44248 * C497 - C44249 * C483 - C44248 * C498 +
              C51162 * C513 + C44246 * C495 - C44247 * C482 - C44246 * C496 +
              C51161 * C512) *
                 C51123) *
                C50841 * C50966) *
               C51110 +
           (((C47931 + C47930 + C47929) * C51123 +
             (C44246 * C1613 - C44247 * C1606 - C44246 * C1614 +
              C51161 * C1618 + C44248 * C2699 - C44249 * C2696 -
              C44248 * C2700 + C51162 * C2705 + C44250 * C4596 -
              C44251 * C4590 - C44250 * C4597 + C44245 * C4602) *
                 C51035) *
                C50841 * C50966 -
            ((C47276 + C47277 + C47278) * C51035 +
             (C47275 + C47274 + C47273) * C51123) *
                C50841 * C51111) *
               C50938) *
              C288 +
          ((((C44688 + C44687 + C44686) * C51123 +
             (C45238 + C45239 + C45240) * C51035) *
                C50841 * C50966 -
            ((C44498 + C44499 + C44500) * C51035 +
             (C44309 + C44308 + C44307) * C51123) *
                C50841 * C51111) *
               C51110 +
           (((C44500 + C44499 + C44498) * C51123 +
             (C44501 + C44502 + C44503) * C51035) *
                C50841 * C51111 -
            ((C44250 * C4592 - C44251 * C4588 - C44250 * C4593 +
              C44245 * C4600 + C44248 * C2701 - C44249 * C2697 -
              C44248 * C2702 + C51162 * C2706 + C44246 * C1611 -
              C44247 * C1605 - C44246 * C1612 + C51161 * C1617) *
                 C51035 +
             (C45240 + C45239 + C45238) * C51123) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C50902 * C285 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C50902 * C286 +
           ((C47278 + C47277 + C47276) * C51123 +
            (C44246 * C1152 - C44247 * C1145 - C44246 * C1153 + C51161 * C1157 +
             C44248 * C3237 - C44249 * C3234 - C44248 * C3238 + C51162 * C3243 +
             C44250 * C3679 - C44251 * C3676 - C44250 * C3680 +
             C44245 * C3682) *
                C51035) *
               C50841 * C50902 * C287) *
              C288 +
          (((C44500 + C44499 + C44498) * C51123 +
            (C44501 + C44502 + C44503) * C51035) *
               C50841 * C50902 * C286 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C50902 * C285 -
           ((C44250 * C3677 - C44251 * C3675 - C44250 * C3678 + C44245 * C3681 +
             C44248 * C3239 - C44249 * C3235 - C44248 * C3240 + C51162 * C3244 +
             C44246 * C1150 - C44247 * C1144 - C44246 * C1151 +
             C51161 * C1156) *
                C51035 +
            (C44503 + C44502 + C44501) * C51123) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C51123 +
           (C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323 +
            C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
            C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271) *
               C51035) *
              C50841 * C50902 * C50886 * C113 -
          ((C44498 + C44499 + C44500) * C51035 +
           (C44309 + C44308 + C44307) * C51123) *
              C50841 * C50902 * C50886 * C114 +
          ((C44312 + C44311 + C44310) * C51123 +
           (C44856 + C44857 + C44858) * C51035) *
              C50841 * C50902 * C50886 * C115 -
          ((C44250 * C1260 - C44251 * C1256 - C44250 * C1261 + C44245 * C1268 +
            C44248 * C935 - C44249 * C927 - C44248 * C936 + C51162 * C942 +
            C44246 * C300 - C44247 * C290 - C44246 * C301 + C51161 * C320) *
               C51035 +
           (C44315 + C44314 + C44313) * C51123) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C476 -
           ((C44250 * C4598 - C44251 * C4591 - C44250 * C4599 + C44245 * C4603 +
             C44248 * C1266 - C44249 * C1259 - C44248 * C1267 + C51162 * C1271 +
             C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939) *
                C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C477 +
           ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
             C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
             C44250 * C5597 - C44251 * C5594 - C44250 * C5598 +
             C44245 * C5603) *
                C51123 +
            (C44246 * C1266 - C44247 * C1259 - C44246 * C1267 + C51161 * C1271 +
             C44248 * C4598 - C44249 * C4591 - C44248 * C4599 + C51162 * C4603 +
             C44250 * C6595 - C44251 * C6592 - C44250 * C6596 +
             C44245 * C6598) *
                C51035) *
               C50841 * C478) *
              C50886 * C288 +
          (((C44688 + C44687 + C44686) * C51123 +
            (C45238 + C45239 + C45240) * C51035) *
               C50841 * C477 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C476 -
           ((C44250 * C6593 - C44251 * C6591 - C44250 * C6594 + C44245 * C6597 +
             C44248 * C4594 - C44249 * C4589 - C44248 * C4595 + C51162 * C4601 +
             C44246 * C1264 - C44247 * C1258 - C44246 * C1265 +
             C51161 * C1270) *
                C51035 +
            (C44691 + C44690 + C44689) * C51123) *
               C50841 * C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C51111 -
           ((C44250 * C4598 - C44251 * C4591 - C44250 * C4599 + C44245 * C4603 +
             C44248 * C1266 - C44249 * C1259 - C44248 * C1267 + C51162 * C1271 +
             C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939) *
                C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C50966) *
              C50886 * C51153 +
          (((C44688 + C44687 + C44686) * C51123 +
            (C45238 + C45239 + C45240) * C51035) *
               C50841 * C50966 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C51111) *
              C50886 * C51154 +
          (((C44312 + C44311 + C44310) * C51123 +
            (C44856 + C44857 + C44858) * C51035) *
               C50841 * C51111 -
           ((C44250 * C6177 - C44251 * C6176 - C44250 * C6178 + C44245 * C6179 +
             C44248 * C1262 - C44249 * C1257 - C44248 * C1263 + C51162 * C1269 +
             C44246 * C933 - C44247 * C926 - C44246 * C934 + C51161 * C941) *
                C51035 +
            (C45025 + C45024 + C45023) * C51123) *
               C50841 * C50966) *
              C50886 * C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C51123 +
           (C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323 +
            C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
            C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271) *
               C51035) *
              C50841 * C50902 * C50886 * C113 -
          ((C44498 + C44499 + C44500) * C51035 +
           (C44309 + C44308 + C44307) * C51123) *
              C50841 * C50902 * C50886 * C114 +
          ((C44312 + C44311 + C44310) * C51123 +
           (C44856 + C44857 + C44858) * C51035) *
              C50841 * C50902 * C50886 * C115 -
          ((C44250 * C1260 - C44251 * C1256 - C44250 * C1261 + C44245 * C1268 +
            C44248 * C935 - C44249 * C927 - C44248 * C936 + C51162 * C942 +
            C44246 * C300 - C44247 * C290 - C44246 * C301 + C51161 * C320) *
               C51035 +
           (C44315 + C44314 + C44313) * C51123) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C50902 * C285 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C50902 * C286 +
           ((C47278 + C47277 + C47276) * C51123 +
            (C44246 * C1152 - C44247 * C1145 - C44246 * C1153 + C51161 * C1157 +
             C44248 * C3237 - C44249 * C3234 - C44248 * C3238 + C51162 * C3243 +
             C44250 * C3679 - C44251 * C3676 - C44250 * C3680 +
             C44245 * C3682) *
                C51035) *
               C50841 * C50902 * C287) *
              C288 +
          (((C44500 + C44499 + C44498) * C51123 +
            (C44501 + C44502 + C44503) * C51035) *
               C50841 * C50902 * C286 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C50902 * C285 -
           ((C44250 * C3677 - C44251 * C3675 - C44250 * C3678 + C44245 * C3681 +
             C44248 * C3239 - C44249 * C3235 - C44248 * C3240 + C51162 * C3244 +
             C44246 * C1150 - C44247 * C1144 - C44246 * C1151 +
             C51161 * C1156) *
                C51035 +
            (C44503 + C44502 + C44501) * C51123) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C50902 * C51155 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C50902 * C51156 +
           ((C47278 + C47277 + C47276) * C51123 +
            (C48194 + C48195 + C48196) * C51035) *
               C50841 * C50902 * C1372) *
              C51102 +
          (((C44500 + C44499 + C44498) * C51123 +
            (C44501 + C44502 + C44503) * C51035) *
               C50841 * C50902 * C51156 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C50902 * C51155 -
           ((C44250 * C3677 - C44251 * C3675 - C44250 * C3678 + C44245 * C3681 +
             C44248 * C3239 - C44249 * C3235 - C44248 * C3240 + C51162 * C3244 +
             C44246 * C1150 - C44247 * C1144 - C44246 * C1151 +
             C51161 * C1156) *
                C51035 +
            (C44503 + C44502 + C44501) * C51123) *
               C50841 * C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C51111 -
           ((C47929 + C47930 + C47931) * C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C50966) *
              C51155 +
          (((C47931 + C47930 + C47929) * C51123 +
            (C48868 + C48869 + C48870) * C51035) *
               C50841 * C50966 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C51111) *
              C51156 +
          (((C47278 + C47277 + C47276) * C51123 +
            (C48194 + C48195 + C48196) * C51035) *
               C50841 * C51111 -
           ((C44250 * C21282 - C44251 * C21281 - C44250 * C21283 +
             C44245 * C21284 + C44248 * C3679 - C44249 * C3676 -
             C44248 * C3680 + C51162 * C3682 + C44246 * C3237 - C44247 * C3234 -
             C44246 * C3238 + C51161 * C3243) *
                C51035 +
            (C48870 + C48869 + C48868) * C51123) *
               C50841 * C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C51123 +
           (C47273 + C47274 + C47275) * C51035) *
              C50841 * C50902 * C1137 -
          ((C47276 + C47277 + C47278) * C51035 +
           (C47275 + C47274 + C47273) * C51123) *
              C50841 * C50902 * C1138 +
          ((C47278 + C47277 + C47276) * C51123 +
           (C48194 + C48195 + C48196) * C51035) *
              C50841 * C50902 * C1139 -
          ((C44250 * C20672 - C44251 * C20671 - C44250 * C20673 +
            C44245 * C20674 + C44248 * C4187 - C44249 * C4184 - C44248 * C4188 +
            C51162 * C4190 + C44246 * C2493 - C44247 * C2490 - C44246 * C2494 +
            C51161 * C2499) *
               C51035 +
           (C48196 + C48195 + C48194) * C51123) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C50902 * C1066 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C50902 * C50938) *
              C1068 +
          (((C44500 + C44499 + C44498) * C51123 +
            (C44501 + C44502 + C44503) * C51035) *
               C50841 * C50902 * C50938 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C50902 * C1066) *
              C1069 +
          (((C44312 + C44311 + C44310) * C51123 +
            (C44856 + C44857 + C44858) * C51035) *
               C50841 * C50902 * C1066 -
           ((C44250 * C2703 - C44251 * C2698 - C44250 * C2704 + C44245 * C2707 +
             C44248 * C1609 - C44249 * C1604 - C44248 * C1610 + C51162 * C1616 +
             C44246 * C312 - C44247 * C296 - C44246 * C313 + C51161 * C326) *
                C51035 +
            (C44858 + C44857 + C44856) * C51123) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C476 -
           ((C47929 + C47930 + C47931) * C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C477 +
           ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
             C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
             C44250 * C5597 - C44251 * C5594 - C44250 * C5598 +
             C44245 * C5603) *
                C51123 +
            (C48361 + C48362 + C48363) * C51035) *
               C50841 * C478) *
              C1066 +
          (((C47931 + C47930 + C47929) * C51123 +
            (C44246 * C1613 - C44247 * C1606 - C44246 * C1614 + C51161 * C1618 +
             C44248 * C2699 - C44249 * C2696 - C44248 * C2700 + C51162 * C2705 +
             C44250 * C4596 - C44251 * C4590 - C44250 * C4597 +
             C44245 * C4602) *
                C51035) *
               C50841 * C477 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C476 -
           ((C44250 * C22962 - C44251 * C22961 - C44250 * C22963 +
             C44245 * C22964 + C44248 * C4596 - C44249 * C4590 -
             C44248 * C4597 + C51162 * C4602 + C44246 * C2699 - C44247 * C2696 -
             C44246 * C2700 + C51161 * C2705) *
                C51035 +
            (C48363 + C48362 + C48361) * C51123) *
               C50841 * C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
              C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
              C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                 C51123 +
             (C47273 + C47274 + C47275) * C51035) *
                C50841 * C51111 -
            ((C47929 + C47930 + C47931) * C51035 +
             (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 +
              C44245 * C1902 + C44248 * C497 - C44249 * C483 - C44248 * C498 +
              C51162 * C513 + C44246 * C495 - C44247 * C482 - C44246 * C496 +
              C51161 * C512) *
                 C51123) *
                C50841 * C50966) *
               C1066 +
           (((C47931 + C47930 + C47929) * C51123 +
             (C44246 * C1613 - C44247 * C1606 - C44246 * C1614 +
              C51161 * C1618 + C44248 * C2699 - C44249 * C2696 -
              C44248 * C2700 + C51162 * C2705 + C44250 * C4596 -
              C44251 * C4590 - C44250 * C4597 + C44245 * C4602) *
                 C51035) *
                C50841 * C50966 -
            ((C47276 + C47277 + C47278) * C51035 +
             (C47275 + C47274 + C47273) * C51123) *
                C50841 * C51111) *
               C50938) *
              C51102 +
          ((((C44688 + C44687 + C44686) * C51123 +
             (C45238 + C45239 + C45240) * C51035) *
                C50841 * C50966 -
            ((C44498 + C44499 + C44500) * C51035 +
             (C44309 + C44308 + C44307) * C51123) *
                C50841 * C51111) *
               C1066 +
           (((C44500 + C44499 + C44498) * C51123 +
             (C44501 + C44502 + C44503) * C51035) *
                C50841 * C51111 -
            ((C44250 * C4592 - C44251 * C4588 - C44250 * C4593 +
              C44245 * C4600 + C44248 * C2701 - C44249 * C2697 -
              C44248 * C2702 + C51162 * C2706 + C44246 * C1611 -
              C44247 * C1605 - C44246 * C1612 + C51161 * C1617) *
                 C51035 +
             (C45240 + C45239 + C45238) * C51123) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C50902 * C1066 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C50902 * C50938) *
              C1068 +
          (((C44500 + C44499 + C44498) * C51123 +
            (C44501 + C44502 + C44503) * C51035) *
               C50841 * C50902 * C50938 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C50902 * C1066) *
              C1069 +
          (((C44312 + C44311 + C44310) * C51123 +
            (C44856 + C44857 + C44858) * C51035) *
               C50841 * C50902 * C1066 -
           ((C44250 * C2703 - C44251 * C2698 - C44250 * C2704 + C44245 * C2707 +
             C44248 * C1609 - C44249 * C1604 - C44248 * C1610 + C51162 * C1616 +
             C44246 * C312 - C44247 * C296 - C44246 * C313 + C51161 * C326) *
                C51035 +
            (C44858 + C44857 + C44856) * C51123) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C51123 +
           (C47273 + C47274 + C47275) * C51035) *
              C50841 * C50902 * C1137 -
          ((C47276 + C47277 + C47278) * C51035 +
           (C47275 + C47274 + C47273) * C51123) *
              C50841 * C50902 * C1138 +
          ((C47278 + C47277 + C47276) * C51123 +
           (C48194 + C48195 + C48196) * C51035) *
              C50841 * C50902 * C1139 -
          ((C44250 * C20672 - C44251 * C20671 - C44250 * C20673 +
            C44245 * C20674 + C44248 * C4187 - C44249 * C4184 - C44248 * C4188 +
            C51162 * C4190 + C44246 * C2493 - C44247 * C2490 - C44246 * C2494 +
            C51161 * C2499) *
               C51035 +
           (C48196 + C48195 + C48194) * C51123) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
              C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
              C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                 C51123 +
             (C47273 + C47274 + C47275) * C51035) *
                C50841 * C1717 -
            ((C47929 + C47930 + C47931) * C51035 +
             (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 +
              C44245 * C1902 + C44248 * C497 - C44249 * C483 - C44248 * C498 +
              C51162 * C513 + C44246 * C495 - C44247 * C482 - C44246 * C496 +
              C51161 * C512) *
                 C51123) *
                C50841 * C50966) *
               C51110 +
           (((C47931 + C47930 + C47929) * C51123 +
             (C48868 + C48869 + C48870) * C51035) *
                C50841 * C50966 -
            ((C47276 + C47277 + C47278) * C51035 +
             (C47275 + C47274 + C47273) * C51123) *
                C50841 * C1717) *
               C50938) *
              C51102 +
          ((((C44688 + C44687 + C44686) * C51123 +
             (C45238 + C45239 + C45240) * C51035) *
                C50841 * C50966 -
            ((C44498 + C44499 + C44500) * C51035 +
             (C44309 + C44308 + C44307) * C51123) *
                C50841 * C1717) *
               C51110 +
           (((C44500 + C44499 + C44498) * C51123 +
             (C44501 + C44502 + C44503) * C51035) *
                C50841 * C1717 -
            ((C44250 * C4592 - C44251 * C4588 - C44250 * C4593 +
              C44245 * C4600 + C44248 * C2701 - C44249 * C2697 -
              C44248 * C2702 + C51162 * C2706 + C44246 * C1611 -
              C44247 * C1605 - C44246 * C1612 + C51161 * C1617) *
                 C51035 +
             (C45240 + C45239 + C45238) * C51123) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C51157 -
           ((C47929 + C47930 + C47931) * C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C51158 +
           ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
             C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
             C44250 * C5597 - C44251 * C5594 - C44250 * C5598 +
             C44245 * C5603) *
                C51123 +
            (C48361 + C48362 + C48363) * C51035) *
               C50841 * C2133) *
              C51110 +
          (((C47931 + C47930 + C47929) * C51123 +
            (C48868 + C48869 + C48870) * C51035) *
               C50841 * C51158 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C51157 -
           ((C44250 * C22962 - C44251 * C22961 - C44250 * C22963 +
             C44245 * C22964 + C44248 * C4596 - C44249 * C4590 -
             C44248 * C4597 + C51162 * C4602 + C44246 * C2699 - C44247 * C2696 -
             C44246 * C2700 + C51161 * C2705) *
                C51035 +
            (C48363 + C48362 + C48361) * C51123) *
               C50841 * C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C1717 -
           ((C47929 + C47930 + C47931) * C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C50966) *
              C285 +
          (((C47931 + C47930 + C47929) * C51123 +
            (C48868 + C48869 + C48870) * C51035) *
               C50841 * C50966 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C1717) *
              C286 +
          (((C47278 + C47277 + C47276) * C51123 +
            (C48194 + C48195 + C48196) * C51035) *
               C50841 * C1717 -
           ((C44250 * C21282 - C44251 * C21281 - C44250 * C21283 +
             C44245 * C21284 + C44248 * C3679 - C44249 * C3676 -
             C44248 * C3680 + C51162 * C3682 + C44246 * C3237 - C44247 * C3234 -
             C44246 * C3238 + C51161 * C3243) *
                C51035 +
            (C48870 + C48869 + C48868) * C51123) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C1717 -
           ((C47929 + C47930 + C47931) * C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C44688 + C44687 + C44686) * C51123 +
            (C45238 + C45239 + C45240) * C51035) *
               C50841 * C50966 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C1717) *
              C50886 * C1069 +
          (((C44312 + C44311 + C44310) * C51123 +
            (C44856 + C44857 + C44858) * C51035) *
               C50841 * C1717 -
           ((C44250 * C6177 - C44251 * C6176 - C44250 * C6178 + C44245 * C6179 +
             C44248 * C1262 - C44249 * C1257 - C44248 * C1263 + C51162 * C1269 +
             C44246 * C933 - C44247 * C926 - C44246 * C934 + C51161 * C941) *
                C51035 +
            (C45025 + C45024 + C45023) * C51123) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C51123 +
           (C47273 + C47274 + C47275) * C51035) *
              C50841 * C1883 -
          ((C47929 + C47930 + C47931) * C51035 +
           (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
            C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
            C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
               C51123) *
              C50841 * C1884 +
          ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
            C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
            C44250 * C5597 - C44251 * C5594 - C44250 * C5598 + C44245 * C5603) *
               C51123 +
           (C48361 + C48362 + C48363) * C51035) *
              C50841 * C1885 -
          ((C44250 * C23884 - C44251 * C23883 - C44250 * C23885 +
            C44245 * C23886 + C44248 * C6595 - C44249 * C6592 - C44248 * C6596 +
            C51162 * C6598 + C44246 * C4598 - C44247 * C4591 - C44246 * C4599 +
            C51161 * C4603) *
               C51035 +
           (C44250 * C7479 - C44251 * C7476 - C44250 * C7480 + C44245 * C7482 +
            C44248 * C5597 - C44249 * C5594 - C44248 * C5598 + C51162 * C5603 +
            C44246 * C1897 - C44247 * C1890 - C44246 * C1898 + C51161 * C1902) *
               C51123) *
              C50841 * C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C51157 -
           ((C47929 + C47930 + C47931) * C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C51158 +
           ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
             C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
             C44250 * C5597 - C44251 * C5594 - C44250 * C5598 +
             C44245 * C5603) *
                C51123 +
            (C48361 + C48362 + C48363) * C51035) *
               C50841 * C2133) *
              C50886 * C51102 +
          (((C44688 + C44687 + C44686) * C51123 +
            (C45238 + C45239 + C45240) * C51035) *
               C50841 * C51158 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C51157 -
           ((C44250 * C6593 - C44251 * C6591 - C44250 * C6594 + C44245 * C6597 +
             C44248 * C4594 - C44249 * C4589 - C44248 * C4595 + C51162 * C4601 +
             C44246 * C1264 - C44247 * C1258 - C44246 * C1265 +
             C51161 * C1270) *
                C51035 +
            (C44691 + C44690 + C44689) * C51123) *
               C50841 * C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C1717 -
           ((C47929 + C47930 + C47931) * C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C44688 + C44687 + C44686) * C51123 +
            (C45238 + C45239 + C45240) * C51035) *
               C50841 * C50966 -
           ((C44498 + C44499 + C44500) * C51035 +
            (C44309 + C44308 + C44307) * C51123) *
               C50841 * C1717) *
              C50886 * C1069 +
          (((C44312 + C44311 + C44310) * C51123 +
            (C44856 + C44857 + C44858) * C51035) *
               C50841 * C1717 -
           ((C44250 * C6177 - C44251 * C6176 - C44250 * C6178 + C44245 * C6179 +
             C44248 * C1262 - C44249 * C1257 - C44248 * C1263 + C51162 * C1269 +
             C44246 * C933 - C44247 * C926 - C44246 * C934 + C51161 * C941) *
                C51035 +
            (C45025 + C45024 + C45023) * C51123) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C51123 +
            (C47273 + C47274 + C47275) * C51035) *
               C50841 * C1717 -
           ((C47929 + C47930 + C47931) * C51035 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C51123) *
               C50841 * C50966) *
              C285 +
          (((C47931 + C47930 + C47929) * C51123 +
            (C48868 + C48869 + C48870) * C51035) *
               C50841 * C50966 -
           ((C47276 + C47277 + C47278) * C51035 +
            (C47275 + C47274 + C47273) * C51123) *
               C50841 * C1717) *
              C286 +
          (((C47278 + C47277 + C47276) * C51123 +
            (C48194 + C48195 + C48196) * C51035) *
               C50841 * C1717 -
           ((C44250 * C21282 - C44251 * C21281 - C44250 * C21283 +
             C44245 * C21284 + C44248 * C3679 - C44249 * C3676 -
             C44248 * C3680 + C51162 * C3682 + C44246 * C3237 - C44247 * C3234 -
             C44246 * C3238 + C51161 * C3243) *
                C51035 +
            (C48870 + C48869 + C48868) * C51123) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C51110 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C50938) *
              C51153 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C50938 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C51110) *
              C51154 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C50902 * C51110 -
           ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
             C33301 * C1148 - C33302 * C1143 - C33301 * C1149 +
             C33299 * C1155) *
                C2332 +
            (C33567 + C33566) * C2331 + C33916 * C2330) *
               C50841 * C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C51110 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C50938) *
              C51153 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33930 + C33931) * C50984 * C17238) *
               C50902 * C50938 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C51110) *
              C51154 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C50902 * C51110 -
           ((C33303 * C937 - C33304 * C928 - C33303 * C938 + C51063 * C943 +
             C33301 * C316 - C33302 * C298 - C33301 * C317 + C33299 * C328) *
                C50984 * C17238 +
            (C33931 + C33930) * C50984 * C17237 + C33925 * C17236) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C50902 * C51110 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C50902 * C50938) *
              C51153 +
          ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
            C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
            C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
            C38929 * C4594 - C38930 * C4589 - C38929 * C4595 + C38922 * C4601) *
               C50984 * C50841 * C50902 * C50938 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C50902 * C51110) *
              C51154 +
          ((C38923 * C130 - C38924 * C121 - C38923 * C131 + C38919 * C142 +
            C38925 * C491 - C38926 * C480 - C38925 * C492 + C38920 * C510 +
            C38927 * C501 - C38928 * C485 - C38927 * C502 + C38921 * C515 +
            C38929 * C1893 - C38930 * C1888 - C38929 * C1894 + C38922 * C1900) *
               C50984 * C50841 * C50902 * C51110 -
           (C38929 * C6177 - C38930 * C6176 - C38929 * C6178 + C38922 * C6179 +
            C38927 * C1262 - C38928 * C1257 - C38927 * C1263 + C38921 * C1269 +
            C38925 * C933 - C38926 * C926 - C38925 * C934 + C38920 * C941 +
            C38923 * C302 - C38924 * C291 - C38923 * C303 + C38919 * C321) *
               C50984 * C50841 * C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C2330 +
             (C36361 + C36362) * C2331 + C36369 * C2332) *
                C50841 * C51111 -
            ((C37038 + C37039) * C2332 + (C37040 + C37041) * C2331 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C2330) *
                C50841 * C50966) *
               C51110 +
           (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
             (C33301 * C3237 - C33302 * C3234 - C33301 * C3238 +
              C33299 * C3243 + C33303 * C3679 - C33304 * C3676 -
              C33303 * C3680 + C51063 * C3682) *
                 C2332) *
                C50841 * C50966 -
            ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
             (C36362 + C36361) * C2330) *
                C50841 * C51111) *
               C50938) *
              C288 +
          ((((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
             (C37042 + C37043) * C2332) *
                C50841 * C50966 -
            (C36344 * C2332 + (C33562 + C33563) * C2331 +
             (C33355 + C33354) * C2330) *
                C50841 * C51111) *
               C51110 +
           (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
             (C36367 + C36368) * C2332) *
                C50841 * C51111 -
            ((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C2332 +
             (C37043 + C37042) * C2331 + (C34313 + C34312) * C2330) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C50984 * C17236 +
             (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                C51111 -
            (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C50984 * C17236) *
                C50966) *
               C51110 +
           (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
              C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
              C51063 * C1271) *
                 C50984 * C17236 +
             (C34312 + C34313) * C50984 * C17237 +
             (C34314 + C34315) * C50984 * C17238) *
                C50966 -
            (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
             (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
              C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                 C50984 * C17236) *
                C51111) *
               C50938) *
              C288 +
          ((((C33765 + C33764) * C50984 * C17236 +
             (C33763 + C33762) * C50984 * C17237 +
             (C34092 + C34093) * C50984 * C17238) *
                C50966 -
            (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
             (C33355 + C33354) * C50984 * C17236) *
                C51111) *
               C51110 +
           (((C33563 + C33562) * C50984 * C17236 +
             (C33561 + C33560) * C50984 * C17237 +
             (C33930 + C33931) * C50984 * C17238) *
                C51111 -
            ((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C50984 * C17238 +
             (C34315 + C34314) * C50984 * C17237 +
             (C34313 + C34312) * C50984 * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
             C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
             C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
             C38929 * C1897 - C38930 * C1890 - C38929 * C1898 +
             C38922 * C1902) *
                C50984 * C50841 * C51111 -
            (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
             C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
             C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
             C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
                C50984 * C50841 * C50966) *
               C51110 +
           ((C38923 * C929 - C38924 * C924 - C38923 * C930 + C38919 * C939 +
             C38925 * C1266 - C38926 * C1259 - C38925 * C1267 + C38920 * C1271 +
             C38927 * C4598 - C38928 * C4591 - C38927 * C4599 + C38921 * C4603 +
             C38929 * C6595 - C38930 * C6592 - C38929 * C6596 +
             C38922 * C6598) *
                C50984 * C50841 * C50966 -
            (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
             C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
             C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
             C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
                C50984 * C50841 * C51111) *
               C50938) *
              C288 +
          (((C38923 * C493 - C38924 * C481 - C38923 * C494 + C38919 * C511 +
             C38925 * C499 - C38926 * C484 - C38925 * C500 + C38920 * C514 +
             C38927 * C1895 - C38928 * C1889 - C38927 * C1896 + C38921 * C1901 +
             C38929 * C5599 - C38930 * C5595 - C38929 * C5600 +
             C38922 * C5604) *
                C50984 * C50841 * C50966 -
            (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
             C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
             C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
             C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
                C50984 * C50841 * C51111) *
               C51110 +
           ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
             C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
             C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
             C38929 * C4594 - C38930 * C4589 - C38929 * C4595 +
             C38922 * C4601) *
                C50984 * C50841 * C51111 -
            (C38929 * C6593 - C38930 * C6591 - C38929 * C6594 + C38922 * C6597 +
             C38927 * C4594 - C38928 * C4589 - C38927 * C4595 + C38921 * C4601 +
             C38925 * C1264 - C38926 * C1258 - C38925 * C1265 + C38920 * C1270 +
             C38923 * C931 - C38924 * C925 - C38923 * C932 + C38919 * C940) *
                C50984 * C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
                C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                   C50984 * C17236 +
               (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                  C50902 * C50886 * C113 -
              (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
               (C33355 + C33354) * C50984 * C17236) *
                  C50902 * C50886 * C114 +
              (C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
               (C33360 + C33361) * C50984 * C17238) *
                  C50902 * C50886 * C115 -
              ((C33303 * C783 - C33304 * C782 - C33303 * C784 + C51063 * C785 +
                C33301 * C136 - C33302 * C124 - C33301 * C137 + C33299 * C145) *
                   C50984 * C17238 +
               (C33361 + C33360) * C50984 * C17237 + C33365 * C17236) *
                  C50902 * C50886 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
                 C33303 * C495 - C33304 * C482 - C33303 * C496 +
                 C51063 * C512) *
                    C50984 * C17236 +
                (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                   C50902 * C285 -
               ((C33560 + C33561) * C50984 * C17238 +
                (C33562 + C33563) * C50984 * C17237 +
                (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
                 C33301 * C306 - C33302 * C293 - C33301 * C307 +
                 C33299 * C323) *
                    C50984 * C17236) *
                   C50902 * C286 +
               ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
                 C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
                 C51063 * C1618) *
                    C50984 * C17236 +
                (C33564 + C33565) * C50984 * C17237 +
                (C33566 + C33567) * C50984 * C17238) *
                   C50902 * C287) *
                  C288 +
              (((C33563 + C33562) * C50984 * C17236 +
                (C33561 + C33560) * C50984 * C17237 +
                (C33301 * C300 - C33302 * C290 - C33301 * C301 + C33299 * C320 +
                 C33303 * C935 - C33304 * C927 - C33303 * C936 +
                 C51063 * C942) *
                    C50984 * C17238) *
                   C50902 * C286 -
               (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
                (C33355 + C33354) * C50984 * C17236) *
                   C50902 * C285 -
               ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 +
                 C51063 * C1615 + C33301 * C314 - C33302 * C297 -
                 C33301 * C315 + C33299 * C327) *
                    C50984 * C17238 +
                (C33567 + C33566) * C50984 * C17237 +
                (C33565 + C33564) * C50984 * C17236) *
                   C50902 * C287) *
                  C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C476 -
           ((C33762 + C33763) * C50984 * C17238 +
            (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C477 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C50984 * C17236 +
            (C33766 + C33767) * C50984 * C17237 +
            (C33768 + C33769) * C50984 * C17238) *
               C478) *
              C50886 * C288 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C33301 * C489 - C33302 * C479 - C33301 * C490 + C33299 * C509 +
             C33303 * C503 - C33304 * C486 - C33303 * C504 + C51063 * C516) *
                C50984 * C17238) *
               C477 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C476 -
           ((C33303 * C1891 - C33304 * C1887 - C33303 * C1892 + C51063 * C1899 +
             C33301 * C503 - C33302 * C486 - C33301 * C504 + C33299 * C516) *
                C50984 * C17238 +
            (C33769 + C33768) * C50984 * C17237 +
            (C33767 + C33766) * C50984 * C17236) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323 +
            C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939) *
               C2331 +
           (C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
            C33303 * C1613 - C33304 * C1606 - C33303 * C1614 + C51063 * C1618) *
               C2332) *
              C50841 * C50902 * C50886 * C113 -
          ((C33565 + C33564) * C2332 + (C33562 + C33563) * C2331 +
           (C33355 + C33354) * C2330) *
              C50841 * C50902 * C50886 * C114 +
          (C33362 * C2330 + (C33561 + C33560) * C2331 +
           (C33566 + C33567) * C2332) *
              C50841 * C50902 * C50886 * C115 -
          ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
            C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
               C2332 +
           (C33931 + C33930) * C2331 + C33363 * C2330) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C285 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C286 +
           (C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C33301 * C2493 - C33302 * C2490 - C33301 * C2494 + C33299 * C2499 +
             C33303 * C4187 - C33304 * C4184 - C33303 * C4188 +
             C51063 * C4190) *
                C2332) *
               C50841 * C50902 * C287) *
              C288 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C286 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C285 -
           ((C33303 * C4185 - C33304 * C4183 - C33303 * C4186 + C51063 * C4189 +
             C33301 * C2495 - C33302 * C2491 - C33301 * C2496 +
             C33299 * C2500) *
                C2332 +
            (C36368 + C36367) * C2331 + C36344 * C2330) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C476 -
           ((C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C2332 +
            (C33303 * C1266 - C33304 * C1259 - C33303 * C1267 + C51063 * C1271 +
             C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939) *
                C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C477 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C2330 +
            (C33301 * C1266 - C33302 * C1259 - C33301 * C1267 + C33299 * C1271 +
             C33303 * C4598 - C33304 * C4591 - C33303 * C4599 +
             C51063 * C4603) *
                C2331 +
            (C33301 * C2699 - C33302 * C2696 - C33301 * C2700 + C33299 * C2705 +
             C33303 * C4596 - C33304 * C4590 - C33303 * C4597 +
             C51063 * C4602) *
                C2332) *
               C50841 * C478) *
              C50886 * C288 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C33301 * C1611 - C33302 * C1605 - C33301 * C1612 + C33299 * C1617 +
             C33303 * C2701 - C33304 * C2697 - C33303 * C2702 +
             C51063 * C2706) *
                C2332) *
               C50841 * C477 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C476 -
           ((C33303 * C4592 - C33304 * C4588 - C33303 * C4593 + C51063 * C4600 +
             C33301 * C2701 - C33302 * C2697 - C33301 * C2702 +
             C33299 * C2706) *
                C2332 +
            (C33303 * C4594 - C33304 * C4589 - C33303 * C4595 + C51063 * C4601 +
             C33301 * C1264 - C33302 * C1258 - C33301 * C1265 +
             C33299 * C1270) *
                C2331 +
            (C33767 + C33766) * C2330) *
               C50841 * C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
           C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
           C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
           C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
              C50984 * C50841 * C50902 * C50886 * C113 -
          (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
           C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
           C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
           C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
              C50984 * C50841 * C50902 * C50886 * C114 +
          (C38923 * C130 - C38924 * C121 - C38923 * C131 + C38919 * C142 +
           C38925 * C491 - C38926 * C480 - C38925 * C492 + C38920 * C510 +
           C38927 * C501 - C38928 * C485 - C38927 * C502 + C38921 * C515 +
           C38929 * C1893 - C38930 * C1888 - C38929 * C1894 + C38922 * C1900) *
              C50984 * C50841 * C50902 * C50886 * C115 -
          (C38929 * C1891 - C38930 * C1887 - C38929 * C1892 + C38922 * C1899 +
           C38927 * C503 - C38928 * C486 - C38927 * C504 + C38921 * C516 +
           C38925 * C489 - C38926 * C479 - C38925 * C490 + C38920 * C509 +
           C38923 * C132 - C38924 * C122 - C38923 * C133 + C38919 * C143) *
              C50984 * C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C50902 * C285 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C50902 * C286 +
           (C38923 * C308 - C38924 * C294 - C38923 * C309 + C38919 * C324 +
            C38925 * C1613 - C38926 * C1606 - C38925 * C1614 + C38920 * C1618 +
            C38927 * C2699 - C38928 * C2696 - C38927 * C2700 + C38921 * C2705 +
            C38929 * C4596 - C38930 * C4590 - C38929 * C4597 + C38922 * C4602) *
               C50984 * C50841 * C50902 * C287) *
              C288 +
          ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
            C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
            C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
            C38929 * C4594 - C38930 * C4589 - C38929 * C4595 + C38922 * C4601) *
               C50984 * C50841 * C50902 * C286 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C50902 * C285 -
           (C38929 * C4592 - C38930 * C4588 - C38929 * C4593 + C38922 * C4600 +
            C38927 * C2701 - C38928 * C2697 - C38927 * C2702 + C38921 * C2706 +
            C38925 * C1611 - C38926 * C1605 - C38925 * C1612 + C38920 * C1617 +
            C38923 * C310 - C38924 * C295 - C38923 * C311 + C38919 * C325) *
               C50984 * C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C476 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C477 +
           (C38923 * C497 - C38924 * C483 - C38923 * C498 + C38919 * C513 +
            C38925 * C1897 - C38926 * C1890 - C38925 * C1898 + C38920 * C1902 +
            C38927 * C5597 - C38928 * C5594 - C38927 * C5598 + C38921 * C5603 +
            C38929 * C7479 - C38930 * C7476 - C38929 * C7480 + C38922 * C7482) *
               C50984 * C50841 * C478) *
              C50886 * C288 +
          ((C38923 * C493 - C38924 * C481 - C38923 * C494 + C38919 * C511 +
            C38925 * C499 - C38926 * C484 - C38925 * C500 + C38920 * C514 +
            C38927 * C1895 - C38928 * C1889 - C38927 * C1896 + C38921 * C1901 +
            C38929 * C5599 - C38930 * C5595 - C38929 * C5600 + C38922 * C5604) *
               C50984 * C50841 * C477 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C476 -
           (C38929 * C7477 - C38930 * C7475 - C38929 * C7478 + C38922 * C7481 +
            C38927 * C5599 - C38928 * C5595 - C38927 * C5600 + C38921 * C5604 +
            C38925 * C1895 - C38926 * C1889 - C38925 * C1896 + C38920 * C1901 +
            C38923 * C499 - C38924 * C484 - C38923 * C500 + C38919 * C514) *
               C50984 * C50841 * C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C51111 -
           ((C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C2332 +
            (C33303 * C1266 - C33304 * C1259 - C33303 * C1267 + C51063 * C1271 +
             C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939) *
                C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C50886 * C51153 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C33301 * C1611 - C33302 * C1605 - C33301 * C1612 + C33299 * C1617 +
             C33303 * C2701 - C33304 * C2697 - C33303 * C2702 +
             C51063 * C2706) *
                C2332) *
               C50841 * C50966 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C51111) *
              C50886 * C51154 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C51111 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C2332 +
            (C34315 + C34314) * C2331 + C34078 * C2330) *
               C50841 * C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C51111 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C50886 * C51153 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C34092 + C34093) * C50984 * C17238) *
               C50966 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C51111) *
              C50886 * C51154 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C51111 -
           ((C33303 * C507 - C33304 * C488 - C33303 * C508 + C51063 * C518 +
             C33301 * C505 - C33302 * C487 - C33301 * C506 + C33299 * C517) *
                C50984 * C17238 +
            (C34093 + C34092) * C50984 * C17237 + C34087 * C17236) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C51111 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C50966) *
              C50886 * C51153 +
          ((C38923 * C493 - C38924 * C481 - C38923 * C494 + C38919 * C511 +
            C38925 * C499 - C38926 * C484 - C38925 * C500 + C38920 * C514 +
            C38927 * C1895 - C38928 * C1889 - C38927 * C1896 + C38921 * C1901 +
            C38929 * C5599 - C38930 * C5595 - C38929 * C5600 + C38922 * C5604) *
               C50984 * C50841 * C50966 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C51111) *
              C50886 * C51154 +
          ((C38923 * C130 - C38924 * C121 - C38923 * C131 + C38919 * C142 +
            C38925 * C491 - C38926 * C480 - C38925 * C492 + C38920 * C510 +
            C38927 * C501 - C38928 * C485 - C38927 * C502 + C38921 * C515 +
            C38929 * C1893 - C38930 * C1888 - C38929 * C1894 + C38922 * C1900) *
               C50984 * C50841 * C51111 -
           (C38929 * C5601 - C38930 * C5596 - C38929 * C5602 + C38922 * C5605 +
            C38927 * C1893 - C38928 * C1888 - C38927 * C1894 + C38921 * C1900 +
            C38925 * C501 - C38926 * C485 - C38925 * C502 + C38920 * C515 +
            C38923 * C491 - C38924 * C480 - C38923 * C492 + C38919 * C510) *
               C50984 * C50841 * C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C285 -
           ((C33560 + C33561) * C50984 * C17238 +
            (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C286 +
           ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C50902 * C287) *
              C288 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33301 * C300 - C33302 * C290 - C33301 * C301 + C33299 * C320 +
             C33303 * C935 - C33304 * C927 - C33303 * C936 + C51063 * C942) *
                C50984 * C17238) *
               C50902 * C286 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C285 -
           ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
             C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
                C50984 * C17238 +
            (C33567 + C33566) * C50984 * C17237 +
            (C33565 + C33564) * C50984 * C17236) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C50984 * C17236 +
           (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
              C50902 * C50886 * C113 -
          (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
           (C33355 + C33354) * C50984 * C17236) *
              C50902 * C50886 * C114 +
          (C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
           (C33360 + C33361) * C50984 * C17238) *
              C50902 * C50886 * C115 -
          ((C33303 * C783 - C33304 * C782 - C33303 * C784 + C51063 * C785 +
            C33301 * C136 - C33302 * C124 - C33301 * C137 + C33299 * C145) *
               C50984 * C17238 +
           (C33361 + C33360) * C50984 * C17237 + C33365 * C17236) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323 +
            C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939) *
               C2331 +
           (C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
            C33303 * C1613 - C33304 * C1606 - C33303 * C1614 + C51063 * C1618) *
               C2332) *
              C50841 * C50902 * C50886 * C113 -
          ((C33565 + C33564) * C2332 + (C33562 + C33563) * C2331 +
           (C33355 + C33354) * C2330) *
              C50841 * C50902 * C50886 * C114 +
          (C33362 * C2330 + (C33561 + C33560) * C2331 +
           (C33566 + C33567) * C2332) *
              C50841 * C50902 * C50886 * C115 -
          ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
            C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
               C2332 +
           (C33931 + C33930) * C2331 + C33363 * C2330) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C285 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C286 +
           (C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C33301 * C2493 - C33302 * C2490 - C33301 * C2494 + C33299 * C2499 +
             C33303 * C4187 - C33304 * C4184 - C33303 * C4188 +
             C51063 * C4190) *
                C2332) *
               C50841 * C50902 * C287) *
              C288 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C286 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C285 -
           ((C33303 * C4185 - C33304 * C4183 - C33303 * C4186 + C51063 * C4189 +
             C33301 * C2495 - C33302 * C2491 - C33301 * C2496 +
             C33299 * C2500) *
                C2332 +
            (C36368 + C36367) * C2331 + C36344 * C2330) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
           C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
           C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
           C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
              C50984 * C50841 * C50902 * C50886 * C113 -
          (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
           C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
           C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
           C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
              C50984 * C50841 * C50902 * C50886 * C114 +
          (C38923 * C130 - C38924 * C121 - C38923 * C131 + C38919 * C142 +
           C38925 * C491 - C38926 * C480 - C38925 * C492 + C38920 * C510 +
           C38927 * C501 - C38928 * C485 - C38927 * C502 + C38921 * C515 +
           C38929 * C1893 - C38930 * C1888 - C38929 * C1894 + C38922 * C1900) *
              C50984 * C50841 * C50902 * C50886 * C115 -
          (C38929 * C1891 - C38930 * C1887 - C38929 * C1892 + C38922 * C1899 +
           C38927 * C503 - C38928 * C486 - C38927 * C504 + C38921 * C516 +
           C38925 * C489 - C38926 * C479 - C38925 * C490 + C38920 * C509 +
           C38923 * C132 - C38924 * C122 - C38923 * C133 + C38919 * C143) *
              C50984 * C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C50902 * C285 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C50902 * C286 +
           (C38923 * C308 - C38924 * C294 - C38923 * C309 + C38919 * C324 +
            C38925 * C1613 - C38926 * C1606 - C38925 * C1614 + C38920 * C1618 +
            C38927 * C2699 - C38928 * C2696 - C38927 * C2700 + C38921 * C2705 +
            C38929 * C4596 - C38930 * C4590 - C38929 * C4597 + C38922 * C4602) *
               C50984 * C50841 * C50902 * C287) *
              C288 +
          ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
            C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
            C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
            C38929 * C4594 - C38930 * C4589 - C38929 * C4595 + C38922 * C4601) *
               C50984 * C50841 * C50902 * C286 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C50902 * C285 -
           (C38929 * C4592 - C38930 * C4588 - C38929 * C4593 + C38922 * C4600 +
            C38927 * C2701 - C38928 * C2697 - C38927 * C2702 + C38921 * C2706 +
            C38925 * C1611 - C38926 * C1605 - C38925 * C1612 + C38920 * C1617 +
            C38923 * C310 - C38924 * C295 - C38923 * C311 + C38919 * C325) *
               C50984 * C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C51155 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C51156 +
           (C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C37301 + C37302) * C2332) *
               C50841 * C50902 * C1372) *
              C51102 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C51156 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C51155 -
           ((C33303 * C4185 - C33304 * C4183 - C33303 * C4186 + C51063 * C4189 +
             C33301 * C2495 - C33302 * C2491 - C33301 * C2496 +
             C33299 * C2500) *
                C2332 +
            (C36368 + C36367) * C2331 + C36344 * C2330) *
               C50841 * C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C51155 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C51156 +
           ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C50902 * C1372) *
              C51102 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33930 + C33931) * C50984 * C17238) *
               C50902 * C51156 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C51155 -
           ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
             C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
                C50984 * C17238 +
            (C33567 + C33566) * C50984 * C17237 +
            (C33565 + C33564) * C50984 * C17236) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C50902 * C51155 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C50902 * C51156 +
           (C38923 * C308 - C38924 * C294 - C38923 * C309 + C38919 * C324 +
            C38925 * C1613 - C38926 * C1606 - C38925 * C1614 + C38920 * C1618 +
            C38927 * C2699 - C38928 * C2696 - C38927 * C2700 + C38921 * C2705 +
            C38929 * C4596 - C38930 * C4590 - C38929 * C4597 + C38922 * C4602) *
               C50984 * C50841 * C50902 * C1372) *
              C51102 +
          ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
            C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
            C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
            C38929 * C4594 - C38930 * C4589 - C38929 * C4595 + C38922 * C4601) *
               C50984 * C50841 * C50902 * C51156 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C50902 * C51155 -
           (C38929 * C4592 - C38930 * C4588 - C38929 * C4593 + C38922 * C4600 +
            C38927 * C2701 - C38928 * C2697 - C38927 * C2702 + C38921 * C2706 +
            C38925 * C1611 - C38926 * C1605 - C38925 * C1612 + C38920 * C1617 +
            C38923 * C310 - C38924 * C295 - C38923 * C311 + C38919 * C325) *
               C50984 * C50841 * C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C51111 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C51155 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C37976 + C37977) * C2332) *
               C50841 * C50966 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C51111) *
              C51156 +
          ((C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C37301 + C37302) * C2332) *
               C50841 * C51111 -
           ((C33303 * C20672 - C33304 * C20671 - C33303 * C20673 +
             C51063 * C20674 + C33301 * C4187 - C33302 * C4184 -
             C33301 * C4188 + C33299 * C4190) *
                C2332 +
            (C37977 + C37976) * C2331 + C37963 * C2330) *
               C50841 * C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C51111 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C51155 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C50966 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C51111) *
              C51156 +
          (((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C51111 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C50984 * C17238 +
            (C33303 * C2701 - C33304 * C2697 - C33303 * C2702 + C51063 * C2706 +
             C33301 * C1611 - C33302 * C1605 - C33301 * C1612 +
             C33299 * C1617) *
                C50984 * C17237 +
            (C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C50984 * C17236) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C51111 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C50966) *
              C51155 +
          ((C38923 * C929 - C38924 * C924 - C38923 * C930 + C38919 * C939 +
            C38925 * C1266 - C38926 * C1259 - C38925 * C1267 + C38920 * C1271 +
            C38927 * C4598 - C38928 * C4591 - C38927 * C4599 + C38921 * C4603 +
            C38929 * C6595 - C38930 * C6592 - C38929 * C6596 + C38922 * C6598) *
               C50984 * C50841 * C50966 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C51111) *
              C51156 +
          ((C38923 * C308 - C38924 * C294 - C38923 * C309 + C38919 * C324 +
            C38925 * C1613 - C38926 * C1606 - C38925 * C1614 + C38920 * C1618 +
            C38927 * C2699 - C38928 * C2696 - C38927 * C2700 + C38921 * C2705 +
            C38929 * C4596 - C38930 * C4590 - C38929 * C4597 + C38922 * C4602) *
               C50984 * C50841 * C51111 -
           (C38929 * C22962 - C38930 * C22961 - C38929 * C22963 +
            C38922 * C22964 + C38927 * C4596 - C38928 * C4590 - C38927 * C4597 +
            C38921 * C4602 + C38925 * C2699 - C38926 * C2696 - C38925 * C2700 +
            C38920 * C2705 + C38923 * C1613 - C38924 * C1606 - C38923 * C1614 +
            C38919 * C1618) *
               C50984 * C50841 * C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
                 C33303 * C495 - C33304 * C482 - C33303 * C496 +
                 C51063 * C512) *
                    C50984 * C17236 +
                (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                   C50902 * C1066 -
               (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
                (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
                 C33301 * C306 - C33302 * C293 - C33301 * C307 +
                 C33299 * C323) *
                    C50984 * C17236) *
                   C50902 * C50938) *
                  C1068 +
              (((C33563 + C33562) * C50984 * C17236 +
                (C33561 + C33560) * C50984 * C17237 +
                (C33930 + C33931) * C50984 * C17238) *
                   C50902 * C50938 -
               (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
                (C33355 + C33354) * C50984 * C17236) *
                   C50902 * C1066) *
                  C1069 +
              ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
                (C33360 + C33361) * C50984 * C17238) *
                   C50902 * C1066 -
               ((C33303 * C937 - C33304 * C928 - C33303 * C938 + C51063 * C943 +
                 C33301 * C316 - C33302 * C298 - C33301 * C317 +
                 C33299 * C328) *
                    C50984 * C17238 +
                (C33931 + C33930) * C50984 * C17237 + C33925 * C17236) *
                   C50902 * C50938) *
                  C1070) +
         0.5 * std::pow(Pi, 2.5) *
             (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
                C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                   C50984 * C17236 +
               (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                  C50902 * C1137 -
              (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
               (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
                C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                   C50984 * C17236) *
                  C50902 * C1138 +
              ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
                C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
                C51063 * C1618) *
                   C50984 * C17236 +
               (C33564 + C33565) * C50984 * C17237 +
               (C33566 + C33567) * C50984 * C17238) *
                  C50902 * C1139 -
              ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 +
                C51063 * C3245 + C33301 * C1148 - C33302 * C1143 -
                C33301 * C1149 + C33299 * C1155) *
                   C50984 * C17238 +
               (C33303 * C3239 - C33304 * C3235 - C33303 * C3240 +
                C51063 * C3244 + C33301 * C1150 - C33302 * C1144 -
                C33301 * C1151 + C33299 * C1156) *
                   C50984 * C17237 +
               (C33303 * C3237 - C33304 * C3234 - C33303 * C3238 +
                C51063 * C3243 + C33301 * C1152 - C33302 * C1145 -
                C33301 * C1153 + C33299 * C1157) *
                   C50984 * C17236) *
                  C50902 * C1140) *
             C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C476 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C477 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C50984 * C17236 +
            (C33766 + C33767) * C50984 * C17237 +
            (C33768 + C33769) * C50984 * C17238) *
               C478) *
              C1066 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C477 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C476 -
           ((C33303 * C6177 - C33304 * C6176 - C33303 * C6178 + C51063 * C6179 +
             C33301 * C1262 - C33302 * C1257 - C33301 * C1263 +
             C33299 * C1269) *
                C50984 * C17238 +
            (C33303 * C4594 - C33304 * C4589 - C33303 * C4595 + C51063 * C4601 +
             C33301 * C1264 - C33302 * C1258 - C33301 * C1265 +
             C33299 * C1270) *
                C50984 * C17237 +
            (C33303 * C4598 - C33304 * C4591 - C33303 * C4599 + C51063 * C4603 +
             C33301 * C1266 - C33302 * C1259 - C33301 * C1267 +
             C33299 * C1271) *
                C50984 * C17236) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C1066 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C50938) *
              C1068 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C50938 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C50902 * C1066 -
           ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
             C33301 * C1148 - C33302 * C1143 - C33301 * C1149 +
             C33299 * C1155) *
                C2332 +
            (C33567 + C33566) * C2331 + C33916 * C2330) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C36361 + C36362) * C2331 + C36369 * C2332) *
              C50841 * C50902 * C1137 -
          (C37288 * C2332 + (C36364 + C36363) * C2331 +
           (C36362 + C36361) * C2330) *
              C50841 * C50902 * C1138 +
          (C36369 * C2330 + (C36366 + C36365) * C2331 +
           (C37301 + C37302) * C2332) *
              C50841 * C50902 * C1139 -
          ((C33303 * C21009 - C33304 * C21008 - C33303 * C21010 +
            C51063 * C21011 + C33301 * C3518 - C33302 * C3515 - C33301 * C3519 +
            C33299 * C3521) *
               C2332 +
           (C37302 + C37301) * C2331 + C37288 * C2330) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C476 -
           ((C37038 + C37039) * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C477 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C2330 +
            (C37473 + C37474) * C2331 + (C37475 + C37476) * C2332) *
               C50841 * C478) *
              C1066 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C33301 * C3237 - C33302 * C3234 - C33301 * C3238 + C33299 * C3243 +
             C33303 * C3679 - C33304 * C3676 - C33303 * C3680 +
             C51063 * C3682) *
                C2332) *
               C50841 * C477 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C476 -
           ((C33303 * C21282 - C33304 * C21281 - C33303 * C21283 +
             C51063 * C21284 + C33301 * C3679 - C33302 * C3676 -
             C33301 * C3680 + C33299 * C3682) *
                C2332 +
            (C37476 + C37475) * C2331 + (C37474 + C37473) * C2330) *
               C50841 * C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C50902 * C1066 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C50902 * C50938) *
              C1068 +
          ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
            C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
            C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
            C38929 * C4594 - C38930 * C4589 - C38929 * C4595 + C38922 * C4601) *
               C50984 * C50841 * C50902 * C50938 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C50902 * C1066) *
              C1069 +
          ((C38923 * C130 - C38924 * C121 - C38923 * C131 + C38919 * C142 +
            C38925 * C491 - C38926 * C480 - C38925 * C492 + C38920 * C510 +
            C38927 * C501 - C38928 * C485 - C38927 * C502 + C38921 * C515 +
            C38929 * C1893 - C38930 * C1888 - C38929 * C1894 + C38922 * C1900) *
               C50984 * C50841 * C50902 * C1066 -
           (C38929 * C6177 - C38930 * C6176 - C38929 * C6178 + C38922 * C6179 +
            C38927 * C1262 - C38928 * C1257 - C38927 * C1263 + C38921 * C1269 +
            C38925 * C933 - C38926 * C926 - C38925 * C934 + C38920 * C941 +
            C38923 * C302 - C38924 * C291 - C38923 * C303 + C38919 * C321) *
               C50984 * C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
           C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
           C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
           C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
              C50984 * C50841 * C50902 * C1137 -
          (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
           C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
           C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
           C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
              C50984 * C50841 * C50902 * C1138 +
          (C38923 * C308 - C38924 * C294 - C38923 * C309 + C38919 * C324 +
           C38925 * C1613 - C38926 * C1606 - C38925 * C1614 + C38920 * C1618 +
           C38927 * C2699 - C38928 * C2696 - C38927 * C2700 + C38921 * C2705 +
           C38929 * C4596 - C38930 * C4590 - C38929 * C4597 + C38922 * C4602) *
              C50984 * C50841 * C50902 * C1139 -
          (C38929 * C21282 - C38930 * C21281 - C38929 * C21283 +
           C38922 * C21284 + C38927 * C3679 - C38928 * C3676 - C38927 * C3680 +
           C38921 * C3682 + C38925 * C3237 - C38926 * C3234 - C38925 * C3238 +
           C38920 * C3243 + C38923 * C1152 - C38924 * C1145 - C38923 * C1153 +
           C38919 * C1157) *
              C50984 * C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C476 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C477 +
           (C38923 * C497 - C38924 * C483 - C38923 * C498 + C38919 * C513 +
            C38925 * C1897 - C38926 * C1890 - C38925 * C1898 + C38920 * C1902 +
            C38927 * C5597 - C38928 * C5594 - C38927 * C5598 + C38921 * C5603 +
            C38929 * C7479 - C38930 * C7476 - C38929 * C7480 + C38922 * C7482) *
               C50984 * C50841 * C478) *
              C1066 +
          ((C38923 * C929 - C38924 * C924 - C38923 * C930 + C38919 * C939 +
            C38925 * C1266 - C38926 * C1259 - C38925 * C1267 + C38920 * C1271 +
            C38927 * C4598 - C38928 * C4591 - C38927 * C4599 + C38921 * C4603 +
            C38929 * C6595 - C38930 * C6592 - C38929 * C6596 + C38922 * C6598) *
               C50984 * C50841 * C477 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C476 -
           (C38929 * C23884 - C38930 * C23883 - C38929 * C23885 +
            C38922 * C23886 + C38927 * C6595 - C38928 * C6592 - C38927 * C6596 +
            C38921 * C6598 + C38925 * C4598 - C38926 * C4591 - C38925 * C4599 +
            C38920 * C4603 + C38923 * C1266 - C38924 * C1259 - C38923 * C1267 +
            C38919 * C1271) *
               C50984 * C50841 * C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C2330 +
             (C36361 + C36362) * C2331 + C36369 * C2332) *
                C50841 * C51111 -
            ((C37038 + C37039) * C2332 + (C37040 + C37041) * C2331 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C2330) *
                C50841 * C50966) *
               C1066 +
           (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
             (C33301 * C3237 - C33302 * C3234 - C33301 * C3238 +
              C33299 * C3243 + C33303 * C3679 - C33304 * C3676 -
              C33303 * C3680 + C51063 * C3682) *
                 C2332) *
                C50841 * C50966 -
            (C37288 * C2332 + (C36364 + C36363) * C2331 +
             (C36362 + C36361) * C2330) *
                C50841 * C51111) *
               C50938) *
              C51102 +
          ((((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
             (C37042 + C37043) * C2332) *
                C50841 * C50966 -
            (C36344 * C2332 + (C33562 + C33563) * C2331 +
             (C33355 + C33354) * C2330) *
                C50841 * C51111) *
               C1066 +
           (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
             (C36367 + C36368) * C2332) *
                C50841 * C51111 -
            ((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C2332 +
             (C37043 + C37042) * C2331 + (C34313 + C34312) * C2330) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C50984 * C17236 +
             (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                C51111 -
            (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C50984 * C17236) *
                C50966) *
               C1066 +
           (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
              C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
              C51063 * C1271) *
                 C50984 * C17236 +
             (C34312 + C34313) * C50984 * C17237 +
             (C34314 + C34315) * C50984 * C17238) *
                C50966 -
            (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
             (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
              C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                 C50984 * C17236) *
                C51111) *
               C50938) *
              C51102 +
          ((((C33765 + C33764) * C50984 * C17236 +
             (C33763 + C33762) * C50984 * C17237 +
             (C34092 + C34093) * C50984 * C17238) *
                C50966 -
            (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
             (C33355 + C33354) * C50984 * C17236) *
                C51111) *
               C1066 +
           (((C33563 + C33562) * C50984 * C17236 +
             (C33561 + C33560) * C50984 * C17237 +
             (C33930 + C33931) * C50984 * C17238) *
                C51111 -
            ((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C50984 * C17238 +
             (C34315 + C34314) * C50984 * C17237 +
             (C34313 + C34312) * C50984 * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
             C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
             C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
             C38929 * C1897 - C38930 * C1890 - C38929 * C1898 +
             C38922 * C1902) *
                C50984 * C50841 * C51111 -
            (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
             C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
             C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
             C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
                C50984 * C50841 * C50966) *
               C1066 +
           ((C38923 * C929 - C38924 * C924 - C38923 * C930 + C38919 * C939 +
             C38925 * C1266 - C38926 * C1259 - C38925 * C1267 + C38920 * C1271 +
             C38927 * C4598 - C38928 * C4591 - C38927 * C4599 + C38921 * C4603 +
             C38929 * C6595 - C38930 * C6592 - C38929 * C6596 +
             C38922 * C6598) *
                C50984 * C50841 * C50966 -
            (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
             C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
             C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
             C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
                C50984 * C50841 * C51111) *
               C50938) *
              C51102 +
          (((C38923 * C493 - C38924 * C481 - C38923 * C494 + C38919 * C511 +
             C38925 * C499 - C38926 * C484 - C38925 * C500 + C38920 * C514 +
             C38927 * C1895 - C38928 * C1889 - C38927 * C1896 + C38921 * C1901 +
             C38929 * C5599 - C38930 * C5595 - C38929 * C5600 +
             C38922 * C5604) *
                C50984 * C50841 * C50966 -
            (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
             C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
             C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
             C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
                C50984 * C50841 * C51111) *
               C1066 +
           ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
             C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
             C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
             C38929 * C4594 - C38930 * C4589 - C38929 * C4595 +
             C38922 * C4601) *
                C50984 * C50841 * C51111 -
            (C38929 * C6593 - C38930 * C6591 - C38929 * C6594 + C38922 * C6597 +
             C38927 * C4594 - C38928 * C4589 - C38927 * C4595 + C38921 * C4601 +
             C38925 * C1264 - C38926 * C1258 - C38925 * C1265 + C38920 * C1270 +
             C38923 * C931 - C38924 * C925 - C38923 * C932 + C38919 * C940) *
                C50984 * C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C50984 * C17236 +
           (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
              C50902 * C1137 -
          (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
           (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
            C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
               C50984 * C17236) *
              C50902 * C1138 +
          ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
            C33303 * C1613 - C33304 * C1606 - C33303 * C1614 + C51063 * C1618) *
               C50984 * C17236 +
           (C33564 + C33565) * C50984 * C17237 +
           (C33566 + C33567) * C50984 * C17238) *
              C50902 * C1139 -
          ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
            C33301 * C1148 - C33302 * C1143 - C33301 * C1149 + C33299 * C1155) *
               C50984 * C17238 +
           (C33303 * C3239 - C33304 * C3235 - C33303 * C3240 + C51063 * C3244 +
            C33301 * C1150 - C33302 * C1144 - C33301 * C1151 + C33299 * C1156) *
               C50984 * C17237 +
           (C33303 * C3237 - C33304 * C3234 - C33303 * C3238 + C51063 * C3243 +
            C33301 * C1152 - C33302 * C1145 - C33301 * C1153 + C33299 * C1157) *
               C50984 * C17236) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C1066 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C50938) *
              C1068 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33930 + C33931) * C50984 * C17238) *
               C50902 * C50938 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C1066) *
              C1069 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C50902 * C1066 -
           ((C33303 * C937 - C33304 * C928 - C33303 * C938 + C51063 * C943 +
             C33301 * C316 - C33302 * C298 - C33301 * C317 + C33299 * C328) *
                C50984 * C17238 +
            (C33931 + C33930) * C50984 * C17237 + C33925 * C17236) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C1066 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C50938) *
              C1068 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C50938 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C50902 * C1066 -
           ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
             C33301 * C1148 - C33302 * C1143 - C33301 * C1149 +
             C33299 * C1155) *
                C2332 +
            (C33567 + C33566) * C2331 + C33916 * C2330) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C36361 + C36362) * C2331 + C36369 * C2332) *
              C50841 * C50902 * C1137 -
          (C37288 * C2332 + (C36364 + C36363) * C2331 +
           (C36362 + C36361) * C2330) *
              C50841 * C50902 * C1138 +
          (C36369 * C2330 + (C36366 + C36365) * C2331 +
           (C37301 + C37302) * C2332) *
              C50841 * C50902 * C1139 -
          ((C33303 * C21009 - C33304 * C21008 - C33303 * C21010 +
            C51063 * C21011 + C33301 * C3518 - C33302 * C3515 - C33301 * C3519 +
            C33299 * C3521) *
               C2332 +
           (C37302 + C37301) * C2331 + C37288 * C2330) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C50902 * C1066 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C50902 * C50938) *
              C1068 +
          ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
            C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
            C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
            C38929 * C4594 - C38930 * C4589 - C38929 * C4595 + C38922 * C4601) *
               C50984 * C50841 * C50902 * C50938 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C50902 * C1066) *
              C1069 +
          ((C38923 * C130 - C38924 * C121 - C38923 * C131 + C38919 * C142 +
            C38925 * C491 - C38926 * C480 - C38925 * C492 + C38920 * C510 +
            C38927 * C501 - C38928 * C485 - C38927 * C502 + C38921 * C515 +
            C38929 * C1893 - C38930 * C1888 - C38929 * C1894 + C38922 * C1900) *
               C50984 * C50841 * C50902 * C1066 -
           (C38929 * C6177 - C38930 * C6176 - C38929 * C6178 + C38922 * C6179 +
            C38927 * C1262 - C38928 * C1257 - C38927 * C1263 + C38921 * C1269 +
            C38925 * C933 - C38926 * C926 - C38925 * C934 + C38920 * C941 +
            C38923 * C302 - C38924 * C291 - C38923 * C303 + C38919 * C321) *
               C50984 * C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
           C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
           C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
           C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
              C50984 * C50841 * C50902 * C1137 -
          (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
           C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
           C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
           C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
              C50984 * C50841 * C50902 * C1138 +
          (C38923 * C308 - C38924 * C294 - C38923 * C309 + C38919 * C324 +
           C38925 * C1613 - C38926 * C1606 - C38925 * C1614 + C38920 * C1618 +
           C38927 * C2699 - C38928 * C2696 - C38927 * C2700 + C38921 * C2705 +
           C38929 * C4596 - C38930 * C4590 - C38929 * C4597 + C38922 * C4602) *
              C50984 * C50841 * C50902 * C1139 -
          (C38929 * C21282 - C38930 * C21281 - C38929 * C21283 +
           C38922 * C21284 + C38927 * C3679 - C38928 * C3676 - C38927 * C3680 +
           C38921 * C3682 + C38925 * C3237 - C38926 * C3234 - C38925 * C3238 +
           C38920 * C3243 + C38923 * C1152 - C38924 * C1145 - C38923 * C1153 +
           C38919 * C1157) *
              C50984 * C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C2330 +
             (C36361 + C36362) * C2331 + C36369 * C2332) *
                C50841 * C1717 -
            (C37963 * C2332 + (C37040 + C37041) * C2331 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C2330) *
                C50841 * C50966) *
               C51110 +
           (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
             (C37976 + C37977) * C2332) *
                C50841 * C50966 -
            (C37288 * C2332 + (C36364 + C36363) * C2331 +
             (C36362 + C36361) * C2330) *
                C50841 * C1717) *
               C50938) *
              C51102 +
          ((((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
             (C37042 + C37043) * C2332) *
                C50841 * C50966 -
            (C36344 * C2332 + (C33562 + C33563) * C2331 +
             (C33355 + C33354) * C2330) *
                C50841 * C1717) *
               C51110 +
           (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
             (C36367 + C36368) * C2332) *
                C50841 * C1717 -
            ((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C2332 +
             (C37043 + C37042) * C2331 + (C34313 + C34312) * C2330) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C50984 * C17236 +
             (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                C1717 -
            (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C50984 * C17236) *
                C50966) *
               C51110 +
           (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
              C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
              C51063 * C1271) *
                 C50984 * C17236 +
             (C34312 + C34313) * C50984 * C17237 +
             (C34314 + C34315) * C50984 * C17238) *
                C50966 -
            (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
             (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
              C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                 C50984 * C17236) *
                C1717) *
               C50938) *
              C51102 +
          ((((C33765 + C33764) * C50984 * C17236 +
             (C33763 + C33762) * C50984 * C17237 +
             (C34092 + C34093) * C50984 * C17238) *
                C50966 -
            (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
             (C33355 + C33354) * C50984 * C17236) *
                C1717) *
               C51110 +
           (((C33563 + C33562) * C50984 * C17236 +
             (C33561 + C33560) * C50984 * C17237 +
             (C33930 + C33931) * C50984 * C17238) *
                C1717 -
            ((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C50984 * C17238 +
             (C34315 + C34314) * C50984 * C17237 +
             (C34313 + C34312) * C50984 * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
             C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
             C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
             C38929 * C1897 - C38930 * C1890 - C38929 * C1898 +
             C38922 * C1902) *
                C50984 * C50841 * C1717 -
            (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
             C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
             C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
             C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
                C50984 * C50841 * C50966) *
               C51110 +
           ((C38923 * C929 - C38924 * C924 - C38923 * C930 + C38919 * C939 +
             C38925 * C1266 - C38926 * C1259 - C38925 * C1267 + C38920 * C1271 +
             C38927 * C4598 - C38928 * C4591 - C38927 * C4599 + C38921 * C4603 +
             C38929 * C6595 - C38930 * C6592 - C38929 * C6596 +
             C38922 * C6598) *
                C50984 * C50841 * C50966 -
            (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
             C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
             C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
             C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
                C50984 * C50841 * C1717) *
               C50938) *
              C51102 +
          (((C38923 * C493 - C38924 * C481 - C38923 * C494 + C38919 * C511 +
             C38925 * C499 - C38926 * C484 - C38925 * C500 + C38920 * C514 +
             C38927 * C1895 - C38928 * C1889 - C38927 * C1896 + C38921 * C1901 +
             C38929 * C5599 - C38930 * C5595 - C38929 * C5600 +
             C38922 * C5604) *
                C50984 * C50841 * C50966 -
            (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
             C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
             C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
             C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
                C50984 * C50841 * C1717) *
               C51110 +
           ((C38923 * C304 - C38924 * C292 - C38923 * C305 + C38919 * C322 +
             C38925 * C931 - C38926 * C925 - C38925 * C932 + C38920 * C940 +
             C38927 * C1264 - C38928 * C1258 - C38927 * C1265 + C38921 * C1270 +
             C38929 * C4594 - C38930 * C4589 - C38929 * C4595 +
             C38922 * C4601) *
                C50984 * C50841 * C1717 -
            (C38929 * C6593 - C38930 * C6591 - C38929 * C6594 + C38922 * C6597 +
             C38927 * C4594 - C38928 * C4589 - C38927 * C4595 + C38921 * C4601 +
             C38925 * C1264 - C38926 * C1258 - C38925 * C1265 + C38920 * C1270 +
             C38923 * C931 - C38924 * C925 - C38923 * C932 + C38919 * C940) *
                C50984 * C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C51157 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C51158 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C2330 +
            (C37473 + C37474) * C2331 + (C37475 + C37476) * C2332) *
               C50841 * C2133) *
              C51110 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C37976 + C37977) * C2332) *
               C50841 * C51158 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C51157 -
           ((C33303 * C21282 - C33304 * C21281 - C33303 * C21283 +
             C51063 * C21284 + C33301 * C3679 - C33302 * C3676 -
             C33301 * C3680 + C33299 * C3682) *
                C2332 +
            (C37476 + C37475) * C2331 + (C37474 + C37473) * C2330) *
               C50841 * C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C51157 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C51158 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C50984 * C17236 +
            (C33766 + C33767) * C50984 * C17237 +
            (C33768 + C33769) * C50984 * C17238) *
               C2133) *
              C51110 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C51158 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C51157 -
           ((C33303 * C6177 - C33304 * C6176 - C33303 * C6178 + C51063 * C6179 +
             C33301 * C1262 - C33302 * C1257 - C33301 * C1263 +
             C33299 * C1269) *
                C50984 * C17238 +
            (C33303 * C4594 - C33304 * C4589 - C33303 * C4595 + C51063 * C4601 +
             C33301 * C1264 - C33302 * C1258 - C33301 * C1265 +
             C33299 * C1270) *
                C50984 * C17237 +
            (C33303 * C4598 - C33304 * C4591 - C33303 * C4599 + C51063 * C4603 +
             C33301 * C1266 - C33302 * C1259 - C33301 * C1267 +
             C33299 * C1271) *
                C50984 * C17236) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C51157 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C51158 +
           (C38923 * C497 - C38924 * C483 - C38923 * C498 + C38919 * C513 +
            C38925 * C1897 - C38926 * C1890 - C38925 * C1898 + C38920 * C1902 +
            C38927 * C5597 - C38928 * C5594 - C38927 * C5598 + C38921 * C5603 +
            C38929 * C7479 - C38930 * C7476 - C38929 * C7480 + C38922 * C7482) *
               C50984 * C50841 * C2133) *
              C51110 +
          ((C38923 * C929 - C38924 * C924 - C38923 * C930 + C38919 * C939 +
            C38925 * C1266 - C38926 * C1259 - C38925 * C1267 + C38920 * C1271 +
            C38927 * C4598 - C38928 * C4591 - C38927 * C4599 + C38921 * C4603 +
            C38929 * C6595 - C38930 * C6592 - C38929 * C6596 + C38922 * C6598) *
               C50984 * C50841 * C51158 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C51157 -
           (C38929 * C23884 - C38930 * C23883 - C38929 * C23885 +
            C38922 * C23886 + C38927 * C6595 - C38928 * C6592 - C38927 * C6596 +
            C38921 * C6598 + C38925 * C4598 - C38926 * C4591 - C38925 * C4599 +
            C38920 * C4603 + C38923 * C1266 - C38924 * C1259 - C38923 * C1267 +
            C38919 * C1271) *
               C50984 * C50841 * C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
                 C33303 * C495 - C33304 * C482 - C33303 * C496 +
                 C51063 * C512) *
                    C50984 * C17236 +
                (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                   C1717 -
               (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
                (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
                 C33301 * C495 - C33302 * C482 - C33301 * C496 +
                 C33299 * C512) *
                    C50984 * C17236) *
                   C50966) *
                  C50886 * C1068 +
              (((C33765 + C33764) * C50984 * C17236 +
                (C33763 + C33762) * C50984 * C17237 +
                (C34092 + C34093) * C50984 * C17238) *
                   C50966 -
               (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
                (C33355 + C33354) * C50984 * C17236) *
                   C1717) *
                  C50886 * C1069 +
              ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
                (C33360 + C33361) * C50984 * C17238) *
                   C1717 -
               ((C33303 * C507 - C33304 * C488 - C33303 * C508 + C51063 * C518 +
                 C33301 * C505 - C33302 * C487 - C33301 * C506 +
                 C33299 * C517) *
                    C50984 * C17238 +
                (C34093 + C34092) * C50984 * C17237 + C34087 * C17236) *
                   C50966) *
                  C50886 * C1070) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
                 C33303 * C495 - C33304 * C482 - C33303 * C496 +
                 C51063 * C512) *
                    C50984 * C17236 +
                (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                   C1717 -
               (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
                (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
                 C33301 * C495 - C33302 * C482 - C33301 * C496 +
                 C33299 * C512) *
                    C50984 * C17236) *
                   C50966) *
                  C285 +
              (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
                 C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
                 C51063 * C1271) *
                    C50984 * C17236 +
                (C34312 + C34313) * C50984 * C17237 +
                (C34314 + C34315) * C50984 * C17238) *
                   C50966 -
               (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
                (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
                 C33301 * C306 - C33302 * C293 - C33301 * C307 +
                 C33299 * C323) *
                    C50984 * C17236) *
                   C1717) *
                  C286 +
              (((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
                 C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
                 C51063 * C1618) *
                    C50984 * C17236 +
                (C33564 + C33565) * C50984 * C17237 +
                (C33566 + C33567) * C50984 * C17238) *
                   C1717 -
               ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 +
                 C51063 * C2707 + C33301 * C1609 - C33302 * C1604 -
                 C33301 * C1610 + C33299 * C1616) *
                    C50984 * C17238 +
                (C33303 * C2701 - C33304 * C2697 - C33303 * C2702 +
                 C51063 * C2706 + C33301 * C1611 - C33302 * C1605 -
                 C33301 * C1612 + C33299 * C1617) *
                    C50984 * C17237 +
                (C33303 * C2699 - C33304 * C2696 - C33303 * C2700 +
                 C51063 * C2705 + C33301 * C1613 - C33302 * C1606 -
                 C33301 * C1614 + C33299 * C1618) *
                    C50984 * C17236) *
                   C50966) *
                  C287) *
             C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C50984 * C17236 +
           (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
              C1883 -
          (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
           (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
            C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
               C50984 * C17236) *
              C1884 +
          ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
            C33303 * C1897 - C33304 * C1890 - C33303 * C1898 + C51063 * C1902) *
               C50984 * C17236 +
           (C33766 + C33767) * C50984 * C17237 +
           (C33768 + C33769) * C50984 * C17238) *
              C1885 -
          ((C33303 * C5601 - C33304 * C5596 - C33303 * C5602 + C51063 * C5605 +
            C33301 * C1893 - C33302 * C1888 - C33301 * C1894 + C33299 * C1900) *
               C50984 * C17238 +
           (C33303 * C5599 - C33304 * C5595 - C33303 * C5600 + C51063 * C5604 +
            C33301 * C1895 - C33302 * C1889 - C33301 * C1896 + C33299 * C1901) *
               C50984 * C17237 +
           (C33303 * C5597 - C33304 * C5594 - C33303 * C5598 + C51063 * C5603 +
            C33301 * C1897 - C33302 * C1890 - C33301 * C1898 + C33299 * C1902) *
               C50984 * C17236) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C1717 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C37042 + C37043) * C2332) *
               C50841 * C50966 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C1717 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C2332 +
            (C34315 + C34314) * C2331 + C34078 * C2330) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C1717 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C285 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C37976 + C37977) * C2332) *
               C50841 * C50966 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C1717) *
              C286 +
          ((C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C37301 + C37302) * C2332) *
               C50841 * C1717 -
           ((C33303 * C20672 - C33304 * C20671 - C33303 * C20673 +
             C51063 * C20674 + C33301 * C4187 - C33302 * C4184 -
             C33301 * C4188 + C33299 * C4190) *
                C2332 +
            (C37977 + C37976) * C2331 + C37963 * C2330) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C36361 + C36362) * C2331 + C36369 * C2332) *
              C50841 * C1883 -
          (C37963 * C2332 + (C37040 + C37041) * C2331 +
           (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
            C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
               C2330) *
              C50841 * C1884 +
          ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
            C33303 * C1897 - C33304 * C1890 - C33303 * C1898 + C51063 * C1902) *
               C2330 +
           (C37473 + C37474) * C2331 + (C37475 + C37476) * C2332) *
              C50841 * C1885 -
          ((C33303 * C22962 - C33304 * C22961 - C33303 * C22963 +
            C51063 * C22964 + C33301 * C4596 - C33302 * C4590 - C33301 * C4597 +
            C33299 * C4602) *
               C2332 +
           (C33303 * C6595 - C33304 * C6592 - C33303 * C6596 + C51063 * C6598 +
            C33301 * C4598 - C33302 * C4591 - C33301 * C4599 + C33299 * C4603) *
               C2331 +
           (C33303 * C5597 - C33304 * C5594 - C33303 * C5598 + C51063 * C5603 +
            C33301 * C1897 - C33302 * C1890 - C33301 * C1898 + C33299 * C1902) *
               C2330) *
              C50841 * C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C1717 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C50966) *
              C50886 * C1068 +
          ((C38923 * C493 - C38924 * C481 - C38923 * C494 + C38919 * C511 +
            C38925 * C499 - C38926 * C484 - C38925 * C500 + C38920 * C514 +
            C38927 * C1895 - C38928 * C1889 - C38927 * C1896 + C38921 * C1901 +
            C38929 * C5599 - C38930 * C5595 - C38929 * C5600 + C38922 * C5604) *
               C50984 * C50841 * C50966 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C1717) *
              C50886 * C1069 +
          ((C38923 * C130 - C38924 * C121 - C38923 * C131 + C38919 * C142 +
            C38925 * C491 - C38926 * C480 - C38925 * C492 + C38920 * C510 +
            C38927 * C501 - C38928 * C485 - C38927 * C502 + C38921 * C515 +
            C38929 * C1893 - C38930 * C1888 - C38929 * C1894 + C38922 * C1900) *
               C50984 * C50841 * C1717 -
           (C38929 * C5601 - C38930 * C5596 - C38929 * C5602 + C38922 * C5605 +
            C38927 * C1893 - C38928 * C1888 - C38927 * C1894 + C38921 * C1900 +
            C38925 * C501 - C38926 * C485 - C38925 * C502 + C38920 * C515 +
            C38923 * C491 - C38924 * C480 - C38923 * C492 + C38919 * C510) *
               C50984 * C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C1717 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C50966) *
              C285 +
          ((C38923 * C929 - C38924 * C924 - C38923 * C930 + C38919 * C939 +
            C38925 * C1266 - C38926 * C1259 - C38925 * C1267 + C38920 * C1271 +
            C38927 * C4598 - C38928 * C4591 - C38927 * C4599 + C38921 * C4603 +
            C38929 * C6595 - C38930 * C6592 - C38929 * C6596 + C38922 * C6598) *
               C50984 * C50841 * C50966 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C1717) *
              C286 +
          ((C38923 * C308 - C38924 * C294 - C38923 * C309 + C38919 * C324 +
            C38925 * C1613 - C38926 * C1606 - C38925 * C1614 + C38920 * C1618 +
            C38927 * C2699 - C38928 * C2696 - C38927 * C2700 + C38921 * C2705 +
            C38929 * C4596 - C38930 * C4590 - C38929 * C4597 + C38922 * C4602) *
               C50984 * C50841 * C1717 -
           (C38929 * C22962 - C38930 * C22961 - C38929 * C22963 +
            C38922 * C22964 + C38927 * C4596 - C38928 * C4590 - C38927 * C4597 +
            C38921 * C4602 + C38925 * C2699 - C38926 * C2696 - C38925 * C2700 +
            C38920 * C2705 + C38923 * C1613 - C38924 * C1606 - C38923 * C1614 +
            C38919 * C1618) *
               C50984 * C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
           C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
           C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
           C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
              C50984 * C50841 * C1883 -
          (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
           C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
           C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
           C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
              C50984 * C50841 * C1884 +
          (C38923 * C497 - C38924 * C483 - C38923 * C498 + C38919 * C513 +
           C38925 * C1897 - C38926 * C1890 - C38925 * C1898 + C38920 * C1902 +
           C38927 * C5597 - C38928 * C5594 - C38927 * C5598 + C38921 * C5603 +
           C38929 * C7479 - C38930 * C7476 - C38929 * C7480 + C38922 * C7482) *
              C50984 * C50841 * C1885 -
          (C38929 * C40304 - C38930 * C40303 - C38929 * C40305 +
           C38922 * C40306 + C38927 * C7479 - C38928 * C7476 - C38927 * C7480 +
           C38921 * C7482 + C38925 * C5597 - C38926 * C5594 - C38925 * C5598 +
           C38920 * C5603 + C38923 * C1897 - C38924 * C1890 - C38923 * C1898 +
           C38919 * C1902) *
              C50984 * C50841 * C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C51157 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C51158 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C2330 +
            (C37473 + C37474) * C2331 + (C37475 + C37476) * C2332) *
               C50841 * C2133) *
              C50886 * C51102 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C37042 + C37043) * C2332) *
               C50841 * C51158 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C51157 -
           ((C33303 * C4592 - C33304 * C4588 - C33303 * C4593 + C51063 * C4600 +
             C33301 * C2701 - C33302 * C2697 - C33301 * C2702 +
             C33299 * C2706) *
                C2332 +
            (C33303 * C4594 - C33304 * C4589 - C33303 * C4595 + C51063 * C4601 +
             C33301 * C1264 - C33302 * C1258 - C33301 * C1265 +
             C33299 * C1270) *
                C2331 +
            (C33767 + C33766) * C2330) *
               C50841 * C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C51157 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C51158 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C50984 * C17236 +
            (C33766 + C33767) * C50984 * C17237 +
            (C33768 + C33769) * C50984 * C17238) *
               C2133) *
              C50886 * C51102 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C34092 + C34093) * C50984 * C17238) *
               C51158 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C51157 -
           ((C33303 * C1891 - C33304 * C1887 - C33303 * C1892 + C51063 * C1899 +
             C33301 * C503 - C33302 * C486 - C33301 * C504 + C33299 * C516) *
                C50984 * C17238 +
            (C33769 + C33768) * C50984 * C17237 +
            (C33767 + C33766) * C50984 * C17236) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C51157 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C51158 +
           (C38923 * C497 - C38924 * C483 - C38923 * C498 + C38919 * C513 +
            C38925 * C1897 - C38926 * C1890 - C38925 * C1898 + C38920 * C1902 +
            C38927 * C5597 - C38928 * C5594 - C38927 * C5598 + C38921 * C5603 +
            C38929 * C7479 - C38930 * C7476 - C38929 * C7480 + C38922 * C7482) *
               C50984 * C50841 * C2133) *
              C50886 * C51102 +
          ((C38923 * C493 - C38924 * C481 - C38923 * C494 + C38919 * C511 +
            C38925 * C499 - C38926 * C484 - C38925 * C500 + C38920 * C514 +
            C38927 * C1895 - C38928 * C1889 - C38927 * C1896 + C38921 * C1901 +
            C38929 * C5599 - C38930 * C5595 - C38929 * C5600 + C38922 * C5604) *
               C50984 * C50841 * C51158 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C51157 -
           (C38929 * C7477 - C38930 * C7475 - C38929 * C7478 + C38922 * C7481 +
            C38927 * C5599 - C38928 * C5595 - C38927 * C5600 + C38921 * C5604 +
            C38925 * C1895 - C38926 * C1889 - C38925 * C1896 + C38920 * C1901 +
            C38923 * C499 - C38924 * C484 - C38923 * C500 + C38919 * C514) *
               C50984 * C50841 * C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C1717 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C285 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C50966 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C1717) *
              C286 +
          (((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C1717 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C50984 * C17238 +
            (C33303 * C2701 - C33304 * C2697 - C33303 * C2702 + C51063 * C2706 +
             C33301 * C1611 - C33302 * C1605 - C33301 * C1612 +
             C33299 * C1617) *
                C50984 * C17237 +
            (C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C50984 * C17236) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C1717 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C50886 * C1068 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C34092 + C34093) * C50984 * C17238) *
               C50966 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C1717) *
              C50886 * C1069 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C1717 -
           ((C33303 * C507 - C33304 * C488 - C33303 * C508 + C51063 * C518 +
             C33301 * C505 - C33302 * C487 - C33301 * C506 + C33299 * C517) *
                C50984 * C17238 +
            (C34093 + C34092) * C50984 * C17237 + C34087 * C17236) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C1717 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C37042 + C37043) * C2332) *
               C50841 * C50966 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C1717 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C2332 +
            (C34315 + C34314) * C2331 + C34078 * C2330) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C1717 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C285 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C37976 + C37977) * C2332) *
               C50841 * C50966 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C1717) *
              C286 +
          ((C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C37301 + C37302) * C2332) *
               C50841 * C1717 -
           ((C33303 * C20672 - C33304 * C20671 - C33303 * C20673 +
             C51063 * C20674 + C33301 * C4187 - C33302 * C4184 -
             C33301 * C4188 + C33299 * C4190) *
                C2332 +
            (C37977 + C37976) * C2331 + C37963 * C2330) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C1717 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C50966) *
              C50886 * C1068 +
          ((C38923 * C493 - C38924 * C481 - C38923 * C494 + C38919 * C511 +
            C38925 * C499 - C38926 * C484 - C38925 * C500 + C38920 * C514 +
            C38927 * C1895 - C38928 * C1889 - C38927 * C1896 + C38921 * C1901 +
            C38929 * C5599 - C38930 * C5595 - C38929 * C5600 + C38922 * C5604) *
               C50984 * C50841 * C50966 -
           (C38929 * C1895 - C38930 * C1889 - C38929 * C1896 + C38922 * C1901 +
            C38927 * C499 - C38928 * C484 - C38927 * C500 + C38921 * C514 +
            C38925 * C493 - C38926 * C481 - C38925 * C494 + C38920 * C511 +
            C38923 * C128 - C38924 * C120 - C38923 * C129 + C38919 * C141) *
               C50984 * C50841 * C1717) *
              C50886 * C1069 +
          ((C38923 * C130 - C38924 * C121 - C38923 * C131 + C38919 * C142 +
            C38925 * C491 - C38926 * C480 - C38925 * C492 + C38920 * C510 +
            C38927 * C501 - C38928 * C485 - C38927 * C502 + C38921 * C515 +
            C38929 * C1893 - C38930 * C1888 - C38929 * C1894 + C38922 * C1900) *
               C50984 * C50841 * C1717 -
           (C38929 * C5601 - C38930 * C5596 - C38929 * C5602 + C38922 * C5605 +
            C38927 * C1893 - C38928 * C1888 - C38927 * C1894 + C38921 * C1900 +
            C38925 * C501 - C38926 * C485 - C38925 * C502 + C38920 * C515 +
            C38923 * C491 - C38924 * C480 - C38923 * C492 + C38919 * C510) *
               C50984 * C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38923 * C126 - C38924 * C119 - C38923 * C127 + C38919 * C140 +
            C38925 * C495 - C38926 * C482 - C38925 * C496 + C38920 * C512 +
            C38927 * C497 - C38928 * C483 - C38927 * C498 + C38921 * C513 +
            C38929 * C1897 - C38930 * C1890 - C38929 * C1898 + C38922 * C1902) *
               C50984 * C50841 * C1717 -
           (C38929 * C5597 - C38930 * C5594 - C38929 * C5598 + C38922 * C5603 +
            C38927 * C1897 - C38928 * C1890 - C38927 * C1898 + C38921 * C1902 +
            C38925 * C497 - C38926 * C483 - C38925 * C498 + C38920 * C513 +
            C38923 * C495 - C38924 * C482 - C38923 * C496 + C38919 * C512) *
               C50984 * C50841 * C50966) *
              C285 +
          ((C38923 * C929 - C38924 * C924 - C38923 * C930 + C38919 * C939 +
            C38925 * C1266 - C38926 * C1259 - C38925 * C1267 + C38920 * C1271 +
            C38927 * C4598 - C38928 * C4591 - C38927 * C4599 + C38921 * C4603 +
            C38929 * C6595 - C38930 * C6592 - C38929 * C6596 + C38922 * C6598) *
               C50984 * C50841 * C50966 -
           (C38929 * C4598 - C38930 * C4591 - C38929 * C4599 + C38922 * C4603 +
            C38927 * C1266 - C38928 * C1259 - C38927 * C1267 + C38921 * C1271 +
            C38925 * C929 - C38926 * C924 - C38925 * C930 + C38920 * C939 +
            C38923 * C306 - C38924 * C293 - C38923 * C307 + C38919 * C323) *
               C50984 * C50841 * C1717) *
              C286 +
          ((C38923 * C308 - C38924 * C294 - C38923 * C309 + C38919 * C324 +
            C38925 * C1613 - C38926 * C1606 - C38925 * C1614 + C38920 * C1618 +
            C38927 * C2699 - C38928 * C2696 - C38927 * C2700 + C38921 * C2705 +
            C38929 * C4596 - C38930 * C4590 - C38929 * C4597 + C38922 * C4602) *
               C50984 * C50841 * C1717 -
           (C38929 * C22962 - C38930 * C22961 - C38929 * C22963 +
            C38922 * C22964 + C38927 * C4596 - C38928 * C4590 - C38927 * C4597 +
            C38921 * C4602 + C38925 * C2699 - C38926 * C2696 - C38925 * C2700 +
            C38920 * C2705 + C38923 * C1613 - C38924 * C1606 - C38923 * C1614 +
            C38919 * C1618) *
               C50984 * C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C50902 * C51110 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C50902 * C50938) *
              C51153 +
          (((C44500 + C44499 + C44498) * C50984 * C51095 +
            (C44856 + C44857 + C44858) * C50984 * C50846) *
               C50902 * C50938 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C50902 * C51110) *
              C51154 +
          (((C44312 + C44311 + C44310) * C50984 * C51095 +
            (C44313 + C44314 + C44315) * C50984 * C50846) *
               C50902 * C51110 -
           ((C44250 * C1260 - C44251 * C1256 - C44250 * C1261 + C44245 * C1268 +
             C44248 * C935 - C44249 * C927 - C44248 * C936 + C51162 * C942 +
             C44246 * C300 - C44247 * C290 - C44246 * C301 + C51161 * C320) *
                C50984 * C50846 +
            (C44858 + C44857 + C44856) * C50984 * C51095) *
               C50902 * C50938) *
              C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
              C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
              C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                 C50984 * C51095 +
             (C44307 + C44308 + C44309) * C50984 * C50846) *
                C51111 -
            ((C44686 + C44687 + C44688) * C50984 * C50846 +
             (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 +
              C44245 * C1902 + C44248 * C497 - C44249 * C483 - C44248 * C498 +
              C51162 * C513 + C44246 * C495 - C44247 * C482 - C44246 * C496 +
              C51161 * C512) *
                 C50984 * C51095) *
                C50966) *
               C51110 +
           (((C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939 +
              C44248 * C1266 - C44249 * C1259 - C44248 * C1267 +
              C51162 * C1271 + C44250 * C4598 - C44251 * C4591 -
              C44250 * C4599 + C44245 * C4603) *
                 C50984 * C51095 +
             (C45238 + C45239 + C45240) * C50984 * C50846) *
                C50966 -
            ((C44498 + C44499 + C44500) * C50984 * C50846 +
             (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 +
              C44245 * C1271 + C44248 * C929 - C44249 * C924 - C44248 * C930 +
              C51162 * C939 + C44246 * C306 - C44247 * C293 - C44246 * C307 +
              C51161 * C323) *
                 C50984 * C51095) *
                C51111) *
               C50938) *
              C288 +
          ((((C44688 + C44687 + C44686) * C50984 * C51095 +
             (C45023 + C45024 + C45025) * C50984 * C50846) *
                C50966 -
            ((C44310 + C44311 + C44312) * C50984 * C50846 +
             (C44309 + C44308 + C44307) * C50984 * C51095) *
                C51111) *
               C51110 +
           (((C44500 + C44499 + C44498) * C50984 * C51095 +
             (C44856 + C44857 + C44858) * C50984 * C50846) *
                C51111 -
            ((C44250 * C6177 - C44251 * C6176 - C44250 * C6178 +
              C44245 * C6179 + C44248 * C1262 - C44249 * C1257 -
              C44248 * C1263 + C51162 * C1269 + C44246 * C933 - C44247 * C926 -
              C44246 * C934 + C51161 * C941) *
                 C50984 * C50846 +
             (C45240 + C45239 + C45238) * C50984 * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C50902 * C285 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C50902 * C286 +
           ((C44246 * C308 - C44247 * C294 - C44246 * C309 + C51161 * C324 +
             C44248 * C1613 - C44249 * C1606 - C44248 * C1614 + C51162 * C1618 +
             C44250 * C2699 - C44251 * C2696 - C44250 * C2700 +
             C44245 * C2705) *
                C50984 * C51095 +
            (C44501 + C44502 + C44503) * C50984 * C50846) *
               C50902 * C287) *
              C288 +
          (((C44500 + C44499 + C44498) * C50984 * C51095 +
            (C44246 * C302 - C44247 * C291 - C44246 * C303 + C51161 * C321 +
             C44248 * C933 - C44249 * C926 - C44248 * C934 + C51162 * C941 +
             C44250 * C1262 - C44251 * C1257 - C44250 * C1263 +
             C44245 * C1269) *
                C50984 * C50846) *
               C50902 * C286 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C50902 * C285 -
           ((C44250 * C2703 - C44251 * C2698 - C44250 * C2704 + C44245 * C2707 +
             C44248 * C1609 - C44249 * C1604 - C44248 * C1610 + C51162 * C1616 +
             C44246 * C312 - C44247 * C296 - C44246 * C313 + C51161 * C326) *
                C50984 * C50846 +
            (C44503 + C44502 + C44501) * C50984 * C51095) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C50984 * C51095 +
           (C44307 + C44308 + C44309) * C50984 * C50846) *
              C50902 * C50886 * C113 -
          ((C44310 + C44311 + C44312) * C50984 * C50846 +
           (C44309 + C44308 + C44307) * C50984 * C51095) *
              C50902 * C50886 * C114 +
          ((C44312 + C44311 + C44310) * C50984 * C51095 +
           (C44313 + C44314 + C44315) * C50984 * C50846) *
              C50902 * C50886 * C115 -
          ((C44250 * C507 - C44251 * C488 - C44250 * C508 + C44245 * C518 +
            C44248 * C505 - C44249 * C487 - C44248 * C506 + C51162 * C517 +
            C44246 * C134 - C44247 * C123 - C44246 * C135 + C51161 * C144) *
               C50984 * C50846 +
           (C44315 + C44314 + C44313) * C50984 * C51095) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C476 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C477 +
           ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
             C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
             C44250 * C5597 - C44251 * C5594 - C44250 * C5598 +
             C44245 * C5603) *
                C50984 * C51095 +
            (C44689 + C44690 + C44691) * C50984 * C50846) *
               C478) *
              C50886 * C288 +
          (((C44688 + C44687 + C44686) * C50984 * C51095 +
            (C44246 * C491 - C44247 * C480 - C44246 * C492 + C51161 * C510 +
             C44248 * C501 - C44249 * C485 - C44248 * C502 + C51162 * C515 +
             C44250 * C1893 - C44251 * C1888 - C44250 * C1894 +
             C44245 * C1900) *
                C50984 * C50846) *
               C477 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C476 -
           ((C44250 * C5601 - C44251 * C5596 - C44250 * C5602 + C44245 * C5605 +
             C44248 * C1893 - C44249 * C1888 - C44248 * C1894 + C51162 * C1900 +
             C44246 * C501 - C44247 * C485 - C44246 * C502 + C51161 * C515) *
                C50984 * C50846 +
            (C44691 + C44690 + C44689) * C50984 * C51095) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C51111 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C50966) *
              C50886 * C51153 +
          (((C44688 + C44687 + C44686) * C50984 * C51095 +
            (C45023 + C45024 + C45025) * C50984 * C50846) *
               C50966 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C51111) *
              C50886 * C51154 +
          (((C44312 + C44311 + C44310) * C50984 * C51095 +
            (C44313 + C44314 + C44315) * C50984 * C50846) *
               C51111 -
           ((C44250 * C1891 - C44251 * C1887 - C44250 * C1892 + C44245 * C1899 +
             C44248 * C503 - C44249 * C486 - C44248 * C504 + C51162 * C516 +
             C44246 * C489 - C44247 * C479 - C44246 * C490 + C51161 * C509) *
                C50984 * C50846 +
            (C45025 + C45024 + C45023) * C50984 * C51095) *
               C50966) *
              C50886 * C669)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C50984 * C51095 +
           (C44307 + C44308 + C44309) * C50984 * C50846) *
              C50902 * C50886 * C113 -
          ((C44310 + C44311 + C44312) * C50984 * C50846 +
           (C44309 + C44308 + C44307) * C50984 * C51095) *
              C50902 * C50886 * C114 +
          ((C44312 + C44311 + C44310) * C50984 * C51095 +
           (C44313 + C44314 + C44315) * C50984 * C50846) *
              C50902 * C50886 * C115 -
          ((C44250 * C507 - C44251 * C488 - C44250 * C508 + C44245 * C518 +
            C44248 * C505 - C44249 * C487 - C44248 * C506 + C51162 * C517 +
            C44246 * C134 - C44247 * C123 - C44246 * C135 + C51161 * C144) *
               C50984 * C50846 +
           (C44315 + C44314 + C44313) * C50984 * C51095) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C50902 * C285 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C50902 * C286 +
           ((C44246 * C308 - C44247 * C294 - C44246 * C309 + C51161 * C324 +
             C44248 * C1613 - C44249 * C1606 - C44248 * C1614 + C51162 * C1618 +
             C44250 * C2699 - C44251 * C2696 - C44250 * C2700 +
             C44245 * C2705) *
                C50984 * C51095 +
            (C44501 + C44502 + C44503) * C50984 * C50846) *
               C50902 * C287) *
              C288 +
          (((C44500 + C44499 + C44498) * C50984 * C51095 +
            (C44246 * C302 - C44247 * C291 - C44246 * C303 + C51161 * C321 +
             C44248 * C933 - C44249 * C926 - C44248 * C934 + C51162 * C941 +
             C44250 * C1262 - C44251 * C1257 - C44250 * C1263 +
             C44245 * C1269) *
                C50984 * C50846) *
               C50902 * C286 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C50902 * C285 -
           ((C44250 * C2703 - C44251 * C2698 - C44250 * C2704 + C44245 * C2707 +
             C44248 * C1609 - C44249 * C1604 - C44248 * C1610 + C51162 * C1616 +
             C44246 * C312 - C44247 * C296 - C44246 * C313 + C51161 * C326) *
                C50984 * C50846 +
            (C44503 + C44502 + C44501) * C50984 * C51095) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C50902 * C51155 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C50902 * C51156 +
           ((C44246 * C308 - C44247 * C294 - C44246 * C309 + C51161 * C324 +
             C44248 * C1613 - C44249 * C1606 - C44248 * C1614 + C51162 * C1618 +
             C44250 * C2699 - C44251 * C2696 - C44250 * C2700 +
             C44245 * C2705) *
                C50984 * C51095 +
            (C44501 + C44502 + C44503) * C50984 * C50846) *
               C50902 * C1372) *
              C51102 +
          (((C44500 + C44499 + C44498) * C50984 * C51095 +
            (C44856 + C44857 + C44858) * C50984 * C50846) *
               C50902 * C51156 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C50902 * C51155 -
           ((C44250 * C2703 - C44251 * C2698 - C44250 * C2704 + C44245 * C2707 +
             C44248 * C1609 - C44249 * C1604 - C44248 * C1610 + C51162 * C1616 +
             C44246 * C312 - C44247 * C296 - C44246 * C313 + C51161 * C326) *
                C50984 * C50846 +
            (C44503 + C44502 + C44501) * C50984 * C51095) *
               C50902 * C1372) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C51111 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C50966) *
              C51155 +
          (((C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939 +
             C44248 * C1266 - C44249 * C1259 - C44248 * C1267 + C51162 * C1271 +
             C44250 * C4598 - C44251 * C4591 - C44250 * C4599 +
             C44245 * C4603) *
                C50984 * C51095 +
            (C45238 + C45239 + C45240) * C50984 * C50846) *
               C50966 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C51111) *
              C51156 +
          (((C44246 * C308 - C44247 * C294 - C44246 * C309 + C51161 * C324 +
             C44248 * C1613 - C44249 * C1606 - C44248 * C1614 + C51162 * C1618 +
             C44250 * C2699 - C44251 * C2696 - C44250 * C2700 +
             C44245 * C2705) *
                C50984 * C51095 +
            (C44501 + C44502 + C44503) * C50984 * C50846) *
               C51111 -
           ((C44250 * C4592 - C44251 * C4588 - C44250 * C4593 + C44245 * C4600 +
             C44248 * C2701 - C44249 * C2697 - C44248 * C2702 + C51162 * C2706 +
             C44246 * C1611 - C44247 * C1605 - C44246 * C1612 +
             C51161 * C1617) *
                C50984 * C50846 +
            (C44250 * C4596 - C44251 * C4590 - C44250 * C4597 + C44245 * C4602 +
             C44248 * C2699 - C44249 * C2696 - C44248 * C2700 + C51162 * C2705 +
             C44246 * C1613 - C44247 * C1606 - C44246 * C1614 +
             C51161 * C1618) *
                C50984 * C51095) *
               C50966) *
              C1372) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C50984 * C51095 +
           (C44307 + C44308 + C44309) * C50984 * C50846) *
              C50902 * C1137 -
          ((C44498 + C44499 + C44500) * C50984 * C50846 +
           (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
            C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
            C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
               C50984 * C51095) *
              C50902 * C1138 +
          ((C44246 * C308 - C44247 * C294 - C44246 * C309 + C51161 * C324 +
            C44248 * C1613 - C44249 * C1606 - C44248 * C1614 + C51162 * C1618 +
            C44250 * C2699 - C44251 * C2696 - C44250 * C2700 + C44245 * C2705) *
               C50984 * C51095 +
           (C44501 + C44502 + C44503) * C50984 * C50846) *
              C50902 * C1139 -
          ((C44250 * C3677 - C44251 * C3675 - C44250 * C3678 + C44245 * C3681 +
            C44248 * C3239 - C44249 * C3235 - C44248 * C3240 + C51162 * C3244 +
            C44246 * C1150 - C44247 * C1144 - C44246 * C1151 + C51161 * C1156) *
               C50984 * C50846 +
           (C44250 * C3679 - C44251 * C3676 - C44250 * C3680 + C44245 * C3682 +
            C44248 * C3237 - C44249 * C3234 - C44248 * C3238 + C51162 * C3243 +
            C44246 * C1152 - C44247 * C1145 - C44246 * C1153 + C51161 * C1157) *
               C50984 * C51095) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C50902 * C1066 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C50902 * C50938) *
              C1068 +
          (((C44500 + C44499 + C44498) * C50984 * C51095 +
            (C44856 + C44857 + C44858) * C50984 * C50846) *
               C50902 * C50938 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C50902 * C1066) *
              C1069 +
          (((C44312 + C44311 + C44310) * C50984 * C51095 +
            (C44313 + C44314 + C44315) * C50984 * C50846) *
               C50902 * C1066 -
           ((C44250 * C1260 - C44251 * C1256 - C44250 * C1261 + C44245 * C1268 +
             C44248 * C935 - C44249 * C927 - C44248 * C936 + C51162 * C942 +
             C44246 * C300 - C44247 * C290 - C44246 * C301 + C51161 * C320) *
                C50984 * C50846 +
            (C44858 + C44857 + C44856) * C50984 * C51095) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C476 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C477 +
           ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
             C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
             C44250 * C5597 - C44251 * C5594 - C44250 * C5598 +
             C44245 * C5603) *
                C50984 * C51095 +
            (C44689 + C44690 + C44691) * C50984 * C50846) *
               C478) *
              C1066 +
          (((C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939 +
             C44248 * C1266 - C44249 * C1259 - C44248 * C1267 + C51162 * C1271 +
             C44250 * C4598 - C44251 * C4591 - C44250 * C4599 +
             C44245 * C4603) *
                C50984 * C51095 +
            (C45238 + C45239 + C45240) * C50984 * C50846) *
               C477 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C476 -
           ((C44250 * C6593 - C44251 * C6591 - C44250 * C6594 + C44245 * C6597 +
             C44248 * C4594 - C44249 * C4589 - C44248 * C4595 + C51162 * C4601 +
             C44246 * C1264 - C44247 * C1258 - C44246 * C1265 +
             C51161 * C1270) *
                C50984 * C50846 +
            (C44250 * C6595 - C44251 * C6592 - C44250 * C6596 + C44245 * C6598 +
             C44248 * C4598 - C44249 * C4591 - C44248 * C4599 + C51162 * C4603 +
             C44246 * C1266 - C44247 * C1259 - C44246 * C1267 +
             C51161 * C1271) *
                C50984 * C51095) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
              C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
              C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                 C50984 * C51095 +
             (C44307 + C44308 + C44309) * C50984 * C50846) *
                C51111 -
            ((C44686 + C44687 + C44688) * C50984 * C50846 +
             (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 +
              C44245 * C1902 + C44248 * C497 - C44249 * C483 - C44248 * C498 +
              C51162 * C513 + C44246 * C495 - C44247 * C482 - C44246 * C496 +
              C51161 * C512) *
                 C50984 * C51095) *
                C50966) *
               C1066 +
           (((C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939 +
              C44248 * C1266 - C44249 * C1259 - C44248 * C1267 +
              C51162 * C1271 + C44250 * C4598 - C44251 * C4591 -
              C44250 * C4599 + C44245 * C4603) *
                 C50984 * C51095 +
             (C45238 + C45239 + C45240) * C50984 * C50846) *
                C50966 -
            ((C44498 + C44499 + C44500) * C50984 * C50846 +
             (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 +
              C44245 * C1271 + C44248 * C929 - C44249 * C924 - C44248 * C930 +
              C51162 * C939 + C44246 * C306 - C44247 * C293 - C44246 * C307 +
              C51161 * C323) *
                 C50984 * C51095) *
                C51111) *
               C50938) *
              C51102 +
          ((((C44688 + C44687 + C44686) * C50984 * C51095 +
             (C45023 + C45024 + C45025) * C50984 * C50846) *
                C50966 -
            ((C44310 + C44311 + C44312) * C50984 * C50846 +
             (C44309 + C44308 + C44307) * C50984 * C51095) *
                C51111) *
               C1066 +
           (((C44500 + C44499 + C44498) * C50984 * C51095 +
             (C44856 + C44857 + C44858) * C50984 * C50846) *
                C51111 -
            ((C44250 * C6177 - C44251 * C6176 - C44250 * C6178 +
              C44245 * C6179 + C44248 * C1262 - C44249 * C1257 -
              C44248 * C1263 + C51162 * C1269 + C44246 * C933 - C44247 * C926 -
              C44246 * C934 + C51161 * C941) *
                 C50984 * C50846 +
             (C45240 + C45239 + C45238) * C50984 * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C50902 * C1066 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C50902 * C50938) *
              C1068 +
          (((C44500 + C44499 + C44498) * C50984 * C51095 +
            (C44856 + C44857 + C44858) * C50984 * C50846) *
               C50902 * C50938 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C50902 * C1066) *
              C1069 +
          (((C44312 + C44311 + C44310) * C50984 * C51095 +
            (C44313 + C44314 + C44315) * C50984 * C50846) *
               C50902 * C1066 -
           ((C44250 * C1260 - C44251 * C1256 - C44250 * C1261 + C44245 * C1268 +
             C44248 * C935 - C44249 * C927 - C44248 * C936 + C51162 * C942 +
             C44246 * C300 - C44247 * C290 - C44246 * C301 + C51161 * C320) *
                C50984 * C50846 +
            (C44858 + C44857 + C44856) * C50984 * C51095) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C50984 * C51095 +
           (C44307 + C44308 + C44309) * C50984 * C50846) *
              C50902 * C1137 -
          ((C44498 + C44499 + C44500) * C50984 * C50846 +
           (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
            C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
            C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
               C50984 * C51095) *
              C50902 * C1138 +
          ((C44246 * C308 - C44247 * C294 - C44246 * C309 + C51161 * C324 +
            C44248 * C1613 - C44249 * C1606 - C44248 * C1614 + C51162 * C1618 +
            C44250 * C2699 - C44251 * C2696 - C44250 * C2700 + C44245 * C2705) *
               C50984 * C51095 +
           (C44501 + C44502 + C44503) * C50984 * C50846) *
              C50902 * C1139 -
          ((C44250 * C3677 - C44251 * C3675 - C44250 * C3678 + C44245 * C3681 +
            C44248 * C3239 - C44249 * C3235 - C44248 * C3240 + C51162 * C3244 +
            C44246 * C1150 - C44247 * C1144 - C44246 * C1151 + C51161 * C1156) *
               C50984 * C50846 +
           (C44250 * C3679 - C44251 * C3676 - C44250 * C3680 + C44245 * C3682 +
            C44248 * C3237 - C44249 * C3234 - C44248 * C3238 + C51162 * C3243 +
            C44246 * C1152 - C44247 * C1145 - C44246 * C1153 + C51161 * C1157) *
               C50984 * C51095) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
              C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
              C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                 C50984 * C51095 +
             (C44307 + C44308 + C44309) * C50984 * C50846) *
                C1717 -
            ((C44686 + C44687 + C44688) * C50984 * C50846 +
             (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 +
              C44245 * C1902 + C44248 * C497 - C44249 * C483 - C44248 * C498 +
              C51162 * C513 + C44246 * C495 - C44247 * C482 - C44246 * C496 +
              C51161 * C512) *
                 C50984 * C51095) *
                C50966) *
               C51110 +
           (((C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939 +
              C44248 * C1266 - C44249 * C1259 - C44248 * C1267 +
              C51162 * C1271 + C44250 * C4598 - C44251 * C4591 -
              C44250 * C4599 + C44245 * C4603) *
                 C50984 * C51095 +
             (C45238 + C45239 + C45240) * C50984 * C50846) *
                C50966 -
            ((C44498 + C44499 + C44500) * C50984 * C50846 +
             (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 +
              C44245 * C1271 + C44248 * C929 - C44249 * C924 - C44248 * C930 +
              C51162 * C939 + C44246 * C306 - C44247 * C293 - C44246 * C307 +
              C51161 * C323) *
                 C50984 * C51095) *
                C1717) *
               C50938) *
              C51102 +
          ((((C44688 + C44687 + C44686) * C50984 * C51095 +
             (C45023 + C45024 + C45025) * C50984 * C50846) *
                C50966 -
            ((C44310 + C44311 + C44312) * C50984 * C50846 +
             (C44309 + C44308 + C44307) * C50984 * C51095) *
                C1717) *
               C51110 +
           (((C44500 + C44499 + C44498) * C50984 * C51095 +
             (C44856 + C44857 + C44858) * C50984 * C50846) *
                C1717 -
            ((C44250 * C6177 - C44251 * C6176 - C44250 * C6178 +
              C44245 * C6179 + C44248 * C1262 - C44249 * C1257 -
              C44248 * C1263 + C51162 * C1269 + C44246 * C933 - C44247 * C926 -
              C44246 * C934 + C51161 * C941) *
                 C50984 * C50846 +
             (C45240 + C45239 + C45238) * C50984 * C51095) *
                C50966) *
               C50938) *
              C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C51157 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C51158 +
           ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
             C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
             C44250 * C5597 - C44251 * C5594 - C44250 * C5598 +
             C44245 * C5603) *
                C50984 * C51095 +
            (C44689 + C44690 + C44691) * C50984 * C50846) *
               C2133) *
              C51110 +
          (((C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939 +
             C44248 * C1266 - C44249 * C1259 - C44248 * C1267 + C51162 * C1271 +
             C44250 * C4598 - C44251 * C4591 - C44250 * C4599 +
             C44245 * C4603) *
                C50984 * C51095 +
            (C45238 + C45239 + C45240) * C50984 * C50846) *
               C51158 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C51157 -
           ((C44250 * C6593 - C44251 * C6591 - C44250 * C6594 + C44245 * C6597 +
             C44248 * C4594 - C44249 * C4589 - C44248 * C4595 + C51162 * C4601 +
             C44246 * C1264 - C44247 * C1258 - C44246 * C1265 +
             C51161 * C1270) *
                C50984 * C50846 +
            (C44250 * C6595 - C44251 * C6592 - C44250 * C6596 + C44245 * C6598 +
             C44248 * C4598 - C44249 * C4591 - C44248 * C4599 + C51162 * C4603 +
             C44246 * C1266 - C44247 * C1259 - C44246 * C1267 +
             C51161 * C1271) *
                C50984 * C51095) *
               C2133) *
              C50938) *
         C50867) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C1717 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C50966) *
              C285 +
          (((C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939 +
             C44248 * C1266 - C44249 * C1259 - C44248 * C1267 + C51162 * C1271 +
             C44250 * C4598 - C44251 * C4591 - C44250 * C4599 +
             C44245 * C4603) *
                C50984 * C51095 +
            (C45238 + C45239 + C45240) * C50984 * C50846) *
               C50966 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C1717) *
              C286 +
          (((C44246 * C308 - C44247 * C294 - C44246 * C309 + C51161 * C324 +
             C44248 * C1613 - C44249 * C1606 - C44248 * C1614 + C51162 * C1618 +
             C44250 * C2699 - C44251 * C2696 - C44250 * C2700 +
             C44245 * C2705) *
                C50984 * C51095 +
            (C44501 + C44502 + C44503) * C50984 * C50846) *
               C1717 -
           ((C44250 * C4592 - C44251 * C4588 - C44250 * C4593 + C44245 * C4600 +
             C44248 * C2701 - C44249 * C2697 - C44248 * C2702 + C51162 * C2706 +
             C44246 * C1611 - C44247 * C1605 - C44246 * C1612 +
             C51161 * C1617) *
                C50984 * C50846 +
            (C44250 * C4596 - C44251 * C4590 - C44250 * C4597 + C44245 * C4602 +
             C44248 * C2699 - C44249 * C2696 - C44248 * C2700 + C51162 * C2705 +
             C44246 * C1613 - C44247 * C1606 - C44246 * C1614 +
             C51161 * C1618) *
                C50984 * C51095) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C1717 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C50966) *
              C50886 * C1068 +
          (((C44688 + C44687 + C44686) * C50984 * C51095 +
            (C45023 + C45024 + C45025) * C50984 * C50846) *
               C50966 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C1717) *
              C50886 * C1069 +
          (((C44312 + C44311 + C44310) * C50984 * C51095 +
            (C44313 + C44314 + C44315) * C50984 * C50846) *
               C1717 -
           ((C44250 * C1891 - C44251 * C1887 - C44250 * C1892 + C44245 * C1899 +
             C44248 * C503 - C44249 * C486 - C44248 * C504 + C51162 * C516 +
             C44246 * C489 - C44247 * C479 - C44246 * C490 + C51161 * C509) *
                C50984 * C50846 +
            (C45025 + C45024 + C45023) * C50984 * C51095) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
            C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
            C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
               C50984 * C51095 +
           (C44307 + C44308 + C44309) * C50984 * C50846) *
              C1883 -
          ((C44686 + C44687 + C44688) * C50984 * C50846 +
           (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
            C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
            C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
               C50984 * C51095) *
              C1884 +
          ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
            C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
            C44250 * C5597 - C44251 * C5594 - C44250 * C5598 + C44245 * C5603) *
               C50984 * C51095 +
           (C44689 + C44690 + C44691) * C50984 * C50846) *
              C1885 -
          ((C44250 * C7477 - C44251 * C7475 - C44250 * C7478 + C44245 * C7481 +
            C44248 * C5599 - C44249 * C5595 - C44248 * C5600 + C51162 * C5604 +
            C44246 * C1895 - C44247 * C1889 - C44246 * C1896 + C51161 * C1901) *
               C50984 * C50846 +
           (C44250 * C7479 - C44251 * C7476 - C44250 * C7480 + C44245 * C7482 +
            C44248 * C5597 - C44249 * C5594 - C44248 * C5598 + C51162 * C5603 +
            C44246 * C1897 - C44247 * C1890 - C44246 * C1898 + C51161 * C1902) *
               C50984 * C51095) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C51157 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C51158 +
           ((C44246 * C497 - C44247 * C483 - C44246 * C498 + C51161 * C513 +
             C44248 * C1897 - C44249 * C1890 - C44248 * C1898 + C51162 * C1902 +
             C44250 * C5597 - C44251 * C5594 - C44250 * C5598 +
             C44245 * C5603) *
                C50984 * C51095 +
            (C44689 + C44690 + C44691) * C50984 * C50846) *
               C2133) *
              C50886 * C51102 +
          (((C44688 + C44687 + C44686) * C50984 * C51095 +
            (C45023 + C45024 + C45025) * C50984 * C50846) *
               C51158 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C51157 -
           ((C44250 * C5601 - C44251 * C5596 - C44250 * C5602 + C44245 * C5605 +
             C44248 * C1893 - C44249 * C1888 - C44248 * C1894 + C51162 * C1900 +
             C44246 * C501 - C44247 * C485 - C44246 * C502 + C51161 * C515) *
                C50984 * C50846 +
            (C44691 + C44690 + C44689) * C50984 * C51095) *
               C2133) *
              C50886 * C50873)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C1717 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C50966) *
              C50886 * C1068 +
          (((C44688 + C44687 + C44686) * C50984 * C51095 +
            (C45023 + C45024 + C45025) * C50984 * C50846) *
               C50966 -
           ((C44310 + C44311 + C44312) * C50984 * C50846 +
            (C44309 + C44308 + C44307) * C50984 * C51095) *
               C1717) *
              C50886 * C1069 +
          (((C44312 + C44311 + C44310) * C50984 * C51095 +
            (C44313 + C44314 + C44315) * C50984 * C50846) *
               C1717 -
           ((C44250 * C1891 - C44251 * C1887 - C44250 * C1892 + C44245 * C1899 +
             C44248 * C503 - C44249 * C486 - C44248 * C504 + C51162 * C516 +
             C44246 * C489 - C44247 * C479 - C44246 * C490 + C51161 * C509) *
                C50984 * C50846 +
            (C45025 + C45024 + C45023) * C50984 * C51095) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C44246 * C126 - C44247 * C119 - C44246 * C127 + C51161 * C140 +
             C44248 * C495 - C44249 * C482 - C44248 * C496 + C51162 * C512 +
             C44250 * C497 - C44251 * C483 - C44250 * C498 + C44245 * C513) *
                C50984 * C51095 +
            (C44307 + C44308 + C44309) * C50984 * C50846) *
               C1717 -
           ((C44686 + C44687 + C44688) * C50984 * C50846 +
            (C44250 * C1897 - C44251 * C1890 - C44250 * C1898 + C44245 * C1902 +
             C44248 * C497 - C44249 * C483 - C44248 * C498 + C51162 * C513 +
             C44246 * C495 - C44247 * C482 - C44246 * C496 + C51161 * C512) *
                C50984 * C51095) *
               C50966) *
              C285 +
          (((C44246 * C929 - C44247 * C924 - C44246 * C930 + C51161 * C939 +
             C44248 * C1266 - C44249 * C1259 - C44248 * C1267 + C51162 * C1271 +
             C44250 * C4598 - C44251 * C4591 - C44250 * C4599 +
             C44245 * C4603) *
                C50984 * C51095 +
            (C45238 + C45239 + C45240) * C50984 * C50846) *
               C50966 -
           ((C44498 + C44499 + C44500) * C50984 * C50846 +
            (C44250 * C1266 - C44251 * C1259 - C44250 * C1267 + C44245 * C1271 +
             C44248 * C929 - C44249 * C924 - C44248 * C930 + C51162 * C939 +
             C44246 * C306 - C44247 * C293 - C44246 * C307 + C51161 * C323) *
                C50984 * C51095) *
               C1717) *
              C286 +
          (((C44246 * C308 - C44247 * C294 - C44246 * C309 + C51161 * C324 +
             C44248 * C1613 - C44249 * C1606 - C44248 * C1614 + C51162 * C1618 +
             C44250 * C2699 - C44251 * C2696 - C44250 * C2700 +
             C44245 * C2705) *
                C50984 * C51095 +
            (C44501 + C44502 + C44503) * C50984 * C50846) *
               C1717 -
           ((C44250 * C4592 - C44251 * C4588 - C44250 * C4593 + C44245 * C4600 +
             C44248 * C2701 - C44249 * C2697 - C44248 * C2702 + C51162 * C2706 +
             C44246 * C1611 - C44247 * C1605 - C44246 * C1612 +
             C51161 * C1617) *
                C50984 * C50846 +
            (C44250 * C4596 - C44251 * C4590 - C44250 * C4597 + C44245 * C4602 +
             C44248 * C2699 - C44249 * C2696 - C44248 * C2700 + C51162 * C2705 +
             C44246 * C1613 - C44247 * C1606 - C44246 * C1614 +
             C51161 * C1618) *
                C50984 * C51095) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C51110 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C50938) *
              C51153 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33930 + C33931) * C50984 * C17238) *
               C50902 * C50938 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C51110) *
              C51154 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C50902 * C51110 -
           ((C33303 * C937 - C33304 * C928 - C33303 * C938 + C51063 * C943 +
             C33301 * C316 - C33302 * C298 - C33301 * C317 + C33299 * C328) *
                C50984 * C17238 +
            (C33931 + C33930) * C50984 * C17237 + C33925 * C17236) *
               C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C51110 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C50938) *
              C51153 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C50938 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C51110) *
              C51154 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C50902 * C51110 -
           ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
             C33301 * C1148 - C33302 * C1143 - C33301 * C1149 +
             C33299 * C1155) *
                C2332 +
            (C33567 + C33566) * C2331 + C33916 * C2330) *
               C50841 * C50902 * C50938) *
              C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C50984 * C17236 +
             (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                C51111 -
            (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C50984 * C17236) *
                C50966) *
               C51110 +
           (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
              C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
              C51063 * C1271) *
                 C50984 * C17236 +
             (C34312 + C34313) * C50984 * C17237 +
             (C34314 + C34315) * C50984 * C17238) *
                C50966 -
            (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
             (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
              C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                 C50984 * C17236) *
                C51111) *
               C50938) *
              C288 +
          ((((C33765 + C33764) * C50984 * C17236 +
             (C33763 + C33762) * C50984 * C17237 +
             (C34092 + C34093) * C50984 * C17238) *
                C50966 -
            (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
             (C33355 + C33354) * C50984 * C17236) *
                C51111) *
               C51110 +
           (((C33563 + C33562) * C50984 * C17236 +
             (C33561 + C33560) * C50984 * C17237 +
             (C33930 + C33931) * C50984 * C17238) *
                C51111 -
            ((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C50984 * C17238 +
             (C34315 + C34314) * C50984 * C17237 +
             (C34313 + C34312) * C50984 * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C2330 +
             (C36361 + C36362) * C2331 + C36369 * C2332) *
                C50841 * C51111 -
            ((C37038 + C37039) * C2332 + (C37040 + C37041) * C2331 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C2330) *
                C50841 * C50966) *
               C51110 +
           (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
             (C33301 * C3237 - C33302 * C3234 - C33301 * C3238 +
              C33299 * C3243 + C33303 * C3679 - C33304 * C3676 -
              C33303 * C3680 + C51063 * C3682) *
                 C2332) *
                C50841 * C50966 -
            ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
             (C36362 + C36361) * C2330) *
                C50841 * C51111) *
               C50938) *
              C288 +
          ((((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
             (C37042 + C37043) * C2332) *
                C50841 * C50966 -
            (C36344 * C2332 + (C33562 + C33563) * C2331 +
             (C33355 + C33354) * C2330) *
                C50841 * C51111) *
               C51110 +
           (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
             (C36367 + C36368) * C2332) *
                C50841 * C51111 -
            ((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C2332 +
             (C37043 + C37042) * C2331 + (C34313 + C34312) * C2330) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C285 -
           ((C33560 + C33561) * C50984 * C17238 +
            (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C286 +
           ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C50902 * C287) *
              C288 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33301 * C300 - C33302 * C290 - C33301 * C301 + C33299 * C320 +
             C33303 * C935 - C33304 * C927 - C33303 * C936 + C51063 * C942) *
                C50984 * C17238) *
               C50902 * C286 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C285 -
           ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
             C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
                C50984 * C17238 +
            (C33567 + C33566) * C50984 * C17237 +
            (C33565 + C33564) * C50984 * C17236) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C50984 * C17236 +
           (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
              C50902 * C50886 * C113 -
          (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
           (C33355 + C33354) * C50984 * C17236) *
              C50902 * C50886 * C114 +
          (C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
           (C33360 + C33361) * C50984 * C17238) *
              C50902 * C50886 * C115 -
          ((C33303 * C783 - C33304 * C782 - C33303 * C784 + C51063 * C785 +
            C33301 * C136 - C33302 * C124 - C33301 * C137 + C33299 * C145) *
               C50984 * C17238 +
           (C33361 + C33360) * C50984 * C17237 + C33365 * C17236) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C476 -
           ((C33762 + C33763) * C50984 * C17238 +
            (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C477 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C50984 * C17236 +
            (C33766 + C33767) * C50984 * C17237 +
            (C33768 + C33769) * C50984 * C17238) *
               C478) *
              C50886 * C288 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C33301 * C489 - C33302 * C479 - C33301 * C490 + C33299 * C509 +
             C33303 * C503 - C33304 * C486 - C33303 * C504 + C51063 * C516) *
                C50984 * C17238) *
               C477 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C476 -
           ((C33303 * C1891 - C33304 * C1887 - C33303 * C1892 + C51063 * C1899 +
             C33301 * C503 - C33302 * C486 - C33301 * C504 + C33299 * C516) *
                C50984 * C17238 +
            (C33769 + C33768) * C50984 * C17237 +
            (C33767 + C33766) * C50984 * C17236) *
               C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323 +
            C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939) *
               C2331 +
           (C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
            C33303 * C1613 - C33304 * C1606 - C33303 * C1614 + C51063 * C1618) *
               C2332) *
              C50841 * C50902 * C50886 * C113 -
          ((C33565 + C33564) * C2332 + (C33562 + C33563) * C2331 +
           (C33355 + C33354) * C2330) *
              C50841 * C50902 * C50886 * C114 +
          (C33362 * C2330 + (C33561 + C33560) * C2331 +
           (C33566 + C33567) * C2332) *
              C50841 * C50902 * C50886 * C115 -
          ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
            C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
               C2332 +
           (C33931 + C33930) * C2331 + C33363 * C2330) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C285 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C286 +
           (C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C33301 * C2493 - C33302 * C2490 - C33301 * C2494 + C33299 * C2499 +
             C33303 * C4187 - C33304 * C4184 - C33303 * C4188 +
             C51063 * C4190) *
                C2332) *
               C50841 * C50902 * C287) *
              C288 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C286 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C285 -
           ((C33303 * C4185 - C33304 * C4183 - C33303 * C4186 + C51063 * C4189 +
             C33301 * C2495 - C33302 * C2491 - C33301 * C2496 +
             C33299 * C2500) *
                C2332 +
            (C36368 + C36367) * C2331 + C36344 * C2330) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C476 -
           ((C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C2332 +
            (C33303 * C1266 - C33304 * C1259 - C33303 * C1267 + C51063 * C1271 +
             C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939) *
                C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C477 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C2330 +
            (C33301 * C1266 - C33302 * C1259 - C33301 * C1267 + C33299 * C1271 +
             C33303 * C4598 - C33304 * C4591 - C33303 * C4599 +
             C51063 * C4603) *
                C2331 +
            (C33301 * C2699 - C33302 * C2696 - C33301 * C2700 + C33299 * C2705 +
             C33303 * C4596 - C33304 * C4590 - C33303 * C4597 +
             C51063 * C4602) *
                C2332) *
               C50841 * C478) *
              C50886 * C288 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C33301 * C1611 - C33302 * C1605 - C33301 * C1612 + C33299 * C1617 +
             C33303 * C2701 - C33304 * C2697 - C33303 * C2702 +
             C51063 * C2706) *
                C2332) *
               C50841 * C477 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C476 -
           ((C33303 * C4592 - C33304 * C4588 - C33303 * C4593 + C51063 * C4600 +
             C33301 * C2701 - C33302 * C2697 - C33301 * C2702 +
             C33299 * C2706) *
                C2332 +
            (C33303 * C4594 - C33304 * C4589 - C33303 * C4595 + C51063 * C4601 +
             C33301 * C1264 - C33302 * C1258 - C33301 * C1265 +
             C33299 * C1270) *
                C2331 +
            (C33767 + C33766) * C2330) *
               C50841 * C478) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C51111 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C50886 * C51153 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C34092 + C34093) * C50984 * C17238) *
               C50966 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C51111) *
              C50886 * C51154 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C51111 -
           ((C33303 * C507 - C33304 * C488 - C33303 * C508 + C51063 * C518 +
             C33301 * C505 - C33302 * C487 - C33301 * C506 + C33299 * C517) *
                C50984 * C17238 +
            (C34093 + C34092) * C50984 * C17237 + C34087 * C17236) *
               C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C51111 -
           ((C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C2332 +
            (C33303 * C1266 - C33304 * C1259 - C33303 * C1267 + C51063 * C1271 +
             C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939) *
                C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C50886 * C51153 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C33301 * C1611 - C33302 * C1605 - C33301 * C1612 + C33299 * C1617 +
             C33303 * C2701 - C33304 * C2697 - C33303 * C2702 +
             C51063 * C2706) *
                C2332) *
               C50841 * C50966 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C51111) *
              C50886 * C51154 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C51111 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C2332 +
            (C34315 + C34314) * C2331 + C34078 * C2330) *
               C50841 * C50966) *
              C50886 * C669)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C50984 * C17236 +
           (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
              C50902 * C50886 * C113 -
          (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
           (C33355 + C33354) * C50984 * C17236) *
              C50902 * C50886 * C114 +
          (C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
           (C33360 + C33361) * C50984 * C17238) *
              C50902 * C50886 * C115 -
          ((C33303 * C783 - C33304 * C782 - C33303 * C784 + C51063 * C785 +
            C33301 * C136 - C33302 * C124 - C33301 * C137 + C33299 * C145) *
               C50984 * C17238 +
           (C33361 + C33360) * C50984 * C17237 + C33365 * C17236) *
              C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C285 -
           ((C33560 + C33561) * C50984 * C17238 +
            (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C286 +
           ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C50902 * C287) *
              C288 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33301 * C300 - C33302 * C290 - C33301 * C301 + C33299 * C320 +
             C33303 * C935 - C33304 * C927 - C33303 * C936 + C51063 * C942) *
                C50984 * C17238) *
               C50902 * C286 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C285 -
           ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
             C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
                C50984 * C17238 +
            (C33567 + C33566) * C50984 * C17237 +
            (C33565 + C33564) * C50984 * C17236) *
               C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323 +
            C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939) *
               C2331 +
           (C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
            C33303 * C1613 - C33304 * C1606 - C33303 * C1614 + C51063 * C1618) *
               C2332) *
              C50841 * C50902 * C50886 * C113 -
          ((C33565 + C33564) * C2332 + (C33562 + C33563) * C2331 +
           (C33355 + C33354) * C2330) *
              C50841 * C50902 * C50886 * C114 +
          (C33362 * C2330 + (C33561 + C33560) * C2331 +
           (C33566 + C33567) * C2332) *
              C50841 * C50902 * C50886 * C115 -
          ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
            C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
               C2332 +
           (C33931 + C33930) * C2331 + C33363 * C2330) *
              C50841 * C50902 * C50886 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C285 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C286 +
           (C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C33301 * C2493 - C33302 * C2490 - C33301 * C2494 + C33299 * C2499 +
             C33303 * C4187 - C33304 * C4184 - C33303 * C4188 +
             C51063 * C4190) *
                C2332) *
               C50841 * C50902 * C287) *
              C288 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C286 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C285 -
           ((C33303 * C4185 - C33304 * C4183 - C33303 * C4186 + C51063 * C4189 +
             C33301 * C2495 - C33302 * C2491 - C33301 * C2496 +
             C33299 * C2500) *
                C2332 +
            (C36368 + C36367) * C2331 + C36344 * C2330) *
               C50841 * C50902 * C287) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C51155 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C51156 +
           ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C50902 * C1372) *
              C51102 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33930 + C33931) * C50984 * C17238) *
               C50902 * C51156 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C51155 -
           ((C33303 * C1607 - C33304 * C1603 - C33303 * C1608 + C51063 * C1615 +
             C33301 * C314 - C33302 * C297 - C33301 * C315 + C33299 * C327) *
                C50984 * C17238 +
            (C33567 + C33566) * C50984 * C17237 +
            (C33565 + C33564) * C50984 * C17236) *
               C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C51155 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C51156 +
           (C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C37301 + C37302) * C2332) *
               C50841 * C50902 * C1372) *
              C51102 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C51156 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C51155 -
           ((C33303 * C4185 - C33304 * C4183 - C33303 * C4186 + C51063 * C4189 +
             C33301 * C2495 - C33302 * C2491 - C33301 * C2496 +
             C33299 * C2500) *
                C2332 +
            (C36368 + C36367) * C2331 + C36344 * C2330) *
               C50841 * C50902 * C1372) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C51111 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C51155 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C50966 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C51111) *
              C51156 +
          (((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C51111 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C50984 * C17238 +
            (C33303 * C2701 - C33304 * C2697 - C33303 * C2702 + C51063 * C2706 +
             C33301 * C1611 - C33302 * C1605 - C33301 * C1612 +
             C33299 * C1617) *
                C50984 * C17237 +
            (C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C50984 * C17236) *
               C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C51111 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C51155 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C37976 + C37977) * C2332) *
               C50841 * C50966 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C51111) *
              C51156 +
          ((C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C37301 + C37302) * C2332) *
               C50841 * C51111 -
           ((C33303 * C20672 - C33304 * C20671 - C33303 * C20673 +
             C51063 * C20674 + C33301 * C4187 - C33302 * C4184 -
             C33301 * C4188 + C33299 * C4190) *
                C2332 +
            (C37977 + C37976) * C2331 + C37963 * C2330) *
               C50841 * C50966) *
              C1372) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C50984 * C17236 +
           (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
              C50902 * C1137 -
          (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
           (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
            C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
               C50984 * C17236) *
              C50902 * C1138 +
          ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
            C33303 * C1613 - C33304 * C1606 - C33303 * C1614 + C51063 * C1618) *
               C50984 * C17236 +
           (C33564 + C33565) * C50984 * C17237 +
           (C33566 + C33567) * C50984 * C17238) *
              C50902 * C1139 -
          ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
            C33301 * C1148 - C33302 * C1143 - C33301 * C1149 + C33299 * C1155) *
               C50984 * C17238 +
           (C33303 * C3239 - C33304 * C3235 - C33303 * C3240 + C51063 * C3244 +
            C33301 * C1150 - C33302 * C1144 - C33301 * C1151 + C33299 * C1156) *
               C50984 * C17237 +
           (C33303 * C3237 - C33304 * C3234 - C33303 * C3238 + C51063 * C3243 +
            C33301 * C1152 - C33302 * C1145 - C33301 * C1153 + C33299 * C1157) *
               C50984 * C17236) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C1066 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C50938) *
              C1068 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33930 + C33931) * C50984 * C17238) *
               C50902 * C50938 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C1066) *
              C1069 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C50902 * C1066 -
           ((C33303 * C937 - C33304 * C928 - C33303 * C938 + C51063 * C943 +
             C33301 * C316 - C33302 * C298 - C33301 * C317 + C33299 * C328) *
                C50984 * C17238 +
            (C33931 + C33930) * C50984 * C17237 + C33925 * C17236) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C476 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C477 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C50984 * C17236 +
            (C33766 + C33767) * C50984 * C17237 +
            (C33768 + C33769) * C50984 * C17238) *
               C478) *
              C1066 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C477 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C476 -
           ((C33303 * C6177 - C33304 * C6176 - C33303 * C6178 + C51063 * C6179 +
             C33301 * C1262 - C33302 * C1257 - C33301 * C1263 +
             C33299 * C1269) *
                C50984 * C17238 +
            (C33303 * C4594 - C33304 * C4589 - C33303 * C4595 + C51063 * C4601 +
             C33301 * C1264 - C33302 * C1258 - C33301 * C1265 +
             C33299 * C1270) *
                C50984 * C17237 +
            (C33303 * C4598 - C33304 * C4591 - C33303 * C4599 + C51063 * C4603 +
             C33301 * C1266 - C33302 * C1259 - C33301 * C1267 +
             C33299 * C1271) *
                C50984 * C17236) *
               C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C1066 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C50938) *
              C1068 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C50938 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C50902 * C1066 -
           ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
             C33301 * C1148 - C33302 * C1143 - C33301 * C1149 +
             C33299 * C1155) *
                C2332 +
            (C33567 + C33566) * C2331 + C33916 * C2330) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C36361 + C36362) * C2331 + C36369 * C2332) *
              C50841 * C50902 * C1137 -
          (C37288 * C2332 + (C36364 + C36363) * C2331 +
           (C36362 + C36361) * C2330) *
              C50841 * C50902 * C1138 +
          (C36369 * C2330 + (C36366 + C36365) * C2331 +
           (C37301 + C37302) * C2332) *
              C50841 * C50902 * C1139 -
          ((C33303 * C21009 - C33304 * C21008 - C33303 * C21010 +
            C51063 * C21011 + C33301 * C3518 - C33302 * C3515 - C33301 * C3519 +
            C33299 * C3521) *
               C2332 +
           (C37302 + C37301) * C2331 + C37288 * C2330) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C476 -
           ((C37038 + C37039) * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C477 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C2330 +
            (C37473 + C37474) * C2331 + (C37475 + C37476) * C2332) *
               C50841 * C478) *
              C1066 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C33301 * C3237 - C33302 * C3234 - C33301 * C3238 + C33299 * C3243 +
             C33303 * C3679 - C33304 * C3676 - C33303 * C3680 +
             C51063 * C3682) *
                C2332) *
               C50841 * C477 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C476 -
           ((C33303 * C21282 - C33304 * C21281 - C33303 * C21283 +
             C51063 * C21284 + C33301 * C3679 - C33302 * C3676 -
             C33301 * C3680 + C33299 * C3682) *
                C2332 +
            (C37476 + C37475) * C2331 + (C37474 + C37473) * C2330) *
               C50841 * C478) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C50984 * C17236 +
             (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                C51111 -
            (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C50984 * C17236) *
                C50966) *
               C1066 +
           (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
              C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
              C51063 * C1271) *
                 C50984 * C17236 +
             (C34312 + C34313) * C50984 * C17237 +
             (C34314 + C34315) * C50984 * C17238) *
                C50966 -
            (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
             (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
              C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                 C50984 * C17236) *
                C51111) *
               C50938) *
              C51102 +
          ((((C33765 + C33764) * C50984 * C17236 +
             (C33763 + C33762) * C50984 * C17237 +
             (C34092 + C34093) * C50984 * C17238) *
                C50966 -
            (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
             (C33355 + C33354) * C50984 * C17236) *
                C51111) *
               C1066 +
           (((C33563 + C33562) * C50984 * C17236 +
             (C33561 + C33560) * C50984 * C17237 +
             (C33930 + C33931) * C50984 * C17238) *
                C51111 -
            ((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C50984 * C17238 +
             (C34315 + C34314) * C50984 * C17237 +
             (C34313 + C34312) * C50984 * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C2330 +
             (C36361 + C36362) * C2331 + C36369 * C2332) *
                C50841 * C51111 -
            ((C37038 + C37039) * C2332 + (C37040 + C37041) * C2331 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C2330) *
                C50841 * C50966) *
               C1066 +
           (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
             (C33301 * C3237 - C33302 * C3234 - C33301 * C3238 +
              C33299 * C3243 + C33303 * C3679 - C33304 * C3676 -
              C33303 * C3680 + C51063 * C3682) *
                 C2332) *
                C50841 * C50966 -
            (C37288 * C2332 + (C36364 + C36363) * C2331 +
             (C36362 + C36361) * C2330) *
                C50841 * C51111) *
               C50938) *
              C51102 +
          ((((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
             (C37042 + C37043) * C2332) *
                C50841 * C50966 -
            (C36344 * C2332 + (C33562 + C33563) * C2331 +
             (C33355 + C33354) * C2330) *
                C50841 * C51111) *
               C1066 +
           (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
             (C36367 + C36368) * C2332) *
                C50841 * C51111 -
            ((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C2332 +
             (C37043 + C37042) * C2331 + (C34313 + C34312) * C2330) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C50902 * C1066 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C50902 * C50938) *
              C1068 +
          (((C33563 + C33562) * C50984 * C17236 +
            (C33561 + C33560) * C50984 * C17237 +
            (C33930 + C33931) * C50984 * C17238) *
               C50902 * C50938 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C50902 * C1066) *
              C1069 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C50902 * C1066 -
           ((C33303 * C937 - C33304 * C928 - C33303 * C938 + C51063 * C943 +
             C33301 * C316 - C33302 * C298 - C33301 * C317 + C33299 * C328) *
                C50984 * C17238 +
            (C33931 + C33930) * C50984 * C17237 + C33925 * C17236) *
               C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C50984 * C17236 +
           (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
              C50902 * C1137 -
          (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
           (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
            C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
               C50984 * C17236) *
              C50902 * C1138 +
          ((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
            C33303 * C1613 - C33304 * C1606 - C33303 * C1614 + C51063 * C1618) *
               C50984 * C17236 +
           (C33564 + C33565) * C50984 * C17237 +
           (C33566 + C33567) * C50984 * C17238) *
              C50902 * C1139 -
          ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
            C33301 * C1148 - C33302 * C1143 - C33301 * C1149 + C33299 * C1155) *
               C50984 * C17238 +
           (C33303 * C3239 - C33304 * C3235 - C33303 * C3240 + C51063 * C3244 +
            C33301 * C1150 - C33302 * C1144 - C33301 * C1151 + C33299 * C1156) *
               C50984 * C17237 +
           (C33303 * C3237 - C33304 * C3234 - C33303 * C3238 + C51063 * C3243 +
            C33301 * C1152 - C33302 * C1145 - C33301 * C1153 + C33299 * C1157) *
               C50984 * C17236) *
              C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C50902 * C1066 -
           ((C36365 + C36366) * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C50902 * C50938) *
              C1068 +
          (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
            (C36367 + C36368) * C2332) *
               C50841 * C50902 * C50938 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C50902 * C1066) *
              C1069 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C50902 * C1066 -
           ((C33303 * C3241 - C33304 * C3236 - C33303 * C3242 + C51063 * C3245 +
             C33301 * C1148 - C33302 * C1143 - C33301 * C1149 +
             C33299 * C1155) *
                C2332 +
            (C33567 + C33566) * C2331 + C33916 * C2330) *
               C50841 * C50902 * C50938) *
              C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C36361 + C36362) * C2331 + C36369 * C2332) *
              C50841 * C50902 * C1137 -
          (C37288 * C2332 + (C36364 + C36363) * C2331 +
           (C36362 + C36361) * C2330) *
              C50841 * C50902 * C1138 +
          (C36369 * C2330 + (C36366 + C36365) * C2331 +
           (C37301 + C37302) * C2332) *
              C50841 * C50902 * C1139 -
          ((C33303 * C21009 - C33304 * C21008 - C33303 * C21010 +
            C51063 * C21011 + C33301 * C3518 - C33302 * C3515 - C33301 * C3519 +
            C33299 * C3521) *
               C2332 +
           (C37302 + C37301) * C2331 + C37288 * C2330) *
              C50841 * C50902 * C1140) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C50984 * C17236 +
             (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
                C1717 -
            (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C50984 * C17236) *
                C50966) *
               C51110 +
           (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
              C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
              C51063 * C1271) *
                 C50984 * C17236 +
             (C34312 + C34313) * C50984 * C17237 +
             (C34314 + C34315) * C50984 * C17238) *
                C50966 -
            (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
             (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
              C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                 C50984 * C17236) *
                C1717) *
               C50938) *
              C51102 +
          ((((C33765 + C33764) * C50984 * C17236 +
             (C33763 + C33762) * C50984 * C17237 +
             (C34092 + C34093) * C50984 * C17238) *
                C50966 -
            (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
             (C33355 + C33354) * C50984 * C17236) *
                C1717) *
               C51110 +
           (((C33563 + C33562) * C50984 * C17236 +
             (C33561 + C33560) * C50984 * C17237 +
             (C33930 + C33931) * C50984 * C17238) *
                C1717 -
            ((C33303 * C1260 - C33304 * C1256 - C33303 * C1261 +
              C51063 * C1268 + C33301 * C935 - C33302 * C927 - C33301 * C936 +
              C33299 * C942) *
                 C50984 * C17238 +
             (C34315 + C34314) * C50984 * C17237 +
             (C34313 + C34312) * C50984 * C17236) *
                C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
              C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                 C2330 +
             (C36361 + C36362) * C2331 + C36369 * C2332) *
                C50841 * C1717 -
            (C37963 * C2332 + (C37040 + C37041) * C2331 +
             (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
              C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                 C2330) *
                C50841 * C50966) *
               C51110 +
           (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
             (C37976 + C37977) * C2332) *
                C50841 * C50966 -
            (C37288 * C2332 + (C36364 + C36363) * C2331 +
             (C36362 + C36361) * C2330) *
                C50841 * C1717) *
               C50938) *
              C51102 +
          ((((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
             (C37042 + C37043) * C2332) *
                C50841 * C50966 -
            (C36344 * C2332 + (C33562 + C33563) * C2331 +
             (C33355 + C33354) * C2330) *
                C50841 * C1717) *
               C51110 +
           (((C33563 + C33562) * C2330 + (C33564 + C33565) * C2331 +
             (C36367 + C36368) * C2332) *
                C50841 * C1717 -
            ((C33303 * C3677 - C33304 * C3675 - C33303 * C3678 +
              C51063 * C3681 + C33301 * C3239 - C33302 * C3235 -
              C33301 * C3240 + C33299 * C3244) *
                 C2332 +
             (C37043 + C37042) * C2331 + (C34313 + C34312) * C2330) *
                C50841 * C50966) *
               C50938) *
              C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C51157 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C51158 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C50984 * C17236 +
            (C33766 + C33767) * C50984 * C17237 +
            (C33768 + C33769) * C50984 * C17238) *
               C2133) *
              C51110 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C51158 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C51157 -
           ((C33303 * C6177 - C33304 * C6176 - C33303 * C6178 + C51063 * C6179 +
             C33301 * C1262 - C33302 * C1257 - C33301 * C1263 +
             C33299 * C1269) *
                C50984 * C17238 +
            (C33303 * C4594 - C33304 * C4589 - C33303 * C4595 + C51063 * C4601 +
             C33301 * C1264 - C33302 * C1258 - C33301 * C1265 +
             C33299 * C1270) *
                C50984 * C17237 +
            (C33303 * C4598 - C33304 * C4591 - C33303 * C4599 + C51063 * C4603 +
             C33301 * C1266 - C33302 * C1259 - C33301 * C1267 +
             C33299 * C1271) *
                C50984 * C17236) *
               C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C51157 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C51158 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C2330 +
            (C37473 + C37474) * C2331 + (C37475 + C37476) * C2332) *
               C50841 * C2133) *
              C51110 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C37976 + C37977) * C2332) *
               C50841 * C51158 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C51157 -
           ((C33303 * C21282 - C33304 * C21281 - C33303 * C21283 +
             C51063 * C21284 + C33301 * C3679 - C33302 * C3676 -
             C33301 * C3680 + C33299 * C3682) *
                C2332 +
            (C37476 + C37475) * C2331 + (C37474 + C37473) * C2330) *
               C50841 * C2133) *
              C50938) *
         C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C1717 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C285 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C50966 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C1717) *
              C286 +
          (((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C1717 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C50984 * C17238 +
            (C33303 * C2701 - C33304 * C2697 - C33303 * C2702 + C51063 * C2706 +
             C33301 * C1611 - C33302 * C1605 - C33301 * C1612 +
             C33299 * C1617) *
                C50984 * C17237 +
            (C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C50984 * C17236) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C1717 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C50886 * C1068 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C34092 + C34093) * C50984 * C17238) *
               C50966 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C1717) *
              C50886 * C1069 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C1717 -
           ((C33303 * C507 - C33304 * C488 - C33303 * C508 + C51063 * C518 +
             C33301 * C505 - C33302 * C487 - C33301 * C506 + C33299 * C517) *
                C50984 * C17238 +
            (C34093 + C34092) * C50984 * C17237 + C34087 * C17236) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C50984 * C17236 +
           (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
              C1883 -
          (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
           (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
            C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
               C50984 * C17236) *
              C1884 +
          ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
            C33303 * C1897 - C33304 * C1890 - C33303 * C1898 + C51063 * C1902) *
               C50984 * C17236 +
           (C33766 + C33767) * C50984 * C17237 +
           (C33768 + C33769) * C50984 * C17238) *
              C1885 -
          ((C33303 * C5601 - C33304 * C5596 - C33303 * C5602 + C51063 * C5605 +
            C33301 * C1893 - C33302 * C1888 - C33301 * C1894 + C33299 * C1900) *
               C50984 * C17238 +
           (C33303 * C5599 - C33304 * C5595 - C33303 * C5600 + C51063 * C5604 +
            C33301 * C1895 - C33302 * C1889 - C33301 * C1896 + C33299 * C1901) *
               C50984 * C17237 +
           (C33303 * C5597 - C33304 * C5594 - C33303 * C5598 + C51063 * C5603 +
            C33301 * C1897 - C33302 * C1890 - C33301 * C1898 + C33299 * C1902) *
               C50984 * C17236) *
              C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C1717 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C37042 + C37043) * C2332) *
               C50841 * C50966 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C1717 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C2332 +
            (C34315 + C34314) * C2331 + C34078 * C2330) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C1717 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C285 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C37976 + C37977) * C2332) *
               C50841 * C50966 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C1717) *
              C286 +
          ((C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C37301 + C37302) * C2332) *
               C50841 * C1717 -
           ((C33303 * C20672 - C33304 * C20671 - C33303 * C20673 +
             C51063 * C20674 + C33301 * C4187 - C33302 * C4184 -
             C33301 * C4188 + C33299 * C4190) *
                C2332 +
            (C37977 + C37976) * C2331 + C37963 * C2330) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
            C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
               C2330 +
           (C36361 + C36362) * C2331 + C36369 * C2332) *
              C50841 * C1883 -
          (C37963 * C2332 + (C37040 + C37041) * C2331 +
           (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
            C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
               C2330) *
              C50841 * C1884 +
          ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
            C33303 * C1897 - C33304 * C1890 - C33303 * C1898 + C51063 * C1902) *
               C2330 +
           (C37473 + C37474) * C2331 + (C37475 + C37476) * C2332) *
              C50841 * C1885 -
          ((C33303 * C22962 - C33304 * C22961 - C33303 * C22963 +
            C51063 * C22964 + C33301 * C4596 - C33302 * C4590 - C33301 * C4597 +
            C33299 * C4602) *
               C2332 +
           (C33303 * C6595 - C33304 * C6592 - C33303 * C6596 + C51063 * C6598 +
            C33301 * C4598 - C33302 * C4591 - C33301 * C4599 + C33299 * C4603) *
               C2331 +
           (C33303 * C5597 - C33304 * C5594 - C33303 * C5598 + C51063 * C5603 +
            C33301 * C1897 - C33302 * C1890 - C33301 * C1898 + C33299 * C1902) *
               C2330) *
              C50841 * C1886) *
         C50886 * C50867) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C51157 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C51158 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C50984 * C17236 +
            (C33766 + C33767) * C50984 * C17237 +
            (C33768 + C33769) * C50984 * C17238) *
               C2133) *
              C50886 * C51102 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C34092 + C34093) * C50984 * C17238) *
               C51158 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C51157 -
           ((C33303 * C1891 - C33304 * C1887 - C33303 * C1892 + C51063 * C1899 +
             C33301 * C503 - C33302 * C486 - C33301 * C504 + C33299 * C516) *
                C50984 * C17238 +
            (C33769 + C33768) * C50984 * C17237 +
            (C33767 + C33766) * C50984 * C17236) *
               C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C51157 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C51158 +
           ((C33301 * C497 - C33302 * C483 - C33301 * C498 + C33299 * C513 +
             C33303 * C1897 - C33304 * C1890 - C33303 * C1898 +
             C51063 * C1902) *
                C2330 +
            (C37473 + C37474) * C2331 + (C37475 + C37476) * C2332) *
               C50841 * C2133) *
              C50886 * C51102 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C37042 + C37043) * C2332) *
               C50841 * C51158 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C51157 -
           ((C33303 * C4592 - C33304 * C4588 - C33303 * C4593 + C51063 * C4600 +
             C33301 * C2701 - C33302 * C2697 - C33301 * C2702 +
             C33299 * C2706) *
                C2332 +
            (C33303 * C4594 - C33304 * C4589 - C33303 * C4595 + C51063 * C4601 +
             C33301 * C1264 - C33302 * C1258 - C33301 * C1265 +
             C33299 * C1270) *
                C2331 +
            (C33767 + C33766) * C2330) *
               C50841 * C2133) *
              C50886 * C50873)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C1717 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C50886 * C1068 +
          (((C33765 + C33764) * C50984 * C17236 +
            (C33763 + C33762) * C50984 * C17237 +
            (C34092 + C34093) * C50984 * C17238) *
               C50966 -
           (C33365 * C17238 + (C33357 + C33356) * C50984 * C17237 +
            (C33355 + C33354) * C50984 * C17236) *
               C1717) *
              C50886 * C1069 +
          ((C33364 * C17236 + (C33359 + C33358) * C50984 * C17237 +
            (C33360 + C33361) * C50984 * C17238) *
               C1717 -
           ((C33303 * C507 - C33304 * C488 - C33303 * C508 + C51063 * C518 +
             C33301 * C505 - C33302 * C487 - C33301 * C506 + C33299 * C517) *
                C50984 * C17238 +
            (C34093 + C34092) * C50984 * C17237 + C34087 * C17236) *
               C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C50984 * C17236 +
            (C33354 + C33355) * C50984 * C17237 + C33364 * C17238) *
               C1717 -
           (C34087 * C17238 + (C33764 + C33765) * C50984 * C17237 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C50984 * C17236) *
               C50966) *
              C285 +
          (((C33301 * C929 - C33302 * C924 - C33301 * C930 + C33299 * C939 +
             C33303 * C1266 - C33304 * C1259 - C33303 * C1267 +
             C51063 * C1271) *
                C50984 * C17236 +
            (C34312 + C34313) * C50984 * C17237 +
            (C34314 + C34315) * C50984 * C17238) *
               C50966 -
           (C33925 * C17238 + (C33562 + C33563) * C50984 * C17237 +
            (C33303 * C929 - C33304 * C924 - C33303 * C930 + C51063 * C939 +
             C33301 * C306 - C33302 * C293 - C33301 * C307 + C33299 * C323) *
                C50984 * C17236) *
               C1717) *
              C286 +
          (((C33301 * C308 - C33302 * C294 - C33301 * C309 + C33299 * C324 +
             C33303 * C1613 - C33304 * C1606 - C33303 * C1614 +
             C51063 * C1618) *
                C50984 * C17236 +
            (C33564 + C33565) * C50984 * C17237 +
            (C33566 + C33567) * C50984 * C17238) *
               C1717 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C50984 * C17238 +
            (C33303 * C2701 - C33304 * C2697 - C33303 * C2702 + C51063 * C2706 +
             C33301 * C1611 - C33302 * C1605 - C33301 * C1612 +
             C33299 * C1617) *
                C50984 * C17237 +
            (C33303 * C2699 - C33304 * C2696 - C33303 * C2700 + C51063 * C2705 +
             C33301 * C1613 - C33302 * C1606 - C33301 * C1614 +
             C33299 * C1618) *
                C50984 * C17236) *
               C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C1717 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C50886 * C1068 +
          (((C33765 + C33764) * C2330 + (C34312 + C34313) * C2331 +
            (C37042 + C37043) * C2332) *
               C50841 * C50966 -
           (C36344 * C2332 + (C33562 + C33563) * C2331 +
            (C33355 + C33354) * C2330) *
               C50841 * C1717) *
              C50886 * C1069 +
          ((C33362 * C2330 + (C33561 + C33560) * C2331 +
            (C33566 + C33567) * C2332) *
               C50841 * C1717 -
           ((C33303 * C2703 - C33304 * C2698 - C33303 * C2704 + C51063 * C2707 +
             C33301 * C1609 - C33302 * C1604 - C33301 * C1610 +
             C33299 * C1616) *
                C2332 +
            (C34315 + C34314) * C2331 + C34078 * C2330) *
               C50841 * C50966) *
              C50886 * C1070)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33301 * C126 - C33302 * C119 - C33301 * C127 + C33299 * C140 +
             C33303 * C495 - C33304 * C482 - C33303 * C496 + C51063 * C512) *
                C2330 +
            (C36361 + C36362) * C2331 + C36369 * C2332) *
               C50841 * C1717 -
           (C37963 * C2332 + (C37040 + C37041) * C2331 +
            (C33303 * C497 - C33304 * C483 - C33303 * C498 + C51063 * C513 +
             C33301 * C495 - C33302 * C482 - C33301 * C496 + C33299 * C512) *
                C2330) *
               C50841 * C50966) *
              C285 +
          (((C37041 + C37040) * C2330 + (C37039 + C37038) * C2331 +
            (C37976 + C37977) * C2332) *
               C50841 * C50966 -
           (C37288 * C2332 + (C36364 + C36363) * C2331 +
            (C36362 + C36361) * C2330) *
               C50841 * C1717) *
              C286 +
          ((C36369 * C2330 + (C36366 + C36365) * C2331 +
            (C37301 + C37302) * C2332) *
               C50841 * C1717 -
           ((C33303 * C20672 - C33304 * C20671 - C33303 * C20673 +
             C51063 * C20674 + C33301 * C4187 - C33302 * C4184 -
             C33301 * C4188 + C33299 * C4190) *
                C2332 +
            (C37977 + C37976) * C2331 + C37963 * C2330) *
               C50841 * C50966) *
              C287) *
         C50867) /
            (p * q * std::sqrt(p + q));
}
