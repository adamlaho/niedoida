/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AC_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_13_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49745 = 0 * ae;
    const double C49744 = ae * be;
    const double C49743 = 0 * be;
    const double C49742 = ae + be;
    const double C49741 = 0 * be;
    const double C49740 = xA - xB;
    const double C49788 = ce * de;
    const double C49787 = ce + de;
    const double C49786 = 0 * de;
    const double C49785 = yC - yD;
    const double C49816 = 0 * ce;
    const double C49811 = 0 * de;
    const double C49872 = yP - yQ;
    const double C49871 = p + q;
    const double C49870 = p * q;
    const double C49869 = xP - xQ;
    const double C49877 = bs[3];
    const double C49888 = bs[4];
    const double C49896 = bs[5];
    const double C49915 = bs[6];
    const double C49947 = bs[7];
    const double C50085 = zP - zQ;
    const double C50236 = bs[2];
    const double C122 = bs[0];
    const double C50628 = xC - xD;
    const double C50664 = zC - zD;
    const double C50750 = yA - yB;
    const double C50762 = zA - zB;
    const double C49750 = C49745 / C49742;
    const double C49747 = 2 * C49742;
    const double C49746 = std::pow(C49742, 2);
    const double C49749 = C49744 * C49740;
    const double C49748 = C49740 * C49743;
    const double C50606 = C49740 * be;
    const double C50605 = C49740 * ae;
    const double C50604 = std::pow(C49740, 2);
    const double C49789 = std::pow(C49787, 2);
    const double C49812 = 2 * C49787;
    const double C49880 = C49787 * C49742;
    const double C143 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (xP - xQ) * (yP - yQ) * ae * ce) /
                         C49787) /
                        C49742;
    const double C49790 = C49788 * C49785;
    const double C49813 = C49785 * C49786;
    const double C50649 = std::pow(C49785, 2);
    const double C50701 = C49785 * de;
    const double C50700 = C49785 * ce;
    const double C49821 = C49816 / C49787;
    const double C49878 = C49872 * ce;
    const double C50093 = std::pow(C49872, 2);
    const double C49873 = 2 * C49870;
    const double C49879 = C49869 * C49872;
    const double C49898 = std::pow(C49869, 2);
    const double C49982 = C49869 * ae;
    const double C50169 = std::pow(C50085, 2);
    const double C50631 = C50628 * de;
    const double C50630 = C50628 * ce;
    const double C50629 = std::pow(C50628, 2);
    const double C50665 = std::pow(C50664, 2);
    const double C50729 = C50664 * de;
    const double C50728 = C50664 * ce;
    const double C50751 = std::pow(C50750, 2);
    const double C50801 = C50750 * be;
    const double C50800 = C50750 * ae;
    const double C50763 = std::pow(C50762, 2);
    const double C50827 = C50762 * be;
    const double C50826 = C50762 * ae;
    const double C50614 = std::pow(C49747, -1);
    const double C50907 = std::pow(C49747, -2);
    const double C49751 = 2 * C49746;
    const double C50885 = 4 * C49746;
    const double C49752 = C49748 / C49742;
    const double C50607 = C50604 * C49744;
    const double C49791 = 2 * C49789;
    const double C50892 = 4 * C49789;
    const double C50639 = std::pow(C49812, -1);
    const double C50894 = std::pow(C49812, -2);
    const double C49818 = C49813 / C49787;
    const double C50650 = C50649 * C49788;
    const double C49882 = C49877 * C49878;
    const double C49890 = C49888 * C49878;
    const double C49901 = C49896 * C49878;
    const double C49921 = C49915 * C49878;
    const double C49956 = C49947 * C49878;
    const double C49874 = C49873 / C49871;
    const double C133 = (bs[1] * C49878 * C49873) / (C49871 * C49787);
    const double C123 = -(C49869 * bs[1] * C49873) / C49871;
    const double C259 = -(C49872 * bs[1] * C49873) / C49871;
    const double C401 = -(C50085 * bs[1] * C49873) / C49871;
    const double C49883 = C49879 * ae;
    const double C49985 = C49888 * C49982;
    const double C49991 = C49877 * C49982;
    const double C49998 = C49896 * C49982;
    const double C50010 = C49915 * C49982;
    const double C50031 = C49947 * C49982;
    const double C129 = (-(bs[1] * C49982 * C49873) / C49871) / C49742;
    const double C50632 = C50629 * C49788;
    const double C50666 = C50665 * C49788;
    const double C50752 = C50751 * C49744;
    const double C50764 = C50763 * C49744;
    const double C49757 = C49743 / C49751;
    const double C49755 = C49741 / C49751;
    const double C49754 = 0 - C49752;
    const double C50608 = C50607 / C49742;
    const double C49815 = C49786 / C49791;
    const double C49819 = C49811 / C49791;
    const double C49822 = 0 - C49818;
    const double C50651 = C50650 / C49787;
    const double C49876 = -C49874;
    const double C49887 = std::pow(C49874, 4);
    const double C49914 = std::pow(C49874, 6);
    const double C144 =
        (-(C49869 * std::pow(-C49874, 3) * bs[3] * C49869 * C49872 * ae * ce) /
         C49787) /
            C49742 -
        (ae * std::pow(C49874, 2) * bs[2] * C49872 * ce) / (C49787 * C49742);
    const double C50235 = std::pow(C49874, 2);
    const double C130 =
        (C49869 * std::pow(C49874, 2) * bs[2] * C49982) / C49742 -
        (ae * bs[1] * C49873) / (C49871 * C49742);
    const double C49885 = C49883 * ce;
    const double C50633 = C50632 / C49787;
    const double C50667 = C50666 / C49787;
    const double C50753 = C50752 / C49742;
    const double C50765 = C50764 / C49742;
    const double C49759 = C49754 * ae;
    const double C50609 = -C50608;
    const double C49825 = C49822 * ce;
    const double C50652 = -C50651;
    const double C49881 = std::pow(C49876, 3);
    const double C49895 = std::pow(C49876, 5);
    const double C49946 = std::pow(C49876, 7);
    const double C49892 = C49887 * C49890;
    const double C49984 = C49888 * C49887;
    const double C49986 = C49887 * C49985;
    const double C49925 = C49914 * C49921;
    const double C50012 = C49914 * C50010;
    const double C50032 = C49915 * C49914;
    const double C50237 = C50236 * C50235;
    const double C134 = -(C49869 * C50235 * C50236 * C49878) / C49787;
    const double C269 = (C49872 * C50235 * C50236 * C49982) / C49742;
    const double C273 = (ce * bs[1] * C49873) / (C49871 * C49787) -
                        (C49872 * C50235 * C50236 * C49878) / C49787;
    const double C415 = -(C50085 * C50235 * C50236 * C49878) / C49787;
    const double C416 = (C50085 * C50235 * C50236 * C49982) / C49742;
    const double C49889 = C49888 * C49885;
    const double C49899 = C49896 * C49885;
    const double C49918 = C49915 * C49885;
    const double C49952 = C49947 * C49885;
    const double C50634 = -C50633;
    const double C50668 = -C50667;
    const double C50754 = -C50753;
    const double C50766 = -C50765;
    const double C49762 = C49759 / C49742;
    const double C50610 = std::exp(C50609);
    const double C49827 = C49825 / C49787;
    const double C50653 = std::exp(C50652);
    const double C49884 = C49881 * C49882;
    const double C49983 = C49877 * C49881;
    const double C49992 = C49881 * C49991;
    const double C289 =
        (-(C49872 * C49881 * C49877 * C49885) / C49787) / C49742 -
        (std::pow(C49874, 2) * bs[2] * C49982 * ce) / C49880;
    const double C431 =
        (-((zP - zQ) * C49881 * C49877 * C49885) / C49787) / C49742;
    const double C49903 = C49895 * C49901;
    const double C50001 = C49895 * C49998;
    const double C50011 = C49896 * C49895;
    const double C49961 = C49946 * C49956;
    const double C50034 = C49946 * C50031;
    const double C49897 = ae * C49892;
    const double C49894 = C49869 * C49892;
    const double C50347 = C49872 * C49892;
    const double C50000 = C49869 * C49984;
    const double C49999 = C49984 * ae;
    const double C50246 = C49984 * C49898;
    const double C50350 = C49984 * C50093;
    const double C50399 = C49872 * C49984;
    const double C50398 = C49984 * ce;
    const double C50585 = C49984 * C50169;
    const double C50596 = C50085 * C49984;
    const double C49994 = C49869 * C49986;
    const double C50092 = C49986 * ce;
    const double C50090 = C49872 * C49986;
    const double C49928 = C49925 * C49898;
    const double C49948 = ae * C49925;
    const double C49944 = C49869 * C49925;
    const double C50453 = C49872 * C49925;
    const double C50492 = C49925 * C50169;
    const double C50016 = C49869 * C50012;
    const double C50143 = C50012 * C50093;
    const double C50189 = C50012 * ce;
    const double C50187 = C49872 * C50012;
    const double C50501 = C50012 * C50169;
    const double C50037 = C50032 * C49898;
    const double C50036 = C49869 * C50032;
    const double C50035 = C50032 * ae;
    const double C50457 = C50032 * C50093;
    const double C124 = C50237 * C49898 - (bs[1] * C49873) / C49871;
    const double C258 = C49872 * C49869 * C50237;
    const double C260 = C50237 * C50093 - (bs[1] * C49873) / C49871;
    const double C397 = C50085 * C49869 * C50237;
    const double C402 = C50237 * C50169 - (bs[1] * C49873) / C49871;
    const double C780 = C50085 * C49872 * C50237;
    const double C49891 = C49887 * C49889;
    const double C49902 = C49895 * C49899;
    const double C49923 = C49914 * C49918;
    const double C49959 = C49946 * C49952;
    const double C50635 = std::exp(C50634);
    const double C50669 = std::exp(C50668);
    const double C50755 = std::exp(C50754);
    const double C50767 = std::exp(C50766);
    const double C49764 = C49762 - C49755;
    const double C19873 = C50610 * C269;
    const double C22023 = C50610 * C416;
    const double C49753 = C49749 * C50610;
    const double C50611 = C50610 * C50605;
    const double C50615 = C50614 * C50610;
    const double C50882 = C50610 * C50606;
    const double C50879 = C50610 / C49747;
    const double C16985 = C50907 * C50610;
    const double C49829 = C49827 - C49819;
    const double C49792 = C49790 * C50653;
    const double C121 = -(2 * ce * de * (yC - yD) * C50653) / (ce + de);
    const double C50702 = C50653 * C50700;
    const double C50705 = C50639 * C50653;
    const double C50898 = C50653 * C50701;
    const double C50893 = C50653 / C49812;
    const double C250 = C50894 * C50653;
    const double C145 =
        (-(ae * C49869 * C49884) / C49787) / C49742 -
        (C49881 * C49877 * C49885) / C49880 +
        C49869 * ((-(C49869 * std::pow(C49874, 4) * bs[4] * C49885) / C49787) /
                      C49742 -
                  (ae * C49884) / C49880);
    const double C135 = -(C49884 * C49898 + C50235 * C50236 * C49878) / C49787;
    const double C136 = (-2 * C49869 * C49884) / C49787 -
                        (C49869 * (C49892 * C49898 + C49884)) / C49787;
    const double C272 =
        -(C49872 * C49869 * C49884 + C49869 * C50237 * ce) / C49787;
    const double C278 = -(C49872 * (C49872 * C49884 + C50237 * ce) +
                          C50235 * C50236 * C49878 + C49872 * C50237 * ce) /
                        C49787;
    const double C411 = -(C50085 * C49869 * C49884) / C49787;
    const double C412 = -(C50085 * (C49892 * C49898 + C49884)) / C49787;
    const double C421 = -(C49884 * C50169 + C50235 * C50236 * C49878) / C49787;
    const double C789 = -(C50085 * (C49872 * C49884 + C50237 * ce)) / C49787;
    const double C1735 = (-2 * C50085 * C49884) / C49787 -
                         (C50085 * (C49892 * C50169 + C49884)) / C49787;
    const double C49995 = C49983 * ae;
    const double C50245 = C49869 * C49983;
    const double C50349 = C49872 * C49983;
    const double C50348 = C49983 * ce;
    const double C271 = -(C49872 * (C49892 * C49898 + C49884) +
                          (C50237 + C49983 * C49898) * ce) /
                        C49787;
    const double C991 = (-2 * (C49872 * C49884 + C50237 * ce)) / C49787 -
                        (C49872 * (C49872 * (C49872 * C49892 + C49983 * ce) +
                                   C49884 + C49872 * C49983 * ce)) /
                            C49787 -
                        ((C50237 + C49983 * C50093) * ce) / C49787;
    const double C1105 = -((C49872 * C49892 + C49983 * ce) * C50169 +
                           C49872 * C49884 + C50237 * ce) /
                         C49787;
    const double C1455 = -(C50085 * (C49872 * (C49872 * C49892 + C49983 * ce) +
                                     C49884 + C49872 * C49983 * ce)) /
                         C49787;
    const double C125 =
        2 * C49869 * C50237 + C49869 * (C50237 + C49983 * C49898);
    const double C257 = C49872 * (C50237 + C49983 * C49898);
    const double C398 = C50085 * (C50237 + C49983 * C49898);
    const double C983 =
        2 * C49872 * C50237 + C49872 * (C50237 + C49983 * C50093);
    const double C1447 = C50085 * (C50237 + C49983 * C50093);
    const double C1731 =
        2 * C50085 * C50237 + C50085 * (C50237 + C49983 * C50169);
    const double C5377 =
        3 * (C50237 + C49983 * C50169) +
        C50085 * (2 * C50085 * C49983 + C50085 * (C49983 + C49984 * C50169));
    const double C131 =
        (C50235 * C50236 * C49982 + C49869 * (C49869 * C49992 + C50237 * ae) +
         C49869 * C50237 * ae) /
        C49742;
    const double C268 = (C49872 * (C49869 * C49992 + C50237 * ae)) / C49742;
    const double C274 = (C50235 * C50236 * C49982 + C49992 * C50093) / C49742;
    const double C407 = (C50085 * (C49869 * C49992 + C50237 * ae)) / C49742;
    const double C417 = (C50235 * C50236 * C49982 + C49992 * C50169) / C49742;
    const double C785 = (C50085 * C49872 * C49992) / C49742;
    const double C987 =
        (2 * C49872 * C49992 + C49872 * (C49992 + C49986 * C50093)) / C49742;
    const double C1451 = (C50085 * (C49992 + C49986 * C50093)) / C49742;
    const double C1739 =
        (2 * C50085 * C49992 + C50085 * (C49992 + C49986 * C50169)) / C49742;
    const double C19875 = C50610 * C289;
    const double C22025 = C50610 * C431;
    const double C49905 = C49903 * C49898;
    const double C49916 = ae * C49903;
    const double C49912 = C49869 * C49903;
    const double C50397 = C49872 * C49903;
    const double C50442 = C49903 * C50169;
    const double C50491 = C50085 * C49903;
    const double C5382 =
        (-3 * (C49892 * C50169 + C49884)) / C49787 +
        C50085 * ((-2 * C50085 * C49892) / C49787 -
                  (C50085 * (C49903 * C50169 + C49892)) / C49787);
    const double C50003 = C49869 * C50001;
    const double C50096 = C50001 * C50093;
    const double C50142 = C50001 * ce;
    const double C50140 = C49872 * C50001;
    const double C50448 = C50001 * C50169;
    const double C50500 = C50085 * C50001;
    const double C5380 =
        (3 * (C49992 + C49986 * C50169) +
         C50085 * (2 * C50085 * C49986 + C50085 * (C49986 + C50001 * C50169))) /
        C49742;
    const double C50015 = C50011 * C49898;
    const double C50014 = C49869 * C50011;
    const double C50013 = C50011 * ae;
    const double C50400 = C50011 * C50093;
    const double C50455 = C49872 * C50011;
    const double C50454 = C50011 * ce;
    const double C50597 = C50011 * C50169;
    const double C49964 = C49961 * C49898;
    const double C50038 = C49869 * C50034;
    const double C50191 = C50034 * C50093;
    const double C49900 = C49897 / C49880;
    const double C422 = -(C49894 * C50169 + C49869 * C49884) / C49787;
    const double C50002 = C50000 * ae;
    const double C50249 = 2 * C50000;
    const double C50356 = C49872 * C50000;
    const double C50355 = C50000 * ce;
    const double C50247 = C49983 + C50246;
    const double C50352 = C49983 + C50350;
    const double C50404 = 2 * C50399;
    const double C50402 = C50399 * ce;
    const double C50586 = C49983 + C50585;
    const double C50598 = 2 * C50596;
    const double C50095 = C50092 / C49880;
    const double C1101 = (C49872 * C49992 + C50090 * C50169) / C49742;
    const double C49931 = C49928 + C49903;
    const double C49953 = C49948 / C49880;
    const double C49955 = -2 * C49944;
    const double C49951 = ae * C49944;
    const double C50383 = C49872 * C49944;
    const double C50439 = C49944 * C50169;
    const double C50494 = C50492 + C49903;
    const double C50148 = C50001 + C50143;
    const double C50195 = C50189 / C49880;
    const double C50196 = 2 * C50187;
    const double C50193 = C50187 * ce;
    const double C50488 = C50187 * C50169;
    const double C50503 = C50001 + C50501;
    const double C50040 = C50011 + C50037;
    const double C50039 = C50036 * ae;
    const double C50386 = C50036 * C50093;
    const double C50463 = C50011 + C50457;
    const double C146 =
        2 * ((-(C49869 * C49891) / C49787) / C49742 - (ae * C49884) / C49880) -
        (ae * (C49892 * std::pow(C49869, 2) + C49884)) / C49880 +
        C49869 *
            ((-(ae * C49869 * C49892) / C49787) / C49742 - C49891 / C49880 +
             C49869 *
                 ((-(C49869 * std::pow(C49876, 5) * bs[5] * C49885) / C49787) /
                      C49742 -
                  (ae * C49892) / C49880));
    const double C288 = C49872 * ((-(C49869 * C49891) / C49787) / C49742 -
                                  (ae * C49884) / C49880) -
                        ((C49869 * C49881 * C49877 * C49982 +
                          bs[2] * std::pow(C49874, 2) * ae) *
                         ce) /
                            C49880;
    const double C290 = (-(C49872 * C49992 * ce) / C49787) / C49742 -
                        (C49881 * C49877 * C49885) / C49880 +
                        C49872 * ((-(C49872 * C49891) / C49787) / C49742 -
                                  (C49992 * ce) / C49880);
    const double C427 = (zP - zQ) * ((-(C49869 * C49891) / C49787) / C49742 -
                                     (ae * C49884) / C49880);
    const double C432 = (-(C49891 * std::pow(zP - zQ, 2)) / C49787) / C49742 -
                        (C49881 * C49877 * C49885) / C49880;
    const double C795 = (zP - zQ) * ((-(C49872 * C49891) / C49787) / C49742 -
                                     (C49992 * ce) / C49880);
    const double C49904 = C49869 * C49902;
    const double C49913 = C49902 / C49880;
    const double C50091 = C49872 * C49902;
    const double C995 =
        2 * ((-(C49872 * C49891) / C49787) / C49742 - (C49992 * ce) / C49880) -
        ((C49992 + C49986 * std::pow(C49872, 2)) * ce) / C49880 +
        C49872 *
            ((-(C49872 * C49986 * ce) / C49787) / C49742 - C49891 / C49880 +
             C49872 * ((-(C49872 * C49902) / C49787) / C49742 -
                       (C49986 * ce) / C49880));
    const double C1109 =
        (-(C49872 * C49891) / C49787) / C49742 - (C49992 * ce) / C49880 +
        ((-(C49872 * C49902) / C49787) / C49742 - (C49986 * ce) / C49880) *
            std::pow(zP - zQ, 2);
    const double C1459 =
        (zP - zQ) *
        ((-(C49872 * C49986 * ce) / C49787) / C49742 - C49891 / C49880 +
         C49872 *
             ((-(C49872 * C49902) / C49787) / C49742 - (C49986 * ce) / C49880));
    const double C1743 =
        (-2 * C50085 * C49891) / C49880 +
        C50085 * ((-(C49902 * std::pow(C50085, 2)) / C49787) / C49742 -
                  C49891 / C49880);
    const double C49927 = C49869 * C49923;
    const double C49945 = C49923 / C49880;
    const double C50141 = C49872 * C49923;
    const double C50179 = C49923 * C50169;
    const double C50222 = C50085 * C49923;
    const double C49963 = C49869 * C49959;
    const double C50188 = C49872 * C49959;
    const double C50223 = C49959 * C50169;
    const double C50636 = C50635 * C50630;
    const double C50640 = C50639 * C50635;
    const double C50889 = C50635 * C50631;
    const double C50886 = C50635 / C49812;
    const double C902 = C50894 * C50635;
    const double C50730 = C50669 * C50728;
    const double C50733 = C50639 * C50669;
    const double C50902 = C50669 * C50729;
    const double C50895 = C50669 / C49812;
    const double C396 = C50894 * C50669;
    const double C50802 = C50755 * C50800;
    const double C50805 = C50614 * C50755;
    const double C50911 = C50755 * C50801;
    const double C50906 = C50755 / C49747;
    const double C2175 = C50907 * C50755;
    const double C50828 = C50767 * C50826;
    const double C50831 = C50614 * C50767;
    const double C50915 = C50767 * C50827;
    const double C50908 = C50767 / C49747;
    const double C5084 = C50907 * C50767;
    const double C49758 = C49753 / C49746;
    const double C49756 = 2 * C49753;
    const double C50883 = C50611 / C49751;
    const double C50881 = C50611 / C49742;
    const double C50880 = C50611 * C50606;
    const double C16984 = (2 * C50614 * C50611) / C49742;
    const double C50884 = C50615 * C50606;
    const double C108 = C50615 / C50885;
    const double C7915 = C50615 / C49747;
    const double C50920 = C50882 / C49742;
    const double C16983 = (C50610 * std::pow(C50605, 2)) / C49746 + C50879;
    const double C49817 = C49792 / C49789;
    const double C49814 = 2 * C49792;
    const double C255 = ((0 * ce) / C49787 - C49792 / C49789) / (2 * C49787) +
                        (0 * ce) / C49787;
    const double C540 =
        ((C50653 - (C49785 * 2 * C49792) / C49787) * ce) / C49787 -
        C49786 / C49791;
    const double C541 = (0 * ce) / C49787 - C49792 / C49789;
    const double C903 =
        (-C49786 / C49787) / (2 * C49787) -
        ((C50653 - (C49785 * 2 * C49792) / C49787) * de) / C49787;
    const double C904 =
        (-(2 * C49792) / C49787) / (2 * C49787) - (0 * de) / C49787;
    const double C50900 = C50702 / C49791;
    const double C50899 = C50702 * C50701;
    const double C50896 = C50702 / C49787;
    const double C249 = (2 * C50639 * C50702) / C49787;
    const double C254 =
        (((C50653 - (C49785 * 2 * C49792) / C49787) * ce) / C49787 -
         C49786 / C49791) /
            (2 * C49787) +
        ((C49785 * ((0 * ce) / C49787 - C49792 / C49789) + C50705) * ce) /
            C49787;
    const double C50901 = C50705 * C50701;
    const double C974 = C50705 / C50892;
    const double C1210 = C50705 / C49812;
    const double C50925 = C50898 / C49787;
    const double C248 = (C50653 * std::pow(C50700, 2)) / C49789 + C50893;
    const double C49996 = C49994 + C49995;
    const double C279 = -(C49872 * (C49872 * C49894 + C50245 * ce) +
                          C49869 * C49884 + C49872 * C50245 * ce) /
                        C49787;
    const double C790 = -(C50085 * (C49872 * C49894 + C50245 * ce)) / C49787;
    const double C261 = C49869 * C50237 + C50245 * C50093;
    const double C403 = C49869 * C50237 + C50245 * C50169;
    const double C781 = C50085 * C49872 * C50245;
    const double C982 =
        2 * C49872 * C50245 + C49872 * (C50245 + C50000 * C50093);
    const double C1446 = C50085 * (C50245 + C50000 * C50093);
    const double C1730 =
        2 * C50085 * C50245 + C50085 * (C50245 + C50000 * C50169);
    const double C1097 = C49872 * C50237 + C50349 * C50169;
    const double C4485 =
        2 * C50085 * C50349 + C50085 * (C50349 + C50399 * C50169);
    const double C50351 = C50347 + C50348;
    const double C2338 = C50615 * C268;
    const double C19889 = C50610 * C268;
    const double C24807 = C50615 * C268;
    const double C19877 = C50610 * C274;
    const double C5393 = C50615 * C407;
    const double C22045 = C50610 * C407;
    const double C27911 = C50615 * C407;
    const double C22029 = C50610 * C417;
    const double C20363 = C50610 * C785;
    const double C19881 = C50610 * C987;
    const double C20367 = C50610 * C1451;
    const double C22061 = C50610 * C1739;
    const double C49907 = C49905 + C49892;
    const double C49919 = C49916 / C49880;
    const double C49920 = -2 * C49912;
    const double C49917 = ae * C49912;
    const double C50354 = C49872 * C49912;
    const double C990 = (-2 * (C49872 * C49894 + C50245 * ce)) / C49787 -
                        (C49872 * (C49872 * (C49872 * C49912 + C50000 * ce) +
                                   C49894 + C49872 * C50000 * ce)) /
                            C49787 -
                        ((C50245 + C50000 * C50093) * ce) / C49787;
    const double C1104 = -((C49872 * C49912 + C50000 * ce) * C50169 +
                           C49872 * C49894 + C50245 * ce) /
                         C49787;
    const double C1454 = -(C50085 * (C49872 * (C49872 * C49912 + C50000 * ce) +
                                     C49894 + C49872 * C50000 * ce)) /
                         C49787;
    const double C1734 = (-2 * C50085 * C49894) / C49787 -
                         (C50085 * (C49912 * C50169 + C49894)) / C49787;
    const double C5383 =
        (-3 * (C49912 * C50169 + C49894)) / C49787 +
        C50085 * ((-2 * C50085 * C49912) / C49787 -
                  (C50085 * (C49944 * C50169 + C49912)) / C49787);
    const double C50401 = C50397 + C50398;
    const double C50443 = C50442 + C49892;
    const double C50493 = -2 * C50491;
    const double C50004 = C50003 + C49999;
    const double C50098 = C49986 + C50096;
    const double C50146 = C50142 / C49880;
    const double C50147 = 2 * C50140;
    const double C50144 = C50140 * ce;
    const double C4493 =
        (2 * C50085 * C50090 + C50085 * (C50090 + C50140 * C50169)) / C49742;
    const double C6392 =
        (3 * (C50090 + C50140 * C50169) +
         C50085 * (2 * C50085 * C50140 + C50085 * (C50140 + C50187 * C50169))) /
        C49742;
    const double C50449 = C49986 + C50448;
    const double C50502 = 2 * C50500;
    const double C24040 = C50610 * C5380;
    const double C50018 = C49984 + C50015;
    const double C50017 = C50014 * ae;
    const double C50033 = 2 * C50014;
    const double C50357 = C50014 * C50093;
    const double C50385 = C49872 * C50014;
    const double C50384 = C50014 * ce;
    const double C50582 = C50014 * C50169;
    const double C5378 =
        3 * (C50245 + C50000 * C50169) +
        C50085 * (2 * C50085 * C50000 + C50085 * (C50000 + C50014 * C50169));
    const double C50019 = C50016 + C50013;
    const double C50403 = C49984 + C50400;
    const double C50464 = 2 * C50455;
    const double C50461 = C50455 * ce;
    const double C50593 = C50455 * C50169;
    const double C6390 =
        3 * (C50349 + C50399 * C50169) +
        C50085 * (2 * C50085 * C50399 + C50085 * (C50399 + C50455 * C50169));
    const double C50460 = C50453 + C50454;
    const double C50599 = C49984 + C50597;
    const double C49967 = C49964 + C49925;
    const double C50041 = C50038 + C50035;
    const double C50197 = C50012 + C50191;
    const double C1096 = C49872 * C50245 + C50356 * C50169;
    const double C126 = 3 * (C50237 + C49983 * C49898) +
                        C49869 * (2 * C50245 + C49869 * C50247);
    const double C256 = C49872 * (2 * C50245 + C49869 * C50247);
    const double C262 = C50237 + C49983 * C49898 + C50247 * C50093;
    const double C399 = C50085 * (2 * C50245 + C49869 * C50247);
    const double C404 = C50237 + C49983 * C49898 + C50247 * C50169;
    const double C782 = C50085 * C49872 * C50247;
    const double C2324 = 3 * (C50237 + C49983 * C50093) +
                         C49872 * (2 * C50349 + C49872 * C50352);
    const double C2558 = C50237 + C49983 * C50093 + C50352 * C50169;
    const double C3080 = C50085 * (2 * C50349 + C49872 * C50352);
    const double C7296 =
        4 * (2 * C50085 * C49983 + C50085 * C50586) +
        C50085 * (3 * C50586 + C50085 * (2 * C50085 * C49984 +
                                         C50085 * (C49984 + C50011 * C50169)));
    const double C20675 = C50610 * C1101;
    const double C49934 = C49869 * C49931;
    const double C49949 = -3 * C49931;
    const double C49943 = ae * C49931;
    const double C50362 = C49872 * C49931;
    const double C49960 = C49955 / C49787;
    const double C49958 = C49951 / C49787;
    const double C50440 = C50439 + C49912;
    const double C50496 = C50085 * C50494;
    const double C50151 = C49872 * C50148;
    const double C50190 = 3 * C50148;
    const double C50186 = C50148 * ce;
    const double C50199 = C50193 / C49787;
    const double C50489 = C50140 + C50488;
    const double C50504 = C50085 * C50503;
    const double C50043 = C49869 * C50040;
    const double C50042 = C50040 * ae;
    const double C50365 = C50040 * C50093;
    const double C50389 = C50014 + C50386;
    const double C50466 = C49872 * C50463;
    const double C2342 = C50615 * C288;
    const double C19891 = C50610 * C288;
    const double C24811 = C50615 * C288;
    const double C19879 = C50610 * C290;
    const double C5397 = C50615 * C427;
    const double C22043 = C50610 * C427;
    const double C27915 = C50615 * C427;
    const double C22031 = C50610 * C432;
    const double C20365 = C50610 * C795;
    const double C49906 = C49904 / C49787;
    const double C5386 =
        3 * ((-(C49902 * C50169) / C49787) / C49742 - C49891 / C49880) +
        C50085 * ((-2 * C50085 * C49902) / C49880 +
                  C50085 * ((-(C49923 * C50169) / C49787) / C49742 - C49913));
    const double C50094 = C50091 / C49787;
    const double C19883 = C50610 * C995;
    const double C20677 = C50610 * C1109;
    const double C20369 = C50610 * C1459;
    const double C22059 = C50610 * C1743;
    const double C49930 = C49927 / C49787;
    const double C50145 = C50141 / C49787;
    const double C50180 = C50179 / C49787;
    const double C50224 = -2 * C50222;
    const double C49966 = C49963 / C49787;
    const double C50194 = C50188 / C49787;
    const double C50225 = C50223 / C49787;
    const double C50890 = C50636 / C49791;
    const double C50888 = C50636 / C49787;
    const double C50887 = C50636 * C50631;
    const double C901 = (2 * C50639 * C50636) / C49787;
    const double C50891 = C50640 * C50631;
    const double C115 = C50640 / C50892;
    const double C539 = C50640 / C49812;
    const double C50923 = C50889 / C49787;
    const double C900 = (C50635 * std::pow(C50630, 2)) / C49789 + C50886;
    const double C50904 = C50730 / C49791;
    const double C50903 = C50730 * C50729;
    const double C50897 = C50730 / C49787;
    const double C395 = (2 * C50639 * C50730) / C49787;
    const double C50905 = C50733 * C50729;
    const double C1727 = C50733 / C50892;
    const double C1974 = C50733 / C49812;
    const double C50928 = C50902 / C49787;
    const double C394 = (C50669 * std::pow(C50728, 2)) / C49789 + C50895;
    const double C50913 = C50802 / C49751;
    const double C50912 = C50802 * C50801;
    const double C50909 = C50802 / C49742;
    const double C2174 = (2 * C50614 * C50802) / C49742;
    const double C50914 = C50805 * C50801;
    const double C19771 = C50805 / C50885;
    const double C24656 = C50805 / C49747;
    const double C50931 = C50911 / C49742;
    const double C2173 = (C50755 * std::pow(C50800, 2)) / C49746 + C50906;
    const double C50917 = C50828 / C49751;
    const double C50916 = C50828 * C50827;
    const double C50910 = C50828 / C49742;
    const double C5083 = (2 * C50614 * C50828) / C49742;
    const double C50918 = C50831 * C50827;
    const double C39120 = C50831 / C50885;
    const double C44486 = C50831 / C49747;
    const double C50934 = C50915 / C49742;
    const double C5082 = (C50767 * std::pow(C50826, 2)) / C49746 + C50908;
    const double C49761 = C49750 - C49758;
    const double C49760 = C49740 * C49756;
    const double C2177 = (-C49756 / C49742) / C49747 - (0 * be) / C49742;
    const double C19772 = -C49756 / C49742;
    const double C24835 = C50881 * C288;
    const double C24831 = C50881 * C268;
    const double C24827 = C50881 * C995;
    const double C24823 = C50881 * C987;
    const double C24819 = C50881 * C290;
    const double C24815 = C50881 * C274;
    const double C24813 = C50881 * C289;
    const double C24809 = C50881 * C269;
    const double C25551 = C50881 * C1459;
    const double C25547 = C50881 * C1451;
    const double C25543 = C50881 * C795;
    const double C25539 = C50881 * C785;
    const double C25997 = C50881 * C1109;
    const double C25993 = C50881 * C1101;
    const double C27947 = C50881 * C417;
    const double C27943 = C50881 * C432;
    const double C27923 = C50881 * C407;
    const double C27919 = C50881 * C427;
    const double C27913 = C50881 * C431;
    const double C27909 = C50881 * C416;
    const double C30351 = C50881 * C1743;
    const double C30347 = C50881 * C1739;
    const double C46579 = C50881 * C5380;
    const double C50919 = C50880 / C49746;
    const double C17147 = C16984 * C288;
    const double C17141 = C16984 * C268;
    const double C34087 = C16984 * C427;
    const double C34081 = C16984 * C407;
    const double C50921 = C50884 / C49742;
    const double C2171 = -C50920;
    const double C17169 = C16983 * C288;
    const double C17163 = C16983 * C268;
    const double C17157 = C16983 * C290;
    const double C17151 = C16983 * C274;
    const double C17149 = C16983 * C289;
    const double C17143 = C16983 * C269;
    const double C17867 = C16983 * C795;
    const double C17861 = C16983 * C785;
    const double C18151 = C16983 * C995;
    const double C18145 = C16983 * C987;
    const double C18315 = C16983 * C1109;
    const double C18309 = C16983 * C1101;
    const double C18819 = C16983 * C1459;
    const double C18813 = C16983 * C1451;
    const double C34125 = C16983 * C417;
    const double C34119 = C16983 * C432;
    const double C34101 = C16983 * C407;
    const double C34095 = C16983 * C427;
    const double C34085 = C16983 * C431;
    const double C34079 = C16983 * C416;
    const double C35927 = C16983 * C1743;
    const double C35921 = C16983 * C1739;
    const double C49824 = C49821 - C49817;
    const double C49820 = C49785 * C49814;
    const double C50926 = C50899 / C49789;
    const double C253 =
        (((0 - (C49785 * C49786) / C49787) * ce) / C49787 - (0 * de) / C49791) /
            (2 * C49787) +
        ((C49785 * (((C50653 - (C49785 * 2 * C49792) / C49787) * ce) / C49787 -
                    C49786 / C49791) +
          C50896) *
         ce) /
            C49787 +
        (0 * ce) / C49787 - C49792 / C49789;
    const double C50927 = C50901 / C49787;
    const double C898 = -C50925;
    const double C132 =
        (2 * (C49869 * C49992 + C50237 * ae) +
         C49869 * (C49992 + C49869 * C49996 + C49869 * C49983 * ae) +
         (C50237 + C49983 * C49898) * ae) /
        C49742;
    const double C267 =
        (C49872 * (C49992 + C49869 * C49996 + C50245 * ae)) / C49742;
    const double C275 =
        (C49869 * C49992 + C50237 * ae + C49996 * C50093) / C49742;
    const double C408 =
        (C50085 * (C49992 + C49869 * C49996 + C50245 * ae)) / C49742;
    const double C418 =
        (C49869 * C49992 + C50237 * ae + C49996 * C50169) / C49742;
    const double C786 = (C50085 * C49872 * C49996) / C49742;
    const double C2329 =
        (-3 * (C49872 * C50351 + C49884 + C50349 * ce)) / C49787 +
        C49872 * ((-2 * C50351) / C49787 -
                  (C49872 * (C49872 * (C49872 * C49903 + C49984 * ce) + C49892 +
                             C49872 * C49984 * ce)) /
                      C49787 -
                  (C50352 * ce) / C49787) -
        ((2 * C50349 + C49872 * C50352) * ce) / C49787;
    const double C2563 = -((C49872 * (C49872 * C49903 + C49984 * ce) + C49892 +
                            C49872 * C49984 * ce) *
                               C50169 +
                           C49872 * C50351 + C49884 + C50349 * ce) /
                         C49787;
    const double C3085 =
        C50085 * ((-2 * C50351) / C49787 -
                  (C49872 * (C49872 * (C49872 * C49903 + C49984 * ce) + C49892 +
                             C49872 * C49984 * ce)) /
                      C49787 -
                  (C50352 * ce) / C49787);
    const double C137 =
        (-3 * (C49892 * C49898 + C49884)) / C49787 +
        C49869 * ((-2 * C49894) / C49787 - (C49869 * C49907) / C49787);
    const double C270 =
        C49872 * ((-2 * C49894) / C49787 - (C49869 * C49907) / C49787) -
        ((2 * C50245 + C49869 * C50247) * ce) / C49787;
    const double C280 = -(C49872 * (C49872 * C49907 + C50247 * ce) +
                          C49892 * C49898 + C49884 + C49872 * C50247 * ce) /
                        C49787;
    const double C413 =
        C50085 * ((-2 * C49894) / C49787 - (C49869 * C49907) / C49787);
    const double C423 = -(C49907 * C50169 + C49892 * C49898 + C49884) / C49787;
    const double C791 = -(C50085 * (C49872 * C49907 + C50247 * ce)) / C49787;
    const double C1733 = (-2 * C50085 * C49907) / C49787 -
                         (C50085 * (C49931 * C50169 + C49907)) / C49787;
    const double C49924 = C49920 / C49787;
    const double C49922 = C49917 / C49787;
    const double C50358 = C50354 + C50355;
    const double C50405 = C49872 * C50401;
    const double C50452 = -2 * C50401;
    const double C4491 = (-2 * C50085 * C50351) / C49787 -
                         (C50085 * (C50401 * C50169 + C50351)) / C49787;
    const double C6394 =
        (-3 * (C50401 * C50169 + C50351)) / C49787 +
        C50085 *
            ((-2 * C50085 * C50401) / C49787 -
             (C50085 * ((C49872 * C49925 + C50011 * ce) * C50169 + C50401)) /
                 C49787);
    const double C7298 =
        4 * ((-2 * C50085 * C49892) / C49787 - (C50085 * C50443) / C49787) +
        C50085 * ((-3 * C50443) / C49787 +
                  C50085 * ((-2 * C50085 * C49903) / C49787 -
                            (C50085 * (C49925 * C50169 + C49903)) / C49787));
    const double C50495 = C50493 / C49787;
    const double C50005 = C49869 * C50004;
    const double C50009 = 2 * C50004;
    const double C50104 = C50004 * ce;
    const double C50102 = C49872 * C50004;
    const double C986 =
        (2 * C49872 * C49996 + C49872 * (C49996 + C50004 * C50093)) / C49742;
    const double C1450 = (C50085 * (C49996 + C50004 * C50093)) / C49742;
    const double C1738 =
        (2 * C50085 * C49996 + C50085 * (C49996 + C50004 * C50169)) / C49742;
    const double C2327 = (3 * (C49992 + C49986 * C50093) +
                          C49872 * (2 * C50090 + C49872 * C50098)) /
                         C49742;
    const double C2561 = (C49992 + C49986 * C50093 + C50098 * C50169) / C49742;
    const double C3083 = (C50085 * (2 * C50090 + C49872 * C50098)) / C49742;
    const double C4489 =
        (2 * C50085 * C50098 + C50085 * (C50098 + C50148 * C50169)) / C49742;
    const double C50149 = C50144 / C49787;
    const double C22057 = C50610 * C4493;
    const double C29171 = C50881 * C4493;
    const double C23075 = C50610 * C6392;
    const double C7300 =
        (4 * (2 * C50085 * C49986 + C50085 * C50449) +
         C50085 *
             (3 * C50449 + C50085 * (2 * C50085 * C50001 +
                                     C50085 * (C50001 + C50012 * C50169)))) /
        C49742;
    const double C50020 = C50018 * ae;
    const double C50250 = C49869 * C50018;
    const double C50255 = 3 * C50018;
    const double C50364 = C49872 * C50018;
    const double C50363 = C50018 * ce;
    const double C989 = (-2 * (C49872 * C49907 + C50247 * ce)) / C49787 -
                        (C49872 * (C49872 * (C49872 * C49931 + C50018 * ce) +
                                   C49907 + C49872 * C50018 * ce)) /
                            C49787 -
                        ((C50247 + C50018 * C50093) * ce) / C49787;
    const double C1103 = -((C49872 * C49931 + C50018 * ce) * C50169 +
                           C49872 * C49907 + C50247 * ce) /
                         C49787;
    const double C1453 = -(C50085 * (C49872 * (C49872 * C49931 + C50018 * ce) +
                                     C49907 + C49872 * C50018 * ce)) /
                         C49787;
    const double C981 =
        2 * C49872 * C50247 + C49872 * (C50247 + C50018 * C50093);
    const double C1445 = C50085 * (C50247 + C50018 * C50093);
    const double C1729 =
        2 * C50085 * C50247 + C50085 * (C50247 + C50018 * C50169);
    const double C5379 =
        3 * (C50247 + C50018 * C50169) +
        C50085 * (2 * C50085 * C50018 + C50085 * (C50018 + C50040 * C50169));
    const double C50359 = C50000 + C50357;
    const double C50390 = 2 * C50385;
    const double C50388 = C50385 * ce;
    const double C4484 =
        2 * C50085 * C50356 + C50085 * (C50356 + C50385 * C50169);
    const double C6389 =
        3 * (C50356 + C50385 * C50169) +
        C50085 * (2 * C50085 * C50385 +
                  C50085 * (C50385 + C49872 * C50036 * C50169));
    const double C50387 = C50383 + C50384;
    const double C50583 = C50000 + C50582;
    const double C50021 = C49869 * C50019;
    const double C50030 = 2 * C50019;
    const double C50105 = C50019 * C50093;
    const double C50126 = C50019 * ce;
    const double C50124 = C49872 * C50019;
    const double C50445 = C50019 * C50169;
    const double C5381 =
        (3 * (C49996 + C50004 * C50169) +
         C50085 * (2 * C50085 * C50004 + C50085 * (C50004 + C50019 * C50169))) /
        C49742;
    const double C50406 = C49872 * C50403;
    const double C50458 = 3 * C50403;
    const double C50456 = C50403 * ce;
    const double C4483 =
        2 * C50085 * C50352 + C50085 * (C50352 + C50403 * C50169);
    const double C23043 =
        3 * (C50352 + C50403 * C50169) +
        C50085 * (2 * C50085 * C50403 + C50085 * (C50403 + C50463 * C50169));
    const double C50594 = C50399 + C50593;
    const double C50465 = C49872 * C50460;
    const double C50485 = C50460 * C50169;
    const double C50600 = C50085 * C50599;
    const double C49970 = C49869 * C49967;
    const double C5384 =
        (-3 * (C49931 * C50169 + C49907)) / C49787 +
        C50085 * ((-2 * C50085 * C49931) / C49787 -
                  (C50085 * (C49967 * C50169 + C49931)) / C49787);
    const double C50044 = C49869 * C50041;
    const double C50127 = C50041 * C50093;
    const double C50201 = C49872 * C50197;
    const double C23044 =
        (3 * (C50098 + C50148 * C50169) +
         C50085 * (2 * C50085 * C50148 + C50085 * (C50148 + C50197 * C50169))) /
        C49742;
    const double C49936 = C49934 / C49787;
    const double C49954 = C49949 / C49787;
    const double C49950 = C49943 / C49880;
    const double C49962 = -C49958;
    const double C7297 =
        4 * ((-2 * C50085 * C49912) / C49787 - (C50085 * C50440) / C49787) +
        C50085 * ((-3 * C50440) / C49787 +
                  C50085 * ((-2 * C50085 * C49944) / C49787 -
                            (C50085 * (C49869 * C49961 * C50169 + C49944)) /
                                C49787));
    const double C50497 = C50496 / C49787;
    const double C50154 = C50147 + C50151;
    const double C50192 = C50186 / C49880;
    const double C50202 = -C50199;
    const double C24034 =
        (4 * (2 * C50085 * C50140 + C50085 * C50489) +
         C50085 * (3 * C50489 +
                   C50085 * (2 * C50085 * C50187 +
                             C50085 * (C50187 + C49872 * C50034 * C50169)))) /
        C49742;
    const double C50505 = C50502 + C50504;
    const double C50045 = C50033 + C50043;
    const double C50367 = C50018 + C50365;
    const double C50392 = C49872 * C50389;
    const double C50468 = C50464 + C50466;
    const double C49908 = -C49906;
    const double C24042 = C50610 * C5386;
    const double C46583 = C50881 * C5386;
    const double C50097 = -C50094;
    const double C49933 = -C49930;
    const double C50150 = -C50145;
    const double C50181 = -C50180;
    const double C50226 = C50224 / C49880;
    const double C49969 = -C49966;
    const double C50200 = -C50194;
    const double C50227 = -C50225;
    const double C50922 = C50887 / C49789;
    const double C50924 = C50891 / C49787;
    const double C251 = -C50923;
    const double C50929 = C50903 / C49789;
    const double C50930 = C50905 / C49787;
    const double C1558 = -C50928;
    const double C50932 = C50912 / C49746;
    const double C50933 = C50914 / C49742;
    const double C16986 = -C50931;
    const double C50935 = C50916 / C49746;
    const double C50936 = C50918 / C49742;
    const double C33783 = -C50934;
    const double C24838 = C49761 * C262;
    const double C24836 = C49761 * C271;
    const double C24832 = C49761 * C257;
    const double C24828 = C49761 * C990;
    const double C24824 = C49761 * C982;
    const double C24820 = C49761 * C279;
    const double C24816 = C49761 * C261;
    const double C24810 = C49761 * C272;
    const double C24806 = C49761 * C258;
    const double C25174 = C49761 * C256;
    const double C25554 = C49761 * C782;
    const double C25552 = C49761 * C1454;
    const double C25548 = C49761 * C1446;
    const double C25544 = C49761 * C790;
    const double C25540 = C49761 * C781;
    const double C25994 = C49761 * C1104;
    const double C25990 = C49761 * C1096;
    const double C27944 = C49761 * C403;
    const double C27940 = C49761 * C422;
    const double C27926 = C49761 * C404;
    const double C27920 = C49761 * C398;
    const double C27916 = C49761 * C412;
    const double C27914 = C49761 * C411;
    const double C27910 = C49761 * C397;
    const double C28370 = C49761 * C399;
    const double C30352 = C49761 * C1734;
    const double C30348 = C49761 * C1730;
    const double C46584 = C49761 * C5383;
    const double C46580 = C49761 * C5378;
    const double C120 =
        (C49761 / C49747 - (0 * be) / C49742) / C49747 + (0 * ae) / C49742;
    const double C7920 = C49761 / C49747 - (0 * be) / C49742;
    const double C16990 = C49761 / C49747 + (0 * ae) / C49742;
    const double C49763 = C49760 / C49742;
    const double C2369 = C2177 * C262;
    const double C2367 = C2177 * C271;
    const double C2363 = C2177 * C257;
    const double C2359 = C2177 * C990;
    const double C2355 = C2177 * C982;
    const double C2351 = C2177 * C279;
    const double C2347 = C2177 * C261;
    const double C2341 = C2177 * C272;
    const double C2337 = C2177 * C258;
    const double C2717 = C2177 * C256;
    const double C3109 = C2177 * C782;
    const double C3107 = C2177 * C1454;
    const double C3103 = C2177 * C1446;
    const double C3099 = C2177 * C790;
    const double C3095 = C2177 * C781;
    const double C3565 = C2177 * C1104;
    const double C3561 = C2177 * C1096;
    const double C5434 = C2177 * C1730;
    const double C5430 = C2177 * C1734;
    const double C5418 = C2177 * C398;
    const double C5414 = C2177 * C412;
    const double C5410 = C2177 * C404;
    const double C5404 = C2177 * C422;
    const double C5400 = C2177 * C403;
    const double C5396 = C2177 * C411;
    const double C5392 = C2177 * C397;
    const double C5768 = C2177 * C399;
    const double C7312 = C2177 * C5383;
    const double C7308 = C2177 * C5378;
    const double C19898 = C19772 * C990;
    const double C19896 = C19772 * C982;
    const double C19894 = C19772 * C279;
    const double C19892 = C19772 * C261;
    const double C19890 = C19772 * C272;
    const double C19888 = C19772 * C258;
    const double C19884 = C19772 * C2324;
    const double C19882 = C19772 * C991;
    const double C19880 = C19772 * C983;
    const double C19878 = C19772 * C278;
    const double C19876 = C19772 * C260;
    const double C19874 = C19772 * C273;
    const double C19872 = C19772 * C259;
    const double C20120 = C19772 * C262;
    const double C20118 = C19772 * C271;
    const double C20116 = C19772 * C257;
    const double C20380 = C19772 * C1454;
    const double C20378 = C19772 * C1446;
    const double C20376 = C19772 * C790;
    const double C20374 = C19772 * C781;
    const double C20370 = C19772 * C3080;
    const double C20368 = C19772 * C1455;
    const double C20366 = C19772 * C1447;
    const double C20364 = C19772 * C789;
    const double C20362 = C19772 * C780;
    const double C20678 = C19772 * C2558;
    const double C20676 = C19772 * C1105;
    const double C20674 = C19772 * C1097;
    const double C21866 = C19772 * C1104;
    const double C21864 = C19772 * C1096;
    const double C22060 = C19772 * C1731;
    const double C22058 = C19772 * C1735;
    const double C22056 = C19772 * C4485;
    const double C22048 = C19772 * C1734;
    const double C22046 = C19772 * C1730;
    const double C22044 = C19772 * C397;
    const double C22042 = C19772 * C411;
    const double C22038 = C19772 * C403;
    const double C22036 = C19772 * C422;
    const double C22030 = C19772 * C421;
    const double C22028 = C19772 * C402;
    const double C22024 = C19772 * C415;
    const double C22022 = C19772 * C401;
    const double C22250 = C19772 * C782;
    const double C22414 = C19772 * C404;
    const double C22410 = C19772 * C412;
    const double C22408 = C19772 * C398;
    const double C23074 = C19772 * C6390;
    const double C24041 = C19772 * C5382;
    const double C24039 = C19772 * C5377;
    const double C39324 = C19772 * C5383;
    const double C39322 = C19772 * C5378;
    const double C40551 = C19772 * C7296;
    const double C50937 = C50879 - C50919;
    const double C50938 = C50883 - C50921;
    const double C2366 = C2171 * C288;
    const double C2362 = C2171 * C268;
    const double C2358 = C2171 * C995;
    const double C2354 = C2171 * C987;
    const double C2350 = C2171 * C290;
    const double C2346 = C2171 * C274;
    const double C2344 = C2171 * C289;
    const double C2340 = C2171 * C269;
    const double C3106 = C2171 * C1459;
    const double C3102 = C2171 * C1451;
    const double C3098 = C2171 * C795;
    const double C3094 = C2171 * C785;
    const double C3568 = C2171 * C1109;
    const double C3564 = C2171 * C1101;
    const double C5437 = C2171 * C1739;
    const double C5433 = C2171 * C1743;
    const double C5421 = C2171 * C407;
    const double C5417 = C2171 * C427;
    const double C5403 = C2171 * C432;
    const double C5399 = C2171 * C417;
    const double C5395 = C2171 * C431;
    const double C5391 = C2171 * C416;
    const double C6403 = C2171 * C4493;
    const double C7311 = C2171 * C5386;
    const double C7307 = C2171 * C5380;
    const double C979 =
        (C49824 / C49812 - (0 * de) / C49787) / C49812 + (0 * ce) / C49787;
    const double C1215 = C49824 / C49812 - (0 * de) / C49787;
    const double C49823 = C49820 / C49787;
    const double C50941 = C50893 - C50926;
    const double C50942 = C50900 - C50927;
    const double C2364 = C50615 * C267;
    const double C2720 = C2171 * C267;
    const double C8069 = C7915 * C267;
    const double C17165 = C16984 * C267;
    const double C17139 = C16985 * C267;
    const double C17507 = C16983 * C267;
    const double C20117 = C50610 * C267;
    const double C24833 = C50615 * C267;
    const double C25177 = C50881 * C267;
    const double C2372 = C2171 * C275;
    const double C2348 = C50615 * C275;
    const double C17179 = C16983 * C275;
    const double C17153 = C16984 * C275;
    const double C19893 = C50610 * C275;
    const double C24841 = C50881 * C275;
    const double C24817 = C50615 * C275;
    const double C5419 = C50615 * C408;
    const double C5767 = C2171 * C408;
    const double C11029 = C7915 * C408;
    const double C22409 = C50610 * C408;
    const double C27921 = C50615 * C408;
    const double C28369 = C50881 * C408;
    const double C34099 = C16984 * C408;
    const double C34083 = C16985 * C408;
    const double C34443 = C16983 * C408;
    const double C5413 = C2171 * C418;
    const double C5401 = C50615 * C418;
    const double C22039 = C50610 * C418;
    const double C27945 = C50615 * C418;
    const double C27925 = C50881 * C418;
    const double C34123 = C16984 * C418;
    const double C34103 = C16983 * C418;
    const double C3112 = C2171 * C786;
    const double C3096 = C50615 * C786;
    const double C17877 = C16983 * C786;
    const double C17863 = C16984 * C786;
    const double C20375 = C50610 * C786;
    const double C25557 = C50881 * C786;
    const double C25541 = C50615 * C786;
    const double C19886 = C19772 * C2329;
    const double C20680 = C19772 * C2563;
    const double C20372 = C19772 * C3085;
    const double C2721 = C2177 * C270;
    const double C25178 = C49761 * C270;
    const double C2373 = C2177 * C280;
    const double C20122 = C19772 * C280;
    const double C24842 = C49761 * C280;
    const double C5772 = C2177 * C413;
    const double C28374 = C49761 * C413;
    const double C5406 = C2177 * C423;
    const double C22416 = C19772 * C423;
    const double C27930 = C49761 * C423;
    const double C3113 = C2177 * C791;
    const double C22252 = C19772 * C791;
    const double C25558 = C49761 * C791;
    const double C5428 = C2177 * C1733;
    const double C39530 = C19772 * C1733;
    const double C44790 = C49761 * C1733;
    const double C49926 = -C49922;
    const double C2564 = -((C49872 * (C49872 * C49944 + C50014 * ce) + C49912 +
                            C49872 * C50014 * ce) *
                               C50169 +
                           C49872 * C50358 + C49894 + C50356 * ce) /
                         C49787;
    const double C50407 = C50405 + C49892;
    const double C50459 = C50452 / C49787;
    const double C22054 = C19772 * C4491;
    const double C23076 = C19772 * C6394;
    const double C40553 = C19772 * C7298;
    const double C50006 = C49986 + C50005;
    const double C50106 = C50104 / C49880;
    const double C1100 = (C49872 * C49996 + C50102 * C50169) / C49742;
    const double C2380 = C2171 * C986;
    const double C2356 = C50615 * C986;
    const double C18143 = C16984 * C986;
    const double C19897 = C50610 * C986;
    const double C24849 = C50881 * C986;
    const double C24825 = C50615 * C986;
    const double C3120 = C2171 * C1450;
    const double C3104 = C50615 * C1450;
    const double C18811 = C16984 * C1450;
    const double C20379 = C50610 * C1450;
    const double C25565 = C50881 * C1450;
    const double C25549 = C50615 * C1450;
    const double C5435 = C50615 * C1738;
    const double C5423 = C2171 * C1738;
    const double C22047 = C50610 * C1738;
    const double C30349 = C50615 * C1738;
    const double C35923 = C16984 * C1738;
    const double C44785 = C50881 * C1738;
    const double C3398 = C2171 * C2327;
    const double C19885 = C50610 * C2327;
    const double C25835 = C50881 * C2327;
    const double C3572 = C2171 * C2561;
    const double C20679 = C50610 * C2561;
    const double C26001 = C50881 * C2561;
    const double C4084 = C2171 * C3083;
    const double C20371 = C50610 * C3083;
    const double C26505 = C50881 * C3083;
    const double C23069 = C50610 * C4489;
    const double C50152 = -C50149;
    const double C40552 = C50610 * C7300;
    const double C50251 = C50249 + C50250;
    const double C1095 = C49872 * C50247 + C50364 * C50169;
    const double C5983 =
        2 * C50085 * C50364 + C50085 * (C50364 + C49872 * C50040 * C50169);
    const double C50366 = C50362 + C50363;
    const double C2381 = C2177 * C989;
    const double C20126 = C19772 * C989;
    const double C24850 = C49761 * C989;
    const double C5994 = C2177 * C1103;
    const double C22256 = C19772 * C1103;
    const double C27938 = C49761 * C1103;
    const double C3121 = C2177 * C1453;
    const double C25566 = C49761 * C1453;
    const double C31550 = C19772 * C1453;
    const double C2377 = C2177 * C981;
    const double C20124 = C19772 * C981;
    const double C24846 = C49761 * C981;
    const double C3117 = C2177 * C1445;
    const double C25562 = C49761 * C1445;
    const double C31548 = C19772 * C1445;
    const double C5424 = C2177 * C1729;
    const double C39528 = C19772 * C1729;
    const double C44786 = C49761 * C1729;
    const double C2330 =
        (-3 * (C49872 * C50358 + C49894 + C50356 * ce)) / C49787 +
        C49872 * ((-2 * C50358) / C49787 -
                  (C49872 * (C49872 * (C49872 * C49944 + C50014 * ce) + C49912 +
                             C49872 * C50014 * ce)) /
                      C49787 -
                  (C50359 * ce) / C49787) -
        ((2 * C50356 + C49872 * C50359) * ce) / C49787;
    const double C3086 =
        C50085 * ((-2 * C50358) / C49787 -
                  (C49872 * (C49872 * (C49872 * C49944 + C50014 * ce) + C49912 +
                             C49872 * C50014 * ce)) /
                      C49787 -
                  (C50359 * ce) / C49787);
    const double C2325 = 3 * (C50245 + C50000 * C50093) +
                         C49872 * (2 * C50356 + C49872 * C50359);
    const double C2559 = C50245 + C50000 * C50093 + C50359 * C50169;
    const double C3081 = C50085 * (2 * C50356 + C49872 * C50359);
    const double C4482 =
        2 * C50085 * C50359 + C50085 * (C50359 + C50389 * C50169);
    const double C6404 = C2177 * C4484;
    const double C22050 = C19772 * C4484;
    const double C29168 = C49761 * C4484;
    const double C50391 = C49872 * C50387;
    const double C4490 = (-2 * C50085 * C50358) / C49787 -
                         (C50085 * (C50387 * C50169 + C50358)) / C49787;
    const double C6393 =
        (-3 * (C50387 * C50169 + C50358)) / C49787 +
        C50085 * ((-2 * C50085 * C50387) / C49787 -
                  (C50085 * ((C49872 * C49869 * C49961 + C50036 * ce) * C50169 +
                             C50387)) /
                      C49787);
    const double C7295 =
        4 * (2 * C50085 * C50000 + C50085 * C50583) +
        C50085 * (3 * C50583 + C50085 * (2 * C50085 * C50014 +
                                         C50085 * (C50014 + C50036 * C50169)));
    const double C50022 = C50001 + C50021;
    const double C50107 = C50004 + C50105;
    const double C50129 = C50126 / C49880;
    const double C50130 = 2 * C50124;
    const double C50128 = C50124 * ce;
    const double C4492 =
        (2 * C50085 * C50102 + C50085 * (C50102 + C50124 * C50169)) / C49742;
    const double C6391 =
        (3 * (C50102 + C50124 * C50169) +
         C50085 * (2 * C50085 * C50124 +
                   C50085 * (C50124 + C49872 * C50041 * C50169))) /
        C49742;
    const double C50446 = C50004 + C50445;
    const double C7309 = C50615 * C5381;
    const double C39323 = C50610 * C5381;
    const double C46581 = C50615 * C5381;
    const double C50408 = C50404 + C50406;
    const double C50462 = C50456 / C49787;
    const double C23068 = C19772 * C4483;
    const double C24032 =
        4 * (2 * C50085 * C50399 + C50085 * C50594) +
        C50085 * (3 * C50594 +
                  C50085 * (2 * C50085 * C50455 +
                            C50085 * (C50455 + C49872 * C50032 * C50169)));
    const double C50467 = C50465 + C49903;
    const double C50486 = C50485 + C50401;
    const double C50601 = C50598 + C50600;
    const double C49972 = C49970 / C49787;
    const double C50046 = C50012 + C50044;
    const double C50131 = C50019 + C50127;
    const double C50204 = C50196 + C50201;
    const double C49938 = C49924 - C49936;
    const double C49965 = C49962 / C49742;
    const double C50498 = C50495 - C50497;
    const double C3387 = (4 * (2 * C50090 + C49872 * C50098) +
                          C49872 * (3 * C50098 + C49872 * C50154)) /
                         C49742;
    const double C3555 =
        (2 * C50090 + C49872 * C50098 + C50154 * C50169) / C49742;
    const double C4073 = (C50085 * (3 * C50098 + C49872 * C50154)) / C49742;
    const double C50205 = C50202 / C49742;
    const double C40546 =
        (5 * (3 * C50449 + C50085 * C50505) +
         C50085 * (4 * C50505 +
                   C50085 * (3 * C50503 +
                             C50085 * (2 * C50085 * C50012 +
                                       C50085 * (C50012 + C50034 * C50169))))) /
        C49742;
    const double C50047 = C50045 * ae;
    const double C50256 = C49869 * C50045;
    const double C2326 = 3 * (C50247 + C50018 * C50093) +
                         C49872 * (2 * C50364 + C49872 * C50367);
    const double C2560 = C50247 + C50018 * C50093 + C50367 * C50169;
    const double C3082 = C50085 * (2 * C50364 + C49872 * C50367);
    const double C50394 = C50390 + C50392;
    const double C50470 = C49872 * C50468;
    const double C49909 = C49908 / C49742;
    const double C50099 = C50097 / C49742;
    const double C49935 = C49933 / C49742;
    const double C50153 = C50150 / C49742;
    const double C50182 = C50181 / C49742;
    const double C49971 = C49969 / C49742;
    const double C50203 = C50200 / C49742;
    const double C50228 = C50227 / C49742;
    const double C50939 = C50886 - C50922;
    const double C50940 = C50890 - C50924;
    const double C50943 = C50895 - C50929;
    const double C50944 = C50904 - C50930;
    const double C50945 = C50906 - C50932;
    const double C50946 = C50913 - C50933;
    const double C50947 = C50908 - C50935;
    const double C50948 = C50917 - C50936;
    const double C24856 = C24810 + C24811;
    const double C24854 = C24806 + C24807;
    const double C27951 = C27914 + C27915;
    const double C27949 = C27910 + C27911;
    const double C8102 = C7920 * C270;
    const double C8096 = C7920 * C256;
    const double C8090 = C7920 * C280;
    const double C8084 = C7920 * C262;
    const double C8074 = C7920 * C271;
    const double C8068 = C7920 * C257;
    const double C8800 = C7920 * C791;
    const double C8794 = C7920 * C782;
    const double C9076 = C7920 * C989;
    const double C9070 = C7920 * C981;
    const double C9240 = C7920 * C1103;
    const double C9744 = C7920 * C1453;
    const double C9738 = C7920 * C1445;
    const double C11066 = C7920 * C404;
    const double C11060 = C7920 * C423;
    const double C11042 = C7920 * C399;
    const double C11036 = C7920 * C413;
    const double C11034 = C7920 * C412;
    const double C11028 = C7920 * C398;
    const double C12876 = C7920 * C1733;
    const double C12870 = C7920 * C1729;
    const double C17172 = C16990 * C270;
    const double C17166 = C16990 * C256;
    const double C17160 = C16990 * C280;
    const double C17154 = C16990 * C262;
    const double C17144 = C16990 * C271;
    const double C17138 = C16990 * C257;
    const double C17870 = C16990 * C791;
    const double C17864 = C16990 * C782;
    const double C18146 = C16990 * C989;
    const double C18140 = C16990 * C981;
    const double C18310 = C16990 * C1103;
    const double C18814 = C16990 * C1453;
    const double C18808 = C16990 * C1445;
    const double C34120 = C16990 * C404;
    const double C34114 = C16990 * C423;
    const double C34096 = C16990 * C399;
    const double C34090 = C16990 * C413;
    const double C34088 = C16990 * C412;
    const double C34082 = C16990 * C398;
    const double C35930 = C16990 * C1733;
    const double C35924 = C16990 * C1729;
    const double C49765 = C50610 - C49763;
    const double C2387 = C2341 + C2342;
    const double C2385 = C2337 + C2338;
    const double C5441 = C5396 + C5397;
    const double C5439 = C5392 + C5393;
    const double C19913 = C19890 + C19891;
    const double C19912 = C19888 + C19889;
    const double C19909 = C19882 + C19883;
    const double C19908 = C19880 + C19881;
    const double C19907 = C19878 + C19879;
    const double C19906 = C19876 + C19877;
    const double C19905 = C19874 + C19875;
    const double C19904 = C19872 + C19873;
    const double C20389 = C20368 + C20369;
    const double C20388 = C20366 + C20367;
    const double C20387 = C20364 + C20365;
    const double C20386 = C20362 + C20363;
    const double C20687 = C20676 + C20677;
    const double C20686 = C20674 + C20675;
    const double C22079 = C22060 + C22061;
    const double C22078 = C22058 + C22059;
    const double C22077 = C22056 + C22057;
    const double C22071 = C22044 + C22045;
    const double C22070 = C22042 + C22043;
    const double C22065 = C22030 + C22031;
    const double C22064 = C22028 + C22029;
    const double C22063 = C22024 + C22025;
    const double C22062 = C22022 + C22023;
    const double C23082 = C23074 + C23075;
    const double C24048 = C24041 + C24042;
    const double C24047 = C24039 + C24040;
    const double C8109 = C50937 * C275;
    const double C8099 = C50937 * C288;
    const double C8093 = C50937 * C268;
    const double C8087 = C50937 * C290;
    const double C8081 = C50937 * C274;
    const double C8079 = C50937 * C289;
    const double C8073 = C50937 * C269;
    const double C8437 = C50937 * C267;
    const double C8807 = C50937 * C786;
    const double C8797 = C50937 * C795;
    const double C8791 = C50937 * C785;
    const double C9081 = C50937 * C995;
    const double C9075 = C50937 * C987;
    const double C9245 = C50937 * C1109;
    const double C9239 = C50937 * C1101;
    const double C9749 = C50937 * C1459;
    const double C9743 = C50937 * C1451;
    const double C11071 = C50937 * C417;
    const double C11065 = C50937 * C432;
    const double C11049 = C50937 * C418;
    const double C11047 = C50937 * C407;
    const double C11041 = C50937 * C427;
    const double C11031 = C50937 * C431;
    const double C11025 = C50937 * C416;
    const double C11389 = C50937 * C408;
    const double C12873 = C50937 * C1743;
    const double C12867 = C50937 * C1739;
    const double C105 = (C50937 * C50605) / C49742 + (C50881 - C50920) / C49747;
    const double C8095 = C50938 * C267;
    const double C8083 = C50938 * C275;
    const double C8077 = C50938 * C288;
    const double C8071 = C50938 * C268;
    const double C8793 = C50938 * C786;
    const double C9073 = C50938 * C986;
    const double C9741 = C50938 * C1450;
    const double C11069 = C50938 * C418;
    const double C11045 = C50938 * C408;
    const double C11033 = C50938 * C427;
    const double C11027 = C50938 * C407;
    const double C12869 = C50938 * C1738;
    const double C106 =
        (C50938 * C50605) / C49742 + (2 * C50615 + C50937) / C49747;
    const double C107 = (C50605 * C50615) / C49751 + C50938 / C49747;
    const double C49826 = C50653 - C49823;
    const double C971 = (C50941 * C50700) / C49787 + (C50896 - C50925) / C49812;
    const double C972 =
        (C50942 * C50700) / C49787 + (2 * C50705 + C50941) / C49812;
    const double C973 = (C50700 * C50705) / C49791 + C50942 / C49812;
    const double C2398 = C2363 + C2364;
    const double C20128 = C20116 + C20117;
    const double C24867 = C24832 + C24833;
    const double C2390 = C2347 + C2348;
    const double C19914 = C19892 + C19893;
    const double C24859 = C24816 + C24817;
    const double C5452 = C5418 + C5419;
    const double C22420 = C22408 + C22409;
    const double C27954 = C27920 + C27921;
    const double C5443 = C5400 + C5401;
    const double C22069 = C22038 + C22039;
    const double C27966 = C27944 + C27945;
    const double C3126 = C3095 + C3096;
    const double C20392 = C20374 + C20375;
    const double C25571 = C25540 + C25541;
    const double C49929 = C49926 / C49742;
    const double C3573 = C2177 * C2564;
    const double C21870 = C19772 * C2564;
    const double C26002 = C49761 * C2564;
    const double C50409 = C50407 + C50402;
    const double C50007 = C50006 + C50002;
    const double C3562 = C50615 * C1100;
    const double C5989 = C2171 * C1100;
    const double C9237 = C50938 * C1100;
    const double C18307 = C16984 * C1100;
    const double C21865 = C50610 * C1100;
    const double C25991 = C50615 * C1100;
    const double C27933 = C50881 * C1100;
    const double C2394 = C2355 + C2356;
    const double C19916 = C19896 + C19897;
    const double C24863 = C24824 + C24825;
    const double C3130 = C3103 + C3104;
    const double C20394 = C20378 + C20379;
    const double C25575 = C25548 + C25549;
    const double C5460 = C5434 + C5435;
    const double C22072 = C22046 + C22047;
    const double C30355 = C30348 + C30349;
    const double C19910 = C19884 + C19885;
    const double C20688 = C20678 + C20679;
    const double C20390 = C20370 + C20371;
    const double C50155 = C50152 / C49742;
    const double C40556 = C40551 + C40552;
    const double C127 = 4 * (2 * C50245 + C49869 * C50247) +
                        C49869 * (3 * C50247 + C49869 * C50251);
    const double C263 = 2 * C50245 + C49869 * C50247 + C50251 * C50093;
    const double C264 = C49872 * (3 * C50247 + C49869 * C50251);
    const double C400 = C50085 * (3 * C50247 + C49869 * C50251);
    const double C405 = 2 * C50245 + C49869 * C50247 + C50251 * C50169;
    const double C783 = C50085 * C49872 * C50251;
    const double C980 =
        2 * C49872 * C50251 + C49872 * (C50251 + C50045 * C50093);
    const double C1094 = C49872 * C50251 + C49872 * C50045 * C50169;
    const double C1444 = C50085 * (C50251 + C50045 * C50093);
    const double C1728 =
        2 * C50085 * C50251 + C50085 * (C50251 + C50045 * C50169);
    const double C5990 = C2177 * C1095;
    const double C9234 = C7920 * C1095;
    const double C18304 = C16990 * C1095;
    const double C22254 = C19772 * C1095;
    const double C27934 = C49761 * C1095;
    const double C2332 =
        (-3 * (C49872 * C50366 + C49907 + C50364 * ce)) / C49787 +
        C49872 * ((-2 * C50366) / C49787 -
                  (C49872 * (C49872 * (C49872 * C49967 + C50040 * ce) + C49931 +
                             C49872 * C50040 * ce)) /
                      C49787 -
                  (C50367 * ce) / C49787) -
        ((2 * C50364 + C49872 * C50367) * ce) / C49787;
    const double C2565 = -((C49872 * (C49872 * C49967 + C50040 * ce) + C49931 +
                            C49872 * C50040 * ce) *
                               C50169 +
                           C49872 * C50366 + C49907 + C50364 * ce) /
                         C49787;
    const double C3088 =
        C50085 * ((-2 * C50366) / C49787 -
                  (C49872 * (C49872 * (C49872 * C49967 + C50040 * ce) + C49931 +
                             C49872 * C50040 * ce)) /
                      C49787 -
                  (C50367 * ce) / C49787);
    const double C5985 =
        (-2 * C50085 * C50366) / C49787 -
        (C50085 * ((C49872 * C49967 + C50040 * ce) * C50169 + C50366)) / C49787;
    const double C3399 = C2177 * C2330;
    const double C19902 = C19772 * C2330;
    const double C25836 = C49761 * C2330;
    const double C4085 = C2177 * C3086;
    const double C20384 = C19772 * C3086;
    const double C26506 = C49761 * C3086;
    const double C3395 = C2177 * C2325;
    const double C19900 = C19772 * C2325;
    const double C25832 = C49761 * C2325;
    const double C3569 = C2177 * C2559;
    const double C21868 = C19772 * C2559;
    const double C25998 = C49761 * C2559;
    const double C4081 = C2177 * C3081;
    const double C20382 = C19772 * C3081;
    const double C26502 = C49761 * C3081;
    const double C50393 = C50391 + C49912;
    const double C6408 = C2177 * C4490;
    const double C22052 = C19772 * C4490;
    const double C29172 = C49761 * C4490;
    const double C50023 = C50022 + C50017;
    const double C2328 = (3 * (C49996 + C50004 * C50093) +
                          C49872 * (2 * C50102 + C49872 * C50107)) /
                         C49742;
    const double C2562 = (C49996 + C50004 * C50093 + C50107 * C50169) / C49742;
    const double C3084 = (C50085 * (2 * C50102 + C49872 * C50107)) / C49742;
    const double C50132 = C50128 / C49880;
    const double C6405 = C50615 * C4492;
    const double C22051 = C50610 * C4492;
    const double C29169 = C50615 * C4492;
    const double C7299 =
        (4 * (2 * C50085 * C50004 + C50085 * C50446) +
         C50085 *
             (3 * C50446 + C50085 * (2 * C50085 * C50019 +
                                     C50085 * (C50019 + C50041 * C50169)))) /
        C49742;
    const double C7317 = C7308 + C7309;
    const double C39328 = C39322 + C39323;
    const double C46589 = C46580 + C46581;
    const double C3385 = 4 * (2 * C50349 + C49872 * C50352) +
                         C49872 * (3 * C50352 + C49872 * C50408);
    const double C3553 = 2 * C50349 + C49872 * C50352 + C50408 * C50169;
    const double C4071 = C50085 * (3 * C50352 + C49872 * C50408);
    const double C21289 =
        2 * C50085 * C50408 + C50085 * (C50408 + C50468 * C50169);
    const double C23080 = C23068 + C23069;
    const double C50469 = C50467 + C50461;
    const double C24033 =
        4 * ((-2 * C50085 * C50401) / C49787 - (C50085 * C50486) / C49787) +
        C50085 *
            ((-3 * C50486) / C49787 +
             C50085 * ((-2 * C50085 * C50460) / C49787 -
                       (C50085 *
                        ((C49872 * C49961 + C50032 * ce) * C50169 + C50460)) /
                           C49787));
    const double C40544 =
        5 * (3 * C50586 + C50085 * C50601) +
        C50085 * (4 * C50601 +
                  C50085 * (3 * C50599 +
                            C50085 * (2 * C50085 * C50011 +
                                      C50085 * (C50011 + C50032 * C50169))));
    const double C49974 = C49960 - C49972;
    const double C50048 = C50046 + C50039;
    const double C50134 = C49872 * C50131;
    const double C4488 =
        (2 * C50085 * C50107 + C50085 * (C50107 + C50131 * C50169)) / C49742;
    const double C50207 = C49872 * C50204;
    const double C21291 =
        (2 * C50085 * C50154 + C50085 * (C50154 + C50204 * C50169)) / C49742;
    const double C140 =
        4 * ((-2 * C49894) / C49787 - (C49869 * C49907) / C49787) +
        C49869 * ((-3 * C49907) / C49787 + C49869 * C49938);
    const double C281 = (-2 * C49894) / C49787 - (C49869 * C49907) / C49787 +
                        C49872 * (C49872 * C49938 - (C50251 * ce) / C49787) -
                        (C49872 * C50251 * ce) / C49787;
    const double C283 = C49872 * ((-3 * C49907) / C49787 + C49869 * C49938) -
                        ((3 * C50247 + C49869 * C50251) * ce) / C49787;
    const double C414 = C50085 * ((-3 * C49907) / C49787 + C49869 * C49938);
    const double C424 =
        (-2 * C49894) / C49787 - (C49869 * C49907) / C49787 + C49938 * C50169;
    const double C792 = C50085 * (C49872 * C49938 - (C50251 * ce) / C49787);
    const double C49968 = C49965 - C49945;
    const double C40545 =
        5 * ((-3 * C50443) / C49787 + C50085 * C50498) +
        C50085 * (4 * C50498 +
                  C50085 * ((-3 * C50494) / C49787 +
                            C50085 * ((-2 * C50085 * C49925) / C49787 -
                                      (C50085 * (C49961 * C50169 + C49925)) /
                                          C49787)));
    const double C20567 = C50610 * C3387;
    const double C20683 = C50610 * C3555;
    const double C21023 = C50610 * C4073;
    const double C50208 = C50205 - C49945;
    const double C50257 = C50255 + C50256;
    const double C3384 = 4 * (2 * C50356 + C49872 * C50359) +
                         C49872 * (3 * C50359 + C49872 * C50394);
    const double C3552 = 2 * C50356 + C49872 * C50359 + C50394 * C50169;
    const double C4070 = C50085 * (3 * C50359 + C49872 * C50394);
    const double C50472 = C50458 + C50470;
    const double C49910 = C49909 - C49900;
    const double C50100 = C50099 - C50095;
    const double C49937 = C49935 - C49919;
    const double C50156 = C50153 - C50146;
    const double C50183 = C50182 - C49913;
    const double C49973 = C49971 - C49953;
    const double C50206 = C50203 - C50195;
    const double C50229 = C50228 - C49945;
    const double C112 = (C50939 * C50630) / C49787 + (C50888 - C50923) / C49812;
    const double C113 =
        (C50940 * C50630) / C49787 + (2 * C50640 + C50939) / C49812;
    const double C114 = (C50630 * C50640) / C49791 + C50940 / C49812;
    const double C1724 =
        (C50943 * C50728) / C49787 + (C50897 - C50928) / C49812;
    const double C1725 =
        (C50944 * C50728) / C49787 + (2 * C50733 + C50943) / C49812;
    const double C1726 = (C50728 * C50733) / C49791 + C50944 / C49812;
    const double C19768 =
        (C50945 * C50800) / C49742 + (C50909 - C50931) / C49747;
    const double C19769 =
        (C50946 * C50800) / C49742 + (2 * C50805 + C50945) / C49747;
    const double C19770 = (C50800 * C50805) / C49751 + C50946 / C49747;
    const double C39117 =
        (C50947 * C50826) / C49742 + (C50910 - C50934) / C49747;
    const double C39118 =
        (C50948 * C50826) / C49742 + (2 * C50831 + C50947) / C49747;
    const double C39119 = (C50826 * C50831) / C49751 + C50948 / C49747;
    const double C8116 = C8068 + C8069;
    const double C11074 = C11028 + C11029;
    const double C17186 = C17138 + C17139;
    const double C34128 = C34082 + C34083;
    const double C49766 = C49765 * ae;
    const double C2176 = (-C49743 / C49742) / C49747 - (C49765 * be) / C49742;
    const double C22629 = C20389 * C50705;
    const double C23055 = C20389 * C50705;
    const double C23604 = C20389 * C50942;
    const double C23600 = C20389 * C1210;
    const double C23920 = C20389 * C249;
    const double C23916 = C20389 * C250;
    const double C31395 = C20389 * C50653;
    const double C31897 = C20389 * C50896;
    const double C32295 = C20389 * C898;
    const double C32793 = C20389 * C50941;
    const double C33091 = C20389 * C248;
    const double C22628 = C20388 * C541;
    const double C23054 = C20388 * C904;
    const double C23599 = C20388 * C1215;
    const double C23919 = C20388 * C254;
    const double C23915 = C20388 * C255;
    const double C31394 = C20388 * C121;
    const double C31896 = C20388 * C540;
    const double C32294 = C20388 * C903;
    const double C33090 = C20388 * C253;
    const double C22027 = C20387 * C50653;
    const double C22627 = C20387 * C50896;
    const double C22625 = C20387 * C50705;
    const double C23053 = C20387 * C898;
    const double C23051 = C20387 * C50705;
    const double C23602 = C20387 * C50941;
    const double C23598 = C20387 * C50942;
    const double C23918 = C20387 * C248;
    const double C23914 = C20387 * C249;
    const double C22026 = C20386 * C121;
    const double C22626 = C20386 * C540;
    const double C22624 = C20386 * C541;
    const double C23052 = C20386 * C903;
    const double C23050 = C20386 * C904;
    const double C23917 = C20386 * C253;
    const double C23913 = C20386 * C254;
    const double C22033 = C20687 * C50653;
    const double C22635 = C20687 * C50896;
    const double C22633 = C20687 * C50705;
    const double C23061 = C20687 * C898;
    const double C23059 = C20687 * C50705;
    const double C23614 = C20687 * C50941;
    const double C23610 = C20687 * C50942;
    const double C23930 = C20687 * C248;
    const double C23926 = C20687 * C249;
    const double C22032 = C20686 * C121;
    const double C22634 = C20686 * C540;
    const double C22632 = C20686 * C541;
    const double C23060 = C20686 * C903;
    const double C23058 = C20686 * C904;
    const double C23929 = C20686 * C253;
    const double C23925 = C20686 * C254;
    const double C22097 = C22079 * C121;
    const double C23066 = C22079 * C903;
    const double C24542 = C22079 * C540;
    const double C40473 = C22079 * C253;
    const double C22096 = C22078 * C50653;
    const double C23065 = C22078 * C898;
    const double C24541 = C22078 * C50896;
    const double C40272 = C22078 * C50941;
    const double C40474 = C22078 * C248;
    const double C22095 = C22077 * C121;
    const double C23071 = C22077 * C903;
    const double C23064 = C22077 * C904;
    const double C24546 = C22077 * C540;
    const double C24540 = C22077 * C541;
    const double C40475 = C22077 * C254;
    const double C22089 = C22071 * C121;
    const double C22640 = C22071 * C540;
    const double C23435 = C22071 * C903;
    const double C22088 = C22070 * C50653;
    const double C22639 = C22070 * C50896;
    const double C23434 = C22070 * C898;
    const double C22083 = C22065 * C50653;
    const double C22631 = C22065 * C50896;
    const double C23057 = C22065 * C898;
    const double C23608 = C22065 * C50941;
    const double C23924 = C22065 * C248;
    const double C22082 = C22064 * C121;
    const double C22630 = C22064 * C540;
    const double C23056 = C22064 * C903;
    const double C23923 = C22064 * C253;
    const double C22081 = C22063 * C50653;
    const double C22623 = C22063 * C50896;
    const double C23049 = C22063 * C898;
    const double C23596 = C22063 * C50941;
    const double C23912 = C22063 * C248;
    const double C22080 = C22062 * C121;
    const double C22622 = C22062 * C540;
    const double C23048 = C22062 * C903;
    const double C23911 = C22062 * C253;
    const double C24043 = C23082 * C121;
    const double C39934 = C23082 * C904;
    const double C40888 = C23082 * C541;
    const double C24051 = C24048 * C50653;
    const double C39935 = C24048 * C898;
    const double C40889 = C24048 * C50896;
    const double C24050 = C24047 * C121;
    const double C39936 = C24047 * C903;
    const double C40890 = C24047 * C540;
    const double C49828 = C49826 * ce;
    const double C22424 = C22420 * C121;
    const double C22087 = C22069 * C121;
    const double C22648 = C22069 * C540;
    const double C23443 = C22069 * C903;
    const double C22041 = C20392 * C121;
    const double C22644 = C20392 * C540;
    const double C22638 = C20392 * C541;
    const double C23439 = C20392 * C903;
    const double C23433 = C20392 * C904;
    const double C49932 = C49929 - C49913;
    const double C3389 =
        4 * ((-2 * C50351) / C49787 - (C49872 * C50409) / C49787 -
             (C50352 * ce) / C49787) +
        C49872 *
            ((-3 * C50409) / C49787 +
             C49872 * ((-2 * C50401) / C49787 -
                       (C49872 * (C49872 * (C49872 * C49925 + C50011 * ce) +
                                  C49903 + C49872 * C50011 * ce)) /
                           C49787 -
                       (C50403 * ce) / C49787) -
             (C50408 * ce) / C49787) -
        ((3 * C50352 + C49872 * C50408) * ce) / C49787;
    const double C3557 = (-2 * C50351) / C49787 - (C49872 * C50409) / C49787 -
                         (C50352 * ce) / C49787 +
                         ((-2 * C50401) / C49787 -
                          (C49872 * (C49872 * (C49872 * C49925 + C50011 * ce) +
                                     C49903 + C49872 * C50011 * ce)) /
                              C49787 -
                          (C50403 * ce) / C49787) *
                             C50169;
    const double C4075 =
        C50085 *
        ((-3 * C50409) / C49787 +
         C49872 * ((-2 * C50401) / C49787 -
                   (C49872 * (C49872 * (C49872 * C49925 + C50011 * ce) +
                              C49903 + C49872 * C50011 * ce)) /
                       C49787 -
                   (C50403 * ce) / C49787) -
         (C50408 * ce) / C49787);
    const double C4487 = (-2 * C50085 * C50409) / C49787 -
                         (C50085 * ((C49872 * (C49872 * C49925 + C50011 * ce) +
                                     C49903 + C49872 * C50011 * ce) *
                                        C50169 +
                                    C50409)) /
                             C49787;
    const double C138 = (3 * (C49992 + C49869 * C49996 + C50245 * ae) +
                         C49869 * (2 * C49996 + C49869 * C50007 + C50247 * ae) +
                         (2 * C50245 + C49869 * C50247) * ae) /
                        C49742;
    const double C266 =
        (C49872 * (2 * C49996 + C49869 * C50007 + C50247 * ae)) / C49742;
    const double C276 =
        (C49992 + C49869 * C49996 + C50245 * ae + C50007 * C50093) / C49742;
    const double C409 =
        (C50085 * (2 * C49996 + C49869 * C50007 + C50247 * ae)) / C49742;
    const double C419 =
        (C49992 + C49869 * C49996 + C50245 * ae + C50007 * C50169) / C49742;
    const double C787 = (C50085 * C49872 * C50007) / C49742;
    const double C3577 = C3561 + C3562;
    const double C21872 = C21864 + C21865;
    const double C26006 = C25990 + C25991;
    const double C22642 = C20394 * C541;
    const double C23437 = C20394 * C904;
    const double C31397 = C20394 * C121;
    const double C31902 = C20394 * C540;
    const double C32644 = C20394 * C903;
    const double C22090 = C22072 * C121;
    const double C39668 = C22072 * C540;
    const double C40171 = C22072 * C903;
    const double C22636 = C20688 * C541;
    const double C23062 = C20688 * C904;
    const double C23611 = C20688 * C1215;
    const double C23931 = C20688 * C254;
    const double C23927 = C20688 * C255;
    const double C31401 = C20688 * C121;
    const double C32300 = C20688 * C903;
    const double C33684 = C20688 * C540;
    const double C23605 = C20390 * C1215;
    const double C23921 = C20390 * C255;
    const double C31898 = C20390 * C541;
    const double C32296 = C20390 * C904;
    const double C33092 = C20390 * C254;
    const double C50157 = C50155 - C49913;
    const double C40558 = C40556 * C121;
    const double C2725 = C2177 * C263;
    const double C8104 = C7920 * C263;
    const double C17174 = C16990 * C263;
    const double C25182 = C49761 * C263;
    const double C8432 = C7920 * C264;
    const double C17502 = C16990 * C264;
    const double C11392 = C7920 * C400;
    const double C34446 = C16990 * C400;
    const double C5776 = C2177 * C405;
    const double C11052 = C7920 * C405;
    const double C34106 = C16990 * C405;
    const double C45098 = C49761 * C405;
    const double C8802 = C7920 * C783;
    const double C14082 = C2177 * C783;
    const double C17872 = C16990 * C783;
    const double C28162 = C49761 * C783;
    const double C50395 = C50393 + C50388;
    const double C50024 = C49869 * C50023;
    const double C50029 = 3 * C50023;
    const double C50112 = C50023 * ce;
    const double C50110 = C49872 * C50023;
    const double C985 =
        (2 * C49872 * C50007 + C49872 * (C50007 + C50023 * C50093)) / C49742;
    const double C1449 = (C50085 * (C50007 + C50023 * C50093)) / C49742;
    const double C1737 =
        (2 * C50085 * C50007 + C50085 * (C50007 + C50023 * C50169)) / C49742;
    const double C3396 = C50615 * C2328;
    const double C19901 = C50610 * C2328;
    const double C25833 = C50615 * C2328;
    const double C3570 = C50615 * C2562;
    const double C21869 = C50610 * C2562;
    const double C25999 = C50615 * C2562;
    const double C4082 = C50615 * C3084;
    const double C20383 = C50610 * C3084;
    const double C26503 = C50615 * C3084;
    const double C6414 = C6404 + C6405;
    const double C22074 = C22050 + C22051;
    const double C29176 = C29168 + C29169;
    const double C39330 = C39328 * C121;
    const double C20566 = C19772 * C3385;
    const double C20682 = C19772 * C3553;
    const double C21022 = C19772 * C4071;
    const double C23086 = C23080 * C904;
    const double C24544 = C23080 * C541;
    const double C33194 = C23080 * C121;
    const double C40275 = C23080 * C1215;
    const double C40477 = C23080 * C255;
    const double C50471 = C49872 * C50469;
    const double C23045 =
        (-3 * (C50469 * C50169 + C50409)) / C49787 +
        C50085 * ((-2 * C50085 * C50469) / C49787 -
                  (C50085 * ((C49872 * (C49872 * C49961 + C50032 * ce) +
                              C49925 + C49872 * C50032 * ce) *
                                 C50169 +
                             C50469)) /
                      C49787);
    const double C49976 = C49869 * C49974;
    const double C988 =
        2 * (C49872 * C49938 - (C50251 * ce) / C49787) +
        C49872 * (C49938 + C49872 * (C49872 * C49974 - (C50045 * ce) / C49787) -
                  (C49872 * C50045 * ce) / C49787) -
        ((C50251 + C50045 * C50093) * ce) / C49787;
    const double C1102 = C49872 * C49938 - (C50251 * ce) / C49787 +
                         (C49872 * C49974 - (C50045 * ce) / C49787) * C50169;
    const double C1452 =
        C50085 * (C49938 + C49872 * (C49872 * C49974 - (C50045 * ce) / C49787) -
                  (C49872 * C50045 * ce) / C49787);
    const double C1732 =
        2 * C50085 * C49938 + C50085 * (C49938 + C49974 * C50169);
    const double C50049 = C49869 * C50048;
    const double C50113 = C50048 * C50093;
    const double C5385 =
        (3 * (C50007 + C50023 * C50169) +
         C50085 * (2 * C50085 * C50023 + C50085 * (C50023 + C50048 * C50169))) /
        C49742;
    const double C50137 = C50130 + C50134;
    const double C50210 = C50190 + C50207;
    const double C2729 = C2177 * C281;
    const double C8110 = C7920 * C281;
    const double C17180 = C16990 * C281;
    const double C25186 = C49761 * C281;
    const double C8438 = C7920 * C283;
    const double C17508 = C16990 * C283;
    const double C11398 = C7920 * C414;
    const double C34452 = C16990 * C414;
    const double C5780 = C2177 * C424;
    const double C11058 = C7920 * C424;
    const double C34112 = C16990 * C424;
    const double C45102 = C49761 * C424;
    const double C8808 = C7920 * C792;
    const double C14086 = C2177 * C792;
    const double C17878 = C16990 * C792;
    const double C28166 = C49761 * C792;
    const double C128 = 5 * (3 * C50247 + C49869 * C50251) +
                        C49869 * (4 * C50251 + C49869 * C50257);
    const double C265 = 3 * C50247 + C49869 * C50251 + C50257 * C50093;
    const double C406 = 3 * C50247 + C49869 * C50251 + C50257 * C50169;
    const double C542 = C49872 * (4 * C50251 + C49869 * C50257);
    const double C646 = C50085 * (4 * C50251 + C49869 * C50257);
    const double C784 = C50085 * C49872 * C50257;
    const double C20561 = 5 * (3 * C50352 + C49872 * C50408) +
                          C49872 * (4 * C50408 + C49872 * C50472);
    const double C20669 = 3 * C50352 + C49872 * C50408 + C50472 * C50169;
    const double C21017 = C50085 * (4 * C50408 + C49872 * C50472);
    const double C147 =
        3 * ((-(ae * C49894) / C49787) / C49742 - C49891 / C49880 +
             C49869 * C49910) +
        (((-2 * C49894) / C49787 - (C49869 * C49907) / C49787) * ae) / C49742 +
        C49869 *
            (2 * C49910 - (ae * C49907) / C49880 +
             C49869 *
                 ((-(ae * C49869 * C49903) / C49787) / C49742 -
                  C49902 / C49880 +
                  C49869 * ((-(C49869 * std::pow(C49874, 6) * bs[6] * C49885) /
                             C49787) /
                                C49742 -
                            (ae * C49903) / C49880)));
    const double C287 =
        C49872 * ((-(ae * C49894) / C49787) / C49742 - C49891 / C49880 +
                  C49869 * C49910) -
        ((C49881 * C49877 * C49982 + C49869 * (C49869 * C49986 + C49983 * ae) +
          C49869 * C49983 * ae) *
         ce) /
            C49880;
    const double C291 = (-(C49869 * C49891) / C49787) / C49742 -
                        (ae * C49884) / C49880 -
                        (C49872 * C49996 * ce) / C49880 +
                        C49872 * (C49872 * C49910 - (C49996 * ce) / C49880);
    const double C428 = (zP - zQ) * ((-(ae * C49894) / C49787) / C49742 -
                                     C49891 / C49880 + C49869 * C49910);
    const double C433 = (-(C49869 * C49891) / C49787) / C49742 -
                        (ae * C49884) / C49880 + C49910 * std::pow(zP - zQ, 2);
    const double C796 = (zP - zQ) * (C49872 * C49910 - (C49996 * ce) / C49880);
    const double C2333 =
        3 * ((-(C50090 * ce) / C49787) / C49742 - C49891 / C49880 +
             C49872 * C50100) -
        ((2 * C50090 + C49872 * C50098) * ce) / C49880 +
        C49872 *
            (2 * C50100 - (C50098 * ce) / C49880 +
             C49872 * ((-(C49872 * C50001 * ce) / C49787) / C49742 - C49913 +
                       C49872 * ((-(C49872 * C49923) / C49787) / C49742 -
                                 (C50001 * ce) / C49880)));
    const double C2567 = (-(C50090 * ce) / C49787) / C49742 - C49891 / C49880 +
                         C49872 * C50100 +
                         ((-(C49872 * C50001 * ce) / C49787) / C49742 - C49913 +
                          C49872 * ((-(C49872 * C49923) / C49787) / C49742 -
                                    (C50001 * ce) / C49880)) *
                             std::pow(C50085, 2);
    const double C3089 =
        C50085 *
        (2 * C50100 - (C50098 * ce) / C49880 +
         C49872 * ((-(C49872 * C50001 * ce) / C49787) / C49742 - C49913 +
                   C49872 * ((-(C49872 * C49923) / C49787) / C49742 -
                             (C50001 * ce) / C49880)));
    const double C49939 = C49869 * C49937;
    const double C49942 = 2 * C49937;
    const double C50103 = C49872 * C49937;
    const double C50135 = C49937 - C50132;
    const double C994 =
        2 * (C49872 * C49910 - (C49996 * ce) / C49880) -
        ((C49996 + C50004 * std::pow(C49872, 2)) * ce) / C49880 +
        C49872 * (C49910 - (C49872 * C50004 * ce) / C49880 +
                  C49872 * (C49872 * C49937 - (C50004 * ce) / C49880));
    const double C1108 =
        C49872 * C49910 - (C49996 * ce) / C49880 +
        (C49872 * C49937 - (C50004 * ce) / C49880) * std::pow(zP - zQ, 2);
    const double C1458 =
        (zP - zQ) * (C49910 - (C49872 * C50004 * ce) / C49880 +
                     C49872 * (C49872 * C49937 - (C50004 * ce) / C49880));
    const double C1742 =
        2 * C50085 * C49910 + C50085 * (C49910 + C49937 * std::pow(C50085, 2));
    const double C50158 = C49872 * C50156;
    const double C50185 = 2 * C50156;
    const double C4497 =
        2 * C50085 * C50100 + C50085 * (C50100 + C50156 * std::pow(C50085, 2));
    const double C6396 =
        3 * (C50100 + C50156 * C50169) +
        C50085 * (2 * C50085 * C50156 +
                  C50085 * (C50156 + ((-(C49872 * C49959) / C49787) / C49742 -
                                      (C50012 * ce) / C49880) *
                                         C50169));
    const double C7302 =
        4 * ((-2 * C50085 * C49902) / C49880 + C50085 * C50183) +
        C50085 * (3 * C50183 +
                  C50085 * ((-2 * C50085 * C49923) / C49880 +
                            C50085 * ((-(C49959 * C50169) / C49787) / C49742 -
                                      C49945)));
    const double C49975 = C49869 * C49973;
    const double C50125 = C49872 * C49973;
    const double C50176 = C49973 * C50169;
    const double C5387 =
        3 * (C49910 + C49937 * C50169) +
        C50085 * (2 * C50085 * C49937 + C50085 * (C49937 + C49973 * C50169));
    const double C50209 = C49872 * C50206;
    const double C50219 = C50206 * C50169;
    const double C50230 = C50085 * C50229;
    const double C49767 = C49766 / C49742;
    const double C2383 = C2176 * C990;
    const double C2379 = C2176 * C982;
    const double C2375 = C2176 * C279;
    const double C2371 = C2176 * C261;
    const double C2365 = C2176 * C272;
    const double C2361 = C2176 * C258;
    const double C2357 = C2176 * C991;
    const double C2353 = C2176 * C983;
    const double C2349 = C2176 * C278;
    const double C2345 = C2176 * C260;
    const double C2343 = C2176 * C273;
    const double C2339 = C2176 * C259;
    const double C2731 = C2176 * C280;
    const double C2727 = C2176 * C262;
    const double C2723 = C2176 * C271;
    const double C2719 = C2176 * C257;
    const double C3123 = C2176 * C1454;
    const double C3119 = C2176 * C1446;
    const double C3115 = C2176 * C790;
    const double C3111 = C2176 * C781;
    const double C3105 = C2176 * C1455;
    const double C3101 = C2176 * C1447;
    const double C3097 = C2176 * C789;
    const double C3093 = C2176 * C780;
    const double C3401 = C2176 * C2329;
    const double C3397 = C2176 * C2324;
    const double C3575 = C2176 * C2563;
    const double C3571 = C2176 * C2558;
    const double C3567 = C2176 * C1105;
    const double C3563 = C2176 * C1097;
    const double C4087 = C2176 * C3085;
    const double C4083 = C2176 * C3080;
    const double C5436 = C2176 * C1731;
    const double C5432 = C2176 * C1735;
    const double C5426 = C2176 * C1734;
    const double C5422 = C2176 * C1730;
    const double C5420 = C2176 * C397;
    const double C5416 = C2176 * C411;
    const double C5412 = C2176 * C403;
    const double C5408 = C2176 * C422;
    const double C5402 = C2176 * C421;
    const double C5398 = C2176 * C402;
    const double C5394 = C2176 * C415;
    const double C5390 = C2176 * C401;
    const double C5778 = C2176 * C423;
    const double C5774 = C2176 * C404;
    const double C5770 = C2176 * C412;
    const double C5766 = C2176 * C398;
    const double C5992 = C2176 * C1104;
    const double C5988 = C2176 * C1096;
    const double C6406 = C2176 * C4491;
    const double C6402 = C2176 * C4485;
    const double C7310 = C2176 * C5382;
    const double C7306 = C2176 * C5377;
    const double C14088 = C2176 * C791;
    const double C14084 = C2176 * C782;
    const double C22066 = C22032 + C22033;
    const double C24539 = C22634 + C22635;
    const double C23079 = C23060 + C23061;
    const double C24038 = C22096 + C22097;
    const double C39319 = C22097 + C22096;
    const double C39933 = C23066 + C23065;
    const double C40887 = C24542 + C24541;
    const double C22098 = C22082 + C22083;
    const double C24538 = C22630 + C22631;
    const double C23078 = C23056 + C23057;
    const double C40549 = C24051 + C24050;
    const double C49830 = C49828 / C49787;
    const double C20568 = C19772 * C3389;
    const double C20684 = C19772 * C3557;
    const double C21024 = C19772 * C4075;
    const double C23072 = C19772 * C4487;
    const double C2718 = C50615 * C266;
    const double C8097 = C7915 * C266;
    const double C8435 = C50938 * C266;
    const double C17167 = C16985 * C266;
    const double C17505 = C16984 * C266;
    const double C25175 = C50615 * C266;
    const double C2370 = C50615 * C276;
    const double C2728 = C2171 * C276;
    const double C8107 = C50938 * C276;
    const double C8085 = C7915 * C276;
    const double C17177 = C16984 * C276;
    const double C17155 = C16985 * C276;
    const double C20121 = C50610 * C276;
    const double C24839 = C50615 * C276;
    const double C25185 = C50881 * C276;
    const double C5769 = C50615 * C409;
    const double C11043 = C7915 * C409;
    const double C11391 = C50938 * C409;
    const double C28371 = C50615 * C409;
    const double C34097 = C16985 * C409;
    const double C34445 = C16984 * C409;
    const double C5411 = C50615 * C419;
    const double C5775 = C2171 * C419;
    const double C11067 = C7915 * C419;
    const double C11051 = C50938 * C419;
    const double C22415 = C50610 * C419;
    const double C27927 = C50615 * C419;
    const double C34121 = C16985 * C419;
    const double C34105 = C16984 * C419;
    const double C45097 = C50881 * C419;
    const double C3110 = C50615 * C787;
    const double C8805 = C50938 * C787;
    const double C8795 = C7915 * C787;
    const double C14085 = C2171 * C787;
    const double C17875 = C16984 * C787;
    const double C17865 = C16985 * C787;
    const double C22251 = C50610 * C787;
    const double C25555 = C50615 * C787;
    const double C28165 = C50881 * C787;
    const double C22035 = C21872 * C121;
    const double C22652 = C21872 * C540;
    const double C22646 = C21872 * C541;
    const double C23447 = C21872 * C903;
    const double C23441 = C21872 * C904;
    const double C3388 =
        4 * ((-2 * C50358) / C49787 - (C49872 * C50395) / C49787 -
             (C50359 * ce) / C49787) +
        C49872 *
            ((-3 * C50395) / C49787 +
             C49872 *
                 ((-2 * C50387) / C49787 -
                  (C49872 * (C49872 * (C49872 * C49869 * C49961 + C50036 * ce) +
                             C49944 + C49872 * C50036 * ce)) /
                      C49787 -
                  (C50389 * ce) / C49787) -
             (C50394 * ce) / C49787) -
        ((3 * C50359 + C49872 * C50394) * ce) / C49787;
    const double C3556 =
        (-2 * C50358) / C49787 - (C49872 * C50395) / C49787 -
        (C50359 * ce) / C49787 +
        ((-2 * C50387) / C49787 -
         (C49872 * (C49872 * (C49872 * C49869 * C49961 + C50036 * ce) + C49944 +
                    C49872 * C50036 * ce)) /
             C49787 -
         (C50389 * ce) / C49787) *
            C50169;
    const double C4074 =
        C50085 *
        ((-3 * C50395) / C49787 +
         C49872 *
             ((-2 * C50387) / C49787 -
              (C49872 * (C49872 * (C49872 * C49869 * C49961 + C50036 * ce) +
                         C49944 + C49872 * C50036 * ce)) /
                  C49787 -
              (C50389 * ce) / C49787) -
         (C50394 * ce) / C49787);
    const double C4486 =
        (-2 * C50085 * C50395) / C49787 -
        (C50085 * ((C49872 * (C49872 * C49869 * C49961 + C50036 * ce) + C49944 +
                    C49872 * C50036 * ce) *
                       C50169 +
                   C50395)) /
            C49787;
    const double C50025 = C50009 + C50024;
    const double C50114 = C50112 / C49880;
    const double C1099 = (C49872 * C50007 + C50110 * C50169) / C49742;
    const double C5984 =
        (2 * C50085 * C50110 + C50085 * (C50110 + C49872 * C50048 * C50169)) /
        C49742;
    const double C2378 = C50615 * C985;
    const double C9071 = C7915 * C985;
    const double C18141 = C16985 * C985;
    const double C20125 = C50610 * C985;
    const double C24847 = C50615 * C985;
    const double C3118 = C50615 * C1449;
    const double C9739 = C7915 * C1449;
    const double C18809 = C16985 * C1449;
    const double C25563 = C50615 * C1449;
    const double C31549 = C50610 * C1449;
    const double C5425 = C50615 * C1737;
    const double C12871 = C7915 * C1737;
    const double C35925 = C16985 * C1737;
    const double C39529 = C50610 * C1737;
    const double C44787 = C50615 * C1737;
    const double C3403 = C3395 + C3396;
    const double C19918 = C19900 + C19901;
    const double C25840 = C25832 + C25833;
    const double C3581 = C3569 + C3570;
    const double C21874 = C21868 + C21869;
    const double C26010 = C25998 + C25999;
    const double C4089 = C4081 + C4082;
    const double C20396 = C20382 + C20383;
    const double C26510 = C26502 + C26503;
    const double C22092 = C22074 * C121;
    const double C39666 = C22074 * C541;
    const double C40169 = C22074 * C904;
    const double C20570 = C20566 + C20567;
    const double C20690 = C20682 + C20683;
    const double C21026 = C21022 + C21023;
    const double C50473 = C50471 / C49787;
    const double C49978 = C49954 + C49976;
    const double C50050 = C50030 + C50049;
    const double C50115 = C50023 + C50113;
    const double C3386 = (4 * (2 * C50102 + C49872 * C50107) +
                          C49872 * (3 * C50107 + C49872 * C50137)) /
                         C49742;
    const double C3554 =
        (2 * C50102 + C49872 * C50107 + C50137 * C50169) / C49742;
    const double C4072 = (C50085 * (3 * C50107 + C49872 * C50137)) / C49742;
    const double C20562 = (5 * (3 * C50098 + C49872 * C50154) +
                           C49872 * (4 * C50154 + C49872 * C50210)) /
                          C49742;
    const double C20670 =
        (3 * C50098 + C49872 * C50154 + C50210 * C50169) / C49742;
    const double C21018 = (C50085 * (4 * C50154 + C49872 * C50210)) / C49742;
    const double C2368 = C50615 * C287;
    const double C2724 = C2171 * C287;
    const double C8101 = C50938 * C287;
    const double C8075 = C7915 * C287;
    const double C8443 = C50937 * C287;
    const double C17171 = C16984 * C287;
    const double C17145 = C16985 * C287;
    const double C17513 = C16983 * C287;
    const double C20119 = C50610 * C287;
    const double C24837 = C50615 * C287;
    const double C25181 = C50881 * C287;
    const double C2376 = C2171 * C291;
    const double C2352 = C50615 * C291;
    const double C8115 = C50937 * C291;
    const double C8089 = C50938 * C291;
    const double C17185 = C16983 * C291;
    const double C17159 = C16984 * C291;
    const double C19895 = C50610 * C291;
    const double C24845 = C50881 * C291;
    const double C24821 = C50615 * C291;
    const double C5415 = C50615 * C428;
    const double C5771 = C2171 * C428;
    const double C11039 = C50938 * C428;
    const double C11035 = C7915 * C428;
    const double C11395 = C50937 * C428;
    const double C22411 = C50610 * C428;
    const double C27917 = C50615 * C428;
    const double C28373 = C50881 * C428;
    const double C34093 = C16984 * C428;
    const double C34089 = C16985 * C428;
    const double C34449 = C16983 * C428;
    const double C5409 = C2171 * C433;
    const double C5405 = C50615 * C433;
    const double C11063 = C50938 * C433;
    const double C11055 = C50937 * C433;
    const double C22037 = C50610 * C433;
    const double C27941 = C50615 * C433;
    const double C27929 = C50881 * C433;
    const double C34117 = C16984 * C433;
    const double C34109 = C16983 * C433;
    const double C3116 = C2171 * C796;
    const double C3100 = C50615 * C796;
    const double C8813 = C50937 * C796;
    const double C8799 = C50938 * C796;
    const double C17883 = C16983 * C796;
    const double C17869 = C16984 * C796;
    const double C20377 = C50610 * C796;
    const double C25561 = C50881 * C796;
    const double C25545 = C50615 * C796;
    const double C3402 = C2171 * C2333;
    const double C19887 = C50610 * C2333;
    const double C25839 = C50881 * C2333;
    const double C3576 = C2171 * C2567;
    const double C20681 = C50610 * C2567;
    const double C26005 = C50881 * C2567;
    const double C4088 = C2171 * C3089;
    const double C20373 = C50610 * C3089;
    const double C26509 = C50881 * C3089;
    const double C49940 = C49932 + C49939;
    const double C49957 = C49942 - C49950;
    const double C50108 = C50103 - C50106;
    const double C2384 = C2171 * C994;
    const double C2360 = C50615 * C994;
    const double C9079 = C50938 * C994;
    const double C18149 = C16984 * C994;
    const double C19899 = C50610 * C994;
    const double C24853 = C50881 * C994;
    const double C24829 = C50615 * C994;
    const double C3566 = C50615 * C1108;
    const double C5993 = C2171 * C1108;
    const double C9243 = C50938 * C1108;
    const double C18313 = C16984 * C1108;
    const double C21867 = C50610 * C1108;
    const double C25995 = C50615 * C1108;
    const double C27937 = C50881 * C1108;
    const double C3124 = C2171 * C1458;
    const double C3108 = C50615 * C1458;
    const double C9747 = C50938 * C1458;
    const double C18817 = C16984 * C1458;
    const double C20381 = C50610 * C1458;
    const double C25569 = C50881 * C1458;
    const double C25553 = C50615 * C1458;
    const double C5431 = C50615 * C1742;
    const double C5427 = C2171 * C1742;
    const double C12875 = C50938 * C1742;
    const double C22049 = C50610 * C1742;
    const double C30353 = C50615 * C1742;
    const double C35929 = C16984 * C1742;
    const double C44789 = C50881 * C1742;
    const double C50159 = C50157 + C50158;
    const double C50198 = C50185 - C50192;
    const double C6407 = C2171 * C4497;
    const double C22055 = C50610 * C4497;
    const double C29175 = C50881 * C4497;
    const double C23077 = C50610 * C6396;
    const double C40554 = C50610 * C7302;
    const double C49977 = C49968 + C49975;
    const double C50133 = C50125 - C50129;
    const double C50177 = C49937 + C50176;
    const double C7313 = C50615 * C5387;
    const double C39325 = C50610 * C5387;
    const double C46585 = C50615 * C5387;
    const double C50211 = C50208 + C50209;
    const double C50220 = C50156 + C50219;
    const double C50231 = C50226 + C50230;
    const double C49768 = C49767 - C49757;
    const double C2406 = C2379 + C2380;
    const double C2402 = C2371 + C2372;
    const double C2399 = C2365 + C2366;
    const double C2397 = C2361 + C2362;
    const double C2395 = C2357 + C2358;
    const double C2393 = C2353 + C2354;
    const double C2391 = C2349 + C2350;
    const double C2389 = C2345 + C2346;
    const double C2388 = C2343 + C2344;
    const double C2386 = C2339 + C2340;
    const double C2734 = C2719 + C2720;
    const double C3138 = C3119 + C3120;
    const double C3134 = C3111 + C3112;
    const double C3131 = C3105 + C3106;
    const double C3129 = C3101 + C3102;
    const double C3127 = C3097 + C3098;
    const double C3125 = C3093 + C3094;
    const double C3404 = C3397 + C3398;
    const double C3582 = C3571 + C3572;
    const double C3580 = C3567 + C3568;
    const double C3578 = C3563 + C3564;
    const double C4090 = C4083 + C4084;
    const double C5461 = C5436 + C5437;
    const double C5459 = C5432 + C5433;
    const double C5454 = C5422 + C5423;
    const double C5453 = C5420 + C5421;
    const double C5451 = C5416 + C5417;
    const double C5449 = C5412 + C5413;
    const double C5444 = C5402 + C5403;
    const double C5442 = C5398 + C5399;
    const double C5440 = C5394 + C5395;
    const double C5438 = C5390 + C5391;
    const double C5782 = C5766 + C5767;
    const double C5996 = C5988 + C5989;
    const double C6413 = C6402 + C6403;
    const double C7318 = C7310 + C7311;
    const double C7316 = C7306 + C7307;
    const double C22084 = C22066 * C50805;
    const double C47479 = C22066 * C50805;
    const double C24549 = C24539 - C22636;
    const double C23085 = C23079 - C23062;
    const double C24046 = C24038 * C16986;
    const double C40550 = C24038 * C50755;
    const double C49240 = C24038 * C50909;
    const double C39326 = C39319 * C50755;
    const double C39938 = C39933 - C23064;
    const double C40892 = C40887 - C24540;
    const double C22100 = C22098 * C16986;
    const double C39318 = C22098 * C50755;
    const double C47478 = C22098 * C50909;
    const double C24548 = C24538 - C22632;
    const double C23084 = C23078 - C23058;
    const double C40555 = C40549 * C50755;
    const double C49831 = C49830 - C49815;
    const double C2733 = C2717 + C2718;
    const double C8130 = C8096 + C8097;
    const double C17200 = C17166 + C17167;
    const double C25190 = C25174 + C25175;
    const double C2401 = C2369 + C2370;
    const double C2738 = C2727 + C2728;
    const double C8124 = C8084 + C8085;
    const double C17194 = C17154 + C17155;
    const double C20130 = C20120 + C20121;
    const double C24870 = C24838 + C24839;
    const double C5783 = C5768 + C5769;
    const double C11081 = C11042 + C11043;
    const double C28377 = C28370 + C28371;
    const double C34135 = C34096 + C34097;
    const double C5448 = C5410 + C5411;
    const double C5786 = C5774 + C5775;
    const double C11093 = C11066 + C11067;
    const double C22422 = C22414 + C22415;
    const double C27957 = C27926 + C27927;
    const double C34147 = C34120 + C34121;
    const double C3133 = C3109 + C3110;
    const double C8816 = C8794 + C8795;
    const double C14091 = C14084 + C14085;
    const double C17886 = C17864 + C17865;
    const double C22258 = C22250 + C22251;
    const double C25578 = C25554 + C25555;
    const double C50026 = C50025 + C50020;
    const double C5991 = C50615 * C1099;
    const double C9235 = C7915 * C1099;
    const double C18305 = C16985 * C1099;
    const double C22255 = C50610 * C1099;
    const double C27935 = C50615 * C1099;
    const double C2405 = C2377 + C2378;
    const double C9082 = C9070 + C9071;
    const double C18152 = C18140 + C18141;
    const double C20132 = C20124 + C20125;
    const double C24874 = C24846 + C24847;
    const double C3137 = C3117 + C3118;
    const double C9750 = C9738 + C9739;
    const double C18820 = C18808 + C18809;
    const double C25582 = C25562 + C25563;
    const double C31552 = C31548 + C31549;
    const double C5455 = C5424 + C5425;
    const double C12880 = C12870 + C12871;
    const double C35934 = C35924 + C35925;
    const double C39532 = C39528 + C39529;
    const double C44797 = C44786 + C44787;
    const double C22650 = C21874 * C541;
    const double C23445 = C21874 * C904;
    const double C31398 = C21874 * C121;
    const double C31900 = C20396 * C541;
    const double C32642 = C20396 * C904;
    const double C23617 = C20690 * C1215;
    const double C23933 = C20690 * C255;
    const double C32298 = C20690 * C904;
    const double C33682 = C20690 * C541;
    const double C32796 = C21026 * C1215;
    const double C33094 = C21026 * C255;
    const double C50474 = C50459 - C50473;
    const double C141 = 5 * ((-3 * C49907) / C49787 + C49869 * C49938) +
                        C49869 * (4 * C49938 + C49869 * C49978);
    const double C285 = (-3 * C49907) / C49787 + C49869 * C49938 +
                        C49872 * (C49872 * C49978 - (C50257 * ce) / C49787) -
                        (C49872 * C50257 * ce) / C49787;
    const double C425 =
        (-3 * C49907) / C49787 + C49869 * C49938 + C49978 * C50169;
    const double C544 = C49872 * (4 * C49938 + C49869 * C49978) -
                        ((4 * C50251 + C49869 * C50257) * ce) / C49787;
    const double C647 = C50085 * (4 * C49938 + C49869 * C49978);
    const double C794 = C50085 * (C49872 * C49978 - (C50257 * ce) / C49787);
    const double C50051 = C50050 + C50042;
    const double C2331 = (3 * (C50007 + C50023 * C50093) +
                          C49872 * (2 * C50110 + C49872 * C50115)) /
                         C49742;
    const double C2566 = (C50007 + C50023 * C50093 + C50115 * C50169) / C49742;
    const double C3087 = (C50085 * (2 * C50110 + C49872 * C50115)) / C49742;
    const double C2400 = C2367 + C2368;
    const double C2736 = C2723 + C2724;
    const double C8119 = C8074 + C8075;
    const double C17189 = C17144 + C17145;
    const double C20129 = C20118 + C20119;
    const double C24869 = C24836 + C24837;
    const double C2404 = C2375 + C2376;
    const double C2392 = C2351 + C2352;
    const double C19915 = C19894 + C19895;
    const double C24861 = C24820 + C24821;
    const double C5450 = C5414 + C5415;
    const double C5784 = C5770 + C5771;
    const double C11077 = C11034 + C11035;
    const double C22421 = C22410 + C22411;
    const double C27952 = C27916 + C27917;
    const double C34131 = C34088 + C34089;
    const double C5447 = C5408 + C5409;
    const double C5445 = C5404 + C5405;
    const double C22068 = C22036 + C22037;
    const double C27964 = C27940 + C27941;
    const double C3136 = C3115 + C3116;
    const double C3128 = C3099 + C3100;
    const double C20393 = C20376 + C20377;
    const double C25573 = C25544 + C25545;
    const double C3406 = C3401 + C3402;
    const double C19911 = C19886 + C19887;
    const double C3584 = C3575 + C3576;
    const double C20689 = C20680 + C20681;
    const double C4092 = C4087 + C4088;
    const double C20391 = C20372 + C20373;
    const double C148 =
        4 * (2 * C49910 - (ae * C49907) / C49880 + C49869 * C49940) +
        (((-3 * C49907) / C49787 + C49869 * C49938) * ae) / C49742 +
        C49869 *
            (3 * C49940 + (C49938 * ae) / C49742 +
             C49869 * (2 * C49937 - (ae * C49931) / C49880 +
                       C49869 * ((-(ae * C49869 * C49925) / C49787) / C49742 -
                                 C49923 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49876, 7) *
                                              bs[7] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (ae * C49925) / C49880))));
    const double C286 =
        C49872 * (2 * C49910 - (ae * C49907) / C49880 + C49869 * C49940) -
        ((2 * (C49869 * C49986 + C49983 * ae) +
          C49869 * (C49986 +
                    C49869 * (C49869 * C49895 * C49896 * C49982 + C49984 * ae) +
                    C49869 * C49984 * ae) +
          (C49983 + C49984 * C49898) * ae) *
         ce) /
            C49880;
    const double C292 = (-(ae * C49894) / C49787) / C49742 - C49891 / C49880 +
                        C49869 * C49910 - (C49872 * C50007 * ce) / C49880 +
                        C49872 * (C49872 * C49940 - (C50007 * ce) / C49880);
    const double C429 =
        (zP - zQ) * (2 * C49910 - (ae * C49907) / C49880 + C49869 * C49940);
    const double C434 = (-(ae * C49894) / C49787) / C49742 - C49891 / C49880 +
                        C49869 * C49910 + C49940 * std::pow(zP - zQ, 2);
    const double C797 = (zP - zQ) * (C49872 * C49940 - (C50007 * ce) / C49880);
    const double C2334 =
        3 * (C49910 - (C50102 * ce) / C49880 + C49872 * C50108) -
        ((2 * C50102 + C49872 * C50107) * ce) / C49880 +
        C49872 *
            (2 * C50108 - (C50107 * ce) / C49880 +
             C49872 * (C49937 - (C49872 * C50019 * ce) / C49880 +
                       C49872 * (C49872 * C49973 - (C50019 * ce) / C49880)));
    const double C2568 = C49910 - (C50102 * ce) / C49880 + C49872 * C50108 +
                         (C49937 - (C49872 * C50019 * ce) / C49880 +
                          C49872 * (C49872 * C49973 - (C50019 * ce) / C49880)) *
                             std::pow(C50085, 2);
    const double C3090 =
        C50085 *
        (2 * C50108 - (C50107 * ce) / C49880 +
         C49872 * (C49937 - (C49872 * C50019 * ce) / C49880 +
                   C49872 * (C49872 * C49973 - (C50019 * ce) / C49880)));
    const double C2408 = C2383 + C2384;
    const double C2396 = C2359 + C2360;
    const double C19917 = C19898 + C19899;
    const double C24865 = C24828 + C24829;
    const double C3579 = C3565 + C3566;
    const double C5998 = C5992 + C5993;
    const double C21873 = C21866 + C21867;
    const double C26008 = C25994 + C25995;
    const double C3140 = C3123 + C3124;
    const double C3132 = C3107 + C3108;
    const double C20395 = C20380 + C20381;
    const double C25577 = C25552 + C25553;
    const double C5458 = C5430 + C5431;
    const double C5456 = C5426 + C5427;
    const double C22073 = C22048 + C22049;
    const double C30357 = C30352 + C30353;
    const double C3391 =
        4 * (2 * C50100 - (C50098 * ce) / C49880 + C49872 * C50159) -
        ((3 * C50098 + C49872 * C50154) * ce) / C49880 +
        C49872 *
            (3 * C50159 - (C50154 * ce) / C49880 +
             C49872 *
                 (2 * C50156 - (C50148 * ce) / C49880 +
                  C49872 *
                      ((-(C49872 * C50012 * ce) / C49787) / C49742 - C49945 +
                       C49872 * ((-(C49872 * C49959) / C49787) / C49742 -
                                 (C50012 * ce) / C49880))));
    const double C3559 =
        2 * C50100 - (C50098 * ce) / C49880 + C49872 * C50159 +
        (2 * C50156 - (C50148 * ce) / C49880 +
         C49872 * ((-(C49872 * C50012 * ce) / C49787) / C49742 - C49945 +
                   C49872 * ((-(C49872 * C49959) / C49787) / C49742 -
                             (C50012 * ce) / C49880))) *
            std::pow(C50085, 2);
    const double C4077 =
        C50085 *
        (3 * C50159 - (C50154 * ce) / C49880 +
         C49872 *
             (2 * C50156 - (C50148 * ce) / C49880 +
              C49872 * ((-(C49872 * C50012 * ce) / C49787) / C49742 - C49945 +
                        C49872 * ((-(C49872 * C49959) / C49787) / C49742 -
                                  (C50012 * ce) / C49880))));
    const double C4495 =
        2 * C50085 * C50159 +
        C50085 *
            (C50159 + ((-(C49872 * C50012 * ce) / C49787) / C49742 - C49945 +
                       C49872 * ((-(C49872 * C49959) / C49787) / C49742 -
                                 (C50012 * ce) / C49880)) *
                          std::pow(C50085, 2));
    const double C6415 = C6406 + C6407;
    const double C22076 = C22054 + C22055;
    const double C23083 = C23076 + C23077;
    const double C40557 = C40553 + C40554;
    const double C49979 = C49869 * C49977;
    const double C50111 = C49872 * C49977;
    const double C993 =
        2 * (C49872 * C49940 - (C50007 * ce) / C49880) -
        ((C50007 + C50023 * std::pow(C49872, 2)) * ce) / C49880 +
        C49872 * (C49940 - (C49872 * C50023 * ce) / C49880 +
                  C49872 * (C49872 * C49977 - (C50023 * ce) / C49880));
    const double C1107 =
        C49872 * C49940 - (C50007 * ce) / C49880 +
        (C49872 * C49977 - (C50023 * ce) / C49880) * std::pow(zP - zQ, 2);
    const double C1457 =
        (zP - zQ) * (C49940 - (C49872 * C50023 * ce) / C49880 +
                     C49872 * (C49872 * C49977 - (C50023 * ce) / C49880));
    const double C1741 =
        2 * C50085 * C49940 + C50085 * (C49940 + C49977 * std::pow(C50085, 2));
    const double C5388 =
        3 * (C49940 + C49977 * C50169) +
        C50085 *
            (2 * C50085 * C49977 +
             C50085 *
                 (C49977 +
                  ((-(ae * C49869 * C49961) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880)) *
                      C50169));
    const double C50136 = C49872 * C50133;
    const double C4496 =
        2 * C50085 * C50108 + C50085 * (C50108 + C50133 * std::pow(C50085, 2));
    const double C6395 =
        3 * (C50108 + C50133 * C50169) +
        C50085 *
            (2 * C50085 * C50133 +
             C50085 *
                 (C50133 +
                  (C49872 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880) -
                   (C50041 * ce) / C49880) *
                      C50169));
    const double C7301 =
        4 * (2 * C50085 * C49937 + C50085 * C50177) +
        C50085 *
            (3 * C50177 +
             C50085 * (2 * C50085 * C49973 +
                       C50085 * (C49973 + ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (ae * C49961) / C49880) *
                                              C50169)));
    const double C7319 = C7312 + C7313;
    const double C39329 = C39324 + C39325;
    const double C46591 = C46584 + C46585;
    const double C50212 = C49872 * C50211;
    const double C23046 =
        3 * (C50159 + C50211 * C50169) +
        C50085 *
            (2 * C50085 * C50211 +
             C50085 *
                 (C50211 +
                  ((-(C49872 * C50034 * ce) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49872 * ((-(C49872 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (C50034 * ce) / C49880)) *
                      C50169));
    const double C24035 =
        4 * (2 * C50085 * C50156 + C50085 * C50220) +
        C50085 *
            (3 * C50220 +
             C50085 * (2 * C50085 * C50206 +
                       C50085 * (C50206 + ((-(C49872 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (C50034 * ce) / C49880) *
                                              C50169)));
    const double C40547 =
        5 * (3 * C50183 + C50085 * C50231) +
        C50085 * (4 * C50231 +
                  C50085 * (3 * C50229 +
                            C50085 * ((-2 * C50085 * C49959) / C49880 +
                                      C50085 * ((-(std::pow(C49874, 8) * bs[8] *
                                                   C49885 * C50169) /
                                                 C49787) /
                                                    C49742 -
                                                C49959 / C49880))));
    const double C24852 = C49768 * C990;
    const double C24848 = C49768 * C982;
    const double C24844 = C49768 * C279;
    const double C24840 = C49768 * C261;
    const double C24834 = C49768 * C272;
    const double C24830 = C49768 * C258;
    const double C24826 = C49768 * C991;
    const double C24822 = C49768 * C983;
    const double C24818 = C49768 * C278;
    const double C24814 = C49768 * C260;
    const double C24812 = C49768 * C273;
    const double C24808 = C49768 * C259;
    const double C25188 = C49768 * C280;
    const double C25184 = C49768 * C262;
    const double C25180 = C49768 * C271;
    const double C25176 = C49768 * C257;
    const double C25568 = C49768 * C1454;
    const double C25564 = C49768 * C1446;
    const double C25560 = C49768 * C790;
    const double C25556 = C49768 * C781;
    const double C25550 = C49768 * C1455;
    const double C25546 = C49768 * C1447;
    const double C25542 = C49768 * C789;
    const double C25538 = C49768 * C780;
    const double C25838 = C49768 * C2329;
    const double C25834 = C49768 * C2324;
    const double C26004 = C49768 * C2563;
    const double C26000 = C49768 * C2558;
    const double C25996 = C49768 * C1105;
    const double C25992 = C49768 * C1097;
    const double C26508 = C49768 * C3085;
    const double C26504 = C49768 * C3080;
    const double C27946 = C49768 * C402;
    const double C27942 = C49768 * C421;
    const double C27936 = C49768 * C1104;
    const double C27932 = C49768 * C1096;
    const double C27928 = C49768 * C422;
    const double C27924 = C49768 * C403;
    const double C27922 = C49768 * C397;
    const double C27918 = C49768 * C411;
    const double C27912 = C49768 * C415;
    const double C27908 = C49768 * C401;
    const double C28168 = C49768 * C791;
    const double C28164 = C49768 * C782;
    const double C28372 = C49768 * C412;
    const double C28368 = C49768 * C398;
    const double C29174 = C49768 * C4491;
    const double C29170 = C49768 * C4485;
    const double C30350 = C49768 * C1735;
    const double C30346 = C49768 * C1731;
    const double C44788 = C49768 * C1734;
    const double C44784 = C49768 * C1730;
    const double C45100 = C49768 * C423;
    const double C45096 = C49768 * C404;
    const double C46582 = C49768 * C5382;
    const double C46578 = C49768 * C5377;
    const double C117 =
        ((((0 - (C49740 * C49741) / C49742) * ae) / C49742 - (0 * be) / C49751 +
          C49743 / C49742) /
             C49747 -
         ((C49740 * C49764 + 0) * be) / C49742) /
            C49747 +
        ((C49740 * (C49764 / C49747 -
                    ((C49740 * C49768 + C50881) * be) / C49742 + C49761) +
          C50937) *
         ae) /
            C49742 +
        C49768 / C49747 - ((C49740 * C49761 + C50615) * be) / C49742;
    const double C118 =
        (C49764 / C49747 - ((C49740 * C49768 + C50881) * be) / C49742 +
         C49761) /
            C49747 +
        ((C49740 *
              (C49768 / C49747 - ((C49740 * C49761 + C50615) * be) / C49742) +
          C50938) *
         ae) /
            C49742 +
        2 * (C49761 / C49747 - (0 * be) / C49742);
    const double C119 =
        (C49768 / C49747 - ((C49740 * C49761 + C50615) * be) / C49742) /
            C49747 +
        ((C49740 * (C49761 / C49747 - (0 * be) / C49742) + C7915) * ae) /
            C49742;
    const double C7918 =
        C49764 / C49747 - ((C49740 * C49768 + C50881) * be) / C49742 + C49761;
    const double C7919 =
        C49768 / C49747 - ((C49740 * C49761 + C50615) * be) / C49742;
    const double C16988 =
        C49764 / C49747 + ((C49740 * C49768 + C50881) * ae) / C49742 + C49761;
    const double C16989 =
        C49768 / C49747 + ((C49740 * C49761 + C50615) * ae) / C49742;
    const double C3393 = C2394 + C2393;
    const double C2409 = C2389 + C2390;
    const double C4079 = C3130 + C3129;
    const double C15720 = C3129 + C3130;
    const double C14548 = C3125 + C3126;
    const double C14546 = C3126 + C3125;
    const double C6400 = C3577 + C3578;
    const double C15072 = C3578 + C3577;
    const double C7305 = C5460 + C5461;
    const double C5462 = C5442 + C5443;
    const double C22102 = C22100 + C22084;
    const double C47482 = C47478 + C47479;
    const double C24550 = C24548 - C22633;
    const double C23088 = C23084 - C23059;
    const double C976 =
        ((((0 - (C49785 * C49811) / C49787) * ce) / C49787 - (0 * de) / C49791 +
          C49786 / C49787) /
             C49812 -
         ((C49785 * C49829 + 0) * de) / C49787) /
            C49812 +
        ((C49785 * (C49829 / C49812 -
                    ((C49785 * C49831 + C50896) * de) / C49787 + C49824) +
          C50941) *
         ce) /
            C49787 +
        C49831 / C49812 - ((C49785 * C49824 + C50705) * de) / C49787;
    const double C977 =
        (C49829 / C49812 - ((C49785 * C49831 + C50896) * de) / C49787 +
         C49824) /
            C49812 +
        ((C49785 *
              (C49831 / C49812 - ((C49785 * C49824 + C50705) * de) / C49787) +
          C50942) *
         ce) /
            C49787 +
        2 * (C49824 / C49812 - (0 * de) / C49787);
    const double C978 =
        (C49831 / C49812 - ((C49785 * C49824 + C50705) * de) / C49787) /
            C49812 +
        ((C49785 * (C49824 / C49812 - (0 * de) / C49787) + C1210) * ce) /
            C49787;
    const double C1213 =
        C49829 / C49812 - ((C49785 * C49831 + C50896) * de) / C49787 + C49824;
    const double C1214 =
        C49831 / C49812 - ((C49785 * C49824 + C50705) * de) / C49787;
    const double C2411 = C2401 + C2402;
    const double C5465 = C5448 + C5449;
    const double C22426 = C22422 * C121;
    const double C14553 = C3133 + C3134;
    const double C14550 = C3134 + C3133;
    const double C22412 = C22258 * C121;
    const double C139 = (4 * (2 * C49996 + C49869 * C50007 + C50247 * ae) +
                         C49869 * (3 * C50007 + C49869 * C50026 + C50251 * ae) +
                         (3 * C50247 + C49869 * C50251) * ae) /
                        C49742;
    const double C277 =
        (2 * C49996 + C49869 * C50007 + C50247 * ae + C50026 * C50093) / C49742;
    const double C282 =
        (C49872 * (3 * C50007 + C49869 * C50026 + C50251 * ae)) / C49742;
    const double C410 =
        (C50085 * (3 * C50007 + C49869 * C50026 + C50251 * ae)) / C49742;
    const double C420 =
        (2 * C49996 + C49869 * C50007 + C50247 * ae + C50026 * C50169) / C49742;
    const double C788 = (C50085 * C49872 * C50026) / C49742;
    const double C5997 = C5990 + C5991;
    const double C9246 = C9234 + C9235;
    const double C18316 = C18304 + C18305;
    const double C22260 = C22254 + C22255;
    const double C27961 = C27934 + C27935;
    const double C31700 = C31552 * C121;
    const double C39534 = C39532 * C121;
    const double C50475 = C50474 - C50462;
    const double C50052 = C49869 * C50051;
    const double C984 =
        (2 * C49872 * C50026 + C49872 * (C50026 + C50051 * C50093)) / C49742;
    const double C1098 = (C49872 * C50026 + C49872 * C50051 * C50169) / C49742;
    const double C1448 = (C50085 * (C50026 + C50051 * C50093)) / C49742;
    const double C1736 =
        (2 * C50085 * C50026 + C50085 * (C50026 + C50051 * C50169)) / C49742;
    const double C2410 = C2391 + C2392;
    const double C22425 = C22421 * C50653;
    const double C5463 = C5444 + C5445;
    const double C22086 = C22068 * C50653;
    const double C22647 = C22068 * C50896;
    const double C23442 = C22068 * C898;
    const double C14549 = C3127 + C3128;
    const double C14547 = C3128 + C3127;
    const double C22040 = C20393 * C50653;
    const double C22643 = C20393 * C50896;
    const double C22641 = C20393 * C50705;
    const double C23438 = C20393 * C898;
    const double C23436 = C20393 * C50705;
    const double C22637 = C20689 * C50705;
    const double C23063 = C20689 * C50705;
    const double C23616 = C20689 * C50942;
    const double C23612 = C20689 * C1210;
    const double C23932 = C20689 * C249;
    const double C23928 = C20689 * C250;
    const double C31400 = C20689 * C50653;
    const double C32299 = C20689 * C898;
    const double C33683 = C20689 * C50896;
    const double C23606 = C20391 * C1210;
    const double C23922 = C20391 * C250;
    const double C31899 = C20391 * C50705;
    const double C32297 = C20391 * C50705;
    const double C32795 = C20391 * C50942;
    const double C33093 = C20391 * C249;
    const double C2722 = C50615 * C286;
    const double C8103 = C7915 * C286;
    const double C8441 = C50938 * C286;
    const double C17173 = C16985 * C286;
    const double C17511 = C16984 * C286;
    const double C25179 = C50615 * C286;
    const double C2374 = C50615 * C292;
    const double C2732 = C2171 * C292;
    const double C8113 = C50938 * C292;
    const double C8091 = C7915 * C292;
    const double C17183 = C16984 * C292;
    const double C17161 = C16985 * C292;
    const double C20123 = C50610 * C292;
    const double C24843 = C50615 * C292;
    const double C25189 = C50881 * C292;
    const double C5773 = C50615 * C429;
    const double C11037 = C7915 * C429;
    const double C11397 = C50938 * C429;
    const double C28375 = C50615 * C429;
    const double C34091 = C16985 * C429;
    const double C34451 = C16984 * C429;
    const double C5407 = C50615 * C434;
    const double C5779 = C2171 * C434;
    const double C11061 = C7915 * C434;
    const double C11057 = C50938 * C434;
    const double C22417 = C50610 * C434;
    const double C27931 = C50615 * C434;
    const double C34115 = C16985 * C434;
    const double C34111 = C16984 * C434;
    const double C45101 = C50881 * C434;
    const double C3114 = C50615 * C797;
    const double C8811 = C50938 * C797;
    const double C8801 = C7915 * C797;
    const double C14089 = C2171 * C797;
    const double C17881 = C16984 * C797;
    const double C17871 = C16985 * C797;
    const double C22253 = C50610 * C797;
    const double C25559 = C50615 * C797;
    const double C28169 = C50881 * C797;
    const double C3400 = C50615 * C2334;
    const double C19903 = C50610 * C2334;
    const double C25837 = C50615 * C2334;
    const double C3574 = C50615 * C2568;
    const double C21871 = C50610 * C2568;
    const double C26003 = C50615 * C2568;
    const double C4086 = C50615 * C3090;
    const double C20385 = C50610 * C3090;
    const double C26507 = C50615 * C3090;
    const double C3394 = C2396 + C2395;
    const double C6401 = C3579 + C3580;
    const double C15073 = C3580 + C3579;
    const double C22034 = C21873 * C50653;
    const double C22651 = C21873 * C50896;
    const double C22649 = C21873 * C50705;
    const double C23446 = C21873 * C898;
    const double C23444 = C21873 * C50705;
    const double C4080 = C3132 + C3131;
    const double C15721 = C3131 + C3132;
    const double C22645 = C20395 * C50705;
    const double C23440 = C20395 * C50705;
    const double C31396 = C20395 * C50653;
    const double C31901 = C20395 * C50896;
    const double C32643 = C20395 * C898;
    const double C7304 = C5458 + C5459;
    const double C22091 = C22073 * C50653;
    const double C39667 = C22073 * C50896;
    const double C40170 = C22073 * C898;
    const double C20569 = C50610 * C3391;
    const double C20685 = C50610 * C3559;
    const double C21025 = C50610 * C4077;
    const double C23073 = C50610 * C4495;
    const double C22094 = C22076 * C50653;
    const double C23070 = C22076 * C898;
    const double C23067 = C22076 * C50705;
    const double C24545 = C22076 * C50896;
    const double C24543 = C22076 * C50705;
    const double C40274 = C22076 * C50942;
    const double C40476 = C22076 * C249;
    const double C24044 = C23083 * C50653;
    const double C39937 = C23083 * C50705;
    const double C40891 = C23083 * C50705;
    const double C40559 = C40557 * C50653;
    const double C49980 = C49957 + C49979;
    const double C50116 = C50111 - C50114;
    const double C2382 = C50615 * C993;
    const double C9077 = C7915 * C993;
    const double C18147 = C16985 * C993;
    const double C20127 = C50610 * C993;
    const double C24851 = C50615 * C993;
    const double C5995 = C50615 * C1107;
    const double C9241 = C7915 * C1107;
    const double C18311 = C16985 * C1107;
    const double C22257 = C50610 * C1107;
    const double C27939 = C50615 * C1107;
    const double C3122 = C50615 * C1457;
    const double C9745 = C7915 * C1457;
    const double C18815 = C16985 * C1457;
    const double C25567 = C50615 * C1457;
    const double C31551 = C50610 * C1457;
    const double C5429 = C50615 * C1741;
    const double C12877 = C7915 * C1741;
    const double C35931 = C16985 * C1741;
    const double C39531 = C50610 * C1741;
    const double C44791 = C50615 * C1741;
    const double C50138 = C50135 + C50136;
    const double C6409 = C50615 * C4496;
    const double C22053 = C50610 * C4496;
    const double C29173 = C50615 * C4496;
    const double C39331 = C39329 * C50653;
    const double C50213 = C50198 + C50212;
    const double C24877 = C24852 + C24853;
    const double C24875 = C24848 + C24849;
    const double C24873 = C24844 + C24845;
    const double C24871 = C24840 + C24841;
    const double C24868 = C24834 + C24835;
    const double C24866 = C24830 + C24831;
    const double C24864 = C24826 + C24827;
    const double C24862 = C24822 + C24823;
    const double C24860 = C24818 + C24819;
    const double C24858 = C24814 + C24815;
    const double C24857 = C24812 + C24813;
    const double C24855 = C24808 + C24809;
    const double C25195 = C25184 + C25185;
    const double C25193 = C25180 + C25181;
    const double C25191 = C25176 + C25177;
    const double C25585 = C25568 + C25569;
    const double C25583 = C25564 + C25565;
    const double C25581 = C25560 + C25561;
    const double C25579 = C25556 + C25557;
    const double C25576 = C25550 + C25551;
    const double C25574 = C25546 + C25547;
    const double C25572 = C25542 + C25543;
    const double C25570 = C25538 + C25539;
    const double C25843 = C25838 + C25839;
    const double C25841 = C25834 + C25835;
    const double C26013 = C26004 + C26005;
    const double C26011 = C26000 + C26001;
    const double C26009 = C25996 + C25997;
    const double C26007 = C25992 + C25993;
    const double C26513 = C26508 + C26509;
    const double C26511 = C26504 + C26505;
    const double C27967 = C27946 + C27947;
    const double C27965 = C27942 + C27943;
    const double C27962 = C27936 + C27937;
    const double C27960 = C27932 + C27933;
    const double C27958 = C27928 + C27929;
    const double C27956 = C27924 + C27925;
    const double C27955 = C27922 + C27923;
    const double C27953 = C27918 + C27919;
    const double C27950 = C27912 + C27913;
    const double C27948 = C27908 + C27909;
    const double C28171 = C28164 + C28165;
    const double C28378 = C28372 + C28373;
    const double C28376 = C28368 + C28369;
    const double C29179 = C29174 + C29175;
    const double C29177 = C29170 + C29171;
    const double C30356 = C30350 + C30351;
    const double C30354 = C30346 + C30347;
    const double C44798 = C44788 + C44789;
    const double C44796 = C44784 + C44785;
    const double C45104 = C45096 + C45097;
    const double C46590 = C46582 + C46583;
    const double C46588 = C46578 + C46579;
    const double C8114 = C7918 * C279;
    const double C8108 = C7918 * C261;
    const double C8098 = C7918 * C272;
    const double C8092 = C7918 * C258;
    const double C8086 = C7918 * C278;
    const double C8080 = C7918 * C260;
    const double C8078 = C7918 * C273;
    const double C8072 = C7918 * C259;
    const double C8442 = C7918 * C271;
    const double C8436 = C7918 * C257;
    const double C8812 = C7918 * C790;
    const double C8806 = C7918 * C781;
    const double C8796 = C7918 * C789;
    const double C8790 = C7918 * C780;
    const double C9080 = C7918 * C991;
    const double C9074 = C7918 * C983;
    const double C9244 = C7918 * C1105;
    const double C9238 = C7918 * C1097;
    const double C9748 = C7918 * C1455;
    const double C9742 = C7918 * C1447;
    const double C11070 = C7918 * C402;
    const double C11064 = C7918 * C421;
    const double C11054 = C7918 * C422;
    const double C11048 = C7918 * C403;
    const double C11046 = C7918 * C397;
    const double C11040 = C7918 * C411;
    const double C11030 = C7918 * C415;
    const double C11024 = C7918 * C401;
    const double C11394 = C7918 * C412;
    const double C11388 = C7918 * C398;
    const double C12872 = C7918 * C1735;
    const double C12866 = C7918 * C1731;
    const double C8112 = C7919 * C280;
    const double C8106 = C7919 * C262;
    const double C8100 = C7919 * C271;
    const double C8094 = C7919 * C257;
    const double C8088 = C7919 * C279;
    const double C8082 = C7919 * C261;
    const double C8076 = C7919 * C272;
    const double C8070 = C7919 * C258;
    const double C8440 = C7919 * C270;
    const double C8434 = C7919 * C256;
    const double C8810 = C7919 * C791;
    const double C8804 = C7919 * C782;
    const double C8798 = C7919 * C790;
    const double C8792 = C7919 * C781;
    const double C9078 = C7919 * C990;
    const double C9072 = C7919 * C982;
    const double C9242 = C7919 * C1104;
    const double C9236 = C7919 * C1096;
    const double C9746 = C7919 * C1454;
    const double C9740 = C7919 * C1446;
    const double C11068 = C7919 * C403;
    const double C11062 = C7919 * C422;
    const double C11056 = C7919 * C423;
    const double C11050 = C7919 * C404;
    const double C11044 = C7919 * C398;
    const double C11038 = C7919 * C412;
    const double C11032 = C7919 * C411;
    const double C11026 = C7919 * C397;
    const double C11396 = C7919 * C413;
    const double C11390 = C7919 * C399;
    const double C12874 = C7919 * C1734;
    const double C12868 = C7919 * C1730;
    const double C17184 = C16988 * C279;
    const double C17178 = C16988 * C261;
    const double C17168 = C16988 * C272;
    const double C17162 = C16988 * C258;
    const double C17156 = C16988 * C278;
    const double C17150 = C16988 * C260;
    const double C17148 = C16988 * C273;
    const double C17142 = C16988 * C259;
    const double C17512 = C16988 * C271;
    const double C17506 = C16988 * C257;
    const double C17882 = C16988 * C790;
    const double C17876 = C16988 * C781;
    const double C17866 = C16988 * C789;
    const double C17860 = C16988 * C780;
    const double C18150 = C16988 * C991;
    const double C18144 = C16988 * C983;
    const double C18314 = C16988 * C1105;
    const double C18308 = C16988 * C1097;
    const double C18818 = C16988 * C1455;
    const double C18812 = C16988 * C1447;
    const double C34124 = C16988 * C402;
    const double C34118 = C16988 * C421;
    const double C34108 = C16988 * C422;
    const double C34102 = C16988 * C403;
    const double C34100 = C16988 * C397;
    const double C34094 = C16988 * C411;
    const double C34084 = C16988 * C415;
    const double C34078 = C16988 * C401;
    const double C34448 = C16988 * C412;
    const double C34442 = C16988 * C398;
    const double C35926 = C16988 * C1735;
    const double C35920 = C16988 * C1731;
    const double C17182 = C16989 * C280;
    const double C17176 = C16989 * C262;
    const double C17170 = C16989 * C271;
    const double C17164 = C16989 * C257;
    const double C17158 = C16989 * C279;
    const double C17152 = C16989 * C261;
    const double C17146 = C16989 * C272;
    const double C17140 = C16989 * C258;
    const double C17510 = C16989 * C270;
    const double C17504 = C16989 * C256;
    const double C17880 = C16989 * C791;
    const double C17874 = C16989 * C782;
    const double C17868 = C16989 * C790;
    const double C17862 = C16989 * C781;
    const double C18148 = C16989 * C990;
    const double C18142 = C16989 * C982;
    const double C18312 = C16989 * C1104;
    const double C18306 = C16989 * C1096;
    const double C18816 = C16989 * C1454;
    const double C18810 = C16989 * C1446;
    const double C34122 = C16989 * C403;
    const double C34116 = C16989 * C422;
    const double C34110 = C16989 * C423;
    const double C34104 = C16989 * C404;
    const double C34098 = C16989 * C398;
    const double C34092 = C16989 * C412;
    const double C34086 = C16989 * C411;
    const double C34080 = C16989 * C397;
    const double C34450 = C16989 * C413;
    const double C34444 = C16989 * C399;
    const double C35928 = C16989 * C1734;
    const double C35922 = C16989 * C1730;
    const double C6411 = C6400 * C904;
    const double C7810 = C6400 * C541;
    const double C7315 = C7305 * C121;
    const double C5466 = C5462 * C121;
    const double C6398 = C5462 * C903;
    const double C7808 = C5462 * C540;
    const double C24552 = C24550 * C16986;
    const double C40886 = C24550 * C50755;
    const double C49728 = C24550 * C50909;
    const double C23090 = C23088 * C16986;
    const double C39932 = C23088 * C50755;
    const double C48360 = C23088 * C50909;
    const double C23613 = C20686 * C1213;
    const double C23607 = C22064 * C1213;
    const double C23601 = C20386 * C1213;
    const double C23595 = C22062 * C1213;
    const double C32792 = C20388 * C1213;
    const double C40271 = C22079 * C1213;
    const double C23615 = C20688 * C1214;
    const double C23609 = C20686 * C1214;
    const double C23603 = C20388 * C1214;
    const double C23597 = C20386 * C1214;
    const double C32794 = C20390 * C1214;
    const double C40273 = C22077 * C1214;
    const double C5469 = C5465 * C121;
    const double C2726 = C50615 * C277;
    const double C8105 = C7915 * C277;
    const double C17175 = C16985 * C277;
    const double C25183 = C50615 * C277;
    const double C8433 = C7915 * C282;
    const double C17503 = C16985 * C282;
    const double C11393 = C7915 * C410;
    const double C34447 = C16985 * C410;
    const double C5777 = C50615 * C420;
    const double C11053 = C7915 * C420;
    const double C34107 = C16985 * C420;
    const double C45099 = C50615 * C420;
    const double C8803 = C7915 * C788;
    const double C14083 = C50615 * C788;
    const double C17873 = C16985 * C788;
    const double C28163 = C50615 * C788;
    const double C22418 = C22260 * C121;
    const double C20563 =
        5 * ((-3 * C50409) / C49787 + C49872 * C50475 -
             (C50408 * ce) / C49787) +
        C49872 *
            (4 * C50475 +
             C49872 * ((-3 * C50469) / C49787 +
                       C49872 * ((-2 * C50460) / C49787 -
                                 (C49872 *
                                  (C49872 * (C49872 * C49961 + C50032 * ce) +
                                   C49925 + C49872 * C50032 * ce)) /
                                     C49787 -
                                 (C50463 * ce) / C49787) -
                       (C50468 * ce) / C49787) -
             (C50472 * ce) / C49787) -
        ((4 * C50408 + C49872 * C50472) * ce) / C49787;
    const double C20671 =
        (-3 * C50409) / C49787 + C49872 * C50475 - (C50408 * ce) / C49787 +
        ((-3 * C50469) / C49787 +
         C49872 * ((-2 * C50460) / C49787 -
                   (C49872 * (C49872 * (C49872 * C49961 + C50032 * ce) +
                              C49925 + C49872 * C50032 * ce)) /
                       C49787 -
                   (C50463 * ce) / C49787) -
         (C50468 * ce) / C49787) *
            C50169;
    const double C21019 =
        C50085 *
        (4 * C50475 +
         C49872 *
             ((-3 * C50469) / C49787 +
              C49872 * ((-2 * C50460) / C49787 -
                        (C49872 * (C49872 * (C49872 * C49961 + C50032 * ce) +
                                   C49925 + C49872 * C50032 * ce)) /
                            C49787 -
                        (C50463 * ce) / C49787) -
              (C50468 * ce) / C49787) -
         (C50472 * ce) / C49787);
    const double C21290 =
        2 * C50085 * C50475 +
        C50085 *
            (C50475 + ((-2 * C50460) / C49787 -
                       (C49872 * (C49872 * (C49872 * C49961 + C50032 * ce) +
                                  C49925 + C49872 * C50032 * ce)) /
                           C49787 -
                       (C50463 * ce) / C49787) *
                          C50169);
    const double C50053 = C50029 + C50052;
    const double C5467 = C5463 * C50653;
    const double C6399 = C5463 * C898;
    const double C7809 = C5463 * C50896;
    const double C22099 = C22086 + C22087;
    const double C24551 = C24549 - C22637;
    const double C23089 = C23085 - C23063;
    const double C2735 = C2721 + C2722;
    const double C8133 = C8102 + C8103;
    const double C17203 = C17172 + C17173;
    const double C25192 = C25178 + C25179;
    const double C2403 = C2373 + C2374;
    const double C2740 = C2731 + C2732;
    const double C8127 = C8090 + C8091;
    const double C17197 = C17160 + C17161;
    const double C20131 = C20122 + C20123;
    const double C24872 = C24842 + C24843;
    const double C25197 = C25188 + C25189;
    const double C5785 = C5772 + C5773;
    const double C11078 = C11036 + C11037;
    const double C28379 = C28374 + C28375;
    const double C34132 = C34090 + C34091;
    const double C5446 = C5406 + C5407;
    const double C5788 = C5778 + C5779;
    const double C11090 = C11060 + C11061;
    const double C22423 = C22416 + C22417;
    const double C27959 = C27930 + C27931;
    const double C34144 = C34114 + C34115;
    const double C45106 = C45100 + C45101;
    const double C3135 = C3113 + C3114;
    const double C8819 = C8800 + C8801;
    const double C14093 = C14088 + C14089;
    const double C17889 = C17870 + C17871;
    const double C22259 = C22252 + C22253;
    const double C25580 = C25558 + C25559;
    const double C28173 = C28168 + C28169;
    const double C3405 = C3399 + C3400;
    const double C19919 = C19902 + C19903;
    const double C25842 = C25836 + C25837;
    const double C3583 = C3573 + C3574;
    const double C21875 = C21870 + C21871;
    const double C26012 = C26002 + C26003;
    const double C4091 = C4085 + C4086;
    const double C20397 = C20384 + C20385;
    const double C26512 = C26506 + C26507;
    const double C6412 = C6401 * C50705;
    const double C7811 = C6401 * C50705;
    const double C22067 = C22034 + C22035;
    const double C7314 = C7304 * C50653;
    const double C39320 = C22091 + C22090;
    const double C20571 = C20568 + C20569;
    const double C20691 = C20684 + C20685;
    const double C21027 = C21024 + C21025;
    const double C23081 = C23072 + C23073;
    const double C24037 = C22094 + C22095;
    const double C39939 = C39938 - C23067;
    const double C40893 = C40892 - C24543;
    const double C149 =
        5 * (3 * C49940 + (C49938 * ae) / C49742 + C49869 * C49980) +
        ((4 * C49938 + C49869 * C49978) * ae) / C49742 +
        C49869 *
            (4 * C49980 + (C49978 * ae) / C49742 +
             C49869 *
                 (3 * C49977 + (C49974 * ae) / C49742 +
                  C49869 *
                      (2 * C49973 - (ae * C49967) / C49880 +
                       C49869 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                 C49959 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (ae * C49961) / C49880)))));
    const double C293 = 2 * C49910 - (ae * C49907) / C49880 + C49869 * C49940 -
                        (C49872 * C50026 * ce) / C49880 +
                        C49872 * (C49872 * C49980 - (C50026 * ce) / C49880);
    const double C294 =
        C49872 * (3 * C49940 + (C49938 * ae) / C49742 + C49869 * C49980) -
        ((3 * C50007 + C49869 * C50026 + (2 * C50000 + C49869 * C50018) * ae) *
         ce) /
            C49880;
    const double C430 =
        (zP - zQ) * (3 * C49940 + (C49938 * ae) / C49742 + C49869 * C49980);
    const double C435 = 2 * C49910 - (ae * C49907) / C49880 + C49869 * C49940 +
                        C49980 * std::pow(zP - zQ, 2);
    const double C436 =
        3 * C49940 + (C49938 * ae) / C49742 + C49869 * C49980 +
        (3 * C49977 + (C49974 * ae) / C49742 +
         C49869 *
             (2 * C49973 - (ae * C49967) / C49880 +
              C49869 *
                  ((-(ae * C49869 * C49961) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880)))) *
            std::pow(zP - zQ, 2);
    const double C649 =
        (zP - zQ) *
        (4 * C49980 + (C49978 * ae) / C49742 +
         C49869 *
             (3 * C49977 + (C49974 * ae) / C49742 +
              C49869 * (2 * C49973 - (ae * C49967) / C49880 +
                        C49869 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                  C49959 / C49880 +
                                  C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                               bs[8] * C49885) /
                                             C49787) /
                                                C49742 -
                                            (ae * C49961) / C49880)))));
    const double C798 = (zP - zQ) * (C49872 * C49980 - (C50026 * ce) / C49880);
    const double C992 =
        2 * (C49872 * C49980 - (C50026 * ce) / C49880) -
        ((C50026 + C50051 * std::pow(C49872, 2)) * ce) / C49880 +
        C49872 *
            (C49980 - (C49872 * C50051 * ce) / C49880 +
             C49872 *
                 (C49872 *
                      (2 * C49973 - (ae * C49967) / C49880 +
                       C49869 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                 C49959 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (ae * C49961) / C49880))) -
                  (C50051 * ce) / C49880));
    const double C1106 =
        C49872 * C49980 - (C50026 * ce) / C49880 +
        (C49872 *
             (2 * C49973 - (ae * C49967) / C49880 +
              C49869 *
                  ((-(ae * C49869 * C49961) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880))) -
         (C50051 * ce) / C49880) *
            std::pow(zP - zQ, 2);
    const double C1456 =
        (zP - zQ) *
        (C49980 - (C49872 * C50051 * ce) / C49880 +
         C49872 *
             (C49872 * (2 * C49973 - (ae * C49967) / C49880 +
                        C49869 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                  C49959 / C49880 +
                                  C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                               bs[8] * C49885) /
                                             C49787) /
                                                C49742 -
                                            (ae * C49961) / C49880))) -
              (C50051 * ce) / C49880));
    const double C1740 =
        2 * C50085 * C49980 +
        C50085 *
            (C49980 +
             (2 * C49973 - (ae * C49967) / C49880 +
              C49869 *
                  ((-(ae * C49869 * C49961) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880))) *
                 std::pow(C50085, 2));
    const double C2335 =
        3 * (C49940 - (C50110 * ce) / C49880 + C49872 * C50116) -
        ((2 * C50110 + C49872 * C50115) * ce) / C49880 +
        C49872 *
            (2 * C50116 - (C50115 * ce) / C49880 +
             C49872 *
                 (C49977 - (C49872 * C50048 * ce) / C49880 +
                  C49872 *
                      (C49872 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                 C49959 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (ae * C49961) / C49880)) -
                       (C50048 * ce) / C49880)));
    const double C2569 =
        C49940 - (C50110 * ce) / C49880 + C49872 * C50116 +
        (C49977 - (C49872 * C50048 * ce) / C49880 +
         C49872 *
             (C49872 *
                  ((-(ae * C49869 * C49961) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880)) -
              (C50048 * ce) / C49880)) *
            std::pow(C50085, 2);
    const double C3091 =
        C50085 *
        (2 * C50116 - (C50115 * ce) / C49880 +
         C49872 *
             (C49977 - (C49872 * C50048 * ce) / C49880 +
              C49872 * (C49872 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                  C49959 / C49880 +
                                  C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                               bs[8] * C49885) /
                                             C49787) /
                                                C49742 -
                                            (ae * C49961) / C49880)) -
                        (C50048 * ce) / C49880)));
    const double C5986 =
        2 * C50085 * C50116 +
        C50085 *
            (C50116 +
             (C49872 *
                  ((-(ae * C49869 * C49961) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880)) -
              (C50048 * ce) / C49880) *
                 C50169);
    const double C2407 = C2381 + C2382;
    const double C9085 = C9076 + C9077;
    const double C18155 = C18146 + C18147;
    const double C20133 = C20126 + C20127;
    const double C24876 = C24850 + C24851;
    const double C5999 = C5994 + C5995;
    const double C9249 = C9240 + C9241;
    const double C18319 = C18310 + C18311;
    const double C22261 = C22256 + C22257;
    const double C27963 = C27938 + C27939;
    const double C3139 = C3121 + C3122;
    const double C9753 = C9744 + C9745;
    const double C18823 = C18814 + C18815;
    const double C25584 = C25566 + C25567;
    const double C31553 = C31550 + C31551;
    const double C5457 = C5428 + C5429;
    const double C12883 = C12876 + C12877;
    const double C35937 = C35930 + C35931;
    const double C39533 = C39530 + C39531;
    const double C44799 = C44790 + C44791;
    const double C3390 =
        4 * (2 * C50108 - (C50107 * ce) / C49880 + C49872 * C50138) -
        ((3 * C50107 + C49872 * C50137) * ce) / C49880 +
        C49872 *
            (3 * C50138 - (C50137 * ce) / C49880 +
             C49872 *
                 (2 * C50133 - (C50131 * ce) / C49880 +
                  C49872 *
                      (C49973 - (C49872 * C50041 * ce) / C49880 +
                       C49872 * (C49872 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (ae * C49961) / C49880) -
                                 (C50041 * ce) / C49880))));
    const double C3558 =
        2 * C50108 - (C50107 * ce) / C49880 + C49872 * C50138 +
        (2 * C50133 - (C50131 * ce) / C49880 +
         C49872 *
             (C49973 - (C49872 * C50041 * ce) / C49880 +
              C49872 *
                  (C49872 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880) -
                   (C50041 * ce) / C49880))) *
            std::pow(C50085, 2);
    const double C4076 =
        C50085 *
        (3 * C50138 - (C50137 * ce) / C49880 +
         C49872 *
             (2 * C50133 - (C50131 * ce) / C49880 +
              C49872 * (C49973 - (C49872 * C50041 * ce) / C49880 +
                        C49872 * (C49872 * ((-(C49869 * std::pow(C49874, 8) *
                                               bs[8] * C49885) /
                                             C49787) /
                                                C49742 -
                                            (ae * C49961) / C49880) -
                                  (C50041 * ce) / C49880))));
    const double C4494 =
        2 * C50085 * C50138 +
        C50085 *
            (C50138 +
             (C49973 - (C49872 * C50041 * ce) / C49880 +
              C49872 *
                  (C49872 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (ae * C49961) / C49880) -
                   (C50041 * ce) / C49880)) *
                 std::pow(C50085, 2));
    const double C6416 = C6408 + C6409;
    const double C22075 = C22052 + C22053;
    const double C29178 = C29172 + C29173;
    const double C20564 =
        5 * (3 * C50159 - (C50154 * ce) / C49880 + C49872 * C50213) -
        ((4 * C50154 + C49872 * C50210) * ce) / C49880 +
        C49872 *
            (4 * C50213 - (C50210 * ce) / C49880 +
             C49872 *
                 (3 * C50211 - (C50204 * ce) / C49880 +
                  C49872 *
                      (2 * C50206 - (C50197 * ce) / C49880 +
                       C49872 * ((-(C49872 * C50034 * ce) / C49787) / C49742 -
                                 C49959 / C49880 +
                                 C49872 * ((-(C49872 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (C50034 * ce) / C49880)))));
    const double C20672 =
        3 * C50159 - (C50154 * ce) / C49880 + C49872 * C50213 +
        (3 * C50211 - (C50204 * ce) / C49880 +
         C49872 *
             (2 * C50206 - (C50197 * ce) / C49880 +
              C49872 *
                  ((-(C49872 * C50034 * ce) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49872 * ((-(C49872 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (C50034 * ce) / C49880)))) *
            C50169;
    const double C21020 =
        C50085 *
        (4 * C50213 - (C50210 * ce) / C49880 +
         C49872 *
             (3 * C50211 - (C50204 * ce) / C49880 +
              C49872 * (2 * C50206 - (C50197 * ce) / C49880 +
                        C49872 * ((-(C49872 * C50034 * ce) / C49787) / C49742 -
                                  C49959 / C49880 +
                                  C49872 * ((-(C49872 * std::pow(C49874, 8) *
                                               bs[8] * C49885) /
                                             C49787) /
                                                C49742 -
                                            (C50034 * ce) / C49880)))));
    const double C21292 =
        2 * C50085 * C50213 +
        C50085 *
            (C50213 +
             (2 * C50206 - (C50197 * ce) / C49880 +
              C49872 *
                  ((-(C49872 * C50034 * ce) / C49787) / C49742 -
                   C49959 / C49880 +
                   C49872 * ((-(C49872 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49787) /
                                 C49742 -
                             (C50034 * ce) / C49880))) *
                 C50169);
    const double C24880 = C24870 + C24871;
    const double C25831 = C24865 + C24864;
    const double C25830 = C24863 + C24862;
    const double C24879 = C24860 + C24861;
    const double C24878 = C24858 + C24859;
    const double C28645 = C25578 + C25579;
    const double C28642 = C25579 + C25578;
    const double C26501 = C25577 + C25576;
    const double C29827 = C25576 + C25577;
    const double C26500 = C25575 + C25574;
    const double C29826 = C25574 + C25575;
    const double C28641 = C25572 + C25573;
    const double C28639 = C25573 + C25572;
    const double C28640 = C25570 + C25571;
    const double C28638 = C25571 + C25570;
    const double C29166 = C26008 + C26009;
    const double C29165 = C26009 + C26008;
    const double C29167 = C26006 + C26007;
    const double C29164 = C26007 + C26006;
    const double C44780 = C27967 + C27966;
    const double C44781 = C27965 + C27964;
    const double C44783 = C27957 + C27956;
    const double C46576 = C30357 + C30356;
    const double C46577 = C30355 + C30354;
    const double C8139 = C8114 + C8115;
    const double C8136 = C8108 + C8109;
    const double C8131 = C8098 + C8099;
    const double C8128 = C8092 + C8093;
    const double C8125 = C8086 + C8087;
    const double C8122 = C8080 + C8081;
    const double C8121 = C8078 + C8079;
    const double C8118 = C8072 + C8073;
    const double C8449 = C8442 + C8443;
    const double C8446 = C8436 + C8437;
    const double C8825 = C8812 + C8813;
    const double C8822 = C8806 + C8807;
    const double C8817 = C8796 + C8797;
    const double C8814 = C8790 + C8791;
    const double C9087 = C9080 + C9081;
    const double C9084 = C9074 + C9075;
    const double C9251 = C9244 + C9245;
    const double C9248 = C9238 + C9239;
    const double C9755 = C9748 + C9749;
    const double C9752 = C9742 + C9743;
    const double C11095 = C11070 + C11071;
    const double C11092 = C11064 + C11065;
    const double C11087 = C11054 + C11055;
    const double C11084 = C11048 + C11049;
    const double C11083 = C11046 + C11047;
    const double C11080 = C11040 + C11041;
    const double C11075 = C11030 + C11031;
    const double C11072 = C11024 + C11025;
    const double C11403 = C11394 + C11395;
    const double C11400 = C11388 + C11389;
    const double C12881 = C12872 + C12873;
    const double C12878 = C12866 + C12867;
    const double C8138 = C8112 + C8113;
    const double C8135 = C8106 + C8107;
    const double C8132 = C8100 + C8101;
    const double C8129 = C8094 + C8095;
    const double C8126 = C8088 + C8089;
    const double C8123 = C8082 + C8083;
    const double C8120 = C8076 + C8077;
    const double C8117 = C8070 + C8071;
    const double C8448 = C8440 + C8441;
    const double C8445 = C8434 + C8435;
    const double C8824 = C8810 + C8811;
    const double C8821 = C8804 + C8805;
    const double C8818 = C8798 + C8799;
    const double C8815 = C8792 + C8793;
    const double C9086 = C9078 + C9079;
    const double C9083 = C9072 + C9073;
    const double C9250 = C9242 + C9243;
    const double C9247 = C9236 + C9237;
    const double C9754 = C9746 + C9747;
    const double C9751 = C9740 + C9741;
    const double C11094 = C11068 + C11069;
    const double C11091 = C11062 + C11063;
    const double C11088 = C11056 + C11057;
    const double C11085 = C11050 + C11051;
    const double C11082 = C11044 + C11045;
    const double C11079 = C11038 + C11039;
    const double C11076 = C11032 + C11033;
    const double C11073 = C11026 + C11027;
    const double C11404 = C11396 + C11397;
    const double C11401 = C11390 + C11391;
    const double C12882 = C12874 + C12875;
    const double C12879 = C12868 + C12869;
    const double C17209 = C17184 + C17185;
    const double C17206 = C17178 + C17179;
    const double C17201 = C17168 + C17169;
    const double C17198 = C17162 + C17163;
    const double C17195 = C17156 + C17157;
    const double C17192 = C17150 + C17151;
    const double C17191 = C17148 + C17149;
    const double C17188 = C17142 + C17143;
    const double C17519 = C17512 + C17513;
    const double C17516 = C17506 + C17507;
    const double C17895 = C17882 + C17883;
    const double C17892 = C17876 + C17877;
    const double C17887 = C17866 + C17867;
    const double C17884 = C17860 + C17861;
    const double C18157 = C18150 + C18151;
    const double C18154 = C18144 + C18145;
    const double C18321 = C18314 + C18315;
    const double C18318 = C18308 + C18309;
    const double C18825 = C18818 + C18819;
    const double C18822 = C18812 + C18813;
    const double C34149 = C34124 + C34125;
    const double C34146 = C34118 + C34119;
    const double C34141 = C34108 + C34109;
    const double C34138 = C34102 + C34103;
    const double C34137 = C34100 + C34101;
    const double C34134 = C34094 + C34095;
    const double C34129 = C34084 + C34085;
    const double C34126 = C34078 + C34079;
    const double C34457 = C34448 + C34449;
    const double C34454 = C34442 + C34443;
    const double C35935 = C35926 + C35927;
    const double C35932 = C35920 + C35921;
    const double C17208 = C17182 + C17183;
    const double C17205 = C17176 + C17177;
    const double C17202 = C17170 + C17171;
    const double C17199 = C17164 + C17165;
    const double C17196 = C17158 + C17159;
    const double C17193 = C17152 + C17153;
    const double C17190 = C17146 + C17147;
    const double C17187 = C17140 + C17141;
    const double C17518 = C17510 + C17511;
    const double C17515 = C17504 + C17505;
    const double C17894 = C17880 + C17881;
    const double C17891 = C17874 + C17875;
    const double C17888 = C17868 + C17869;
    const double C17885 = C17862 + C17863;
    const double C18156 = C18148 + C18149;
    const double C18153 = C18142 + C18143;
    const double C18320 = C18312 + C18313;
    const double C18317 = C18306 + C18307;
    const double C18824 = C18816 + C18817;
    const double C18821 = C18810 + C18811;
    const double C34148 = C34122 + C34123;
    const double C34145 = C34116 + C34117;
    const double C34142 = C34110 + C34111;
    const double C34139 = C34104 + C34105;
    const double C34136 = C34098 + C34099;
    const double C34133 = C34092 + C34093;
    const double C34130 = C34086 + C34087;
    const double C34127 = C34080 + C34081;
    const double C34458 = C34450 + C34451;
    const double C34455 = C34444 + C34445;
    const double C35936 = C35928 + C35929;
    const double C35933 = C35922 + C35923;
    const double C2737 = C2725 + C2726;
    const double C8134 = C8104 + C8105;
    const double C17204 = C17174 + C17175;
    const double C25194 = C25182 + C25183;
    const double C8444 = C8432 + C8433;
    const double C17514 = C17502 + C17503;
    const double C11402 = C11392 + C11393;
    const double C34456 = C34446 + C34447;
    const double C5787 = C5776 + C5777;
    const double C11086 = C11052 + C11053;
    const double C34140 = C34106 + C34107;
    const double C45105 = C45098 + C45099;
    const double C8820 = C8802 + C8803;
    const double C14090 = C14082 + C14083;
    const double C17890 = C17872 + C17873;
    const double C28170 = C28162 + C28163;
    const double C50054 = C50053 + C50047;
    const double C5470 = C5466 + C5467;
    const double C6410 = C6398 + C6399;
    const double C7812 = C7808 + C7809;
    const double C22101 = C22099 * C16986;
    const double C39321 = C22099 * C50755;
    const double C47481 = C22099 * C50909;
    const double C24553 = C24551 * C50805;
    const double C49729 = C24551 * C50805;
    const double C23091 = C23089 * C50805;
    const double C48361 = C23089 * C50805;
    const double C2412 = C2403 + C2404;
    const double C24881 = C24872 + C24873;
    const double C5464 = C5446 + C5447;
    const double C22427 = C22423 * C50653;
    const double C44782 = C27959 + C27958;
    const double C14552 = C3135 + C3136;
    const double C14551 = C3136 + C3135;
    const double C22413 = C22259 * C50653;
    const double C28644 = C25580 + C25581;
    const double C28643 = C25581 + C25580;
    const double C22653 = C21875 * C50705;
    const double C23448 = C21875 * C50705;
    const double C31399 = C21875 * C50653;
    const double C31903 = C20397 * C50705;
    const double C32645 = C20397 * C50705;
    const double C22085 = C22067 * C50805;
    const double C47480 = C22067 * C50805;
    const double C7320 = C7314 + C7315;
    const double C39327 = C39320 * C50755;
    const double C23618 = C20691 * C1210;
    const double C23934 = C20691 * C250;
    const double C32301 = C20691 * C50705;
    const double C33685 = C20691 * C50705;
    const double C32797 = C21027 * C1210;
    const double C33095 = C21027 * C250;
    const double C23087 = C23081 * C50705;
    const double C24547 = C23081 * C50705;
    const double C33195 = C23081 * C50653;
    const double C40276 = C23081 * C1210;
    const double C40478 = C23081 * C250;
    const double C24045 = C24037 * C50805;
    const double C49239 = C24037 * C50805;
    const double C39940 = C39939 * C50755;
    const double C40894 = C40893 * C50755;
    const double C2730 = C50615 * C293;
    const double C8111 = C7915 * C293;
    const double C17181 = C16985 * C293;
    const double C25187 = C50615 * C293;
    const double C8439 = C7915 * C294;
    const double C17509 = C16985 * C294;
    const double C11399 = C7915 * C430;
    const double C34453 = C16985 * C430;
    const double C5781 = C50615 * C435;
    const double C11059 = C7915 * C435;
    const double C34113 = C16985 * C435;
    const double C45103 = C50615 * C435;
    const double C8809 = C7915 * C798;
    const double C14087 = C50615 * C798;
    const double C17879 = C16985 * C798;
    const double C28167 = C50615 * C798;
    const double C22419 = C22261 * C50653;
    const double C31701 = C31553 * C50653;
    const double C39535 = C39533 * C50653;
    const double C22093 = C22075 * C50653;
    const double C39669 = C22075 * C50705;
    const double C40172 = C22075 * C50705;
    const double C45695 = C29166 * C50705;
    const double C47083 = C29166 * C50705;
    const double C45694 = C29167 * C904;
    const double C47082 = C29167 * C541;
    const double C44792 = C44780 * C121;
    const double C45692 = C44780 * C903;
    const double C47080 = C44780 * C540;
    const double C44793 = C44781 * C50653;
    const double C45693 = C44781 * C898;
    const double C47081 = C44781 * C50896;
    const double C44795 = C44783 * C121;
    const double C46586 = C46576 * C50653;
    const double C46587 = C46577 * C121;
    const double C295 =
        3 * C49940 + (C49938 * ae) / C49742 + C49869 * C49980 -
        (C49872 * C50054 * ce) / C49880 +
        C49872 *
            (C49872 *
                 (3 * C49977 + (C49974 * ae) / C49742 +
                  C49869 *
                      (2 * C49973 - (ae * C49967) / C49880 +
                       C49869 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                 C49959 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (ae * C49961) / C49880)))) -
             (C50054 * ce) / C49880);
    const double C545 =
        C49872 *
            (4 * C49980 + (C49978 * ae) / C49742 +
             C49869 *
                 (3 * C49977 + (C49974 * ae) / C49742 +
                  C49869 *
                      (2 * C49973 - (ae * C49967) / C49880 +
                       C49869 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                 C49959 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49787) /
                                               C49742 -
                                           (ae * C49961) / C49880))))) -
        ((4 * C50026 + C49869 * C50054 + (3 * C50018 + C49869 * C50045) * ae) *
         ce) /
            C49880;
    const double C799 =
        (zP - zQ) *
        (C49872 *
             (3 * C49977 + (C49974 * ae) / C49742 +
              C49869 * (2 * C49973 - (ae * C49967) / C49880 +
                        C49869 * ((-(ae * C49869 * C49961) / C49787) / C49742 -
                                  C49959 / C49880 +
                                  C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                               bs[8] * C49885) /
                                             C49787) /
                                                C49742 -
                                            (ae * C49961) / C49880)))) -
         (C50054 * ce) / C49880);
    const double C142 = (5 * (3 * C50007 + C49869 * C50026 + C50251 * ae) +
                         C49869 * (4 * C50026 + C49869 * C50054 + C50257 * ae) +
                         (4 * C50251 + C49869 * C50257) * ae) /
                        C49742;
    const double C284 =
        (3 * C50007 + C49869 * C50026 + C50251 * ae + C50054 * C50093) / C49742;
    const double C426 =
        (3 * C50007 + C49869 * C50026 + C50251 * ae + C50054 * C50169) / C49742;
    const double C543 =
        (C49872 * (4 * C50026 + C49869 * C50054 + C50257 * ae)) / C49742;
    const double C648 =
        (C50085 * (4 * C50026 + C49869 * C50054 + C50257 * ae)) / C49742;
    const double C793 = (C50085 * C49872 * C50054) / C49742;
    const double C5472 = C5470 * C50755;
    const double C6417 = C6410 - C6411;
    const double C7813 = C7812 - C7810;
    const double C24554 = C24552 + C24553;
    const double C49730 = C49728 + C49729;
    const double C23092 = C23090 + C23091;
    const double C48362 = C48360 + C48361;
    const double C5468 = C5464 * C50653;
    const double C44794 = C44782 * C50653;
    const double C22103 = C22085 + C22101;
    const double C47483 = C47480 + C47481;
    const double C7321 = C7320 * C50755;
    const double C24049 = C24045 + C24046;
    const double C49241 = C49239 + C49240;
    const double C2739 = C2729 + C2730;
    const double C8137 = C8110 + C8111;
    const double C17207 = C17180 + C17181;
    const double C25196 = C25186 + C25187;
    const double C8447 = C8438 + C8439;
    const double C17517 = C17508 + C17509;
    const double C11405 = C11398 + C11399;
    const double C34459 = C34452 + C34453;
    const double C5789 = C5780 + C5781;
    const double C11089 = C11058 + C11059;
    const double C34143 = C34112 + C34113;
    const double C45107 = C45102 + C45103;
    const double C8823 = C8808 + C8809;
    const double C14092 = C14086 + C14087;
    const double C17893 = C17878 + C17879;
    const double C28172 = C28166 + C28167;
    const double C44800 = C44792 + C44793;
    const double C45696 = C45692 + C45693;
    const double C47084 = C47080 + C47081;
    const double C46592 = C46586 + C46587;
    const double C6418 = C6417 - C6412;
    const double C7814 = C7813 - C7811;
    const double C5471 = C5468 + C5469;
    const double C44801 = C44794 + C44795;
    const double C44802 = C44800 * C50755;
    const double C45697 = C45696 - C45694;
    const double C47085 = C47084 - C47082;
    const double C46593 = C46592 * C50755;
    const double C6419 = C6418 * C50755;
    const double C7815 = C7814 * C50755;
    const double C5473 = C5471 * C50755;
    const double C44803 = C44801 * C50755;
    const double C45698 = C45697 - C45695;
    const double C47086 = C47085 - C47083;
    const double C45699 = C45698 * C50755;
    const double C47087 = C47086 * C50755;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C540 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50896 -
            (C8116 + C8117 + C8118) * C541 - (C8119 + C8120 + C8121) * C50705) *
               C50909 +
           ((C8118 + C8117 + C8116) * C540 + (C8121 + C8120 + C8119) * C50896 -
            (C8124 + C8123 + C8122) * C541 - (C8127 + C8126 + C8125) * C50705) *
               C50805) *
              C50767 * C50939 +
          (((C8128 + C8129 + C8130) * C541 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50896 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C540) +
            (C8131 + C8132 + C8133) * C50705) *
               C50909 +
           ((C8136 + C8135 + C8134) * C541 -
            ((C8133 + C8132 + C8131) * C50896 +
             (C8130 + C8129 + C8128) * C540) +
            (C8139 + C8138 + C8137) * C50705) *
               C50805) *
              C50767 * C50940 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C540 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C50896 -
            (C8444 + C8445 + C8446) * C541 - (C8447 + C8448 + C8449) * C50705) *
               C50909 +
           ((C8446 + C8445 + C8444) * C540 + (C8449 + C8448 + C8447) * C50896 -
            (C7920 * C265 + C7915 * C284 + C7919 * C263 + C50938 * C277 +
             C7918 * C262 + C50937 * C276) *
                C541 -
            (C7920 * C285 + C7915 * C295 + C7919 * C281 + C50938 * C293 +
             C7918 * C280 + C50937 * C292) *
                C50705) *
               C50805) *
              C50767 * C539) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C540 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C50896 -
             (C8116 + C8117 + C8118) * C541 -
             (C8119 + C8120 + C8121) * C50705) *
                C50909 +
            ((C8118 + C8117 + C8116) * C540 + (C8121 + C8120 + C8119) * C50896 -
             (C8124 + C8123 + C8122) * C541 -
             (C8127 + C8126 + C8125) * C50705) *
                C50805) *
               C50767 * C251 +
           (((C8128 + C8129 + C8130) * C541 -
             ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
               C7918 * C134 + C50937 * C144) *
                  C50896 +
              (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
               C7918 * C123 + C50937 * C130) *
                  C540) +
             (C8131 + C8132 + C8133) * C50705) *
                C50909 +
            ((C8136 + C8135 + C8134) * C541 -
             ((C8133 + C8132 + C8131) * C50896 +
              (C8130 + C8129 + C8128) * C540) +
             (C8139 + C8138 + C8137) * C50705) *
                C50805) *
               C50767 * C50640) *
              C50897 +
          ((((C8814 + C8815 + C8816) * C541 -
             ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
               C7918 * C415 + C50937 * C431) *
                  C50896 +
              (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
               C7918 * C401 + C50937 * C416) *
                  C540) +
             (C8817 + C8818 + C8819) * C50705) *
                C50909 +
            ((C7918 * C1447 + C50937 * C1451 + C7919 * C1446 + C50938 * C1450 +
              C7920 * C1445 + C7915 * C1449) *
                 C541 -
             ((C8819 + C8818 + C8817) * C50896 +
              (C8816 + C8815 + C8814) * C540) +
             (C7918 * C1455 + C50937 * C1459 + C7919 * C1454 + C50938 * C1458 +
              C7920 * C1453 + C7915 * C1457) *
                 C50705) *
                C50805) *
               C50767 * C251 +
           (((C7918 * C397 + C50937 * C407 + C7919 * C398 + C50938 * C408 +
              C7920 * C399 + C7915 * C409) *
                 C540 +
             (C7918 * C411 + C50937 * C427 + C7919 * C412 + C50938 * C428 +
              C7920 * C413 + C7915 * C429) *
                 C50896 -
             (C8820 + C8821 + C8822) * C541 -
             (C8823 + C8824 + C8825) * C50705) *
                C50909 +
            ((C8822 + C8821 + C8820) * C540 + (C8825 + C8824 + C8823) * C50896 -
             (C7920 * C1444 + C7915 * C1448 + C7919 * C1445 + C50938 * C1449 +
              C7918 * C1446 + C50937 * C1450) *
                 C541 -
             (C7920 * C1452 + C7915 * C1456 + C7919 * C1453 + C50938 * C1457 +
              C7918 * C1454 + C50937 * C1458) *
                 C50705) *
                C50805) *
               C50767 * C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C253 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C248 -
            (C8116 + C8117 + C8118) * C254 - (C8119 + C8120 + C8121) * C249 +
            (C8122 + C8123 + C8124) * C255 + (C8125 + C8126 + C8127) * C250) *
               C50909 +
           ((C8118 + C8117 + C8116) * C253 + (C8121 + C8120 + C8119) * C248 -
            (C8124 + C8123 + C8122) * C254 - (C8127 + C8126 + C8125) * C249 +
            (C7918 * C983 + C50937 * C987 + C7919 * C982 + C50938 * C986 +
             C7920 * C981 + C7915 * C985) *
                C255 +
            (C7918 * C991 + C50937 * C995 + C7919 * C990 + C50938 * C994 +
             C7920 * C989 + C7915 * C993) *
                C250) *
               C50805) *
              C50767 * C251 +
          (((C8128 + C8129 + C8130) * C254 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C248 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C253) +
            (C8131 + C8132 + C8133) * C249 - (C8134 + C8135 + C8136) * C255 -
            (C8137 + C8138 + C8139) * C250) *
               C50909 +
           ((C8136 + C8135 + C8134) * C254 -
            ((C8133 + C8132 + C8131) * C248 + (C8130 + C8129 + C8128) * C253) +
            (C8139 + C8138 + C8137) * C249 -
            (C7920 * C980 + C7915 * C984 + C7919 * C981 + C50938 * C985 +
             C7918 * C982 + C50937 * C986) *
                C255 -
            (C7920 * C988 + C7915 * C992 + C7919 * C989 + C50938 * C993 +
             C7918 * C990 + C50937 * C994) *
                C250) *
               C50805) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C121 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50653) *
               C50909 +
           ((C7918 * C259 + C50937 * C269 + C7919 * C258 + C50938 * C268 +
             C7920 * C257 + C7915 * C267) *
                C121 +
            (C7918 * C273 + C50937 * C289 + C7919 * C272 + C50938 * C288 +
             C7920 * C271 + C7915 * C287) *
                C50653) *
               C50805) *
              C50767 * C112 -
          (((C7920 * C270 + C7915 * C286 + C7919 * C271 + C50938 * C287 +
             C7918 * C272 + C50937 * C288) *
                C50653 +
            (C7920 * C256 + C7915 * C266 + C7919 * C257 + C50938 * C267 +
             C7918 * C258 + C50937 * C268) *
                C121) *
               C50805 +
           ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
             C7918 * C134 + C50937 * C144) *
                C50653 +
            (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
             C7918 * C123 + C50937 * C130) *
                C121) *
               C50909) *
              C50767 * C113 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C121 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C50653) *
               C50909 +
           ((C7918 * C257 + C50937 * C267 + C7919 * C256 + C50938 * C266 +
             C7920 * C264 + C7915 * C282) *
                C121 +
            (C7918 * C271 + C50937 * C287 + C7919 * C270 + C50938 * C286 +
             C7920 * C283 + C7915 * C294) *
                C50653) *
               C50805) *
              C50767 * C114 -
          (((C7920 * C544 + C7915 * C545 + C7919 * C283 + C50938 * C294 +
             C7918 * C270 + C50937 * C286) *
                C50653 +
            (C7920 * C542 + C7915 * C543 + C7919 * C264 + C50938 * C282 +
             C7918 * C256 + C50937 * C266) *
                C121) *
               C50805 +
           ((C7920 * C140 + C7915 * C148 + C7919 * C137 + C50938 * C147 +
             C7918 * C136 + C50937 * C146) *
                C50653 +
            (C7920 * C127 + C7915 * C139 + C7919 * C126 + C50938 * C138 +
             C7918 * C125 + C50937 * C132) *
                C121) *
               C50909) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C121 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C50653) *
                C50909 +
            ((C8118 + C8117 + C8116) * C121 +
             (C8121 + C8120 + C8119) * C50653) *
                C50805) *
               C50767 * C251 -
           (((C8133 + C8132 + C8131) * C50653 +
             (C8130 + C8129 + C8128) * C121) *
                C50805 +
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50653 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C121) *
                C50909) *
               C50767 * C50640) *
              C394 +
          ((((C7918 * C397 + C50937 * C407 + C7919 * C398 + C50938 * C408 +
              C7920 * C399 + C7915 * C409) *
                 C121 +
             (C7918 * C411 + C50937 * C427 + C7919 * C412 + C50938 * C428 +
              C7920 * C413 + C7915 * C429) *
                 C50653) *
                C50909 +
            ((C7918 * C781 + C50937 * C786 + C7919 * C782 + C50938 * C787 +
              C7920 * C783 + C7915 * C788) *
                 C121 +
             (C7918 * C790 + C50937 * C796 + C7919 * C791 + C50938 * C797 +
              C7920 * C792 + C7915 * C798) *
                 C50653) *
                C50805) *
               C50767 * C50640 -
           (((C7920 * C791 + C7915 * C797 + C7919 * C790 + C50938 * C796 +
              C7918 * C789 + C50937 * C795) *
                 C50653 +
             (C7920 * C782 + C7915 * C787 + C7919 * C781 + C50938 * C786 +
              C7918 * C780 + C50937 * C785) *
                 C121) *
                C50805 +
            ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
              C7918 * C415 + C50937 * C431) *
                 C50653 +
             (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
              C7918 * C401 + C50937 * C416) *
                 C121) *
                C50909) *
               C50767 * C251) *
              C395 +
          ((((C7918 * C402 + C50937 * C417 + C7919 * C403 + C50938 * C418 +
              C7920 * C404 + C7915 * C419) *
                 C121 +
             (C7918 * C421 + C50937 * C432 + C7919 * C422 + C50938 * C433 +
              C7920 * C423 + C7915 * C434) *
                 C50653) *
                C50909 +
            ((C7918 * C1097 + C50937 * C1101 + C7919 * C1096 + C50938 * C1100 +
              C7920 * C1095 + C7915 * C1099) *
                 C121 +
             (C7918 * C1105 + C50937 * C1109 + C7919 * C1104 + C50938 * C1108 +
              C7920 * C1103 + C7915 * C1107) *
                 C50653) *
                C50805) *
               C50767 * C251 -
           (((C7920 * C1102 + C7915 * C1106 + C7919 * C1103 + C50938 * C1107 +
              C7918 * C1104 + C50937 * C1108) *
                 C50653 +
             (C7920 * C1094 + C7915 * C1098 + C7919 * C1095 + C50938 * C1099 +
              C7918 * C1096 + C50937 * C1100) *
                 C121) *
                C50805 +
            ((C7920 * C424 + C7915 * C435 + C7919 * C423 + C50938 * C434 +
              C7918 * C422 + C50937 * C433) *
                 C50653 +
             (C7920 * C405 + C7915 * C420 + C7919 * C404 + C50938 * C419 +
              C7918 * C403 + C50937 * C418) *
                 C121) *
                C50909) *
               C50767 * C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C7918 * C122 + C50937 * C129 + C7919 * C123 +
                     C50938 * C130 + C7920 * C124 + C7915 * C131) *
                        C121 +
                    (C7918 * C133 + C50937 * C143 + C7919 * C134 +
                     C50938 * C144 + C7920 * C135 + C7915 * C145) *
                        C50653) *
                       C50909 +
                   ((C8118 + C8117 + C8116) * C121 +
                    (C8121 + C8120 + C8119) * C50653) *
                       C50805) *
                      C50767 * C50939 -
                  (((C8133 + C8132 + C8131) * C50653 +
                    (C8130 + C8129 + C8128) * C121) *
                       C50805 +
                   ((C7920 * C136 + C7915 * C146 + C7919 * C135 +
                     C50938 * C145 + C7918 * C134 + C50937 * C144) *
                        C50653 +
                    (C7920 * C125 + C7915 * C132 + C7919 * C124 +
                     C50938 * C131 + C7918 * C123 + C50937 * C130) *
                        C121) *
                       C50909) *
                      C50767 * C50940 +
                  (((C7918 * C124 + C50937 * C131 + C7919 * C125 +
                     C50938 * C132 + C7920 * C126 + C7915 * C138) *
                        C121 +
                    (C7918 * C135 + C50937 * C145 + C7919 * C136 +
                     C50938 * C146 + C7920 * C137 + C7915 * C147) *
                        C50653) *
                       C50909 +
                   ((C8446 + C8445 + C8444) * C121 +
                    (C8449 + C8448 + C8447) * C50653) *
                       C50805) *
                      C50767 * C539) *
                     C50897 +
                 ((((C7918 * C397 + C50937 * C407 + C7919 * C398 +
                     C50938 * C408 + C7920 * C399 + C7915 * C409) *
                        C121 +
                    (C7918 * C411 + C50937 * C427 + C7919 * C412 +
                     C50938 * C428 + C7920 * C413 + C7915 * C429) *
                        C50653) *
                       C50909 +
                   ((C7918 * C781 + C50937 * C786 + C7919 * C782 +
                     C50938 * C787 + C7920 * C783 + C7915 * C788) *
                        C121 +
                    (C7918 * C790 + C50937 * C796 + C7919 * C791 +
                     C50938 * C797 + C7920 * C792 + C7915 * C798) *
                        C50653) *
                       C50805) *
                      C50767 * C50940 -
                  (((C7920 * C791 + C7915 * C797 + C7919 * C790 +
                     C50938 * C796 + C7918 * C789 + C50937 * C795) *
                        C50653 +
                    (C7920 * C782 + C7915 * C787 + C7919 * C781 +
                     C50938 * C786 + C7918 * C780 + C50937 * C785) *
                        C121) *
                       C50805 +
                   ((C7920 * C412 + C7915 * C428 + C7919 * C411 +
                     C50938 * C427 + C7918 * C415 + C50937 * C431) *
                        C50653 +
                    (C7920 * C398 + C7915 * C408 + C7919 * C397 +
                     C50938 * C407 + C7918 * C401 + C50937 * C416) *
                        C121) *
                       C50909) *
                      C50767 * C50939 -
                  (((C7920 * C794 + C7915 * C799 + C7919 * C792 +
                     C50938 * C798 + C7918 * C791 + C50937 * C797) *
                        C50653 +
                    (C7920 * C784 + C7915 * C793 + C7919 * C783 +
                     C50938 * C788 + C7918 * C782 + C50937 * C787) *
                        C121) *
                       C50805 +
                   ((C7920 * C414 + C7915 * C430 + C7919 * C413 +
                     C50938 * C429 + C7918 * C412 + C50937 * C428) *
                        C50653 +
                    (C7920 * C400 + C7915 * C410 + C7919 * C399 +
                     C50938 * C409 + C7918 * C398 + C50937 * C408) *
                        C121) *
                       C50909) *
                      C50767 * C539) *
                     C50733)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C121 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50653) *
               C50909 +
           ((C7918 * C259 + C50937 * C269 + C7919 * C258 + C50938 * C268 +
             C7920 * C257 + C7915 * C267) *
                C121 +
            (C7918 * C273 + C50937 * C289 + C7919 * C272 + C50938 * C288 +
             C7920 * C271 + C7915 * C287) *
                C50653) *
               C50805) *
              C50767 * C112 -
          (((C7920 * C270 + C7915 * C286 + C7919 * C271 + C50938 * C287 +
             C7918 * C272 + C50937 * C288) *
                C50653 +
            (C7920 * C256 + C7915 * C266 + C7919 * C257 + C50938 * C267 +
             C7918 * C258 + C50937 * C268) *
                C121) *
               C50805 +
           ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
             C7918 * C134 + C50937 * C144) *
                C50653 +
            (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
             C7918 * C123 + C50937 * C130) *
                C121) *
               C50909) *
              C50767 * C113 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C121 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C50653) *
               C50909 +
           ((C7918 * C257 + C50937 * C267 + C7919 * C256 + C50938 * C266 +
             C7920 * C264 + C7915 * C282) *
                C121 +
            (C7918 * C271 + C50937 * C287 + C7919 * C270 + C50938 * C286 +
             C7920 * C283 + C7915 * C294) *
                C50653) *
               C50805) *
              C50767 * C114 -
          (((C7920 * C544 + C7915 * C545 + C7919 * C283 + C50938 * C294 +
             C7918 * C270 + C50937 * C286) *
                C50653 +
            (C7920 * C542 + C7915 * C543 + C7919 * C264 + C50938 * C282 +
             C7918 * C256 + C50937 * C266) *
                C121) *
               C50805 +
           ((C7920 * C140 + C7915 * C148 + C7919 * C137 + C50938 * C147 +
             C7918 * C136 + C50937 * C146) *
                C50653 +
            (C7920 * C127 + C7915 * C139 + C7919 * C126 + C50938 * C138 +
             C7918 * C125 + C50937 * C132) *
                C121) *
               C50909) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C253 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C248 -
            (C8116 + C8117 + C8118) * C254 - (C8119 + C8120 + C8121) * C249 +
            (C8122 + C8123 + C8124) * C255 + (C8125 + C8126 + C8127) * C250) *
               C50909 +
           ((C8118 + C8117 + C8116) * C253 + (C8121 + C8120 + C8119) * C248 -
            (C8124 + C8123 + C8122) * C254 - (C8127 + C8126 + C8125) * C249 +
            (C7918 * C983 + C50937 * C987 + C7919 * C982 + C50938 * C986 +
             C7920 * C981 + C7915 * C985) *
                C255 +
            (C7918 * C991 + C50937 * C995 + C7919 * C990 + C50938 * C994 +
             C7920 * C989 + C7915 * C993) *
                C250) *
               C50805) *
              C50767 * C251 +
          (((C8128 + C8129 + C8130) * C254 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C248 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C253) +
            (C8131 + C8132 + C8133) * C249 - (C8134 + C8135 + C8136) * C255 -
            (C8137 + C8138 + C8139) * C250) *
               C50909 +
           ((C8136 + C8135 + C8134) * C254 -
            ((C8133 + C8132 + C8131) * C248 + (C8130 + C8129 + C8128) * C253) +
            (C8139 + C8138 + C8137) * C249 -
            (C7920 * C980 + C7915 * C984 + C7919 * C981 + C50938 * C985 +
             C7918 * C982 + C50937 * C986) *
                C255 -
            (C7920 * C988 + C7915 * C992 + C7919 * C989 + C50938 * C993 +
             C7918 * C990 + C50937 * C994) *
                C250) *
               C50805) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C1213 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50941 -
            (C8116 + C8117 + C8118) * C1214 - (C8119 + C8120 + C8121) * C50942 +
            (C8122 + C8123 + C8124) * C1215 + (C8125 + C8126 + C8127) * C1210) *
               C50909 +
           ((C8118 + C8117 + C8116) * C1213 + (C8121 + C8120 + C8119) * C50941 -
            (C8124 + C8123 + C8122) * C1214 - (C8127 + C8126 + C8125) * C50942 +
            (C9084 + C9083 + C9082) * C1215 + (C9087 + C9086 + C9085) * C1210) *
               C50805) *
              C50767 * C50888 +
          (((C8128 + C8129 + C8130) * C1214 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50941 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C1213) +
            (C8131 + C8132 + C8133) * C50942 - (C8134 + C8135 + C8136) * C1215 -
            (C8137 + C8138 + C8139) * C1210) *
               C50909 +
           ((C8136 + C8135 + C8134) * C1214 -
            ((C8133 + C8132 + C8131) * C50941 +
             (C8130 + C8129 + C8128) * C1213) +
            (C8139 + C8138 + C8137) * C50942 -
            (C7920 * C980 + C7915 * C984 + C7919 * C981 + C50938 * C985 +
             C7918 * C982 + C50937 * C986) *
                C1215 -
            (C7920 * C988 + C7915 * C992 + C7919 * C989 + C50938 * C993 +
             C7918 * C990 + C50937 * C994) *
                C1210) *
               C50805) *
              C50767 * C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C1213 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50941 -
            (C8116 + C8117 + C8118) * C1214 - (C8119 + C8120 + C8121) * C50942 +
            (C8122 + C8123 + C8124) * C1215 + (C8125 + C8126 + C8127) * C1210) *
               C50909 +
           ((C8118 + C8117 + C8116) * C1213 + (C8121 + C8120 + C8119) * C50941 -
            (C8124 + C8123 + C8122) * C1214 - (C8127 + C8126 + C8125) * C50942 +
            (C9084 + C9083 + C9082) * C1215 + (C9087 + C9086 + C9085) * C1210) *
               C50805) *
              C50767 * C50635 * C50897 +
          (((C8814 + C8815 + C8816) * C1214 -
            ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
              C7918 * C415 + C50937 * C431) *
                 C50941 +
             (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
              C7918 * C401 + C50937 * C416) *
                 C1213) +
            (C8817 + C8818 + C8819) * C50942 - (C9750 + C9751 + C9752) * C1215 -
            (C9753 + C9754 + C9755) * C1210) *
               C50909 +
           ((C9752 + C9751 + C9750) * C1214 -
            ((C8819 + C8818 + C8817) * C50941 +
             (C8816 + C8815 + C8814) * C1213) +
            (C9755 + C9754 + C9753) * C50942 -
            (C7920 * C3082 + C7915 * C3087 + C7919 * C3081 + C50938 * C3084 +
             C7918 * C3080 + C50937 * C3083) *
                C1215 -
            (C7920 * C3088 + C7915 * C3091 + C7919 * C3086 + C50938 * C3090 +
             C7918 * C3085 + C50937 * C3089) *
                C1210) *
               C50805) *
              C50767 * C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
            C7920 * C124 + C7915 * C131) *
               C976 +
           (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
            C7920 * C135 + C7915 * C145) *
               C971 -
           (C8116 + C8117 + C8118) * C977 - (C8119 + C8120 + C8121) * C972 +
           (C8122 + C8123 + C8124) * C978 + (C8125 + C8126 + C8127) * C973 -
           (C9082 + C9083 + C9084) * C979 - (C9085 + C9086 + C9087) * C974) *
              C50909 +
          ((C8118 + C8117 + C8116) * C976 + (C8121 + C8120 + C8119) * C971 -
           (C8124 + C8123 + C8122) * C977 - (C8127 + C8126 + C8125) * C972 +
           (C9084 + C9083 + C9082) * C978 + (C9087 + C9086 + C9085) * C973 -
           (C7920 * C2326 + C7915 * C2331 + C7919 * C2325 + C50938 * C2328 +
            C7918 * C2324 + C50937 * C2327) *
               C979 -
           (C7920 * C2332 + C7915 * C2335 + C7919 * C2330 + C50938 * C2334 +
            C7918 * C2329 + C50937 * C2333) *
               C974) *
              C50805) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C903 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C898 -
            (C8116 + C8117 + C8118) * C904 - (C8119 + C8120 + C8121) * C50705) *
               C50909 +
           ((C8118 + C8117 + C8116) * C903 + (C8121 + C8120 + C8119) * C898 -
            (C8124 + C8123 + C8122) * C904 - (C8127 + C8126 + C8125) * C50705) *
               C50805) *
              C50767 * C900 +
          (((C8128 + C8129 + C8130) * C904 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C898 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C903) +
            (C8131 + C8132 + C8133) * C50705) *
               C50909 +
           ((C8136 + C8135 + C8134) * C904 -
            ((C8133 + C8132 + C8131) * C898 + (C8130 + C8129 + C8128) * C903) +
            (C8139 + C8138 + C8137) * C50705) *
               C50805) *
              C50767 * C901 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C903 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C898 -
            (C8444 + C8445 + C8446) * C904 - (C8447 + C8448 + C8449) * C50705) *
               C50909 +
           ((C8446 + C8445 + C8444) * C903 + (C8449 + C8448 + C8447) * C898 -
            (C7920 * C265 + C7915 * C284 + C7919 * C263 + C50938 * C277 +
             C7918 * C262 + C50937 * C276) *
                C904 -
            (C7920 * C285 + C7915 * C295 + C7919 * C281 + C50938 * C293 +
             C7918 * C280 + C50937 * C292) *
                C50705) *
               C50805) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C903 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C898 -
            (C8116 + C8117 + C8118) * C904 - (C8119 + C8120 + C8121) * C50705) *
               C50909 +
           ((C8118 + C8117 + C8116) * C903 + (C8121 + C8120 + C8119) * C898 -
            (C8124 + C8123 + C8122) * C904 - (C8127 + C8126 + C8125) * C50705) *
               C50805) *
              C50767 * C50635 * C394 +
          (((C8814 + C8815 + C8816) * C904 -
            ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
              C7918 * C415 + C50937 * C431) *
                 C898 +
             (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
              C7918 * C401 + C50937 * C416) *
                 C903) +
            (C8817 + C8818 + C8819) * C50705) *
               C50909 +
           ((C7918 * C1447 + C50937 * C1451 + C7919 * C1446 + C50938 * C1450 +
             C7920 * C1445 + C7915 * C1449) *
                C904 -
            ((C8819 + C8818 + C8817) * C898 + (C8816 + C8815 + C8814) * C903) +
            (C7918 * C1455 + C50937 * C1459 + C7919 * C1454 + C50938 * C1458 +
             C7920 * C1453 + C7915 * C1457) *
                C50705) *
               C50805) *
              C50767 * C50635 * C395 +
          (((C7918 * C402 + C50937 * C417 + C7919 * C403 + C50938 * C418 +
             C7920 * C404 + C7915 * C419) *
                C903 +
            (C7918 * C421 + C50937 * C432 + C7919 * C422 + C50938 * C433 +
             C7920 * C423 + C7915 * C434) *
                C898 -
            (C9246 + C9247 + C9248) * C904 - (C9249 + C9250 + C9251) * C50705) *
               C50909 +
           ((C9248 + C9247 + C9246) * C903 + (C9251 + C9250 + C9249) * C898 -
            (C7920 * C2560 + C7915 * C2566 + C7919 * C2559 + C50938 * C2562 +
             C7918 * C2558 + C50937 * C2561) *
                C904 -
            (C7920 * C2565 + C7915 * C2569 + C7919 * C2564 + C50938 * C2568 +
             C7918 * C2563 + C50937 * C2567) *
                C50705) *
               C50805) *
              C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C903 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C898 -
             (C8116 + C8117 + C8118) * C904 -
             (C8119 + C8120 + C8121) * C50705) *
                C50909 +
            ((C8118 + C8117 + C8116) * C903 + (C8121 + C8120 + C8119) * C898 -
             (C8124 + C8123 + C8122) * C904 -
             (C8127 + C8126 + C8125) * C50705) *
                C50805) *
               C50767 * C50888 +
           (((C8128 + C8129 + C8130) * C904 -
             ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
               C7918 * C134 + C50937 * C144) *
                  C898 +
              (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
               C7918 * C123 + C50937 * C130) *
                  C903) +
             (C8131 + C8132 + C8133) * C50705) *
                C50909 +
            ((C8136 + C8135 + C8134) * C904 -
             ((C8133 + C8132 + C8131) * C898 + (C8130 + C8129 + C8128) * C903) +
             (C8139 + C8138 + C8137) * C50705) *
                C50805) *
               C50767 * C50640) *
              C50897 +
          ((((C8814 + C8815 + C8816) * C904 -
             ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
               C7918 * C415 + C50937 * C431) *
                  C898 +
              (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
               C7918 * C401 + C50937 * C416) *
                  C903) +
             (C8817 + C8818 + C8819) * C50705) *
                C50909 +
            ((C7918 * C1447 + C50937 * C1451 + C7919 * C1446 + C50938 * C1450 +
              C7920 * C1445 + C7915 * C1449) *
                 C904 -
             ((C8819 + C8818 + C8817) * C898 + (C8816 + C8815 + C8814) * C903) +
             (C7918 * C1455 + C50937 * C1459 + C7919 * C1454 + C50938 * C1458 +
              C7920 * C1453 + C7915 * C1457) *
                 C50705) *
                C50805) *
               C50767 * C50888 +
           (((C7918 * C397 + C50937 * C407 + C7919 * C398 + C50938 * C408 +
              C7920 * C399 + C7915 * C409) *
                 C903 +
             (C7918 * C411 + C50937 * C427 + C7919 * C412 + C50938 * C428 +
              C7920 * C413 + C7915 * C429) *
                 C898 -
             (C8820 + C8821 + C8822) * C904 -
             (C8823 + C8824 + C8825) * C50705) *
                C50909 +
            ((C8822 + C8821 + C8820) * C903 + (C8825 + C8824 + C8823) * C898 -
             (C7920 * C1444 + C7915 * C1448 + C7919 * C1445 + C50938 * C1449 +
              C7918 * C1446 + C50937 * C1450) *
                 C904 -
             (C7920 * C1452 + C7915 * C1456 + C7919 * C1453 + C50938 * C1457 +
              C7918 * C1454 + C50937 * C1458) *
                 C50705) *
                C50805) *
               C50767 * C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C903 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C898 -
            (C8116 + C8117 + C8118) * C904 - (C8119 + C8120 + C8121) * C50705) *
               C50909 +
           ((C8118 + C8117 + C8116) * C903 + (C8121 + C8120 + C8119) * C898 -
            (C8124 + C8123 + C8122) * C904 - (C8127 + C8126 + C8125) * C50705) *
               C50805) *
              C50767 * C900 +
          (((C8128 + C8129 + C8130) * C904 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C898 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C903) +
            (C8131 + C8132 + C8133) * C50705) *
               C50909 +
           ((C8136 + C8135 + C8134) * C904 -
            ((C8133 + C8132 + C8131) * C898 + (C8130 + C8129 + C8128) * C903) +
            (C8139 + C8138 + C8137) * C50705) *
               C50805) *
              C50767 * C901 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C903 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C898 -
            (C8444 + C8445 + C8446) * C904 - (C8447 + C8448 + C8449) * C50705) *
               C50909 +
           ((C8446 + C8445 + C8444) * C903 + (C8449 + C8448 + C8447) * C898 -
            (C7920 * C265 + C7915 * C284 + C7919 * C263 + C50938 * C277 +
             C7918 * C262 + C50937 * C276) *
                C904 -
            (C7920 * C285 + C7915 * C295 + C7919 * C281 + C50938 * C293 +
             C7918 * C280 + C50937 * C292) *
                C50705) *
               C50805) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
            C7920 * C124 + C7915 * C131) *
               C976 +
           (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
            C7920 * C135 + C7915 * C145) *
               C971 -
           (C8116 + C8117 + C8118) * C977 - (C8119 + C8120 + C8121) * C972 +
           (C8122 + C8123 + C8124) * C978 + (C8125 + C8126 + C8127) * C973 -
           (C9082 + C9083 + C9084) * C979 - (C9085 + C9086 + C9087) * C974) *
              C50909 +
          ((C8118 + C8117 + C8116) * C976 + (C8121 + C8120 + C8119) * C971 -
           (C8124 + C8123 + C8122) * C977 - (C8127 + C8126 + C8125) * C972 +
           (C9084 + C9083 + C9082) * C978 + (C9087 + C9086 + C9085) * C973 -
           (C7920 * C2326 + C7915 * C2331 + C7919 * C2325 + C50938 * C2328 +
            C7918 * C2324 + C50937 * C2327) *
               C979 -
           (C7920 * C2332 + C7915 * C2335 + C7919 * C2330 + C50938 * C2334 +
            C7918 * C2329 + C50937 * C2333) *
               C974) *
              C50805) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C540 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C50896 -
             (C8116 + C8117 + C8118) * C541 -
             (C8119 + C8120 + C8121) * C50705) *
                C50909 +
            ((C8118 + C8117 + C8116) * C540 + (C8121 + C8120 + C8119) * C50896 -
             (C8124 + C8123 + C8122) * C541 -
             (C8127 + C8126 + C8125) * C50705) *
                C50805) *
               C50767 * C50888 +
           (((C8128 + C8129 + C8130) * C541 -
             ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
               C7918 * C134 + C50937 * C144) *
                  C50896 +
              (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
               C7918 * C123 + C50937 * C130) *
                  C540) +
             (C8131 + C8132 + C8133) * C50705) *
                C50909 +
            ((C8136 + C8135 + C8134) * C541 -
             ((C8133 + C8132 + C8131) * C50896 +
              (C8130 + C8129 + C8128) * C540) +
             (C8139 + C8138 + C8137) * C50705) *
                C50805) *
               C50767 * C50640) *
              C1558 +
          ((((C8814 + C8815 + C8816) * C541 -
             ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
               C7918 * C415 + C50937 * C431) *
                  C50896 +
              (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
               C7918 * C401 + C50937 * C416) *
                  C540) +
             (C8817 + C8818 + C8819) * C50705) *
                C50909 +
            ((C9752 + C9751 + C9750) * C541 -
             ((C8819 + C8818 + C8817) * C50896 +
              (C8816 + C8815 + C8814) * C540) +
             (C9755 + C9754 + C9753) * C50705) *
                C50805) *
               C50767 * C50888 +
           (((C7918 * C397 + C50937 * C407 + C7919 * C398 + C50938 * C408 +
              C7920 * C399 + C7915 * C409) *
                 C540 +
             (C7918 * C411 + C50937 * C427 + C7919 * C412 + C50938 * C428 +
              C7920 * C413 + C7915 * C429) *
                 C50896 -
             (C8820 + C8821 + C8822) * C541 -
             (C8823 + C8824 + C8825) * C50705) *
                C50909 +
            ((C8822 + C8821 + C8820) * C540 + (C8825 + C8824 + C8823) * C50896 -
             (C7920 * C1444 + C7915 * C1448 + C7919 * C1445 + C50938 * C1449 +
              C7918 * C1446 + C50937 * C1450) *
                 C541 -
             (C7920 * C1452 + C7915 * C1456 + C7919 * C1453 + C50938 * C1457 +
              C7918 * C1454 + C50937 * C1458) *
                 C50705) *
                C50805) *
               C50767 * C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C540 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50896 -
            (C8116 + C8117 + C8118) * C541 - (C8119 + C8120 + C8121) * C50705) *
               C50909 +
           ((C8118 + C8117 + C8116) * C540 + (C8121 + C8120 + C8119) * C50896 -
            (C8124 + C8123 + C8122) * C541 - (C8127 + C8126 + C8125) * C50705) *
               C50805) *
              C50767 * C50635 * C50943 +
          (((C8814 + C8815 + C8816) * C541 -
            ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
              C7918 * C415 + C50937 * C431) *
                 C50896 +
             (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
              C7918 * C401 + C50937 * C416) *
                 C540) +
            (C8817 + C8818 + C8819) * C50705) *
               C50909 +
           ((C9752 + C9751 + C9750) * C541 -
            ((C8819 + C8818 + C8817) * C50896 +
             (C8816 + C8815 + C8814) * C540) +
            (C9755 + C9754 + C9753) * C50705) *
               C50805) *
              C50767 * C50635 * C50944 +
          (((C7918 * C402 + C50937 * C417 + C7919 * C403 + C50938 * C418 +
             C7920 * C404 + C7915 * C419) *
                C540 +
            (C7918 * C421 + C50937 * C432 + C7919 * C422 + C50938 * C433 +
             C7920 * C423 + C7915 * C434) *
                C50896 -
            (C9246 + C9247 + C9248) * C541 - (C9249 + C9250 + C9251) * C50705) *
               C50909 +
           ((C9248 + C9247 + C9246) * C540 + (C9251 + C9250 + C9249) * C50896 -
            (C7920 * C2560 + C7915 * C2566 + C7919 * C2559 + C50938 * C2562 +
             C7918 * C2558 + C50937 * C2561) *
                C541 -
            (C7920 * C2565 + C7915 * C2569 + C7919 * C2564 + C50938 * C2568 +
             C7918 * C2563 + C50937 * C2567) *
                C50705) *
               C50805) *
              C50767 * C50635 * C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C253 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C248 -
            (C8116 + C8117 + C8118) * C254 - (C8119 + C8120 + C8121) * C249 +
            (C8122 + C8123 + C8124) * C255 + (C8125 + C8126 + C8127) * C250) *
               C50909 +
           ((C8118 + C8117 + C8116) * C253 + (C8121 + C8120 + C8119) * C248 -
            (C8124 + C8123 + C8122) * C254 - (C8127 + C8126 + C8125) * C249 +
            (C9084 + C9083 + C9082) * C255 + (C9087 + C9086 + C9085) * C250) *
               C50805) *
              C50767 * C50635 * C1558 +
          (((C8814 + C8815 + C8816) * C254 -
            ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
              C7918 * C415 + C50937 * C431) *
                 C248 +
             (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
              C7918 * C401 + C50937 * C416) *
                 C253) +
            (C8817 + C8818 + C8819) * C249 - (C9750 + C9751 + C9752) * C255 -
            (C9753 + C9754 + C9755) * C250) *
               C50909 +
           ((C9752 + C9751 + C9750) * C254 -
            ((C8819 + C8818 + C8817) * C248 + (C8816 + C8815 + C8814) * C253) +
            (C9755 + C9754 + C9753) * C249 -
            (C7920 * C3082 + C7915 * C3087 + C7919 * C3081 + C50938 * C3084 +
             C7918 * C3080 + C50937 * C3083) *
                C255 -
            (C7920 * C3088 + C7915 * C3091 + C7919 * C3086 + C50938 * C3090 +
             C7918 * C3085 + C50937 * C3089) *
                C250) *
               C50805) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C121 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C50653) *
                C50909 +
            ((C8118 + C8117 + C8116) * C121 +
             (C8121 + C8120 + C8119) * C50653) *
                C50805) *
               C50767 * C900 -
           (((C8133 + C8132 + C8131) * C50653 +
             (C8130 + C8129 + C8128) * C121) *
                C50805 +
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50653 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C121) *
                C50909) *
               C50767 * C901 +
           (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
              C7920 * C126 + C7915 * C138) *
                 C121 +
             (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
              C7920 * C137 + C7915 * C147) *
                 C50653) *
                C50909 +
            ((C8446 + C8445 + C8444) * C121 +
             (C8449 + C8448 + C8447) * C50653) *
                C50805) *
               C50767 * C902) *
              C1558 +
          ((((C7918 * C397 + C50937 * C407 + C7919 * C398 + C50938 * C408 +
              C7920 * C399 + C7915 * C409) *
                 C121 +
             (C7918 * C411 + C50937 * C427 + C7919 * C412 + C50938 * C428 +
              C7920 * C413 + C7915 * C429) *
                 C50653) *
                C50909 +
            ((C8822 + C8821 + C8820) * C121 +
             (C8825 + C8824 + C8823) * C50653) *
                C50805) *
               C50767 * C901 -
           (((C8819 + C8818 + C8817) * C50653 +
             (C8816 + C8815 + C8814) * C121) *
                C50805 +
            ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
              C7918 * C415 + C50937 * C431) *
                 C50653 +
             (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
              C7918 * C401 + C50937 * C416) *
                 C121) *
                C50909) *
               C50767 * C900 -
           (((C7920 * C794 + C7915 * C799 + C7919 * C792 + C50938 * C798 +
              C7918 * C791 + C50937 * C797) *
                 C50653 +
             (C7920 * C784 + C7915 * C793 + C7919 * C783 + C50938 * C788 +
              C7918 * C782 + C50937 * C787) *
                 C121) *
                C50805 +
            ((C7920 * C414 + C7915 * C430 + C7919 * C413 + C50938 * C429 +
              C7918 * C412 + C50937 * C428) *
                 C50653 +
             (C7920 * C400 + C7915 * C410 + C7919 * C399 + C50938 * C409 +
              C7918 * C398 + C50937 * C408) *
                 C121) *
                C50909) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C121 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50653) *
               C50909 +
           ((C8118 + C8117 + C8116) * C121 + (C8121 + C8120 + C8119) * C50653) *
               C50805) *
              C50767 * C50635 * C1724 -
          (((C8819 + C8818 + C8817) * C50653 + (C8816 + C8815 + C8814) * C121) *
               C50805 +
           ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
             C7918 * C415 + C50937 * C431) *
                C50653 +
            (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
             C7918 * C401 + C50937 * C416) *
                C121) *
               C50909) *
              C50767 * C50635 * C1725 +
          (((C7918 * C402 + C50937 * C417 + C7919 * C403 + C50938 * C418 +
             C7920 * C404 + C7915 * C419) *
                C121 +
            (C7918 * C421 + C50937 * C432 + C7919 * C422 + C50938 * C433 +
             C7920 * C423 + C7915 * C434) *
                C50653) *
               C50909 +
           ((C9248 + C9247 + C9246) * C121 + (C9251 + C9250 + C9249) * C50653) *
               C50805) *
              C50767 * C50635 * C1726 -
          (((C7920 * C5985 + C7915 * C5986 + C7919 * C4490 + C50938 * C4496 +
             C7918 * C4491 + C50937 * C4497) *
                C50653 +
            (C7920 * C5983 + C7915 * C5984 + C7919 * C4484 + C50938 * C4492 +
             C7918 * C4485 + C50937 * C4493) *
                C121) *
               C50805 +
           ((C7920 * C1733 + C7915 * C1741 + C7919 * C1734 + C50938 * C1742 +
             C7918 * C1735 + C50937 * C1743) *
                C50653 +
            (C7920 * C1729 + C7915 * C1737 + C7919 * C1730 + C50938 * C1738 +
             C7918 * C1731 + C50937 * C1739) *
                C121) *
               C50909) *
              C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7918 * C122 + C50937 * C129 + C7919 * C123 +
                      C50938 * C130 + C7920 * C124 + C7915 * C131) *
                         C121 +
                     (C7918 * C133 + C50937 * C143 + C7919 * C134 +
                      C50938 * C144 + C7920 * C135 + C7915 * C145) *
                         C50653) *
                        C50909 +
                    ((C8118 + C8117 + C8116) * C121 +
                     (C8121 + C8120 + C8119) * C50653) *
                        C50805) *
                       C50767 * C50888 -
                   (((C8133 + C8132 + C8131) * C50653 +
                     (C8130 + C8129 + C8128) * C121) *
                        C50805 +
                    ((C7920 * C136 + C7915 * C146 + C7919 * C135 +
                      C50938 * C145 + C7918 * C134 + C50937 * C144) *
                         C50653 +
                     (C7920 * C125 + C7915 * C132 + C7919 * C124 +
                      C50938 * C131 + C7918 * C123 + C50937 * C130) *
                         C121) *
                        C50909) *
                       C50767 * C50640) *
                      C50943 +
                  ((((C7918 * C397 + C50937 * C407 + C7919 * C398 +
                      C50938 * C408 + C7920 * C399 + C7915 * C409) *
                         C121 +
                     (C7918 * C411 + C50937 * C427 + C7919 * C412 +
                      C50938 * C428 + C7920 * C413 + C7915 * C429) *
                         C50653) *
                        C50909 +
                    ((C8822 + C8821 + C8820) * C121 +
                     (C8825 + C8824 + C8823) * C50653) *
                        C50805) *
                       C50767 * C50640 -
                   (((C8819 + C8818 + C8817) * C50653 +
                     (C8816 + C8815 + C8814) * C121) *
                        C50805 +
                    ((C7920 * C412 + C7915 * C428 + C7919 * C411 +
                      C50938 * C427 + C7918 * C415 + C50937 * C431) *
                         C50653 +
                     (C7920 * C398 + C7915 * C408 + C7919 * C397 +
                      C50938 * C407 + C7918 * C401 + C50937 * C416) *
                         C121) *
                        C50909) *
                       C50767 * C50888) *
                      C50944 +
                  ((((C7918 * C402 + C50937 * C417 + C7919 * C403 +
                      C50938 * C418 + C7920 * C404 + C7915 * C419) *
                         C121 +
                     (C7918 * C421 + C50937 * C432 + C7919 * C422 +
                      C50938 * C433 + C7920 * C423 + C7915 * C434) *
                         C50653) *
                        C50909 +
                    ((C9248 + C9247 + C9246) * C121 +
                     (C9251 + C9250 + C9249) * C50653) *
                        C50805) *
                       C50767 * C50888 -
                   (((C7920 * C1102 + C7915 * C1106 + C7919 * C1103 +
                      C50938 * C1107 + C7918 * C1104 + C50937 * C1108) *
                         C50653 +
                     (C7920 * C1094 + C7915 * C1098 + C7919 * C1095 +
                      C50938 * C1099 + C7918 * C1096 + C50937 * C1100) *
                         C121) *
                        C50805 +
                    ((C7920 * C424 + C7915 * C435 + C7919 * C423 +
                      C50938 * C434 + C7918 * C422 + C50937 * C433) *
                         C50653 +
                     (C7920 * C405 + C7915 * C420 + C7919 * C404 +
                      C50938 * C419 + C7918 * C403 + C50937 * C418) *
                         C121) *
                        C50909) *
                       C50767 * C50640) *
                      C1974)) /
                (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C121 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C50653) *
                C50909 +
            ((C8118 + C8117 + C8116) * C121 +
             (C8121 + C8120 + C8119) * C50653) *
                C50805) *
               C50767 * C900 -
           (((C8133 + C8132 + C8131) * C50653 +
             (C8130 + C8129 + C8128) * C121) *
                C50805 +
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50653 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C121) *
                C50909) *
               C50767 * C901 +
           (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
              C7920 * C126 + C7915 * C138) *
                 C121 +
             (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
              C7920 * C137 + C7915 * C147) *
                 C50653) *
                C50909 +
            ((C8446 + C8445 + C8444) * C121 +
             (C8449 + C8448 + C8447) * C50653) *
                C50805) *
               C50767 * C902) *
              C1558 +
          ((((C7918 * C397 + C50937 * C407 + C7919 * C398 + C50938 * C408 +
              C7920 * C399 + C7915 * C409) *
                 C121 +
             (C7918 * C411 + C50937 * C427 + C7919 * C412 + C50938 * C428 +
              C7920 * C413 + C7915 * C429) *
                 C50653) *
                C50909 +
            ((C8822 + C8821 + C8820) * C121 +
             (C8825 + C8824 + C8823) * C50653) *
                C50805) *
               C50767 * C901 -
           (((C8819 + C8818 + C8817) * C50653 +
             (C8816 + C8815 + C8814) * C121) *
                C50805 +
            ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
              C7918 * C415 + C50937 * C431) *
                 C50653 +
             (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
              C7918 * C401 + C50937 * C416) *
                 C121) *
                C50909) *
               C50767 * C900 -
           (((C7920 * C794 + C7915 * C799 + C7919 * C792 + C50938 * C798 +
              C7918 * C791 + C50937 * C797) *
                 C50653 +
             (C7920 * C784 + C7915 * C793 + C7919 * C783 + C50938 * C788 +
              C7918 * C782 + C50937 * C787) *
                 C121) *
                C50805 +
            ((C7920 * C414 + C7915 * C430 + C7919 * C413 + C50938 * C429 +
              C7918 * C412 + C50937 * C428) *
                 C50653 +
             (C7920 * C400 + C7915 * C410 + C7919 * C399 + C50938 * C409 +
              C7918 * C398 + C50937 * C408) *
                 C121) *
                C50909) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C253 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C248 -
            (C8116 + C8117 + C8118) * C254 - (C8119 + C8120 + C8121) * C249 +
            (C8122 + C8123 + C8124) * C255 + (C8125 + C8126 + C8127) * C250) *
               C50909 +
           ((C8118 + C8117 + C8116) * C253 + (C8121 + C8120 + C8119) * C248 -
            (C8124 + C8123 + C8122) * C254 - (C8127 + C8126 + C8125) * C249 +
            (C9084 + C9083 + C9082) * C255 + (C9087 + C9086 + C9085) * C250) *
               C50805) *
              C50767 * C50635 * C1558 +
          (((C8814 + C8815 + C8816) * C254 -
            ((C7920 * C412 + C7915 * C428 + C7919 * C411 + C50938 * C427 +
              C7918 * C415 + C50937 * C431) *
                 C248 +
             (C7920 * C398 + C7915 * C408 + C7919 * C397 + C50938 * C407 +
              C7918 * C401 + C50937 * C416) *
                 C253) +
            (C8817 + C8818 + C8819) * C249 - (C9750 + C9751 + C9752) * C255 -
            (C9753 + C9754 + C9755) * C250) *
               C50909 +
           ((C9752 + C9751 + C9750) * C254 -
            ((C8819 + C8818 + C8817) * C248 + (C8816 + C8815 + C8814) * C253) +
            (C9755 + C9754 + C9753) * C249 -
            (C7920 * C3082 + C7915 * C3087 + C7919 * C3081 + C50938 * C3084 +
             C7918 * C3080 + C50937 * C3083) *
                C255 -
            (C7920 * C3088 + C7915 * C3091 + C7919 * C3086 + C50938 * C3090 +
             C7918 * C3085 + C50937 * C3089) *
                C250) *
               C50805) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C540 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50896 -
             (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                C50909 +
            ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
             (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C540 + (C5440 + C5441) * C50896 -
             (C3126 + C3125) * C541 - (C3128 + C3127) * C50705) *
                C50909 +
            ((C3125 + C3126) * C540 + (C3127 + C3128) * C50896 - C4079 * C541 -
             C4080 * C50705) *
                C50805) *
               C50831) *
              C50939 +
          ((((C2397 + C2398) * C541 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50896 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C540) +
             (C2399 + C2400) * C50705) *
                C50909 +
            ((C2402 + C2401) * C541 -
             ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
             (C2404 + C2403) * C50705) *
                C50805) *
               C50910 +
           (((C3134 + C3133) * C541 -
             ((C5450 + C5451) * C50896 + (C5452 + C5453) * C540) +
             (C3136 + C3135) * C50705) *
                C50909 +
            ((C3138 + C3137) * C541 -
             ((C3135 + C3136) * C50896 + (C3133 + C3134) * C540) +
             (C3140 + C3139) * C50705) *
                C50805) *
               C50831) *
              C50940 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C540 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50896 -
             (C2733 + C2734) * C541 - (C2735 + C2736) * C50705) *
                C50909 +
            ((C2734 + C2733) * C540 + (C2736 + C2735) * C50896 -
             (C2737 + C2738) * C541 - (C2739 + C2740) * C50705) *
                C50805) *
               C50910 +
           (((C5782 + C5783) * C540 + (C5784 + C5785) * C50896 -
             (C14090 + C14091) * C541 - (C14092 + C14093) * C50705) *
                C50909 +
            ((C14091 + C14090) * C540 + (C14093 + C14092) * C50896 -
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C541 -
             (C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C539) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                  C540 +
              (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                  C50896 -
              (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                 C50909 +
             ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
              (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
                 C50805) *
                C50910 +
            (((C5438 + C5439) * C540 + (C5440 + C5441) * C50896 -
              C14546 * C541 - C14547 * C50705) *
                 C50909 +
             (C14548 * C540 + C14549 * C50896 - C4079 * C541 - C4080 * C50705) *
                 C50805) *
                C50831) *
               C251 +
           ((((C2397 + C2398) * C541 -
              ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                   C50896 +
               (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                   C540) +
              (C2399 + C2400) * C50705) *
                 C50909 +
             ((C2402 + C2401) * C541 -
              ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
              (C2404 + C2403) * C50705) *
                 C50805) *
                C50910 +
            ((C14550 * C541 -
              ((C5450 + C5451) * C50896 + (C5452 + C5453) * C540) +
              C14551 * C50705) *
                 C50909 +
             ((C3138 + C3137) * C541 - (C14552 * C50896 + C14553 * C540) +
              (C3140 + C3139) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50897 +
          ((((C14548 * C541 -
              ((C5441 + C5440) * C50896 + (C5439 + C5438) * C540) +
              C14549 * C50705) *
                 C50909 +
             ((C3129 + C3130) * C541 - (C14547 * C50896 + C14546 * C540) +
              (C3131 + C3132) * C50705) *
                 C50805) *
                C50910 +
            (((C3578 + C3577) * C541 -
              ((C5445 + C5444) * C50896 + (C5443 + C5442) * C540) +
              (C3580 + C3579) * C50705) *
                 C50909 +
             ((C3582 + C3581) * C541 - (C6401 * C50896 + C6400 * C540) +
              (C3584 + C3583) * C50705) *
                 C50805) *
                C50831) *
               C251 +
           ((((C5453 + C5452) * C540 + (C5451 + C5450) * C50896 -
              C14553 * C541 - C14552 * C50705) *
                 C50909 +
             (C14550 * C540 + C14551 * C50896 - (C3137 + C3138) * C541 -
              (C3139 + C3140) * C50705) *
                 C50805) *
                C50910 +
            (((C5449 + C5448) * C540 + (C5447 + C5446) * C50896 -
              (C5997 + C5996) * C541 - (C5999 + C5998) * C50705) *
                 C50909 +
             ((C5996 + C5997) * C540 + (C5998 + C5999) * C50896 -
              (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                  C541 -
              (C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C253 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C248 -
             (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
             C2410 * C250) *
                C50909 +
            ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
             (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
             (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C253 + (C5440 + C5441) * C248 -
             (C3126 + C3125) * C254 - (C3128 + C3127) * C249 +
             (C3129 + C3130) * C255 + (C3131 + C3132) * C250) *
                C50909 +
            ((C3125 + C3126) * C253 + (C3127 + C3128) * C248 - C4079 * C254 -
             C4080 * C249 + (C4090 + C4089) * C255 + (C4092 + C4091) * C250) *
                C50805) *
               C50831) *
              C251 +
          ((((C2397 + C2398) * C254 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C248 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C253) +
             (C2399 + C2400) * C249 - C2411 * C255 - C2412 * C250) *
                C50909 +
            ((C2402 + C2401) * C254 -
             ((C2400 + C2399) * C248 + (C2398 + C2397) * C253) +
             (C2404 + C2403) * C249 - (C2405 + C2406) * C255 -
             (C2407 + C2408) * C250) *
                C50805) *
               C50910 +
           (((C3134 + C3133) * C254 -
             ((C5450 + C5451) * C248 + (C5452 + C5453) * C253) +
             (C3136 + C3135) * C249 - (C3137 + C3138) * C255 -
             (C3139 + C3140) * C250) *
                C50909 +
            ((C3138 + C3137) * C254 -
             ((C3135 + C3136) * C248 + (C3133 + C3134) * C253) +
             (C3140 + C3139) * C249 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C255 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C250) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C50909 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C50805) *
               C50910 +
           (((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50909 +
            ((C3125 + C3126) * C121 + (C3127 + C3128) * C50653) * C50805) *
               C50831) *
              C112 -
          ((((C3135 + C3136) * C50653 + (C3133 + C3134) * C121) * C50805 +
            ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50909) *
               C50831 +
           (((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C50805 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C50909) *
               C50910) *
              C113 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C50909 +
            ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C50805) *
               C50910 +
           (((C5782 + C5783) * C121 + (C5784 + C5785) * C50653) * C50909 +
            ((C2176 * C782 + C2171 * C787 + C2177 * C783 + C50615 * C788) *
                 C121 +
             (C2176 * C791 + C2171 * C797 + C2177 * C792 + C50615 * C798) *
                 C50653) *
                C50805) *
               C50831) *
              C114 -
          ((((C2177 * C794 + C50615 * C799 + C2176 * C792 + C2171 * C798) *
                 C50653 +
             (C2177 * C784 + C50615 * C793 + C2176 * C783 + C2171 * C788) *
                 C121) *
                C50805 +
            ((C2177 * C414 + C50615 * C430 + C2176 * C413 + C2171 * C429) *
                 C50653 +
             (C2177 * C400 + C50615 * C410 + C2176 * C399 + C2171 * C409) *
                 C121) *
                C50909) *
               C50831 +
           (((C2177 * C283 + C50615 * C294 + C2176 * C270 + C2171 * C286) *
                 C50653 +
             (C2177 * C264 + C50615 * C282 + C2176 * C256 + C2171 * C266) *
                 C121) *
                C50805 +
            ((C2177 * C137 + C50615 * C147 + C2176 * C136 + C2171 * C146) *
                 C50653 +
             (C2177 * C126 + C50615 * C138 + C2176 * C125 + C2171 * C132) *
                 C121) *
                C50909) *
               C50910) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                  C121 +
              (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C50805) *
                C50910 +
            (((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50909 +
             ((C3125 + C3126) * C121 + (C3127 + C3128) * C50653) * C50805) *
                C50831) *
               C251 -
           ((((C3135 + C3136) * C50653 + (C3133 + C3134) * C121) * C50805 +
             ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50909) *
                C50831 +
            (((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C50805 +
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50653 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C121) *
                 C50909) *
                C50910) *
               C50640) *
              C394 +
          (((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50909 +
             ((C3134 + C3133) * C121 + (C3136 + C3135) * C50653) * C50805) *
                C50910 +
            (((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50909 +
             ((C5996 + C5997) * C121 + (C5998 + C5999) * C50653) * C50805) *
                C50831) *
               C50640 -
           (((C6401 * C50653 + C6400 * C121) * C50805 +
             ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50909) *
                C50831 +
            (((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C50805 +
             ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50909) *
                C50910) *
               C251) *
              C395 +
          (((C5470 * C50909 +
             ((C3578 + C3577) * C121 + (C3580 + C3579) * C50653) * C50805) *
                C50910 +
            (((C5461 + C5460) * C121 + (C5459 + C5458) * C50653) * C50909 +
             ((C6413 + C6414) * C121 + (C6415 + C6416) * C50653) * C50805) *
                C50831) *
               C251 -
           ((((C2177 * C5985 + C50615 * C5986 + C2176 * C4490 + C2171 * C4496) *
                  C50653 +
              (C2177 * C5983 + C50615 * C5984 + C2176 * C4484 + C2171 * C4492) *
                  C121) *
                 C50805 +
             ((C5457 + C5456) * C50653 + (C5455 + C5454) * C121) * C50909) *
                C50831 +
            (((C5999 + C5998) * C50653 + (C5997 + C5996) * C121) * C50805 +
             C5471 * C50909) *
                C50910) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                  C121 +
              (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C50805) *
                C50910 +
            (((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50909 +
             ((C3125 + C3126) * C121 + (C3127 + C3128) * C50653) * C50805) *
                C50831) *
               C50939 -
           ((((C3135 + C3136) * C50653 + (C3133 + C3134) * C121) * C50805 +
             ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50909) *
                C50831 +
            (((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C50805 +
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50653 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C121) *
                 C50909) *
                C50910) *
               C50940 +
           ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                  C121 +
              (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                  C50653) *
                 C50909 +
             ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C50805) *
                C50910 +
            (((C5782 + C5783) * C121 + (C5784 + C5785) * C50653) * C50909 +
             ((C14091 + C14090) * C121 + (C14093 + C14092) * C50653) * C50805) *
                C50831) *
               C539) *
              C50897 +
          (((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50909 +
             ((C3134 + C3133) * C121 + (C3136 + C3135) * C50653) * C50805) *
                C50910 +
            (((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50909 +
             ((C5996 + C5997) * C121 + (C5998 + C5999) * C50653) * C50805) *
                C50831) *
               C50940 -
           (((C6401 * C50653 + C6400 * C121) * C50805 +
             ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50909) *
                C50831 +
            (((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C50805 +
             ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50909) *
                C50910) *
               C50939 -
           ((((C2177 * C1102 + C50615 * C1106 + C2176 * C1103 + C2171 * C1107) *
                  C50653 +
              (C2177 * C1094 + C50615 * C1098 + C2176 * C1095 + C2171 * C1099) *
                  C121) *
                 C50805 +
             ((C5789 + C5788) * C50653 + (C5787 + C5786) * C121) * C50909) *
                C50831 +
            (((C14092 + C14093) * C50653 + (C14090 + C14091) * C121) * C50805 +
             ((C5785 + C5784) * C50653 + (C5783 + C5782) * C121) * C50909) *
                C50910) *
               C539) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C50909 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C50805) *
               C50910 +
           (((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50909 +
            ((C3125 + C3126) * C121 + (C3127 + C3128) * C50653) * C50805) *
               C50831) *
              C112 -
          ((((C3135 + C3136) * C50653 + (C3133 + C3134) * C121) * C50805 +
            ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50909) *
               C50831 +
           (((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C50805 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C50909) *
               C50910) *
              C113 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C50909 +
            ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C50805) *
               C50910 +
           (((C5782 + C5783) * C121 + (C5784 + C5785) * C50653) * C50909 +
            ((C2176 * C782 + C2171 * C787 + C2177 * C783 + C50615 * C788) *
                 C121 +
             (C2176 * C791 + C2171 * C797 + C2177 * C792 + C50615 * C798) *
                 C50653) *
                C50805) *
               C50831) *
              C114 -
          ((((C2177 * C794 + C50615 * C799 + C2176 * C792 + C2171 * C798) *
                 C50653 +
             (C2177 * C784 + C50615 * C793 + C2176 * C783 + C2171 * C788) *
                 C121) *
                C50805 +
            ((C2177 * C414 + C50615 * C430 + C2176 * C413 + C2171 * C429) *
                 C50653 +
             (C2177 * C400 + C50615 * C410 + C2176 * C399 + C2171 * C409) *
                 C121) *
                C50909) *
               C50831 +
           (((C2177 * C283 + C50615 * C294 + C2176 * C270 + C2171 * C286) *
                 C50653 +
             (C2177 * C264 + C50615 * C282 + C2176 * C256 + C2171 * C266) *
                 C121) *
                C50805 +
            ((C2177 * C137 + C50615 * C147 + C2176 * C136 + C2171 * C146) *
                 C50653 +
             (C2177 * C126 + C50615 * C138 + C2176 * C125 + C2171 * C132) *
                 C121) *
                C50909) *
               C50910) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C253 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C248 -
             (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
             C2410 * C250) *
                C50909 +
            ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
             (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
             (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C253 + (C5440 + C5441) * C248 -
             (C3126 + C3125) * C254 - (C3128 + C3127) * C249 +
             (C3129 + C3130) * C255 + (C3131 + C3132) * C250) *
                C50909 +
            ((C3125 + C3126) * C253 + (C3127 + C3128) * C248 - C4079 * C254 -
             C4080 * C249 + (C4090 + C4089) * C255 + (C4092 + C4091) * C250) *
                C50805) *
               C50831) *
              C251 +
          ((((C2397 + C2398) * C254 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C248 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C253) +
             (C2399 + C2400) * C249 - C2411 * C255 - C2412 * C250) *
                C50909 +
            ((C2402 + C2401) * C254 -
             ((C2400 + C2399) * C248 + (C2398 + C2397) * C253) +
             (C2404 + C2403) * C249 - (C2405 + C2406) * C255 -
             (C2407 + C2408) * C250) *
                C50805) *
               C50910 +
           (((C3134 + C3133) * C254 -
             ((C5450 + C5451) * C248 + (C5452 + C5453) * C253) +
             (C3136 + C3135) * C249 - (C3137 + C3138) * C255 -
             (C3139 + C3140) * C250) *
                C50909 +
            ((C3138 + C3137) * C254 -
             ((C3135 + C3136) * C248 + (C3133 + C3134) * C253) +
             (C3140 + C3139) * C249 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C255 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C250) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C1213 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50941 -
             (C2385 + C2386) * C1214 - (C2387 + C2388) * C50942 +
             C2409 * C1215 + C2410 * C1210) *
                C50909 +
            ((C2386 + C2385) * C1213 + (C2388 + C2387) * C50941 -
             (C2390 + C2389) * C1214 - (C2392 + C2391) * C50942 +
             (C2393 + C2394) * C1215 + (C2395 + C2396) * C1210) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C1213 + (C5440 + C5441) * C50941 -
             C14546 * C1214 - C14547 * C50942 + (C3129 + C3130) * C1215 +
             (C3131 + C3132) * C1210) *
                C50909 +
            (C14548 * C1213 + C14549 * C50941 - C4079 * C1214 - C4080 * C50942 +
             (C4090 + C4089) * C1215 + (C4092 + C4091) * C1210) *
                C50805) *
               C50831) *
              C50888 +
          ((((C2397 + C2398) * C1214 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50941 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C1213) +
             (C2399 + C2400) * C50942 - C2411 * C1215 - C2412 * C1210) *
                C50909 +
            ((C2402 + C2401) * C1214 -
             ((C2400 + C2399) * C50941 + (C2398 + C2397) * C1213) +
             (C2404 + C2403) * C50942 - (C2405 + C2406) * C1215 -
             (C2407 + C2408) * C1210) *
                C50805) *
               C50910 +
           ((C14550 * C1214 -
             ((C5450 + C5451) * C50941 + (C5452 + C5453) * C1213) +
             C14551 * C50942 - (C3137 + C3138) * C1215 -
             (C3139 + C3140) * C1210) *
                C50909 +
            ((C3138 + C3137) * C1214 - (C14552 * C50941 + C14553 * C1213) +
             (C3140 + C3139) * C50942 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C1215 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C1210) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C1213 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50941 -
             (C2385 + C2386) * C1214 - (C2387 + C2388) * C50942 +
             C2409 * C1215 + C2410 * C1210) *
                C50909 +
            ((C2386 + C2385) * C1213 + (C2388 + C2387) * C50941 -
             (C2390 + C2389) * C1214 - (C2392 + C2391) * C50942 +
             (C2393 + C2394) * C1215 + (C2395 + C2396) * C1210) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C1213 + (C5440 + C5441) * C50941 -
             C14546 * C1214 - C14547 * C50942 + C15720 * C1215 +
             C15721 * C1210) *
                C50909 +
            (C14548 * C1213 + C14549 * C50941 - C4079 * C1214 - C4080 * C50942 +
             (C4090 + C4089) * C1215 + (C4092 + C4091) * C1210) *
                C50805) *
               C50831) *
              C50635 * C50897 +
          (((C14548 * C1214 -
             ((C5441 + C5440) * C50941 + (C5439 + C5438) * C1213) +
             C14549 * C50942 - C4079 * C1215 - C4080 * C1210) *
                C50909 +
            (C15720 * C1214 - (C14547 * C50941 + C14546 * C1213) +
             C15721 * C50942 - (C4089 + C4090) * C1215 -
             (C4091 + C4092) * C1210) *
                C50805) *
               C50910 +
           ((C15072 * C1214 -
             ((C5445 + C5444) * C50941 + (C5443 + C5442) * C1213) +
             C15073 * C50942 - (C3581 + C3582) * C1215 -
             (C3583 + C3584) * C1210) *
                C50909 +
            ((C3582 + C3581) * C1214 - (C6401 * C50941 + C6400 * C1213) +
             (C3584 + C3583) * C50942 -
             (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
                 C1215 -
             (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
                 C1210) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C976 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C971 -
            (C2385 + C2386) * C977 - (C2387 + C2388) * C972 + C2409 * C978 +
            C2410 * C973 - C3393 * C979 - C3394 * C974) *
               C50909 +
           ((C2386 + C2385) * C976 + (C2388 + C2387) * C971 -
            (C2390 + C2389) * C977 - (C2392 + C2391) * C972 +
            (C2393 + C2394) * C978 + (C2395 + C2396) * C973 -
            (C3403 + C3404) * C979 - (C3405 + C3406) * C974) *
               C50805) *
              C50910 +
          (((C5438 + C5439) * C976 + (C5440 + C5441) * C971 - C14546 * C977 -
            C14547 * C972 + (C3129 + C3130) * C978 + (C3131 + C3132) * C973 -
            (C4089 + C4090) * C979 - (C4091 + C4092) * C974) *
               C50909 +
           (C14548 * C976 + C14549 * C971 - C4079 * C977 - C4080 * C972 +
            (C4090 + C4089) * C978 + (C4092 + C4091) * C973 -
            (C2177 * C4070 + C50615 * C4072 + C2176 * C4071 + C2171 * C4073) *
                C979 -
            (C2177 * C4074 + C50615 * C4076 + C2176 * C4075 + C2171 * C4077) *
                C974) *
               C50805) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C903 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C898 -
             (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
                C50909 +
            ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
             (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C903 + (C5440 + C5441) * C898 - C14546 * C904 -
             C14547 * C50705) *
                C50909 +
            (C14548 * C903 + C14549 * C898 - C4079 * C904 - C4080 * C50705) *
                C50805) *
               C50831) *
              C900 +
          ((((C2397 + C2398) * C904 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C898 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C903) +
             (C2399 + C2400) * C50705) *
                C50909 +
            ((C2402 + C2401) * C904 -
             ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
             (C2404 + C2403) * C50705) *
                C50805) *
               C50910 +
           ((C14550 * C904 - ((C5450 + C5451) * C898 + (C5452 + C5453) * C903) +
             C14551 * C50705) *
                C50909 +
            ((C3138 + C3137) * C904 - (C14552 * C898 + C14553 * C903) +
             (C3140 + C3139) * C50705) *
                C50805) *
               C50831) *
              C901 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C903 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C898 -
             (C2733 + C2734) * C904 - (C2735 + C2736) * C50705) *
                C50909 +
            ((C2734 + C2733) * C903 + (C2736 + C2735) * C898 -
             (C2737 + C2738) * C904 - (C2739 + C2740) * C50705) *
                C50805) *
               C50910 +
           (((C5782 + C5783) * C903 + (C5784 + C5785) * C898 -
             (C14090 + C14091) * C904 - (C14092 + C14093) * C50705) *
                C50909 +
            ((C14091 + C14090) * C903 + (C14093 + C14092) * C898 -
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C904 -
             (C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C903 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C898 -
             (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
                C50909 +
            ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
             (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C903 + (C5440 + C5441) * C898 - C14546 * C904 -
             C14547 * C50705) *
                C50909 +
            (C14548 * C903 + C14549 * C898 - C4079 * C904 - C4080 * C50705) *
                C50805) *
               C50831) *
              C50635 * C394 +
          (((C14548 * C904 - ((C5441 + C5440) * C898 + (C5439 + C5438) * C903) +
             C14549 * C50705) *
                C50909 +
            ((C3129 + C3130) * C904 - (C14547 * C898 + C14546 * C903) +
             (C3131 + C3132) * C50705) *
                C50805) *
               C50910 +
           ((C15072 * C904 - ((C5445 + C5444) * C898 + (C5443 + C5442) * C903) +
             C15073 * C50705) *
                C50909 +
            ((C3582 + C3581) * C904 - (C6401 * C898 + C6400 * C903) +
             (C3584 + C3583) * C50705) *
                C50805) *
               C50831) *
              C50635 * C395 +
          ((C6418 * C50909 +
            (C15072 * C903 + C15073 * C898 - (C3581 + C3582) * C904 -
             (C3583 + C3584) * C50705) *
                C50805) *
               C50910 +
           (((C5461 + C5460) * C903 + (C5459 + C5458) * C898 -
             (C6414 + C6413) * C904 - (C6416 + C6415) * C50705) *
                C50909 +
            ((C6413 + C6414) * C903 + (C6415 + C6416) * C898 -
             (C2177 * C4482 + C50615 * C4488 + C2176 * C4483 + C2171 * C4489) *
                 C904 -
             (C2177 * C4486 + C50615 * C4494 + C2176 * C4487 + C2171 * C4495) *
                 C50705) *
                C50805) *
               C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                  C903 +
              (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                  C898 -
              (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
                 C50909 +
             ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
              (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
                 C50805) *
                C50910 +
            (((C5438 + C5439) * C903 + (C5440 + C5441) * C898 - C14546 * C904 -
              C14547 * C50705) *
                 C50909 +
             (C14548 * C903 + C14549 * C898 - C4079 * C904 - C4080 * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C2397 + C2398) * C904 -
              ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                   C898 +
               (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                   C903) +
              (C2399 + C2400) * C50705) *
                 C50909 +
             ((C2402 + C2401) * C904 -
              ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
              (C2404 + C2403) * C50705) *
                 C50805) *
                C50910 +
            ((C14550 * C904 -
              ((C5450 + C5451) * C898 + (C5452 + C5453) * C903) +
              C14551 * C50705) *
                 C50909 +
             ((C3138 + C3137) * C904 - (C14552 * C898 + C14553 * C903) +
              (C3140 + C3139) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50897 +
          ((((C14548 * C904 -
              ((C5441 + C5440) * C898 + (C5439 + C5438) * C903) +
              C14549 * C50705) *
                 C50909 +
             ((C3129 + C3130) * C904 - (C14547 * C898 + C14546 * C903) +
              (C3131 + C3132) * C50705) *
                 C50805) *
                C50910 +
            ((C15072 * C904 -
              ((C5445 + C5444) * C898 + (C5443 + C5442) * C903) +
              C15073 * C50705) *
                 C50909 +
             ((C3582 + C3581) * C904 - (C6401 * C898 + C6400 * C903) +
              (C3584 + C3583) * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C5453 + C5452) * C903 + (C5451 + C5450) * C898 - C14553 * C904 -
              C14552 * C50705) *
                 C50909 +
             (C14550 * C903 + C14551 * C898 - (C3137 + C3138) * C904 -
              (C3139 + C3140) * C50705) *
                 C50805) *
                C50910 +
            (((C5449 + C5448) * C903 + (C5447 + C5446) * C898 -
              (C5997 + C5996) * C904 - (C5999 + C5998) * C50705) *
                 C50909 +
             ((C5996 + C5997) * C903 + (C5998 + C5999) * C898 -
              (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                  C904 -
              (C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C903 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C898 -
             (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
                C50909 +
            ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
             (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C903 + (C5440 + C5441) * C898 - C14546 * C904 -
             C14547 * C50705) *
                C50909 +
            (C14548 * C903 + C14549 * C898 - C4079 * C904 - C4080 * C50705) *
                C50805) *
               C50831) *
              C900 +
          ((((C2397 + C2398) * C904 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C898 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C903) +
             (C2399 + C2400) * C50705) *
                C50909 +
            ((C2402 + C2401) * C904 -
             ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
             (C2404 + C2403) * C50705) *
                C50805) *
               C50910 +
           ((C14550 * C904 - ((C5450 + C5451) * C898 + (C5452 + C5453) * C903) +
             C14551 * C50705) *
                C50909 +
            ((C3138 + C3137) * C904 - (C14552 * C898 + C14553 * C903) +
             (C3140 + C3139) * C50705) *
                C50805) *
               C50831) *
              C901 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C903 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C898 -
             (C2733 + C2734) * C904 - (C2735 + C2736) * C50705) *
                C50909 +
            ((C2734 + C2733) * C903 + (C2736 + C2735) * C898 -
             (C2737 + C2738) * C904 - (C2739 + C2740) * C50705) *
                C50805) *
               C50910 +
           (((C5782 + C5783) * C903 + (C5784 + C5785) * C898 -
             (C14090 + C14091) * C904 - (C14092 + C14093) * C50705) *
                C50909 +
            ((C14091 + C14090) * C903 + (C14093 + C14092) * C898 -
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C904 -
             (C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C976 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C971 -
            (C2385 + C2386) * C977 - (C2387 + C2388) * C972 + C2409 * C978 +
            C2410 * C973 - C3393 * C979 - C3394 * C974) *
               C50909 +
           ((C2386 + C2385) * C976 + (C2388 + C2387) * C971 -
            (C2390 + C2389) * C977 - (C2392 + C2391) * C972 +
            (C2393 + C2394) * C978 + (C2395 + C2396) * C973 -
            (C3403 + C3404) * C979 - (C3405 + C3406) * C974) *
               C50805) *
              C50910 +
          (((C5438 + C5439) * C976 + (C5440 + C5441) * C971 - C14546 * C977 -
            C14547 * C972 + (C3129 + C3130) * C978 + (C3131 + C3132) * C973 -
            (C4089 + C4090) * C979 - (C4091 + C4092) * C974) *
               C50909 +
           (C14548 * C976 + C14549 * C971 - C4079 * C977 - C4080 * C972 +
            (C4090 + C4089) * C978 + (C4092 + C4091) * C973 -
            (C2177 * C4070 + C50615 * C4072 + C2176 * C4071 + C2171 * C4073) *
                C979 -
            (C2177 * C4074 + C50615 * C4076 + C2176 * C4075 + C2171 * C4077) *
                C974) *
               C50805) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                  C540 +
              (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                  C50896 -
              (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                 C50909 +
             ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
              (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
                 C50805) *
                C50910 +
            (((C5438 + C5439) * C540 + (C5440 + C5441) * C50896 -
              C14546 * C541 - C14547 * C50705) *
                 C50909 +
             (C14548 * C540 + C14549 * C50896 - C4079 * C541 - C4080 * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C2397 + C2398) * C541 -
              ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                   C50896 +
               (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                   C540) +
              (C2399 + C2400) * C50705) *
                 C50909 +
             ((C2402 + C2401) * C541 -
              ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
              (C2404 + C2403) * C50705) *
                 C50805) *
                C50910 +
            ((C14550 * C541 -
              ((C5450 + C5451) * C50896 + (C5452 + C5453) * C540) +
              C14551 * C50705) *
                 C50909 +
             ((C3138 + C3137) * C541 - (C14552 * C50896 + C14553 * C540) +
              (C3140 + C3139) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C1558 +
          ((((C14548 * C541 -
              ((C5441 + C5440) * C50896 + (C5439 + C5438) * C540) +
              C14549 * C50705) *
                 C50909 +
             (C15720 * C541 - (C14547 * C50896 + C14546 * C540) +
              C15721 * C50705) *
                 C50805) *
                C50910 +
            ((C15072 * C541 -
              ((C5445 + C5444) * C50896 + (C5443 + C5442) * C540) +
              C15073 * C50705) *
                 C50909 +
             ((C3582 + C3581) * C541 - (C6401 * C50896 + C6400 * C540) +
              (C3584 + C3583) * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C5453 + C5452) * C540 + (C5451 + C5450) * C50896 -
              C14553 * C541 - C14552 * C50705) *
                 C50909 +
             (C14550 * C540 + C14551 * C50896 - (C3137 + C3138) * C541 -
              (C3139 + C3140) * C50705) *
                 C50805) *
                C50910 +
            (((C5449 + C5448) * C540 + (C5447 + C5446) * C50896 -
              (C5997 + C5996) * C541 - (C5999 + C5998) * C50705) *
                 C50909 +
             ((C5996 + C5997) * C540 + (C5998 + C5999) * C50896 -
              (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                  C541 -
              (C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C540 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50896 -
             (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                C50909 +
            ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
             (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C540 + (C5440 + C5441) * C50896 - C14546 * C541 -
             C14547 * C50705) *
                C50909 +
            (C14548 * C540 + C14549 * C50896 - C4079 * C541 - C4080 * C50705) *
                C50805) *
               C50831) *
              C50635 * C50943 +
          (((C14548 * C541 -
             ((C5441 + C5440) * C50896 + (C5439 + C5438) * C540) +
             C14549 * C50705) *
                C50909 +
            (C15720 * C541 - (C14547 * C50896 + C14546 * C540) +
             C15721 * C50705) *
                C50805) *
               C50910 +
           ((C15072 * C541 -
             ((C5445 + C5444) * C50896 + (C5443 + C5442) * C540) +
             C15073 * C50705) *
                C50909 +
            ((C3582 + C3581) * C541 - (C6401 * C50896 + C6400 * C540) +
             (C3584 + C3583) * C50705) *
                C50805) *
               C50831) *
              C50635 * C50944 +
          ((C7814 * C50909 +
            (C15072 * C540 + C15073 * C50896 - (C3581 + C3582) * C541 -
             (C3583 + C3584) * C50705) *
                C50805) *
               C50910 +
           (((C5461 + C5460) * C540 + (C5459 + C5458) * C50896 -
             (C6414 + C6413) * C541 - (C6416 + C6415) * C50705) *
                C50909 +
            ((C6413 + C6414) * C540 + (C6415 + C6416) * C50896 -
             (C2177 * C4482 + C50615 * C4488 + C2176 * C4483 + C2171 * C4489) *
                 C541 -
             (C2177 * C4486 + C50615 * C4494 + C2176 * C4487 + C2171 * C4495) *
                 C50705) *
                C50805) *
               C50831) *
              C50635 * C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C253 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C248 -
             (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
             C2410 * C250) *
                C50909 +
            ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
             (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
             (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C253 + (C5440 + C5441) * C248 - C14546 * C254 -
             C14547 * C249 + C15720 * C255 + C15721 * C250) *
                C50909 +
            (C14548 * C253 + C14549 * C248 - C4079 * C254 - C4080 * C249 +
             (C4090 + C4089) * C255 + (C4092 + C4091) * C250) *
                C50805) *
               C50831) *
              C50635 * C1558 +
          (((C14548 * C254 - ((C5441 + C5440) * C248 + (C5439 + C5438) * C253) +
             C14549 * C249 - C4079 * C255 - C4080 * C250) *
                C50909 +
            (C15720 * C254 - (C14547 * C248 + C14546 * C253) + C15721 * C249 -
             (C4089 + C4090) * C255 - (C4091 + C4092) * C250) *
                C50805) *
               C50910 +
           ((C15072 * C254 - ((C5445 + C5444) * C248 + (C5443 + C5442) * C253) +
             C15073 * C249 - (C3581 + C3582) * C255 - (C3583 + C3584) * C250) *
                C50909 +
            ((C3582 + C3581) * C254 - (C6401 * C248 + C6400 * C253) +
             (C3584 + C3583) * C249 -
             (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
                 C255 -
             (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
                 C250) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                  C121 +
              (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C50805) *
                C50910 +
            (((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50909 +
             (C14548 * C121 + C14549 * C50653) * C50805) *
                C50831) *
               C900 -
           (((C14552 * C50653 + C14553 * C121) * C50805 +
             ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50909) *
                C50831 +
            (((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C50805 +
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50653 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C121) *
                 C50909) *
                C50910) *
               C901 +
           ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                  C121 +
              (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                  C50653) *
                 C50909 +
             ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C50805) *
                C50910 +
            (((C5782 + C5783) * C121 + (C5784 + C5785) * C50653) * C50909 +
             ((C14091 + C14090) * C121 + (C14093 + C14092) * C50653) * C50805) *
                C50831) *
               C902) *
              C1558 +
          (((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50909 +
             (C14550 * C121 + C14551 * C50653) * C50805) *
                C50910 +
            (((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50909 +
             ((C5996 + C5997) * C121 + (C5998 + C5999) * C50653) * C50805) *
                C50831) *
               C901 -
           (((C6401 * C50653 + C6400 * C121) * C50805 +
             ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50909) *
                C50831 +
            ((C14547 * C50653 + C14546 * C121) * C50805 +
             ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50909) *
                C50910) *
               C900 -
           ((((C2177 * C1102 + C50615 * C1106 + C2176 * C1103 + C2171 * C1107) *
                  C50653 +
              (C2177 * C1094 + C50615 * C1098 + C2176 * C1095 + C2171 * C1099) *
                  C121) *
                 C50805 +
             ((C5789 + C5788) * C50653 + (C5787 + C5786) * C121) * C50909) *
                C50831 +
            (((C14092 + C14093) * C50653 + (C14090 + C14091) * C121) * C50805 +
             ((C5785 + C5784) * C50653 + (C5783 + C5782) * C121) * C50909) *
                C50910) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C50909 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C50805) *
               C50910 +
           (((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50909 +
            (C14548 * C121 + C14549 * C50653) * C50805) *
               C50831) *
              C50635 * C1724 -
          (((C6401 * C50653 + C6400 * C121) * C50805 +
            ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50909) *
               C50831 +
           ((C14547 * C50653 + C14546 * C121) * C50805 +
            ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50909) *
               C50910) *
              C50635 * C1725 +
          ((C5470 * C50909 + (C15072 * C121 + C15073 * C50653) * C50805) *
               C50910 +
           (((C5461 + C5460) * C121 + (C5459 + C5458) * C50653) * C50909 +
            ((C6413 + C6414) * C121 + (C6415 + C6416) * C50653) * C50805) *
               C50831) *
              C50635 * C1726 -
          ((((C2177 * C6393 + C50615 * C6395 + C2176 * C6394 + C2171 * C6396) *
                 C50653 +
             (C2177 * C6389 + C50615 * C6391 + C2176 * C6390 + C2171 * C6392) *
                 C121) *
                C50805 +
            ((C7319 + C7318) * C50653 + (C7317 + C7316) * C121) * C50909) *
               C50831 +
           (((C6416 + C6415) * C50653 + (C6414 + C6413) * C121) * C50805 +
            C7320 * C50909) *
               C50910) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                  C121 +
              (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C50805) *
                C50910 +
            (((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50909 +
             (C14548 * C121 + C14549 * C50653) * C50805) *
                C50831) *
               C50888 -
           (((C14552 * C50653 + C14553 * C121) * C50805 +
             ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50909) *
                C50831 +
            (((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C50805 +
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50653 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C121) *
                 C50909) *
                C50910) *
               C50640) *
              C50943 +
          (((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50909 +
             (C14550 * C121 + C14551 * C50653) * C50805) *
                C50910 +
            (((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50909 +
             ((C5996 + C5997) * C121 + (C5998 + C5999) * C50653) * C50805) *
                C50831) *
               C50640 -
           (((C6401 * C50653 + C6400 * C121) * C50805 +
             ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50909) *
                C50831 +
            ((C14547 * C50653 + C14546 * C121) * C50805 +
             ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50909) *
                C50910) *
               C50888) *
              C50944 +
          (((C5470 * C50909 + (C15072 * C121 + C15073 * C50653) * C50805) *
                C50910 +
            (((C5461 + C5460) * C121 + (C5459 + C5458) * C50653) * C50909 +
             ((C6413 + C6414) * C121 + (C6415 + C6416) * C50653) * C50805) *
                C50831) *
               C50888 -
           ((((C2177 * C5985 + C50615 * C5986 + C2176 * C4490 + C2171 * C4496) *
                  C50653 +
              (C2177 * C5983 + C50615 * C5984 + C2176 * C4484 + C2171 * C4492) *
                  C121) *
                 C50805 +
             ((C5457 + C5456) * C50653 + (C5455 + C5454) * C121) * C50909) *
                C50831 +
            (((C5999 + C5998) * C50653 + (C5997 + C5996) * C121) * C50805 +
             C5471 * C50909) *
                C50910) *
               C50640) *
              C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                  C121 +
              (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C50805) *
                C50910 +
            (((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50909 +
             (C14548 * C121 + C14549 * C50653) * C50805) *
                C50831) *
               C900 -
           (((C14552 * C50653 + C14553 * C121) * C50805 +
             ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50909) *
                C50831 +
            (((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C50805 +
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50653 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C121) *
                 C50909) *
                C50910) *
               C901 +
           ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                  C121 +
              (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                  C50653) *
                 C50909 +
             ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C50805) *
                C50910 +
            (((C5782 + C5783) * C121 + (C5784 + C5785) * C50653) * C50909 +
             ((C14091 + C14090) * C121 + (C14093 + C14092) * C50653) * C50805) *
                C50831) *
               C902) *
              C1558 +
          (((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50909 +
             (C14550 * C121 + C14551 * C50653) * C50805) *
                C50910 +
            (((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50909 +
             ((C5996 + C5997) * C121 + (C5998 + C5999) * C50653) * C50805) *
                C50831) *
               C901 -
           (((C6401 * C50653 + C6400 * C121) * C50805 +
             ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50909) *
                C50831 +
            ((C14547 * C50653 + C14546 * C121) * C50805 +
             ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50909) *
                C50910) *
               C900 -
           ((((C2177 * C1102 + C50615 * C1106 + C2176 * C1103 + C2171 * C1107) *
                  C50653 +
              (C2177 * C1094 + C50615 * C1098 + C2176 * C1095 + C2171 * C1099) *
                  C121) *
                 C50805 +
             ((C5789 + C5788) * C50653 + (C5787 + C5786) * C121) * C50909) *
                C50831 +
            (((C14092 + C14093) * C50653 + (C14090 + C14091) * C121) * C50805 +
             ((C5785 + C5784) * C50653 + (C5783 + C5782) * C121) * C50909) *
                C50910) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C253 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C248 -
             (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
             C2410 * C250) *
                C50909 +
            ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
             (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
             (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
                C50805) *
               C50910 +
           (((C5438 + C5439) * C253 + (C5440 + C5441) * C248 - C14546 * C254 -
             C14547 * C249 + C15720 * C255 + C15721 * C250) *
                C50909 +
            (C14548 * C253 + C14549 * C248 - C4079 * C254 - C4080 * C249 +
             (C4090 + C4089) * C255 + (C4092 + C4091) * C250) *
                C50805) *
               C50831) *
              C50635 * C1558 +
          (((C14548 * C254 - ((C5441 + C5440) * C248 + (C5439 + C5438) * C253) +
             C14549 * C249 - C4079 * C255 - C4080 * C250) *
                C50909 +
            (C15720 * C254 - (C14547 * C248 + C14546 * C253) + C15721 * C249 -
             (C4089 + C4090) * C255 - (C4091 + C4092) * C250) *
                C50805) *
               C50910 +
           ((C15072 * C254 - ((C5445 + C5444) * C248 + (C5443 + C5442) * C253) +
             C15073 * C249 - (C3581 + C3582) * C255 - (C3583 + C3584) * C250) *
                C50909 +
            ((C3582 + C3581) * C254 - (C6401 * C248 + C6400 * C253) +
             (C3584 + C3583) * C249 -
             (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
                 C255 -
             (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
                 C250) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C540 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50896 -
            (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
            (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C540 + C2410 * C50896 - (C2394 + C2393) * C541 -
            (C2396 + C2395) * C50705) *
               C2175) *
              C50767 * C50939 +
          (((C2397 + C2398) * C541 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50896 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C540) +
            (C2399 + C2400) * C50705) *
               C2173 +
           ((C2402 + C2401) * C541 -
            ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
            (C2404 + C2403) * C50705) *
               C2174 +
           ((C2406 + C2405) * C541 - (C2412 * C50896 + C2411 * C540) +
            (C2408 + C2407) * C50705) *
               C2175) *
              C50767 * C50940 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C540 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50896 -
            (C2733 + C2734) * C541 - (C2735 + C2736) * C50705) *
               C2173 +
           ((C2734 + C2733) * C540 + (C2736 + C2735) * C50896 -
            (C2737 + C2738) * C541 - (C2739 + C2740) * C50705) *
               C2174 +
           ((C2738 + C2737) * C540 + (C2740 + C2739) * C50896 -
            (C2177 * C980 + C50615 * C984 + C2176 * C981 + C2171 * C985) *
                C541 -
            (C2177 * C988 + C50615 * C992 + C2176 * C989 + C2171 * C993) *
                C50705) *
               C2175) *
              C50767 * C539) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C540 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50896 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C541 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C50939 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C541 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50896 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C540) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C50705) *
              C50755 * C50767 * C50940 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C540 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50896 -
           (C120 * C542 + C108 * C543 + C119 * C264 + C107 * C282 +
            C118 * C256 + C106 * C266 + C117 * C257 + C105 * C267) *
               C541 -
           (C120 * C544 + C108 * C545 + C119 * C283 + C107 * C294 +
            C118 * C270 + C106 * C286 + C117 * C271 + C105 * C287) *
               C50705) *
              C50755 * C50767 * C539) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C540 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50896 -
            (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
               C50755 * C5082 +
           ((C5438 + C5439) * C540 + (C5440 + C5441) * C50896 -
            (C3126 + C3125) * C541 - (C3128 + C3127) * C50705) *
               C50755 * C5083 +
           (C5462 * C540 + C5463 * C50896 - (C3577 + C3578) * C541 -
            (C3579 + C3580) * C50705) *
               C50755 * C5084) *
              C50939 +
          (((C2397 + C2398) * C541 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50896 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C540) +
            (C2399 + C2400) * C50705) *
               C50755 * C5082 +
           ((C3134 + C3133) * C541 -
            ((C5450 + C5451) * C50896 + (C5452 + C5453) * C540) +
            (C3136 + C3135) * C50705) *
               C50755 * C5083 +
           ((C2176 * C1096 + C2171 * C1100 + C2177 * C1095 + C50615 * C1099) *
                C541 -
            (C5464 * C50896 + C5465 * C540) +
            (C2176 * C1104 + C2171 * C1108 + C2177 * C1103 + C50615 * C1107) *
                C50705) *
               C50755 * C5084) *
              C50940 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C540 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50896 -
            (C2733 + C2734) * C541 - (C2735 + C2736) * C50705) *
               C50755 * C5082 +
           ((C2176 * C398 + C2171 * C408 + C2177 * C399 + C50615 * C409) *
                C540 +
            (C2176 * C412 + C2171 * C428 + C2177 * C413 + C50615 * C429) *
                C50896 -
            (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                C541 -
            (C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                C50705) *
               C50755 * C5083 +
           ((C2176 * C404 + C2171 * C419 + C2177 * C405 + C50615 * C420) *
                C540 +
            (C2176 * C423 + C2171 * C434 + C2177 * C424 + C50615 * C435) *
                C50896 -
            (C2177 * C1094 + C50615 * C1098 + C2176 * C1095 + C2171 * C1099) *
                C541 -
            (C2177 * C1102 + C50615 * C1106 + C2176 * C1103 + C2171 * C1107) *
                C50705) *
               C50755 * C5084) *
              C539) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C540 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50896 -
             (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                C2173 +
            ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
             (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
                C2174 +
            (C2409 * C540 + C2410 * C50896 - (C2394 + C2393) * C541 -
             (C2396 + C2395) * C50705) *
                C2175) *
               C50767 * C251 +
           (((C2397 + C2398) * C541 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50896 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C540) +
             (C2399 + C2400) * C50705) *
                C2173 +
            ((C2402 + C2401) * C541 -
             ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
             (C2404 + C2403) * C50705) *
                C2174 +
            ((C2406 + C2405) * C541 - (C2412 * C50896 + C2411 * C540) +
             (C2408 + C2407) * C50705) *
                C2175) *
               C50767 * C50640) *
              C50897 +
          ((((C3125 + C3126) * C541 -
             ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                  C50896 +
              (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                  C540) +
             (C3127 + C3128) * C50705) *
                C2173 +
            ((C3129 + C3130) * C541 -
             ((C3128 + C3127) * C50896 + (C3126 + C3125) * C540) +
             (C3131 + C3132) * C50705) *
                C2174 +
            ((C2176 * C3080 + C2171 * C3083 + C2177 * C3081 + C50615 * C3084) *
                 C541 -
             ((C3132 + C3131) * C50896 + (C3130 + C3129) * C540) +
             (C2176 * C3085 + C2171 * C3089 + C2177 * C3086 + C50615 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C251 +
           (((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C540 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50896 -
             (C3133 + C3134) * C541 - (C3135 + C3136) * C50705) *
                C2173 +
            ((C3134 + C3133) * C540 + (C3136 + C3135) * C50896 -
             (C3137 + C3138) * C541 - (C3139 + C3140) * C50705) *
                C2174 +
            ((C3138 + C3137) * C540 + (C3140 + C3139) * C50896 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C541 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C540 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50896 -
            (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
             C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                C541 -
            (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
             C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                C50705) *
               C50755 * C50767 * C251 +
           ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
             C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
                C541 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50896 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C540) +
            (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
             C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50897 +
          (((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
             C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
                C541 -
            ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
              C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                 C50896 +
             (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
              C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                 C540) +
            (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
             C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
                C50705) *
               C50755 * C50767 * C251 +
           ((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C540 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50896 -
            (C120 * C784 + C108 * C793 + C119 * C783 + C107 * C788 +
             C118 * C782 + C106 * C787 + C117 * C781 + C105 * C786) *
                C541 -
            (C120 * C794 + C108 * C799 + C119 * C792 + C107 * C798 +
             C118 * C791 + C106 * C797 + C117 * C790 + C105 * C796) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C540 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50896 -
             (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                C50755 * C5082 +
            ((C5438 + C5439) * C540 + (C5440 + C5441) * C50896 -
             (C3126 + C3125) * C541 - (C3128 + C3127) * C50705) *
                C50755 * C5083 +
            (C5462 * C540 + C5463 * C50896 - (C3577 + C3578) * C541 -
             (C3579 + C3580) * C50705) *
                C50755 * C5084) *
               C251 +
           (((C2397 + C2398) * C541 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50896 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C540) +
             (C2399 + C2400) * C50705) *
                C50755 * C5082 +
            ((C3134 + C3133) * C541 -
             ((C5450 + C5451) * C50896 + (C5452 + C5453) * C540) +
             (C3136 + C3135) * C50705) *
                C50755 * C5083 +
            ((C5996 + C5997) * C541 - (C5464 * C50896 + C5465 * C540) +
             (C5998 + C5999) * C50705) *
                C50755 * C5084) *
               C50640) *
              C50897 +
          ((((C3125 + C3126) * C541 -
             ((C5441 + C5440) * C50896 + (C5439 + C5438) * C540) +
             (C3127 + C3128) * C50705) *
                C50755 * C5082 +
            ((C3578 + C3577) * C541 -
             ((C5445 + C5444) * C50896 + (C5443 + C5442) * C540) +
             (C3580 + C3579) * C50705) *
                C50755 * C5083 +
            ((C2176 * C4485 + C2171 * C4493 + C2177 * C4484 + C50615 * C4492) *
                 C541 -
             ((C5458 + C5459) * C50896 + (C5460 + C5461) * C540) +
             (C2176 * C4491 + C2171 * C4497 + C2177 * C4490 + C50615 * C4496) *
                 C50705) *
                C50755 * C5084) *
               C251 +
           (((C5453 + C5452) * C540 + (C5451 + C5450) * C50896 -
             (C3133 + C3134) * C541 - (C3135 + C3136) * C50705) *
                C50755 * C5082 +
            ((C5449 + C5448) * C540 + (C5447 + C5446) * C50896 -
             (C5997 + C5996) * C541 - (C5999 + C5998) * C50705) *
                C50755 * C5083 +
            ((C5454 + C5455) * C540 + (C5456 + C5457) * C50896 -
             (C2177 * C5983 + C50615 * C5984 + C2176 * C4484 + C2171 * C4492) *
                 C541 -
             (C2177 * C5985 + C50615 * C5986 + C2176 * C4490 + C2171 * C4496) *
                 C50705) *
                C50755 * C5084) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C121 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50653) *
                  C50755 * C50767 * C112 -
              ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                   C50653 +
               (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                   C121) *
                  C50755 * C50767 * C113 +
              ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                   C121 +
               (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                   C50653) *
                  C50755 * C50767 * C114 -
              ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
                C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
                   C50653 +
               (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
                C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
                   C121) *
                  C50755 * C50767 * C115) *
             C50669 +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C253 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C248 -
               (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
                C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                   C254 -
               (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
                C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                   C249 +
               (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
                C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
                   C255 +
               (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
                C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
                   C250) *
                  C50755 * C50767 * C251 +
              ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
                C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
                   C254 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C248 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C253) +
               (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
                C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
                   C249 -
               (C120 * C265 + C108 * C284 + C119 * C263 + C107 * C277 +
                C118 * C262 + C106 * C276 + C117 * C261 + C105 * C275) *
                   C255 -
               (C120 * C285 + C108 * C295 + C119 * C281 + C107 * C293 +
                C118 * C280 + C106 * C292 + C117 * C279 + C105 * C291) *
                   C250) *
                  C50755 * C50767 * C50640) *
             C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C251 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C50640) *
              C394 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C50640 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C251) *
              C395 +
          (((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
             C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
                C121 +
            (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
             C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
                C50653) *
               C50755 * C50767 * C251 -
           ((C120 * C425 + C108 * C436 + C119 * C424 + C107 * C435 +
             C118 * C423 + C106 * C434 + C117 * C422 + C105 * C433) *
                C50653 +
            (C120 * C406 + C108 * C426 + C119 * C405 + C107 * C420 +
             C118 * C404 + C106 * C419 + C117 * C403 + C105 * C418) *
                C121) *
               C50755 * C50767 * C50640) *
              C396)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C2173 +
           ((C2176 * C259 + C2171 * C269 + C2177 * C258 + C50615 * C268) *
                C121 +
            (C2176 * C273 + C2171 * C289 + C2177 * C272 + C50615 * C288) *
                C50653) *
               C2174 +
           ((C2176 * C260 + C2171 * C274 + C2177 * C261 + C50615 * C275) *
                C121 +
            (C2176 * C278 + C2171 * C290 + C2177 * C279 + C50615 * C291) *
                C50653) *
               C2175) *
              C50767 * C112 -
          (((C2177 * C280 + C50615 * C292 + C2176 * C279 + C2171 * C291) *
                C50653 +
            (C2177 * C262 + C50615 * C276 + C2176 * C261 + C2171 * C275) *
                C121) *
               C2175 +
           ((C2177 * C271 + C50615 * C287 + C2176 * C272 + C2171 * C288) *
                C50653 +
            (C2177 * C257 + C50615 * C267 + C2176 * C258 + C2171 * C268) *
                C121) *
               C2174 +
           ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                C50653 +
            (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                C121) *
               C2173) *
              C50767 * C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50653) *
               C2173 +
           ((C2176 * C257 + C2171 * C267 + C2177 * C256 + C50615 * C266) *
                C121 +
            (C2176 * C271 + C2171 * C287 + C2177 * C270 + C50615 * C286) *
                C50653) *
               C2174 +
           ((C2176 * C262 + C2171 * C276 + C2177 * C263 + C50615 * C277) *
                C121 +
            (C2176 * C280 + C2171 * C292 + C2177 * C281 + C50615 * C293) *
                C50653) *
               C2175) *
              C50767 * C114 -
          (((C2177 * C285 + C50615 * C295 + C2176 * C281 + C2171 * C293) *
                C50653 +
            (C2177 * C265 + C50615 * C284 + C2176 * C263 + C2171 * C277) *
                C121) *
               C2175 +
           ((C2177 * C283 + C50615 * C294 + C2176 * C270 + C2171 * C286) *
                C50653 +
            (C2177 * C264 + C50615 * C282 + C2176 * C256 + C2171 * C266) *
                C121) *
               C2174 +
           ((C2177 * C137 + C50615 * C147 + C2176 * C136 + C2171 * C146) *
                C50653 +
            (C2177 * C126 + C50615 * C138 + C2176 * C125 + C2171 * C132) *
                C121) *
               C2173) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C2173 +
           ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
            (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
            (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
               C2174 +
           (C2409 * C253 + C2410 * C248 - (C2394 + C2393) * C254 -
            (C2396 + C2395) * C249 +
            (C2176 * C2324 + C2171 * C2327 + C2177 * C2325 + C50615 * C2328) *
                C255 +
            (C2176 * C2329 + C2171 * C2333 + C2177 * C2330 + C50615 * C2334) *
                C250) *
               C2175) *
              C50767 * C251 +
          (((C2397 + C2398) * C254 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C248 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2399 + C2400) * C249 - C2411 * C255 - C2412 * C250) *
               C2173 +
           ((C2402 + C2401) * C254 -
            ((C2400 + C2399) * C248 + (C2398 + C2397) * C253) +
            (C2404 + C2403) * C249 - (C2405 + C2406) * C255 -
            (C2407 + C2408) * C250) *
               C2174 +
           ((C2406 + C2405) * C254 - (C2412 * C248 + C2411 * C253) +
            (C2408 + C2407) * C249 -
            (C2177 * C2326 + C50615 * C2331 + C2176 * C2325 + C2171 * C2328) *
                C255 -
            (C2177 * C2332 + C50615 * C2335 + C2176 * C2330 + C2171 * C2334) *
                C250) *
               C2175) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C251 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C50640) *
              C394 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C2176 * C781 + C2171 * C786 + C2177 * C782 + C50615 * C787) *
                 C121 +
             (C2176 * C790 + C2171 * C796 + C2177 * C791 + C50615 * C797) *
                 C50653) *
                C2174 +
            ((C2176 * C1446 + C2171 * C1450 + C2177 * C1445 + C50615 * C1449) *
                 C121 +
             (C2176 * C1454 + C2171 * C1458 + C2177 * C1453 + C50615 * C1457) *
                 C50653) *
                C2175) *
               C50767 * C50640 -
           (((C2177 * C1454 + C50615 * C1458 + C2176 * C1455 + C2171 * C1459) *
                 C50653 +
             (C2177 * C1446 + C50615 * C1450 + C2176 * C1447 + C2171 * C1451) *
                 C121) *
                C2175 +
            ((C2177 * C790 + C50615 * C796 + C2176 * C789 + C2171 * C795) *
                 C50653 +
             (C2177 * C781 + C50615 * C786 + C2176 * C780 + C2171 * C785) *
                 C121) *
                C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C251) *
              C395 +
          ((((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                 C121 +
             (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                 C50653) *
                C2173 +
            ((C2176 * C1097 + C2171 * C1101 + C2177 * C1096 + C50615 * C1100) *
                 C121 +
             (C2176 * C1105 + C2171 * C1109 + C2177 * C1104 + C50615 * C1108) *
                 C50653) *
                C2174 +
            ((C2176 * C2558 + C2171 * C2561 + C2177 * C2559 + C50615 * C2562) *
                 C121 +
             (C2176 * C2563 + C2171 * C2567 + C2177 * C2564 + C50615 * C2568) *
                 C50653) *
                C2175) *
               C50767 * C251 -
           (((C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                 C50653 +
             (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                 C121) *
                C2175 +
            ((C2177 * C1103 + C50615 * C1107 + C2176 * C1104 + C2171 * C1108) *
                 C50653 +
             (C2177 * C1095 + C50615 * C1099 + C2176 * C1096 + C2171 * C1100) *
                 C121) *
                C2174 +
            ((C2177 * C423 + C50615 * C434 + C2176 * C422 + C2171 * C433) *
                 C50653 +
             (C2177 * C404 + C50615 * C419 + C2176 * C403 + C2171 * C418) *
                 C121) *
                C2173) *
               C50767 * C50640) *
              C396)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C50755 * C5082 +
           ((C2176 * C401 + C2171 * C416 + C2177 * C397 + C50615 * C407) *
                C121 +
            (C2176 * C415 + C2171 * C431 + C2177 * C411 + C50615 * C427) *
                C50653) *
               C50755 * C5083 +
           ((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C121 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C50653) *
               C50755 * C5084) *
              C112 -
          (((C2177 * C423 + C50615 * C434 + C2176 * C422 + C2171 * C433) *
                C50653 +
            (C2177 * C404 + C50615 * C419 + C2176 * C403 + C2171 * C418) *
                C121) *
               C50755 * C5084 +
           ((C2177 * C412 + C50615 * C428 + C2176 * C411 + C2171 * C427) *
                C50653 +
            (C2177 * C398 + C50615 * C408 + C2176 * C397 + C2171 * C407) *
                C121) *
               C50755 * C5083 +
           ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                C50653 +
            (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                C121) *
               C50755 * C5082) *
              C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50653) *
               C50755 * C5082 +
           ((C2176 * C398 + C2171 * C408 + C2177 * C399 + C50615 * C409) *
                C121 +
            (C2176 * C412 + C2171 * C428 + C2177 * C413 + C50615 * C429) *
                C50653) *
               C50755 * C5083 +
           ((C2176 * C404 + C2171 * C419 + C2177 * C405 + C50615 * C420) *
                C121 +
            (C2176 * C423 + C2171 * C434 + C2177 * C424 + C50615 * C435) *
                C50653) *
               C50755 * C5084) *
              C114 -
          (((C2177 * C425 + C50615 * C436 + C2176 * C424 + C2171 * C435) *
                C50653 +
            (C2177 * C406 + C50615 * C426 + C2176 * C405 + C2171 * C420) *
                C121) *
               C50755 * C5084 +
           ((C2177 * C414 + C50615 * C430 + C2176 * C413 + C2171 * C429) *
                C50653 +
            (C2177 * C400 + C50615 * C410 + C2176 * C399 + C2171 * C409) *
                C121) *
               C50755 * C5083 +
           ((C2177 * C137 + C50615 * C147 + C2176 * C136 + C2171 * C146) *
                C50653 +
            (C2177 * C126 + C50615 * C138 + C2176 * C125 + C2171 * C132) *
                C121) *
               C50755 * C5082) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C50755 * C5082 +
           ((C2176 * C401 + C2171 * C416 + C2177 * C397 + C50615 * C407) *
                C253 +
            (C2176 * C415 + C2171 * C431 + C2177 * C411 + C50615 * C427) *
                C248 -
            (C3126 + C3125) * C254 - (C3128 + C3127) * C249 +
            (C3129 + C3130) * C255 + (C3131 + C3132) * C250) *
               C50755 * C5083 +
           ((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C253 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C248 -
            (C3577 + C3578) * C254 - (C3579 + C3580) * C249 +
            (C3582 + C3581) * C255 + (C3584 + C3583) * C250) *
               C50755 * C5084) *
              C251 +
          (((C2397 + C2398) * C254 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C248 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2399 + C2400) * C249 - C2411 * C255 - C2412 * C250) *
               C50755 * C5082 +
           ((C3134 + C3133) * C254 -
            ((C2177 * C412 + C50615 * C428 + C2176 * C411 + C2171 * C427) *
                 C248 +
             (C2177 * C398 + C50615 * C408 + C2176 * C397 + C2171 * C407) *
                 C253) +
            (C3136 + C3135) * C249 - (C3137 + C3138) * C255 -
            (C3139 + C3140) * C250) *
               C50755 * C5083 +
           ((C2176 * C1096 + C2171 * C1100 + C2177 * C1095 + C50615 * C1099) *
                C254 -
            ((C2177 * C423 + C50615 * C434 + C2176 * C422 + C2171 * C433) *
                 C248 +
             (C2177 * C404 + C50615 * C419 + C2176 * C403 + C2171 * C418) *
                 C253) +
            (C2176 * C1104 + C2171 * C1108 + C2177 * C1103 + C50615 * C1107) *
                C249 -
            (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                C255 -
            (C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                C250) *
               C50755 * C5084) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C5082 +
            ((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50755 *
                C5083 +
            C5472 * C5084) *
               C251 -
           (C5473 * C5084 +
            ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50755 *
                C5083 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C50755 * C5082) *
               C50640) *
              C394 +
          ((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50755 *
                C5082 +
            ((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50755 *
                C5083 +
            ((C5454 + C5455) * C121 + (C5456 + C5457) * C50653) * C50755 *
                C5084) *
               C50640 -
           (((C5458 + C5459) * C50653 + (C5460 + C5461) * C121) * C50755 *
                C5084 +
            ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50755 *
                C5083 +
            ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50755 *
                C5082) *
               C251) *
              C395 +
          ((C5472 * C5082 +
            ((C5461 + C5460) * C121 + (C5459 + C5458) * C50653) * C50755 *
                C5083 +
            ((C2176 * C5377 + C2171 * C5380 + C2177 * C5378 + C50615 * C5381) *
                 C121 +
             (C2176 * C5382 + C2171 * C5386 + C2177 * C5383 + C50615 * C5387) *
                 C50653) *
                C50755 * C5084) *
               C251 -
           (((C2177 * C5384 + C50615 * C5388 + C2176 * C5383 + C2171 * C5387) *
                 C50653 +
             (C2177 * C5379 + C50615 * C5385 + C2176 * C5378 + C2171 * C5381) *
                 C121) *
                C50755 * C5084 +
            ((C5457 + C5456) * C50653 + (C5455 + C5454) * C121) * C50755 *
                C5083 +
            C5473 * C5082) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C50939 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C50940 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C2173 +
            ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C2174 +
            ((C2738 + C2737) * C121 + (C2740 + C2739) * C50653) * C2175) *
               C50767 * C539) *
              C50897 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C2176 * C781 + C2171 * C786 + C2177 * C782 + C50615 * C787) *
                 C121 +
             (C2176 * C790 + C2171 * C796 + C2177 * C791 + C50615 * C797) *
                 C50653) *
                C2174 +
            ((C2176 * C1446 + C2171 * C1450 + C2177 * C1445 + C50615 * C1449) *
                 C121 +
             (C2176 * C1454 + C2171 * C1458 + C2177 * C1453 + C50615 * C1457) *
                 C50653) *
                C2175) *
               C50767 * C50940 -
           (((C2177 * C1454 + C50615 * C1458 + C2176 * C1455 + C2171 * C1459) *
                 C50653 +
             (C2177 * C1446 + C50615 * C1450 + C2176 * C1447 + C2171 * C1451) *
                 C121) *
                C2175 +
            ((C2177 * C790 + C50615 * C796 + C2176 * C789 + C2171 * C795) *
                 C50653 +
             (C2177 * C781 + C50615 * C786 + C2176 * C780 + C2171 * C785) *
                 C121) *
                C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C50939 -
           (((C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50653 +
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C121) *
                C2175 +
            ((C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                 C50653 +
             (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                 C121) *
                C2174 +
            ((C2177 * C413 + C50615 * C429 + C2176 * C412 + C2171 * C428) *
                 C50653 +
             (C2177 * C399 + C50615 * C409 + C2176 * C398 + C2171 * C408) *
                 C121) *
                C2173) *
               C50767 * C539) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C50939 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C50940 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50653) *
               C50755 * C50767 * C539) *
              C50897 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C50940 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C50939 -
           ((C120 * C647 + C108 * C649 + C119 * C414 + C107 * C430 +
             C118 * C413 + C106 * C429 + C117 * C412 + C105 * C428) *
                C50653 +
            (C120 * C646 + C108 * C648 + C119 * C400 + C107 * C410 +
             C118 * C399 + C106 * C409 + C117 * C398 + C105 * C408) *
                C121) *
               C50755 * C50767 * C539) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C5082 +
            ((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50755 *
                C5083 +
            C5472 * C5084) *
               C50939 -
           (C5473 * C5084 +
            ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50755 *
                C5083 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C50755 * C5082) *
               C50940 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C50755 * C5082 +
            ((C5782 + C5783) * C121 + (C5784 + C5785) * C50653) * C50755 *
                C5083 +
            ((C5786 + C5787) * C121 + (C5788 + C5789) * C50653) * C50755 *
                C5084) *
               C539) *
              C50897 +
          ((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50755 *
                C5082 +
            ((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50755 *
                C5083 +
            ((C5454 + C5455) * C121 + (C5456 + C5457) * C50653) * C50755 *
                C5084) *
               C50940 -
           (((C5458 + C5459) * C50653 + (C5460 + C5461) * C121) * C50755 *
                C5084 +
            ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50755 *
                C5083 +
            ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50755 *
                C5082) *
               C50939 -
           (((C2177 * C1732 + C50615 * C1740 + C2176 * C1733 + C2171 * C1741) *
                 C50653 +
             (C2177 * C1728 + C50615 * C1736 + C2176 * C1729 + C2171 * C1737) *
                 C121) *
                C50755 * C5084 +
            ((C5789 + C5788) * C50653 + (C5787 + C5786) * C121) * C50755 *
                C5083 +
            ((C5785 + C5784) * C50653 + (C5783 + C5782) * C121) * C50755 *
                C5082) *
               C539) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C248 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C254 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C249 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C255 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C250) *
              C50755 * C50767 * C251 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C254 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C248 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C253) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C249 -
           (C120 * C265 + C108 * C284 + C119 * C263 + C107 * C277 +
            C118 * C262 + C106 * C276 + C117 * C261 + C105 * C275) *
               C255 -
           (C120 * C285 + C108 * C295 + C119 * C281 + C107 * C293 +
            C118 * C280 + C106 * C292 + C117 * C279 + C105 * C291) *
               C250) *
              C50755 * C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50653) *
              C50755 * C50767 * C112 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50653 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50755 * C50767 * C113 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50653) *
              C50755 * C50767 * C114 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50653 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50755 * C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C2173 +
           ((C2176 * C259 + C2171 * C269 + C2177 * C258 + C50615 * C268) *
                C121 +
            (C2176 * C273 + C2171 * C289 + C2177 * C272 + C50615 * C288) *
                C50653) *
               C2174 +
           ((C2176 * C260 + C2171 * C274 + C2177 * C261 + C50615 * C275) *
                C121 +
            (C2176 * C278 + C2171 * C290 + C2177 * C279 + C50615 * C291) *
                C50653) *
               C2175) *
              C50767 * C112 -
          (((C2177 * C280 + C50615 * C292 + C2176 * C279 + C2171 * C291) *
                C50653 +
            (C2177 * C262 + C50615 * C276 + C2176 * C261 + C2171 * C275) *
                C121) *
               C2175 +
           ((C2177 * C271 + C50615 * C287 + C2176 * C272 + C2171 * C288) *
                C50653 +
            (C2177 * C257 + C50615 * C267 + C2176 * C258 + C2171 * C268) *
                C121) *
               C2174 +
           ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                C50653 +
            (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                C121) *
               C2173) *
              C50767 * C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50653) *
               C2173 +
           ((C2176 * C257 + C2171 * C267 + C2177 * C256 + C50615 * C266) *
                C121 +
            (C2176 * C271 + C2171 * C287 + C2177 * C270 + C50615 * C286) *
                C50653) *
               C2174 +
           ((C2176 * C262 + C2171 * C276 + C2177 * C263 + C50615 * C277) *
                C121 +
            (C2176 * C280 + C2171 * C292 + C2177 * C281 + C50615 * C293) *
                C50653) *
               C2175) *
              C50767 * C114 -
          (((C2177 * C285 + C50615 * C295 + C2176 * C281 + C2171 * C293) *
                C50653 +
            (C2177 * C265 + C50615 * C284 + C2176 * C263 + C2171 * C277) *
                C121) *
               C2175 +
           ((C2177 * C283 + C50615 * C294 + C2176 * C270 + C2171 * C286) *
                C50653 +
            (C2177 * C264 + C50615 * C282 + C2176 * C256 + C2171 * C266) *
                C121) *
               C2174 +
           ((C2177 * C137 + C50615 * C147 + C2176 * C136 + C2171 * C146) *
                C50653 +
            (C2177 * C126 + C50615 * C138 + C2176 * C125 + C2171 * C132) *
                C121) *
               C2173) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C2173 +
           ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
            (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
            (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
               C2174 +
           (C2409 * C253 + C2410 * C248 - (C2394 + C2393) * C254 -
            (C2396 + C2395) * C249 +
            (C2176 * C2324 + C2171 * C2327 + C2177 * C2325 + C50615 * C2328) *
                C255 +
            (C2176 * C2329 + C2171 * C2333 + C2177 * C2330 + C50615 * C2334) *
                C250) *
               C2175) *
              C50767 * C251 +
          (((C2397 + C2398) * C254 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C248 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2399 + C2400) * C249 - C2411 * C255 - C2412 * C250) *
               C2173 +
           ((C2402 + C2401) * C254 -
            ((C2400 + C2399) * C248 + (C2398 + C2397) * C253) +
            (C2404 + C2403) * C249 - (C2405 + C2406) * C255 -
            (C2407 + C2408) * C250) *
               C2174 +
           ((C2406 + C2405) * C254 - (C2412 * C248 + C2411 * C253) +
            (C2408 + C2407) * C249 -
            (C2177 * C2326 + C50615 * C2331 + C2176 * C2325 + C2171 * C2328) *
                C255 -
            (C2177 * C2332 + C50615 * C2335 + C2176 * C2330 + C2171 * C2334) *
                C250) *
               C2175) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C50755 * C5082 +
           ((C2176 * C401 + C2171 * C416 + C2177 * C397 + C50615 * C407) *
                C121 +
            (C2176 * C415 + C2171 * C431 + C2177 * C411 + C50615 * C427) *
                C50653) *
               C50755 * C5083 +
           ((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C121 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C50653) *
               C50755 * C5084) *
              C112 -
          (((C2177 * C423 + C50615 * C434 + C2176 * C422 + C2171 * C433) *
                C50653 +
            (C2177 * C404 + C50615 * C419 + C2176 * C403 + C2171 * C418) *
                C121) *
               C50755 * C5084 +
           ((C2177 * C412 + C50615 * C428 + C2176 * C411 + C2171 * C427) *
                C50653 +
            (C2177 * C398 + C50615 * C408 + C2176 * C397 + C2171 * C407) *
                C121) *
               C50755 * C5083 +
           ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                C50653 +
            (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                C121) *
               C50755 * C5082) *
              C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50653) *
               C50755 * C5082 +
           ((C2176 * C398 + C2171 * C408 + C2177 * C399 + C50615 * C409) *
                C121 +
            (C2176 * C412 + C2171 * C428 + C2177 * C413 + C50615 * C429) *
                C50653) *
               C50755 * C5083 +
           ((C2176 * C404 + C2171 * C419 + C2177 * C405 + C50615 * C420) *
                C121 +
            (C2176 * C423 + C2171 * C434 + C2177 * C424 + C50615 * C435) *
                C50653) *
               C50755 * C5084) *
              C114 -
          (((C2177 * C425 + C50615 * C436 + C2176 * C424 + C2171 * C435) *
                C50653 +
            (C2177 * C406 + C50615 * C426 + C2176 * C405 + C2171 * C420) *
                C121) *
               C50755 * C5084 +
           ((C2177 * C414 + C50615 * C430 + C2176 * C413 + C2171 * C429) *
                C50653 +
            (C2177 * C400 + C50615 * C410 + C2176 * C399 + C2171 * C409) *
                C121) *
               C50755 * C5083 +
           ((C2177 * C137 + C50615 * C147 + C2176 * C136 + C2171 * C146) *
                C50653 +
            (C2177 * C126 + C50615 * C138 + C2176 * C125 + C2171 * C132) *
                C121) *
               C50755 * C5082) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C50755 * C5082 +
           ((C2176 * C401 + C2171 * C416 + C2177 * C397 + C50615 * C407) *
                C253 +
            (C2176 * C415 + C2171 * C431 + C2177 * C411 + C50615 * C427) *
                C248 -
            (C3126 + C3125) * C254 - (C3128 + C3127) * C249 +
            (C3129 + C3130) * C255 + (C3131 + C3132) * C250) *
               C50755 * C5083 +
           ((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C253 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C248 -
            (C3577 + C3578) * C254 - (C3579 + C3580) * C249 +
            (C3582 + C3581) * C255 + (C3584 + C3583) * C250) *
               C50755 * C5084) *
              C251 +
          (((C2397 + C2398) * C254 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C248 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2399 + C2400) * C249 - C2411 * C255 - C2412 * C250) *
               C50755 * C5082 +
           ((C3134 + C3133) * C254 -
            ((C2177 * C412 + C50615 * C428 + C2176 * C411 + C2171 * C427) *
                 C248 +
             (C2177 * C398 + C50615 * C408 + C2176 * C397 + C2171 * C407) *
                 C253) +
            (C3136 + C3135) * C249 - (C3137 + C3138) * C255 -
            (C3139 + C3140) * C250) *
               C50755 * C5083 +
           ((C2176 * C1096 + C2171 * C1100 + C2177 * C1095 + C50615 * C1099) *
                C254 -
            ((C2177 * C423 + C50615 * C434 + C2176 * C422 + C2171 * C433) *
                 C248 +
             (C2177 * C404 + C50615 * C419 + C2176 * C403 + C2171 * C418) *
                 C253) +
            (C2176 * C1104 + C2171 * C1108 + C2177 * C1103 + C50615 * C1107) *
                C249 -
            (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                C255 -
            (C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                C250) *
               C50755 * C5084) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C1213 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50941 -
            (C2385 + C2386) * C1214 - (C2387 + C2388) * C50942 + C2409 * C1215 +
            C2410 * C1210) *
               C2173 +
           ((C2386 + C2385) * C1213 + (C2388 + C2387) * C50941 -
            (C2390 + C2389) * C1214 - (C2392 + C2391) * C50942 +
            (C2393 + C2394) * C1215 + (C2395 + C2396) * C1210) *
               C2174 +
           (C2409 * C1213 + C2410 * C50941 - C3393 * C1214 - C3394 * C50942 +
            (C3404 + C3403) * C1215 + (C3406 + C3405) * C1210) *
               C2175) *
              C50767 * C50888 +
          (((C2397 + C2398) * C1214 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50941 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C1213) +
            (C2399 + C2400) * C50942 - C2411 * C1215 - C2412 * C1210) *
               C2173 +
           ((C2402 + C2401) * C1214 -
            ((C2400 + C2399) * C50941 + (C2398 + C2397) * C1213) +
            (C2404 + C2403) * C50942 - (C2405 + C2406) * C1215 -
            (C2407 + C2408) * C1210) *
               C2174 +
           ((C2406 + C2405) * C1214 - (C2412 * C50941 + C2411 * C1213) +
            (C2408 + C2407) * C50942 -
            (C2177 * C2326 + C50615 * C2331 + C2176 * C2325 + C2171 * C2328) *
                C1215 -
            (C2177 * C2332 + C50615 * C2335 + C2176 * C2330 + C2171 * C2334) *
                C1210) *
               C2175) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1213 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50941 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C1214 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50942 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C1215 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C1210) *
              C50755 * C50767 * C50888 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C1214 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50941 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1213) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C50942 -
           (C120 * C265 + C108 * C284 + C119 * C263 + C107 * C277 +
            C118 * C262 + C106 * C276 + C117 * C261 + C105 * C275) *
               C1215 -
           (C120 * C285 + C108 * C295 + C119 * C281 + C107 * C293 +
            C118 * C280 + C106 * C292 + C117 * C279 + C105 * C291) *
               C1210) *
              C50755 * C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C1213 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50941 -
            (C2385 + C2386) * C1214 - (C2387 + C2388) * C50942 + C2409 * C1215 +
            C2410 * C1210) *
               C50755 * C5082 +
           ((C5438 + C5439) * C1213 + (C5440 + C5441) * C50941 -
            (C3126 + C3125) * C1214 - (C3128 + C3127) * C50942 +
            (C3129 + C3130) * C1215 + (C3131 + C3132) * C1210) *
               C50755 * C5083 +
           (C5462 * C1213 + C5463 * C50941 - C6400 * C1214 - C6401 * C50942 +
            (C3582 + C3581) * C1215 + (C3584 + C3583) * C1210) *
               C50755 * C5084) *
              C50888 +
          (((C2397 + C2398) * C1214 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50941 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C1213) +
            (C2399 + C2400) * C50942 - C2411 * C1215 - C2412 * C1210) *
               C50755 * C5082 +
           ((C3134 + C3133) * C1214 -
            ((C5450 + C5451) * C50941 + (C5452 + C5453) * C1213) +
            (C3136 + C3135) * C50942 - (C3137 + C3138) * C1215 -
            (C3139 + C3140) * C1210) *
               C50755 * C5083 +
           ((C5996 + C5997) * C1214 - (C5464 * C50941 + C5465 * C1213) +
            (C5998 + C5999) * C50942 -
            (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                C1215 -
            (C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                C1210) *
               C50755 * C5084) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C1213 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50941 -
            (C2385 + C2386) * C1214 - (C2387 + C2388) * C50942 + C2409 * C1215 +
            C2410 * C1210) *
               C2173 +
           ((C2386 + C2385) * C1213 + (C2388 + C2387) * C50941 -
            (C2390 + C2389) * C1214 - (C2392 + C2391) * C50942 +
            (C2393 + C2394) * C1215 + (C2395 + C2396) * C1210) *
               C2174 +
           (C2409 * C1213 + C2410 * C50941 - C3393 * C1214 - C3394 * C50942 +
            (C3404 + C3403) * C1215 + (C3406 + C3405) * C1210) *
               C2175) *
              C50767 * C50635 * C50897 +
          (((C3125 + C3126) * C1214 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50941 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C1213) +
            (C3127 + C3128) * C50942 - C4079 * C1215 - C4080 * C1210) *
               C2173 +
           ((C3129 + C3130) * C1214 -
            ((C3128 + C3127) * C50941 + (C3126 + C3125) * C1213) +
            (C3131 + C3132) * C50942 - (C4089 + C4090) * C1215 -
            (C4091 + C4092) * C1210) *
               C2174 +
           ((C4090 + C4089) * C1214 - (C4080 * C50941 + C4079 * C1213) +
            (C4092 + C4091) * C50942 -
            (C2177 * C4070 + C50615 * C4072 + C2176 * C4071 + C2171 * C4073) *
                C1215 -
            (C2177 * C4074 + C50615 * C4076 + C2176 * C4075 + C2171 * C4077) *
                C1210) *
               C2175) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1213 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50941 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C1214 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50942 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C1215 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C1210) *
              C50755 * C50767 * C50635 * C50897 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C1214 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50941 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C1213) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C50942 -
           (C120 * C1444 + C108 * C1448 + C119 * C1445 + C107 * C1449 +
            C118 * C1446 + C106 * C1450 + C117 * C1447 + C105 * C1451) *
               C1215 -
           (C120 * C1452 + C108 * C1456 + C119 * C1453 + C107 * C1457 +
            C118 * C1454 + C106 * C1458 + C117 * C1455 + C105 * C1459) *
               C1210) *
              C50755 * C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C1213 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50941 -
            (C2385 + C2386) * C1214 - (C2387 + C2388) * C50942 + C2409 * C1215 +
            C2410 * C1210) *
               C50755 * C5082 +
           ((C5438 + C5439) * C1213 + (C5440 + C5441) * C50941 -
            (C3126 + C3125) * C1214 - (C3128 + C3127) * C50942 +
            (C3129 + C3130) * C1215 + (C3131 + C3132) * C1210) *
               C50755 * C5083 +
           (C5462 * C1213 + C5463 * C50941 - C6400 * C1214 - C6401 * C50942 +
            (C3582 + C3581) * C1215 + (C3584 + C3583) * C1210) *
               C50755 * C5084) *
              C50635 * C50897 +
          (((C3125 + C3126) * C1214 -
            ((C5441 + C5440) * C50941 + (C5439 + C5438) * C1213) +
            (C3127 + C3128) * C50942 - C4079 * C1215 - C4080 * C1210) *
               C50755 * C5082 +
           ((C3578 + C3577) * C1214 -
            ((C5445 + C5444) * C50941 + (C5443 + C5442) * C1213) +
            (C3580 + C3579) * C50942 - (C3581 + C3582) * C1215 -
            (C3583 + C3584) * C1210) *
               C50755 * C5083 +
           ((C6413 + C6414) * C1214 -
            ((C5458 + C5459) * C50941 + (C5460 + C5461) * C1213) +
            (C6415 + C6416) * C50942 -
            (C2177 * C4482 + C50615 * C4488 + C2176 * C4483 + C2171 * C4489) *
                C1215 -
            (C2177 * C4486 + C50615 * C4494 + C2176 * C4487 + C2171 * C4495) *
                C1210) *
               C50755 * C5084) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C903 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C898 -
               (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
                C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                   C904 -
               (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
                C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                   C50705) *
                  C50755 * C50767 * C900 +
              ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
                C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
                   C904 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C898 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C903) +
               (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
                C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
                   C50705) *
                  C50755 * C50767 * C901 +
              ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                   C903 +
               (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                   C898 -
               (C120 * C542 + C108 * C543 + C119 * C264 + C107 * C282 +
                C118 * C256 + C106 * C266 + C117 * C257 + C105 * C267) *
                   C904 -
               (C120 * C544 + C108 * C545 + C119 * C283 + C107 * C294 +
                C118 * C270 + C106 * C286 + C117 * C271 + C105 * C287) *
                   C50705) *
                  C50755 * C50767 * C902) *
             C50669 +
         0.5 * std::pow(Pi, 2.5) *
             ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
               C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                  C976 +
              (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
               C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                  C971 -
              (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
               C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                  C977 -
              (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
               C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                  C972 +
              (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
               C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
                  C978 +
              (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
               C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
                  C973 -
              (C120 * C980 + C108 * C984 + C119 * C981 + C107 * C985 +
               C118 * C982 + C106 * C986 + C117 * C983 + C105 * C987) *
                  C979 -
              (C120 * C988 + C108 * C992 + C119 * C989 + C107 * C993 +
               C118 * C990 + C106 * C994 + C117 * C991 + C105 * C995) *
                  C974) *
             C50755 * C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C903 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C898 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C904 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C50635 * C394 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C904 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C898 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C903) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C50705) *
              C50755 * C50767 * C50635 * C395 +
          ((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
            C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
               C903 +
           (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
            C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
               C898 -
           (C120 * C1094 + C108 * C1098 + C119 * C1095 + C107 * C1099 +
            C118 * C1096 + C106 * C1100 + C117 * C1097 + C105 * C1101) *
               C904 -
           (C120 * C1102 + C108 * C1106 + C119 * C1103 + C107 * C1107 +
            C118 * C1104 + C106 * C1108 + C117 * C1105 + C105 * C1109) *
               C50705) *
              C50755 * C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
            (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C903 + C2410 * C898 - (C2394 + C2393) * C904 -
            (C2396 + C2395) * C50705) *
               C2175) *
              C50767 * C900 +
          (((C2397 + C2398) * C904 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C898 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C903) +
            (C2399 + C2400) * C50705) *
               C2173 +
           ((C2402 + C2401) * C904 -
            ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
            (C2404 + C2403) * C50705) *
               C2174 +
           ((C2406 + C2405) * C904 - (C2412 * C898 + C2411 * C903) +
            (C2408 + C2407) * C50705) *
               C2175) *
              C50767 * C901 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C903 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C898 -
            (C2733 + C2734) * C904 - (C2735 + C2736) * C50705) *
               C2173 +
           ((C2734 + C2733) * C903 + (C2736 + C2735) * C898 -
            (C2737 + C2738) * C904 - (C2739 + C2740) * C50705) *
               C2174 +
           ((C2738 + C2737) * C903 + (C2740 + C2739) * C898 -
            (C2177 * C980 + C50615 * C984 + C2176 * C981 + C2171 * C985) *
                C904 -
            (C2177 * C988 + C50615 * C992 + C2176 * C989 + C2171 * C993) *
                C50705) *
               C2175) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) * C976 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) * C971 -
           (C2385 + C2386) * C977 - (C2387 + C2388) * C972 + C2409 * C978 +
           C2410 * C973 - C3393 * C979 - C3394 * C974) *
              C2173 +
          ((C2386 + C2385) * C976 + (C2388 + C2387) * C971 -
           (C2390 + C2389) * C977 - (C2392 + C2391) * C972 +
           (C2393 + C2394) * C978 + (C2395 + C2396) * C973 -
           (C3403 + C3404) * C979 - (C3405 + C3406) * C974) *
              C2174 +
          (C2409 * C976 + C2410 * C971 - C3393 * C977 - C3394 * C972 +
           (C3404 + C3403) * C978 + (C3406 + C3405) * C973 -
           (C2177 * C3384 + C50615 * C3386 + C2176 * C3385 + C2171 * C3387) *
               C979 -
           (C2177 * C3388 + C50615 * C3390 + C2176 * C3389 + C2171 * C3391) *
               C974) *
              C2175) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
            (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C903 + C2410 * C898 - C3393 * C904 - C3394 * C50705) *
               C2175) *
              C50767 * C50635 * C394 +
          (((C3125 + C3126) * C904 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C898 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C903) +
            (C3127 + C3128) * C50705) *
               C2173 +
           ((C3129 + C3130) * C904 -
            ((C3128 + C3127) * C898 + (C3126 + C3125) * C903) +
            (C3131 + C3132) * C50705) *
               C2174 +
           ((C2176 * C3080 + C2171 * C3083 + C2177 * C3081 + C50615 * C3084) *
                C904 -
            ((C3132 + C3131) * C898 + (C3130 + C3129) * C903) +
            (C2176 * C3085 + C2171 * C3089 + C2177 * C3086 + C50615 * C3090) *
                C50705) *
               C2175) *
              C50767 * C50635 * C395 +
          (((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C903 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C898 -
            (C3577 + C3578) * C904 - (C3579 + C3580) * C50705) *
               C2173 +
           ((C3578 + C3577) * C903 + (C3580 + C3579) * C898 -
            (C3581 + C3582) * C904 - (C3583 + C3584) * C50705) *
               C2174 +
           ((C3582 + C3581) * C903 + (C3584 + C3583) * C898 -
            (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
                C904 -
            (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
                C50705) *
               C2175) *
              C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C50755 * C5082 +
           ((C5438 + C5439) * C903 + (C5440 + C5441) * C898 -
            (C3126 + C3125) * C904 - (C3128 + C3127) * C50705) *
               C50755 * C5083 +
           (C5462 * C903 + C5463 * C898 - (C3577 + C3578) * C904 -
            (C3579 + C3580) * C50705) *
               C50755 * C5084) *
              C900 +
          (((C2397 + C2398) * C904 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C898 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C903) +
            (C2399 + C2400) * C50705) *
               C50755 * C5082 +
           ((C3134 + C3133) * C904 -
            ((C5450 + C5451) * C898 + (C5452 + C5453) * C903) +
            (C3136 + C3135) * C50705) *
               C50755 * C5083 +
           ((C5996 + C5997) * C904 - (C5464 * C898 + C5465 * C903) +
            (C5998 + C5999) * C50705) *
               C50755 * C5084) *
              C901 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C903 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C898 -
            (C2733 + C2734) * C904 - (C2735 + C2736) * C50705) *
               C50755 * C5082 +
           ((C5782 + C5783) * C903 + (C5784 + C5785) * C898 -
            (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                C904 -
            (C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                C50705) *
               C50755 * C5083 +
           ((C5786 + C5787) * C903 + (C5788 + C5789) * C898 -
            (C2177 * C1094 + C50615 * C1098 + C2176 * C1095 + C2171 * C1099) *
                C904 -
            (C2177 * C1102 + C50615 * C1106 + C2176 * C1103 + C2171 * C1107) *
                C50705) *
               C50755 * C5084) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) * C976 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) * C971 -
           (C2385 + C2386) * C977 - (C2387 + C2388) * C972 + C2409 * C978 +
           C2410 * C973 - C3393 * C979 - C3394 * C974) *
              C50755 * C5082 +
          ((C5438 + C5439) * C976 + (C5440 + C5441) * C971 -
           (C3126 + C3125) * C977 - (C3128 + C3127) * C972 +
           (C3129 + C3130) * C978 + (C3131 + C3132) * C973 -
           (C4089 + C4090) * C979 - (C4091 + C4092) * C974) *
              C50755 * C5083 +
          (C5462 * C976 + C5463 * C971 - (C3577 + C3578) * C977 -
           (C3579 + C3580) * C972 + (C3582 + C3581) * C978 +
           (C3584 + C3583) * C973 -
           (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
               C979 -
           (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
               C974) *
              C50755 * C5084) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C50755 * C5082 +
           ((C5438 + C5439) * C903 + (C5440 + C5441) * C898 -
            (C3126 + C3125) * C904 - (C3128 + C3127) * C50705) *
               C50755 * C5083 +
           C6419 * C5084) *
              C50635 * C394 +
          (((C3125 + C3126) * C904 -
            ((C5441 + C5440) * C898 + (C5439 + C5438) * C903) +
            (C3127 + C3128) * C50705) *
               C50755 * C5082 +
           ((C3578 + C3577) * C904 -
            ((C5445 + C5444) * C898 + (C5443 + C5442) * C903) +
            (C3580 + C3579) * C50705) *
               C50755 * C5083 +
           ((C6413 + C6414) * C904 -
            ((C5458 + C5459) * C898 + (C5460 + C5461) * C903) +
            (C6415 + C6416) * C50705) *
               C50755 * C5084) *
              C50635 * C395 +
          (C6419 * C5082 +
           ((C5461 + C5460) * C903 + (C5459 + C5458) * C898 -
            (C6414 + C6413) * C904 - (C6416 + C6415) * C50705) *
               C50755 * C5083 +
           ((C2176 * C5377 + C2171 * C5380 + C2177 * C5378 + C50615 * C5381) *
                C903 +
            (C2176 * C5382 + C2171 * C5386 + C2177 * C5383 + C50615 * C5387) *
                C898 -
            (C2177 * C6389 + C50615 * C6391 + C2176 * C6390 + C2171 * C6392) *
                C904 -
            (C2177 * C6393 + C50615 * C6395 + C2176 * C6394 + C2171 * C6396) *
                C50705) *
               C50755 * C5084) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C903 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C898 -
             (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
                C2173 +
            ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
             (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
                C2174 +
            (C2409 * C903 + C2410 * C898 - C3393 * C904 - C3394 * C50705) *
                C2175) *
               C50767 * C50888 +
           (((C2397 + C2398) * C904 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C898 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C903) +
             (C2399 + C2400) * C50705) *
                C2173 +
            ((C2402 + C2401) * C904 -
             ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
             (C2404 + C2403) * C50705) *
                C2174 +
            ((C2406 + C2405) * C904 - (C2412 * C898 + C2411 * C903) +
             (C2408 + C2407) * C50705) *
                C2175) *
               C50767 * C50640) *
              C50897 +
          ((((C3125 + C3126) * C904 -
             ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                  C898 +
              (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                  C903) +
             (C3127 + C3128) * C50705) *
                C2173 +
            ((C3129 + C3130) * C904 -
             ((C3128 + C3127) * C898 + (C3126 + C3125) * C903) +
             (C3131 + C3132) * C50705) *
                C2174 +
            ((C2176 * C3080 + C2171 * C3083 + C2177 * C3081 + C50615 * C3084) *
                 C904 -
             ((C3132 + C3131) * C898 + (C3130 + C3129) * C903) +
             (C2176 * C3085 + C2171 * C3089 + C2177 * C3086 + C50615 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C50888 +
           (((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C903 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C898 -
             (C3133 + C3134) * C904 - (C3135 + C3136) * C50705) *
                C2173 +
            ((C3134 + C3133) * C903 + (C3136 + C3135) * C898 -
             (C3137 + C3138) * C904 - (C3139 + C3140) * C50705) *
                C2174 +
            ((C3138 + C3137) * C903 + (C3140 + C3139) * C898 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C904 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C903 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C898 -
            (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
             C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                C904 -
            (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
             C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                C50705) *
               C50755 * C50767 * C50888 +
           ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
             C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
                C904 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C898 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C903) +
            (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
             C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50897 +
          (((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
             C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
                C904 -
            ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
              C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                 C898 +
             (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
              C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                 C903) +
            (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
             C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
                C50705) *
               C50755 * C50767 * C50888 +
           ((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C903 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C898 -
            (C120 * C784 + C108 * C793 + C119 * C783 + C107 * C788 +
             C118 * C782 + C106 * C787 + C117 * C781 + C105 * C786) *
                C904 -
            (C120 * C794 + C108 * C799 + C119 * C792 + C107 * C798 +
             C118 * C791 + C106 * C797 + C117 * C790 + C105 * C796) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C903 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C898 -
             (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
                C50755 * C5082 +
            ((C5438 + C5439) * C903 + (C5440 + C5441) * C898 -
             (C3126 + C3125) * C904 - (C3128 + C3127) * C50705) *
                C50755 * C5083 +
            C6419 * C5084) *
               C50888 +
           (((C2397 + C2398) * C904 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C898 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C903) +
             (C2399 + C2400) * C50705) *
                C50755 * C5082 +
            ((C3134 + C3133) * C904 -
             ((C5450 + C5451) * C898 + (C5452 + C5453) * C903) +
             (C3136 + C3135) * C50705) *
                C50755 * C5083 +
            ((C5996 + C5997) * C904 - (C5464 * C898 + C5465 * C903) +
             (C5998 + C5999) * C50705) *
                C50755 * C5084) *
               C50640) *
              C50897 +
          ((((C3125 + C3126) * C904 -
             ((C5441 + C5440) * C898 + (C5439 + C5438) * C903) +
             (C3127 + C3128) * C50705) *
                C50755 * C5082 +
            ((C3578 + C3577) * C904 -
             ((C5445 + C5444) * C898 + (C5443 + C5442) * C903) +
             (C3580 + C3579) * C50705) *
                C50755 * C5083 +
            ((C6413 + C6414) * C904 -
             ((C5458 + C5459) * C898 + (C5460 + C5461) * C903) +
             (C6415 + C6416) * C50705) *
                C50755 * C5084) *
               C50888 +
           (((C5453 + C5452) * C903 + (C5451 + C5450) * C898 -
             (C3133 + C3134) * C904 - (C3135 + C3136) * C50705) *
                C50755 * C5082 +
            ((C5449 + C5448) * C903 + (C5447 + C5446) * C898 -
             (C5997 + C5996) * C904 - (C5999 + C5998) * C50705) *
                C50755 * C5083 +
            ((C5454 + C5455) * C903 + (C5456 + C5457) * C898 -
             (C2177 * C5983 + C50615 * C5984 + C2176 * C4484 + C2171 * C4492) *
                 C904 -
             (C2177 * C5985 + C50615 * C5986 + C2176 * C4490 + C2171 * C4496) *
                 C50705) *
                C50755 * C5084) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 + C119 * C124 +
           C107 * C131 + C120 * C125 + C108 * C132) *
              C976 +
          (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 + C119 * C135 +
           C107 * C145 + C120 * C136 + C108 * C146) *
              C971 -
          (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 + C118 * C258 +
           C106 * C268 + C117 * C259 + C105 * C269) *
              C977 -
          (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 + C118 * C272 +
           C106 * C288 + C117 * C273 + C105 * C289) *
              C972 +
          (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 + C119 * C262 +
           C107 * C276 + C120 * C263 + C108 * C277) *
              C978 +
          (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 + C119 * C280 +
           C107 * C292 + C120 * C281 + C108 * C293) *
              C973 -
          (C120 * C980 + C108 * C984 + C119 * C981 + C107 * C985 + C118 * C982 +
           C106 * C986 + C117 * C983 + C105 * C987) *
              C979 -
          (C120 * C988 + C108 * C992 + C119 * C989 + C107 * C993 + C118 * C990 +
           C106 * C994 + C117 * C991 + C105 * C995) *
              C974) *
         C50755 * C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C903 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C898 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C904 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C900 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C904 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C898 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C903) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C50705) *
              C50755 * C50767 * C901 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C903 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C898 -
           (C120 * C542 + C108 * C543 + C119 * C264 + C107 * C282 +
            C118 * C256 + C106 * C266 + C117 * C257 + C105 * C267) *
               C904 -
           (C120 * C544 + C108 * C545 + C119 * C283 + C107 * C294 +
            C118 * C270 + C106 * C286 + C117 * C271 + C105 * C287) *
               C50705) *
              C50755 * C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
            (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C903 + C2410 * C898 - (C2394 + C2393) * C904 -
            (C2396 + C2395) * C50705) *
               C2175) *
              C50767 * C900 +
          (((C2397 + C2398) * C904 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C898 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C903) +
            (C2399 + C2400) * C50705) *
               C2173 +
           ((C2402 + C2401) * C904 -
            ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
            (C2404 + C2403) * C50705) *
               C2174 +
           ((C2406 + C2405) * C904 - (C2412 * C898 + C2411 * C903) +
            (C2408 + C2407) * C50705) *
               C2175) *
              C50767 * C901 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C903 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C898 -
            (C2733 + C2734) * C904 - (C2735 + C2736) * C50705) *
               C2173 +
           ((C2734 + C2733) * C903 + (C2736 + C2735) * C898 -
            (C2737 + C2738) * C904 - (C2739 + C2740) * C50705) *
               C2174 +
           ((C2738 + C2737) * C903 + (C2740 + C2739) * C898 -
            (C2177 * C980 + C50615 * C984 + C2176 * C981 + C2171 * C985) *
                C904 -
            (C2177 * C988 + C50615 * C992 + C2176 * C989 + C2171 * C993) *
                C50705) *
               C2175) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) * C976 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) * C971 -
           (C2385 + C2386) * C977 - (C2387 + C2388) * C972 + C2409 * C978 +
           C2410 * C973 - C3393 * C979 - C3394 * C974) *
              C2173 +
          ((C2386 + C2385) * C976 + (C2388 + C2387) * C971 -
           (C2390 + C2389) * C977 - (C2392 + C2391) * C972 +
           (C2393 + C2394) * C978 + (C2395 + C2396) * C973 -
           (C3403 + C3404) * C979 - (C3405 + C3406) * C974) *
              C2174 +
          (C2409 * C976 + C2410 * C971 - C3393 * C977 - C3394 * C972 +
           (C3404 + C3403) * C978 + (C3406 + C3405) * C973 -
           (C2177 * C3384 + C50615 * C3386 + C2176 * C3385 + C2171 * C3387) *
               C979 -
           (C2177 * C3388 + C50615 * C3390 + C2176 * C3389 + C2171 * C3391) *
               C974) *
              C2175) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C50755 * C5082 +
           ((C5438 + C5439) * C903 + (C5440 + C5441) * C898 -
            (C3126 + C3125) * C904 - (C3128 + C3127) * C50705) *
               C50755 * C5083 +
           (C5462 * C903 + C5463 * C898 - (C3577 + C3578) * C904 -
            (C3579 + C3580) * C50705) *
               C50755 * C5084) *
              C900 +
          (((C2397 + C2398) * C904 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C898 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C903) +
            (C2399 + C2400) * C50705) *
               C50755 * C5082 +
           ((C3134 + C3133) * C904 -
            ((C5450 + C5451) * C898 + (C5452 + C5453) * C903) +
            (C3136 + C3135) * C50705) *
               C50755 * C5083 +
           ((C5996 + C5997) * C904 - (C5464 * C898 + C5465 * C903) +
            (C5998 + C5999) * C50705) *
               C50755 * C5084) *
              C901 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C903 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C898 -
            (C2733 + C2734) * C904 - (C2735 + C2736) * C50705) *
               C50755 * C5082 +
           ((C5782 + C5783) * C903 + (C5784 + C5785) * C898 -
            (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                C904 -
            (C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                C50705) *
               C50755 * C5083 +
           ((C5786 + C5787) * C903 + (C5788 + C5789) * C898 -
            (C2177 * C1094 + C50615 * C1098 + C2176 * C1095 + C2171 * C1099) *
                C904 -
            (C2177 * C1102 + C50615 * C1106 + C2176 * C1103 + C2171 * C1107) *
                C50705) *
               C50755 * C5084) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) * C976 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) * C971 -
           (C2385 + C2386) * C977 - (C2387 + C2388) * C972 + C2409 * C978 +
           C2410 * C973 - C3393 * C979 - C3394 * C974) *
              C50755 * C5082 +
          ((C5438 + C5439) * C976 + (C5440 + C5441) * C971 -
           (C3126 + C3125) * C977 - (C3128 + C3127) * C972 +
           (C3129 + C3130) * C978 + (C3131 + C3132) * C973 -
           (C4089 + C4090) * C979 - (C4091 + C4092) * C974) *
              C50755 * C5083 +
          (C5462 * C976 + C5463 * C971 - (C3577 + C3578) * C977 -
           (C3579 + C3580) * C972 + (C3582 + C3581) * C978 +
           (C3584 + C3583) * C973 -
           (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
               C979 -
           (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
               C974) *
              C50755 * C5084) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C540 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50896 -
             (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                C2173 +
            ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
             (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
                C2174 +
            (C2409 * C540 + C2410 * C50896 - C3393 * C541 - C3394 * C50705) *
                C2175) *
               C50767 * C50888 +
           (((C2397 + C2398) * C541 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50896 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C540) +
             (C2399 + C2400) * C50705) *
                C2173 +
            ((C2402 + C2401) * C541 -
             ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
             (C2404 + C2403) * C50705) *
                C2174 +
            ((C2406 + C2405) * C541 - (C2412 * C50896 + C2411 * C540) +
             (C2408 + C2407) * C50705) *
                C2175) *
               C50767 * C50640) *
              C1558 +
          ((((C3125 + C3126) * C541 -
             ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                  C50896 +
              (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                  C540) +
             (C3127 + C3128) * C50705) *
                C2173 +
            ((C3129 + C3130) * C541 -
             ((C3128 + C3127) * C50896 + (C3126 + C3125) * C540) +
             (C3131 + C3132) * C50705) *
                C2174 +
            ((C4090 + C4089) * C541 - (C4080 * C50896 + C4079 * C540) +
             (C4092 + C4091) * C50705) *
                C2175) *
               C50767 * C50888 +
           (((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C540 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50896 -
             (C3133 + C3134) * C541 - (C3135 + C3136) * C50705) *
                C2173 +
            ((C3134 + C3133) * C540 + (C3136 + C3135) * C50896 -
             (C3137 + C3138) * C541 - (C3139 + C3140) * C50705) *
                C2174 +
            ((C3138 + C3137) * C540 + (C3140 + C3139) * C50896 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C541 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C540 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50896 -
            (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
             C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                C541 -
            (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
             C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                C50705) *
               C50755 * C50767 * C50888 +
           ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
             C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
                C541 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50896 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C540) +
            (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
             C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
                C50705) *
               C50755 * C50767 * C50640) *
              C1558 +
          (((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
             C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
                C541 -
            ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
              C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                 C50896 +
             (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
              C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                 C540) +
            (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
             C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
                C50705) *
               C50755 * C50767 * C50888 +
           ((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C540 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50896 -
            (C120 * C784 + C108 * C793 + C119 * C783 + C107 * C788 +
             C118 * C782 + C106 * C787 + C117 * C781 + C105 * C786) *
                C541 -
            (C120 * C794 + C108 * C799 + C119 * C792 + C107 * C798 +
             C118 * C791 + C106 * C797 + C117 * C790 + C105 * C796) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C540 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50896 -
             (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                C50755 * C5082 +
            ((C5438 + C5439) * C540 + (C5440 + C5441) * C50896 -
             (C3126 + C3125) * C541 - (C3128 + C3127) * C50705) *
                C50755 * C5083 +
            (C5462 * C540 + C5463 * C50896 - C6400 * C541 - C6401 * C50705) *
                C50755 * C5084) *
               C50888 +
           (((C2397 + C2398) * C541 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50896 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C540) +
             (C2399 + C2400) * C50705) *
                C50755 * C5082 +
            ((C3134 + C3133) * C541 -
             ((C5450 + C5451) * C50896 + (C5452 + C5453) * C540) +
             (C3136 + C3135) * C50705) *
                C50755 * C5083 +
            ((C5996 + C5997) * C541 - (C5464 * C50896 + C5465 * C540) +
             (C5998 + C5999) * C50705) *
                C50755 * C5084) *
               C50640) *
              C1558 +
          ((((C3125 + C3126) * C541 -
             ((C5441 + C5440) * C50896 + (C5439 + C5438) * C540) +
             (C3127 + C3128) * C50705) *
                C50755 * C5082 +
            ((C3578 + C3577) * C541 -
             ((C5445 + C5444) * C50896 + (C5443 + C5442) * C540) +
             (C3580 + C3579) * C50705) *
                C50755 * C5083 +
            ((C6413 + C6414) * C541 - (C7304 * C50896 + C7305 * C540) +
             (C6415 + C6416) * C50705) *
                C50755 * C5084) *
               C50888 +
           (((C5453 + C5452) * C540 + (C5451 + C5450) * C50896 -
             (C3133 + C3134) * C541 - (C3135 + C3136) * C50705) *
                C50755 * C5082 +
            ((C5449 + C5448) * C540 + (C5447 + C5446) * C50896 -
             (C5997 + C5996) * C541 - (C5999 + C5998) * C50705) *
                C50755 * C5083 +
            ((C5454 + C5455) * C540 + (C5456 + C5457) * C50896 -
             (C2177 * C5983 + C50615 * C5984 + C2176 * C4484 + C2171 * C4492) *
                 C541 -
             (C2177 * C5985 + C50615 * C5986 + C2176 * C4490 + C2171 * C4496) *
                 C50705) *
                C50755 * C5084) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C540 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50896 -
            (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
            (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C540 + C2410 * C50896 - C3393 * C541 - C3394 * C50705) *
               C2175) *
              C50767 * C50635 * C50943 +
          (((C3125 + C3126) * C541 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50896 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C540) +
            (C3127 + C3128) * C50705) *
               C2173 +
           ((C3129 + C3130) * C541 -
            ((C3128 + C3127) * C50896 + (C3126 + C3125) * C540) +
            (C3131 + C3132) * C50705) *
               C2174 +
           ((C4090 + C4089) * C541 - (C4080 * C50896 + C4079 * C540) +
            (C4092 + C4091) * C50705) *
               C2175) *
              C50767 * C50635 * C50944 +
          (((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C540 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C50896 -
            (C3577 + C3578) * C541 - (C3579 + C3580) * C50705) *
               C2173 +
           ((C3578 + C3577) * C540 + (C3580 + C3579) * C50896 -
            (C3581 + C3582) * C541 - (C3583 + C3584) * C50705) *
               C2174 +
           ((C3582 + C3581) * C540 + (C3584 + C3583) * C50896 -
            (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
                C541 -
            (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
                C50705) *
               C2175) *
              C50767 * C50635 * C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C540 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50896 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C541 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C50635 * C50943 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C541 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50896 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C540) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C50705) *
              C50755 * C50767 * C50635 * C50944 +
          ((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
            C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
               C540 +
           (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
            C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
               C50896 -
           (C120 * C1094 + C108 * C1098 + C119 * C1095 + C107 * C1099 +
            C118 * C1096 + C106 * C1100 + C117 * C1097 + C105 * C1101) *
               C541 -
           (C120 * C1102 + C108 * C1106 + C119 * C1103 + C107 * C1107 +
            C118 * C1104 + C106 * C1108 + C117 * C1105 + C105 * C1109) *
               C50705) *
              C50755 * C50767 * C50635 * C1974)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C540 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50896 -
            (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
               C50755 * C5082 +
           ((C5438 + C5439) * C540 + (C5440 + C5441) * C50896 -
            (C3126 + C3125) * C541 - (C3128 + C3127) * C50705) *
               C50755 * C5083 +
           C7815 * C5084) *
              C50635 * C50943 +
          (((C3125 + C3126) * C541 -
            ((C5441 + C5440) * C50896 + (C5439 + C5438) * C540) +
            (C3127 + C3128) * C50705) *
               C50755 * C5082 +
           ((C3578 + C3577) * C541 -
            ((C5445 + C5444) * C50896 + (C5443 + C5442) * C540) +
            (C3580 + C3579) * C50705) *
               C50755 * C5083 +
           ((C6413 + C6414) * C541 - (C7304 * C50896 + C7305 * C540) +
            (C6415 + C6416) * C50705) *
               C50755 * C5084) *
              C50635 * C50944 +
          (C7815 * C5082 +
           ((C5461 + C5460) * C540 + (C5459 + C5458) * C50896 -
            (C6414 + C6413) * C541 - (C6416 + C6415) * C50705) *
               C50755 * C5083 +
           ((C7316 + C7317) * C540 + (C7318 + C7319) * C50896 -
            (C2177 * C6389 + C50615 * C6391 + C2176 * C6390 + C2171 * C6392) *
                C541 -
            (C2177 * C6393 + C50615 * C6395 + C2176 * C6394 + C2171 * C6396) *
                C50705) *
               C50755 * C5084) *
              C50635 * C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                 C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                    C121 +
                (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                 C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                    C50653) *
                   C50755 * C50767 * C900 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50653 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C121) *
                   C50755 * C50767 * C901 +
               ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                 C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                    C121 +
                (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                 C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                    C50653) *
                   C50755 * C50767 * C902) *
                  C1558 +
              (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
                 C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                    C121 +
                (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
                 C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                    C50653) *
                   C50755 * C50767 * C901 -
               ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
                 C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                    C50653 +
                (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
                 C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                    C121) *
                   C50755 * C50767 * C900 -
               ((C120 * C647 + C108 * C649 + C119 * C414 + C107 * C430 +
                 C118 * C413 + C106 * C429 + C117 * C412 + C105 * C428) *
                    C50653 +
                (C120 * C646 + C108 * C648 + C119 * C400 + C107 * C410 +
                 C118 * C399 + C106 * C409 + C117 * C398 + C105 * C408) *
                    C121) *
                   C50755 * C50767 * C902) *
                  C50733) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C253 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C248 -
               (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
                C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                   C254 -
               (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
                C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                   C249 +
               (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
                C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
                   C255 +
               (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
                C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
                   C250) *
                  C50755 * C50767 * C50635 * C1558 +
              ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
                C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
                   C254 -
               ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
                 C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                    C248 +
                (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
                 C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                    C253) +
               (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
                C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
                   C249 -
               (C120 * C1444 + C108 * C1448 + C119 * C1445 + C107 * C1449 +
                C118 * C1446 + C106 * C1450 + C117 * C1447 + C105 * C1451) *
                   C255 -
               (C120 * C1452 + C108 * C1456 + C119 * C1453 + C107 * C1457 +
                C118 * C1454 + C106 * C1458 + C117 * C1455 + C105 * C1459) *
                   C250) *
                  C50755 * C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50653) *
              C50755 * C50767 * C50635 * C1724 -
          ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
            C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
               C50653 +
           (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
            C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
               C121) *
              C50755 * C50767 * C50635 * C1725 +
          ((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
            C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
               C121 +
           (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
            C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
               C50653) *
              C50755 * C50767 * C50635 * C1726 -
          ((C120 * C1732 + C108 * C1740 + C119 * C1733 + C107 * C1741 +
            C118 * C1734 + C106 * C1742 + C117 * C1735 + C105 * C1743) *
               C50653 +
           (C120 * C1728 + C108 * C1736 + C119 * C1729 + C107 * C1737 +
            C118 * C1730 + C106 * C1738 + C117 * C1731 + C105 * C1739) *
               C121) *
              C50755 * C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C900 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C901 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C2173 +
            ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C2174 +
            ((C2738 + C2737) * C121 + (C2740 + C2739) * C50653) * C2175) *
               C50767 * C902) *
              C1558 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C3134 + C3133) * C121 + (C3136 + C3135) * C50653) * C2174 +
            ((C3138 + C3137) * C121 + (C3140 + C3139) * C50653) * C2175) *
               C50767 * C901 -
           ((C4080 * C50653 + C4079 * C121) * C2175 +
            ((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C900 -
           (((C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50653 +
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C121) *
                C2175 +
            ((C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                 C50653 +
             (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                 C121) *
                C2174 +
            ((C2177 * C413 + C50615 * C429 + C2176 * C412 + C2171 * C428) *
                 C50653 +
             (C2177 * C399 + C50615 * C409 + C2176 * C398 + C2171 * C408) *
                 C121) *
                C2173) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C2173 +
           ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
            (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
            (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
               C2174 +
           (C2409 * C253 + C2410 * C248 - C3393 * C254 - C3394 * C249 +
            (C3404 + C3403) * C255 + (C3406 + C3405) * C250) *
               C2175) *
              C50767 * C50635 * C1558 +
          (((C3125 + C3126) * C254 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C248 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C253) +
            (C3127 + C3128) * C249 - C4079 * C255 - C4080 * C250) *
               C2173 +
           ((C3129 + C3130) * C254 -
            ((C3128 + C3127) * C248 + (C3126 + C3125) * C253) +
            (C3131 + C3132) * C249 - (C4089 + C4090) * C255 -
            (C4091 + C4092) * C250) *
               C2174 +
           ((C4090 + C4089) * C254 - (C4080 * C248 + C4079 * C253) +
            (C4092 + C4091) * C249 -
            (C2177 * C4070 + C50615 * C4072 + C2176 * C4071 + C2171 * C4073) *
                C255 -
            (C2177 * C4074 + C50615 * C4076 + C2176 * C4075 + C2171 * C4077) *
                C250) *
               C2175) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C2173 +
           ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
           (C2409 * C121 + C2410 * C50653) * C2175) *
              C50767 * C50635 * C1724 -
          ((C4080 * C50653 + C4079 * C121) * C2175 +
           ((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C2174 +
           ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                C50653 +
            (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                C121) *
               C2173) *
              C50767 * C50635 * C1725 +
          (((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C121 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C50653) *
               C2173 +
           ((C3578 + C3577) * C121 + (C3580 + C3579) * C50653) * C2174 +
           ((C3582 + C3581) * C121 + (C3584 + C3583) * C50653) * C2175) *
              C50767 * C50635 * C1726 -
          (((C2177 * C4486 + C50615 * C4494 + C2176 * C4487 + C2171 * C4495) *
                C50653 +
            (C2177 * C4482 + C50615 * C4488 + C2176 * C4483 + C2171 * C4489) *
                C121) *
               C2175 +
           ((C2177 * C4490 + C50615 * C4496 + C2176 * C4491 + C2171 * C4497) *
                C50653 +
            (C2177 * C4484 + C50615 * C4492 + C2176 * C4485 + C2171 * C4493) *
                C121) *
               C2174 +
           ((C2177 * C1734 + C50615 * C1742 + C2176 * C1735 + C2171 * C1743) *
                C50653 +
            (C2177 * C1730 + C50615 * C1738 + C2176 * C1731 + C2171 * C1739) *
                C121) *
               C2173) *
              C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C5082 +
            ((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50755 *
                C5083 +
            C5472 * C5084) *
               C900 -
           (C5473 * C5084 +
            ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50755 *
                C5083 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C50755 * C5082) *
               C901 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C50755 * C5082 +
            ((C5782 + C5783) * C121 + (C5784 + C5785) * C50653) * C50755 *
                C5083 +
            ((C5786 + C5787) * C121 + (C5788 + C5789) * C50653) * C50755 *
                C5084) *
               C902) *
              C1558 +
          ((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50755 *
                C5082 +
            ((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50755 *
                C5083 +
            ((C5454 + C5455) * C121 + (C5456 + C5457) * C50653) * C50755 *
                C5084) *
               C901 -
           (((C5458 + C5459) * C50653 + (C5460 + C5461) * C121) * C50755 *
                C5084 +
            ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50755 *
                C5083 +
            ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50755 *
                C5082) *
               C900 -
           (((C2177 * C1732 + C50615 * C1740 + C2176 * C1733 + C2171 * C1741) *
                 C50653 +
             (C2177 * C1728 + C50615 * C1736 + C2176 * C1729 + C2171 * C1737) *
                 C121) *
                C50755 * C5084 +
            ((C5789 + C5788) * C50653 + (C5787 + C5786) * C121) * C50755 *
                C5083 +
            ((C5785 + C5784) * C50653 + (C5783 + C5782) * C121) * C50755 *
                C5082) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C50755 * C5082 +
           ((C5438 + C5439) * C253 + (C5440 + C5441) * C248 -
            (C3126 + C3125) * C254 - (C3128 + C3127) * C249 +
            (C3129 + C3130) * C255 + (C3131 + C3132) * C250) *
               C50755 * C5083 +
           (C5462 * C253 + C5463 * C248 - C6400 * C254 - C6401 * C249 +
            (C3582 + C3581) * C255 + (C3584 + C3583) * C250) *
               C50755 * C5084) *
              C50635 * C1558 +
          (((C3125 + C3126) * C254 -
            ((C5441 + C5440) * C248 + (C5439 + C5438) * C253) +
            (C3127 + C3128) * C249 - C4079 * C255 - C4080 * C250) *
               C50755 * C5082 +
           ((C3578 + C3577) * C254 -
            ((C5445 + C5444) * C248 + (C5443 + C5442) * C253) +
            (C3580 + C3579) * C249 - (C3581 + C3582) * C255 -
            (C3583 + C3584) * C250) *
               C50755 * C5083 +
           ((C6413 + C6414) * C254 -
            ((C5458 + C5459) * C248 + (C5460 + C5461) * C253) +
            (C6415 + C6416) * C249 -
            (C2177 * C4482 + C50615 * C4488 + C2176 * C4483 + C2171 * C4489) *
                C255 -
            (C2177 * C4486 + C50615 * C4494 + C2176 * C4487 + C2171 * C4495) *
                C250) *
               C50755 * C5084) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C50755 * C5082 +
           ((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50755 *
               C5083 +
           C5472 * C5084) *
              C50635 * C1724 -
          (C7321 * C5084 +
           ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50755 *
               C5083 +
           ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50755 *
               C5082) *
              C50635 * C1725 +
          (C5472 * C5082 +
           ((C5461 + C5460) * C121 + (C5459 + C5458) * C50653) * C50755 *
               C5083 +
           ((C7316 + C7317) * C121 + (C7318 + C7319) * C50653) * C50755 *
               C5084) *
              C50635 * C1726 -
          (((C2177 * C7297 + C50615 * C7301 + C2176 * C7298 + C2171 * C7302) *
                C50653 +
            (C2177 * C7295 + C50615 * C7299 + C2176 * C7296 + C2171 * C7300) *
                C121) *
               C50755 * C5084 +
           ((C7319 + C7318) * C50653 + (C7317 + C7316) * C121) * C50755 *
               C5083 +
           C7321 * C5082) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C50888 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C50640) *
              C50943 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C3134 + C3133) * C121 + (C3136 + C3135) * C50653) * C2174 +
            ((C3138 + C3137) * C121 + (C3140 + C3139) * C50653) * C2175) *
               C50767 * C50640 -
           ((C4080 * C50653 + C4079 * C121) * C2175 +
            ((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C50888) *
              C50944 +
          ((((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                 C121 +
             (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                 C50653) *
                C2173 +
            ((C3578 + C3577) * C121 + (C3580 + C3579) * C50653) * C2174 +
            ((C3582 + C3581) * C121 + (C3584 + C3583) * C50653) * C2175) *
               C50767 * C50888 -
           (((C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                 C50653 +
             (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                 C121) *
                C2175 +
            ((C2177 * C1103 + C50615 * C1107 + C2176 * C1104 + C2171 * C1108) *
                 C50653 +
             (C2177 * C1095 + C50615 * C1099 + C2176 * C1096 + C2171 * C1100) *
                 C121) *
                C2174 +
            ((C2177 * C423 + C50615 * C434 + C2176 * C422 + C2171 * C433) *
                 C50653 +
             (C2177 * C404 + C50615 * C419 + C2176 * C403 + C2171 * C418) *
                 C121) *
                C2173) *
               C50767 * C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C50888 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C50640) *
              C50943 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C50640 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C50888) *
              C50944 +
          (((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
             C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
                C121 +
            (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
             C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
                C50653) *
               C50755 * C50767 * C50888 -
           ((C120 * C425 + C108 * C436 + C119 * C424 + C107 * C435 +
             C118 * C423 + C106 * C434 + C117 * C422 + C105 * C433) *
                C50653 +
            (C120 * C406 + C108 * C426 + C119 * C405 + C107 * C420 +
             C118 * C404 + C106 * C419 + C117 * C403 + C105 * C418) *
                C121) *
               C50755 * C50767 * C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C5082 +
            ((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50755 *
                C5083 +
            C5472 * C5084) *
               C50888 -
           (C5473 * C5084 +
            ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50755 *
                C5083 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C50755 * C5082) *
               C50640) *
              C50943 +
          ((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50755 *
                C5082 +
            ((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50755 *
                C5083 +
            ((C5454 + C5455) * C121 + (C5456 + C5457) * C50653) * C50755 *
                C5084) *
               C50640 -
           (C7321 * C5084 +
            ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50755 *
                C5083 +
            ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50755 *
                C5082) *
               C50888) *
              C50944 +
          ((C5472 * C5082 +
            ((C5461 + C5460) * C121 + (C5459 + C5458) * C50653) * C50755 *
                C5083 +
            ((C7316 + C7317) * C121 + (C7318 + C7319) * C50653) * C50755 *
                C5084) *
               C50888 -
           (((C2177 * C5384 + C50615 * C5388 + C2176 * C5383 + C2171 * C5387) *
                 C50653 +
             (C2177 * C5379 + C50615 * C5385 + C2176 * C5378 + C2171 * C5381) *
                 C121) *
                C50755 * C5084 +
            ((C5457 + C5456) * C50653 + (C5455 + C5454) * C121) * C50755 *
                C5083 +
            C5473 * C5082) *
               C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C248 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C254 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C249 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C255 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C250) *
              C50755 * C50767 * C50635 * C1558 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C254 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C248 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C253) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C249 -
           (C120 * C1444 + C108 * C1448 + C119 * C1445 + C107 * C1449 +
            C118 * C1446 + C106 * C1450 + C117 * C1447 + C105 * C1451) *
               C255 -
           (C120 * C1452 + C108 * C1456 + C119 * C1453 + C107 * C1457 +
            C118 * C1454 + C106 * C1458 + C117 * C1455 + C105 * C1459) *
               C250) *
              C50755 * C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C900 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C901 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50653) *
               C50755 * C50767 * C902) *
              C1558 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C901 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C900 -
           ((C120 * C647 + C108 * C649 + C119 * C414 + C107 * C430 +
             C118 * C413 + C106 * C429 + C117 * C412 + C105 * C428) *
                C50653 +
            (C120 * C646 + C108 * C648 + C119 * C400 + C107 * C410 +
             C118 * C399 + C106 * C409 + C117 * C398 + C105 * C408) *
                C121) *
               C50755 * C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C900 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C901 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C2173 +
            ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C2174 +
            ((C2738 + C2737) * C121 + (C2740 + C2739) * C50653) * C2175) *
               C50767 * C902) *
              C1558 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C3134 + C3133) * C121 + (C3136 + C3135) * C50653) * C2174 +
            ((C3138 + C3137) * C121 + (C3140 + C3139) * C50653) * C2175) *
               C50767 * C901 -
           ((C4080 * C50653 + C4079 * C121) * C2175 +
            ((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C900 -
           (((C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50653 +
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C121) *
                C2175 +
            ((C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                 C50653 +
             (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                 C121) *
                C2174 +
            ((C2177 * C413 + C50615 * C429 + C2176 * C412 + C2171 * C428) *
                 C50653 +
             (C2177 * C399 + C50615 * C409 + C2176 * C398 + C2171 * C408) *
                 C121) *
                C2173) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C2173 +
           ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
            (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
            (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
               C2174 +
           (C2409 * C253 + C2410 * C248 - C3393 * C254 - C3394 * C249 +
            (C3404 + C3403) * C255 + (C3406 + C3405) * C250) *
               C2175) *
              C50767 * C50635 * C1558 +
          (((C3125 + C3126) * C254 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C248 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C253) +
            (C3127 + C3128) * C249 - C4079 * C255 - C4080 * C250) *
               C2173 +
           ((C3129 + C3130) * C254 -
            ((C3128 + C3127) * C248 + (C3126 + C3125) * C253) +
            (C3131 + C3132) * C249 - (C4089 + C4090) * C255 -
            (C4091 + C4092) * C250) *
               C2174 +
           ((C4090 + C4089) * C254 - (C4080 * C248 + C4079 * C253) +
            (C4092 + C4091) * C249 -
            (C2177 * C4070 + C50615 * C4072 + C2176 * C4071 + C2171 * C4073) *
                C255 -
            (C2177 * C4074 + C50615 * C4076 + C2176 * C4075 + C2171 * C4077) *
                C250) *
               C2175) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C5082 +
            ((C5438 + C5439) * C121 + (C5440 + C5441) * C50653) * C50755 *
                C5083 +
            C5472 * C5084) *
               C900 -
           (C5473 * C5084 +
            ((C5450 + C5451) * C50653 + (C5452 + C5453) * C121) * C50755 *
                C5083 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C50755 * C5082) *
               C901 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C50755 * C5082 +
            ((C5782 + C5783) * C121 + (C5784 + C5785) * C50653) * C50755 *
                C5083 +
            ((C5786 + C5787) * C121 + (C5788 + C5789) * C50653) * C50755 *
                C5084) *
               C902) *
              C1558 +
          ((((C5453 + C5452) * C121 + (C5451 + C5450) * C50653) * C50755 *
                C5082 +
            ((C5449 + C5448) * C121 + (C5447 + C5446) * C50653) * C50755 *
                C5083 +
            ((C5454 + C5455) * C121 + (C5456 + C5457) * C50653) * C50755 *
                C5084) *
               C901 -
           (((C5458 + C5459) * C50653 + (C5460 + C5461) * C121) * C50755 *
                C5084 +
            ((C5445 + C5444) * C50653 + (C5443 + C5442) * C121) * C50755 *
                C5083 +
            ((C5441 + C5440) * C50653 + (C5439 + C5438) * C121) * C50755 *
                C5082) *
               C900 -
           (((C2177 * C1732 + C50615 * C1740 + C2176 * C1733 + C2171 * C1741) *
                 C50653 +
             (C2177 * C1728 + C50615 * C1736 + C2176 * C1729 + C2171 * C1737) *
                 C121) *
                C50755 * C5084 +
            ((C5789 + C5788) * C50653 + (C5787 + C5786) * C121) * C50755 *
                C5083 +
            ((C5785 + C5784) * C50653 + (C5783 + C5782) * C121) * C50755 *
                C5082) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C50755 * C5082 +
           ((C5438 + C5439) * C253 + (C5440 + C5441) * C248 -
            (C3126 + C3125) * C254 - (C3128 + C3127) * C249 +
            (C3129 + C3130) * C255 + (C3131 + C3132) * C250) *
               C50755 * C5083 +
           (C5462 * C253 + C5463 * C248 - C6400 * C254 - C6401 * C249 +
            (C3582 + C3581) * C255 + (C3584 + C3583) * C250) *
               C50755 * C5084) *
              C50635 * C1558 +
          (((C3125 + C3126) * C254 -
            ((C5441 + C5440) * C248 + (C5439 + C5438) * C253) +
            (C3127 + C3128) * C249 - C4079 * C255 - C4080 * C250) *
               C50755 * C5082 +
           ((C3578 + C3577) * C254 -
            ((C5445 + C5444) * C248 + (C5443 + C5442) * C253) +
            (C3580 + C3579) * C249 - (C3581 + C3582) * C255 -
            (C3583 + C3584) * C250) *
               C50755 * C5083 +
           ((C6413 + C6414) * C254 -
            ((C5458 + C5459) * C248 + (C5460 + C5461) * C253) +
            (C6415 + C6416) * C249 -
            (C2177 * C4482 + C50615 * C4488 + C2176 * C4483 + C2171 * C4489) *
                C255 -
            (C2177 * C4486 + C50615 * C4494 + C2176 * C4487 + C2171 * C4495) *
                C250) *
               C50755 * C5084) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C540 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50896 -
            (C8116 + C8117 + C8118) * C541 - (C8119 + C8120 + C8121) * C50705) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C540 +
            (C11075 + C11076 + C11077) * C50896 -
            (C8816 + C8815 + C8814) * C541 - (C8819 + C8818 + C8817) * C50705) *
               C50755 * C50831) *
              C50939 +
          (((C8128 + C8129 + C8130) * C541 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50896 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C540) +
            (C8131 + C8132 + C8133) * C50705) *
               C50755 * C50910 +
           ((C8822 + C8821 + C8820) * C541 -
            ((C11078 + C11079 + C11080) * C50896 +
             (C11081 + C11082 + C11083) * C540) +
            (C8825 + C8824 + C8823) * C50705) *
               C50755 * C50831) *
              C50940 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C540 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C50896 -
            (C8444 + C8445 + C8446) * C541 - (C8447 + C8448 + C8449) * C50705) *
               C50755 * C50910 +
           ((C7918 * C398 + C50937 * C408 + C7919 * C399 + C50938 * C409 +
             C7920 * C400 + C7915 * C410) *
                C540 +
            (C7918 * C412 + C50937 * C428 + C7919 * C413 + C50938 * C429 +
             C7920 * C414 + C7915 * C430) *
                C50896 -
            (C7920 * C784 + C7915 * C793 + C7919 * C783 + C50938 * C788 +
             C7918 * C782 + C50937 * C787) *
                C541 -
            (C7920 * C794 + C7915 * C799 + C7919 * C792 + C50938 * C798 +
             C7918 * C791 + C50937 * C797) *
                C50705) *
               C50755 * C50831) *
              C539) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7918 * C122 + C50937 * C129 + C7919 * C123 +
                      C50938 * C130 + C7920 * C124 + C7915 * C131) *
                         C540 +
                     (C7918 * C133 + C50937 * C143 + C7919 * C134 +
                      C50938 * C144 + C7920 * C135 + C7915 * C145) *
                         C50896 -
                     (C8116 + C8117 + C8118) * C541 -
                     (C8119 + C8120 + C8121) * C50705) *
                        C50755 * C50910 +
                    ((C11072 + C11073 + C11074) * C540 +
                     (C11075 + C11076 + C11077) * C50896 -
                     (C8816 + C8815 + C8814) * C541 -
                     (C8819 + C8818 + C8817) * C50705) *
                        C50755 * C50831) *
                       C251 +
                   (((C8128 + C8129 + C8130) * C541 -
                     ((C7920 * C136 + C7915 * C146 + C7919 * C135 +
                       C50938 * C145 + C7918 * C134 + C50937 * C144) *
                          C50896 +
                      (C7920 * C125 + C7915 * C132 + C7919 * C124 +
                       C50938 * C131 + C7918 * C123 + C50937 * C130) *
                          C540) +
                     (C8131 + C8132 + C8133) * C50705) *
                        C50755 * C50910 +
                    ((C8822 + C8821 + C8820) * C541 -
                     ((C11078 + C11079 + C11080) * C50896 +
                      (C11081 + C11082 + C11083) * C540) +
                     (C8825 + C8824 + C8823) * C50705) *
                        C50755 * C50831) *
                       C50640) *
                      C50897 +
                  ((((C8814 + C8815 + C8816) * C541 -
                     ((C11077 + C11076 + C11075) * C50896 +
                      (C11074 + C11073 + C11072) * C540) +
                     (C8817 + C8818 + C8819) * C50705) *
                        C50755 * C50910 +
                    ((C9248 + C9247 + C9246) * C541 -
                     ((C11090 + C11091 + C11092) * C50896 +
                      (C11093 + C11094 + C11095) * C540) +
                     (C9251 + C9250 + C9249) * C50705) *
                        C50755 * C50831) *
                       C251 +
                   (((C11083 + C11082 + C11081) * C540 +
                     (C11080 + C11079 + C11078) * C50896 -
                     (C8820 + C8821 + C8822) * C541 -
                     (C8823 + C8824 + C8825) * C50705) *
                        C50755 * C50910 +
                    ((C11084 + C11085 + C11086) * C540 +
                     (C11087 + C11088 + C11089) * C50896 -
                     (C7920 * C1094 + C7915 * C1098 + C7919 * C1095 +
                      C50938 * C1099 + C7918 * C1096 + C50937 * C1100) *
                         C541 -
                     (C7920 * C1102 + C7915 * C1106 + C7919 * C1103 +
                      C50938 * C1107 + C7918 * C1104 + C50937 * C1108) *
                         C50705) *
                        C50755 * C50831) *
                       C50640) *
                      C50733)) /
                (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C253 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C248 -
            (C8116 + C8117 + C8118) * C254 - (C8119 + C8120 + C8121) * C249 +
            (C8122 + C8123 + C8124) * C255 + (C8125 + C8126 + C8127) * C250) *
               C50755 * C50910 +
           ((C7918 * C401 + C50937 * C416 + C7919 * C397 + C50938 * C407 +
             C7920 * C398 + C7915 * C408) *
                C253 +
            (C7918 * C415 + C50937 * C431 + C7919 * C411 + C50938 * C427 +
             C7920 * C412 + C7915 * C428) *
                C248 -
            (C8816 + C8815 + C8814) * C254 - (C8819 + C8818 + C8817) * C249 +
            (C9752 + C9751 + C9750) * C255 + (C9755 + C9754 + C9753) * C250) *
               C50755 * C50831) *
              C251 +
          (((C8128 + C8129 + C8130) * C254 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C248 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C253) +
            (C8131 + C8132 + C8133) * C249 - (C8134 + C8135 + C8136) * C255 -
            (C8137 + C8138 + C8139) * C250) *
               C50755 * C50910 +
           ((C8822 + C8821 + C8820) * C254 -
            ((C7920 * C413 + C7915 * C429 + C7919 * C412 + C50938 * C428 +
              C7918 * C411 + C50937 * C427) *
                 C248 +
             (C7920 * C399 + C7915 * C409 + C7919 * C398 + C50938 * C408 +
              C7918 * C397 + C50937 * C407) *
                 C253) +
            (C8825 + C8824 + C8823) * C249 -
            (C7920 * C1444 + C7915 * C1448 + C7919 * C1445 + C50938 * C1449 +
             C7918 * C1446 + C50937 * C1450) *
                C255 -
            (C7920 * C1452 + C7915 * C1456 + C7919 * C1453 + C50938 * C1457 +
             C7918 * C1454 + C50937 * C1458) *
                C250) *
               C50755 * C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C121 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50653) *
               C50755 * C50910 +
           ((C7918 * C401 + C50937 * C416 + C7919 * C397 + C50938 * C407 +
             C7920 * C398 + C7915 * C408) *
                C121 +
            (C7918 * C415 + C50937 * C431 + C7919 * C411 + C50938 * C427 +
             C7920 * C412 + C7915 * C428) *
                C50653) *
               C50755 * C50831) *
              C112 -
          (((C7920 * C413 + C7915 * C429 + C7919 * C412 + C50938 * C428 +
             C7918 * C411 + C50937 * C427) *
                C50653 +
            (C7920 * C399 + C7915 * C409 + C7919 * C398 + C50938 * C408 +
             C7918 * C397 + C50937 * C407) *
                C121) *
               C50755 * C50831 +
           ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
             C7918 * C134 + C50937 * C144) *
                C50653 +
            (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
             C7918 * C123 + C50937 * C130) *
                C121) *
               C50755 * C50910) *
              C113 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C121 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C50653) *
               C50755 * C50910 +
           ((C7918 * C398 + C50937 * C408 + C7919 * C399 + C50938 * C409 +
             C7920 * C400 + C7915 * C410) *
                C121 +
            (C7918 * C412 + C50937 * C428 + C7919 * C413 + C50938 * C429 +
             C7920 * C414 + C7915 * C430) *
                C50653) *
               C50755 * C50831) *
              C114 -
          (((C7920 * C647 + C7915 * C649 + C7919 * C414 + C50938 * C430 +
             C7918 * C413 + C50937 * C429) *
                C50653 +
            (C7920 * C646 + C7915 * C648 + C7919 * C400 + C50938 * C410 +
             C7918 * C399 + C50937 * C409) *
                C121) *
               C50755 * C50831 +
           ((C7920 * C140 + C7915 * C148 + C7919 * C137 + C50938 * C147 +
             C7918 * C136 + C50937 * C146) *
                C50653 +
            (C7920 * C127 + C7915 * C139 + C7919 * C126 + C50938 * C138 +
             C7918 * C125 + C50937 * C132) *
                C121) *
               C50755 * C50910) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C121 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C50653) *
                C50755 * C50910 +
            ((C11072 + C11073 + C11074) * C121 +
             (C11075 + C11076 + C11077) * C50653) *
                C50755 * C50831) *
               C251 -
           (((C11078 + C11079 + C11080) * C50653 +
             (C11081 + C11082 + C11083) * C121) *
                C50755 * C50831 +
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50653 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C121) *
                C50755 * C50910) *
               C50640) *
              C394 +
          ((((C11083 + C11082 + C11081) * C121 +
             (C11080 + C11079 + C11078) * C50653) *
                C50755 * C50910 +
            ((C11084 + C11085 + C11086) * C121 +
             (C11087 + C11088 + C11089) * C50653) *
                C50755 * C50831) *
               C50640 -
           (((C11090 + C11091 + C11092) * C50653 +
             (C11093 + C11094 + C11095) * C121) *
                C50755 * C50831 +
            ((C11077 + C11076 + C11075) * C50653 +
             (C11074 + C11073 + C11072) * C121) *
                C50755 * C50910) *
               C251) *
              C395 +
          ((((C11095 + C11094 + C11093) * C121 +
             (C11092 + C11091 + C11090) * C50653) *
                C50755 * C50910 +
            ((C7918 * C1731 + C50937 * C1739 + C7919 * C1730 + C50938 * C1738 +
              C7920 * C1729 + C7915 * C1737) *
                 C121 +
             (C7918 * C1735 + C50937 * C1743 + C7919 * C1734 + C50938 * C1742 +
              C7920 * C1733 + C7915 * C1741) *
                 C50653) *
                C50755 * C50831) *
               C251 -
           (((C7920 * C1732 + C7915 * C1740 + C7919 * C1733 + C50938 * C1741 +
              C7918 * C1734 + C50937 * C1742) *
                 C50653 +
             (C7920 * C1728 + C7915 * C1736 + C7919 * C1729 + C50938 * C1737 +
              C7918 * C1730 + C50937 * C1738) *
                 C121) *
                C50755 * C50831 +
            ((C11089 + C11088 + C11087) * C50653 +
             (C11086 + C11085 + C11084) * C121) *
                C50755 * C50910) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7918 * C122 + C50937 * C129 + C7919 * C123 +
                      C50938 * C130 + C7920 * C124 + C7915 * C131) *
                         C121 +
                     (C7918 * C133 + C50937 * C143 + C7919 * C134 +
                      C50938 * C144 + C7920 * C135 + C7915 * C145) *
                         C50653) *
                        C50755 * C50910 +
                    ((C11072 + C11073 + C11074) * C121 +
                     (C11075 + C11076 + C11077) * C50653) *
                        C50755 * C50831) *
                       C50939 -
                   (((C11078 + C11079 + C11080) * C50653 +
                     (C11081 + C11082 + C11083) * C121) *
                        C50755 * C50831 +
                    ((C7920 * C136 + C7915 * C146 + C7919 * C135 +
                      C50938 * C145 + C7918 * C134 + C50937 * C144) *
                         C50653 +
                     (C7920 * C125 + C7915 * C132 + C7919 * C124 +
                      C50938 * C131 + C7918 * C123 + C50937 * C130) *
                         C121) *
                        C50755 * C50910) *
                       C50940 +
                   (((C7918 * C124 + C50937 * C131 + C7919 * C125 +
                      C50938 * C132 + C7920 * C126 + C7915 * C138) *
                         C121 +
                     (C7918 * C135 + C50937 * C145 + C7919 * C136 +
                      C50938 * C146 + C7920 * C137 + C7915 * C147) *
                         C50653) *
                        C50755 * C50910 +
                    ((C11400 + C11401 + C11402) * C121 +
                     (C11403 + C11404 + C11405) * C50653) *
                        C50755 * C50831) *
                       C539) *
                      C50897 +
                  ((((C11083 + C11082 + C11081) * C121 +
                     (C11080 + C11079 + C11078) * C50653) *
                        C50755 * C50910 +
                    ((C11084 + C11085 + C11086) * C121 +
                     (C11087 + C11088 + C11089) * C50653) *
                        C50755 * C50831) *
                       C50940 -
                   (((C11090 + C11091 + C11092) * C50653 +
                     (C11093 + C11094 + C11095) * C121) *
                        C50755 * C50831 +
                    ((C11077 + C11076 + C11075) * C50653 +
                     (C11074 + C11073 + C11072) * C121) *
                        C50755 * C50910) *
                       C50939 -
                   (((C7920 * C425 + C7915 * C436 + C7919 * C424 +
                      C50938 * C435 + C7918 * C423 + C50937 * C434) *
                         C50653 +
                     (C7920 * C406 + C7915 * C426 + C7919 * C405 +
                      C50938 * C420 + C7918 * C404 + C50937 * C419) *
                         C121) *
                        C50755 * C50831 +
                    ((C11405 + C11404 + C11403) * C50653 +
                     (C11402 + C11401 + C11400) * C121) *
                        C50755 * C50910) *
                       C539) *
                      C50733)) /
                (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C121 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50653) *
               C50755 * C50910 +
           ((C7918 * C401 + C50937 * C416 + C7919 * C397 + C50938 * C407 +
             C7920 * C398 + C7915 * C408) *
                C121 +
            (C7918 * C415 + C50937 * C431 + C7919 * C411 + C50938 * C427 +
             C7920 * C412 + C7915 * C428) *
                C50653) *
               C50755 * C50831) *
              C112 -
          (((C7920 * C413 + C7915 * C429 + C7919 * C412 + C50938 * C428 +
             C7918 * C411 + C50937 * C427) *
                C50653 +
            (C7920 * C399 + C7915 * C409 + C7919 * C398 + C50938 * C408 +
             C7918 * C397 + C50937 * C407) *
                C121) *
               C50755 * C50831 +
           ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
             C7918 * C134 + C50937 * C144) *
                C50653 +
            (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
             C7918 * C123 + C50937 * C130) *
                C121) *
               C50755 * C50910) *
              C113 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C121 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C50653) *
               C50755 * C50910 +
           ((C7918 * C398 + C50937 * C408 + C7919 * C399 + C50938 * C409 +
             C7920 * C400 + C7915 * C410) *
                C121 +
            (C7918 * C412 + C50937 * C428 + C7919 * C413 + C50938 * C429 +
             C7920 * C414 + C7915 * C430) *
                C50653) *
               C50755 * C50831) *
              C114 -
          (((C7920 * C647 + C7915 * C649 + C7919 * C414 + C50938 * C430 +
             C7918 * C413 + C50937 * C429) *
                C50653 +
            (C7920 * C646 + C7915 * C648 + C7919 * C400 + C50938 * C410 +
             C7918 * C399 + C50937 * C409) *
                C121) *
               C50755 * C50831 +
           ((C7920 * C140 + C7915 * C148 + C7919 * C137 + C50938 * C147 +
             C7918 * C136 + C50937 * C146) *
                C50653 +
            (C7920 * C127 + C7915 * C139 + C7919 * C126 + C50938 * C138 +
             C7918 * C125 + C50937 * C132) *
                C121) *
               C50755 * C50910) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C253 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C248 -
            (C8116 + C8117 + C8118) * C254 - (C8119 + C8120 + C8121) * C249 +
            (C8122 + C8123 + C8124) * C255 + (C8125 + C8126 + C8127) * C250) *
               C50755 * C50910 +
           ((C7918 * C401 + C50937 * C416 + C7919 * C397 + C50938 * C407 +
             C7920 * C398 + C7915 * C408) *
                C253 +
            (C7918 * C415 + C50937 * C431 + C7919 * C411 + C50938 * C427 +
             C7920 * C412 + C7915 * C428) *
                C248 -
            (C8816 + C8815 + C8814) * C254 - (C8819 + C8818 + C8817) * C249 +
            (C9752 + C9751 + C9750) * C255 + (C9755 + C9754 + C9753) * C250) *
               C50755 * C50831) *
              C251 +
          (((C8128 + C8129 + C8130) * C254 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C248 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C253) +
            (C8131 + C8132 + C8133) * C249 - (C8134 + C8135 + C8136) * C255 -
            (C8137 + C8138 + C8139) * C250) *
               C50755 * C50910 +
           ((C8822 + C8821 + C8820) * C254 -
            ((C7920 * C413 + C7915 * C429 + C7919 * C412 + C50938 * C428 +
              C7918 * C411 + C50937 * C427) *
                 C248 +
             (C7920 * C399 + C7915 * C409 + C7919 * C398 + C50938 * C408 +
              C7918 * C397 + C50937 * C407) *
                 C253) +
            (C8825 + C8824 + C8823) * C249 -
            (C7920 * C1444 + C7915 * C1448 + C7919 * C1445 + C50938 * C1449 +
             C7918 * C1446 + C50937 * C1450) *
                C255 -
            (C7920 * C1452 + C7915 * C1456 + C7919 * C1453 + C50938 * C1457 +
             C7918 * C1454 + C50937 * C1458) *
                C250) *
               C50755 * C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C1213 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50941 -
            (C8116 + C8117 + C8118) * C1214 - (C8119 + C8120 + C8121) * C50942 +
            (C8122 + C8123 + C8124) * C1215 + (C8125 + C8126 + C8127) * C1210) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C1213 +
            (C11075 + C11076 + C11077) * C50941 -
            (C8816 + C8815 + C8814) * C1214 - (C8819 + C8818 + C8817) * C50942 +
            (C9752 + C9751 + C9750) * C1215 + (C9755 + C9754 + C9753) * C1210) *
               C50755 * C50831) *
              C50888 +
          (((C8128 + C8129 + C8130) * C1214 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50941 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C1213) +
            (C8131 + C8132 + C8133) * C50942 - (C8134 + C8135 + C8136) * C1215 -
            (C8137 + C8138 + C8139) * C1210) *
               C50755 * C50910 +
           ((C8822 + C8821 + C8820) * C1214 -
            ((C11078 + C11079 + C11080) * C50941 +
             (C11081 + C11082 + C11083) * C1213) +
            (C8825 + C8824 + C8823) * C50942 -
            (C7920 * C1444 + C7915 * C1448 + C7919 * C1445 + C50938 * C1449 +
             C7918 * C1446 + C50937 * C1450) *
                C1215 -
            (C7920 * C1452 + C7915 * C1456 + C7919 * C1453 + C50938 * C1457 +
             C7918 * C1454 + C50937 * C1458) *
                C1210) *
               C50755 * C50831) *
              C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C1213 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50941 -
            (C8116 + C8117 + C8118) * C1214 - (C8119 + C8120 + C8121) * C50942 +
            (C8122 + C8123 + C8124) * C1215 + (C8125 + C8126 + C8127) * C1210) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C1213 +
            (C11075 + C11076 + C11077) * C50941 -
            (C8816 + C8815 + C8814) * C1214 - (C8819 + C8818 + C8817) * C50942 +
            (C9752 + C9751 + C9750) * C1215 + (C9755 + C9754 + C9753) * C1210) *
               C50755 * C50831) *
              C50635 * C50897 +
          (((C8814 + C8815 + C8816) * C1214 -
            ((C11077 + C11076 + C11075) * C50941 +
             (C11074 + C11073 + C11072) * C1213) +
            (C8817 + C8818 + C8819) * C50942 - (C9750 + C9751 + C9752) * C1215 -
            (C9753 + C9754 + C9755) * C1210) *
               C50755 * C50910 +
           ((C9248 + C9247 + C9246) * C1214 -
            ((C11090 + C11091 + C11092) * C50941 +
             (C11093 + C11094 + C11095) * C1213) +
            (C9251 + C9250 + C9249) * C50942 -
            (C7920 * C2560 + C7915 * C2566 + C7919 * C2559 + C50938 * C2562 +
             C7918 * C2558 + C50937 * C2561) *
                C1215 -
            (C7920 * C2565 + C7915 * C2569 + C7919 * C2564 + C50938 * C2568 +
             C7918 * C2563 + C50937 * C2567) *
                C1210) *
               C50755 * C50831) *
              C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
            C7920 * C124 + C7915 * C131) *
               C976 +
           (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
            C7920 * C135 + C7915 * C145) *
               C971 -
           (C8116 + C8117 + C8118) * C977 - (C8119 + C8120 + C8121) * C972 +
           (C8122 + C8123 + C8124) * C978 + (C8125 + C8126 + C8127) * C973 -
           (C9082 + C9083 + C9084) * C979 - (C9085 + C9086 + C9087) * C974) *
              C50755 * C50910 +
          ((C11072 + C11073 + C11074) * C976 +
           (C11075 + C11076 + C11077) * C971 - (C8816 + C8815 + C8814) * C977 -
           (C8819 + C8818 + C8817) * C972 + (C9752 + C9751 + C9750) * C978 +
           (C9755 + C9754 + C9753) * C973 -
           (C7920 * C3082 + C7915 * C3087 + C7919 * C3081 + C50938 * C3084 +
            C7918 * C3080 + C50937 * C3083) *
               C979 -
           (C7920 * C3088 + C7915 * C3091 + C7919 * C3086 + C50938 * C3090 +
            C7918 * C3085 + C50937 * C3089) *
               C974) *
              C50755 * C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C903 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C898 -
            (C8116 + C8117 + C8118) * C904 - (C8119 + C8120 + C8121) * C50705) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C903 +
            (C11075 + C11076 + C11077) * C898 - (C8816 + C8815 + C8814) * C904 -
            (C8819 + C8818 + C8817) * C50705) *
               C50755 * C50831) *
              C900 +
          (((C8128 + C8129 + C8130) * C904 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C898 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C903) +
            (C8131 + C8132 + C8133) * C50705) *
               C50755 * C50910 +
           ((C8822 + C8821 + C8820) * C904 -
            ((C11078 + C11079 + C11080) * C898 +
             (C11081 + C11082 + C11083) * C903) +
            (C8825 + C8824 + C8823) * C50705) *
               C50755 * C50831) *
              C901 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C903 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C898 -
            (C8444 + C8445 + C8446) * C904 - (C8447 + C8448 + C8449) * C50705) *
               C50755 * C50910 +
           ((C11400 + C11401 + C11402) * C903 +
            (C11403 + C11404 + C11405) * C898 -
            (C7920 * C784 + C7915 * C793 + C7919 * C783 + C50938 * C788 +
             C7918 * C782 + C50937 * C787) *
                C904 -
            (C7920 * C794 + C7915 * C799 + C7919 * C792 + C50938 * C798 +
             C7918 * C791 + C50937 * C797) *
                C50705) *
               C50755 * C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C903 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C898 -
            (C8116 + C8117 + C8118) * C904 - (C8119 + C8120 + C8121) * C50705) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C903 +
            (C11075 + C11076 + C11077) * C898 - (C8816 + C8815 + C8814) * C904 -
            (C8819 + C8818 + C8817) * C50705) *
               C50755 * C50831) *
              C50635 * C394 +
          (((C8814 + C8815 + C8816) * C904 -
            ((C11077 + C11076 + C11075) * C898 +
             (C11074 + C11073 + C11072) * C903) +
            (C8817 + C8818 + C8819) * C50705) *
               C50755 * C50910 +
           ((C9248 + C9247 + C9246) * C904 -
            ((C11090 + C11091 + C11092) * C898 +
             (C11093 + C11094 + C11095) * C903) +
            (C9251 + C9250 + C9249) * C50705) *
               C50755 * C50831) *
              C50635 * C395 +
          (((C11095 + C11094 + C11093) * C903 +
            (C11092 + C11091 + C11090) * C898 - (C9246 + C9247 + C9248) * C904 -
            (C9249 + C9250 + C9251) * C50705) *
               C50755 * C50910 +
           ((C7918 * C1731 + C50937 * C1739 + C7919 * C1730 + C50938 * C1738 +
             C7920 * C1729 + C7915 * C1737) *
                C903 +
            (C7918 * C1735 + C50937 * C1743 + C7919 * C1734 + C50938 * C1742 +
             C7920 * C1733 + C7915 * C1741) *
                C898 -
            (C7920 * C5983 + C7915 * C5984 + C7919 * C4484 + C50938 * C4492 +
             C7918 * C4485 + C50937 * C4493) *
                C904 -
            (C7920 * C5985 + C7915 * C5986 + C7919 * C4490 + C50938 * C4496 +
             C7918 * C4491 + C50937 * C4497) *
                C50705) *
               C50755 * C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7918 * C122 + C50937 * C129 + C7919 * C123 +
                      C50938 * C130 + C7920 * C124 + C7915 * C131) *
                         C903 +
                     (C7918 * C133 + C50937 * C143 + C7919 * C134 +
                      C50938 * C144 + C7920 * C135 + C7915 * C145) *
                         C898 -
                     (C8116 + C8117 + C8118) * C904 -
                     (C8119 + C8120 + C8121) * C50705) *
                        C50755 * C50910 +
                    ((C11072 + C11073 + C11074) * C903 +
                     (C11075 + C11076 + C11077) * C898 -
                     (C8816 + C8815 + C8814) * C904 -
                     (C8819 + C8818 + C8817) * C50705) *
                        C50755 * C50831) *
                       C50888 +
                   (((C8128 + C8129 + C8130) * C904 -
                     ((C7920 * C136 + C7915 * C146 + C7919 * C135 +
                       C50938 * C145 + C7918 * C134 + C50937 * C144) *
                          C898 +
                      (C7920 * C125 + C7915 * C132 + C7919 * C124 +
                       C50938 * C131 + C7918 * C123 + C50937 * C130) *
                          C903) +
                     (C8131 + C8132 + C8133) * C50705) *
                        C50755 * C50910 +
                    ((C8822 + C8821 + C8820) * C904 -
                     ((C11078 + C11079 + C11080) * C898 +
                      (C11081 + C11082 + C11083) * C903) +
                     (C8825 + C8824 + C8823) * C50705) *
                        C50755 * C50831) *
                       C50640) *
                      C50897 +
                  ((((C8814 + C8815 + C8816) * C904 -
                     ((C11077 + C11076 + C11075) * C898 +
                      (C11074 + C11073 + C11072) * C903) +
                     (C8817 + C8818 + C8819) * C50705) *
                        C50755 * C50910 +
                    ((C9248 + C9247 + C9246) * C904 -
                     ((C11090 + C11091 + C11092) * C898 +
                      (C11093 + C11094 + C11095) * C903) +
                     (C9251 + C9250 + C9249) * C50705) *
                        C50755 * C50831) *
                       C50888 +
                   (((C11083 + C11082 + C11081) * C903 +
                     (C11080 + C11079 + C11078) * C898 -
                     (C8820 + C8821 + C8822) * C904 -
                     (C8823 + C8824 + C8825) * C50705) *
                        C50755 * C50910 +
                    ((C11084 + C11085 + C11086) * C903 +
                     (C11087 + C11088 + C11089) * C898 -
                     (C7920 * C1094 + C7915 * C1098 + C7919 * C1095 +
                      C50938 * C1099 + C7918 * C1096 + C50937 * C1100) *
                         C904 -
                     (C7920 * C1102 + C7915 * C1106 + C7919 * C1103 +
                      C50938 * C1107 + C7918 * C1104 + C50937 * C1108) *
                         C50705) *
                        C50755 * C50831) *
                       C50640) *
                      C50733)) /
                (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C903 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C898 -
            (C8116 + C8117 + C8118) * C904 - (C8119 + C8120 + C8121) * C50705) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C903 +
            (C11075 + C11076 + C11077) * C898 - (C8816 + C8815 + C8814) * C904 -
            (C8819 + C8818 + C8817) * C50705) *
               C50755 * C50831) *
              C900 +
          (((C8128 + C8129 + C8130) * C904 -
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C898 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C903) +
            (C8131 + C8132 + C8133) * C50705) *
               C50755 * C50910 +
           ((C8822 + C8821 + C8820) * C904 -
            ((C11078 + C11079 + C11080) * C898 +
             (C11081 + C11082 + C11083) * C903) +
            (C8825 + C8824 + C8823) * C50705) *
               C50755 * C50831) *
              C901 +
          (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
             C7920 * C126 + C7915 * C138) *
                C903 +
            (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
             C7920 * C137 + C7915 * C147) *
                C898 -
            (C8444 + C8445 + C8446) * C904 - (C8447 + C8448 + C8449) * C50705) *
               C50755 * C50910 +
           ((C11400 + C11401 + C11402) * C903 +
            (C11403 + C11404 + C11405) * C898 -
            (C7920 * C784 + C7915 * C793 + C7919 * C783 + C50938 * C788 +
             C7918 * C782 + C50937 * C787) *
                C904 -
            (C7920 * C794 + C7915 * C799 + C7919 * C792 + C50938 * C798 +
             C7918 * C791 + C50937 * C797) *
                C50705) *
               C50755 * C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
            C7920 * C124 + C7915 * C131) *
               C976 +
           (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
            C7920 * C135 + C7915 * C145) *
               C971 -
           (C8116 + C8117 + C8118) * C977 - (C8119 + C8120 + C8121) * C972 +
           (C8122 + C8123 + C8124) * C978 + (C8125 + C8126 + C8127) * C973 -
           (C9082 + C9083 + C9084) * C979 - (C9085 + C9086 + C9087) * C974) *
              C50755 * C50910 +
          ((C11072 + C11073 + C11074) * C976 +
           (C11075 + C11076 + C11077) * C971 - (C8816 + C8815 + C8814) * C977 -
           (C8819 + C8818 + C8817) * C972 + (C9752 + C9751 + C9750) * C978 +
           (C9755 + C9754 + C9753) * C973 -
           (C7920 * C3082 + C7915 * C3087 + C7919 * C3081 + C50938 * C3084 +
            C7918 * C3080 + C50937 * C3083) *
               C979 -
           (C7920 * C3088 + C7915 * C3091 + C7919 * C3086 + C50938 * C3090 +
            C7918 * C3085 + C50937 * C3089) *
               C974) *
              C50755 * C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7918 * C122 + C50937 * C129 + C7919 * C123 +
                      C50938 * C130 + C7920 * C124 + C7915 * C131) *
                         C540 +
                     (C7918 * C133 + C50937 * C143 + C7919 * C134 +
                      C50938 * C144 + C7920 * C135 + C7915 * C145) *
                         C50896 -
                     (C8116 + C8117 + C8118) * C541 -
                     (C8119 + C8120 + C8121) * C50705) *
                        C50755 * C50910 +
                    ((C11072 + C11073 + C11074) * C540 +
                     (C11075 + C11076 + C11077) * C50896 -
                     (C8816 + C8815 + C8814) * C541 -
                     (C8819 + C8818 + C8817) * C50705) *
                        C50755 * C50831) *
                       C50888 +
                   (((C8128 + C8129 + C8130) * C541 -
                     ((C7920 * C136 + C7915 * C146 + C7919 * C135 +
                       C50938 * C145 + C7918 * C134 + C50937 * C144) *
                          C50896 +
                      (C7920 * C125 + C7915 * C132 + C7919 * C124 +
                       C50938 * C131 + C7918 * C123 + C50937 * C130) *
                          C540) +
                     (C8131 + C8132 + C8133) * C50705) *
                        C50755 * C50910 +
                    ((C8822 + C8821 + C8820) * C541 -
                     ((C11078 + C11079 + C11080) * C50896 +
                      (C11081 + C11082 + C11083) * C540) +
                     (C8825 + C8824 + C8823) * C50705) *
                        C50755 * C50831) *
                       C50640) *
                      C1558 +
                  ((((C8814 + C8815 + C8816) * C541 -
                     ((C11077 + C11076 + C11075) * C50896 +
                      (C11074 + C11073 + C11072) * C540) +
                     (C8817 + C8818 + C8819) * C50705) *
                        C50755 * C50910 +
                    ((C9248 + C9247 + C9246) * C541 -
                     ((C11090 + C11091 + C11092) * C50896 +
                      (C11093 + C11094 + C11095) * C540) +
                     (C9251 + C9250 + C9249) * C50705) *
                        C50755 * C50831) *
                       C50888 +
                   (((C11083 + C11082 + C11081) * C540 +
                     (C11080 + C11079 + C11078) * C50896 -
                     (C8820 + C8821 + C8822) * C541 -
                     (C8823 + C8824 + C8825) * C50705) *
                        C50755 * C50910 +
                    ((C11084 + C11085 + C11086) * C540 +
                     (C11087 + C11088 + C11089) * C50896 -
                     (C7920 * C1094 + C7915 * C1098 + C7919 * C1095 +
                      C50938 * C1099 + C7918 * C1096 + C50937 * C1100) *
                         C541 -
                     (C7920 * C1102 + C7915 * C1106 + C7919 * C1103 +
                      C50938 * C1107 + C7918 * C1104 + C50937 * C1108) *
                         C50705) *
                        C50755 * C50831) *
                       C50640) *
                      C50733)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C540 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50896 -
            (C8116 + C8117 + C8118) * C541 - (C8119 + C8120 + C8121) * C50705) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C540 +
            (C11075 + C11076 + C11077) * C50896 -
            (C8816 + C8815 + C8814) * C541 - (C8819 + C8818 + C8817) * C50705) *
               C50755 * C50831) *
              C50635 * C50943 +
          (((C8814 + C8815 + C8816) * C541 -
            ((C11077 + C11076 + C11075) * C50896 +
             (C11074 + C11073 + C11072) * C540) +
            (C8817 + C8818 + C8819) * C50705) *
               C50755 * C50910 +
           ((C9248 + C9247 + C9246) * C541 -
            ((C11090 + C11091 + C11092) * C50896 +
             (C11093 + C11094 + C11095) * C540) +
            (C9251 + C9250 + C9249) * C50705) *
               C50755 * C50831) *
              C50635 * C50944 +
          (((C11095 + C11094 + C11093) * C540 +
            (C11092 + C11091 + C11090) * C50896 -
            (C9246 + C9247 + C9248) * C541 - (C9249 + C9250 + C9251) * C50705) *
               C50755 * C50910 +
           ((C12878 + C12879 + C12880) * C540 +
            (C12881 + C12882 + C12883) * C50896 -
            (C7920 * C5983 + C7915 * C5984 + C7919 * C4484 + C50938 * C4492 +
             C7918 * C4485 + C50937 * C4493) *
                C541 -
            (C7920 * C5985 + C7915 * C5986 + C7919 * C4490 + C50938 * C4496 +
             C7918 * C4491 + C50937 * C4497) *
                C50705) *
               C50755 * C50831) *
              C50635 * C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C253 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C248 -
            (C8116 + C8117 + C8118) * C254 - (C8119 + C8120 + C8121) * C249 +
            (C8122 + C8123 + C8124) * C255 + (C8125 + C8126 + C8127) * C250) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C253 +
            (C11075 + C11076 + C11077) * C248 - (C8816 + C8815 + C8814) * C254 -
            (C8819 + C8818 + C8817) * C249 + (C9752 + C9751 + C9750) * C255 +
            (C9755 + C9754 + C9753) * C250) *
               C50755 * C50831) *
              C50635 * C1558 +
          (((C8814 + C8815 + C8816) * C254 -
            ((C11077 + C11076 + C11075) * C248 +
             (C11074 + C11073 + C11072) * C253) +
            (C8817 + C8818 + C8819) * C249 - (C9750 + C9751 + C9752) * C255 -
            (C9753 + C9754 + C9755) * C250) *
               C50755 * C50910 +
           ((C9248 + C9247 + C9246) * C254 -
            ((C11090 + C11091 + C11092) * C248 +
             (C11093 + C11094 + C11095) * C253) +
            (C9251 + C9250 + C9249) * C249 -
            (C7920 * C2560 + C7915 * C2566 + C7919 * C2559 + C50938 * C2562 +
             C7918 * C2558 + C50937 * C2561) *
                C255 -
            (C7920 * C2565 + C7915 * C2569 + C7919 * C2564 + C50938 * C2568 +
             C7918 * C2563 + C50937 * C2567) *
                C250) *
               C50755 * C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C121 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C50653) *
                C50755 * C50910 +
            ((C11072 + C11073 + C11074) * C121 +
             (C11075 + C11076 + C11077) * C50653) *
                C50755 * C50831) *
               C900 -
           (((C11078 + C11079 + C11080) * C50653 +
             (C11081 + C11082 + C11083) * C121) *
                C50755 * C50831 +
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50653 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C121) *
                C50755 * C50910) *
               C901 +
           (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
              C7920 * C126 + C7915 * C138) *
                 C121 +
             (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
              C7920 * C137 + C7915 * C147) *
                 C50653) *
                C50755 * C50910 +
            ((C11400 + C11401 + C11402) * C121 +
             (C11403 + C11404 + C11405) * C50653) *
                C50755 * C50831) *
               C902) *
              C1558 +
          ((((C11083 + C11082 + C11081) * C121 +
             (C11080 + C11079 + C11078) * C50653) *
                C50755 * C50910 +
            ((C11084 + C11085 + C11086) * C121 +
             (C11087 + C11088 + C11089) * C50653) *
                C50755 * C50831) *
               C901 -
           (((C11090 + C11091 + C11092) * C50653 +
             (C11093 + C11094 + C11095) * C121) *
                C50755 * C50831 +
            ((C11077 + C11076 + C11075) * C50653 +
             (C11074 + C11073 + C11072) * C121) *
                C50755 * C50910) *
               C900 -
           (((C7920 * C425 + C7915 * C436 + C7919 * C424 + C50938 * C435 +
              C7918 * C423 + C50937 * C434) *
                 C50653 +
             (C7920 * C406 + C7915 * C426 + C7919 * C405 + C50938 * C420 +
              C7918 * C404 + C50937 * C419) *
                 C121) *
                C50755 * C50831 +
            ((C11405 + C11404 + C11403) * C50653 +
             (C11402 + C11401 + C11400) * C121) *
                C50755 * C50910) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C121 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C50653) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C121 +
            (C11075 + C11076 + C11077) * C50653) *
               C50755 * C50831) *
              C50635 * C1724 -
          (((C11090 + C11091 + C11092) * C50653 +
            (C11093 + C11094 + C11095) * C121) *
               C50755 * C50831 +
           ((C11077 + C11076 + C11075) * C50653 +
            (C11074 + C11073 + C11072) * C121) *
               C50755 * C50910) *
              C50635 * C1725 +
          (((C11095 + C11094 + C11093) * C121 +
            (C11092 + C11091 + C11090) * C50653) *
               C50755 * C50910 +
           ((C12878 + C12879 + C12880) * C121 +
            (C12881 + C12882 + C12883) * C50653) *
               C50755 * C50831) *
              C50635 * C1726 -
          (((C7920 * C5384 + C7915 * C5388 + C7919 * C5383 + C50938 * C5387 +
             C7918 * C5382 + C50937 * C5386) *
                C50653 +
            (C7920 * C5379 + C7915 * C5385 + C7919 * C5378 + C50938 * C5381 +
             C7918 * C5377 + C50937 * C5380) *
                C121) *
               C50755 * C50831 +
           ((C12883 + C12882 + C12881) * C50653 +
            (C12880 + C12879 + C12878) * C121) *
               C50755 * C50910) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7918 * C122 + C50937 * C129 + C7919 * C123 +
                      C50938 * C130 + C7920 * C124 + C7915 * C131) *
                         C121 +
                     (C7918 * C133 + C50937 * C143 + C7919 * C134 +
                      C50938 * C144 + C7920 * C135 + C7915 * C145) *
                         C50653) *
                        C50755 * C50910 +
                    ((C11072 + C11073 + C11074) * C121 +
                     (C11075 + C11076 + C11077) * C50653) *
                        C50755 * C50831) *
                       C50888 -
                   (((C11078 + C11079 + C11080) * C50653 +
                     (C11081 + C11082 + C11083) * C121) *
                        C50755 * C50831 +
                    ((C7920 * C136 + C7915 * C146 + C7919 * C135 +
                      C50938 * C145 + C7918 * C134 + C50937 * C144) *
                         C50653 +
                     (C7920 * C125 + C7915 * C132 + C7919 * C124 +
                      C50938 * C131 + C7918 * C123 + C50937 * C130) *
                         C121) *
                        C50755 * C50910) *
                       C50640) *
                      C50943 +
                  ((((C11083 + C11082 + C11081) * C121 +
                     (C11080 + C11079 + C11078) * C50653) *
                        C50755 * C50910 +
                    ((C11084 + C11085 + C11086) * C121 +
                     (C11087 + C11088 + C11089) * C50653) *
                        C50755 * C50831) *
                       C50640 -
                   (((C11090 + C11091 + C11092) * C50653 +
                     (C11093 + C11094 + C11095) * C121) *
                        C50755 * C50831 +
                    ((C11077 + C11076 + C11075) * C50653 +
                     (C11074 + C11073 + C11072) * C121) *
                        C50755 * C50910) *
                       C50888) *
                      C50944 +
                  ((((C11095 + C11094 + C11093) * C121 +
                     (C11092 + C11091 + C11090) * C50653) *
                        C50755 * C50910 +
                    ((C12878 + C12879 + C12880) * C121 +
                     (C12881 + C12882 + C12883) * C50653) *
                        C50755 * C50831) *
                       C50888 -
                   (((C7920 * C1732 + C7915 * C1740 + C7919 * C1733 +
                      C50938 * C1741 + C7918 * C1734 + C50937 * C1742) *
                         C50653 +
                     (C7920 * C1728 + C7915 * C1736 + C7919 * C1729 +
                      C50938 * C1737 + C7918 * C1730 + C50937 * C1738) *
                         C121) *
                        C50755 * C50831 +
                    ((C11089 + C11088 + C11087) * C50653 +
                     (C11086 + C11085 + C11084) * C121) *
                        C50755 * C50910) *
                       C50640) *
                      C1974)) /
                (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
              C7920 * C124 + C7915 * C131) *
                 C121 +
             (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
              C7920 * C135 + C7915 * C145) *
                 C50653) *
                C50755 * C50910 +
            ((C11072 + C11073 + C11074) * C121 +
             (C11075 + C11076 + C11077) * C50653) *
                C50755 * C50831) *
               C900 -
           (((C11078 + C11079 + C11080) * C50653 +
             (C11081 + C11082 + C11083) * C121) *
                C50755 * C50831 +
            ((C7920 * C136 + C7915 * C146 + C7919 * C135 + C50938 * C145 +
              C7918 * C134 + C50937 * C144) *
                 C50653 +
             (C7920 * C125 + C7915 * C132 + C7919 * C124 + C50938 * C131 +
              C7918 * C123 + C50937 * C130) *
                 C121) *
                C50755 * C50910) *
               C901 +
           (((C7918 * C124 + C50937 * C131 + C7919 * C125 + C50938 * C132 +
              C7920 * C126 + C7915 * C138) *
                 C121 +
             (C7918 * C135 + C50937 * C145 + C7919 * C136 + C50938 * C146 +
              C7920 * C137 + C7915 * C147) *
                 C50653) *
                C50755 * C50910 +
            ((C11400 + C11401 + C11402) * C121 +
             (C11403 + C11404 + C11405) * C50653) *
                C50755 * C50831) *
               C902) *
              C1558 +
          ((((C11083 + C11082 + C11081) * C121 +
             (C11080 + C11079 + C11078) * C50653) *
                C50755 * C50910 +
            ((C11084 + C11085 + C11086) * C121 +
             (C11087 + C11088 + C11089) * C50653) *
                C50755 * C50831) *
               C901 -
           (((C11090 + C11091 + C11092) * C50653 +
             (C11093 + C11094 + C11095) * C121) *
                C50755 * C50831 +
            ((C11077 + C11076 + C11075) * C50653 +
             (C11074 + C11073 + C11072) * C121) *
                C50755 * C50910) *
               C900 -
           (((C7920 * C425 + C7915 * C436 + C7919 * C424 + C50938 * C435 +
              C7918 * C423 + C50937 * C434) *
                 C50653 +
             (C7920 * C406 + C7915 * C426 + C7919 * C405 + C50938 * C420 +
              C7918 * C404 + C50937 * C419) *
                 C121) *
                C50755 * C50831 +
            ((C11405 + C11404 + C11403) * C50653 +
             (C11402 + C11401 + C11400) * C121) *
                C50755 * C50910) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7918 * C122 + C50937 * C129 + C7919 * C123 + C50938 * C130 +
             C7920 * C124 + C7915 * C131) *
                C253 +
            (C7918 * C133 + C50937 * C143 + C7919 * C134 + C50938 * C144 +
             C7920 * C135 + C7915 * C145) *
                C248 -
            (C8116 + C8117 + C8118) * C254 - (C8119 + C8120 + C8121) * C249 +
            (C8122 + C8123 + C8124) * C255 + (C8125 + C8126 + C8127) * C250) *
               C50755 * C50910 +
           ((C11072 + C11073 + C11074) * C253 +
            (C11075 + C11076 + C11077) * C248 - (C8816 + C8815 + C8814) * C254 -
            (C8819 + C8818 + C8817) * C249 + (C9752 + C9751 + C9750) * C255 +
            (C9755 + C9754 + C9753) * C250) *
               C50755 * C50831) *
              C50635 * C1558 +
          (((C8814 + C8815 + C8816) * C254 -
            ((C11077 + C11076 + C11075) * C248 +
             (C11074 + C11073 + C11072) * C253) +
            (C8817 + C8818 + C8819) * C249 - (C9750 + C9751 + C9752) * C255 -
            (C9753 + C9754 + C9755) * C250) *
               C50755 * C50910 +
           ((C9248 + C9247 + C9246) * C254 -
            ((C11090 + C11091 + C11092) * C248 +
             (C11093 + C11094 + C11095) * C253) +
            (C9251 + C9250 + C9249) * C249 -
            (C7920 * C2560 + C7915 * C2566 + C7919 * C2559 + C50938 * C2562 +
             C7918 * C2558 + C50937 * C2561) *
                C255 -
            (C7920 * C2565 + C7915 * C2569 + C7919 * C2564 + C50938 * C2568 +
             C7918 * C2563 + C50937 * C2567) *
                C250) *
               C50755 * C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C540 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50896 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C541 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C50939 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C541 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50896 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C540) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C50705) *
              C50755 * C50767 * C50940 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C540 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50896 -
           (C120 * C542 + C108 * C543 + C119 * C264 + C107 * C282 +
            C118 * C256 + C106 * C266 + C117 * C257 + C105 * C267) *
               C541 -
           (C120 * C544 + C108 * C545 + C119 * C283 + C107 * C294 +
            C118 * C270 + C106 * C286 + C117 * C271 + C105 * C287) *
               C50705) *
              C50755 * C50767 * C539) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C540 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50896 -
            (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
            (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C540 + C2410 * C50896 - (C2394 + C2393) * C541 -
            (C2396 + C2395) * C50705) *
               C2175) *
              C50767 * C50939 +
          (((C2397 + C2398) * C541 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50896 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C540) +
            (C2399 + C2400) * C50705) *
               C2173 +
           ((C2402 + C2401) * C541 -
            ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
            (C2404 + C2403) * C50705) *
               C2174 +
           ((C2406 + C2405) * C541 - (C2412 * C50896 + C2411 * C540) +
            (C2408 + C2407) * C50705) *
               C2175) *
              C50767 * C50940 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C540 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50896 -
            (C2733 + C2734) * C541 - (C2735 + C2736) * C50705) *
               C2173 +
           ((C2734 + C2733) * C540 + (C2736 + C2735) * C50896 -
            (C2737 + C2738) * C541 - (C2739 + C2740) * C50705) *
               C2174 +
           ((C2738 + C2737) * C540 + (C2740 + C2739) * C50896 -
            (C2177 * C980 + C50615 * C984 + C2176 * C981 + C2171 * C985) *
                C541 -
            (C2177 * C988 + C50615 * C992 + C2176 * C989 + C2171 * C993) *
                C50705) *
               C2175) *
              C50767 * C539) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C540 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50896 -
            (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
             C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                C541 -
            (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
             C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                C50705) *
               C50755 * C50767 * C251 +
           ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
             C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
                C541 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50896 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C540) +
            (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
             C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50897 +
          (((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
             C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
                C541 -
            ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
              C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                 C50896 +
             (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
              C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                 C540) +
            (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
             C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
                C50705) *
               C50755 * C50767 * C251 +
           ((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C540 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50896 -
            (C120 * C784 + C108 * C793 + C119 * C783 + C107 * C788 +
             C118 * C782 + C106 * C787 + C117 * C781 + C105 * C786) *
                C541 -
            (C120 * C794 + C108 * C799 + C119 * C792 + C107 * C798 +
             C118 * C791 + C106 * C797 + C117 * C790 + C105 * C796) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C540 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50896 -
             (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                C2173 +
            ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
             (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
                C2174 +
            (C2409 * C540 + C2410 * C50896 - (C2394 + C2393) * C541 -
             (C2396 + C2395) * C50705) *
                C2175) *
               C50767 * C251 +
           (((C2397 + C2398) * C541 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50896 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C540) +
             (C2399 + C2400) * C50705) *
                C2173 +
            ((C2402 + C2401) * C541 -
             ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
             (C2404 + C2403) * C50705) *
                C2174 +
            ((C2406 + C2405) * C541 - (C2412 * C50896 + C2411 * C540) +
             (C2408 + C2407) * C50705) *
                C2175) *
               C50767 * C50640) *
              C50897 +
          ((((C3125 + C3126) * C541 -
             ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                  C50896 +
              (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                  C540) +
             (C3127 + C3128) * C50705) *
                C2173 +
            ((C3129 + C3130) * C541 -
             ((C3128 + C3127) * C50896 + (C3126 + C3125) * C540) +
             (C3131 + C3132) * C50705) *
                C2174 +
            ((C2176 * C3080 + C2171 * C3083 + C2177 * C3081 + C50615 * C3084) *
                 C541 -
             ((C3132 + C3131) * C50896 + (C3130 + C3129) * C540) +
             (C2176 * C3085 + C2171 * C3089 + C2177 * C3086 + C50615 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C251 +
           (((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C540 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50896 -
             (C3133 + C3134) * C541 - (C3135 + C3136) * C50705) *
                C2173 +
            ((C3134 + C3133) * C540 + (C3136 + C3135) * C50896 -
             (C3137 + C3138) * C541 - (C3139 + C3140) * C50705) *
                C2174 +
            ((C3138 + C3137) * C540 + (C3140 + C3139) * C50896 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C541 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C248 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C254 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C249 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C255 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C250) *
              C50755 * C50767 * C251 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C254 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C248 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C253) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C249 -
           (C120 * C265 + C108 * C284 + C119 * C263 + C107 * C277 +
            C118 * C262 + C106 * C276 + C117 * C261 + C105 * C275) *
               C255 -
           (C120 * C285 + C108 * C295 + C119 * C281 + C107 * C293 +
            C118 * C280 + C106 * C292 + C117 * C279 + C105 * C291) *
               C250) *
              C50755 * C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50653) *
              C50755 * C50767 * C112 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50653 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50755 * C50767 * C113 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50653) *
              C50755 * C50767 * C114 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50653 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50755 * C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C251 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C50640) *
              C394 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C50640 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C251) *
              C395 +
          (((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
             C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
                C121 +
            (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
             C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
                C50653) *
               C50755 * C50767 * C251 -
           ((C120 * C425 + C108 * C436 + C119 * C424 + C107 * C435 +
             C118 * C423 + C106 * C434 + C117 * C422 + C105 * C433) *
                C50653 +
            (C120 * C406 + C108 * C426 + C119 * C405 + C107 * C420 +
             C118 * C404 + C106 * C419 + C117 * C403 + C105 * C418) *
                C121) *
               C50755 * C50767 * C50640) *
              C396)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C2173 +
           ((C2176 * C259 + C2171 * C269 + C2177 * C258 + C50615 * C268) *
                C121 +
            (C2176 * C273 + C2171 * C289 + C2177 * C272 + C50615 * C288) *
                C50653) *
               C2174 +
           ((C2176 * C260 + C2171 * C274 + C2177 * C261 + C50615 * C275) *
                C121 +
            (C2176 * C278 + C2171 * C290 + C2177 * C279 + C50615 * C291) *
                C50653) *
               C2175) *
              C50767 * C112 -
          (((C2177 * C280 + C50615 * C292 + C2176 * C279 + C2171 * C291) *
                C50653 +
            (C2177 * C262 + C50615 * C276 + C2176 * C261 + C2171 * C275) *
                C121) *
               C2175 +
           ((C2177 * C271 + C50615 * C287 + C2176 * C272 + C2171 * C288) *
                C50653 +
            (C2177 * C257 + C50615 * C267 + C2176 * C258 + C2171 * C268) *
                C121) *
               C2174 +
           ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                C50653 +
            (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                C121) *
               C2173) *
              C50767 * C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50653) *
               C2173 +
           ((C2176 * C257 + C2171 * C267 + C2177 * C256 + C50615 * C266) *
                C121 +
            (C2176 * C271 + C2171 * C287 + C2177 * C270 + C50615 * C286) *
                C50653) *
               C2174 +
           ((C2176 * C262 + C2171 * C276 + C2177 * C263 + C50615 * C277) *
                C121 +
            (C2176 * C280 + C2171 * C292 + C2177 * C281 + C50615 * C293) *
                C50653) *
               C2175) *
              C50767 * C114 -
          (((C2177 * C285 + C50615 * C295 + C2176 * C281 + C2171 * C293) *
                C50653 +
            (C2177 * C265 + C50615 * C284 + C2176 * C263 + C2171 * C277) *
                C121) *
               C2175 +
           ((C2177 * C283 + C50615 * C294 + C2176 * C270 + C2171 * C286) *
                C50653 +
            (C2177 * C264 + C50615 * C282 + C2176 * C256 + C2171 * C266) *
                C121) *
               C2174 +
           ((C2177 * C137 + C50615 * C147 + C2176 * C136 + C2171 * C146) *
                C50653 +
            (C2177 * C126 + C50615 * C138 + C2176 * C125 + C2171 * C132) *
                C121) *
               C2173) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C2173 +
           ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
            (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
            (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
               C2174 +
           (C2409 * C253 + C2410 * C248 - (C2394 + C2393) * C254 -
            (C2396 + C2395) * C249 +
            (C2176 * C2324 + C2171 * C2327 + C2177 * C2325 + C50615 * C2328) *
                C255 +
            (C2176 * C2329 + C2171 * C2333 + C2177 * C2330 + C50615 * C2334) *
                C250) *
               C2175) *
              C50767 * C251 +
          (((C2397 + C2398) * C254 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C248 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2399 + C2400) * C249 - C2411 * C255 - C2412 * C250) *
               C2173 +
           ((C2402 + C2401) * C254 -
            ((C2400 + C2399) * C248 + (C2398 + C2397) * C253) +
            (C2404 + C2403) * C249 - (C2405 + C2406) * C255 -
            (C2407 + C2408) * C250) *
               C2174 +
           ((C2406 + C2405) * C254 - (C2412 * C248 + C2411 * C253) +
            (C2408 + C2407) * C249 -
            (C2177 * C2326 + C50615 * C2331 + C2176 * C2325 + C2171 * C2328) *
                C255 -
            (C2177 * C2332 + C50615 * C2335 + C2176 * C2330 + C2171 * C2334) *
                C250) *
               C2175) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C251 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C50640) *
              C394 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C2176 * C781 + C2171 * C786 + C2177 * C782 + C50615 * C787) *
                 C121 +
             (C2176 * C790 + C2171 * C796 + C2177 * C791 + C50615 * C797) *
                 C50653) *
                C2174 +
            ((C2176 * C1446 + C2171 * C1450 + C2177 * C1445 + C50615 * C1449) *
                 C121 +
             (C2176 * C1454 + C2171 * C1458 + C2177 * C1453 + C50615 * C1457) *
                 C50653) *
                C2175) *
               C50767 * C50640 -
           (((C2177 * C1454 + C50615 * C1458 + C2176 * C1455 + C2171 * C1459) *
                 C50653 +
             (C2177 * C1446 + C50615 * C1450 + C2176 * C1447 + C2171 * C1451) *
                 C121) *
                C2175 +
            ((C2177 * C790 + C50615 * C796 + C2176 * C789 + C2171 * C795) *
                 C50653 +
             (C2177 * C781 + C50615 * C786 + C2176 * C780 + C2171 * C785) *
                 C121) *
                C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C251) *
              C395 +
          ((((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                 C121 +
             (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                 C50653) *
                C2173 +
            ((C2176 * C1097 + C2171 * C1101 + C2177 * C1096 + C50615 * C1100) *
                 C121 +
             (C2176 * C1105 + C2171 * C1109 + C2177 * C1104 + C50615 * C1108) *
                 C50653) *
                C2174 +
            ((C2176 * C2558 + C2171 * C2561 + C2177 * C2559 + C50615 * C2562) *
                 C121 +
             (C2176 * C2563 + C2171 * C2567 + C2177 * C2564 + C50615 * C2568) *
                 C50653) *
                C2175) *
               C50767 * C251 -
           (((C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                 C50653 +
             (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                 C121) *
                C2175 +
            ((C2177 * C1103 + C50615 * C1107 + C2176 * C1104 + C2171 * C1108) *
                 C50653 +
             (C2177 * C1095 + C50615 * C1099 + C2176 * C1096 + C2171 * C1100) *
                 C121) *
                C2174 +
            ((C2177 * C423 + C50615 * C434 + C2176 * C422 + C2171 * C433) *
                 C50653 +
             (C2177 * C404 + C50615 * C419 + C2176 * C403 + C2171 * C418) *
                 C121) *
                C2173) *
               C50767 * C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C50939 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C50940 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50653) *
               C50755 * C50767 * C539) *
              C50897 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C50940 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C50939 -
           ((C120 * C647 + C108 * C649 + C119 * C414 + C107 * C430 +
             C118 * C413 + C106 * C429 + C117 * C412 + C105 * C428) *
                C50653 +
            (C120 * C646 + C108 * C648 + C119 * C400 + C107 * C410 +
             C118 * C399 + C106 * C409 + C117 * C398 + C105 * C408) *
                C121) *
               C50755 * C50767 * C539) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C50939 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C50940 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C2173 +
            ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C2174 +
            ((C2738 + C2737) * C121 + (C2740 + C2739) * C50653) * C2175) *
               C50767 * C539) *
              C50897 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C2176 * C781 + C2171 * C786 + C2177 * C782 + C50615 * C787) *
                 C121 +
             (C2176 * C790 + C2171 * C796 + C2177 * C791 + C50615 * C797) *
                 C50653) *
                C2174 +
            ((C2176 * C1446 + C2171 * C1450 + C2177 * C1445 + C50615 * C1449) *
                 C121 +
             (C2176 * C1454 + C2171 * C1458 + C2177 * C1453 + C50615 * C1457) *
                 C50653) *
                C2175) *
               C50767 * C50940 -
           (((C2177 * C1454 + C50615 * C1458 + C2176 * C1455 + C2171 * C1459) *
                 C50653 +
             (C2177 * C1446 + C50615 * C1450 + C2176 * C1447 + C2171 * C1451) *
                 C121) *
                C2175 +
            ((C2177 * C790 + C50615 * C796 + C2176 * C789 + C2171 * C795) *
                 C50653 +
             (C2177 * C781 + C50615 * C786 + C2176 * C780 + C2171 * C785) *
                 C121) *
                C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C50939 -
           (((C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50653 +
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C121) *
                C2175 +
            ((C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                 C50653 +
             (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                 C121) *
                C2174 +
            ((C2177 * C413 + C50615 * C429 + C2176 * C412 + C2171 * C428) *
                 C50653 +
             (C2177 * C399 + C50615 * C409 + C2176 * C398 + C2171 * C408) *
                 C121) *
                C2173) *
               C50767 * C539) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50653) *
              C50755 * C50767 * C112 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50653 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50755 * C50767 * C113 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50653) *
              C50755 * C50767 * C114 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50653 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50755 * C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C248 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C254 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C249 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C255 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C250) *
              C50755 * C50767 * C251 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C254 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C248 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C253) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C249 -
           (C120 * C265 + C108 * C284 + C119 * C263 + C107 * C277 +
            C118 * C262 + C106 * C276 + C117 * C261 + C105 * C275) *
               C255 -
           (C120 * C285 + C108 * C295 + C119 * C281 + C107 * C293 +
            C118 * C280 + C106 * C292 + C117 * C279 + C105 * C291) *
               C250) *
              C50755 * C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C2173 +
           ((C2176 * C259 + C2171 * C269 + C2177 * C258 + C50615 * C268) *
                C121 +
            (C2176 * C273 + C2171 * C289 + C2177 * C272 + C50615 * C288) *
                C50653) *
               C2174 +
           ((C2176 * C260 + C2171 * C274 + C2177 * C261 + C50615 * C275) *
                C121 +
            (C2176 * C278 + C2171 * C290 + C2177 * C279 + C50615 * C291) *
                C50653) *
               C2175) *
              C50767 * C112 -
          (((C2177 * C280 + C50615 * C292 + C2176 * C279 + C2171 * C291) *
                C50653 +
            (C2177 * C262 + C50615 * C276 + C2176 * C261 + C2171 * C275) *
                C121) *
               C2175 +
           ((C2177 * C271 + C50615 * C287 + C2176 * C272 + C2171 * C288) *
                C50653 +
            (C2177 * C257 + C50615 * C267 + C2176 * C258 + C2171 * C268) *
                C121) *
               C2174 +
           ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                C50653 +
            (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                C121) *
               C2173) *
              C50767 * C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C50653) *
               C2173 +
           ((C2176 * C257 + C2171 * C267 + C2177 * C256 + C50615 * C266) *
                C121 +
            (C2176 * C271 + C2171 * C287 + C2177 * C270 + C50615 * C286) *
                C50653) *
               C2174 +
           ((C2176 * C262 + C2171 * C276 + C2177 * C263 + C50615 * C277) *
                C121 +
            (C2176 * C280 + C2171 * C292 + C2177 * C281 + C50615 * C293) *
                C50653) *
               C2175) *
              C50767 * C114 -
          (((C2177 * C285 + C50615 * C295 + C2176 * C281 + C2171 * C293) *
                C50653 +
            (C2177 * C265 + C50615 * C284 + C2176 * C263 + C2171 * C277) *
                C121) *
               C2175 +
           ((C2177 * C283 + C50615 * C294 + C2176 * C270 + C2171 * C286) *
                C50653 +
            (C2177 * C264 + C50615 * C282 + C2176 * C256 + C2171 * C266) *
                C121) *
               C2174 +
           ((C2177 * C137 + C50615 * C147 + C2176 * C136 + C2171 * C146) *
                C50653 +
            (C2177 * C126 + C50615 * C138 + C2176 * C125 + C2171 * C132) *
                C121) *
               C2173) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C2173 +
           ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
            (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
            (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
               C2174 +
           (C2409 * C253 + C2410 * C248 - (C2394 + C2393) * C254 -
            (C2396 + C2395) * C249 +
            (C2176 * C2324 + C2171 * C2327 + C2177 * C2325 + C50615 * C2328) *
                C255 +
            (C2176 * C2329 + C2171 * C2333 + C2177 * C2330 + C50615 * C2334) *
                C250) *
               C2175) *
              C50767 * C251 +
          (((C2397 + C2398) * C254 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C248 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2399 + C2400) * C249 - C2411 * C255 - C2412 * C250) *
               C2173 +
           ((C2402 + C2401) * C254 -
            ((C2400 + C2399) * C248 + (C2398 + C2397) * C253) +
            (C2404 + C2403) * C249 - (C2405 + C2406) * C255 -
            (C2407 + C2408) * C250) *
               C2174 +
           ((C2406 + C2405) * C254 - (C2412 * C248 + C2411 * C253) +
            (C2408 + C2407) * C249 -
            (C2177 * C2326 + C50615 * C2331 + C2176 * C2325 + C2171 * C2328) *
                C255 -
            (C2177 * C2332 + C50615 * C2335 + C2176 * C2330 + C2171 * C2334) *
                C250) *
               C2175) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1213 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50941 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C1214 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50942 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C1215 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C1210) *
              C50755 * C50767 * C50888 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C1214 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50941 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1213) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C50942 -
           (C120 * C265 + C108 * C284 + C119 * C263 + C107 * C277 +
            C118 * C262 + C106 * C276 + C117 * C261 + C105 * C275) *
               C1215 -
           (C120 * C285 + C108 * C295 + C119 * C281 + C107 * C293 +
            C118 * C280 + C106 * C292 + C117 * C279 + C105 * C291) *
               C1210) *
              C50755 * C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C1213 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50941 -
            (C2385 + C2386) * C1214 - (C2387 + C2388) * C50942 + C2409 * C1215 +
            C2410 * C1210) *
               C2173 +
           ((C2386 + C2385) * C1213 + (C2388 + C2387) * C50941 -
            (C2390 + C2389) * C1214 - (C2392 + C2391) * C50942 +
            (C2393 + C2394) * C1215 + (C2395 + C2396) * C1210) *
               C2174 +
           (C2409 * C1213 + C2410 * C50941 - C3393 * C1214 - C3394 * C50942 +
            (C3404 + C3403) * C1215 + (C3406 + C3405) * C1210) *
               C2175) *
              C50767 * C50888 +
          (((C2397 + C2398) * C1214 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50941 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C1213) +
            (C2399 + C2400) * C50942 - C2411 * C1215 - C2412 * C1210) *
               C2173 +
           ((C2402 + C2401) * C1214 -
            ((C2400 + C2399) * C50941 + (C2398 + C2397) * C1213) +
            (C2404 + C2403) * C50942 - (C2405 + C2406) * C1215 -
            (C2407 + C2408) * C1210) *
               C2174 +
           ((C2406 + C2405) * C1214 - (C2412 * C50941 + C2411 * C1213) +
            (C2408 + C2407) * C50942 -
            (C2177 * C2326 + C50615 * C2331 + C2176 * C2325 + C2171 * C2328) *
                C1215 -
            (C2177 * C2332 + C50615 * C2335 + C2176 * C2330 + C2171 * C2334) *
                C1210) *
               C2175) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1213 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50941 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C1214 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50942 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C1215 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C1210) *
              C50755 * C50767 * C50635 * C50897 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C1214 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50941 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C1213) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C50942 -
           (C120 * C1444 + C108 * C1448 + C119 * C1445 + C107 * C1449 +
            C118 * C1446 + C106 * C1450 + C117 * C1447 + C105 * C1451) *
               C1215 -
           (C120 * C1452 + C108 * C1456 + C119 * C1453 + C107 * C1457 +
            C118 * C1454 + C106 * C1458 + C117 * C1455 + C105 * C1459) *
               C1210) *
              C50755 * C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C1213 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50941 -
            (C2385 + C2386) * C1214 - (C2387 + C2388) * C50942 + C2409 * C1215 +
            C2410 * C1210) *
               C2173 +
           ((C2386 + C2385) * C1213 + (C2388 + C2387) * C50941 -
            (C2390 + C2389) * C1214 - (C2392 + C2391) * C50942 +
            (C2393 + C2394) * C1215 + (C2395 + C2396) * C1210) *
               C2174 +
           (C2409 * C1213 + C2410 * C50941 - C3393 * C1214 - C3394 * C50942 +
            (C3404 + C3403) * C1215 + (C3406 + C3405) * C1210) *
               C2175) *
              C50767 * C50635 * C50897 +
          (((C3125 + C3126) * C1214 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50941 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C1213) +
            (C3127 + C3128) * C50942 - C4079 * C1215 - C4080 * C1210) *
               C2173 +
           ((C3129 + C3130) * C1214 -
            ((C3128 + C3127) * C50941 + (C3126 + C3125) * C1213) +
            (C3131 + C3132) * C50942 - (C4089 + C4090) * C1215 -
            (C4091 + C4092) * C1210) *
               C2174 +
           ((C4090 + C4089) * C1214 - (C4080 * C50941 + C4079 * C1213) +
            (C4092 + C4091) * C50942 -
            (C2177 * C4070 + C50615 * C4072 + C2176 * C4071 + C2171 * C4073) *
                C1215 -
            (C2177 * C4074 + C50615 * C4076 + C2176 * C4075 + C2171 * C4077) *
                C1210) *
               C2175) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 + C119 * C124 +
           C107 * C131 + C120 * C125 + C108 * C132) *
              C976 +
          (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 + C119 * C135 +
           C107 * C145 + C120 * C136 + C108 * C146) *
              C971 -
          (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 + C118 * C258 +
           C106 * C268 + C117 * C259 + C105 * C269) *
              C977 -
          (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 + C118 * C272 +
           C106 * C288 + C117 * C273 + C105 * C289) *
              C972 +
          (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 + C119 * C262 +
           C107 * C276 + C120 * C263 + C108 * C277) *
              C978 +
          (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 + C119 * C280 +
           C107 * C292 + C120 * C281 + C108 * C293) *
              C973 -
          (C120 * C980 + C108 * C984 + C119 * C981 + C107 * C985 + C118 * C982 +
           C106 * C986 + C117 * C983 + C105 * C987) *
              C979 -
          (C120 * C988 + C108 * C992 + C119 * C989 + C107 * C993 + C118 * C990 +
           C106 * C994 + C117 * C991 + C105 * C995) *
              C974) *
         C50755 * C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C903 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C898 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C904 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C900 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C904 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C898 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C903) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C50705) *
              C50755 * C50767 * C901 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C903 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C898 -
           (C120 * C542 + C108 * C543 + C119 * C264 + C107 * C282 +
            C118 * C256 + C106 * C266 + C117 * C257 + C105 * C267) *
               C904 -
           (C120 * C544 + C108 * C545 + C119 * C283 + C107 * C294 +
            C118 * C270 + C106 * C286 + C117 * C271 + C105 * C287) *
               C50705) *
              C50755 * C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C903 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C898 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C904 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C50635 * C394 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C904 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C898 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C903) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C50705) *
              C50755 * C50767 * C50635 * C395 +
          ((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
            C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
               C903 +
           (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
            C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
               C898 -
           (C120 * C1094 + C108 * C1098 + C119 * C1095 + C107 * C1099 +
            C118 * C1096 + C106 * C1100 + C117 * C1097 + C105 * C1101) *
               C904 -
           (C120 * C1102 + C108 * C1106 + C119 * C1103 + C107 * C1107 +
            C118 * C1104 + C106 * C1108 + C117 * C1105 + C105 * C1109) *
               C50705) *
              C50755 * C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
            (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C903 + C2410 * C898 - (C2394 + C2393) * C904 -
            (C2396 + C2395) * C50705) *
               C2175) *
              C50767 * C900 +
          (((C2397 + C2398) * C904 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C898 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C903) +
            (C2399 + C2400) * C50705) *
               C2173 +
           ((C2402 + C2401) * C904 -
            ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
            (C2404 + C2403) * C50705) *
               C2174 +
           ((C2406 + C2405) * C904 - (C2412 * C898 + C2411 * C903) +
            (C2408 + C2407) * C50705) *
               C2175) *
              C50767 * C901 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C903 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C898 -
            (C2733 + C2734) * C904 - (C2735 + C2736) * C50705) *
               C2173 +
           ((C2734 + C2733) * C903 + (C2736 + C2735) * C898 -
            (C2737 + C2738) * C904 - (C2739 + C2740) * C50705) *
               C2174 +
           ((C2738 + C2737) * C903 + (C2740 + C2739) * C898 -
            (C2177 * C980 + C50615 * C984 + C2176 * C981 + C2171 * C985) *
                C904 -
            (C2177 * C988 + C50615 * C992 + C2176 * C989 + C2171 * C993) *
                C50705) *
               C2175) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) * C976 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) * C971 -
           (C2385 + C2386) * C977 - (C2387 + C2388) * C972 + C2409 * C978 +
           C2410 * C973 - C3393 * C979 - C3394 * C974) *
              C2173 +
          ((C2386 + C2385) * C976 + (C2388 + C2387) * C971 -
           (C2390 + C2389) * C977 - (C2392 + C2391) * C972 +
           (C2393 + C2394) * C978 + (C2395 + C2396) * C973 -
           (C3403 + C3404) * C979 - (C3405 + C3406) * C974) *
              C2174 +
          (C2409 * C976 + C2410 * C971 - C3393 * C977 - C3394 * C972 +
           (C3404 + C3403) * C978 + (C3406 + C3405) * C973 -
           (C2177 * C3384 + C50615 * C3386 + C2176 * C3385 + C2171 * C3387) *
               C979 -
           (C2177 * C3388 + C50615 * C3390 + C2176 * C3389 + C2171 * C3391) *
               C974) *
              C2175) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
            (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C903 + C2410 * C898 - C3393 * C904 - C3394 * C50705) *
               C2175) *
              C50767 * C50635 * C394 +
          (((C3125 + C3126) * C904 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C898 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C903) +
            (C3127 + C3128) * C50705) *
               C2173 +
           ((C3129 + C3130) * C904 -
            ((C3128 + C3127) * C898 + (C3126 + C3125) * C903) +
            (C3131 + C3132) * C50705) *
               C2174 +
           ((C2176 * C3080 + C2171 * C3083 + C2177 * C3081 + C50615 * C3084) *
                C904 -
            ((C3132 + C3131) * C898 + (C3130 + C3129) * C903) +
            (C2176 * C3085 + C2171 * C3089 + C2177 * C3086 + C50615 * C3090) *
                C50705) *
               C2175) *
              C50767 * C50635 * C395 +
          (((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C903 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C898 -
            (C3577 + C3578) * C904 - (C3579 + C3580) * C50705) *
               C2173 +
           ((C3578 + C3577) * C903 + (C3580 + C3579) * C898 -
            (C3581 + C3582) * C904 - (C3583 + C3584) * C50705) *
               C2174 +
           ((C3582 + C3581) * C903 + (C3584 + C3583) * C898 -
            (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
                C904 -
            (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
                C50705) *
               C2175) *
              C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C903 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C898 -
            (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
             C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                C904 -
            (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
             C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                C50705) *
               C50755 * C50767 * C50888 +
           ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
             C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
                C904 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C898 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C903) +
            (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
             C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50897 +
          (((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
             C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
                C904 -
            ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
              C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                 C898 +
             (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
              C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                 C903) +
            (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
             C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
                C50705) *
               C50755 * C50767 * C50888 +
           ((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C903 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C898 -
            (C120 * C784 + C108 * C793 + C119 * C783 + C107 * C788 +
             C118 * C782 + C106 * C787 + C117 * C781 + C105 * C786) *
                C904 -
            (C120 * C794 + C108 * C799 + C119 * C792 + C107 * C798 +
             C118 * C791 + C106 * C797 + C117 * C790 + C105 * C796) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C903 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C898 -
             (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
                C2173 +
            ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
             (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
                C2174 +
            (C2409 * C903 + C2410 * C898 - C3393 * C904 - C3394 * C50705) *
                C2175) *
               C50767 * C50888 +
           (((C2397 + C2398) * C904 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C898 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C903) +
             (C2399 + C2400) * C50705) *
                C2173 +
            ((C2402 + C2401) * C904 -
             ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
             (C2404 + C2403) * C50705) *
                C2174 +
            ((C2406 + C2405) * C904 - (C2412 * C898 + C2411 * C903) +
             (C2408 + C2407) * C50705) *
                C2175) *
               C50767 * C50640) *
              C50897 +
          ((((C3125 + C3126) * C904 -
             ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                  C898 +
              (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                  C903) +
             (C3127 + C3128) * C50705) *
                C2173 +
            ((C3129 + C3130) * C904 -
             ((C3128 + C3127) * C898 + (C3126 + C3125) * C903) +
             (C3131 + C3132) * C50705) *
                C2174 +
            ((C2176 * C3080 + C2171 * C3083 + C2177 * C3081 + C50615 * C3084) *
                 C904 -
             ((C3132 + C3131) * C898 + (C3130 + C3129) * C903) +
             (C2176 * C3085 + C2171 * C3089 + C2177 * C3086 + C50615 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C50888 +
           (((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C903 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C898 -
             (C3133 + C3134) * C904 - (C3135 + C3136) * C50705) *
                C2173 +
            ((C3134 + C3133) * C903 + (C3136 + C3135) * C898 -
             (C3137 + C3138) * C904 - (C3139 + C3140) * C50705) *
                C2174 +
            ((C3138 + C3137) * C903 + (C3140 + C3139) * C898 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C904 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C903 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C898 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C904 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C900 +
          ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
            C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
               C904 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C898 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C903) +
           (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
            C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
               C50705) *
              C50755 * C50767 * C901 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C903 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C898 -
           (C120 * C542 + C108 * C543 + C119 * C264 + C107 * C282 +
            C118 * C256 + C106 * C266 + C117 * C257 + C105 * C267) *
               C904 -
           (C120 * C544 + C108 * C545 + C119 * C283 + C107 * C294 +
            C118 * C270 + C106 * C286 + C117 * C271 + C105 * C287) *
               C50705) *
              C50755 * C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 + C119 * C124 +
           C107 * C131 + C120 * C125 + C108 * C132) *
              C976 +
          (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 + C119 * C135 +
           C107 * C145 + C120 * C136 + C108 * C146) *
              C971 -
          (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 + C118 * C258 +
           C106 * C268 + C117 * C259 + C105 * C269) *
              C977 -
          (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 + C118 * C272 +
           C106 * C288 + C117 * C273 + C105 * C289) *
              C972 +
          (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 + C119 * C262 +
           C107 * C276 + C120 * C263 + C108 * C277) *
              C978 +
          (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 + C119 * C280 +
           C107 * C292 + C120 * C281 + C108 * C293) *
              C973 -
          (C120 * C980 + C108 * C984 + C119 * C981 + C107 * C985 + C118 * C982 +
           C106 * C986 + C117 * C983 + C105 * C987) *
              C979 -
          (C120 * C988 + C108 * C992 + C119 * C989 + C107 * C993 + C118 * C990 +
           C106 * C994 + C117 * C991 + C105 * C995) *
              C974) *
         C50755 * C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C903 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C898 -
            (C2385 + C2386) * C904 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C903 + (C2388 + C2387) * C898 -
            (C2390 + C2389) * C904 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C903 + C2410 * C898 - (C2394 + C2393) * C904 -
            (C2396 + C2395) * C50705) *
               C2175) *
              C50767 * C900 +
          (((C2397 + C2398) * C904 -
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C898 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C903) +
            (C2399 + C2400) * C50705) *
               C2173 +
           ((C2402 + C2401) * C904 -
            ((C2400 + C2399) * C898 + (C2398 + C2397) * C903) +
            (C2404 + C2403) * C50705) *
               C2174 +
           ((C2406 + C2405) * C904 - (C2412 * C898 + C2411 * C903) +
            (C2408 + C2407) * C50705) *
               C2175) *
              C50767 * C901 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                C903 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                C898 -
            (C2733 + C2734) * C904 - (C2735 + C2736) * C50705) *
               C2173 +
           ((C2734 + C2733) * C903 + (C2736 + C2735) * C898 -
            (C2737 + C2738) * C904 - (C2739 + C2740) * C50705) *
               C2174 +
           ((C2738 + C2737) * C903 + (C2740 + C2739) * C898 -
            (C2177 * C980 + C50615 * C984 + C2176 * C981 + C2171 * C985) *
                C904 -
            (C2177 * C988 + C50615 * C992 + C2176 * C989 + C2171 * C993) *
                C50705) *
               C2175) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) * C976 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) * C971 -
           (C2385 + C2386) * C977 - (C2387 + C2388) * C972 + C2409 * C978 +
           C2410 * C973 - C3393 * C979 - C3394 * C974) *
              C2173 +
          ((C2386 + C2385) * C976 + (C2388 + C2387) * C971 -
           (C2390 + C2389) * C977 - (C2392 + C2391) * C972 +
           (C2393 + C2394) * C978 + (C2395 + C2396) * C973 -
           (C3403 + C3404) * C979 - (C3405 + C3406) * C974) *
              C2174 +
          (C2409 * C976 + C2410 * C971 - C3393 * C977 - C3394 * C972 +
           (C3404 + C3403) * C978 + (C3406 + C3405) * C973 -
           (C2177 * C3384 + C50615 * C3386 + C2176 * C3385 + C2171 * C3387) *
               C979 -
           (C2177 * C3388 + C50615 * C3390 + C2176 * C3389 + C2171 * C3391) *
               C974) *
              C2175) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C540 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50896 -
            (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
             C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
                C541 -
            (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
             C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
                C50705) *
               C50755 * C50767 * C50888 +
           ((C117 * C258 + C105 * C268 + C118 * C257 + C106 * C267 +
             C119 * C256 + C107 * C266 + C120 * C264 + C108 * C282) *
                C541 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50896 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C540) +
            (C117 * C272 + C105 * C288 + C118 * C271 + C106 * C287 +
             C119 * C270 + C107 * C286 + C120 * C283 + C108 * C294) *
                C50705) *
               C50755 * C50767 * C50640) *
              C1558 +
          (((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
             C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
                C541 -
            ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
              C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                 C50896 +
             (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
              C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                 C540) +
            (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
             C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
                C50705) *
               C50755 * C50767 * C50888 +
           ((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C540 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50896 -
            (C120 * C784 + C108 * C793 + C119 * C783 + C107 * C788 +
             C118 * C782 + C106 * C787 + C117 * C781 + C105 * C786) *
                C541 -
            (C120 * C794 + C108 * C799 + C119 * C792 + C107 * C798 +
             C118 * C791 + C106 * C797 + C117 * C790 + C105 * C796) *
                C50705) *
               C50755 * C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C540 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50896 -
             (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
                C2173 +
            ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
             (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
                C2174 +
            (C2409 * C540 + C2410 * C50896 - C3393 * C541 - C3394 * C50705) *
                C2175) *
               C50767 * C50888 +
           (((C2397 + C2398) * C541 -
             ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                  C50896 +
              (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                  C540) +
             (C2399 + C2400) * C50705) *
                C2173 +
            ((C2402 + C2401) * C541 -
             ((C2400 + C2399) * C50896 + (C2398 + C2397) * C540) +
             (C2404 + C2403) * C50705) *
                C2174 +
            ((C2406 + C2405) * C541 - (C2412 * C50896 + C2411 * C540) +
             (C2408 + C2407) * C50705) *
                C2175) *
               C50767 * C50640) *
              C1558 +
          ((((C3125 + C3126) * C541 -
             ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                  C50896 +
              (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                  C540) +
             (C3127 + C3128) * C50705) *
                C2173 +
            ((C3129 + C3130) * C541 -
             ((C3128 + C3127) * C50896 + (C3126 + C3125) * C540) +
             (C3131 + C3132) * C50705) *
                C2174 +
            ((C4090 + C4089) * C541 - (C4080 * C50896 + C4079 * C540) +
             (C4092 + C4091) * C50705) *
                C2175) *
               C50767 * C50888 +
           (((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C540 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50896 -
             (C3133 + C3134) * C541 - (C3135 + C3136) * C50705) *
                C2173 +
            ((C3134 + C3133) * C540 + (C3136 + C3135) * C50896 -
             (C3137 + C3138) * C541 - (C3139 + C3140) * C50705) *
                C2174 +
            ((C3138 + C3137) * C540 + (C3140 + C3139) * C50896 -
             (C2177 * C3082 + C50615 * C3087 + C2176 * C3081 + C2171 * C3084) *
                 C541 -
             (C2177 * C3088 + C50615 * C3091 + C2176 * C3086 + C2171 * C3090) *
                 C50705) *
                C2175) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C540 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50896 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C541 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C50705) *
              C50755 * C50767 * C50635 * C50943 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C541 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50896 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C540) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C50705) *
              C50755 * C50767 * C50635 * C50944 +
          ((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
            C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
               C540 +
           (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
            C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
               C50896 -
           (C120 * C1094 + C108 * C1098 + C119 * C1095 + C107 * C1099 +
            C118 * C1096 + C106 * C1100 + C117 * C1097 + C105 * C1101) *
               C541 -
           (C120 * C1102 + C108 * C1106 + C119 * C1103 + C107 * C1107 +
            C118 * C1104 + C106 * C1108 + C117 * C1105 + C105 * C1109) *
               C50705) *
              C50755 * C50767 * C50635 * C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C540 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50896 -
            (C2385 + C2386) * C541 - (C2387 + C2388) * C50705) *
               C2173 +
           ((C2386 + C2385) * C540 + (C2388 + C2387) * C50896 -
            (C2390 + C2389) * C541 - (C2392 + C2391) * C50705) *
               C2174 +
           (C2409 * C540 + C2410 * C50896 - C3393 * C541 - C3394 * C50705) *
               C2175) *
              C50767 * C50635 * C50943 +
          (((C3125 + C3126) * C541 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50896 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C540) +
            (C3127 + C3128) * C50705) *
               C2173 +
           ((C3129 + C3130) * C541 -
            ((C3128 + C3127) * C50896 + (C3126 + C3125) * C540) +
            (C3131 + C3132) * C50705) *
               C2174 +
           ((C4090 + C4089) * C541 - (C4080 * C50896 + C4079 * C540) +
            (C4092 + C4091) * C50705) *
               C2175) *
              C50767 * C50635 * C50944 +
          (((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C540 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C50896 -
            (C3577 + C3578) * C541 - (C3579 + C3580) * C50705) *
               C2173 +
           ((C3578 + C3577) * C540 + (C3580 + C3579) * C50896 -
            (C3581 + C3582) * C541 - (C3583 + C3584) * C50705) *
               C2174 +
           ((C3582 + C3581) * C540 + (C3584 + C3583) * C50896 -
            (C2177 * C3552 + C50615 * C3554 + C2176 * C3553 + C2171 * C3555) *
                C541 -
            (C2177 * C3556 + C50615 * C3558 + C2176 * C3557 + C2171 * C3559) *
                C50705) *
               C2175) *
              C50767 * C50635 * C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C248 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C254 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C249 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C255 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C250) *
              C50755 * C50767 * C50635 * C1558 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C254 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C248 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C253) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C249 -
           (C120 * C1444 + C108 * C1448 + C119 * C1445 + C107 * C1449 +
            C118 * C1446 + C106 * C1450 + C117 * C1447 + C105 * C1451) *
               C255 -
           (C120 * C1452 + C108 * C1456 + C119 * C1453 + C107 * C1457 +
            C118 * C1454 + C106 * C1458 + C117 * C1455 + C105 * C1459) *
               C250) *
              C50755 * C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C900 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C901 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50653) *
               C50755 * C50767 * C902) *
              C1558 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C901 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C900 -
           ((C120 * C647 + C108 * C649 + C119 * C414 + C107 * C430 +
             C118 * C413 + C106 * C429 + C117 * C412 + C105 * C428) *
                C50653 +
            (C120 * C646 + C108 * C648 + C119 * C400 + C107 * C410 +
             C118 * C399 + C106 * C409 + C117 * C398 + C105 * C408) *
                C121) *
               C50755 * C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50653) *
              C50755 * C50767 * C50635 * C1724 -
          ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
            C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
               C50653 +
           (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
            C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
               C121) *
              C50755 * C50767 * C50635 * C1725 +
          ((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
            C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
               C121 +
           (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
            C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
               C50653) *
              C50755 * C50767 * C50635 * C1726 -
          ((C120 * C1732 + C108 * C1740 + C119 * C1733 + C107 * C1741 +
            C118 * C1734 + C106 * C1742 + C117 * C1735 + C105 * C1743) *
               C50653 +
           (C120 * C1728 + C108 * C1736 + C119 * C1729 + C107 * C1737 +
            C118 * C1730 + C106 * C1738 + C117 * C1731 + C105 * C1739) *
               C121) *
              C50755 * C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C900 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C901 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C2173 +
            ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C2174 +
            ((C2738 + C2737) * C121 + (C2740 + C2739) * C50653) * C2175) *
               C50767 * C902) *
              C1558 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C3134 + C3133) * C121 + (C3136 + C3135) * C50653) * C2174 +
            ((C3138 + C3137) * C121 + (C3140 + C3139) * C50653) * C2175) *
               C50767 * C901 -
           ((C4080 * C50653 + C4079 * C121) * C2175 +
            ((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C900 -
           (((C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50653 +
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C121) *
                C2175 +
            ((C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                 C50653 +
             (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                 C121) *
                C2174 +
            ((C2177 * C413 + C50615 * C429 + C2176 * C412 + C2171 * C428) *
                 C50653 +
             (C2177 * C399 + C50615 * C409 + C2176 * C398 + C2171 * C408) *
                 C121) *
                C2173) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C2173 +
           ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
            (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
            (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
               C2174 +
           (C2409 * C253 + C2410 * C248 - C3393 * C254 - C3394 * C249 +
            (C3404 + C3403) * C255 + (C3406 + C3405) * C250) *
               C2175) *
              C50767 * C50635 * C1558 +
          (((C3125 + C3126) * C254 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C248 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C253) +
            (C3127 + C3128) * C249 - C4079 * C255 - C4080 * C250) *
               C2173 +
           ((C3129 + C3130) * C254 -
            ((C3128 + C3127) * C248 + (C3126 + C3125) * C253) +
            (C3131 + C3132) * C249 - (C4089 + C4090) * C255 -
            (C4091 + C4092) * C250) *
               C2174 +
           ((C4090 + C4089) * C254 - (C4080 * C248 + C4079 * C253) +
            (C4092 + C4091) * C249 -
            (C2177 * C4070 + C50615 * C4072 + C2176 * C4071 + C2171 * C4073) *
                C255 -
            (C2177 * C4074 + C50615 * C4076 + C2176 * C4075 + C2171 * C4077) *
                C250) *
               C2175) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C50653) *
               C2173 +
           ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
           (C2409 * C121 + C2410 * C50653) * C2175) *
              C50767 * C50635 * C1724 -
          ((C4080 * C50653 + C4079 * C121) * C2175 +
           ((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C2174 +
           ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                C50653 +
            (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                C121) *
               C2173) *
              C50767 * C50635 * C1725 +
          (((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                C121 +
            (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                C50653) *
               C2173 +
           ((C3578 + C3577) * C121 + (C3580 + C3579) * C50653) * C2174 +
           ((C3582 + C3581) * C121 + (C3584 + C3583) * C50653) * C2175) *
              C50767 * C50635 * C1726 -
          (((C2177 * C4486 + C50615 * C4494 + C2176 * C4487 + C2171 * C4495) *
                C50653 +
            (C2177 * C4482 + C50615 * C4488 + C2176 * C4483 + C2171 * C4489) *
                C121) *
               C2175 +
           ((C2177 * C4490 + C50615 * C4496 + C2176 * C4491 + C2171 * C4497) *
                C50653 +
            (C2177 * C4484 + C50615 * C4492 + C2176 * C4485 + C2171 * C4493) *
                C121) *
               C2174 +
           ((C2177 * C1734 + C50615 * C1742 + C2176 * C1735 + C2171 * C1743) *
                C50653 +
            (C2177 * C1730 + C50615 * C1738 + C2176 * C1731 + C2171 * C1739) *
                C121) *
               C2173) *
              C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C50888 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C50640) *
              C50943 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C50640 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C50888) *
              C50944 +
          (((C117 * C402 + C105 * C417 + C118 * C403 + C106 * C418 +
             C119 * C404 + C107 * C419 + C120 * C405 + C108 * C420) *
                C121 +
            (C117 * C421 + C105 * C432 + C118 * C422 + C106 * C433 +
             C119 * C423 + C107 * C434 + C120 * C424 + C108 * C435) *
                C50653) *
               C50755 * C50767 * C50888 -
           ((C120 * C425 + C108 * C436 + C119 * C424 + C107 * C435 +
             C118 * C423 + C106 * C434 + C117 * C422 + C105 * C433) *
                C50653 +
            (C120 * C406 + C108 * C426 + C119 * C405 + C107 * C420 +
             C118 * C404 + C106 * C419 + C117 * C403 + C105 * C418) *
                C121) *
               C50755 * C50767 * C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C50888 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C50640) *
              C50943 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C3134 + C3133) * C121 + (C3136 + C3135) * C50653) * C2174 +
            ((C3138 + C3137) * C121 + (C3140 + C3139) * C50653) * C2175) *
               C50767 * C50640 -
           ((C4080 * C50653 + C4079 * C121) * C2175 +
            ((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C50888) *
              C50944 +
          ((((C2176 * C402 + C2171 * C417 + C2177 * C403 + C50615 * C418) *
                 C121 +
             (C2176 * C421 + C2171 * C432 + C2177 * C422 + C50615 * C433) *
                 C50653) *
                C2173 +
            ((C3578 + C3577) * C121 + (C3580 + C3579) * C50653) * C2174 +
            ((C3582 + C3581) * C121 + (C3584 + C3583) * C50653) * C2175) *
               C50767 * C50888 -
           (((C2177 * C2565 + C50615 * C2569 + C2176 * C2564 + C2171 * C2568) *
                 C50653 +
             (C2177 * C2560 + C50615 * C2566 + C2176 * C2559 + C2171 * C2562) *
                 C121) *
                C2175 +
            ((C2177 * C1103 + C50615 * C1107 + C2176 * C1104 + C2171 * C1108) *
                 C50653 +
             (C2177 * C1095 + C50615 * C1099 + C2176 * C1096 + C2171 * C1100) *
                 C121) *
                C2174 +
            ((C2177 * C423 + C50615 * C434 + C2176 * C422 + C2171 * C433) *
                 C50653 +
             (C2177 * C404 + C50615 * C419 + C2176 * C403 + C2171 * C418) *
                 C121) *
                C2173) *
               C50767 * C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50653) *
               C50755 * C50767 * C900 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50653 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50755 * C50767 * C901 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50653) *
               C50755 * C50767 * C902) *
              C1558 +
          (((C117 * C397 + C105 * C407 + C118 * C398 + C106 * C408 +
             C119 * C399 + C107 * C409 + C120 * C400 + C108 * C410) *
                C121 +
            (C117 * C411 + C105 * C427 + C118 * C412 + C106 * C428 +
             C119 * C413 + C107 * C429 + C120 * C414 + C108 * C430) *
                C50653) *
               C50755 * C50767 * C901 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C50653 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C121) *
               C50755 * C50767 * C900 -
           ((C120 * C647 + C108 * C649 + C119 * C414 + C107 * C430 +
             C118 * C413 + C106 * C429 + C117 * C412 + C105 * C428) *
                C50653 +
            (C120 * C646 + C108 * C648 + C119 * C400 + C107 * C410 +
             C118 * C399 + C106 * C409 + C117 * C398 + C105 * C408) *
                C121) *
               C50755 * C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C248 -
           (C120 * C256 + C108 * C266 + C119 * C257 + C107 * C267 +
            C118 * C258 + C106 * C268 + C117 * C259 + C105 * C269) *
               C254 -
           (C120 * C270 + C108 * C286 + C119 * C271 + C107 * C287 +
            C118 * C272 + C106 * C288 + C117 * C273 + C105 * C289) *
               C249 +
           (C117 * C260 + C105 * C274 + C118 * C261 + C106 * C275 +
            C119 * C262 + C107 * C276 + C120 * C263 + C108 * C277) *
               C255 +
           (C117 * C278 + C105 * C290 + C118 * C279 + C106 * C291 +
            C119 * C280 + C107 * C292 + C120 * C281 + C108 * C293) *
               C250) *
              C50755 * C50767 * C50635 * C1558 +
          ((C117 * C780 + C105 * C785 + C118 * C781 + C106 * C786 +
            C119 * C782 + C107 * C787 + C120 * C783 + C108 * C788) *
               C254 -
           ((C120 * C413 + C108 * C429 + C119 * C412 + C107 * C428 +
             C118 * C411 + C106 * C427 + C117 * C415 + C105 * C431) *
                C248 +
            (C120 * C399 + C108 * C409 + C119 * C398 + C107 * C408 +
             C118 * C397 + C106 * C407 + C117 * C401 + C105 * C416) *
                C253) +
           (C117 * C789 + C105 * C795 + C118 * C790 + C106 * C796 +
            C119 * C791 + C107 * C797 + C120 * C792 + C108 * C798) *
               C249 -
           (C120 * C1444 + C108 * C1448 + C119 * C1445 + C107 * C1449 +
            C118 * C1446 + C106 * C1450 + C117 * C1447 + C105 * C1451) *
               C255 -
           (C120 * C1452 + C108 * C1456 + C119 * C1453 + C107 * C1457 +
            C118 * C1454 + C106 * C1458 + C117 * C1455 + C105 * C1459) *
               C250) *
              C50755 * C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                 C50653) *
                C2173 +
            ((C2386 + C2385) * C121 + (C2388 + C2387) * C50653) * C2174 +
            (C2409 * C121 + C2410 * C50653) * C2175) *
               C50767 * C900 -
           ((C2412 * C50653 + C2411 * C121) * C2175 +
            ((C2400 + C2399) * C50653 + (C2398 + C2397) * C121) * C2174 +
            ((C2177 * C135 + C50615 * C145 + C2176 * C134 + C2171 * C144) *
                 C50653 +
             (C2177 * C124 + C50615 * C131 + C2176 * C123 + C2171 * C130) *
                 C121) *
                C2173) *
               C50767 * C901 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C50615 * C132) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C50615 * C146) *
                 C50653) *
                C2173 +
            ((C2734 + C2733) * C121 + (C2736 + C2735) * C50653) * C2174 +
            ((C2738 + C2737) * C121 + (C2740 + C2739) * C50653) * C2175) *
               C50767 * C902) *
              C1558 +
          ((((C2176 * C397 + C2171 * C407 + C2177 * C398 + C50615 * C408) *
                 C121 +
             (C2176 * C411 + C2171 * C427 + C2177 * C412 + C50615 * C428) *
                 C50653) *
                C2173 +
            ((C3134 + C3133) * C121 + (C3136 + C3135) * C50653) * C2174 +
            ((C3138 + C3137) * C121 + (C3140 + C3139) * C50653) * C2175) *
               C50767 * C901 -
           ((C4080 * C50653 + C4079 * C121) * C2175 +
            ((C3128 + C3127) * C50653 + (C3126 + C3125) * C121) * C2174 +
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C50653 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C121) *
                C2173) *
               C50767 * C900 -
           (((C2177 * C1452 + C50615 * C1456 + C2176 * C1453 + C2171 * C1457) *
                 C50653 +
             (C2177 * C1444 + C50615 * C1448 + C2176 * C1445 + C2171 * C1449) *
                 C121) *
                C2175 +
            ((C2177 * C792 + C50615 * C798 + C2176 * C791 + C2171 * C797) *
                 C50653 +
             (C2177 * C783 + C50615 * C788 + C2176 * C782 + C2171 * C787) *
                 C121) *
                C2174 +
            ((C2177 * C413 + C50615 * C429 + C2176 * C412 + C2171 * C428) *
                 C50653 +
             (C2177 * C399 + C50615 * C409 + C2176 * C398 + C2171 * C408) *
                 C121) *
                C2173) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C50615 * C130) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C50615 * C144) *
                C248 -
            (C2385 + C2386) * C254 - (C2387 + C2388) * C249 + C2409 * C255 +
            C2410 * C250) *
               C2173 +
           ((C2386 + C2385) * C253 + (C2388 + C2387) * C248 -
            (C2390 + C2389) * C254 - (C2392 + C2391) * C249 +
            (C2393 + C2394) * C255 + (C2395 + C2396) * C250) *
               C2174 +
           (C2409 * C253 + C2410 * C248 - C3393 * C254 - C3394 * C249 +
            (C3404 + C3403) * C255 + (C3406 + C3405) * C250) *
               C2175) *
              C50767 * C50635 * C1558 +
          (((C3125 + C3126) * C254 -
            ((C2177 * C411 + C50615 * C427 + C2176 * C415 + C2171 * C431) *
                 C248 +
             (C2177 * C397 + C50615 * C407 + C2176 * C401 + C2171 * C416) *
                 C253) +
            (C3127 + C3128) * C249 - C4079 * C255 - C4080 * C250) *
               C2173 +
           ((C3129 + C3130) * C254 -
            ((C3128 + C3127) * C248 + (C3126 + C3125) * C253) +
            (C3131 + C3132) * C249 - (C4089 + C4090) * C255 -
            (C4091 + C4092) * C250) *
               C2174 +
           ((C4090 + C4089) * C254 - (C4080 * C248 + C4079 * C253) +
            (C4092 + C4091) * C249 -
            (C2177 * C4070 + C50615 * C4072 + C2176 * C4071 + C2171 * C4073) *
                C255 -
            (C2177 * C4074 + C50615 * C4076 + C2176 * C4075 + C2171 * C4077) *
                C250) *
               C2175) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C540 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50896 -
            (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
               C50945 +
           ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
            (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
               C50946 +
           (C24878 * C540 + C24879 * C50896 - (C24863 + C24862) * C541 -
            (C24865 + C24864) * C50705) *
               C24656) *
              C50767 * C50939 +
          (((C24866 + C24867) * C541 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50896 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C540) +
            (C24868 + C24869) * C50705) *
               C50945 +
           ((C24871 + C24870) * C541 -
            ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
            (C24873 + C24872) * C50705) *
               C50946 +
           ((C24875 + C24874) * C541 - (C24881 * C50896 + C24880 * C540) +
            (C24877 + C24876) * C50705) *
               C24656) *
              C50767 * C50940 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C540 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C50896 -
            (C25190 + C25191) * C541 - (C25192 + C25193) * C50705) *
               C50945 +
           ((C25191 + C25190) * C540 + (C25193 + C25192) * C50896 -
            (C25194 + C25195) * C541 - (C25196 + C25197) * C50705) *
               C50946 +
           ((C25195 + C25194) * C540 + (C25197 + C25196) * C50896 -
            (C49761 * C980 + C50615 * C984 + C49768 * C981 + C50881 * C985) *
                C541 -
            (C49761 * C988 + C50615 * C992 + C49768 * C989 + C50881 * C993) *
                C50705) *
               C24656) *
              C50767 * C539) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C540 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50896 -
             (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                C50945 +
            ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
             (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                C50946 +
            (C24878 * C540 + C24879 * C50896 - (C24863 + C24862) * C541 -
             (C24865 + C24864) * C50705) *
                C24656) *
               C50767 * C251 +
           (((C24866 + C24867) * C541 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50896 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C540) +
             (C24868 + C24869) * C50705) *
                C50945 +
            ((C24871 + C24870) * C541 -
             ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
             (C24873 + C24872) * C50705) *
                C50946 +
            ((C24875 + C24874) * C541 - (C24881 * C50896 + C24880 * C540) +
             (C24877 + C24876) * C50705) *
                C24656) *
               C50767 * C50640) *
              C50897 +
          ((((C25570 + C25571) * C541 -
             ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                  C50896 +
              (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                  C540) +
             (C25572 + C25573) * C50705) *
                C50945 +
            ((C25574 + C25575) * C541 -
             ((C25573 + C25572) * C50896 + (C25571 + C25570) * C540) +
             (C25576 + C25577) * C50705) *
                C50946 +
            ((C49768 * C3080 + C50881 * C3083 + C49761 * C3081 +
              C50615 * C3084) *
                 C541 -
             ((C25577 + C25576) * C50896 + (C25575 + C25574) * C540) +
             (C49768 * C3085 + C50881 * C3089 + C49761 * C3086 +
              C50615 * C3090) *
                 C50705) *
                C24656) *
               C50767 * C251 +
           (((C49768 * C397 + C50881 * C407 + C49761 * C398 + C50615 * C408) *
                 C540 +
             (C49768 * C411 + C50881 * C427 + C49761 * C412 + C50615 * C428) *
                 C50896 -
             (C25578 + C25579) * C541 - (C25580 + C25581) * C50705) *
                C50945 +
            ((C25579 + C25578) * C540 + (C25581 + C25580) * C50896 -
             (C25582 + C25583) * C541 - (C25584 + C25585) * C50705) *
                C50946 +
            ((C25583 + C25582) * C540 + (C25585 + C25584) * C50896 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C541 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C50705) *
                C24656) *
               C50767 * C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C253 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C248 -
            (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
            C24878 * C255 + C24879 * C250) *
               C50945 +
           ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
            (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
            (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
               C50946 +
           (C24878 * C253 + C24879 * C248 - (C24863 + C24862) * C254 -
            (C24865 + C24864) * C249 +
            (C49768 * C2324 + C50881 * C2327 + C49761 * C2325 +
             C50615 * C2328) *
                C255 +
            (C49768 * C2329 + C50881 * C2333 + C49761 * C2330 +
             C50615 * C2334) *
                C250) *
               C24656) *
              C50767 * C251 +
          (((C24866 + C24867) * C254 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C248 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C253) +
            (C24868 + C24869) * C249 - C24880 * C255 - C24881 * C250) *
               C50945 +
           ((C24871 + C24870) * C254 -
            ((C24869 + C24868) * C248 + (C24867 + C24866) * C253) +
            (C24873 + C24872) * C249 - (C24874 + C24875) * C255 -
            (C24876 + C24877) * C250) *
               C50946 +
           ((C24875 + C24874) * C254 - (C24881 * C248 + C24880 * C253) +
            (C24877 + C24876) * C249 -
            (C49761 * C2326 + C50615 * C2331 + C49768 * C2325 +
             C50881 * C2328) *
                C255 -
            (C49761 * C2332 + C50615 * C2335 + C49768 * C2330 +
             C50881 * C2334) *
                C250) *
               C24656) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C121 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50653) *
               C50945 +
           ((C49768 * C259 + C50881 * C269 + C49761 * C258 + C50615 * C268) *
                C121 +
            (C49768 * C273 + C50881 * C289 + C49761 * C272 + C50615 * C288) *
                C50653) *
               C50946 +
           ((C49768 * C260 + C50881 * C274 + C49761 * C261 + C50615 * C275) *
                C121 +
            (C49768 * C278 + C50881 * C290 + C49761 * C279 + C50615 * C291) *
                C50653) *
               C24656) *
              C50767 * C112 -
          (((C49761 * C280 + C50615 * C292 + C49768 * C279 + C50881 * C291) *
                C50653 +
            (C49761 * C262 + C50615 * C276 + C49768 * C261 + C50881 * C275) *
                C121) *
               C24656 +
           ((C49761 * C271 + C50615 * C287 + C49768 * C272 + C50881 * C288) *
                C50653 +
            (C49761 * C257 + C50615 * C267 + C49768 * C258 + C50881 * C268) *
                C121) *
               C50946 +
           ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                C50653 +
            (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                C121) *
               C50945) *
              C50767 * C113 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C121 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C50653) *
               C50945 +
           ((C49768 * C257 + C50881 * C267 + C49761 * C256 + C50615 * C266) *
                C121 +
            (C49768 * C271 + C50881 * C287 + C49761 * C270 + C50615 * C286) *
                C50653) *
               C50946 +
           ((C49768 * C262 + C50881 * C276 + C49761 * C263 + C50615 * C277) *
                C121 +
            (C49768 * C280 + C50881 * C292 + C49761 * C281 + C50615 * C293) *
                C50653) *
               C24656) *
              C50767 * C114 -
          (((C49761 * C285 + C50615 * C295 + C49768 * C281 + C50881 * C293) *
                C50653 +
            (C49761 * C265 + C50615 * C284 + C49768 * C263 + C50881 * C277) *
                C121) *
               C24656 +
           ((C49761 * C283 + C50615 * C294 + C49768 * C270 + C50881 * C286) *
                C50653 +
            (C49761 * C264 + C50615 * C282 + C49768 * C256 + C50881 * C266) *
                C121) *
               C50946 +
           ((C49761 * C137 + C50615 * C147 + C49768 * C136 + C50881 * C146) *
                C50653 +
            (C49761 * C126 + C50615 * C138 + C49768 * C125 + C50881 * C132) *
                C121) *
               C50945) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50945 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50946 +
            (C24878 * C121 + C24879 * C50653) * C24656) *
               C50767 * C251 -
           ((C24881 * C50653 + C24880 * C121) * C24656 +
            ((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50946 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50945) *
               C50767 * C50640) *
              C394 +
          ((((C49768 * C397 + C50881 * C407 + C49761 * C398 + C50615 * C408) *
                 C121 +
             (C49768 * C411 + C50881 * C427 + C49761 * C412 + C50615 * C428) *
                 C50653) *
                C50945 +
            ((C49768 * C781 + C50881 * C786 + C49761 * C782 + C50615 * C787) *
                 C121 +
             (C49768 * C790 + C50881 * C796 + C49761 * C791 + C50615 * C797) *
                 C50653) *
                C50946 +
            ((C49768 * C1446 + C50881 * C1450 + C49761 * C1445 +
              C50615 * C1449) *
                 C121 +
             (C49768 * C1454 + C50881 * C1458 + C49761 * C1453 +
              C50615 * C1457) *
                 C50653) *
                C24656) *
               C50767 * C50640 -
           (((C49761 * C1454 + C50615 * C1458 + C49768 * C1455 +
              C50881 * C1459) *
                 C50653 +
             (C49761 * C1446 + C50615 * C1450 + C49768 * C1447 +
              C50881 * C1451) *
                 C121) *
                C24656 +
            ((C49761 * C790 + C50615 * C796 + C49768 * C789 + C50881 * C795) *
                 C50653 +
             (C49761 * C781 + C50615 * C786 + C49768 * C780 + C50881 * C785) *
                 C121) *
                C50946 +
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C50653 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C121) *
                C50945) *
               C50767 * C251) *
              C395 +
          ((((C49768 * C402 + C50881 * C417 + C49761 * C403 + C50615 * C418) *
                 C121 +
             (C49768 * C421 + C50881 * C432 + C49761 * C422 + C50615 * C433) *
                 C50653) *
                C50945 +
            ((C49768 * C1097 + C50881 * C1101 + C49761 * C1096 +
              C50615 * C1100) *
                 C121 +
             (C49768 * C1105 + C50881 * C1109 + C49761 * C1104 +
              C50615 * C1108) *
                 C50653) *
                C50946 +
            ((C49768 * C2558 + C50881 * C2561 + C49761 * C2559 +
              C50615 * C2562) *
                 C121 +
             (C49768 * C2563 + C50881 * C2567 + C49761 * C2564 +
              C50615 * C2568) *
                 C50653) *
                C24656) *
               C50767 * C251 -
           (((C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
              C50881 * C2568) *
                 C50653 +
             (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
              C50881 * C2562) *
                 C121) *
                C24656 +
            ((C49761 * C1103 + C50615 * C1107 + C49768 * C1104 +
              C50881 * C1108) *
                 C50653 +
             (C49761 * C1095 + C50615 * C1099 + C49768 * C1096 +
              C50881 * C1100) *
                 C121) *
                C50946 +
            ((C49761 * C423 + C50615 * C434 + C49768 * C422 + C50881 * C433) *
                 C50653 +
             (C49761 * C404 + C50615 * C419 + C49768 * C403 + C50881 * C418) *
                 C121) *
                C50945) *
               C50767 * C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50945 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50946 +
            (C24878 * C121 + C24879 * C50653) * C24656) *
               C50767 * C50939 -
           ((C24881 * C50653 + C24880 * C121) * C24656 +
            ((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50946 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50945) *
               C50767 * C50940 +
           (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C50945 +
            ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50946 +
            ((C25195 + C25194) * C121 + (C25197 + C25196) * C50653) * C24656) *
               C50767 * C539) *
              C50897 +
          ((((C49768 * C397 + C50881 * C407 + C49761 * C398 + C50615 * C408) *
                 C121 +
             (C49768 * C411 + C50881 * C427 + C49761 * C412 + C50615 * C428) *
                 C50653) *
                C50945 +
            ((C49768 * C781 + C50881 * C786 + C49761 * C782 + C50615 * C787) *
                 C121 +
             (C49768 * C790 + C50881 * C796 + C49761 * C791 + C50615 * C797) *
                 C50653) *
                C50946 +
            ((C49768 * C1446 + C50881 * C1450 + C49761 * C1445 +
              C50615 * C1449) *
                 C121 +
             (C49768 * C1454 + C50881 * C1458 + C49761 * C1453 +
              C50615 * C1457) *
                 C50653) *
                C24656) *
               C50767 * C50940 -
           (((C49761 * C1454 + C50615 * C1458 + C49768 * C1455 +
              C50881 * C1459) *
                 C50653 +
             (C49761 * C1446 + C50615 * C1450 + C49768 * C1447 +
              C50881 * C1451) *
                 C121) *
                C24656 +
            ((C49761 * C790 + C50615 * C796 + C49768 * C789 + C50881 * C795) *
                 C50653 +
             (C49761 * C781 + C50615 * C786 + C49768 * C780 + C50881 * C785) *
                 C121) *
                C50946 +
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C50653 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C121) *
                C50945) *
               C50767 * C50939 -
           (((C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50653 +
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C121) *
                C24656 +
            ((C49761 * C792 + C50615 * C798 + C49768 * C791 + C50881 * C797) *
                 C50653 +
             (C49761 * C783 + C50615 * C788 + C49768 * C782 + C50881 * C787) *
                 C121) *
                C50946 +
            ((C49761 * C413 + C50615 * C429 + C49768 * C412 + C50881 * C428) *
                 C50653 +
             (C49761 * C399 + C50615 * C409 + C49768 * C398 + C50881 * C408) *
                 C121) *
                C50945) *
               C50767 * C539) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C121 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50653) *
               C50945 +
           ((C49768 * C259 + C50881 * C269 + C49761 * C258 + C50615 * C268) *
                C121 +
            (C49768 * C273 + C50881 * C289 + C49761 * C272 + C50615 * C288) *
                C50653) *
               C50946 +
           ((C49768 * C260 + C50881 * C274 + C49761 * C261 + C50615 * C275) *
                C121 +
            (C49768 * C278 + C50881 * C290 + C49761 * C279 + C50615 * C291) *
                C50653) *
               C24656) *
              C50767 * C112 -
          (((C49761 * C280 + C50615 * C292 + C49768 * C279 + C50881 * C291) *
                C50653 +
            (C49761 * C262 + C50615 * C276 + C49768 * C261 + C50881 * C275) *
                C121) *
               C24656 +
           ((C49761 * C271 + C50615 * C287 + C49768 * C272 + C50881 * C288) *
                C50653 +
            (C49761 * C257 + C50615 * C267 + C49768 * C258 + C50881 * C268) *
                C121) *
               C50946 +
           ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                C50653 +
            (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                C121) *
               C50945) *
              C50767 * C113 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C121 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C50653) *
               C50945 +
           ((C49768 * C257 + C50881 * C267 + C49761 * C256 + C50615 * C266) *
                C121 +
            (C49768 * C271 + C50881 * C287 + C49761 * C270 + C50615 * C286) *
                C50653) *
               C50946 +
           ((C49768 * C262 + C50881 * C276 + C49761 * C263 + C50615 * C277) *
                C121 +
            (C49768 * C280 + C50881 * C292 + C49761 * C281 + C50615 * C293) *
                C50653) *
               C24656) *
              C50767 * C114 -
          (((C49761 * C285 + C50615 * C295 + C49768 * C281 + C50881 * C293) *
                C50653 +
            (C49761 * C265 + C50615 * C284 + C49768 * C263 + C50881 * C277) *
                C121) *
               C24656 +
           ((C49761 * C283 + C50615 * C294 + C49768 * C270 + C50881 * C286) *
                C50653 +
            (C49761 * C264 + C50615 * C282 + C49768 * C256 + C50881 * C266) *
                C121) *
               C50946 +
           ((C49761 * C137 + C50615 * C147 + C49768 * C136 + C50881 * C146) *
                C50653 +
            (C49761 * C126 + C50615 * C138 + C49768 * C125 + C50881 * C132) *
                C121) *
               C50945) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C253 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C248 -
            (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
            C24878 * C255 + C24879 * C250) *
               C50945 +
           ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
            (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
            (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
               C50946 +
           (C24878 * C253 + C24879 * C248 - (C24863 + C24862) * C254 -
            (C24865 + C24864) * C249 +
            (C49768 * C2324 + C50881 * C2327 + C49761 * C2325 +
             C50615 * C2328) *
                C255 +
            (C49768 * C2329 + C50881 * C2333 + C49761 * C2330 +
             C50615 * C2334) *
                C250) *
               C24656) *
              C50767 * C251 +
          (((C24866 + C24867) * C254 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C248 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C253) +
            (C24868 + C24869) * C249 - C24880 * C255 - C24881 * C250) *
               C50945 +
           ((C24871 + C24870) * C254 -
            ((C24869 + C24868) * C248 + (C24867 + C24866) * C253) +
            (C24873 + C24872) * C249 - (C24874 + C24875) * C255 -
            (C24876 + C24877) * C250) *
               C50946 +
           ((C24875 + C24874) * C254 - (C24881 * C248 + C24880 * C253) +
            (C24877 + C24876) * C249 -
            (C49761 * C2326 + C50615 * C2331 + C49768 * C2325 +
             C50881 * C2328) *
                C255 -
            (C49761 * C2332 + C50615 * C2335 + C49768 * C2330 +
             C50881 * C2334) *
                C250) *
               C24656) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C1213 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50941 -
            (C24854 + C24855) * C1214 - (C24856 + C24857) * C50942 +
            C24878 * C1215 + C24879 * C1210) *
               C50945 +
           ((C24855 + C24854) * C1213 + (C24857 + C24856) * C50941 -
            (C24859 + C24858) * C1214 - (C24861 + C24860) * C50942 +
            (C24862 + C24863) * C1215 + (C24864 + C24865) * C1210) *
               C50946 +
           (C24878 * C1213 + C24879 * C50941 - C25830 * C1214 -
            C25831 * C50942 + (C25841 + C25840) * C1215 +
            (C25843 + C25842) * C1210) *
               C24656) *
              C50767 * C50888 +
          (((C24866 + C24867) * C1214 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50941 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C1213) +
            (C24868 + C24869) * C50942 - C24880 * C1215 - C24881 * C1210) *
               C50945 +
           ((C24871 + C24870) * C1214 -
            ((C24869 + C24868) * C50941 + (C24867 + C24866) * C1213) +
            (C24873 + C24872) * C50942 - (C24874 + C24875) * C1215 -
            (C24876 + C24877) * C1210) *
               C50946 +
           ((C24875 + C24874) * C1214 - (C24881 * C50941 + C24880 * C1213) +
            (C24877 + C24876) * C50942 -
            (C49761 * C2326 + C50615 * C2331 + C49768 * C2325 +
             C50881 * C2328) *
                C1215 -
            (C49761 * C2332 + C50615 * C2335 + C49768 * C2330 +
             C50881 * C2334) *
                C1210) *
               C24656) *
              C50767 * C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C1213 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50941 -
            (C24854 + C24855) * C1214 - (C24856 + C24857) * C50942 +
            C24878 * C1215 + C24879 * C1210) *
               C50945 +
           ((C24855 + C24854) * C1213 + (C24857 + C24856) * C50941 -
            (C24859 + C24858) * C1214 - (C24861 + C24860) * C50942 +
            (C24862 + C24863) * C1215 + (C24864 + C24865) * C1210) *
               C50946 +
           (C24878 * C1213 + C24879 * C50941 - C25830 * C1214 -
            C25831 * C50942 + (C25841 + C25840) * C1215 +
            (C25843 + C25842) * C1210) *
               C24656) *
              C50767 * C50635 * C50897 +
          (((C25570 + C25571) * C1214 -
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C50941 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C1213) +
            (C25572 + C25573) * C50942 - C26500 * C1215 - C26501 * C1210) *
               C50945 +
           ((C25574 + C25575) * C1214 -
            ((C25573 + C25572) * C50941 + (C25571 + C25570) * C1213) +
            (C25576 + C25577) * C50942 - (C26510 + C26511) * C1215 -
            (C26512 + C26513) * C1210) *
               C50946 +
           ((C26511 + C26510) * C1214 - (C26501 * C50941 + C26500 * C1213) +
            (C26513 + C26512) * C50942 -
            (C49761 * C4070 + C50615 * C4072 + C49768 * C4071 +
             C50881 * C4073) *
                C1215 -
            (C49761 * C4074 + C50615 * C4076 + C49768 * C4075 +
             C50881 * C4077) *
                C1210) *
               C24656) *
              C50767 * C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
               C976 +
           (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
               C971 -
           (C24854 + C24855) * C977 - (C24856 + C24857) * C972 + C24878 * C978 +
           C24879 * C973 - C25830 * C979 - C25831 * C974) *
              C50945 +
          ((C24855 + C24854) * C976 + (C24857 + C24856) * C971 -
           (C24859 + C24858) * C977 - (C24861 + C24860) * C972 +
           (C24862 + C24863) * C978 + (C24864 + C24865) * C973 -
           (C25840 + C25841) * C979 - (C25842 + C25843) * C974) *
              C50946 +
          (C24878 * C976 + C24879 * C971 - C25830 * C977 - C25831 * C972 +
           (C25841 + C25840) * C978 + (C25843 + C25842) * C973 -
           (C49761 * C3384 + C50615 * C3386 + C49768 * C3385 + C50881 * C3387) *
               C979 -
           (C49761 * C3388 + C50615 * C3390 + C49768 * C3389 + C50881 * C3391) *
               C974) *
              C24656) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C903 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C898 -
            (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
               C50945 +
           ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
            (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
               C50946 +
           (C24878 * C903 + C24879 * C898 - (C24863 + C24862) * C904 -
            (C24865 + C24864) * C50705) *
               C24656) *
              C50767 * C900 +
          (((C24866 + C24867) * C904 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C898 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C903) +
            (C24868 + C24869) * C50705) *
               C50945 +
           ((C24871 + C24870) * C904 -
            ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
            (C24873 + C24872) * C50705) *
               C50946 +
           ((C24875 + C24874) * C904 - (C24881 * C898 + C24880 * C903) +
            (C24877 + C24876) * C50705) *
               C24656) *
              C50767 * C901 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C903 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C898 -
            (C25190 + C25191) * C904 - (C25192 + C25193) * C50705) *
               C50945 +
           ((C25191 + C25190) * C903 + (C25193 + C25192) * C898 -
            (C25194 + C25195) * C904 - (C25196 + C25197) * C50705) *
               C50946 +
           ((C25195 + C25194) * C903 + (C25197 + C25196) * C898 -
            (C49761 * C980 + C50615 * C984 + C49768 * C981 + C50881 * C985) *
                C904 -
            (C49761 * C988 + C50615 * C992 + C49768 * C989 + C50881 * C993) *
                C50705) *
               C24656) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C903 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C898 -
            (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
               C50945 +
           ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
            (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
               C50946 +
           (C24878 * C903 + C24879 * C898 - C25830 * C904 - C25831 * C50705) *
               C24656) *
              C50767 * C50635 * C394 +
          (((C25570 + C25571) * C904 -
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C898 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C903) +
            (C25572 + C25573) * C50705) *
               C50945 +
           ((C25574 + C25575) * C904 -
            ((C25573 + C25572) * C898 + (C25571 + C25570) * C903) +
            (C25576 + C25577) * C50705) *
               C50946 +
           ((C49768 * C3080 + C50881 * C3083 + C49761 * C3081 +
             C50615 * C3084) *
                C904 -
            ((C25577 + C25576) * C898 + (C25575 + C25574) * C903) +
            (C49768 * C3085 + C50881 * C3089 + C49761 * C3086 +
             C50615 * C3090) *
                C50705) *
               C24656) *
              C50767 * C50635 * C395 +
          (((C49768 * C402 + C50881 * C417 + C49761 * C403 + C50615 * C418) *
                C903 +
            (C49768 * C421 + C50881 * C432 + C49761 * C422 + C50615 * C433) *
                C898 -
            (C26006 + C26007) * C904 - (C26008 + C26009) * C50705) *
               C50945 +
           ((C26007 + C26006) * C903 + (C26009 + C26008) * C898 -
            (C26010 + C26011) * C904 - (C26012 + C26013) * C50705) *
               C50946 +
           ((C26011 + C26010) * C903 + (C26013 + C26012) * C898 -
            (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 +
             C50881 * C3555) *
                C904 -
            (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 +
             C50881 * C3559) *
                C50705) *
               C24656) *
              C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C903 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C898 -
             (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                C50945 +
            ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
             (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                C50946 +
            (C24878 * C903 + C24879 * C898 - C25830 * C904 - C25831 * C50705) *
                C24656) *
               C50767 * C50888 +
           (((C24866 + C24867) * C904 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C898 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C903) +
             (C24868 + C24869) * C50705) *
                C50945 +
            ((C24871 + C24870) * C904 -
             ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
             (C24873 + C24872) * C50705) *
                C50946 +
            ((C24875 + C24874) * C904 - (C24881 * C898 + C24880 * C903) +
             (C24877 + C24876) * C50705) *
                C24656) *
               C50767 * C50640) *
              C50897 +
          ((((C25570 + C25571) * C904 -
             ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                  C898 +
              (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                  C903) +
             (C25572 + C25573) * C50705) *
                C50945 +
            ((C25574 + C25575) * C904 -
             ((C25573 + C25572) * C898 + (C25571 + C25570) * C903) +
             (C25576 + C25577) * C50705) *
                C50946 +
            ((C49768 * C3080 + C50881 * C3083 + C49761 * C3081 +
              C50615 * C3084) *
                 C904 -
             ((C25577 + C25576) * C898 + (C25575 + C25574) * C903) +
             (C49768 * C3085 + C50881 * C3089 + C49761 * C3086 +
              C50615 * C3090) *
                 C50705) *
                C24656) *
               C50767 * C50888 +
           (((C49768 * C397 + C50881 * C407 + C49761 * C398 + C50615 * C408) *
                 C903 +
             (C49768 * C411 + C50881 * C427 + C49761 * C412 + C50615 * C428) *
                 C898 -
             (C25578 + C25579) * C904 - (C25580 + C25581) * C50705) *
                C50945 +
            ((C25579 + C25578) * C903 + (C25581 + C25580) * C898 -
             (C25582 + C25583) * C904 - (C25584 + C25585) * C50705) *
                C50946 +
            ((C25583 + C25582) * C903 + (C25585 + C25584) * C898 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C904 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C50705) *
                C24656) *
               C50767 * C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C903 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C898 -
            (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
               C50945 +
           ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
            (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
               C50946 +
           (C24878 * C903 + C24879 * C898 - (C24863 + C24862) * C904 -
            (C24865 + C24864) * C50705) *
               C24656) *
              C50767 * C900 +
          (((C24866 + C24867) * C904 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C898 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C903) +
            (C24868 + C24869) * C50705) *
               C50945 +
           ((C24871 + C24870) * C904 -
            ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
            (C24873 + C24872) * C50705) *
               C50946 +
           ((C24875 + C24874) * C904 - (C24881 * C898 + C24880 * C903) +
            (C24877 + C24876) * C50705) *
               C24656) *
              C50767 * C901 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C903 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C898 -
            (C25190 + C25191) * C904 - (C25192 + C25193) * C50705) *
               C50945 +
           ((C25191 + C25190) * C903 + (C25193 + C25192) * C898 -
            (C25194 + C25195) * C904 - (C25196 + C25197) * C50705) *
               C50946 +
           ((C25195 + C25194) * C903 + (C25197 + C25196) * C898 -
            (C49761 * C980 + C50615 * C984 + C49768 * C981 + C50881 * C985) *
                C904 -
            (C49761 * C988 + C50615 * C992 + C49768 * C989 + C50881 * C993) *
                C50705) *
               C24656) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
               C976 +
           (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
               C971 -
           (C24854 + C24855) * C977 - (C24856 + C24857) * C972 + C24878 * C978 +
           C24879 * C973 - C25830 * C979 - C25831 * C974) *
              C50945 +
          ((C24855 + C24854) * C976 + (C24857 + C24856) * C971 -
           (C24859 + C24858) * C977 - (C24861 + C24860) * C972 +
           (C24862 + C24863) * C978 + (C24864 + C24865) * C973 -
           (C25840 + C25841) * C979 - (C25842 + C25843) * C974) *
              C50946 +
          (C24878 * C976 + C24879 * C971 - C25830 * C977 - C25831 * C972 +
           (C25841 + C25840) * C978 + (C25843 + C25842) * C973 -
           (C49761 * C3384 + C50615 * C3386 + C49768 * C3385 + C50881 * C3387) *
               C979 -
           (C49761 * C3388 + C50615 * C3390 + C49768 * C3389 + C50881 * C3391) *
               C974) *
              C24656) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C540 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50896 -
             (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                C50945 +
            ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
             (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                C50946 +
            (C24878 * C540 + C24879 * C50896 - C25830 * C541 -
             C25831 * C50705) *
                C24656) *
               C50767 * C50888 +
           (((C24866 + C24867) * C541 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50896 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C540) +
             (C24868 + C24869) * C50705) *
                C50945 +
            ((C24871 + C24870) * C541 -
             ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
             (C24873 + C24872) * C50705) *
                C50946 +
            ((C24875 + C24874) * C541 - (C24881 * C50896 + C24880 * C540) +
             (C24877 + C24876) * C50705) *
                C24656) *
               C50767 * C50640) *
              C1558 +
          ((((C25570 + C25571) * C541 -
             ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                  C50896 +
              (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                  C540) +
             (C25572 + C25573) * C50705) *
                C50945 +
            ((C25574 + C25575) * C541 -
             ((C25573 + C25572) * C50896 + (C25571 + C25570) * C540) +
             (C25576 + C25577) * C50705) *
                C50946 +
            ((C26511 + C26510) * C541 - (C26501 * C50896 + C26500 * C540) +
             (C26513 + C26512) * C50705) *
                C24656) *
               C50767 * C50888 +
           (((C49768 * C397 + C50881 * C407 + C49761 * C398 + C50615 * C408) *
                 C540 +
             (C49768 * C411 + C50881 * C427 + C49761 * C412 + C50615 * C428) *
                 C50896 -
             (C25578 + C25579) * C541 - (C25580 + C25581) * C50705) *
                C50945 +
            ((C25579 + C25578) * C540 + (C25581 + C25580) * C50896 -
             (C25582 + C25583) * C541 - (C25584 + C25585) * C50705) *
                C50946 +
            ((C25583 + C25582) * C540 + (C25585 + C25584) * C50896 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C541 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C50705) *
                C24656) *
               C50767 * C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C540 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50896 -
            (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
               C50945 +
           ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
            (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
               C50946 +
           (C24878 * C540 + C24879 * C50896 - C25830 * C541 - C25831 * C50705) *
               C24656) *
              C50767 * C50635 * C50943 +
          (((C25570 + C25571) * C541 -
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C50896 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C540) +
            (C25572 + C25573) * C50705) *
               C50945 +
           ((C25574 + C25575) * C541 -
            ((C25573 + C25572) * C50896 + (C25571 + C25570) * C540) +
            (C25576 + C25577) * C50705) *
               C50946 +
           ((C26511 + C26510) * C541 - (C26501 * C50896 + C26500 * C540) +
            (C26513 + C26512) * C50705) *
               C24656) *
              C50767 * C50635 * C50944 +
          (((C49768 * C402 + C50881 * C417 + C49761 * C403 + C50615 * C418) *
                C540 +
            (C49768 * C421 + C50881 * C432 + C49761 * C422 + C50615 * C433) *
                C50896 -
            (C26006 + C26007) * C541 - (C26008 + C26009) * C50705) *
               C50945 +
           ((C26007 + C26006) * C540 + (C26009 + C26008) * C50896 -
            (C26010 + C26011) * C541 - (C26012 + C26013) * C50705) *
               C50946 +
           ((C26011 + C26010) * C540 + (C26013 + C26012) * C50896 -
            (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 +
             C50881 * C3555) *
                C541 -
            (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 +
             C50881 * C3559) *
                C50705) *
               C24656) *
              C50767 * C50635 * C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C253 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C248 -
            (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
            C24878 * C255 + C24879 * C250) *
               C50945 +
           ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
            (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
            (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
               C50946 +
           (C24878 * C253 + C24879 * C248 - C25830 * C254 - C25831 * C249 +
            (C25841 + C25840) * C255 + (C25843 + C25842) * C250) *
               C24656) *
              C50767 * C50635 * C1558 +
          (((C25570 + C25571) * C254 -
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C248 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C253) +
            (C25572 + C25573) * C249 - C26500 * C255 - C26501 * C250) *
               C50945 +
           ((C25574 + C25575) * C254 -
            ((C25573 + C25572) * C248 + (C25571 + C25570) * C253) +
            (C25576 + C25577) * C249 - (C26510 + C26511) * C255 -
            (C26512 + C26513) * C250) *
               C50946 +
           ((C26511 + C26510) * C254 - (C26501 * C248 + C26500 * C253) +
            (C26513 + C26512) * C249 -
            (C49761 * C4070 + C50615 * C4072 + C49768 * C4071 +
             C50881 * C4073) *
                C255 -
            (C49761 * C4074 + C50615 * C4076 + C49768 * C4075 +
             C50881 * C4077) *
                C250) *
               C24656) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50945 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50946 +
            (C24878 * C121 + C24879 * C50653) * C24656) *
               C50767 * C900 -
           ((C24881 * C50653 + C24880 * C121) * C24656 +
            ((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50946 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50945) *
               C50767 * C901 +
           (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C50945 +
            ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50946 +
            ((C25195 + C25194) * C121 + (C25197 + C25196) * C50653) * C24656) *
               C50767 * C902) *
              C1558 +
          ((((C49768 * C397 + C50881 * C407 + C49761 * C398 + C50615 * C408) *
                 C121 +
             (C49768 * C411 + C50881 * C427 + C49761 * C412 + C50615 * C428) *
                 C50653) *
                C50945 +
            ((C25579 + C25578) * C121 + (C25581 + C25580) * C50653) * C50946 +
            ((C25583 + C25582) * C121 + (C25585 + C25584) * C50653) * C24656) *
               C50767 * C901 -
           ((C26501 * C50653 + C26500 * C121) * C24656 +
            ((C25573 + C25572) * C50653 + (C25571 + C25570) * C121) * C50946 +
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C50653 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C121) *
                C50945) *
               C50767 * C900 -
           (((C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50653 +
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C121) *
                C24656 +
            ((C49761 * C792 + C50615 * C798 + C49768 * C791 + C50881 * C797) *
                 C50653 +
             (C49761 * C783 + C50615 * C788 + C49768 * C782 + C50881 * C787) *
                 C121) *
                C50946 +
            ((C49761 * C413 + C50615 * C429 + C49768 * C412 + C50881 * C428) *
                 C50653 +
             (C49761 * C399 + C50615 * C409 + C49768 * C398 + C50881 * C408) *
                 C121) *
                C50945) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C121 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50653) *
               C50945 +
           ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50946 +
           (C24878 * C121 + C24879 * C50653) * C24656) *
              C50767 * C50635 * C1724 -
          ((C26501 * C50653 + C26500 * C121) * C24656 +
           ((C25573 + C25572) * C50653 + (C25571 + C25570) * C121) * C50946 +
           ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                C50653 +
            (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                C121) *
               C50945) *
              C50767 * C50635 * C1725 +
          (((C49768 * C402 + C50881 * C417 + C49761 * C403 + C50615 * C418) *
                C121 +
            (C49768 * C421 + C50881 * C432 + C49761 * C422 + C50615 * C433) *
                C50653) *
               C50945 +
           ((C26007 + C26006) * C121 + (C26009 + C26008) * C50653) * C50946 +
           ((C26011 + C26010) * C121 + (C26013 + C26012) * C50653) * C24656) *
              C50767 * C50635 * C1726 -
          (((C49761 * C4486 + C50615 * C4494 + C49768 * C4487 +
             C50881 * C4495) *
                C50653 +
            (C49761 * C4482 + C50615 * C4488 + C49768 * C4483 +
             C50881 * C4489) *
                C121) *
               C24656 +
           ((C49761 * C4490 + C50615 * C4496 + C49768 * C4491 +
             C50881 * C4497) *
                C50653 +
            (C49761 * C4484 + C50615 * C4492 + C49768 * C4485 +
             C50881 * C4493) *
                C121) *
               C50946 +
           ((C49761 * C1734 + C50615 * C1742 + C49768 * C1735 +
             C50881 * C1743) *
                C50653 +
            (C49761 * C1730 + C50615 * C1738 + C49768 * C1731 +
             C50881 * C1739) *
                C121) *
               C50945) *
              C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50945 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50946 +
            (C24878 * C121 + C24879 * C50653) * C24656) *
               C50767 * C50888 -
           ((C24881 * C50653 + C24880 * C121) * C24656 +
            ((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50946 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50945) *
               C50767 * C50640) *
              C50943 +
          ((((C49768 * C397 + C50881 * C407 + C49761 * C398 + C50615 * C408) *
                 C121 +
             (C49768 * C411 + C50881 * C427 + C49761 * C412 + C50615 * C428) *
                 C50653) *
                C50945 +
            ((C25579 + C25578) * C121 + (C25581 + C25580) * C50653) * C50946 +
            ((C25583 + C25582) * C121 + (C25585 + C25584) * C50653) * C24656) *
               C50767 * C50640 -
           ((C26501 * C50653 + C26500 * C121) * C24656 +
            ((C25573 + C25572) * C50653 + (C25571 + C25570) * C121) * C50946 +
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C50653 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C121) *
                C50945) *
               C50767 * C50888) *
              C50944 +
          ((((C49768 * C402 + C50881 * C417 + C49761 * C403 + C50615 * C418) *
                 C121 +
             (C49768 * C421 + C50881 * C432 + C49761 * C422 + C50615 * C433) *
                 C50653) *
                C50945 +
            ((C26007 + C26006) * C121 + (C26009 + C26008) * C50653) * C50946 +
            ((C26011 + C26010) * C121 + (C26013 + C26012) * C50653) * C24656) *
               C50767 * C50888 -
           (((C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
              C50881 * C2568) *
                 C50653 +
             (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
              C50881 * C2562) *
                 C121) *
                C24656 +
            ((C49761 * C1103 + C50615 * C1107 + C49768 * C1104 +
              C50881 * C1108) *
                 C50653 +
             (C49761 * C1095 + C50615 * C1099 + C49768 * C1096 +
              C50881 * C1100) *
                 C121) *
                C50946 +
            ((C49761 * C423 + C50615 * C434 + C49768 * C422 + C50881 * C433) *
                 C50653 +
             (C49761 * C404 + C50615 * C419 + C49768 * C403 + C50881 * C418) *
                 C121) *
                C50945) *
               C50767 * C50640) *
              C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50945 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50946 +
            (C24878 * C121 + C24879 * C50653) * C24656) *
               C50767 * C900 -
           ((C24881 * C50653 + C24880 * C121) * C24656 +
            ((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50946 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50945) *
               C50767 * C901 +
           (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C50945 +
            ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50946 +
            ((C25195 + C25194) * C121 + (C25197 + C25196) * C50653) * C24656) *
               C50767 * C902) *
              C1558 +
          ((((C49768 * C397 + C50881 * C407 + C49761 * C398 + C50615 * C408) *
                 C121 +
             (C49768 * C411 + C50881 * C427 + C49761 * C412 + C50615 * C428) *
                 C50653) *
                C50945 +
            ((C25579 + C25578) * C121 + (C25581 + C25580) * C50653) * C50946 +
            ((C25583 + C25582) * C121 + (C25585 + C25584) * C50653) * C24656) *
               C50767 * C901 -
           ((C26501 * C50653 + C26500 * C121) * C24656 +
            ((C25573 + C25572) * C50653 + (C25571 + C25570) * C121) * C50946 +
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C50653 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C121) *
                C50945) *
               C50767 * C900 -
           (((C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50653 +
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C121) *
                C24656 +
            ((C49761 * C792 + C50615 * C798 + C49768 * C791 + C50881 * C797) *
                 C50653 +
             (C49761 * C783 + C50615 * C788 + C49768 * C782 + C50881 * C787) *
                 C121) *
                C50946 +
            ((C49761 * C413 + C50615 * C429 + C49768 * C412 + C50881 * C428) *
                 C50653 +
             (C49761 * C399 + C50615 * C409 + C49768 * C398 + C50881 * C408) *
                 C121) *
                C50945) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C253 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C248 -
            (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
            C24878 * C255 + C24879 * C250) *
               C50945 +
           ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
            (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
            (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
               C50946 +
           (C24878 * C253 + C24879 * C248 - C25830 * C254 - C25831 * C249 +
            (C25841 + C25840) * C255 + (C25843 + C25842) * C250) *
               C24656) *
              C50767 * C50635 * C1558 +
          (((C25570 + C25571) * C254 -
            ((C49761 * C411 + C50615 * C427 + C49768 * C415 + C50881 * C431) *
                 C248 +
             (C49761 * C397 + C50615 * C407 + C49768 * C401 + C50881 * C416) *
                 C253) +
            (C25572 + C25573) * C249 - C26500 * C255 - C26501 * C250) *
               C50945 +
           ((C25574 + C25575) * C254 -
            ((C25573 + C25572) * C248 + (C25571 + C25570) * C253) +
            (C25576 + C25577) * C249 - (C26510 + C26511) * C255 -
            (C26512 + C26513) * C250) *
               C50946 +
           ((C26511 + C26510) * C254 - (C26501 * C248 + C26500 * C253) +
            (C26513 + C26512) * C249 -
            (C49761 * C4070 + C50615 * C4072 + C49768 * C4071 +
             C50881 * C4073) *
                C255 -
            (C49761 * C4074 + C50615 * C4076 + C49768 * C4075 +
             C50881 * C4077) *
                C250) *
               C24656) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C19772 * C122 + C50610 * C129) * C540 +
                     (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                     C19905 * C50705) *
                        C50945 +
                    (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                     C19907 * C50705) *
                        C50946 +
                    (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                     C19909 * C50705) *
                        C24656) *
                       C50910 +
                   ((C22622 + C22623 - C22624 - C22625) * C50945 +
                    (C22626 + C22627 - C22628 - C22629) * C50946 +
                    (C20388 * C540 + C20389 * C50896 - C20390 * C541 -
                     C20391 * C50705) *
                        C24656) *
                       C50831) *
                      C50939 +
                  (((C19912 * C541 -
                     ((C19772 * C134 + C50610 * C144) * C50896 +
                      (C19772 * C123 + C50610 * C130) * C540) +
                     C19913 * C50705) *
                        C50945 +
                    (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                     C19915 * C50705) *
                        C50946 +
                    (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                     C19917 * C50705) *
                        C24656) *
                       C50910 +
                   ((C22638 - (C22639 + C22640) + C22641) * C50945 +
                    (C22642 - (C22643 + C22644) + C22645) * C50946 +
                    (C20396 * C541 - (C20395 * C50896 + C20394 * C540) +
                     C20397 * C50705) *
                        C24656) *
                       C50831) *
                      C50940 +
                  ((((C19772 * C124 + C50610 * C131) * C540 +
                     (C19772 * C135 + C50610 * C145) * C50896 - C20128 * C541 -
                     C20129 * C50705) *
                        C50945 +
                    (C20128 * C540 + C20129 * C50896 - C20130 * C541 -
                     C20131 * C50705) *
                        C50946 +
                    (C20130 * C540 + C20131 * C50896 - C20132 * C541 -
                     C20133 * C50705) *
                        C24656) *
                       C50910 +
                   ((C22420 * C540 + C22421 * C50896 - C22258 * C541 -
                     C22259 * C50705) *
                        C50945 +
                    (C22258 * C540 + C22259 * C50896 - C31552 * C541 -
                     C31553 * C50705) *
                        C50946 +
                    (C31552 * C540 + C31553 * C50896 -
                     (C19772 * C3082 + C50610 * C3087) * C541 -
                     (C19772 * C3088 + C50610 * C3091) * C50705) *
                        C24656) *
                       C50831) *
                      C539) *
                 C50669) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C50945 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C50946 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C24656) *
                        C50910 +
                    ((C22622 + C22623 - C22624 - C22625) * C50945 +
                     (C22626 + C22627 - C22628 - C22629) * C50946 +
                     (C31896 + C31897 - C31898 - C31899) * C24656) *
                        C50831) *
                       C251 +
                   (((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C50945 +
                     (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                      C19915 * C50705) *
                         C50946 +
                     (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                      C19917 * C50705) *
                         C24656) *
                        C50910 +
                    ((C22638 - (C22639 + C22640) + C22641) * C50945 +
                     (C22642 - (C22643 + C22644) + C22645) * C50946 +
                     (C31900 - (C31901 + C31902) + C31903) * C24656) *
                        C50831) *
                       C50640) *
                      C50897 +
                  ((((C22624 - (C22623 + C22622) + C22625) * C50945 +
                     (C22628 - (C22627 + C22626) + C22629) * C50946 +
                     (C31898 - (C31897 + C31896) + C31899) * C24656) *
                        C50910 +
                    ((C22632 - (C22631 + C22630) + C22633) * C50945 +
                     (C22636 - (C22635 + C22634) + C22637) * C50946 +
                     (C20690 * C541 - (C20689 * C50896 + C20688 * C540) +
                      C20691 * C50705) *
                         C24656) *
                        C50831) *
                       C251 +
                   (((C22640 + C22639 - C22638 - C22641) * C50945 +
                     (C22644 + C22643 - C22642 - C22645) * C50946 +
                     (C31902 + C31901 - C31900 - C31903) * C24656) *
                        C50910 +
                    ((C22648 + C22647 - C22646 - C22649) * C50945 +
                     (C22652 + C22651 - C22650 - C22653) * C50946 +
                     (C21874 * C540 + C21875 * C50896 -
                      (C19772 * C3552 + C50610 * C3554) * C541 -
                      (C19772 * C3556 + C50610 * C3558) * C50705) *
                         C24656) *
                        C50831) *
                       C50640) *
                      C50733)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C50945 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50946 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C24656) *
               C50910 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50945 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50946 +
            (C20388 * C253 + C20389 * C248 - C20390 * C254 - C20391 * C249 +
             C21026 * C255 + C21027 * C250) *
                C24656) *
               C50831) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C50945 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C50946 +
            (C19916 * C254 - (C19915 * C248 + C19914 * C253) + C19917 * C249 -
             C19918 * C255 - C19919 * C250) *
                C24656) *
               C50910 +
           ((C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
             C20394 * C255 - C20395 * C250) *
                C50945 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C50946 +
            (C20396 * C254 - (C20395 * C248 + C20394 * C253) + C20397 * C249 -
             (C19772 * C4070 + C50610 * C4072) * C255 -
             (C19772 * C4074 + C50610 * C4076) * C250) *
                C24656) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50945 +
            (C19904 * C121 + C19905 * C50653) * C50946 +
            (C19906 * C121 + C19907 * C50653) * C24656) *
               C50910 +
           ((C22080 + C22081) * C50945 + (C22026 + C22027) * C50946 +
            (C20388 * C121 + C20389 * C50653) * C24656) *
               C50831) *
              C112 -
          (((C20395 * C50653 + C20394 * C121) * C24656 +
            (C22040 + C22041) * C50946 + (C22088 + C22089) * C50945) *
               C50831 +
           ((C19915 * C50653 + C19914 * C121) * C24656 +
            (C19913 * C50653 + C19912 * C121) * C50946 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50945) *
               C50910) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C50945 +
            (C20128 * C121 + C20129 * C50653) * C50946 +
            (C20130 * C121 + C20131 * C50653) * C24656) *
               C50910 +
           ((C22424 + C22425) * C50945 + (C22412 + C22413) * C50946 +
            ((C19772 * C1445 + C50610 * C1449) * C121 +
             (C19772 * C1453 + C50610 * C1457) * C50653) *
                C24656) *
               C50831) *
              C114 -
          ((((C19772 * C1452 + C50610 * C1456) * C50653 +
             (C19772 * C1444 + C50610 * C1448) * C121) *
                C24656 +
            ((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C50946 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C50945) *
               C50831 +
           (((C19772 * C281 + C50610 * C293) * C50653 +
             (C19772 * C263 + C50610 * C277) * C121) *
                C24656 +
            ((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C50946 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C50945) *
               C50910) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50945 +
             (C19904 * C121 + C19905 * C50653) * C50946 +
             (C19906 * C121 + C19907 * C50653) * C24656) *
                C50910 +
            ((C22080 + C22081) * C50945 + (C22026 + C22027) * C50946 +
             (C31394 + C31395) * C24656) *
                C50831) *
               C251 -
           (((C31396 + C31397) * C24656 + (C22040 + C22041) * C50946 +
             (C22088 + C22089) * C50945) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C24656 +
             (C19913 * C50653 + C19912 * C121) * C50946 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50945) *
                C50910) *
               C50640) *
              C394 +
          ((((C22089 + C22088) * C50945 + (C22041 + C22040) * C50946 +
             (C31397 + C31396) * C24656) *
                C50910 +
            ((C22087 + C22086) * C50945 + (C22035 + C22034) * C50946 +
             (C31398 + C31399) * C24656) *
                C50831) *
               C50640 -
           (((C31400 + C31401) * C24656 + (C22033 + C22032) * C50946 +
             (C22083 + C22082) * C50945) *
                C50831 +
            ((C31395 + C31394) * C24656 + (C22027 + C22026) * C50946 +
             (C22081 + C22080) * C50945) *
                C50910) *
               C251) *
              C395 +
          (((C22098 * C50945 + C22066 * C50946 + (C31401 + C31400) * C24656) *
                C50910 +
            ((C22097 + C22096) * C50945 + (C22095 + C22094) * C50946 +
             (C23080 * C121 + C23081 * C50653) * C24656) *
                C50831) *
               C251 -
           ((((C19772 * C4486 + C50610 * C4494) * C50653 +
              (C19772 * C4482 + C50610 * C4488) * C121) *
                 C24656 +
             (C22093 + C22092) * C50946 + (C22091 + C22090) * C50945) *
                C50831 +
            ((C31399 + C31398) * C24656 + C22067 * C50946 + C22099 * C50945) *
                C50910) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C19772 * C122 + C50610 * C129) * C121 +
                      (C19772 * C133 + C50610 * C143) * C50653) *
                         C50945 +
                     (C19904 * C121 + C19905 * C50653) * C50946 +
                     (C19906 * C121 + C19907 * C50653) * C24656) *
                        C50910 +
                    ((C22080 + C22081) * C50945 + (C22026 + C22027) * C50946 +
                     (C31394 + C31395) * C24656) *
                        C50831) *
                       C50939 -
                   (((C31396 + C31397) * C24656 + (C22040 + C22041) * C50946 +
                     (C22088 + C22089) * C50945) *
                        C50831 +
                    ((C19915 * C50653 + C19914 * C121) * C24656 +
                     (C19913 * C50653 + C19912 * C121) * C50946 +
                     ((C19772 * C134 + C50610 * C144) * C50653 +
                      (C19772 * C123 + C50610 * C130) * C121) *
                         C50945) *
                        C50910) *
                       C50940 +
                   ((((C19772 * C124 + C50610 * C131) * C121 +
                      (C19772 * C135 + C50610 * C145) * C50653) *
                         C50945 +
                     (C20128 * C121 + C20129 * C50653) * C50946 +
                     (C20130 * C121 + C20131 * C50653) * C24656) *
                        C50910 +
                    ((C22424 + C22425) * C50945 + (C22412 + C22413) * C50946 +
                     (C31700 + C31701) * C24656) *
                        C50831) *
                       C539) *
                      C50897 +
                  ((((C22089 + C22088) * C50945 + (C22041 + C22040) * C50946 +
                     (C31397 + C31396) * C24656) *
                        C50910 +
                    ((C22087 + C22086) * C50945 + (C22035 + C22034) * C50946 +
                     (C31398 + C31399) * C24656) *
                        C50831) *
                       C50940 -
                   (((C31400 + C31401) * C24656 + (C22033 + C22032) * C50946 +
                     (C22083 + C22082) * C50945) *
                        C50831 +
                    ((C31395 + C31394) * C24656 + (C22027 + C22026) * C50946 +
                     (C22081 + C22080) * C50945) *
                        C50910) *
                       C50939 -
                   ((((C19772 * C2565 + C50610 * C2569) * C50653 +
                      (C19772 * C2560 + C50610 * C2566) * C121) *
                         C24656 +
                     (C22419 + C22418) * C50946 + (C22427 + C22426) * C50945) *
                        C50831 +
                    ((C31701 + C31700) * C24656 + (C22413 + C22412) * C50946 +
                     (C22425 + C22424) * C50945) *
                        C50910) *
                       C539) *
                      C50733)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50945 +
            (C19904 * C121 + C19905 * C50653) * C50946 +
            (C19906 * C121 + C19907 * C50653) * C24656) *
               C50910 +
           ((C22080 + C22081) * C50945 + (C22026 + C22027) * C50946 +
            (C20388 * C121 + C20389 * C50653) * C24656) *
               C50831) *
              C112 -
          (((C20395 * C50653 + C20394 * C121) * C24656 +
            (C22040 + C22041) * C50946 + (C22088 + C22089) * C50945) *
               C50831 +
           ((C19915 * C50653 + C19914 * C121) * C24656 +
            (C19913 * C50653 + C19912 * C121) * C50946 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50945) *
               C50910) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C50945 +
            (C20128 * C121 + C20129 * C50653) * C50946 +
            (C20130 * C121 + C20131 * C50653) * C24656) *
               C50910 +
           ((C22424 + C22425) * C50945 + (C22412 + C22413) * C50946 +
            ((C19772 * C1445 + C50610 * C1449) * C121 +
             (C19772 * C1453 + C50610 * C1457) * C50653) *
                C24656) *
               C50831) *
              C114 -
          ((((C19772 * C1452 + C50610 * C1456) * C50653 +
             (C19772 * C1444 + C50610 * C1448) * C121) *
                C24656 +
            ((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C50946 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C50945) *
               C50831 +
           (((C19772 * C281 + C50610 * C293) * C50653 +
             (C19772 * C263 + C50610 * C277) * C121) *
                C24656 +
            ((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C50946 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C50945) *
               C50910) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C50945 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50946 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C24656) *
               C50910 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50945 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50946 +
            (C20388 * C253 + C20389 * C248 - C20390 * C254 - C20391 * C249 +
             C21026 * C255 + C21027 * C250) *
                C24656) *
               C50831) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C50945 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C50946 +
            (C19916 * C254 - (C19915 * C248 + C19914 * C253) + C19917 * C249 -
             C19918 * C255 - C19919 * C250) *
                C24656) *
               C50910 +
           ((C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
             C20394 * C255 - C20395 * C250) *
                C50945 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C50946 +
            (C20396 * C254 - (C20395 * C248 + C20394 * C253) + C20397 * C249 -
             (C19772 * C4070 + C50610 * C4072) * C255 -
             (C19772 * C4074 + C50610 * C4076) * C250) *
                C24656) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C50945 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C50946 +
            (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
             C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
                C24656) *
               C50910 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C50945 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C50946 +
            (C20388 * C1213 + C20389 * C50941 - C20390 * C1214 -
             C20391 * C50942 + C21026 * C1215 + C21027 * C1210) *
                C24656) *
               C50831) *
              C50888 +
          (((C19912 * C1214 -
             ((C19772 * C134 + C50610 * C144) * C50941 +
              (C19772 * C123 + C50610 * C130) * C1213) +
             C19913 * C50942 - C19914 * C1215 - C19915 * C1210) *
                C50945 +
            (C19914 * C1214 - (C19913 * C50941 + C19912 * C1213) +
             C19915 * C50942 - C19916 * C1215 - C19917 * C1210) *
                C50946 +
            (C19916 * C1214 - (C19915 * C50941 + C19914 * C1213) +
             C19917 * C50942 - C19918 * C1215 - C19919 * C1210) *
                C24656) *
               C50910 +
           ((C20392 * C1214 - (C22070 * C50941 + C22071 * C1213) +
             C20393 * C50942 - C20394 * C1215 - C20395 * C1210) *
                C50945 +
            (C20394 * C1214 - (C20393 * C50941 + C20392 * C1213) +
             C20395 * C50942 - C20396 * C1215 - C20397 * C1210) *
                C50946 +
            (C20396 * C1214 - (C20395 * C50941 + C20394 * C1213) +
             C20397 * C50942 - (C19772 * C4070 + C50610 * C4072) * C1215 -
             (C19772 * C4074 + C50610 * C4076) * C1210) *
                C24656) *
               C50831) *
              C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C50945 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C50946 +
            (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
             C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
                C24656) *
               C50910 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C50945 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C50946 +
            (C32792 + C32793 - C32794 - C32795 + C32796 + C32797) * C24656) *
               C50831) *
              C50635 * C50897 +
          (((C23597 - (C23596 + C23595) + C23598 - C23599 - C23600) * C50945 +
            (C23603 - (C23602 + C23601) + C23604 - C23605 - C23606) * C50946 +
            (C32794 - (C32793 + C32792) + C32795 - C32796 - C32797) * C24656) *
               C50910 +
           ((C23609 - (C23608 + C23607) + C23610 - C23611 - C23612) * C50945 +
            (C23615 - (C23614 + C23613) + C23616 - C23617 - C23618) * C50946 +
            (C20690 * C1214 - (C20689 * C50941 + C20688 * C1213) +
             C20691 * C50942 - (C19772 * C20669 + C50610 * C20670) * C1215 -
             (C19772 * C20671 + C50610 * C20672) * C1210) *
                C24656) *
               C50831) *
              C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C50945 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C50946 +
           (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
            C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
               C24656) *
              C50910 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C50945 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C50946 +
           (C20388 * C976 + C20389 * C971 - C20390 * C977 - C20391 * C972 +
            C21026 * C978 + C21027 * C973 -
            (C19772 * C21017 + C50610 * C21018) * C979 -
            (C19772 * C21019 + C50610 * C21020) * C974) *
               C24656) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C50945 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50946 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C24656) *
               C50910 +
           ((C23048 + C23049 - C23050 - C23051) * C50945 +
            (C23052 + C23053 - C23054 - C23055) * C50946 +
            (C20388 * C903 + C20389 * C898 - C20390 * C904 - C20391 * C50705) *
                C24656) *
               C50831) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C50945 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C50946 +
            (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
             C19917 * C50705) *
                C24656) *
               C50910 +
           ((C23433 - (C23434 + C23435) + C23436) * C50945 +
            (C23437 - (C23438 + C23439) + C23440) * C50946 +
            (C20396 * C904 - (C20395 * C898 + C20394 * C903) +
             C20397 * C50705) *
                C24656) *
               C50831) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C50945 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C50946 +
            (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
                C24656) *
               C50910 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C50945 +
            (C22258 * C903 + C22259 * C898 - C31552 * C904 - C31553 * C50705) *
                C50946 +
            (C31552 * C903 + C31553 * C898 -
             (C19772 * C3082 + C50610 * C3087) * C904 -
             (C19772 * C3088 + C50610 * C3091) * C50705) *
                C24656) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C50945 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50946 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C24656) *
               C50910 +
           ((C23048 + C23049 - C23050 - C23051) * C50945 +
            (C23052 + C23053 - C23054 - C23055) * C50946 +
            (C32294 + C32295 - C32296 - C32297) * C24656) *
               C50831) *
              C50635 * C394 +
          (((C23050 - (C23049 + C23048) + C23051) * C50945 +
            (C23054 - (C23053 + C23052) + C23055) * C50946 +
            (C32296 - (C32295 + C32294) + C32297) * C24656) *
               C50910 +
           ((C23058 - (C23057 + C23056) + C23059) * C50945 +
            (C23062 - (C23061 + C23060) + C23063) * C50946 +
            (C32298 - (C32299 + C32300) + C32301) * C24656) *
               C50831) *
              C50635 * C395 +
          ((C23088 * C50945 + C23089 * C50946 +
            (C32300 + C32299 - C32298 - C32301) * C24656) *
               C50910 +
           ((C23066 + C23065 - C23064 - C23067) * C50945 +
            (C23071 + C23070 - C23086 - C23087) * C50946 +
            (C23080 * C903 + C23081 * C898 -
             (C19772 * C21289 + C50610 * C21291) * C904 -
             (C19772 * C21290 + C50610 * C21292) * C50705) *
                C24656) *
               C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C903 +
              (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
              C19905 * C50705) *
                 C50945 +
             (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                 C50946 +
             (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                 C24656) *
                C50910 +
            ((C23048 + C23049 - C23050 - C23051) * C50945 +
             (C23052 + C23053 - C23054 - C23055) * C50946 +
             (C32294 + C32295 - C32296 - C32297) * C24656) *
                C50831) *
               C50888 +
           (((C19912 * C904 -
              ((C19772 * C134 + C50610 * C144) * C898 +
               (C19772 * C123 + C50610 * C130) * C903) +
              C19913 * C50705) *
                 C50945 +
             (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
              C19915 * C50705) *
                 C50946 +
             (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
              C19917 * C50705) *
                 C24656) *
                C50910 +
            ((C23433 - (C23434 + C23435) + C23436) * C50945 +
             (C23437 - (C23438 + C23439) + C23440) * C50946 +
             (C32642 - (C32643 + C32644) + C32645) * C24656) *
                C50831) *
               C50640) *
              C50897 +
          ((((C23050 - (C23049 + C23048) + C23051) * C50945 +
             (C23054 - (C23053 + C23052) + C23055) * C50946 +
             (C32296 - (C32295 + C32294) + C32297) * C24656) *
                C50910 +
            ((C23058 - (C23057 + C23056) + C23059) * C50945 +
             (C23062 - (C23061 + C23060) + C23063) * C50946 +
             (C32298 - (C32299 + C32300) + C32301) * C24656) *
                C50831) *
               C50888 +
           (((C23435 + C23434 - C23433 - C23436) * C50945 +
             (C23439 + C23438 - C23437 - C23440) * C50946 +
             (C32644 + C32643 - C32642 - C32645) * C24656) *
                C50910 +
            ((C23443 + C23442 - C23441 - C23444) * C50945 +
             (C23447 + C23446 - C23445 - C23448) * C50946 +
             (C21874 * C903 + C21875 * C898 -
              (C19772 * C3552 + C50610 * C3554) * C904 -
              (C19772 * C3556 + C50610 * C3558) * C50705) *
                 C24656) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C50945 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50946 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C24656) *
               C50910 +
           ((C23048 + C23049 - C23050 - C23051) * C50945 +
            (C23052 + C23053 - C23054 - C23055) * C50946 +
            (C20388 * C903 + C20389 * C898 - C20390 * C904 - C20391 * C50705) *
                C24656) *
               C50831) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C50945 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C50946 +
            (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
             C19917 * C50705) *
                C24656) *
               C50910 +
           ((C23433 - (C23434 + C23435) + C23436) * C50945 +
            (C23437 - (C23438 + C23439) + C23440) * C50946 +
            (C20396 * C904 - (C20395 * C898 + C20394 * C903) +
             C20397 * C50705) *
                C24656) *
               C50831) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C50945 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C50946 +
            (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
                C24656) *
               C50910 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C50945 +
            (C22258 * C903 + C22259 * C898 - C31552 * C904 - C31553 * C50705) *
                C50946 +
            (C31552 * C903 + C31553 * C898 -
             (C19772 * C3082 + C50610 * C3087) * C904 -
             (C19772 * C3088 + C50610 * C3091) * C50705) *
                C24656) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C50945 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C50946 +
           (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
            C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
               C24656) *
              C50910 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C50945 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C50946 +
           (C20388 * C976 + C20389 * C971 - C20390 * C977 - C20391 * C972 +
            C21026 * C978 + C21027 * C973 -
            (C19772 * C21017 + C50610 * C21018) * C979 -
            (C19772 * C21019 + C50610 * C21020) * C974) *
               C24656) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C50945 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C50946 +
                      (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                       C19909 * C50705) *
                          C24656) *
                         C50910 +
                     ((C22622 + C22623 - C22624 - C22625) * C50945 +
                      (C22626 + C22627 - C22628 - C22629) * C50946 +
                      (C31896 + C31897 - C31898 - C31899) * C24656) *
                         C50831) *
                        C50888 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C50945 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C50946 +
                      (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                       C19917 * C50705) *
                          C24656) *
                         C50910 +
                     ((C22638 - (C22639 + C22640) + C22641) * C50945 +
                      (C22642 - (C22643 + C22644) + C22645) * C50946 +
                      (C31900 - (C31901 + C31902) + C31903) * C24656) *
                         C50831) *
                        C50640) *
                       C1558 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C50945 +
                      (C22628 - (C22627 + C22626) + C22629) * C50946 +
                      (C31898 - (C31897 + C31896) + C31899) * C24656) *
                         C50910 +
                     ((C22632 - (C22631 + C22630) + C22633) * C50945 +
                      (C22636 - (C22635 + C22634) + C22637) * C50946 +
                      (C20690 * C541 - (C20689 * C50896 + C20688 * C540) +
                       C20691 * C50705) *
                          C24656) *
                         C50831) *
                        C50888 +
                    (((C22640 + C22639 - C22638 - C22641) * C50945 +
                      (C22644 + C22643 - C22642 - C22645) * C50946 +
                      (C31902 + C31901 - C31900 - C31903) * C24656) *
                         C50910 +
                     ((C22648 + C22647 - C22646 - C22649) * C50945 +
                      (C22652 + C22651 - C22650 - C22653) * C50946 +
                      (C21874 * C540 + C21875 * C50896 -
                       (C19772 * C3552 + C50610 * C3554) * C541 -
                       (C19772 * C3556 + C50610 * C3558) * C50705) *
                          C24656) *
                         C50831) *
                        C50640) *
                       C50733)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C50945 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C50946 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C24656) *
                        C50910 +
                    ((C22622 + C22623 - C22624 - C22625) * C50945 +
                     (C22626 + C22627 - C22628 - C22629) * C50946 +
                     (C31896 + C31897 - C31898 - C31899) * C24656) *
                        C50831) *
                       C50635 * C50943 +
                   (((C22624 - (C22623 + C22622) + C22625) * C50945 +
                     (C22628 - (C22627 + C22626) + C22629) * C50946 +
                     (C31898 - (C31897 + C31896) + C31899) * C24656) *
                        C50910 +
                    ((C22632 - (C22631 + C22630) + C22633) * C50945 +
                     (C22636 - (C22635 + C22634) + C22637) * C50946 +
                     (C33682 - (C33683 + C33684) + C33685) * C24656) *
                        C50831) *
                       C50635 * C50944 +
                   ((C24550 * C50945 + C24551 * C50946 +
                     (C33684 + C33683 - C33682 - C33685) * C24656) *
                        C50910 +
                    ((C24542 + C24541 - C24540 - C24543) * C50945 +
                     (C24546 + C24545 - C24544 - C24547) * C50946 +
                     (C23080 * C540 + C23081 * C50896 -
                      (C19772 * C21289 + C50610 * C21291) * C541 -
                      (C19772 * C21290 + C50610 * C21292) * C50705) *
                         C24656) *
                        C50831) *
                       C50635 * C1974)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C50945 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50946 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C24656) *
               C50910 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50945 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50946 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C24656) *
               C50831) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C50945 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C50946 +
            (C33092 - (C33091 + C33090) + C33093 - C33094 - C33095) * C24656) *
               C50910 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C50945 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C50946 +
            (C20690 * C254 - (C20689 * C248 + C20688 * C253) + C20691 * C249 -
             (C19772 * C20669 + C50610 * C20670) * C255 -
             (C19772 * C20671 + C50610 * C20672) * C250) *
                C24656) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50945 +
             (C19904 * C121 + C19905 * C50653) * C50946 +
             (C19906 * C121 + C19907 * C50653) * C24656) *
                C50910 +
            ((C22080 + C22081) * C50945 + (C22026 + C22027) * C50946 +
             (C31394 + C31395) * C24656) *
                C50831) *
               C900 -
           (((C31396 + C31397) * C24656 + (C22040 + C22041) * C50946 +
             (C22088 + C22089) * C50945) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C24656 +
             (C19913 * C50653 + C19912 * C121) * C50946 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50945) *
                C50910) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C50945 +
             (C20128 * C121 + C20129 * C50653) * C50946 +
             (C20130 * C121 + C20131 * C50653) * C24656) *
                C50910 +
            ((C22424 + C22425) * C50945 + (C22412 + C22413) * C50946 +
             (C31700 + C31701) * C24656) *
                C50831) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C50945 + (C22041 + C22040) * C50946 +
             (C31397 + C31396) * C24656) *
                C50910 +
            ((C22087 + C22086) * C50945 + (C22035 + C22034) * C50946 +
             (C31398 + C31399) * C24656) *
                C50831) *
               C901 -
           (((C31400 + C31401) * C24656 + (C22033 + C22032) * C50946 +
             (C22083 + C22082) * C50945) *
                C50831 +
            ((C31395 + C31394) * C24656 + (C22027 + C22026) * C50946 +
             (C22081 + C22080) * C50945) *
                C50910) *
               C900 -
           ((((C19772 * C2565 + C50610 * C2569) * C50653 +
              (C19772 * C2560 + C50610 * C2566) * C121) *
                 C24656 +
             (C22419 + C22418) * C50946 + (C22427 + C22426) * C50945) *
                C50831 +
            ((C31701 + C31700) * C24656 + (C22413 + C22412) * C50946 +
             (C22425 + C22424) * C50945) *
                C50910) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50945 +
            (C19904 * C121 + C19905 * C50653) * C50946 +
            (C19906 * C121 + C19907 * C50653) * C24656) *
               C50910 +
           ((C22080 + C22081) * C50945 + (C22026 + C22027) * C50946 +
            (C31394 + C31395) * C24656) *
               C50831) *
              C50635 * C1724 -
          (((C31400 + C31401) * C24656 + (C22033 + C22032) * C50946 +
            (C22083 + C22082) * C50945) *
               C50831 +
           ((C31395 + C31394) * C24656 + (C22027 + C22026) * C50946 +
            (C22081 + C22080) * C50945) *
               C50910) *
              C50635 * C1725 +
          ((C22098 * C50945 + C22066 * C50946 + (C31401 + C31400) * C24656) *
               C50910 +
           ((C22097 + C22096) * C50945 + (C22095 + C22094) * C50946 +
            (C33194 + C33195) * C24656) *
               C50831) *
              C50635 * C1726 -
          ((((C19772 * C23045 + C50610 * C23046) * C50653 +
             (C19772 * C23043 + C50610 * C23044) * C121) *
                C24656 +
            (C24044 + C24043) * C50946 + (C24051 + C24050) * C50945) *
               C50831 +
           ((C33195 + C33194) * C24656 + C24037 * C50946 + C24038 * C50945) *
               C50910) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50945 +
             (C19904 * C121 + C19905 * C50653) * C50946 +
             (C19906 * C121 + C19907 * C50653) * C24656) *
                C50910 +
            ((C22080 + C22081) * C50945 + (C22026 + C22027) * C50946 +
             (C31394 + C31395) * C24656) *
                C50831) *
               C50888 -
           (((C31396 + C31397) * C24656 + (C22040 + C22041) * C50946 +
             (C22088 + C22089) * C50945) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C24656 +
             (C19913 * C50653 + C19912 * C121) * C50946 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50945) *
                C50910) *
               C50640) *
              C50943 +
          ((((C22089 + C22088) * C50945 + (C22041 + C22040) * C50946 +
             (C31397 + C31396) * C24656) *
                C50910 +
            ((C22087 + C22086) * C50945 + (C22035 + C22034) * C50946 +
             (C31398 + C31399) * C24656) *
                C50831) *
               C50640 -
           (((C31400 + C31401) * C24656 + (C22033 + C22032) * C50946 +
             (C22083 + C22082) * C50945) *
                C50831 +
            ((C31395 + C31394) * C24656 + (C22027 + C22026) * C50946 +
             (C22081 + C22080) * C50945) *
                C50910) *
               C50888) *
              C50944 +
          (((C22098 * C50945 + C22066 * C50946 + (C31401 + C31400) * C24656) *
                C50910 +
            ((C22097 + C22096) * C50945 + (C22095 + C22094) * C50946 +
             (C33194 + C33195) * C24656) *
                C50831) *
               C50888 -
           ((((C19772 * C4486 + C50610 * C4494) * C50653 +
              (C19772 * C4482 + C50610 * C4488) * C121) *
                 C24656 +
             (C22093 + C22092) * C50946 + (C22091 + C22090) * C50945) *
                C50831 +
            ((C31399 + C31398) * C24656 + C22067 * C50946 + C22099 * C50945) *
                C50910) *
               C50640) *
              C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50945 +
             (C19904 * C121 + C19905 * C50653) * C50946 +
             (C19906 * C121 + C19907 * C50653) * C24656) *
                C50910 +
            ((C22080 + C22081) * C50945 + (C22026 + C22027) * C50946 +
             (C31394 + C31395) * C24656) *
                C50831) *
               C900 -
           (((C31396 + C31397) * C24656 + (C22040 + C22041) * C50946 +
             (C22088 + C22089) * C50945) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C24656 +
             (C19913 * C50653 + C19912 * C121) * C50946 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50945) *
                C50910) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C50945 +
             (C20128 * C121 + C20129 * C50653) * C50946 +
             (C20130 * C121 + C20131 * C50653) * C24656) *
                C50910 +
            ((C22424 + C22425) * C50945 + (C22412 + C22413) * C50946 +
             (C31700 + C31701) * C24656) *
                C50831) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C50945 + (C22041 + C22040) * C50946 +
             (C31397 + C31396) * C24656) *
                C50910 +
            ((C22087 + C22086) * C50945 + (C22035 + C22034) * C50946 +
             (C31398 + C31399) * C24656) *
                C50831) *
               C901 -
           (((C31400 + C31401) * C24656 + (C22033 + C22032) * C50946 +
             (C22083 + C22082) * C50945) *
                C50831 +
            ((C31395 + C31394) * C24656 + (C22027 + C22026) * C50946 +
             (C22081 + C22080) * C50945) *
                C50910) *
               C900 -
           ((((C19772 * C2565 + C50610 * C2569) * C50653 +
              (C19772 * C2560 + C50610 * C2566) * C121) *
                 C24656 +
             (C22419 + C22418) * C50946 + (C22427 + C22426) * C50945) *
                C50831 +
            ((C31701 + C31700) * C24656 + (C22413 + C22412) * C50946 +
             (C22425 + C22424) * C50945) *
                C50910) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C50945 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50946 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C24656) *
               C50910 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50945 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50946 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C24656) *
               C50831) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C50945 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C50946 +
            (C33092 - (C33091 + C33090) + C33093 - C33094 - C33095) * C24656) *
               C50910 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C50945 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C50946 +
            (C20690 * C254 - (C20689 * C248 + C20688 * C253) + C20691 * C249 -
             (C19772 * C20669 + C50610 * C20670) * C255 -
             (C19772 * C20671 + C50610 * C20672) * C250) *
                C24656) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C540 +
            (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C540 + C19905 * C50896 - C19906 * C541 - C19907 * C50705) *
               C19769 +
           (C19906 * C540 + C19907 * C50896 - C19908 * C541 - C19909 * C50705) *
               C19770 +
           (C19908 * C540 + C19909 * C50896 - C19910 * C541 - C19911 * C50705) *
               C19771) *
              C50767 * C50939 +
          ((C19912 * C541 -
            ((C19772 * C134 + C50610 * C144) * C50896 +
             (C19772 * C123 + C50610 * C130) * C540) +
            C19913 * C50705) *
               C19768 +
           (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
            C19915 * C50705) *
               C19769 +
           (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
            C19917 * C50705) *
               C19770 +
           (C19918 * C541 - (C19917 * C50896 + C19916 * C540) +
            C19919 * C50705) *
               C19771) *
              C50767 * C50940 +
          (((C19772 * C124 + C50610 * C131) * C540 +
            (C19772 * C135 + C50610 * C145) * C50896 - C20128 * C541 -
            C20129 * C50705) *
               C19768 +
           (C20128 * C540 + C20129 * C50896 - C20130 * C541 - C20131 * C50705) *
               C19769 +
           (C20130 * C540 + C20131 * C50896 - C20132 * C541 - C20133 * C50705) *
               C19770 +
           (C20132 * C540 + C20133 * C50896 -
            (C19772 * C2326 + C50610 * C2331) * C541 -
            (C19772 * C2332 + C50610 * C2335) * C50705) *
               C19771) *
              C50767 * C539) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C540 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50896 -
            (C17186 + C17187 + C17188) * C541 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C540 +
            (C17191 + C17190 + C17189) * C50896 -
            (C17194 + C17193 + C17192) * C541 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C50939 +
          (((C17198 + C17199 + C17200) * C541 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50896 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C540) +
            (C17201 + C17202 + C17203) * C50705) *
               C16986 +
           ((C17206 + C17205 + C17204) * C541 -
            ((C17203 + C17202 + C17201) * C50896 +
             (C17200 + C17199 + C17198) * C540) +
            (C17209 + C17208 + C17207) * C50705) *
               C50805) *
              C50767 * C50940 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C540 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C50896 -
            (C17514 + C17515 + C17516) * C541 -
            (C17517 + C17518 + C17519) * C50705) *
               C16986 +
           ((C17516 + C17515 + C17514) * C540 +
            (C17519 + C17518 + C17517) * C50896 -
            (C16990 * C265 + C16985 * C284 + C16989 * C263 + C16984 * C277 +
             C16988 * C262 + C16983 * C276) *
                C541 -
            (C16990 * C285 + C16985 * C295 + C16989 * C281 + C16984 * C293 +
             C16988 * C280 + C16983 * C292) *
                C50705) *
               C50805) *
              C50767 * C539) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C540 +
             (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
             C19905 * C50705) *
                C16986 +
            (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
             C19907 * C50705) *
                C50805) *
               C5082 +
           ((C22062 * C540 + C22063 * C50896 - C20386 * C541 -
             C20387 * C50705) *
                C16986 +
            (C20386 * C540 + C20387 * C50896 - C20388 * C541 -
             C20389 * C50705) *
                C50805) *
               C5083 +
           ((C22064 * C540 + C22065 * C50896 - C20686 * C541 -
             C20687 * C50705) *
                C16986 +
            (C20686 * C540 + C20687 * C50896 - C20688 * C541 -
             C20689 * C50705) *
                C50805) *
               C5084) *
              C50939 +
          (((C19912 * C541 -
             ((C19772 * C134 + C50610 * C144) * C50896 +
              (C19772 * C123 + C50610 * C130) * C540) +
             C19913 * C50705) *
                C16986 +
            (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
             C19915 * C50705) *
                C50805) *
               C5082 +
           ((C20392 * C541 - (C22070 * C50896 + C22071 * C540) +
             C20393 * C50705) *
                C16986 +
            (C20394 * C541 - (C20393 * C50896 + C20392 * C540) +
             C20395 * C50705) *
                C50805) *
               C5083 +
           ((C21872 * C541 - (C22068 * C50896 + C22069 * C540) +
             C21873 * C50705) *
                C16986 +
            (C21874 * C541 - (C21873 * C50896 + C21872 * C540) +
             C21875 * C50705) *
                C50805) *
               C5084) *
              C50940 +
          ((((C19772 * C124 + C50610 * C131) * C540 +
             (C19772 * C135 + C50610 * C145) * C50896 - C20128 * C541 -
             C20129 * C50705) *
                C16986 +
            (C20128 * C540 + C20129 * C50896 - C20130 * C541 -
             C20131 * C50705) *
                C50805) *
               C5082 +
           (((C19772 * C398 + C50610 * C408) * C540 +
             (C19772 * C412 + C50610 * C428) * C50896 - C22258 * C541 -
             C22259 * C50705) *
                C16986 +
            (C22258 * C540 + C22259 * C50896 -
             (C19772 * C1445 + C50610 * C1449) * C541 -
             (C19772 * C1453 + C50610 * C1457) * C50705) *
                C50805) *
               C5083 +
           (((C19772 * C404 + C50610 * C419) * C540 +
             (C19772 * C423 + C50610 * C434) * C50896 - C22260 * C541 -
             C22261 * C50705) *
                C16986 +
            (C22260 * C540 + C22261 * C50896 -
             (C19772 * C2560 + C50610 * C2566) * C541 -
             (C19772 * C2565 + C50610 * C2569) * C50705) *
                C50805) *
               C5084) *
              C539) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[106] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C19768 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C19769 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C19770 +
                     (C19908 * C540 + C19909 * C50896 - C19910 * C541 -
                      C19911 * C50705) *
                         C19771) *
                        C50767 * C251 +
                    ((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C19768 +
                     (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                      C19915 * C50705) *
                         C19769 +
                     (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                      C19917 * C50705) *
                         C19770 +
                     (C19918 * C541 - (C19917 * C50896 + C19916 * C540) +
                      C19919 * C50705) *
                         C19771) *
                        C50767 * C50640) *
                       C50897 +
                   (((C20386 * C541 -
                      ((C19772 * C415 + C50610 * C431) * C50896 +
                       (C19772 * C401 + C50610 * C416) * C540) +
                      C20387 * C50705) *
                         C19768 +
                     (C20388 * C541 - (C20387 * C50896 + C20386 * C540) +
                      C20389 * C50705) *
                         C19769 +
                     (C20390 * C541 - (C20389 * C50896 + C20388 * C540) +
                      C20391 * C50705) *
                         C19770 +
                     ((C19772 * C4071 + C50610 * C4073) * C541 -
                      (C20391 * C50896 + C20390 * C540) +
                      (C19772 * C4075 + C50610 * C4077) * C50705) *
                         C19771) *
                        C50767 * C251 +
                    (((C19772 * C397 + C50610 * C407) * C540 +
                      (C19772 * C411 + C50610 * C427) * C50896 - C20392 * C541 -
                      C20393 * C50705) *
                         C19768 +
                     (C20392 * C540 + C20393 * C50896 - C20394 * C541 -
                      C20395 * C50705) *
                         C19769 +
                     (C20394 * C540 + C20395 * C50896 - C20396 * C541 -
                      C20397 * C50705) *
                         C19770 +
                     (C20396 * C540 + C20397 * C50896 -
                      (C19772 * C4070 + C50610 * C4072) * C541 -
                      (C19772 * C4074 + C50610 * C4076) * C50705) *
                         C19771) *
                        C50767 * C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C540 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50896 -
                      (C17186 + C17187 + C17188) * C541 -
                      (C17189 + C17190 + C17191) * C50705) *
                         C16986 +
                     ((C17188 + C17187 + C17186) * C540 +
                      (C17191 + C17190 + C17189) * C50896 -
                      (C17194 + C17193 + C17192) * C541 -
                      (C17197 + C17196 + C17195) * C50705) *
                         C50805) *
                        C50767 * C251 +
                    (((C17198 + C17199 + C17200) * C541 -
                      ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                        C16984 * C145 + C16988 * C134 + C16983 * C144) *
                           C50896 +
                       (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                        C16984 * C131 + C16988 * C123 + C16983 * C130) *
                           C540) +
                      (C17201 + C17202 + C17203) * C50705) *
                         C16986 +
                     ((C17206 + C17205 + C17204) * C541 -
                      ((C17203 + C17202 + C17201) * C50896 +
                       (C17200 + C17199 + C17198) * C540) +
                      (C17209 + C17208 + C17207) * C50705) *
                         C50805) *
                        C50767 * C50640) *
                       C50897 +
                   ((((C17884 + C17885 + C17886) * C541 -
                      ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                        C16984 * C427 + C16988 * C415 + C16983 * C431) *
                           C50896 +
                       (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                        C16984 * C407 + C16988 * C401 + C16983 * C416) *
                           C540) +
                      (C17887 + C17888 + C17889) * C50705) *
                         C16986 +
                     ((C16988 * C1447 + C16983 * C1451 + C16989 * C1446 +
                       C16984 * C1450 + C16990 * C1445 + C16985 * C1449) *
                          C541 -
                      ((C17889 + C17888 + C17887) * C50896 +
                       (C17886 + C17885 + C17884) * C540) +
                      (C16988 * C1455 + C16983 * C1459 + C16989 * C1454 +
                       C16984 * C1458 + C16990 * C1453 + C16985 * C1457) *
                          C50705) *
                         C50805) *
                        C50767 * C251 +
                    (((C16988 * C397 + C16983 * C407 + C16989 * C398 +
                       C16984 * C408 + C16990 * C399 + C16985 * C409) *
                          C540 +
                      (C16988 * C411 + C16983 * C427 + C16989 * C412 +
                       C16984 * C428 + C16990 * C413 + C16985 * C429) *
                          C50896 -
                      (C17890 + C17891 + C17892) * C541 -
                      (C17893 + C17894 + C17895) * C50705) *
                         C16986 +
                     ((C17892 + C17891 + C17890) * C540 +
                      (C17895 + C17894 + C17893) * C50896 -
                      (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 +
                       C16984 * C1449 + C16988 * C1446 + C16983 * C1450) *
                          C541 -
                      (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 +
                       C16984 * C1457 + C16988 * C1454 + C16983 * C1458) *
                          C50705) *
                         C50805) *
                        C50767 * C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C16986 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C50805) *
                         C5082 +
                     ((C22622 + C22623 - C22624 - C22625) * C16986 +
                      (C22626 + C22627 - C22628 - C22629) * C50805) *
                         C5083 +
                     ((C22630 + C22631 - C22632 - C22633) * C16986 +
                      (C22634 + C22635 - C22636 - C22637) * C50805) *
                         C5084) *
                        C251 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C16986 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C50805) *
                         C5082 +
                     ((C22638 - (C22639 + C22640) + C22641) * C16986 +
                      (C22642 - (C22643 + C22644) + C22645) * C50805) *
                         C5083 +
                     ((C22646 - (C22647 + C22648) + C22649) * C16986 +
                      (C22650 - (C22651 + C22652) + C22653) * C50805) *
                         C5084) *
                        C50640) *
                       C50897 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C16986 +
                      (C22628 - (C22627 + C22626) + C22629) * C50805) *
                         C5082 +
                     ((C22632 - (C22631 + C22630) + C22633) * C16986 +
                      (C22636 - (C22635 + C22634) + C22637) * C50805) *
                         C5083 +
                     ((C22077 * C541 - (C22078 * C50896 + C22079 * C540) +
                       C22076 * C50705) *
                          C16986 +
                      ((C19772 * C4483 + C50610 * C4489) * C541 -
                       (C22076 * C50896 + C22077 * C540) +
                       (C19772 * C4487 + C50610 * C4495) * C50705) *
                          C50805) *
                         C5084) *
                        C251 +
                    (((C22640 + C22639 - C22638 - C22641) * C16986 +
                      (C22644 + C22643 - C22642 - C22645) * C50805) *
                         C5082 +
                     ((C22648 + C22647 - C22646 - C22649) * C16986 +
                      (C22652 + C22651 - C22650 - C22653) * C50805) *
                         C5083 +
                     ((C22072 * C540 + C22073 * C50896 - C22074 * C541 -
                       C22075 * C50705) *
                          C16986 +
                      (C22074 * C540 + C22075 * C50896 -
                       (C19772 * C4482 + C50610 * C4488) * C541 -
                       (C19772 * C4486 + C50610 * C4494) * C50705) *
                          C50805) *
                         C5084) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                 C16990 * C124 + C16985 * C131) *
                    C121 +
                (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                 C16990 * C135 + C16985 * C145) *
                    C50653) *
                   C16986 +
               ((C16988 * C259 + C16983 * C269 + C16989 * C258 + C16984 * C268 +
                 C16990 * C257 + C16985 * C267) *
                    C121 +
                (C16988 * C273 + C16983 * C289 + C16989 * C272 + C16984 * C288 +
                 C16990 * C271 + C16985 * C287) *
                    C50653) *
                   C50805) *
                  C50767 * C112 -
              (((C16990 * C270 + C16985 * C286 + C16989 * C271 + C16984 * C287 +
                 C16988 * C272 + C16983 * C288) *
                    C50653 +
                (C16990 * C256 + C16985 * C266 + C16989 * C257 + C16984 * C267 +
                 C16988 * C258 + C16983 * C268) *
                    C121) *
                   C50805 +
               ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
                 C16988 * C134 + C16983 * C144) *
                    C50653 +
                (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
                 C16988 * C123 + C16983 * C130) *
                    C121) *
                   C16986) *
                  C50767 * C113 +
              (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
                 C16990 * C126 + C16985 * C138) *
                    C121 +
                (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
                 C16990 * C137 + C16985 * C147) *
                    C50653) *
                   C16986 +
               ((C16988 * C257 + C16983 * C267 + C16989 * C256 + C16984 * C266 +
                 C16990 * C264 + C16985 * C282) *
                    C121 +
                (C16988 * C271 + C16983 * C287 + C16989 * C270 + C16984 * C286 +
                 C16990 * C283 + C16985 * C294) *
                    C50653) *
                   C50805) *
                  C50767 * C114 -
              (((C16990 * C544 + C16985 * C545 + C16989 * C283 + C16984 * C294 +
                 C16988 * C270 + C16983 * C286) *
                    C50653 +
                (C16990 * C542 + C16985 * C543 + C16989 * C264 + C16984 * C282 +
                 C16988 * C256 + C16983 * C266) *
                    C121) *
                   C50805 +
               ((C16990 * C140 + C16985 * C148 + C16989 * C137 + C16984 * C147 +
                 C16988 * C136 + C16983 * C146) *
                    C50653 +
                (C16990 * C127 + C16985 * C139 + C16989 * C126 + C16984 * C138 +
                 C16988 * C125 + C16983 * C132) *
                    C121) *
                   C16986) *
                  C50767 * C115) *
             C50669 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                 C16990 * C124 + C16985 * C131) *
                    C253 +
                (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                 C16990 * C135 + C16985 * C145) *
                    C248 -
                (C17186 + C17187 + C17188) * C254 -
                (C17189 + C17190 + C17191) * C249 +
                (C17192 + C17193 + C17194) * C255 +
                (C17195 + C17196 + C17197) * C250) *
                   C16986 +
               ((C17188 + C17187 + C17186) * C253 +
                (C17191 + C17190 + C17189) * C248 -
                (C17194 + C17193 + C17192) * C254 -
                (C17197 + C17196 + C17195) * C249 +
                (C16988 * C983 + C16983 * C987 + C16989 * C982 + C16984 * C986 +
                 C16990 * C981 + C16985 * C985) *
                    C255 +
                (C16988 * C991 + C16983 * C995 + C16989 * C990 + C16984 * C994 +
                 C16990 * C989 + C16985 * C993) *
                    C250) *
                   C50805) *
                  C50767 * C251 +
              (((C17198 + C17199 + C17200) * C254 -
                ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                  C16984 * C145 + C16988 * C134 + C16983 * C144) *
                     C248 +
                 (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                  C16984 * C131 + C16988 * C123 + C16983 * C130) *
                     C253) +
                (C17201 + C17202 + C17203) * C249 -
                (C17204 + C17205 + C17206) * C255 -
                (C17207 + C17208 + C17209) * C250) *
                   C16986 +
               ((C17206 + C17205 + C17204) * C254 -
                ((C17203 + C17202 + C17201) * C248 +
                 (C17200 + C17199 + C17198) * C253) +
                (C17209 + C17208 + C17207) * C249 -
                (C16990 * C980 + C16985 * C984 + C16989 * C981 + C16984 * C985 +
                 C16988 * C982 + C16983 * C986) *
                    C255 -
                (C16990 * C988 + C16985 * C992 + C16989 * C989 + C16984 * C993 +
                 C16988 * C990 + C16983 * C994) *
                    C250) *
                   C50805) *
                  C50767 * C50640) *
             C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C16986 +
            ((C17188 + C17187 + C17186) * C121 +
             (C17191 + C17190 + C17189) * C50653) *
                C50805) *
               C50767 * C251 -
           (((C17203 + C17202 + C17201) * C50653 +
             (C17200 + C17199 + C17198) * C121) *
                C50805 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C16986) *
               C50767 * C50640) *
              C394 +
          ((((C16988 * C397 + C16983 * C407 + C16989 * C398 + C16984 * C408 +
              C16990 * C399 + C16985 * C409) *
                 C121 +
             (C16988 * C411 + C16983 * C427 + C16989 * C412 + C16984 * C428 +
              C16990 * C413 + C16985 * C429) *
                 C50653) *
                C16986 +
            ((C16988 * C781 + C16983 * C786 + C16989 * C782 + C16984 * C787 +
              C16990 * C783 + C16985 * C788) *
                 C121 +
             (C16988 * C790 + C16983 * C796 + C16989 * C791 + C16984 * C797 +
              C16990 * C792 + C16985 * C798) *
                 C50653) *
                C50805) *
               C50767 * C50640 -
           (((C16990 * C791 + C16985 * C797 + C16989 * C790 + C16984 * C796 +
              C16988 * C789 + C16983 * C795) *
                 C50653 +
             (C16990 * C782 + C16985 * C787 + C16989 * C781 + C16984 * C786 +
              C16988 * C780 + C16983 * C785) *
                 C121) *
                C50805 +
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50653 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C121) *
                C16986) *
               C50767 * C251) *
              C395 +
          ((((C16988 * C402 + C16983 * C417 + C16989 * C403 + C16984 * C418 +
              C16990 * C404 + C16985 * C419) *
                 C121 +
             (C16988 * C421 + C16983 * C432 + C16989 * C422 + C16984 * C433 +
              C16990 * C423 + C16985 * C434) *
                 C50653) *
                C16986 +
            ((C16988 * C1097 + C16983 * C1101 + C16989 * C1096 +
              C16984 * C1100 + C16990 * C1095 + C16985 * C1099) *
                 C121 +
             (C16988 * C1105 + C16983 * C1109 + C16989 * C1104 +
              C16984 * C1108 + C16990 * C1103 + C16985 * C1107) *
                 C50653) *
                C50805) *
               C50767 * C251 -
           (((C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
              C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                 C50653 +
             (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
              C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                 C121) *
                C50805 +
            ((C16990 * C424 + C16985 * C435 + C16989 * C423 + C16984 * C434 +
              C16988 * C422 + C16983 * C433) *
                 C50653 +
             (C16990 * C405 + C16985 * C420 + C16989 * C404 + C16984 * C419 +
              C16988 * C403 + C16983 * C418) *
                 C121) *
                C16986) *
               C50767 * C50640) *
              C396)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C121 +
            (C19772 * C133 + C50610 * C143) * C50653) *
               C19768 +
           ((C19772 * C259 + C50610 * C269) * C121 +
            (C19772 * C273 + C50610 * C289) * C50653) *
               C19769 +
           ((C19772 * C260 + C50610 * C274) * C121 +
            (C19772 * C278 + C50610 * C290) * C50653) *
               C19770 +
           ((C19772 * C983 + C50610 * C987) * C121 +
            (C19772 * C991 + C50610 * C995) * C50653) *
               C19771) *
              C50767 * C112 -
          (((C19772 * C990 + C50610 * C994) * C50653 +
            (C19772 * C982 + C50610 * C986) * C121) *
               C19771 +
           ((C19772 * C279 + C50610 * C291) * C50653 +
            (C19772 * C261 + C50610 * C275) * C121) *
               C19770 +
           ((C19772 * C272 + C50610 * C288) * C50653 +
            (C19772 * C258 + C50610 * C268) * C121) *
               C19769 +
           ((C19772 * C134 + C50610 * C144) * C50653 +
            (C19772 * C123 + C50610 * C130) * C121) *
               C19768) *
              C50767 * C113 +
          (((C19772 * C124 + C50610 * C131) * C121 +
            (C19772 * C135 + C50610 * C145) * C50653) *
               C19768 +
           ((C19772 * C257 + C50610 * C267) * C121 +
            (C19772 * C271 + C50610 * C287) * C50653) *
               C19769 +
           ((C19772 * C262 + C50610 * C276) * C121 +
            (C19772 * C280 + C50610 * C292) * C50653) *
               C19770 +
           ((C19772 * C981 + C50610 * C985) * C121 +
            (C19772 * C989 + C50610 * C993) * C50653) *
               C19771) *
              C50767 * C114 -
          (((C19772 * C988 + C50610 * C992) * C50653 +
            (C19772 * C980 + C50610 * C984) * C121) *
               C19771 +
           ((C19772 * C281 + C50610 * C293) * C50653 +
            (C19772 * C263 + C50610 * C277) * C121) *
               C19770 +
           ((C19772 * C270 + C50610 * C286) * C50653 +
            (C19772 * C256 + C50610 * C266) * C121) *
               C19769 +
           ((C19772 * C136 + C50610 * C146) * C50653 +
            (C19772 * C125 + C50610 * C132) * C121) *
               C19768) *
              C50767 * C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C19768 +
           (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
            C19908 * C255 + C19909 * C250) *
               C19769 +
           (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
            C19910 * C255 + C19911 * C250) *
               C19770 +
           (C19908 * C253 + C19909 * C248 - C19910 * C254 - C19911 * C249 +
            (C19772 * C3385 + C50610 * C3387) * C255 +
            (C19772 * C3389 + C50610 * C3391) * C250) *
               C19771) *
              C50767 * C251 +
          ((C19912 * C254 -
            ((C19772 * C134 + C50610 * C144) * C248 +
             (C19772 * C123 + C50610 * C130) * C253) +
            C19913 * C249 - C19914 * C255 - C19915 * C250) *
               C19768 +
           (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
            C19916 * C255 - C19917 * C250) *
               C19769 +
           (C19916 * C254 - (C19915 * C248 + C19914 * C253) + C19917 * C249 -
            C19918 * C255 - C19919 * C250) *
               C19770 +
           (C19918 * C254 - (C19917 * C248 + C19916 * C253) + C19919 * C249 -
            (C19772 * C3384 + C50610 * C3386) * C255 -
            (C19772 * C3388 + C50610 * C3390) * C250) *
               C19771) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C19772 * C122 + C50610 * C129) * C121 +
                                 (C19772 * C133 + C50610 * C143) * C50653) *
                                    C19768 +
                                (C19904 * C121 + C19905 * C50653) * C19769 +
                                (C19906 * C121 + C19907 * C50653) * C19770 +
                                (C19908 * C121 + C19909 * C50653) * C19771) *
                                   C50767 * C251 -
                               ((C19917 * C50653 + C19916 * C121) * C19771 +
                                (C19915 * C50653 + C19914 * C121) * C19770 +
                                (C19913 * C50653 + C19912 * C121) * C19769 +
                                ((C19772 * C134 + C50610 * C144) * C50653 +
                                 (C19772 * C123 + C50610 * C130) * C121) *
                                    C19768) *
                                   C50767 * C50640) *
                                  C394 +
                              ((((C19772 * C397 + C50610 * C407) * C121 +
                                 (C19772 * C411 + C50610 * C427) * C50653) *
                                    C19768 +
                                ((C19772 * C781 + C50610 * C786) * C121 +
                                 (C19772 * C790 + C50610 * C796) * C50653) *
                                    C19769 +
                                ((C19772 * C1446 + C50610 * C1450) * C121 +
                                 (C19772 * C1454 + C50610 * C1458) * C50653) *
                                    C19770 +
                                ((C19772 * C3081 + C50610 * C3084) * C121 +
                                 (C19772 * C3086 + C50610 * C3090) * C50653) *
                                    C19771) *
                                   C50767 * C50640 -
                               (((C19772 * C3085 + C50610 * C3089) * C50653 +
                                 (C19772 * C3080 + C50610 * C3083) * C121) *
                                    C19771 +
                                ((C19772 * C1455 + C50610 * C1459) * C50653 +
                                 (C19772 * C1447 + C50610 * C1451) * C121) *
                                    C19770 +
                                ((C19772 * C789 + C50610 * C795) * C50653 +
                                 (C19772 * C780 + C50610 * C785) * C121) *
                                    C19769 +
                                ((C19772 * C415 + C50610 * C431) * C50653 +
                                 (C19772 * C401 + C50610 * C416) * C121) *
                                    C19768) *
                                   C50767 * C251) *
                                  C395 +
                              ((((C19772 * C402 + C50610 * C417) * C121 +
                                 (C19772 * C421 + C50610 * C432) * C50653) *
                                    C19768 +
                                ((C19772 * C1097 + C50610 * C1101) * C121 +
                                 (C19772 * C1105 + C50610 * C1109) * C50653) *
                                    C19769 +
                                ((C19772 * C2558 + C50610 * C2561) * C121 +
                                 (C19772 * C2563 + C50610 * C2567) * C50653) *
                                    C19770 +
                                ((C19772 * C3553 + C50610 * C3555) * C121 +
                                 (C19772 * C3557 + C50610 * C3559) * C50653) *
                                    C19771) *
                                   C50767 * C251 -
                               (((C19772 * C3556 + C50610 * C3558) * C50653 +
                                 (C19772 * C3552 + C50610 * C3554) * C121) *
                                    C19771 +
                                ((C19772 * C2564 + C50610 * C2568) * C50653 +
                                 (C19772 * C2559 + C50610 * C2562) * C121) *
                                    C19770 +
                                ((C19772 * C1104 + C50610 * C1108) * C50653 +
                                 (C19772 * C1096 + C50610 * C1100) * C121) *
                                    C19769 +
                                ((C19772 * C422 + C50610 * C433) * C50653 +
                                 (C19772 * C403 + C50610 * C418) * C121) *
                                    C19768) *
                                   C50767 * C50640) *
                                  C396)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C16986 +
            (C19904 * C121 + C19905 * C50653) * C50805) *
               C5082 +
           (((C19772 * C401 + C50610 * C416) * C121 +
             (C19772 * C415 + C50610 * C431) * C50653) *
                C16986 +
            (C20386 * C121 + C20387 * C50653) * C50805) *
               C5083 +
           (((C19772 * C402 + C50610 * C417) * C121 +
             (C19772 * C421 + C50610 * C432) * C50653) *
                C16986 +
            (C20686 * C121 + C20687 * C50653) * C50805) *
               C5084) *
              C112 -
          ((((C19772 * C1104 + C50610 * C1108) * C50653 +
             (C19772 * C1096 + C50610 * C1100) * C121) *
                C50805 +
            ((C19772 * C422 + C50610 * C433) * C50653 +
             (C19772 * C403 + C50610 * C418) * C121) *
                C16986) *
               C5084 +
           ((C20393 * C50653 + C20392 * C121) * C50805 +
            ((C19772 * C411 + C50610 * C427) * C50653 +
             (C19772 * C397 + C50610 * C407) * C121) *
                C16986) *
               C5083 +
           ((C19913 * C50653 + C19912 * C121) * C50805 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C16986) *
               C5082) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C16986 +
            (C20128 * C121 + C20129 * C50653) * C50805) *
               C5082 +
           (((C19772 * C398 + C50610 * C408) * C121 +
             (C19772 * C412 + C50610 * C428) * C50653) *
                C16986 +
            ((C19772 * C782 + C50610 * C787) * C121 +
             (C19772 * C791 + C50610 * C797) * C50653) *
                C50805) *
               C5083 +
           (((C19772 * C404 + C50610 * C419) * C121 +
             (C19772 * C423 + C50610 * C434) * C50653) *
                C16986 +
            ((C19772 * C1095 + C50610 * C1099) * C121 +
             (C19772 * C1103 + C50610 * C1107) * C50653) *
                C50805) *
               C5084) *
              C114 -
          ((((C19772 * C1102 + C50610 * C1106) * C50653 +
             (C19772 * C1094 + C50610 * C1098) * C121) *
                C50805 +
            ((C19772 * C424 + C50610 * C435) * C50653 +
             (C19772 * C405 + C50610 * C420) * C121) *
                C16986) *
               C5084 +
           (((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C50805 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C16986) *
               C5083 +
           (((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C50805 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C16986) *
               C5082) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C16986 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50805) *
               C5082 +
           (((C19772 * C401 + C50610 * C416) * C253 +
             (C19772 * C415 + C50610 * C431) * C248 - C20386 * C254 -
             C20387 * C249 + C20388 * C255 + C20389 * C250) *
                C16986 +
            (C20386 * C253 + C20387 * C248 - C20388 * C254 - C20389 * C249 +
             C20390 * C255 + C20391 * C250) *
                C50805) *
               C5083 +
           (((C19772 * C402 + C50610 * C417) * C253 +
             (C19772 * C421 + C50610 * C432) * C248 - C20686 * C254 -
             C20687 * C249 + C20688 * C255 + C20689 * C250) *
                C16986 +
            (C20686 * C253 + C20687 * C248 - C20688 * C254 - C20689 * C249 +
             C20690 * C255 + C20691 * C250) *
                C50805) *
               C5084) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C16986 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C50805) *
               C5082 +
           ((C20392 * C254 -
             ((C19772 * C411 + C50610 * C427) * C248 +
              (C19772 * C397 + C50610 * C407) * C253) +
             C20393 * C249 - C20394 * C255 - C20395 * C250) *
                C16986 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C50805) *
               C5083 +
           ((C21872 * C254 -
             ((C19772 * C422 + C50610 * C433) * C248 +
              (C19772 * C403 + C50610 * C418) * C253) +
             C21873 * C249 - C21874 * C255 - C21875 * C250) *
                C16986 +
            (C21874 * C254 - (C21873 * C248 + C21872 * C253) + C21875 * C249 -
             (C19772 * C3552 + C50610 * C3554) * C255 -
             (C19772 * C3556 + C50610 * C3558) * C250) *
                C50805) *
               C5084) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C16986 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C5082 +
            ((C22080 + C22081) * C16986 + (C22026 + C22027) * C50805) * C5083 +
            C22102 * C5084) *
               C251 -
           (C22103 * C5084 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C16986) * C5083 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C16986) *
                C5082) *
               C50640) *
              C394 +
          ((((C22089 + C22088) * C16986 + (C22041 + C22040) * C50805) * C5082 +
            ((C22087 + C22086) * C16986 + (C22035 + C22034) * C50805) * C5083 +
            ((C22090 + C22091) * C16986 + (C22092 + C22093) * C50805) * C5084) *
               C50640 -
           (((C22094 + C22095) * C50805 + (C22096 + C22097) * C16986) * C5084 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C16986) * C5083 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C16986) * C5082) *
               C251) *
              C395 +
          ((C22102 * C5082 +
            ((C22097 + C22096) * C16986 + (C22095 + C22094) * C50805) * C5083 +
            (((C19772 * C5377 + C50610 * C5380) * C121 +
              (C19772 * C5382 + C50610 * C5386) * C50653) *
                 C16986 +
             ((C19772 * C6390 + C50610 * C6392) * C121 +
              (C19772 * C6394 + C50610 * C6396) * C50653) *
                 C50805) *
                C5084) *
               C251 -
           ((((C19772 * C6393 + C50610 * C6395) * C50653 +
              (C19772 * C6389 + C50610 * C6391) * C121) *
                 C50805 +
             ((C19772 * C5383 + C50610 * C5387) * C50653 +
              (C19772 * C5378 + C50610 * C5381) * C121) *
                 C16986) *
                C5084 +
            ((C22093 + C22092) * C50805 + (C22091 + C22090) * C16986) * C5083 +
            C22103 * C5082) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C19768 +
            (C19904 * C121 + C19905 * C50653) * C19769 +
            (C19906 * C121 + C19907 * C50653) * C19770 +
            (C19908 * C121 + C19909 * C50653) * C19771) *
               C50767 * C50939 -
           ((C19917 * C50653 + C19916 * C121) * C19771 +
            (C19915 * C50653 + C19914 * C121) * C19770 +
            (C19913 * C50653 + C19912 * C121) * C19769 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C19768) *
               C50767 * C50940 +
           (((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C19768 +
            (C20128 * C121 + C20129 * C50653) * C19769 +
            (C20130 * C121 + C20131 * C50653) * C19770 +
            (C20132 * C121 + C20133 * C50653) * C19771) *
               C50767 * C539) *
              C50897 +
          ((((C19772 * C397 + C50610 * C407) * C121 +
             (C19772 * C411 + C50610 * C427) * C50653) *
                C19768 +
            ((C19772 * C781 + C50610 * C786) * C121 +
             (C19772 * C790 + C50610 * C796) * C50653) *
                C19769 +
            ((C19772 * C1446 + C50610 * C1450) * C121 +
             (C19772 * C1454 + C50610 * C1458) * C50653) *
                C19770 +
            ((C19772 * C3081 + C50610 * C3084) * C121 +
             (C19772 * C3086 + C50610 * C3090) * C50653) *
                C19771) *
               C50767 * C50940 -
           (((C19772 * C3085 + C50610 * C3089) * C50653 +
             (C19772 * C3080 + C50610 * C3083) * C121) *
                C19771 +
            ((C19772 * C1455 + C50610 * C1459) * C50653 +
             (C19772 * C1447 + C50610 * C1451) * C121) *
                C19770 +
            ((C19772 * C789 + C50610 * C795) * C50653 +
             (C19772 * C780 + C50610 * C785) * C121) *
                C19769 +
            ((C19772 * C415 + C50610 * C431) * C50653 +
             (C19772 * C401 + C50610 * C416) * C121) *
                C19768) *
               C50767 * C50939 -
           (((C19772 * C3088 + C50610 * C3091) * C50653 +
             (C19772 * C3082 + C50610 * C3087) * C121) *
                C19771 +
            ((C19772 * C1453 + C50610 * C1457) * C50653 +
             (C19772 * C1445 + C50610 * C1449) * C121) *
                C19770 +
            ((C19772 * C791 + C50610 * C797) * C50653 +
             (C19772 * C782 + C50610 * C787) * C121) *
                C19769 +
            ((C19772 * C412 + C50610 * C428) * C50653 +
             (C19772 * C398 + C50610 * C408) * C121) *
                C19768) *
               C50767 * C539) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C16986 +
            ((C17188 + C17187 + C17186) * C121 +
             (C17191 + C17190 + C17189) * C50653) *
                C50805) *
               C50767 * C50939 -
           (((C17203 + C17202 + C17201) * C50653 +
             (C17200 + C17199 + C17198) * C121) *
                C50805 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C16986) *
               C50767 * C50940 +
           (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
              C16990 * C126 + C16985 * C138) *
                 C121 +
             (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
              C16990 * C137 + C16985 * C147) *
                 C50653) *
                C16986 +
            ((C17516 + C17515 + C17514) * C121 +
             (C17519 + C17518 + C17517) * C50653) *
                C50805) *
               C50767 * C539) *
              C50897 +
          ((((C16988 * C397 + C16983 * C407 + C16989 * C398 + C16984 * C408 +
              C16990 * C399 + C16985 * C409) *
                 C121 +
             (C16988 * C411 + C16983 * C427 + C16989 * C412 + C16984 * C428 +
              C16990 * C413 + C16985 * C429) *
                 C50653) *
                C16986 +
            ((C16988 * C781 + C16983 * C786 + C16989 * C782 + C16984 * C787 +
              C16990 * C783 + C16985 * C788) *
                 C121 +
             (C16988 * C790 + C16983 * C796 + C16989 * C791 + C16984 * C797 +
              C16990 * C792 + C16985 * C798) *
                 C50653) *
                C50805) *
               C50767 * C50940 -
           (((C16990 * C791 + C16985 * C797 + C16989 * C790 + C16984 * C796 +
              C16988 * C789 + C16983 * C795) *
                 C50653 +
             (C16990 * C782 + C16985 * C787 + C16989 * C781 + C16984 * C786 +
              C16988 * C780 + C16983 * C785) *
                 C121) *
                C50805 +
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50653 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C121) *
                C16986) *
               C50767 * C50939 -
           (((C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
              C16988 * C791 + C16983 * C797) *
                 C50653 +
             (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
              C16988 * C782 + C16983 * C787) *
                 C121) *
                C50805 +
            ((C16990 * C414 + C16985 * C430 + C16989 * C413 + C16984 * C429 +
              C16988 * C412 + C16983 * C428) *
                 C50653 +
             (C16990 * C400 + C16985 * C410 + C16989 * C399 + C16984 * C409 +
              C16988 * C398 + C16983 * C408) *
                 C121) *
                C16986) *
               C50767 * C539) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C16986 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C5082 +
            ((C22080 + C22081) * C16986 + (C22026 + C22027) * C50805) * C5083 +
            C22102 * C5084) *
               C50939 -
           (C22103 * C5084 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C16986) * C5083 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C16986) *
                C5082) *
               C50940 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C16986 +
             (C20128 * C121 + C20129 * C50653) * C50805) *
                C5082 +
            ((C22424 + C22425) * C16986 + (C22412 + C22413) * C50805) * C5083 +
            ((C22426 + C22427) * C16986 + (C22418 + C22419) * C50805) * C5084) *
               C539) *
              C50897 +
          ((((C22089 + C22088) * C16986 + (C22041 + C22040) * C50805) * C5082 +
            ((C22087 + C22086) * C16986 + (C22035 + C22034) * C50805) * C5083 +
            ((C22090 + C22091) * C16986 + (C22092 + C22093) * C50805) * C5084) *
               C50940 -
           (((C22094 + C22095) * C50805 + (C22096 + C22097) * C16986) * C5084 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C16986) * C5083 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C16986) * C5082) *
               C50939 -
           ((((C19772 * C5985 + C50610 * C5986) * C50653 +
              (C19772 * C5983 + C50610 * C5984) * C121) *
                 C50805 +
             ((C19772 * C1733 + C50610 * C1741) * C50653 +
              (C19772 * C1729 + C50610 * C1737) * C121) *
                 C16986) *
                C5084 +
            ((C22419 + C22418) * C50805 + (C22427 + C22426) * C16986) * C5083 +
            ((C22413 + C22412) * C50805 + (C22425 + C22424) * C16986) * C5082) *
               C539) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C253 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C248 -
                     (C17186 + C17187 + C17188) * C254 -
                     (C17189 + C17190 + C17191) * C249 +
                     (C17192 + C17193 + C17194) * C255 +
                     (C17195 + C17196 + C17197) * C250) *
                        C16986 +
                    ((C17188 + C17187 + C17186) * C253 +
                     (C17191 + C17190 + C17189) * C248 -
                     (C17194 + C17193 + C17192) * C254 -
                     (C17197 + C17196 + C17195) * C249 +
                     (C16988 * C983 + C16983 * C987 + C16989 * C982 +
                      C16984 * C986 + C16990 * C981 + C16985 * C985) *
                         C255 +
                     (C16988 * C991 + C16983 * C995 + C16989 * C990 +
                      C16984 * C994 + C16990 * C989 + C16985 * C993) *
                         C250) *
                        C50805) *
                       C50767 * C251 +
                   (((C17198 + C17199 + C17200) * C254 -
                     ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                       C16984 * C145 + C16988 * C134 + C16983 * C144) *
                          C248 +
                      (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                       C16984 * C131 + C16988 * C123 + C16983 * C130) *
                          C253) +
                     (C17201 + C17202 + C17203) * C249 -
                     (C17204 + C17205 + C17206) * C255 -
                     (C17207 + C17208 + C17209) * C250) *
                        C16986 +
                    ((C17206 + C17205 + C17204) * C254 -
                     ((C17203 + C17202 + C17201) * C248 +
                      (C17200 + C17199 + C17198) * C253) +
                     (C17209 + C17208 + C17207) * C249 -
                     (C16990 * C980 + C16985 * C984 + C16989 * C981 +
                      C16984 * C985 + C16988 * C982 + C16983 * C986) *
                         C255 -
                     (C16990 * C988 + C16985 * C992 + C16989 * C989 +
                      C16984 * C993 + C16988 * C990 + C16983 * C994) *
                         C250) *
                        C50805) *
                       C50767 * C50640) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C121 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C50653) *
                        C16986 +
                    ((C16988 * C259 + C16983 * C269 + C16989 * C258 +
                      C16984 * C268 + C16990 * C257 + C16985 * C267) *
                         C121 +
                     (C16988 * C273 + C16983 * C289 + C16989 * C272 +
                      C16984 * C288 + C16990 * C271 + C16985 * C287) *
                         C50653) *
                        C50805) *
                       C50767 * C112 -
                   (((C16990 * C270 + C16985 * C286 + C16989 * C271 +
                      C16984 * C287 + C16988 * C272 + C16983 * C288) *
                         C50653 +
                     (C16990 * C256 + C16985 * C266 + C16989 * C257 +
                      C16984 * C267 + C16988 * C258 + C16983 * C268) *
                         C121) *
                        C50805 +
                    ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                      C16984 * C145 + C16988 * C134 + C16983 * C144) *
                         C50653 +
                     (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                      C16984 * C131 + C16988 * C123 + C16983 * C130) *
                         C121) *
                        C16986) *
                       C50767 * C113 +
                   (((C16988 * C124 + C16983 * C131 + C16989 * C125 +
                      C16984 * C132 + C16990 * C126 + C16985 * C138) *
                         C121 +
                     (C16988 * C135 + C16983 * C145 + C16989 * C136 +
                      C16984 * C146 + C16990 * C137 + C16985 * C147) *
                         C50653) *
                        C16986 +
                    ((C16988 * C257 + C16983 * C267 + C16989 * C256 +
                      C16984 * C266 + C16990 * C264 + C16985 * C282) *
                         C121 +
                     (C16988 * C271 + C16983 * C287 + C16989 * C270 +
                      C16984 * C286 + C16990 * C283 + C16985 * C294) *
                         C50653) *
                        C50805) *
                       C50767 * C114 -
                   (((C16990 * C544 + C16985 * C545 + C16989 * C283 +
                      C16984 * C294 + C16988 * C270 + C16983 * C286) *
                         C50653 +
                     (C16990 * C542 + C16985 * C543 + C16989 * C264 +
                      C16984 * C282 + C16988 * C256 + C16983 * C266) *
                         C121) *
                        C50805 +
                    ((C16990 * C140 + C16985 * C148 + C16989 * C137 +
                      C16984 * C147 + C16988 * C136 + C16983 * C146) *
                         C50653 +
                     (C16990 * C127 + C16985 * C139 + C16989 * C126 +
                      C16984 * C138 + C16988 * C125 + C16983 * C132) *
                         C121) *
                        C16986) *
                       C50767 * C115) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C19772 * C122 + C50610 * C129) * C121 +
                     (C19772 * C133 + C50610 * C143) * C50653) *
                        C19768 +
                    ((C19772 * C259 + C50610 * C269) * C121 +
                     (C19772 * C273 + C50610 * C289) * C50653) *
                        C19769 +
                    ((C19772 * C260 + C50610 * C274) * C121 +
                     (C19772 * C278 + C50610 * C290) * C50653) *
                        C19770 +
                    ((C19772 * C983 + C50610 * C987) * C121 +
                     (C19772 * C991 + C50610 * C995) * C50653) *
                        C19771) *
                       C50767 * C112 -
                   (((C19772 * C990 + C50610 * C994) * C50653 +
                     (C19772 * C982 + C50610 * C986) * C121) *
                        C19771 +
                    ((C19772 * C279 + C50610 * C291) * C50653 +
                     (C19772 * C261 + C50610 * C275) * C121) *
                        C19770 +
                    ((C19772 * C272 + C50610 * C288) * C50653 +
                     (C19772 * C258 + C50610 * C268) * C121) *
                        C19769 +
                    ((C19772 * C134 + C50610 * C144) * C50653 +
                     (C19772 * C123 + C50610 * C130) * C121) *
                        C19768) *
                       C50767 * C113 +
                   (((C19772 * C124 + C50610 * C131) * C121 +
                     (C19772 * C135 + C50610 * C145) * C50653) *
                        C19768 +
                    ((C19772 * C257 + C50610 * C267) * C121 +
                     (C19772 * C271 + C50610 * C287) * C50653) *
                        C19769 +
                    ((C19772 * C262 + C50610 * C276) * C121 +
                     (C19772 * C280 + C50610 * C292) * C50653) *
                        C19770 +
                    ((C19772 * C981 + C50610 * C985) * C121 +
                     (C19772 * C989 + C50610 * C993) * C50653) *
                        C19771) *
                       C50767 * C114 -
                   (((C19772 * C988 + C50610 * C992) * C50653 +
                     (C19772 * C980 + C50610 * C984) * C121) *
                        C19771 +
                    ((C19772 * C281 + C50610 * C293) * C50653 +
                     (C19772 * C263 + C50610 * C277) * C121) *
                        C19770 +
                    ((C19772 * C270 + C50610 * C286) * C50653 +
                     (C19772 * C256 + C50610 * C266) * C121) *
                        C19769 +
                    ((C19772 * C136 + C50610 * C146) * C50653 +
                     (C19772 * C125 + C50610 * C132) * C121) *
                        C19768) *
                       C50767 * C115) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C19772 * C122 + C50610 * C129) * C253 +
                     (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
                     C19905 * C249 + C19906 * C255 + C19907 * C250) *
                        C19768 +
                    (C19904 * C253 + C19905 * C248 - C19906 * C254 -
                     C19907 * C249 + C19908 * C255 + C19909 * C250) *
                        C19769 +
                    (C19906 * C253 + C19907 * C248 - C19908 * C254 -
                     C19909 * C249 + C19910 * C255 + C19911 * C250) *
                        C19770 +
                    (C19908 * C253 + C19909 * C248 - C19910 * C254 -
                     C19911 * C249 + (C19772 * C3385 + C50610 * C3387) * C255 +
                     (C19772 * C3389 + C50610 * C3391) * C250) *
                        C19771) *
                       C50767 * C251 +
                   ((C19912 * C254 -
                     ((C19772 * C134 + C50610 * C144) * C248 +
                      (C19772 * C123 + C50610 * C130) * C253) +
                     C19913 * C249 - C19914 * C255 - C19915 * C250) *
                        C19768 +
                    (C19914 * C254 - (C19913 * C248 + C19912 * C253) +
                     C19915 * C249 - C19916 * C255 - C19917 * C250) *
                        C19769 +
                    (C19916 * C254 - (C19915 * C248 + C19914 * C253) +
                     C19917 * C249 - C19918 * C255 - C19919 * C250) *
                        C19770 +
                    (C19918 * C254 - (C19917 * C248 + C19916 * C253) +
                     C19919 * C249 - (C19772 * C3384 + C50610 * C3386) * C255 -
                     (C19772 * C3388 + C50610 * C3390) * C250) *
                        C19771) *
                       C50767 * C50640) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C121 +
                      (C19772 * C133 + C50610 * C143) * C50653) *
                         C16986 +
                     (C19904 * C121 + C19905 * C50653) * C50805) *
                        C5082 +
                    (((C19772 * C401 + C50610 * C416) * C121 +
                      (C19772 * C415 + C50610 * C431) * C50653) *
                         C16986 +
                     (C20386 * C121 + C20387 * C50653) * C50805) *
                        C5083 +
                    (((C19772 * C402 + C50610 * C417) * C121 +
                      (C19772 * C421 + C50610 * C432) * C50653) *
                         C16986 +
                     (C20686 * C121 + C20687 * C50653) * C50805) *
                        C5084) *
                       C112 -
                   ((((C19772 * C1104 + C50610 * C1108) * C50653 +
                      (C19772 * C1096 + C50610 * C1100) * C121) *
                         C50805 +
                     ((C19772 * C422 + C50610 * C433) * C50653 +
                      (C19772 * C403 + C50610 * C418) * C121) *
                         C16986) *
                        C5084 +
                    ((C20393 * C50653 + C20392 * C121) * C50805 +
                     ((C19772 * C411 + C50610 * C427) * C50653 +
                      (C19772 * C397 + C50610 * C407) * C121) *
                         C16986) *
                        C5083 +
                    ((C19913 * C50653 + C19912 * C121) * C50805 +
                     ((C19772 * C134 + C50610 * C144) * C50653 +
                      (C19772 * C123 + C50610 * C130) * C121) *
                         C16986) *
                        C5082) *
                       C113 +
                   ((((C19772 * C124 + C50610 * C131) * C121 +
                      (C19772 * C135 + C50610 * C145) * C50653) *
                         C16986 +
                     (C20128 * C121 + C20129 * C50653) * C50805) *
                        C5082 +
                    (((C19772 * C398 + C50610 * C408) * C121 +
                      (C19772 * C412 + C50610 * C428) * C50653) *
                         C16986 +
                     ((C19772 * C782 + C50610 * C787) * C121 +
                      (C19772 * C791 + C50610 * C797) * C50653) *
                         C50805) *
                        C5083 +
                    (((C19772 * C404 + C50610 * C419) * C121 +
                      (C19772 * C423 + C50610 * C434) * C50653) *
                         C16986 +
                     ((C19772 * C1095 + C50610 * C1099) * C121 +
                      (C19772 * C1103 + C50610 * C1107) * C50653) *
                         C50805) *
                        C5084) *
                       C114 -
                   ((((C19772 * C1102 + C50610 * C1106) * C50653 +
                      (C19772 * C1094 + C50610 * C1098) * C121) *
                         C50805 +
                     ((C19772 * C424 + C50610 * C435) * C50653 +
                      (C19772 * C405 + C50610 * C420) * C121) *
                         C16986) *
                        C5084 +
                    (((C19772 * C792 + C50610 * C798) * C50653 +
                      (C19772 * C783 + C50610 * C788) * C121) *
                         C50805 +
                     ((C19772 * C413 + C50610 * C429) * C50653 +
                      (C19772 * C399 + C50610 * C409) * C121) *
                         C16986) *
                        C5083 +
                    (((C19772 * C270 + C50610 * C286) * C50653 +
                      (C19772 * C256 + C50610 * C266) * C121) *
                         C50805 +
                     ((C19772 * C136 + C50610 * C146) * C50653 +
                      (C19772 * C125 + C50610 * C132) * C121) *
                         C16986) *
                        C5082) *
                       C115) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C253 +
                      (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
                      C19905 * C249 + C19906 * C255 + C19907 * C250) *
                         C16986 +
                     (C19904 * C253 + C19905 * C248 - C19906 * C254 -
                      C19907 * C249 + C19908 * C255 + C19909 * C250) *
                         C50805) *
                        C5082 +
                    (((C19772 * C401 + C50610 * C416) * C253 +
                      (C19772 * C415 + C50610 * C431) * C248 - C20386 * C254 -
                      C20387 * C249 + C20388 * C255 + C20389 * C250) *
                         C16986 +
                     (C20386 * C253 + C20387 * C248 - C20388 * C254 -
                      C20389 * C249 + C20390 * C255 + C20391 * C250) *
                         C50805) *
                        C5083 +
                    (((C19772 * C402 + C50610 * C417) * C253 +
                      (C19772 * C421 + C50610 * C432) * C248 - C20686 * C254 -
                      C20687 * C249 + C20688 * C255 + C20689 * C250) *
                         C16986 +
                     (C20686 * C253 + C20687 * C248 - C20688 * C254 -
                      C20689 * C249 + C20690 * C255 + C20691 * C250) *
                         C50805) *
                        C5084) *
                       C251 +
                   (((C19912 * C254 -
                      ((C19772 * C134 + C50610 * C144) * C248 +
                       (C19772 * C123 + C50610 * C130) * C253) +
                      C19913 * C249 - C19914 * C255 - C19915 * C250) *
                         C16986 +
                     (C19914 * C254 - (C19913 * C248 + C19912 * C253) +
                      C19915 * C249 - C19916 * C255 - C19917 * C250) *
                         C50805) *
                        C5082 +
                    ((C20392 * C254 -
                      ((C19772 * C411 + C50610 * C427) * C248 +
                       (C19772 * C397 + C50610 * C407) * C253) +
                      C20393 * C249 - C20394 * C255 - C20395 * C250) *
                         C16986 +
                     (C20394 * C254 - (C20393 * C248 + C20392 * C253) +
                      C20395 * C249 - C20396 * C255 - C20397 * C250) *
                         C50805) *
                        C5083 +
                    ((C21872 * C254 -
                      ((C19772 * C422 + C50610 * C433) * C248 +
                       (C19772 * C403 + C50610 * C418) * C253) +
                      C21873 * C249 - C21874 * C255 - C21875 * C250) *
                         C16986 +
                     (C21874 * C254 - (C21873 * C248 + C21872 * C253) +
                      C21875 * C249 - (C19772 * C3552 + C50610 * C3554) * C255 -
                      (C19772 * C3556 + C50610 * C3558) * C250) *
                         C50805) *
                        C5084) *
                       C50640) *
                  C50669) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C1213 +
            (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
            C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
               C19768 +
           (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
            C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
               C19769 +
           (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
            C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
               C19770 +
           (C19908 * C1213 + C19909 * C50941 - C19910 * C1214 -
            C19911 * C50942 + C20570 * C1215 + C20571 * C1210) *
               C19771) *
              C50767 * C50888 +
          ((C19912 * C1214 -
            ((C19772 * C134 + C50610 * C144) * C50941 +
             (C19772 * C123 + C50610 * C130) * C1213) +
            C19913 * C50942 - C19914 * C1215 - C19915 * C1210) *
               C19768 +
           (C19914 * C1214 - (C19913 * C50941 + C19912 * C1213) +
            C19915 * C50942 - C19916 * C1215 - C19917 * C1210) *
               C19769 +
           (C19916 * C1214 - (C19915 * C50941 + C19914 * C1213) +
            C19917 * C50942 - C19918 * C1215 - C19919 * C1210) *
               C19770 +
           (C19918 * C1214 - (C19917 * C50941 + C19916 * C1213) +
            C19919 * C50942 - (C19772 * C3384 + C50610 * C3386) * C1215 -
            (C19772 * C3388 + C50610 * C3390) * C1210) *
               C19771) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C1213 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50941 -
            (C17186 + C17187 + C17188) * C1214 -
            (C17189 + C17190 + C17191) * C50942 +
            (C17192 + C17193 + C17194) * C1215 +
            (C17195 + C17196 + C17197) * C1210) *
               C16986 +
           ((C17188 + C17187 + C17186) * C1213 +
            (C17191 + C17190 + C17189) * C50941 -
            (C17194 + C17193 + C17192) * C1214 -
            (C17197 + C17196 + C17195) * C50942 +
            (C18154 + C18153 + C18152) * C1215 +
            (C18157 + C18156 + C18155) * C1210) *
               C50805) *
              C50767 * C50888 +
          (((C17198 + C17199 + C17200) * C1214 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50941 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C1213) +
            (C17201 + C17202 + C17203) * C50942 -
            (C17204 + C17205 + C17206) * C1215 -
            (C17207 + C17208 + C17209) * C1210) *
               C16986 +
           ((C17206 + C17205 + C17204) * C1214 -
            ((C17203 + C17202 + C17201) * C50941 +
             (C17200 + C17199 + C17198) * C1213) +
            (C17209 + C17208 + C17207) * C50942 -
            (C16990 * C980 + C16985 * C984 + C16989 * C981 + C16984 * C985 +
             C16988 * C982 + C16983 * C986) *
                C1215 -
            (C16990 * C988 + C16985 * C992 + C16989 * C989 + C16984 * C993 +
             C16988 * C990 + C16983 * C994) *
                C1210) *
               C50805) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C16986 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C50805) *
               C5082 +
           ((C22062 * C1213 + C22063 * C50941 - C20386 * C1214 -
             C20387 * C50942 + C20388 * C1215 + C20389 * C1210) *
                C16986 +
            (C20386 * C1213 + C20387 * C50941 - C20388 * C1214 -
             C20389 * C50942 + C20390 * C1215 + C20391 * C1210) *
                C50805) *
               C5083 +
           ((C22064 * C1213 + C22065 * C50941 - C20686 * C1214 -
             C20687 * C50942 + C20688 * C1215 + C20689 * C1210) *
                C16986 +
            (C20686 * C1213 + C20687 * C50941 - C20688 * C1214 -
             C20689 * C50942 + C20690 * C1215 + C20691 * C1210) *
                C50805) *
               C5084) *
              C50888 +
          (((C19912 * C1214 -
             ((C19772 * C134 + C50610 * C144) * C50941 +
              (C19772 * C123 + C50610 * C130) * C1213) +
             C19913 * C50942 - C19914 * C1215 - C19915 * C1210) *
                C16986 +
            (C19914 * C1214 - (C19913 * C50941 + C19912 * C1213) +
             C19915 * C50942 - C19916 * C1215 - C19917 * C1210) *
                C50805) *
               C5082 +
           ((C20392 * C1214 - (C22070 * C50941 + C22071 * C1213) +
             C20393 * C50942 - C20394 * C1215 - C20395 * C1210) *
                C16986 +
            (C20394 * C1214 - (C20393 * C50941 + C20392 * C1213) +
             C20395 * C50942 - C20396 * C1215 - C20397 * C1210) *
                C50805) *
               C5083 +
           ((C21872 * C1214 - (C22068 * C50941 + C22069 * C1213) +
             C21873 * C50942 - C21874 * C1215 - C21875 * C1210) *
                C16986 +
            (C21874 * C1214 - (C21873 * C50941 + C21872 * C1213) +
             C21875 * C50942 - (C19772 * C3552 + C50610 * C3554) * C1215 -
             (C19772 * C3556 + C50610 * C3558) * C1210) *
                C50805) *
               C5084) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C1213 +
            (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
            C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
               C19768 +
           (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
            C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
               C19769 +
           (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
            C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
               C19770 +
           (C19908 * C1213 + C19909 * C50941 - C19910 * C1214 -
            C19911 * C50942 + C20570 * C1215 + C20571 * C1210) *
               C19771) *
              C50767 * C50635 * C50897 +
          ((C20386 * C1214 -
            ((C19772 * C415 + C50610 * C431) * C50941 +
             (C19772 * C401 + C50610 * C416) * C1213) +
            C20387 * C50942 - C20388 * C1215 - C20389 * C1210) *
               C19768 +
           (C20388 * C1214 - (C20387 * C50941 + C20386 * C1213) +
            C20389 * C50942 - C20390 * C1215 - C20391 * C1210) *
               C19769 +
           (C20390 * C1214 - (C20389 * C50941 + C20388 * C1213) +
            C20391 * C50942 - C21026 * C1215 - C21027 * C1210) *
               C19770 +
           (C21026 * C1214 - (C20391 * C50941 + C20390 * C1213) +
            C21027 * C50942 - (C19772 * C21017 + C50610 * C21018) * C1215 -
            (C19772 * C21019 + C50610 * C21020) * C1210) *
               C19771) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C1213 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50941 -
            (C17186 + C17187 + C17188) * C1214 -
            (C17189 + C17190 + C17191) * C50942 +
            (C17192 + C17193 + C17194) * C1215 +
            (C17195 + C17196 + C17197) * C1210) *
               C16986 +
           ((C17188 + C17187 + C17186) * C1213 +
            (C17191 + C17190 + C17189) * C50941 -
            (C17194 + C17193 + C17192) * C1214 -
            (C17197 + C17196 + C17195) * C50942 +
            (C18154 + C18153 + C18152) * C1215 +
            (C18157 + C18156 + C18155) * C1210) *
               C50805) *
              C50767 * C50635 * C50897 +
          (((C17884 + C17885 + C17886) * C1214 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50941 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C1213) +
            (C17887 + C17888 + C17889) * C50942 -
            (C18820 + C18821 + C18822) * C1215 -
            (C18823 + C18824 + C18825) * C1210) *
               C16986 +
           ((C18822 + C18821 + C18820) * C1214 -
            ((C17889 + C17888 + C17887) * C50941 +
             (C17886 + C17885 + C17884) * C1213) +
            (C18825 + C18824 + C18823) * C50942 -
            (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 + C16984 * C3084 +
             C16988 * C3080 + C16983 * C3083) *
                C1215 -
            (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 + C16984 * C3090 +
             C16988 * C3085 + C16983 * C3089) *
                C1210) *
               C50805) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C16986 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C50805) *
               C5082 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C16986 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C50805) *
               C5083 +
           ((C23607 + C23608 - C23609 - C23610 + C23611 + C23612) * C16986 +
            (C23613 + C23614 - C23615 - C23616 + C23617 + C23618) * C50805) *
               C5084) *
              C50635 * C50897 +
          (((C23597 - (C23596 + C23595) + C23598 - C23599 - C23600) * C16986 +
            (C23603 - (C23602 + C23601) + C23604 - C23605 - C23606) * C50805) *
               C5082 +
           ((C23609 - (C23608 + C23607) + C23610 - C23611 - C23612) * C16986 +
            (C23615 - (C23614 + C23613) + C23616 - C23617 - C23618) * C50805) *
               C5083 +
           ((C22077 * C1214 - (C22078 * C50941 + C22079 * C1213) +
             C22076 * C50942 - C23080 * C1215 - C23081 * C1210) *
                C16986 +
            (C23080 * C1214 - (C22076 * C50941 + C22077 * C1213) +
             C23081 * C50942 - (C19772 * C21289 + C50610 * C21291) * C1215 -
             (C19772 * C21290 + C50610 * C21292) * C1210) *
                C50805) *
               C5084) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                 C16990 * C124 + C16985 * C131) *
                    C903 +
                (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                 C16990 * C135 + C16985 * C145) *
                    C898 -
                (C17186 + C17187 + C17188) * C904 -
                (C17189 + C17190 + C17191) * C50705) *
                   C16986 +
               ((C17188 + C17187 + C17186) * C903 +
                (C17191 + C17190 + C17189) * C898 -
                (C17194 + C17193 + C17192) * C904 -
                (C17197 + C17196 + C17195) * C50705) *
                   C50805) *
                  C50767 * C900 +
              (((C17198 + C17199 + C17200) * C904 -
                ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                  C16984 * C145 + C16988 * C134 + C16983 * C144) *
                     C898 +
                 (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                  C16984 * C131 + C16988 * C123 + C16983 * C130) *
                     C903) +
                (C17201 + C17202 + C17203) * C50705) *
                   C16986 +
               ((C17206 + C17205 + C17204) * C904 -
                ((C17203 + C17202 + C17201) * C898 +
                 (C17200 + C17199 + C17198) * C903) +
                (C17209 + C17208 + C17207) * C50705) *
                   C50805) *
                  C50767 * C901 +
              (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
                 C16990 * C126 + C16985 * C138) *
                    C903 +
                (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
                 C16990 * C137 + C16985 * C147) *
                    C898 -
                (C17514 + C17515 + C17516) * C904 -
                (C17517 + C17518 + C17519) * C50705) *
                   C16986 +
               ((C17516 + C17515 + C17514) * C903 +
                (C17519 + C17518 + C17517) * C898 -
                (C16990 * C265 + C16985 * C284 + C16989 * C263 + C16984 * C277 +
                 C16988 * C262 + C16983 * C276) *
                    C904 -
                (C16990 * C285 + C16985 * C295 + C16989 * C281 + C16984 * C293 +
                 C16988 * C280 + C16983 * C292) *
                    C50705) *
                   C50805) *
                  C50767 * C902) *
             C50669 +
         0.5 * std::pow(Pi, 2.5) *
             (((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                C16990 * C124 + C16985 * C131) *
                   C976 +
               (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                C16990 * C135 + C16985 * C145) *
                   C971 -
               (C17186 + C17187 + C17188) * C977 -
               (C17189 + C17190 + C17191) * C972 +
               (C17192 + C17193 + C17194) * C978 +
               (C17195 + C17196 + C17197) * C973 -
               (C18152 + C18153 + C18154) * C979 -
               (C18155 + C18156 + C18157) * C974) *
                  C16986 +
              ((C17188 + C17187 + C17186) * C976 +
               (C17191 + C17190 + C17189) * C971 -
               (C17194 + C17193 + C17192) * C977 -
               (C17197 + C17196 + C17195) * C972 +
               (C18154 + C18153 + C18152) * C978 +
               (C18157 + C18156 + C18155) * C973 -
               (C16990 * C2326 + C16985 * C2331 + C16989 * C2325 +
                C16984 * C2328 + C16988 * C2324 + C16983 * C2327) *
                   C979 -
               (C16990 * C2332 + C16985 * C2335 + C16989 * C2330 +
                C16984 * C2334 + C16988 * C2329 + C16983 * C2333) *
                   C974) *
                  C50805) *
             C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C903 +
            (C17191 + C17190 + C17189) * C898 -
            (C17194 + C17193 + C17192) * C904 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C50635 * C394 +
          (((C17884 + C17885 + C17886) * C904 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C898 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C903) +
            (C17887 + C17888 + C17889) * C50705) *
               C16986 +
           ((C16988 * C1447 + C16983 * C1451 + C16989 * C1446 + C16984 * C1450 +
             C16990 * C1445 + C16985 * C1449) *
                C904 -
            ((C17889 + C17888 + C17887) * C898 +
             (C17886 + C17885 + C17884) * C903) +
            (C16988 * C1455 + C16983 * C1459 + C16989 * C1454 + C16984 * C1458 +
             C16990 * C1453 + C16985 * C1457) *
                C50705) *
               C50805) *
              C50767 * C50635 * C395 +
          (((C16988 * C402 + C16983 * C417 + C16989 * C403 + C16984 * C418 +
             C16990 * C404 + C16985 * C419) *
                C903 +
            (C16988 * C421 + C16983 * C432 + C16989 * C422 + C16984 * C433 +
             C16990 * C423 + C16985 * C434) *
                C898 -
            (C18316 + C18317 + C18318) * C904 -
            (C18319 + C18320 + C18321) * C50705) *
               C16986 +
           ((C18318 + C18317 + C18316) * C903 +
            (C18321 + C18320 + C18319) * C898 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C904 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C50705) *
               C50805) *
              C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
               C19769 +
           (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
               C19770 +
           (C19908 * C903 + C19909 * C898 - C19910 * C904 - C19911 * C50705) *
               C19771) *
              C50767 * C900 +
          ((C19912 * C904 -
            ((C19772 * C134 + C50610 * C144) * C898 +
             (C19772 * C123 + C50610 * C130) * C903) +
            C19913 * C50705) *
               C19768 +
           (C19914 * C904 - (C19913 * C898 + C19912 * C903) + C19915 * C50705) *
               C19769 +
           (C19916 * C904 - (C19915 * C898 + C19914 * C903) + C19917 * C50705) *
               C19770 +
           (C19918 * C904 - (C19917 * C898 + C19916 * C903) + C19919 * C50705) *
               C19771) *
              C50767 * C901 +
          (((C19772 * C124 + C50610 * C131) * C903 +
            (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
            C20129 * C50705) *
               C19768 +
           (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
               C19769 +
           (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
               C19770 +
           (C20132 * C903 + C20133 * C898 -
            (C19772 * C2326 + C50610 * C2331) * C904 -
            (C19772 * C2332 + C50610 * C2335) * C50705) *
               C19771) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C19772 * C122 + C50610 * C129) * C976 +
           (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
           C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
           C19909 * C974) *
              C19768 +
          (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
           C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
              C19769 +
          (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
           C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
              C19770 +
          (C19908 * C976 + C19909 * C971 - C19910 * C977 - C19911 * C972 +
           C20570 * C978 + C20571 * C973 -
           (C19772 * C20561 + C50610 * C20562) * C979 -
           (C19772 * C20563 + C50610 * C20564) * C974) *
              C19771) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
               C19769 +
           (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
               C19770 +
           (C19908 * C903 + C19909 * C898 - C19910 * C904 - C19911 * C50705) *
               C19771) *
              C50767 * C50635 * C394 +
          ((C20386 * C904 -
            ((C19772 * C415 + C50610 * C431) * C898 +
             (C19772 * C401 + C50610 * C416) * C903) +
            C20387 * C50705) *
               C19768 +
           (C20388 * C904 - (C20387 * C898 + C20386 * C903) + C20389 * C50705) *
               C19769 +
           (C20390 * C904 - (C20389 * C898 + C20388 * C903) + C20391 * C50705) *
               C19770 +
           ((C19772 * C4071 + C50610 * C4073) * C904 -
            (C20391 * C898 + C20390 * C903) +
            (C19772 * C4075 + C50610 * C4077) * C50705) *
               C19771) *
              C50767 * C50635 * C395 +
          (((C19772 * C402 + C50610 * C417) * C903 +
            (C19772 * C421 + C50610 * C432) * C898 - C20686 * C904 -
            C20687 * C50705) *
               C19768 +
           (C20686 * C903 + C20687 * C898 - C20688 * C904 - C20689 * C50705) *
               C19769 +
           (C20688 * C903 + C20689 * C898 - C20690 * C904 - C20691 * C50705) *
               C19770 +
           (C20690 * C903 + C20691 * C898 -
            (C19772 * C20669 + C50610 * C20670) * C904 -
            (C19772 * C20671 + C50610 * C20672) * C50705) *
               C19771) *
              C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C16986 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50805) *
               C5082 +
           ((C22062 * C903 + C22063 * C898 - C20386 * C904 - C20387 * C50705) *
                C16986 +
            (C20386 * C903 + C20387 * C898 - C20388 * C904 - C20389 * C50705) *
                C50805) *
               C5083 +
           ((C22064 * C903 + C22065 * C898 - C20686 * C904 - C20687 * C50705) *
                C16986 +
            (C20686 * C903 + C20687 * C898 - C20688 * C904 - C20689 * C50705) *
                C50805) *
               C5084) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C16986 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C50805) *
               C5082 +
           ((C20392 * C904 - (C22070 * C898 + C22071 * C903) +
             C20393 * C50705) *
                C16986 +
            (C20394 * C904 - (C20393 * C898 + C20392 * C903) +
             C20395 * C50705) *
                C50805) *
               C5083 +
           ((C21872 * C904 - (C22068 * C898 + C22069 * C903) +
             C21873 * C50705) *
                C16986 +
            (C21874 * C904 - (C21873 * C898 + C21872 * C903) +
             C21875 * C50705) *
                C50805) *
               C5084) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C16986 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C50805) *
               C5082 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C16986 +
            (C22258 * C903 + C22259 * C898 -
             (C19772 * C1445 + C50610 * C1449) * C904 -
             (C19772 * C1453 + C50610 * C1457) * C50705) *
                C50805) *
               C5083 +
           ((C22422 * C903 + C22423 * C898 - C22260 * C904 - C22261 * C50705) *
                C16986 +
            (C22260 * C903 + C22261 * C898 -
             (C19772 * C2560 + C50610 * C2566) * C904 -
             (C19772 * C2565 + C50610 * C2569) * C50705) *
                C50805) *
               C5084) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C16986 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C50805) *
              C5082 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C16986 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C50805) *
              C5083 +
          ((C22064 * C976 + C22065 * C971 - C20686 * C977 - C20687 * C972 +
            C20688 * C978 + C20689 * C973 - C20690 * C979 - C20691 * C974) *
               C16986 +
           (C20686 * C976 + C20687 * C971 - C20688 * C977 - C20689 * C972 +
            C20690 * C978 + C20691 * C973 -
            (C19772 * C20669 + C50610 * C20670) * C979 -
            (C19772 * C20671 + C50610 * C20672) * C974) *
               C50805) *
              C5084) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C16986 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50805) *
               C5082 +
           ((C23048 + C23049 - C23050 - C23051) * C16986 +
            (C23052 + C23053 - C23054 - C23055) * C50805) *
               C5083 +
           C23092 * C5084) *
              C50635 * C394 +
          (((C23050 - (C23049 + C23048) + C23051) * C16986 +
            (C23054 - (C23053 + C23052) + C23055) * C50805) *
               C5082 +
           ((C23058 - (C23057 + C23056) + C23059) * C16986 +
            (C23062 - (C23061 + C23060) + C23063) * C50805) *
               C5083 +
           ((C23064 - (C23065 + C23066) + C23067) * C16986 +
            (C23086 - (C23070 + C23071) + C23087) * C50805) *
               C5084) *
              C50635 * C395 +
          (C23092 * C5082 +
           ((C23066 + C23065 - C23064 - C23067) * C16986 +
            (C23071 + C23070 - C23086 - C23087) * C50805) *
               C5083 +
           (((C19772 * C5377 + C50610 * C5380) * C903 +
             (C19772 * C5382 + C50610 * C5386) * C898 - C23082 * C904 -
             C23083 * C50705) *
                C16986 +
            (C23082 * C903 + C23083 * C898 -
             (C19772 * C23043 + C50610 * C23044) * C904 -
             (C19772 * C23045 + C50610 * C23046) * C50705) *
                C50805) *
               C5084) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C19768 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C19769 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C19770 +
            (C19908 * C903 + C19909 * C898 - C19910 * C904 - C19911 * C50705) *
                C19771) *
               C50767 * C50888 +
           ((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C19768 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C19769 +
            (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
             C19917 * C50705) *
                C19770 +
            (C19918 * C904 - (C19917 * C898 + C19916 * C903) +
             C19919 * C50705) *
                C19771) *
               C50767 * C50640) *
              C50897 +
          (((C20386 * C904 -
             ((C19772 * C415 + C50610 * C431) * C898 +
              (C19772 * C401 + C50610 * C416) * C903) +
             C20387 * C50705) *
                C19768 +
            (C20388 * C904 - (C20387 * C898 + C20386 * C903) +
             C20389 * C50705) *
                C19769 +
            (C20390 * C904 - (C20389 * C898 + C20388 * C903) +
             C20391 * C50705) *
                C19770 +
            ((C19772 * C4071 + C50610 * C4073) * C904 -
             (C20391 * C898 + C20390 * C903) +
             (C19772 * C4075 + C50610 * C4077) * C50705) *
                C19771) *
               C50767 * C50888 +
           (((C19772 * C397 + C50610 * C407) * C903 +
             (C19772 * C411 + C50610 * C427) * C898 - C20392 * C904 -
             C20393 * C50705) *
                C19768 +
            (C20392 * C903 + C20393 * C898 - C20394 * C904 - C20395 * C50705) *
                C19769 +
            (C20394 * C903 + C20395 * C898 - C20396 * C904 - C20397 * C50705) *
                C19770 +
            (C20396 * C903 + C20397 * C898 -
             (C19772 * C4070 + C50610 * C4072) * C904 -
             (C19772 * C4074 + C50610 * C4076) * C50705) *
                C19771) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C903 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C898 -
             (C17186 + C17187 + C17188) * C904 -
             (C17189 + C17190 + C17191) * C50705) *
                C16986 +
            ((C17188 + C17187 + C17186) * C903 +
             (C17191 + C17190 + C17189) * C898 -
             (C17194 + C17193 + C17192) * C904 -
             (C17197 + C17196 + C17195) * C50705) *
                C50805) *
               C50767 * C50888 +
           (((C17198 + C17199 + C17200) * C904 -
             ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
               C16988 * C134 + C16983 * C144) *
                  C898 +
              (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
               C16988 * C123 + C16983 * C130) *
                  C903) +
             (C17201 + C17202 + C17203) * C50705) *
                C16986 +
            ((C17206 + C17205 + C17204) * C904 -
             ((C17203 + C17202 + C17201) * C898 +
              (C17200 + C17199 + C17198) * C903) +
             (C17209 + C17208 + C17207) * C50705) *
                C50805) *
               C50767 * C50640) *
              C50897 +
          ((((C17884 + C17885 + C17886) * C904 -
             ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
               C16988 * C415 + C16983 * C431) *
                  C898 +
              (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
               C16988 * C401 + C16983 * C416) *
                  C903) +
             (C17887 + C17888 + C17889) * C50705) *
                C16986 +
            ((C16988 * C1447 + C16983 * C1451 + C16989 * C1446 +
              C16984 * C1450 + C16990 * C1445 + C16985 * C1449) *
                 C904 -
             ((C17889 + C17888 + C17887) * C898 +
              (C17886 + C17885 + C17884) * C903) +
             (C16988 * C1455 + C16983 * C1459 + C16989 * C1454 +
              C16984 * C1458 + C16990 * C1453 + C16985 * C1457) *
                 C50705) *
                C50805) *
               C50767 * C50888 +
           (((C16988 * C397 + C16983 * C407 + C16989 * C398 + C16984 * C408 +
              C16990 * C399 + C16985 * C409) *
                 C903 +
             (C16988 * C411 + C16983 * C427 + C16989 * C412 + C16984 * C428 +
              C16990 * C413 + C16985 * C429) *
                 C898 -
             (C17890 + C17891 + C17892) * C904 -
             (C17893 + C17894 + C17895) * C50705) *
                C16986 +
            ((C17892 + C17891 + C17890) * C903 +
             (C17895 + C17894 + C17893) * C898 -
             (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 +
              C16984 * C1449 + C16988 * C1446 + C16983 * C1450) *
                 C904 -
             (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 +
              C16984 * C1457 + C16988 * C1454 + C16983 * C1458) *
                 C50705) *
                C50805) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C903 +
              (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
              C19905 * C50705) *
                 C16986 +
             (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                 C50805) *
                C5082 +
            ((C23048 + C23049 - C23050 - C23051) * C16986 +
             (C23052 + C23053 - C23054 - C23055) * C50805) *
                C5083 +
            C23092 * C5084) *
               C50888 +
           (((C19912 * C904 -
              ((C19772 * C134 + C50610 * C144) * C898 +
               (C19772 * C123 + C50610 * C130) * C903) +
              C19913 * C50705) *
                 C16986 +
             (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
              C19915 * C50705) *
                 C50805) *
                C5082 +
            ((C23433 - (C23434 + C23435) + C23436) * C16986 +
             (C23437 - (C23438 + C23439) + C23440) * C50805) *
                C5083 +
            ((C23441 - (C23442 + C23443) + C23444) * C16986 +
             (C23445 - (C23446 + C23447) + C23448) * C50805) *
                C5084) *
               C50640) *
              C50897 +
          ((((C23050 - (C23049 + C23048) + C23051) * C16986 +
             (C23054 - (C23053 + C23052) + C23055) * C50805) *
                C5082 +
            ((C23058 - (C23057 + C23056) + C23059) * C16986 +
             (C23062 - (C23061 + C23060) + C23063) * C50805) *
                C5083 +
            ((C23064 - (C23065 + C23066) + C23067) * C16986 +
             (C23086 - (C23070 + C23071) + C23087) * C50805) *
                C5084) *
               C50888 +
           (((C23435 + C23434 - C23433 - C23436) * C16986 +
             (C23439 + C23438 - C23437 - C23440) * C50805) *
                C5082 +
            ((C23443 + C23442 - C23441 - C23444) * C16986 +
             (C23447 + C23446 - C23445 - C23448) * C50805) *
                C5083 +
            ((C22072 * C903 + C22073 * C898 - C22074 * C904 - C22075 * C50705) *
                 C16986 +
             (C22074 * C903 + C22075 * C898 -
              (C19772 * C4482 + C50610 * C4488) * C904 -
              (C19772 * C4486 + C50610 * C4494) * C50705) *
                 C50805) *
                C5084) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
            C16990 * C124 + C16985 * C131) *
               C976 +
           (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
            C16990 * C135 + C16985 * C145) *
               C971 -
           (C17186 + C17187 + C17188) * C977 -
           (C17189 + C17190 + C17191) * C972 +
           (C17192 + C17193 + C17194) * C978 +
           (C17195 + C17196 + C17197) * C973 -
           (C18152 + C18153 + C18154) * C979 -
           (C18155 + C18156 + C18157) * C974) *
              C16986 +
          ((C17188 + C17187 + C17186) * C976 +
           (C17191 + C17190 + C17189) * C971 -
           (C17194 + C17193 + C17192) * C977 -
           (C17197 + C17196 + C17195) * C972 +
           (C18154 + C18153 + C18152) * C978 +
           (C18157 + C18156 + C18155) * C973 -
           (C16990 * C2326 + C16985 * C2331 + C16989 * C2325 + C16984 * C2328 +
            C16988 * C2324 + C16983 * C2327) *
               C979 -
           (C16990 * C2332 + C16985 * C2335 + C16989 * C2330 + C16984 * C2334 +
            C16988 * C2329 + C16983 * C2333) *
               C974) *
              C50805) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C903 +
            (C17191 + C17190 + C17189) * C898 -
            (C17194 + C17193 + C17192) * C904 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C900 +
          (((C17198 + C17199 + C17200) * C904 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C898 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C903) +
            (C17201 + C17202 + C17203) * C50705) *
               C16986 +
           ((C17206 + C17205 + C17204) * C904 -
            ((C17203 + C17202 + C17201) * C898 +
             (C17200 + C17199 + C17198) * C903) +
            (C17209 + C17208 + C17207) * C50705) *
               C50805) *
              C50767 * C901 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C903 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C898 -
            (C17514 + C17515 + C17516) * C904 -
            (C17517 + C17518 + C17519) * C50705) *
               C16986 +
           ((C17516 + C17515 + C17514) * C903 +
            (C17519 + C17518 + C17517) * C898 -
            (C16990 * C265 + C16985 * C284 + C16989 * C263 + C16984 * C277 +
             C16988 * C262 + C16983 * C276) *
                C904 -
            (C16990 * C285 + C16985 * C295 + C16989 * C281 + C16984 * C293 +
             C16988 * C280 + C16983 * C292) *
                C50705) *
               C50805) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
               C19769 +
           (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
               C19770 +
           (C19908 * C903 + C19909 * C898 - C19910 * C904 - C19911 * C50705) *
               C19771) *
              C50767 * C900 +
          ((C19912 * C904 -
            ((C19772 * C134 + C50610 * C144) * C898 +
             (C19772 * C123 + C50610 * C130) * C903) +
            C19913 * C50705) *
               C19768 +
           (C19914 * C904 - (C19913 * C898 + C19912 * C903) + C19915 * C50705) *
               C19769 +
           (C19916 * C904 - (C19915 * C898 + C19914 * C903) + C19917 * C50705) *
               C19770 +
           (C19918 * C904 - (C19917 * C898 + C19916 * C903) + C19919 * C50705) *
               C19771) *
              C50767 * C901 +
          (((C19772 * C124 + C50610 * C131) * C903 +
            (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
            C20129 * C50705) *
               C19768 +
           (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
               C19769 +
           (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
               C19770 +
           (C20132 * C903 + C20133 * C898 -
            (C19772 * C2326 + C50610 * C2331) * C904 -
            (C19772 * C2332 + C50610 * C2335) * C50705) *
               C19771) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19772 * C122 + C50610 * C129) * C976 +
           (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
           C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
           C19909 * C974) *
              C19768 +
          (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
           C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
              C19769 +
          (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
           C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
              C19770 +
          (C19908 * C976 + C19909 * C971 - C19910 * C977 - C19911 * C972 +
           C20570 * C978 + C20571 * C973 -
           (C19772 * C20561 + C50610 * C20562) * C979 -
           (C19772 * C20563 + C50610 * C20564) * C974) *
              C19771) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C16986 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50805) *
               C5082 +
           ((C22062 * C903 + C22063 * C898 - C20386 * C904 - C20387 * C50705) *
                C16986 +
            (C20386 * C903 + C20387 * C898 - C20388 * C904 - C20389 * C50705) *
                C50805) *
               C5083 +
           ((C22064 * C903 + C22065 * C898 - C20686 * C904 - C20687 * C50705) *
                C16986 +
            (C20686 * C903 + C20687 * C898 - C20688 * C904 - C20689 * C50705) *
                C50805) *
               C5084) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C16986 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C50805) *
               C5082 +
           ((C20392 * C904 - (C22070 * C898 + C22071 * C903) +
             C20393 * C50705) *
                C16986 +
            (C20394 * C904 - (C20393 * C898 + C20392 * C903) +
             C20395 * C50705) *
                C50805) *
               C5083 +
           ((C21872 * C904 - (C22068 * C898 + C22069 * C903) +
             C21873 * C50705) *
                C16986 +
            (C21874 * C904 - (C21873 * C898 + C21872 * C903) +
             C21875 * C50705) *
                C50805) *
               C5084) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C16986 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C50805) *
               C5082 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C16986 +
            (C22258 * C903 + C22259 * C898 -
             (C19772 * C1445 + C50610 * C1449) * C904 -
             (C19772 * C1453 + C50610 * C1457) * C50705) *
                C50805) *
               C5083 +
           ((C22422 * C903 + C22423 * C898 - C22260 * C904 - C22261 * C50705) *
                C16986 +
            (C22260 * C903 + C22261 * C898 -
             (C19772 * C2560 + C50610 * C2566) * C904 -
             (C19772 * C2565 + C50610 * C2569) * C50705) *
                C50805) *
               C5084) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C16986 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C50805) *
              C5082 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C16986 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C50805) *
              C5083 +
          ((C22064 * C976 + C22065 * C971 - C20686 * C977 - C20687 * C972 +
            C20688 * C978 + C20689 * C973 - C20690 * C979 - C20691 * C974) *
               C16986 +
           (C20686 * C976 + C20687 * C971 - C20688 * C977 - C20689 * C972 +
            C20690 * C978 + C20691 * C973 -
            (C19772 * C20669 + C50610 * C20670) * C979 -
            (C19772 * C20671 + C50610 * C20672) * C974) *
               C50805) *
              C5084) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[115] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C19768 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C19769 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C19770 +
                     (C19908 * C540 + C19909 * C50896 - C19910 * C541 -
                      C19911 * C50705) *
                         C19771) *
                        C50767 * C50888 +
                    ((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C19768 +
                     (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                      C19915 * C50705) *
                         C19769 +
                     (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                      C19917 * C50705) *
                         C19770 +
                     (C19918 * C541 - (C19917 * C50896 + C19916 * C540) +
                      C19919 * C50705) *
                         C19771) *
                        C50767 * C50640) *
                       C1558 +
                   (((C20386 * C541 -
                      ((C19772 * C415 + C50610 * C431) * C50896 +
                       (C19772 * C401 + C50610 * C416) * C540) +
                      C20387 * C50705) *
                         C19768 +
                     (C20388 * C541 - (C20387 * C50896 + C20386 * C540) +
                      C20389 * C50705) *
                         C19769 +
                     (C20390 * C541 - (C20389 * C50896 + C20388 * C540) +
                      C20391 * C50705) *
                         C19770 +
                     (C21026 * C541 - (C20391 * C50896 + C20390 * C540) +
                      C21027 * C50705) *
                         C19771) *
                        C50767 * C50888 +
                    (((C19772 * C397 + C50610 * C407) * C540 +
                      (C19772 * C411 + C50610 * C427) * C50896 - C20392 * C541 -
                      C20393 * C50705) *
                         C19768 +
                     (C20392 * C540 + C20393 * C50896 - C20394 * C541 -
                      C20395 * C50705) *
                         C19769 +
                     (C20394 * C540 + C20395 * C50896 - C20396 * C541 -
                      C20397 * C50705) *
                         C19770 +
                     (C20396 * C540 + C20397 * C50896 -
                      (C19772 * C4070 + C50610 * C4072) * C541 -
                      (C19772 * C4074 + C50610 * C4076) * C50705) *
                         C19771) *
                        C50767 * C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C540 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50896 -
                      (C17186 + C17187 + C17188) * C541 -
                      (C17189 + C17190 + C17191) * C50705) *
                         C16986 +
                     ((C17188 + C17187 + C17186) * C540 +
                      (C17191 + C17190 + C17189) * C50896 -
                      (C17194 + C17193 + C17192) * C541 -
                      (C17197 + C17196 + C17195) * C50705) *
                         C50805) *
                        C50767 * C50888 +
                    (((C17198 + C17199 + C17200) * C541 -
                      ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                        C16984 * C145 + C16988 * C134 + C16983 * C144) *
                           C50896 +
                       (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                        C16984 * C131 + C16988 * C123 + C16983 * C130) *
                           C540) +
                      (C17201 + C17202 + C17203) * C50705) *
                         C16986 +
                     ((C17206 + C17205 + C17204) * C541 -
                      ((C17203 + C17202 + C17201) * C50896 +
                       (C17200 + C17199 + C17198) * C540) +
                      (C17209 + C17208 + C17207) * C50705) *
                         C50805) *
                        C50767 * C50640) *
                       C1558 +
                   ((((C17884 + C17885 + C17886) * C541 -
                      ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                        C16984 * C427 + C16988 * C415 + C16983 * C431) *
                           C50896 +
                       (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                        C16984 * C407 + C16988 * C401 + C16983 * C416) *
                           C540) +
                      (C17887 + C17888 + C17889) * C50705) *
                         C16986 +
                     ((C18822 + C18821 + C18820) * C541 -
                      ((C17889 + C17888 + C17887) * C50896 +
                       (C17886 + C17885 + C17884) * C540) +
                      (C18825 + C18824 + C18823) * C50705) *
                         C50805) *
                        C50767 * C50888 +
                    (((C16988 * C397 + C16983 * C407 + C16989 * C398 +
                       C16984 * C408 + C16990 * C399 + C16985 * C409) *
                          C540 +
                      (C16988 * C411 + C16983 * C427 + C16989 * C412 +
                       C16984 * C428 + C16990 * C413 + C16985 * C429) *
                          C50896 -
                      (C17890 + C17891 + C17892) * C541 -
                      (C17893 + C17894 + C17895) * C50705) *
                         C16986 +
                     ((C17892 + C17891 + C17890) * C540 +
                      (C17895 + C17894 + C17893) * C50896 -
                      (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 +
                       C16984 * C1449 + C16988 * C1446 + C16983 * C1450) *
                          C541 -
                      (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 +
                       C16984 * C1457 + C16988 * C1454 + C16983 * C1458) *
                          C50705) *
                         C50805) *
                        C50767 * C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C16986 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C50805) *
                         C5082 +
                     ((C22622 + C22623 - C22624 - C22625) * C16986 +
                      (C22626 + C22627 - C22628 - C22629) * C50805) *
                         C5083 +
                     ((C22630 + C22631 - C22632 - C22633) * C16986 +
                      (C22634 + C22635 - C22636 - C22637) * C50805) *
                         C5084) *
                        C50888 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C16986 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C50805) *
                         C5082 +
                     ((C22638 - (C22639 + C22640) + C22641) * C16986 +
                      (C22642 - (C22643 + C22644) + C22645) * C50805) *
                         C5083 +
                     ((C22646 - (C22647 + C22648) + C22649) * C16986 +
                      (C22650 - (C22651 + C22652) + C22653) * C50805) *
                         C5084) *
                        C50640) *
                       C1558 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C16986 +
                      (C22628 - (C22627 + C22626) + C22629) * C50805) *
                         C5082 +
                     ((C22632 - (C22631 + C22630) + C22633) * C16986 +
                      (C22636 - (C22635 + C22634) + C22637) * C50805) *
                         C5083 +
                     ((C22077 * C541 - (C22078 * C50896 + C22079 * C540) +
                       C22076 * C50705) *
                          C16986 +
                      (C23080 * C541 - (C22076 * C50896 + C22077 * C540) +
                       C23081 * C50705) *
                          C50805) *
                         C5084) *
                        C50888 +
                    (((C22640 + C22639 - C22638 - C22641) * C16986 +
                      (C22644 + C22643 - C22642 - C22645) * C50805) *
                         C5082 +
                     ((C22648 + C22647 - C22646 - C22649) * C16986 +
                      (C22652 + C22651 - C22650 - C22653) * C50805) *
                         C5083 +
                     ((C22072 * C540 + C22073 * C50896 - C22074 * C541 -
                       C22075 * C50705) *
                          C16986 +
                      (C22074 * C540 + C22075 * C50896 -
                       (C19772 * C4482 + C50610 * C4488) * C541 -
                       (C19772 * C4486 + C50610 * C4494) * C50705) *
                          C50805) *
                         C5084) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C540 +
            (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C540 + C19905 * C50896 - C19906 * C541 - C19907 * C50705) *
               C19769 +
           (C19906 * C540 + C19907 * C50896 - C19908 * C541 - C19909 * C50705) *
               C19770 +
           (C19908 * C540 + C19909 * C50896 - C19910 * C541 - C19911 * C50705) *
               C19771) *
              C50767 * C50635 * C50943 +
          ((C20386 * C541 -
            ((C19772 * C415 + C50610 * C431) * C50896 +
             (C19772 * C401 + C50610 * C416) * C540) +
            C20387 * C50705) *
               C19768 +
           (C20388 * C541 - (C20387 * C50896 + C20386 * C540) +
            C20389 * C50705) *
               C19769 +
           (C20390 * C541 - (C20389 * C50896 + C20388 * C540) +
            C20391 * C50705) *
               C19770 +
           (C21026 * C541 - (C20391 * C50896 + C20390 * C540) +
            C21027 * C50705) *
               C19771) *
              C50767 * C50635 * C50944 +
          (((C19772 * C402 + C50610 * C417) * C540 +
            (C19772 * C421 + C50610 * C432) * C50896 - C20686 * C541 -
            C20687 * C50705) *
               C19768 +
           (C20686 * C540 + C20687 * C50896 - C20688 * C541 - C20689 * C50705) *
               C19769 +
           (C20688 * C540 + C20689 * C50896 - C20690 * C541 - C20691 * C50705) *
               C19770 +
           (C20690 * C540 + C20691 * C50896 -
            (C19772 * C20669 + C50610 * C20670) * C541 -
            (C19772 * C20671 + C50610 * C20672) * C50705) *
               C19771) *
              C50767 * C50635 * C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C540 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50896 -
            (C17186 + C17187 + C17188) * C541 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C540 +
            (C17191 + C17190 + C17189) * C50896 -
            (C17194 + C17193 + C17192) * C541 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C50635 * C50943 +
          (((C17884 + C17885 + C17886) * C541 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50896 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C540) +
            (C17887 + C17888 + C17889) * C50705) *
               C16986 +
           ((C18822 + C18821 + C18820) * C541 -
            ((C17889 + C17888 + C17887) * C50896 +
             (C17886 + C17885 + C17884) * C540) +
            (C18825 + C18824 + C18823) * C50705) *
               C50805) *
              C50767 * C50635 * C50944 +
          (((C16988 * C402 + C16983 * C417 + C16989 * C403 + C16984 * C418 +
             C16990 * C404 + C16985 * C419) *
                C540 +
            (C16988 * C421 + C16983 * C432 + C16989 * C422 + C16984 * C433 +
             C16990 * C423 + C16985 * C434) *
                C50896 -
            (C18316 + C18317 + C18318) * C541 -
            (C18319 + C18320 + C18321) * C50705) *
               C16986 +
           ((C18318 + C18317 + C18316) * C540 +
            (C18321 + C18320 + C18319) * C50896 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C541 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C50705) *
               C50805) *
              C50767 * C50635 * C1974)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C540 +
             (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
             C19905 * C50705) *
                C16986 +
            (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
             C19907 * C50705) *
                C50805) *
               C5082 +
           ((C22622 + C22623 - C22624 - C22625) * C16986 +
            (C22626 + C22627 - C22628 - C22629) * C50805) *
               C5083 +
           C24554 * C5084) *
              C50635 * C50943 +
          (((C22624 - (C22623 + C22622) + C22625) * C16986 +
            (C22628 - (C22627 + C22626) + C22629) * C50805) *
               C5082 +
           ((C22632 - (C22631 + C22630) + C22633) * C16986 +
            (C22636 - (C22635 + C22634) + C22637) * C50805) *
               C5083 +
           ((C24540 - (C24541 + C24542) + C24543) * C16986 +
            (C24544 - (C24545 + C24546) + C24547) * C50805) *
               C5084) *
              C50635 * C50944 +
          (C24554 * C5082 +
           ((C24542 + C24541 - C24540 - C24543) * C16986 +
            (C24546 + C24545 - C24544 - C24547) * C50805) *
               C5083 +
           ((C24047 * C540 + C24048 * C50896 - C23082 * C541 -
             C23083 * C50705) *
                C16986 +
            (C23082 * C540 + C23083 * C50896 -
             (C19772 * C23043 + C50610 * C23044) * C541 -
             (C19772 * C23045 + C50610 * C23046) * C50705) *
                C50805) *
               C5084) *
              C50635 * C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                  C16984 * C130 + C16990 * C124 + C16985 * C131) *
                     C121 +
                 (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                  C16984 * C144 + C16990 * C135 + C16985 * C145) *
                     C50653) *
                    C16986 +
                ((C17188 + C17187 + C17186) * C121 +
                 (C17191 + C17190 + C17189) * C50653) *
                    C50805) *
                   C50767 * C900 -
               (((C17203 + C17202 + C17201) * C50653 +
                 (C17200 + C17199 + C17198) * C121) *
                    C50805 +
                ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                  C16984 * C145 + C16988 * C134 + C16983 * C144) *
                     C50653 +
                 (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                  C16984 * C131 + C16988 * C123 + C16983 * C130) *
                     C121) *
                    C16986) *
                   C50767 * C901 +
               (((C16988 * C124 + C16983 * C131 + C16989 * C125 +
                  C16984 * C132 + C16990 * C126 + C16985 * C138) *
                     C121 +
                 (C16988 * C135 + C16983 * C145 + C16989 * C136 +
                  C16984 * C146 + C16990 * C137 + C16985 * C147) *
                     C50653) *
                    C16986 +
                ((C17516 + C17515 + C17514) * C121 +
                 (C17519 + C17518 + C17517) * C50653) *
                    C50805) *
                   C50767 * C902) *
                  C1558 +
              ((((C16988 * C397 + C16983 * C407 + C16989 * C398 +
                  C16984 * C408 + C16990 * C399 + C16985 * C409) *
                     C121 +
                 (C16988 * C411 + C16983 * C427 + C16989 * C412 +
                  C16984 * C428 + C16990 * C413 + C16985 * C429) *
                     C50653) *
                    C16986 +
                ((C17892 + C17891 + C17890) * C121 +
                 (C17895 + C17894 + C17893) * C50653) *
                    C50805) *
                   C50767 * C901 -
               (((C17889 + C17888 + C17887) * C50653 +
                 (C17886 + C17885 + C17884) * C121) *
                    C50805 +
                ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                  C16984 * C427 + C16988 * C415 + C16983 * C431) *
                     C50653 +
                 (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                  C16984 * C407 + C16988 * C401 + C16983 * C416) *
                     C121) *
                    C16986) *
                   C50767 * C900 -
               (((C16990 * C794 + C16985 * C799 + C16989 * C792 +
                  C16984 * C798 + C16988 * C791 + C16983 * C797) *
                     C50653 +
                 (C16990 * C784 + C16985 * C793 + C16989 * C783 +
                  C16984 * C788 + C16988 * C782 + C16983 * C787) *
                     C121) *
                    C50805 +
                ((C16990 * C414 + C16985 * C430 + C16989 * C413 +
                  C16984 * C429 + C16988 * C412 + C16983 * C428) *
                     C50653 +
                 (C16990 * C400 + C16985 * C410 + C16989 * C399 +
                  C16984 * C409 + C16988 * C398 + C16983 * C408) *
                     C121) *
                    C16986) *
                   C50767 * C902) *
                  C50733) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                 C16990 * C124 + C16985 * C131) *
                    C253 +
                (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                 C16990 * C135 + C16985 * C145) *
                    C248 -
                (C17186 + C17187 + C17188) * C254 -
                (C17189 + C17190 + C17191) * C249 +
                (C17192 + C17193 + C17194) * C255 +
                (C17195 + C17196 + C17197) * C250) *
                   C16986 +
               ((C17188 + C17187 + C17186) * C253 +
                (C17191 + C17190 + C17189) * C248 -
                (C17194 + C17193 + C17192) * C254 -
                (C17197 + C17196 + C17195) * C249 +
                (C18154 + C18153 + C18152) * C255 +
                (C18157 + C18156 + C18155) * C250) *
                   C50805) *
                  C50767 * C50635 * C1558 +
              (((C17884 + C17885 + C17886) * C254 -
                ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                  C16984 * C427 + C16988 * C415 + C16983 * C431) *
                     C248 +
                 (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                  C16984 * C407 + C16988 * C401 + C16983 * C416) *
                     C253) +
                (C17887 + C17888 + C17889) * C249 -
                (C18820 + C18821 + C18822) * C255 -
                (C18823 + C18824 + C18825) * C250) *
                   C16986 +
               ((C18822 + C18821 + C18820) * C254 -
                ((C17889 + C17888 + C17887) * C248 +
                 (C17886 + C17885 + C17884) * C253) +
                (C18825 + C18824 + C18823) * C249 -
                (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 +
                 C16984 * C3084 + C16988 * C3080 + C16983 * C3083) *
                    C255 -
                (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 +
                 C16984 * C3090 + C16988 * C3085 + C16983 * C3089) *
                    C250) *
                   C50805) *
                  C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C121 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50653) *
               C16986 +
           ((C17188 + C17187 + C17186) * C121 +
            (C17191 + C17190 + C17189) * C50653) *
               C50805) *
              C50767 * C50635 * C1724 -
          (((C17889 + C17888 + C17887) * C50653 +
            (C17886 + C17885 + C17884) * C121) *
               C50805 +
           ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
             C16988 * C415 + C16983 * C431) *
                C50653 +
            (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
             C16988 * C401 + C16983 * C416) *
                C121) *
               C16986) *
              C50767 * C50635 * C1725 +
          (((C16988 * C402 + C16983 * C417 + C16989 * C403 + C16984 * C418 +
             C16990 * C404 + C16985 * C419) *
                C121 +
            (C16988 * C421 + C16983 * C432 + C16989 * C422 + C16984 * C433 +
             C16990 * C423 + C16985 * C434) *
                C50653) *
               C16986 +
           ((C18318 + C18317 + C18316) * C121 +
            (C18321 + C18320 + C18319) * C50653) *
               C50805) *
              C50767 * C50635 * C1726 -
          (((C16990 * C5985 + C16985 * C5986 + C16989 * C4490 + C16984 * C4496 +
             C16988 * C4491 + C16983 * C4497) *
                C50653 +
            (C16990 * C5983 + C16985 * C5984 + C16989 * C4484 + C16984 * C4492 +
             C16988 * C4485 + C16983 * C4493) *
                C121) *
               C50805 +
           ((C16990 * C1733 + C16985 * C1741 + C16989 * C1734 + C16984 * C1742 +
             C16988 * C1735 + C16983 * C1743) *
                C50653 +
            (C16990 * C1729 + C16985 * C1737 + C16989 * C1730 + C16984 * C1738 +
             C16988 * C1731 + C16983 * C1739) *
                C121) *
               C16986) *
              C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C19768 +
            (C19904 * C121 + C19905 * C50653) * C19769 +
            (C19906 * C121 + C19907 * C50653) * C19770 +
            (C19908 * C121 + C19909 * C50653) * C19771) *
               C50767 * C900 -
           ((C19917 * C50653 + C19916 * C121) * C19771 +
            (C19915 * C50653 + C19914 * C121) * C19770 +
            (C19913 * C50653 + C19912 * C121) * C19769 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C19768) *
               C50767 * C901 +
           (((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C19768 +
            (C20128 * C121 + C20129 * C50653) * C19769 +
            (C20130 * C121 + C20131 * C50653) * C19770 +
            (C20132 * C121 + C20133 * C50653) * C19771) *
               C50767 * C902) *
              C1558 +
          ((((C19772 * C397 + C50610 * C407) * C121 +
             (C19772 * C411 + C50610 * C427) * C50653) *
                C19768 +
            (C20392 * C121 + C20393 * C50653) * C19769 +
            (C20394 * C121 + C20395 * C50653) * C19770 +
            (C20396 * C121 + C20397 * C50653) * C19771) *
               C50767 * C901 -
           ((C20391 * C50653 + C20390 * C121) * C19771 +
            (C20389 * C50653 + C20388 * C121) * C19770 +
            (C20387 * C50653 + C20386 * C121) * C19769 +
            ((C19772 * C415 + C50610 * C431) * C50653 +
             (C19772 * C401 + C50610 * C416) * C121) *
                C19768) *
               C50767 * C900 -
           (((C19772 * C3088 + C50610 * C3091) * C50653 +
             (C19772 * C3082 + C50610 * C3087) * C121) *
                C19771 +
            ((C19772 * C1453 + C50610 * C1457) * C50653 +
             (C19772 * C1445 + C50610 * C1449) * C121) *
                C19770 +
            ((C19772 * C791 + C50610 * C797) * C50653 +
             (C19772 * C782 + C50610 * C787) * C121) *
                C19769 +
            ((C19772 * C412 + C50610 * C428) * C50653 +
             (C19772 * C398 + C50610 * C408) * C121) *
                C19768) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C19768 +
           (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
            C19908 * C255 + C19909 * C250) *
               C19769 +
           (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
            C19910 * C255 + C19911 * C250) *
               C19770 +
           (C19908 * C253 + C19909 * C248 - C19910 * C254 - C19911 * C249 +
            C20570 * C255 + C20571 * C250) *
               C19771) *
              C50767 * C50635 * C1558 +
          ((C20386 * C254 -
            ((C19772 * C415 + C50610 * C431) * C248 +
             (C19772 * C401 + C50610 * C416) * C253) +
            C20387 * C249 - C20388 * C255 - C20389 * C250) *
               C19768 +
           (C20388 * C254 - (C20387 * C248 + C20386 * C253) + C20389 * C249 -
            C20390 * C255 - C20391 * C250) *
               C19769 +
           (C20390 * C254 - (C20389 * C248 + C20388 * C253) + C20391 * C249 -
            C21026 * C255 - C21027 * C250) *
               C19770 +
           (C21026 * C254 - (C20391 * C248 + C20390 * C253) + C21027 * C249 -
            (C19772 * C21017 + C50610 * C21018) * C255 -
            (C19772 * C21019 + C50610 * C21020) * C250) *
               C19771) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C19772 * C122 + C50610 * C129) * C121 +
                                (C19772 * C133 + C50610 * C143) * C50653) *
                                   C19768 +
                               (C19904 * C121 + C19905 * C50653) * C19769 +
                               (C19906 * C121 + C19907 * C50653) * C19770 +
                               (C19908 * C121 + C19909 * C50653) * C19771) *
                                  C50767 * C50635 * C1724 -
                              ((C20391 * C50653 + C20390 * C121) * C19771 +
                               (C20389 * C50653 + C20388 * C121) * C19770 +
                               (C20387 * C50653 + C20386 * C121) * C19769 +
                               ((C19772 * C415 + C50610 * C431) * C50653 +
                                (C19772 * C401 + C50610 * C416) * C121) *
                                   C19768) *
                                  C50767 * C50635 * C1725 +
                              (((C19772 * C402 + C50610 * C417) * C121 +
                                (C19772 * C421 + C50610 * C432) * C50653) *
                                   C19768 +
                               (C20686 * C121 + C20687 * C50653) * C19769 +
                               (C20688 * C121 + C20689 * C50653) * C19770 +
                               (C20690 * C121 + C20691 * C50653) * C19771) *
                                  C50767 * C50635 * C1726 -
                              (((C19772 * C21290 + C50610 * C21292) * C50653 +
                                (C19772 * C21289 + C50610 * C21291) * C121) *
                                   C19771 +
                               ((C19772 * C4487 + C50610 * C4495) * C50653 +
                                (C19772 * C4483 + C50610 * C4489) * C121) *
                                   C19770 +
                               ((C19772 * C4491 + C50610 * C4497) * C50653 +
                                (C19772 * C4485 + C50610 * C4493) * C121) *
                                   C19769 +
                               ((C19772 * C1735 + C50610 * C1743) * C50653 +
                                (C19772 * C1731 + C50610 * C1739) * C121) *
                                   C19768) *
                                  C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C16986 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C5082 +
            ((C22080 + C22081) * C16986 + (C22026 + C22027) * C50805) * C5083 +
            C22102 * C5084) *
               C900 -
           (C22103 * C5084 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C16986) * C5083 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C16986) *
                C5082) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C16986 +
             (C20128 * C121 + C20129 * C50653) * C50805) *
                C5082 +
            ((C22424 + C22425) * C16986 + (C22412 + C22413) * C50805) * C5083 +
            ((C22426 + C22427) * C16986 + (C22418 + C22419) * C50805) * C5084) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C16986 + (C22041 + C22040) * C50805) * C5082 +
            ((C22087 + C22086) * C16986 + (C22035 + C22034) * C50805) * C5083 +
            ((C22090 + C22091) * C16986 + (C22092 + C22093) * C50805) * C5084) *
               C901 -
           (((C22094 + C22095) * C50805 + (C22096 + C22097) * C16986) * C5084 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C16986) * C5083 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C16986) * C5082) *
               C900 -
           ((((C19772 * C5985 + C50610 * C5986) * C50653 +
              (C19772 * C5983 + C50610 * C5984) * C121) *
                 C50805 +
             ((C19772 * C1733 + C50610 * C1741) * C50653 +
              (C19772 * C1729 + C50610 * C1737) * C121) *
                 C16986) *
                C5084 +
            ((C22419 + C22418) * C50805 + (C22427 + C22426) * C16986) * C5083 +
            ((C22413 + C22412) * C50805 + (C22425 + C22424) * C16986) * C5082) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C16986 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50805) *
               C5082 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C16986 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50805) *
               C5083 +
           ((C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C16986 +
            (C23929 + C23930 - C23931 - C23932 + C23933 + C23934) * C50805) *
               C5084) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C16986 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C50805) *
               C5082 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C16986 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C50805) *
               C5083 +
           ((C22077 * C254 - (C22078 * C248 + C22079 * C253) + C22076 * C249 -
             C23080 * C255 - C23081 * C250) *
                C16986 +
            (C23080 * C254 - (C22076 * C248 + C22077 * C253) + C23081 * C249 -
             (C19772 * C21289 + C50610 * C21291) * C255 -
             (C19772 * C21290 + C50610 * C21292) * C250) *
                C50805) *
               C5084) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C16986 +
            (C19904 * C121 + C19905 * C50653) * C50805) *
               C5082 +
           ((C22080 + C22081) * C16986 + (C22026 + C22027) * C50805) * C5083 +
           C22102 * C5084) *
              C50635 * C1724 -
          (C24049 * C5084 +
           ((C22033 + C22032) * C50805 + (C22083 + C22082) * C16986) * C5083 +
           ((C22027 + C22026) * C50805 + (C22081 + C22080) * C16986) * C5082) *
              C50635 * C1725 +
          (C22102 * C5082 +
           ((C22097 + C22096) * C16986 + (C22095 + C22094) * C50805) * C5083 +
           ((C24050 + C24051) * C16986 + (C24043 + C24044) * C50805) * C5084) *
              C50635 * C1726 -
          ((((C19772 * C24033 + C50610 * C24035) * C50653 +
             (C19772 * C24032 + C50610 * C24034) * C121) *
                C50805 +
            ((C19772 * C7298 + C50610 * C7302) * C50653 +
             (C19772 * C7296 + C50610 * C7300) * C121) *
                C16986) *
               C5084 +
           ((C24044 + C24043) * C50805 + (C24051 + C24050) * C16986) * C5083 +
           C24049 * C5082) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C19768 +
            (C19904 * C121 + C19905 * C50653) * C19769 +
            (C19906 * C121 + C19907 * C50653) * C19770 +
            (C19908 * C121 + C19909 * C50653) * C19771) *
               C50767 * C50888 -
           ((C19917 * C50653 + C19916 * C121) * C19771 +
            (C19915 * C50653 + C19914 * C121) * C19770 +
            (C19913 * C50653 + C19912 * C121) * C19769 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C19768) *
               C50767 * C50640) *
              C50943 +
          ((((C19772 * C397 + C50610 * C407) * C121 +
             (C19772 * C411 + C50610 * C427) * C50653) *
                C19768 +
            (C20392 * C121 + C20393 * C50653) * C19769 +
            (C20394 * C121 + C20395 * C50653) * C19770 +
            (C20396 * C121 + C20397 * C50653) * C19771) *
               C50767 * C50640 -
           ((C20391 * C50653 + C20390 * C121) * C19771 +
            (C20389 * C50653 + C20388 * C121) * C19770 +
            (C20387 * C50653 + C20386 * C121) * C19769 +
            ((C19772 * C415 + C50610 * C431) * C50653 +
             (C19772 * C401 + C50610 * C416) * C121) *
                C19768) *
               C50767 * C50888) *
              C50944 +
          ((((C19772 * C402 + C50610 * C417) * C121 +
             (C19772 * C421 + C50610 * C432) * C50653) *
                C19768 +
            (C20686 * C121 + C20687 * C50653) * C19769 +
            (C20688 * C121 + C20689 * C50653) * C19770 +
            (C20690 * C121 + C20691 * C50653) * C19771) *
               C50767 * C50888 -
           (((C19772 * C3556 + C50610 * C3558) * C50653 +
             (C19772 * C3552 + C50610 * C3554) * C121) *
                C19771 +
            ((C19772 * C2564 + C50610 * C2568) * C50653 +
             (C19772 * C2559 + C50610 * C2562) * C121) *
                C19770 +
            ((C19772 * C1104 + C50610 * C1108) * C50653 +
             (C19772 * C1096 + C50610 * C1100) * C121) *
                C19769 +
            ((C19772 * C422 + C50610 * C433) * C50653 +
             (C19772 * C403 + C50610 * C418) * C121) *
                C19768) *
               C50767 * C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C16986 +
            ((C17188 + C17187 + C17186) * C121 +
             (C17191 + C17190 + C17189) * C50653) *
                C50805) *
               C50767 * C50888 -
           (((C17203 + C17202 + C17201) * C50653 +
             (C17200 + C17199 + C17198) * C121) *
                C50805 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C16986) *
               C50767 * C50640) *
              C50943 +
          ((((C16988 * C397 + C16983 * C407 + C16989 * C398 + C16984 * C408 +
              C16990 * C399 + C16985 * C409) *
                 C121 +
             (C16988 * C411 + C16983 * C427 + C16989 * C412 + C16984 * C428 +
              C16990 * C413 + C16985 * C429) *
                 C50653) *
                C16986 +
            ((C17892 + C17891 + C17890) * C121 +
             (C17895 + C17894 + C17893) * C50653) *
                C50805) *
               C50767 * C50640 -
           (((C17889 + C17888 + C17887) * C50653 +
             (C17886 + C17885 + C17884) * C121) *
                C50805 +
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50653 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C121) *
                C16986) *
               C50767 * C50888) *
              C50944 +
          ((((C16988 * C402 + C16983 * C417 + C16989 * C403 + C16984 * C418 +
              C16990 * C404 + C16985 * C419) *
                 C121 +
             (C16988 * C421 + C16983 * C432 + C16989 * C422 + C16984 * C433 +
              C16990 * C423 + C16985 * C434) *
                 C50653) *
                C16986 +
            ((C18318 + C18317 + C18316) * C121 +
             (C18321 + C18320 + C18319) * C50653) *
                C50805) *
               C50767 * C50888 -
           (((C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
              C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                 C50653 +
             (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
              C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                 C121) *
                C50805 +
            ((C16990 * C424 + C16985 * C435 + C16989 * C423 + C16984 * C434 +
              C16988 * C422 + C16983 * C433) *
                 C50653 +
             (C16990 * C405 + C16985 * C420 + C16989 * C404 + C16984 * C419 +
              C16988 * C403 + C16983 * C418) *
                 C121) *
                C16986) *
               C50767 * C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C16986 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C5082 +
            ((C22080 + C22081) * C16986 + (C22026 + C22027) * C50805) * C5083 +
            C22102 * C5084) *
               C50888 -
           (C22103 * C5084 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C16986) * C5083 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C16986) *
                C5082) *
               C50640) *
              C50943 +
          ((((C22089 + C22088) * C16986 + (C22041 + C22040) * C50805) * C5082 +
            ((C22087 + C22086) * C16986 + (C22035 + C22034) * C50805) * C5083 +
            ((C22090 + C22091) * C16986 + (C22092 + C22093) * C50805) * C5084) *
               C50640 -
           (C24049 * C5084 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C16986) * C5083 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C16986) * C5082) *
               C50888) *
              C50944 +
          ((C22102 * C5082 +
            ((C22097 + C22096) * C16986 + (C22095 + C22094) * C50805) * C5083 +
            ((C24050 + C24051) * C16986 + (C24043 + C24044) * C50805) * C5084) *
               C50888 -
           ((((C19772 * C6393 + C50610 * C6395) * C50653 +
              (C19772 * C6389 + C50610 * C6391) * C121) *
                 C50805 +
             ((C19772 * C5383 + C50610 * C5387) * C50653 +
              (C19772 * C5378 + C50610 * C5381) * C121) *
                 C16986) *
                C5084 +
            ((C22093 + C22092) * C50805 + (C22091 + C22090) * C16986) * C5083 +
            C22103 * C5082) *
               C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C16986 +
           ((C17188 + C17187 + C17186) * C253 +
            (C17191 + C17190 + C17189) * C248 -
            (C17194 + C17193 + C17192) * C254 -
            (C17197 + C17196 + C17195) * C249 +
            (C18154 + C18153 + C18152) * C255 +
            (C18157 + C18156 + C18155) * C250) *
               C50805) *
              C50767 * C50635 * C1558 +
          (((C17884 + C17885 + C17886) * C254 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C248 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C253) +
            (C17887 + C17888 + C17889) * C249 -
            (C18820 + C18821 + C18822) * C255 -
            (C18823 + C18824 + C18825) * C250) *
               C16986 +
           ((C18822 + C18821 + C18820) * C254 -
            ((C17889 + C17888 + C17887) * C248 +
             (C17886 + C17885 + C17884) * C253) +
            (C18825 + C18824 + C18823) * C249 -
            (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 + C16984 * C3084 +
             C16988 * C3080 + C16983 * C3083) *
                C255 -
            (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 + C16984 * C3090 +
             C16988 * C3085 + C16983 * C3089) *
                C250) *
               C50805) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C16986 +
            ((C17188 + C17187 + C17186) * C121 +
             (C17191 + C17190 + C17189) * C50653) *
                C50805) *
               C50767 * C900 -
           (((C17203 + C17202 + C17201) * C50653 +
             (C17200 + C17199 + C17198) * C121) *
                C50805 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C16986) *
               C50767 * C901 +
           (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
              C16990 * C126 + C16985 * C138) *
                 C121 +
             (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
              C16990 * C137 + C16985 * C147) *
                 C50653) *
                C16986 +
            ((C17516 + C17515 + C17514) * C121 +
             (C17519 + C17518 + C17517) * C50653) *
                C50805) *
               C50767 * C902) *
              C1558 +
          ((((C16988 * C397 + C16983 * C407 + C16989 * C398 + C16984 * C408 +
              C16990 * C399 + C16985 * C409) *
                 C121 +
             (C16988 * C411 + C16983 * C427 + C16989 * C412 + C16984 * C428 +
              C16990 * C413 + C16985 * C429) *
                 C50653) *
                C16986 +
            ((C17892 + C17891 + C17890) * C121 +
             (C17895 + C17894 + C17893) * C50653) *
                C50805) *
               C50767 * C901 -
           (((C17889 + C17888 + C17887) * C50653 +
             (C17886 + C17885 + C17884) * C121) *
                C50805 +
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50653 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C121) *
                C16986) *
               C50767 * C900 -
           (((C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
              C16988 * C791 + C16983 * C797) *
                 C50653 +
             (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
              C16988 * C782 + C16983 * C787) *
                 C121) *
                C50805 +
            ((C16990 * C414 + C16985 * C430 + C16989 * C413 + C16984 * C429 +
              C16988 * C412 + C16983 * C428) *
                 C50653 +
             (C16990 * C400 + C16985 * C410 + C16989 * C399 + C16984 * C409 +
              C16988 * C398 + C16983 * C408) *
                 C121) *
                C16986) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C19768 +
            (C19904 * C121 + C19905 * C50653) * C19769 +
            (C19906 * C121 + C19907 * C50653) * C19770 +
            (C19908 * C121 + C19909 * C50653) * C19771) *
               C50767 * C900 -
           ((C19917 * C50653 + C19916 * C121) * C19771 +
            (C19915 * C50653 + C19914 * C121) * C19770 +
            (C19913 * C50653 + C19912 * C121) * C19769 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C19768) *
               C50767 * C901 +
           (((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C19768 +
            (C20128 * C121 + C20129 * C50653) * C19769 +
            (C20130 * C121 + C20131 * C50653) * C19770 +
            (C20132 * C121 + C20133 * C50653) * C19771) *
               C50767 * C902) *
              C1558 +
          ((((C19772 * C397 + C50610 * C407) * C121 +
             (C19772 * C411 + C50610 * C427) * C50653) *
                C19768 +
            (C20392 * C121 + C20393 * C50653) * C19769 +
            (C20394 * C121 + C20395 * C50653) * C19770 +
            (C20396 * C121 + C20397 * C50653) * C19771) *
               C50767 * C901 -
           ((C20391 * C50653 + C20390 * C121) * C19771 +
            (C20389 * C50653 + C20388 * C121) * C19770 +
            (C20387 * C50653 + C20386 * C121) * C19769 +
            ((C19772 * C415 + C50610 * C431) * C50653 +
             (C19772 * C401 + C50610 * C416) * C121) *
                C19768) *
               C50767 * C900 -
           (((C19772 * C3088 + C50610 * C3091) * C50653 +
             (C19772 * C3082 + C50610 * C3087) * C121) *
                C19771 +
            ((C19772 * C1453 + C50610 * C1457) * C50653 +
             (C19772 * C1445 + C50610 * C1449) * C121) *
                C19770 +
            ((C19772 * C791 + C50610 * C797) * C50653 +
             (C19772 * C782 + C50610 * C787) * C121) *
                C19769 +
            ((C19772 * C412 + C50610 * C428) * C50653 +
             (C19772 * C398 + C50610 * C408) * C121) *
                C19768) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C19768 +
           (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
            C19908 * C255 + C19909 * C250) *
               C19769 +
           (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
            C19910 * C255 + C19911 * C250) *
               C19770 +
           (C19908 * C253 + C19909 * C248 - C19910 * C254 - C19911 * C249 +
            C20570 * C255 + C20571 * C250) *
               C19771) *
              C50767 * C50635 * C1558 +
          ((C20386 * C254 -
            ((C19772 * C415 + C50610 * C431) * C248 +
             (C19772 * C401 + C50610 * C416) * C253) +
            C20387 * C249 - C20388 * C255 - C20389 * C250) *
               C19768 +
           (C20388 * C254 - (C20387 * C248 + C20386 * C253) + C20389 * C249 -
            C20390 * C255 - C20391 * C250) *
               C19769 +
           (C20390 * C254 - (C20389 * C248 + C20388 * C253) + C20391 * C249 -
            C21026 * C255 - C21027 * C250) *
               C19770 +
           (C21026 * C254 - (C20391 * C248 + C20390 * C253) + C21027 * C249 -
            (C19772 * C21017 + C50610 * C21018) * C255 -
            (C19772 * C21019 + C50610 * C21020) * C250) *
               C19771) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C16986 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C5082 +
            ((C22080 + C22081) * C16986 + (C22026 + C22027) * C50805) * C5083 +
            C22102 * C5084) *
               C900 -
           (C22103 * C5084 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C16986) * C5083 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C16986) *
                C5082) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C16986 +
             (C20128 * C121 + C20129 * C50653) * C50805) *
                C5082 +
            ((C22424 + C22425) * C16986 + (C22412 + C22413) * C50805) * C5083 +
            ((C22426 + C22427) * C16986 + (C22418 + C22419) * C50805) * C5084) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C16986 + (C22041 + C22040) * C50805) * C5082 +
            ((C22087 + C22086) * C16986 + (C22035 + C22034) * C50805) * C5083 +
            ((C22090 + C22091) * C16986 + (C22092 + C22093) * C50805) * C5084) *
               C901 -
           (((C22094 + C22095) * C50805 + (C22096 + C22097) * C16986) * C5084 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C16986) * C5083 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C16986) * C5082) *
               C900 -
           ((((C19772 * C5985 + C50610 * C5986) * C50653 +
              (C19772 * C5983 + C50610 * C5984) * C121) *
                 C50805 +
             ((C19772 * C1733 + C50610 * C1741) * C50653 +
              (C19772 * C1729 + C50610 * C1737) * C121) *
                 C16986) *
                C5084 +
            ((C22419 + C22418) * C50805 + (C22427 + C22426) * C16986) * C5083 +
            ((C22413 + C22412) * C50805 + (C22425 + C22424) * C16986) * C5082) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C16986 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50805) *
               C5082 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C16986 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50805) *
               C5083 +
           ((C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C16986 +
            (C23929 + C23930 - C23931 - C23932 + C23933 + C23934) * C50805) *
               C5084) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C16986 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C50805) *
               C5082 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C16986 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C50805) *
               C5083 +
           ((C22077 * C254 - (C22078 * C248 + C22079 * C253) + C22076 * C249 -
             C23080 * C255 - C23081 * C250) *
                C16986 +
            (C23080 * C254 - (C22076 * C248 + C22077 * C253) + C23081 * C249 -
             (C19772 * C21289 + C50610 * C21291) * C255 -
             (C19772 * C21290 + C50610 * C21292) * C250) *
                C50805) *
               C5084) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C540 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50896 -
             (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                C16986 +
            ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
             (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
             (C25571 + C25570) * C541 - (C25573 + C25572) * C50705) *
                C16986 +
            ((C25570 + C25571) * C540 + (C25572 + C25573) * C50896 -
             C26500 * C541 - C26501 * C50705) *
                C50805) *
               C50831) *
              C50939 +
          ((((C24866 + C24867) * C541 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50896 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C540) +
             (C24868 + C24869) * C50705) *
                C16986 +
            ((C24871 + C24870) * C541 -
             ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
             (C24873 + C24872) * C50705) *
                C50805) *
               C50910 +
           (((C25579 + C25578) * C541 -
             ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
             (C25581 + C25580) * C50705) *
                C16986 +
            ((C25583 + C25582) * C541 -
             ((C25580 + C25581) * C50896 + (C25578 + C25579) * C540) +
             (C25585 + C25584) * C50705) *
                C50805) *
               C50831) *
              C50940 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C540 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50896 -
             (C25190 + C25191) * C541 - (C25192 + C25193) * C50705) *
                C16986 +
            ((C25191 + C25190) * C540 + (C25193 + C25192) * C50896 -
             (C25194 + C25195) * C541 - (C25196 + C25197) * C50705) *
                C50805) *
               C50910 +
           (((C49768 * C398 + C50881 * C408 + C49761 * C399 + C50615 * C409) *
                 C540 +
             (C49768 * C412 + C50881 * C428 + C49761 * C413 + C50615 * C429) *
                 C50896 -
             (C28170 + C28171) * C541 - (C28172 + C28173) * C50705) *
                C16986 +
            ((C28171 + C28170) * C540 + (C28173 + C28172) * C50896 -
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C541 -
             (C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C539) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C540 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50896 -
              (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                 C16986 +
             ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
              (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                 C50805) *
                C50910 +
            (((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
              C28638 * C541 - C28639 * C50705) *
                 C16986 +
             (C28640 * C540 + C28641 * C50896 - C26500 * C541 -
              C26501 * C50705) *
                 C50805) *
                C50831) *
               C251 +
           ((((C24866 + C24867) * C541 -
              ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                   C50896 +
               (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                   C540) +
              (C24868 + C24869) * C50705) *
                 C16986 +
             ((C24871 + C24870) * C541 -
              ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
              (C24873 + C24872) * C50705) *
                 C50805) *
                C50910 +
            ((C28642 * C541 -
              ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
              C28643 * C50705) *
                 C16986 +
             ((C25583 + C25582) * C541 - (C28644 * C50896 + C28645 * C540) +
              (C25585 + C25584) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50897 +
          ((((C28640 * C541 -
              ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
              C28641 * C50705) *
                 C16986 +
             ((C25574 + C25575) * C541 - (C28639 * C50896 + C28638 * C540) +
              (C25576 + C25577) * C50705) *
                 C50805) *
                C50910 +
            (((C26007 + C26006) * C541 -
              ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
              (C26009 + C26008) * C50705) *
                 C16986 +
             ((C26011 + C26010) * C541 -
              ((C26008 + C26009) * C50896 + (C26006 + C26007) * C540) +
              (C26013 + C26012) * C50705) *
                 C50805) *
                C50831) *
               C251 +
           ((((C27955 + C27954) * C540 + (C27953 + C27952) * C50896 -
              C28645 * C541 - C28644 * C50705) *
                 C16986 +
             (C28642 * C540 + C28643 * C50896 - (C25582 + C25583) * C541 -
              (C25584 + C25585) * C50705) *
                 C50805) *
                C50910 +
            (((C27956 + C27957) * C540 + (C27958 + C27959) * C50896 -
              (C27961 + C27960) * C541 - (C27963 + C27962) * C50705) *
                 C16986 +
             ((C27960 + C27961) * C540 + (C27962 + C27963) * C50896 -
              (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
               C50881 * C2562) *
                  C541 -
              (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
               C50881 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C253 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C248 -
             (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
             C24878 * C255 + C24879 * C250) *
                C16986 +
            ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
             (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
             (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
                C50805) *
               C50910 +
           (((C49768 * C401 + C50881 * C416 + C49761 * C397 + C50615 * C407) *
                 C253 +
             (C49768 * C415 + C50881 * C431 + C49761 * C411 + C50615 * C427) *
                 C248 -
             (C25571 + C25570) * C254 - (C25573 + C25572) * C249 +
             (C25574 + C25575) * C255 + (C25576 + C25577) * C250) *
                C16986 +
            ((C25570 + C25571) * C253 + (C25572 + C25573) * C248 -
             C26500 * C254 - C26501 * C249 + (C26511 + C26510) * C255 +
             (C26513 + C26512) * C250) *
                C50805) *
               C50831) *
              C251 +
          ((((C24866 + C24867) * C254 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C248 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C253) +
             (C24868 + C24869) * C249 - C24880 * C255 - C24881 * C250) *
                C16986 +
            ((C24871 + C24870) * C254 -
             ((C24869 + C24868) * C248 + (C24867 + C24866) * C253) +
             (C24873 + C24872) * C249 - (C24874 + C24875) * C255 -
             (C24876 + C24877) * C250) *
                C50805) *
               C50910 +
           (((C25579 + C25578) * C254 -
             ((C49761 * C412 + C50615 * C428 + C49768 * C411 + C50881 * C427) *
                  C248 +
              (C49761 * C398 + C50615 * C408 + C49768 * C397 + C50881 * C407) *
                  C253) +
             (C25581 + C25580) * C249 - (C25582 + C25583) * C255 -
             (C25584 + C25585) * C250) *
                C16986 +
            ((C25583 + C25582) * C254 -
             ((C25580 + C25581) * C248 + (C25578 + C25579) * C253) +
             (C25585 + C25584) * C249 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C255 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C250) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C16986 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
               C50910 +
           (((C49768 * C401 + C50881 * C416 + C49761 * C397 + C50615 * C407) *
                 C121 +
             (C49768 * C415 + C50881 * C431 + C49761 * C411 + C50615 * C427) *
                 C50653) *
                C16986 +
            ((C25570 + C25571) * C121 + (C25572 + C25573) * C50653) * C50805) *
               C50831) *
              C112 -
          ((((C25580 + C25581) * C50653 + (C25578 + C25579) * C121) * C50805 +
            ((C49761 * C412 + C50615 * C428 + C49768 * C411 + C50881 * C427) *
                 C50653 +
             (C49761 * C398 + C50615 * C408 + C49768 * C397 + C50881 * C407) *
                 C121) *
                C16986) *
               C50831 +
           (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C16986) *
               C50910) *
              C113 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C16986 +
            ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
               C50910 +
           (((C49768 * C398 + C50881 * C408 + C49761 * C399 + C50615 * C409) *
                 C121 +
             (C49768 * C412 + C50881 * C428 + C49761 * C413 + C50615 * C429) *
                 C50653) *
                C16986 +
            ((C49768 * C782 + C50881 * C787 + C49761 * C783 + C50615 * C788) *
                 C121 +
             (C49768 * C791 + C50881 * C797 + C49761 * C792 + C50615 * C798) *
                 C50653) *
                C50805) *
               C50831) *
              C114 -
          ((((C49761 * C794 + C50615 * C799 + C49768 * C792 + C50881 * C798) *
                 C50653 +
             (C49761 * C784 + C50615 * C793 + C49768 * C783 + C50881 * C788) *
                 C121) *
                C50805 +
            ((C49761 * C414 + C50615 * C430 + C49768 * C413 + C50881 * C429) *
                 C50653 +
             (C49761 * C400 + C50615 * C410 + C49768 * C399 + C50881 * C409) *
                 C121) *
                C16986) *
               C50831 +
           (((C49761 * C283 + C50615 * C294 + C49768 * C270 + C50881 * C286) *
                 C50653 +
             (C49761 * C264 + C50615 * C282 + C49768 * C256 + C50881 * C266) *
                 C121) *
                C50805 +
            ((C49761 * C137 + C50615 * C147 + C49768 * C136 + C50881 * C146) *
                 C50653 +
             (C49761 * C126 + C50615 * C138 + C49768 * C125 + C50881 * C132) *
                 C121) *
                C16986) *
               C50910) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C16986 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C50910 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C16986 +
             ((C25570 + C25571) * C121 + (C25572 + C25573) * C50653) * C50805) *
                C50831) *
               C251 -
           ((((C25580 + C25581) * C50653 + (C25578 + C25579) * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C16986) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C16986) *
                C50910) *
               C50640) *
              C394 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C16986 +
             ((C25579 + C25578) * C121 + (C25581 + C25580) * C50653) * C50805) *
                C50910 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C16986 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C50640 -
           ((((C26008 + C26009) * C50653 + (C26006 + C26007) * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C16986) *
                C50831 +
            (((C25573 + C25572) * C50653 + (C25571 + C25570) * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C16986) *
                C50910) *
               C251) *
              C395 +
          (((((C27967 + C27966) * C121 + (C27965 + C27964) * C50653) * C16986 +
             ((C26007 + C26006) * C121 + (C26009 + C26008) * C50653) * C50805) *
                C50910 +
            (((C49768 * C1731 + C50881 * C1739 + C49761 * C1730 +
               C50615 * C1738) *
                  C121 +
              (C49768 * C1735 + C50881 * C1743 + C49761 * C1734 +
               C50615 * C1742) *
                  C50653) *
                 C16986 +
             ((C49768 * C4485 + C50881 * C4493 + C49761 * C4484 +
               C50615 * C4492) *
                  C121 +
              (C49768 * C4491 + C50881 * C4497 + C49761 * C4490 +
               C50615 * C4496) *
                  C50653) *
                 C50805) *
                C50831) *
               C251 -
           ((((C49761 * C5985 + C50615 * C5986 + C49768 * C4490 +
               C50881 * C4496) *
                  C50653 +
              (C49761 * C5983 + C50615 * C5984 + C49768 * C4484 +
               C50881 * C4492) *
                  C121) *
                 C50805 +
             ((C49761 * C1733 + C50615 * C1741 + C49768 * C1734 +
               C50881 * C1742) *
                  C50653 +
              (C49761 * C1729 + C50615 * C1737 + C49768 * C1730 +
               C50881 * C1738) *
                  C121) *
                 C16986) *
                C50831 +
            (((C27963 + C27962) * C50653 + (C27961 + C27960) * C121) * C50805 +
             ((C27959 + C27958) * C50653 + (C27957 + C27956) * C121) * C16986) *
                C50910) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C16986 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C50910 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C16986 +
             ((C25570 + C25571) * C121 + (C25572 + C25573) * C50653) * C50805) *
                C50831) *
               C50939 -
           ((((C25580 + C25581) * C50653 + (C25578 + C25579) * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C16986) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C16986) *
                C50910) *
               C50940 +
           ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                  C121 +
              (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                  C50653) *
                 C16986 +
             ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
                C50910 +
            (((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C16986 +
             ((C28171 + C28170) * C121 + (C28173 + C28172) * C50653) * C50805) *
                C50831) *
               C539) *
              C50897 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C16986 +
             ((C25579 + C25578) * C121 + (C25581 + C25580) * C50653) * C50805) *
                C50910 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C16986 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C50940 -
           ((((C26008 + C26009) * C50653 + (C26006 + C26007) * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C16986) *
                C50831 +
            (((C25573 + C25572) * C50653 + (C25571 + C25570) * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C16986) *
                C50910) *
               C50939 -
           ((((C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
               C50881 * C1107) *
                  C50653 +
              (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
               C50881 * C1099) *
                  C121) *
                 C50805 +
             ((C49761 * C424 + C50615 * C435 + C49768 * C423 + C50881 * C434) *
                  C50653 +
              (C49761 * C405 + C50615 * C420 + C49768 * C404 + C50881 * C419) *
                  C121) *
                 C16986) *
                C50831 +
            (((C28172 + C28173) * C50653 + (C28170 + C28171) * C121) * C50805 +
             ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C16986) *
                C50910) *
               C539) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C16986 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
               C50910 +
           (((C49768 * C401 + C50881 * C416 + C49761 * C397 + C50615 * C407) *
                 C121 +
             (C49768 * C415 + C50881 * C431 + C49761 * C411 + C50615 * C427) *
                 C50653) *
                C16986 +
            ((C25570 + C25571) * C121 + (C25572 + C25573) * C50653) * C50805) *
               C50831) *
              C112 -
          ((((C25580 + C25581) * C50653 + (C25578 + C25579) * C121) * C50805 +
            ((C49761 * C412 + C50615 * C428 + C49768 * C411 + C50881 * C427) *
                 C50653 +
             (C49761 * C398 + C50615 * C408 + C49768 * C397 + C50881 * C407) *
                 C121) *
                C16986) *
               C50831 +
           (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C16986) *
               C50910) *
              C113 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C16986 +
            ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
               C50910 +
           (((C49768 * C398 + C50881 * C408 + C49761 * C399 + C50615 * C409) *
                 C121 +
             (C49768 * C412 + C50881 * C428 + C49761 * C413 + C50615 * C429) *
                 C50653) *
                C16986 +
            ((C49768 * C782 + C50881 * C787 + C49761 * C783 + C50615 * C788) *
                 C121 +
             (C49768 * C791 + C50881 * C797 + C49761 * C792 + C50615 * C798) *
                 C50653) *
                C50805) *
               C50831) *
              C114 -
          ((((C49761 * C794 + C50615 * C799 + C49768 * C792 + C50881 * C798) *
                 C50653 +
             (C49761 * C784 + C50615 * C793 + C49768 * C783 + C50881 * C788) *
                 C121) *
                C50805 +
            ((C49761 * C414 + C50615 * C430 + C49768 * C413 + C50881 * C429) *
                 C50653 +
             (C49761 * C400 + C50615 * C410 + C49768 * C399 + C50881 * C409) *
                 C121) *
                C16986) *
               C50831 +
           (((C49761 * C283 + C50615 * C294 + C49768 * C270 + C50881 * C286) *
                 C50653 +
             (C49761 * C264 + C50615 * C282 + C49768 * C256 + C50881 * C266) *
                 C121) *
                C50805 +
            ((C49761 * C137 + C50615 * C147 + C49768 * C136 + C50881 * C146) *
                 C50653 +
             (C49761 * C126 + C50615 * C138 + C49768 * C125 + C50881 * C132) *
                 C121) *
                C16986) *
               C50910) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C253 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C248 -
             (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
             C24878 * C255 + C24879 * C250) *
                C16986 +
            ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
             (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
             (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
                C50805) *
               C50910 +
           (((C49768 * C401 + C50881 * C416 + C49761 * C397 + C50615 * C407) *
                 C253 +
             (C49768 * C415 + C50881 * C431 + C49761 * C411 + C50615 * C427) *
                 C248 -
             (C25571 + C25570) * C254 - (C25573 + C25572) * C249 +
             (C25574 + C25575) * C255 + (C25576 + C25577) * C250) *
                C16986 +
            ((C25570 + C25571) * C253 + (C25572 + C25573) * C248 -
             C26500 * C254 - C26501 * C249 + (C26511 + C26510) * C255 +
             (C26513 + C26512) * C250) *
                C50805) *
               C50831) *
              C251 +
          ((((C24866 + C24867) * C254 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C248 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C253) +
             (C24868 + C24869) * C249 - C24880 * C255 - C24881 * C250) *
                C16986 +
            ((C24871 + C24870) * C254 -
             ((C24869 + C24868) * C248 + (C24867 + C24866) * C253) +
             (C24873 + C24872) * C249 - (C24874 + C24875) * C255 -
             (C24876 + C24877) * C250) *
                C50805) *
               C50910 +
           (((C25579 + C25578) * C254 -
             ((C49761 * C412 + C50615 * C428 + C49768 * C411 + C50881 * C427) *
                  C248 +
              (C49761 * C398 + C50615 * C408 + C49768 * C397 + C50881 * C407) *
                  C253) +
             (C25581 + C25580) * C249 - (C25582 + C25583) * C255 -
             (C25584 + C25585) * C250) *
                C16986 +
            ((C25583 + C25582) * C254 -
             ((C25580 + C25581) * C248 + (C25578 + C25579) * C253) +
             (C25585 + C25584) * C249 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C255 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C250) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C1213 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50941 -
             (C24854 + C24855) * C1214 - (C24856 + C24857) * C50942 +
             C24878 * C1215 + C24879 * C1210) *
                C16986 +
            ((C24855 + C24854) * C1213 + (C24857 + C24856) * C50941 -
             (C24859 + C24858) * C1214 - (C24861 + C24860) * C50942 +
             (C24862 + C24863) * C1215 + (C24864 + C24865) * C1210) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C1213 + (C27950 + C27951) * C50941 -
             C28638 * C1214 - C28639 * C50942 + (C25574 + C25575) * C1215 +
             (C25576 + C25577) * C1210) *
                C16986 +
            (C28640 * C1213 + C28641 * C50941 - C26500 * C1214 -
             C26501 * C50942 + (C26511 + C26510) * C1215 +
             (C26513 + C26512) * C1210) *
                C50805) *
               C50831) *
              C50888 +
          ((((C24866 + C24867) * C1214 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50941 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C1213) +
             (C24868 + C24869) * C50942 - C24880 * C1215 - C24881 * C1210) *
                C16986 +
            ((C24871 + C24870) * C1214 -
             ((C24869 + C24868) * C50941 + (C24867 + C24866) * C1213) +
             (C24873 + C24872) * C50942 - (C24874 + C24875) * C1215 -
             (C24876 + C24877) * C1210) *
                C50805) *
               C50910 +
           ((C28642 * C1214 -
             ((C27952 + C27953) * C50941 + (C27954 + C27955) * C1213) +
             C28643 * C50942 - (C25582 + C25583) * C1215 -
             (C25584 + C25585) * C1210) *
                C16986 +
            ((C25583 + C25582) * C1214 - (C28644 * C50941 + C28645 * C1213) +
             (C25585 + C25584) * C50942 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C1215 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C1210) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C1213 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50941 -
             (C24854 + C24855) * C1214 - (C24856 + C24857) * C50942 +
             C24878 * C1215 + C24879 * C1210) *
                C16986 +
            ((C24855 + C24854) * C1213 + (C24857 + C24856) * C50941 -
             (C24859 + C24858) * C1214 - (C24861 + C24860) * C50942 +
             (C24862 + C24863) * C1215 + (C24864 + C24865) * C1210) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C1213 + (C27950 + C27951) * C50941 -
             C28638 * C1214 - C28639 * C50942 + C29826 * C1215 +
             C29827 * C1210) *
                C16986 +
            (C28640 * C1213 + C28641 * C50941 - C26500 * C1214 -
             C26501 * C50942 + (C26511 + C26510) * C1215 +
             (C26513 + C26512) * C1210) *
                C50805) *
               C50831) *
              C50635 * C50897 +
          (((C28640 * C1214 -
             ((C27951 + C27950) * C50941 + (C27949 + C27948) * C1213) +
             C28641 * C50942 - C26500 * C1215 - C26501 * C1210) *
                C16986 +
            (C29826 * C1214 - (C28639 * C50941 + C28638 * C1213) +
             C29827 * C50942 - (C26510 + C26511) * C1215 -
             (C26512 + C26513) * C1210) *
                C50805) *
               C50910 +
           ((C29164 * C1214 -
             ((C27964 + C27965) * C50941 + (C27966 + C27967) * C1213) +
             C29165 * C50942 - (C26010 + C26011) * C1215 -
             (C26012 + C26013) * C1210) *
                C16986 +
            ((C26011 + C26010) * C1214 - (C29166 * C50941 + C29167 * C1213) +
             (C26013 + C26012) * C50942 -
             (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 +
              C50881 * C3555) *
                 C1215 -
             (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 +
              C50881 * C3559) *
                 C1210) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C976 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C971 -
            (C24854 + C24855) * C977 - (C24856 + C24857) * C972 +
            C24878 * C978 + C24879 * C973 - C25830 * C979 - C25831 * C974) *
               C16986 +
           ((C24855 + C24854) * C976 + (C24857 + C24856) * C971 -
            (C24859 + C24858) * C977 - (C24861 + C24860) * C972 +
            (C24862 + C24863) * C978 + (C24864 + C24865) * C973 -
            (C25840 + C25841) * C979 - (C25842 + C25843) * C974) *
               C50805) *
              C50910 +
          (((C27948 + C27949) * C976 + (C27950 + C27951) * C971 -
            C28638 * C977 - C28639 * C972 + (C25574 + C25575) * C978 +
            (C25576 + C25577) * C973 - (C26510 + C26511) * C979 -
            (C26512 + C26513) * C974) *
               C16986 +
           (C28640 * C976 + C28641 * C971 - C26500 * C977 - C26501 * C972 +
            (C26511 + C26510) * C978 + (C26513 + C26512) * C973 -
            (C49761 * C4070 + C50615 * C4072 + C49768 * C4071 +
             C50881 * C4073) *
                C979 -
            (C49761 * C4074 + C50615 * C4076 + C49768 * C4075 +
             C50881 * C4077) *
                C974) *
               C50805) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C903 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C898 -
             (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                C16986 +
            ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
             (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
             C28638 * C904 - C28639 * C50705) *
                C16986 +
            (C28640 * C903 + C28641 * C898 - C26500 * C904 - C26501 * C50705) *
                C50805) *
               C50831) *
              C900 +
          ((((C24866 + C24867) * C904 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C898 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C903) +
             (C24868 + C24869) * C50705) *
                C16986 +
            ((C24871 + C24870) * C904 -
             ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
             (C24873 + C24872) * C50705) *
                C50805) *
               C50910 +
           ((C28642 * C904 -
             ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
             C28643 * C50705) *
                C16986 +
            ((C25583 + C25582) * C904 - (C28644 * C898 + C28645 * C903) +
             (C25585 + C25584) * C50705) *
                C50805) *
               C50831) *
              C901 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C903 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C898 -
             (C25190 + C25191) * C904 - (C25192 + C25193) * C50705) *
                C16986 +
            ((C25191 + C25190) * C903 + (C25193 + C25192) * C898 -
             (C25194 + C25195) * C904 - (C25196 + C25197) * C50705) *
                C50805) *
               C50910 +
           (((C28376 + C28377) * C903 + (C28378 + C28379) * C898 -
             (C28170 + C28171) * C904 - (C28172 + C28173) * C50705) *
                C16986 +
            ((C28171 + C28170) * C903 + (C28173 + C28172) * C898 -
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C904 -
             (C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C903 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C898 -
             (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                C16986 +
            ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
             (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
             C28638 * C904 - C28639 * C50705) *
                C16986 +
            (C28640 * C903 + C28641 * C898 - C26500 * C904 - C26501 * C50705) *
                C50805) *
               C50831) *
              C50635 * C394 +
          (((C28640 * C904 -
             ((C27951 + C27950) * C898 + (C27949 + C27948) * C903) +
             C28641 * C50705) *
                C16986 +
            ((C25574 + C25575) * C904 - (C28639 * C898 + C28638 * C903) +
             (C25576 + C25577) * C50705) *
                C50805) *
               C50910 +
           ((C29164 * C904 -
             ((C27964 + C27965) * C898 + (C27966 + C27967) * C903) +
             C29165 * C50705) *
                C16986 +
            ((C26011 + C26010) * C904 - (C29166 * C898 + C29167 * C903) +
             (C26013 + C26012) * C50705) *
                C50805) *
               C50831) *
              C50635 * C395 +
          ((((C27967 + C27966) * C903 + (C27965 + C27964) * C898 -
             C29167 * C904 - C29166 * C50705) *
                C16986 +
            (C29164 * C903 + C29165 * C898 - (C26010 + C26011) * C904 -
             (C26012 + C26013) * C50705) *
                C50805) *
               C50910 +
           (((C49768 * C1731 + C50881 * C1739 + C49761 * C1730 +
              C50615 * C1738) *
                 C903 +
             (C49768 * C1735 + C50881 * C1743 + C49761 * C1734 +
              C50615 * C1742) *
                 C898 -
             (C29176 + C29177) * C904 - (C29178 + C29179) * C50705) *
                C16986 +
            ((C29177 + C29176) * C903 + (C29179 + C29178) * C898 -
             (C49761 * C4482 + C50615 * C4488 + C49768 * C4483 +
              C50881 * C4489) *
                 C904 -
             (C49761 * C4486 + C50615 * C4494 + C49768 * C4487 +
              C50881 * C4495) *
                 C50705) *
                C50805) *
               C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C903 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C898 -
              (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                 C16986 +
             ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
              (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                 C50805) *
                C50910 +
            (((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
              C28638 * C904 - C28639 * C50705) *
                 C16986 +
             (C28640 * C903 + C28641 * C898 - C26500 * C904 - C26501 * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C24866 + C24867) * C904 -
              ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                   C898 +
               (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                   C903) +
              (C24868 + C24869) * C50705) *
                 C16986 +
             ((C24871 + C24870) * C904 -
              ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
              (C24873 + C24872) * C50705) *
                 C50805) *
                C50910 +
            ((C28642 * C904 -
              ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
              C28643 * C50705) *
                 C16986 +
             ((C25583 + C25582) * C904 - (C28644 * C898 + C28645 * C903) +
              (C25585 + C25584) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50897 +
          ((((C28640 * C904 -
              ((C27951 + C27950) * C898 + (C27949 + C27948) * C903) +
              C28641 * C50705) *
                 C16986 +
             ((C25574 + C25575) * C904 - (C28639 * C898 + C28638 * C903) +
              (C25576 + C25577) * C50705) *
                 C50805) *
                C50910 +
            ((C29164 * C904 -
              ((C27964 + C27965) * C898 + (C27966 + C27967) * C903) +
              C29165 * C50705) *
                 C16986 +
             ((C26011 + C26010) * C904 - (C29166 * C898 + C29167 * C903) +
              (C26013 + C26012) * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C27955 + C27954) * C903 + (C27953 + C27952) * C898 -
              C28645 * C904 - C28644 * C50705) *
                 C16986 +
             (C28642 * C903 + C28643 * C898 - (C25582 + C25583) * C904 -
              (C25584 + C25585) * C50705) *
                 C50805) *
                C50910 +
            (((C27956 + C27957) * C903 + (C27958 + C27959) * C898 -
              (C27961 + C27960) * C904 - (C27963 + C27962) * C50705) *
                 C16986 +
             ((C27960 + C27961) * C903 + (C27962 + C27963) * C898 -
              (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
               C50881 * C2562) *
                  C904 -
              (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
               C50881 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C903 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C898 -
             (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                C16986 +
            ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
             (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
             C28638 * C904 - C28639 * C50705) *
                C16986 +
            (C28640 * C903 + C28641 * C898 - C26500 * C904 - C26501 * C50705) *
                C50805) *
               C50831) *
              C900 +
          ((((C24866 + C24867) * C904 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C898 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C903) +
             (C24868 + C24869) * C50705) *
                C16986 +
            ((C24871 + C24870) * C904 -
             ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
             (C24873 + C24872) * C50705) *
                C50805) *
               C50910 +
           ((C28642 * C904 -
             ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
             C28643 * C50705) *
                C16986 +
            ((C25583 + C25582) * C904 - (C28644 * C898 + C28645 * C903) +
             (C25585 + C25584) * C50705) *
                C50805) *
               C50831) *
              C901 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C903 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C898 -
             (C25190 + C25191) * C904 - (C25192 + C25193) * C50705) *
                C16986 +
            ((C25191 + C25190) * C903 + (C25193 + C25192) * C898 -
             (C25194 + C25195) * C904 - (C25196 + C25197) * C50705) *
                C50805) *
               C50910 +
           (((C28376 + C28377) * C903 + (C28378 + C28379) * C898 -
             (C28170 + C28171) * C904 - (C28172 + C28173) * C50705) *
                C16986 +
            ((C28171 + C28170) * C903 + (C28173 + C28172) * C898 -
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C904 -
             (C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C976 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C971 -
            (C24854 + C24855) * C977 - (C24856 + C24857) * C972 +
            C24878 * C978 + C24879 * C973 - C25830 * C979 - C25831 * C974) *
               C16986 +
           ((C24855 + C24854) * C976 + (C24857 + C24856) * C971 -
            (C24859 + C24858) * C977 - (C24861 + C24860) * C972 +
            (C24862 + C24863) * C978 + (C24864 + C24865) * C973 -
            (C25840 + C25841) * C979 - (C25842 + C25843) * C974) *
               C50805) *
              C50910 +
          (((C27948 + C27949) * C976 + (C27950 + C27951) * C971 -
            C28638 * C977 - C28639 * C972 + (C25574 + C25575) * C978 +
            (C25576 + C25577) * C973 - (C26510 + C26511) * C979 -
            (C26512 + C26513) * C974) *
               C16986 +
           (C28640 * C976 + C28641 * C971 - C26500 * C977 - C26501 * C972 +
            (C26511 + C26510) * C978 + (C26513 + C26512) * C973 -
            (C49761 * C4070 + C50615 * C4072 + C49768 * C4071 +
             C50881 * C4073) *
                C979 -
            (C49761 * C4074 + C50615 * C4076 + C49768 * C4075 +
             C50881 * C4077) *
                C974) *
               C50805) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C540 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50896 -
              (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                 C16986 +
             ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
              (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                 C50805) *
                C50910 +
            (((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
              C28638 * C541 - C28639 * C50705) *
                 C16986 +
             (C28640 * C540 + C28641 * C50896 - C26500 * C541 -
              C26501 * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C24866 + C24867) * C541 -
              ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                   C50896 +
               (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                   C540) +
              (C24868 + C24869) * C50705) *
                 C16986 +
             ((C24871 + C24870) * C541 -
              ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
              (C24873 + C24872) * C50705) *
                 C50805) *
                C50910 +
            ((C28642 * C541 -
              ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
              C28643 * C50705) *
                 C16986 +
             ((C25583 + C25582) * C541 - (C28644 * C50896 + C28645 * C540) +
              (C25585 + C25584) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C1558 +
          ((((C28640 * C541 -
              ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
              C28641 * C50705) *
                 C16986 +
             (C29826 * C541 - (C28639 * C50896 + C28638 * C540) +
              C29827 * C50705) *
                 C50805) *
                C50910 +
            ((C29164 * C541 -
              ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
              C29165 * C50705) *
                 C16986 +
             ((C26011 + C26010) * C541 - (C29166 * C50896 + C29167 * C540) +
              (C26013 + C26012) * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C27955 + C27954) * C540 + (C27953 + C27952) * C50896 -
              C28645 * C541 - C28644 * C50705) *
                 C16986 +
             (C28642 * C540 + C28643 * C50896 - (C25582 + C25583) * C541 -
              (C25584 + C25585) * C50705) *
                 C50805) *
                C50910 +
            (((C27956 + C27957) * C540 + (C27958 + C27959) * C50896 -
              (C27961 + C27960) * C541 - (C27963 + C27962) * C50705) *
                 C16986 +
             ((C27960 + C27961) * C540 + (C27962 + C27963) * C50896 -
              (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
               C50881 * C2562) *
                  C541 -
              (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
               C50881 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C540 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50896 -
             (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                C16986 +
            ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
             (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
             C28638 * C541 - C28639 * C50705) *
                C16986 +
            (C28640 * C540 + C28641 * C50896 - C26500 * C541 -
             C26501 * C50705) *
                C50805) *
               C50831) *
              C50635 * C50943 +
          (((C28640 * C541 -
             ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
             C28641 * C50705) *
                C16986 +
            (C29826 * C541 - (C28639 * C50896 + C28638 * C540) +
             C29827 * C50705) *
                C50805) *
               C50910 +
           ((C29164 * C541 -
             ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
             C29165 * C50705) *
                C16986 +
            ((C26011 + C26010) * C541 - (C29166 * C50896 + C29167 * C540) +
             (C26013 + C26012) * C50705) *
                C50805) *
               C50831) *
              C50635 * C50944 +
          ((((C27967 + C27966) * C540 + (C27965 + C27964) * C50896 -
             C29167 * C541 - C29166 * C50705) *
                C16986 +
            (C29164 * C540 + C29165 * C50896 - (C26010 + C26011) * C541 -
             (C26012 + C26013) * C50705) *
                C50805) *
               C50910 +
           (((C30354 + C30355) * C540 + (C30356 + C30357) * C50896 -
             (C29176 + C29177) * C541 - (C29178 + C29179) * C50705) *
                C16986 +
            ((C29177 + C29176) * C540 + (C29179 + C29178) * C50896 -
             (C49761 * C4482 + C50615 * C4488 + C49768 * C4483 +
              C50881 * C4489) *
                 C541 -
             (C49761 * C4486 + C50615 * C4494 + C49768 * C4487 +
              C50881 * C4495) *
                 C50705) *
                C50805) *
               C50831) *
              C50635 * C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C253 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C248 -
             (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
             C24878 * C255 + C24879 * C250) *
                C16986 +
            ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
             (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
             (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
             C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
                C16986 +
            (C28640 * C253 + C28641 * C248 - C26500 * C254 - C26501 * C249 +
             (C26511 + C26510) * C255 + (C26513 + C26512) * C250) *
                C50805) *
               C50831) *
              C50635 * C1558 +
          (((C28640 * C254 -
             ((C27951 + C27950) * C248 + (C27949 + C27948) * C253) +
             C28641 * C249 - C26500 * C255 - C26501 * C250) *
                C16986 +
            (C29826 * C254 - (C28639 * C248 + C28638 * C253) + C29827 * C249 -
             (C26510 + C26511) * C255 - (C26512 + C26513) * C250) *
                C50805) *
               C50910 +
           ((C29164 * C254 -
             ((C27964 + C27965) * C248 + (C27966 + C27967) * C253) +
             C29165 * C249 - (C26010 + C26011) * C255 -
             (C26012 + C26013) * C250) *
                C16986 +
            ((C26011 + C26010) * C254 - (C29166 * C248 + C29167 * C253) +
             (C26013 + C26012) * C249 -
             (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 +
              C50881 * C3555) *
                 C255 -
             (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 +
              C50881 * C3559) *
                 C250) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C16986 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C50910 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C16986 +
             (C28640 * C121 + C28641 * C50653) * C50805) *
                C50831) *
               C900 -
           (((C28644 * C50653 + C28645 * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C16986) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C16986) *
                C50910) *
               C901 +
           ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                  C121 +
              (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                  C50653) *
                 C16986 +
             ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
                C50910 +
            (((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C16986 +
             ((C28171 + C28170) * C121 + (C28173 + C28172) * C50653) * C50805) *
                C50831) *
               C902) *
              C1558 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C16986 +
             (C28642 * C121 + C28643 * C50653) * C50805) *
                C50910 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C16986 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C901 -
           (((C29166 * C50653 + C29167 * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C16986) *
                C50831 +
            ((C28639 * C50653 + C28638 * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C16986) *
                C50910) *
               C900 -
           ((((C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
               C50881 * C1107) *
                  C50653 +
              (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
               C50881 * C1099) *
                  C121) *
                 C50805 +
             ((C49761 * C424 + C50615 * C435 + C49768 * C423 + C50881 * C434) *
                  C50653 +
              (C49761 * C405 + C50615 * C420 + C49768 * C404 + C50881 * C419) *
                  C121) *
                 C16986) *
                C50831 +
            (((C28172 + C28173) * C50653 + (C28170 + C28171) * C121) * C50805 +
             ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C16986) *
                C50910) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C16986 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
               C50910 +
           (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C16986 +
            (C28640 * C121 + C28641 * C50653) * C50805) *
               C50831) *
              C50635 * C1724 -
          (((C29166 * C50653 + C29167 * C121) * C50805 +
            ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C16986) *
               C50831 +
           ((C28639 * C50653 + C28638 * C121) * C50805 +
            ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C16986) *
               C50910) *
              C50635 * C1725 +
          ((((C27967 + C27966) * C121 + (C27965 + C27964) * C50653) * C16986 +
            (C29164 * C121 + C29165 * C50653) * C50805) *
               C50910 +
           (((C30354 + C30355) * C121 + (C30356 + C30357) * C50653) * C16986 +
            ((C29177 + C29176) * C121 + (C29179 + C29178) * C50653) * C50805) *
               C50831) *
              C50635 * C1726 -
          ((((C49761 * C6393 + C50615 * C6395 + C49768 * C6394 +
              C50881 * C6396) *
                 C50653 +
             (C49761 * C6389 + C50615 * C6391 + C49768 * C6390 +
              C50881 * C6392) *
                 C121) *
                C50805 +
            ((C49761 * C5383 + C50615 * C5387 + C49768 * C5382 +
              C50881 * C5386) *
                 C50653 +
             (C49761 * C5378 + C50615 * C5381 + C49768 * C5377 +
              C50881 * C5380) *
                 C121) *
                C16986) *
               C50831 +
           (((C29178 + C29179) * C50653 + (C29176 + C29177) * C121) * C50805 +
            ((C30357 + C30356) * C50653 + (C30355 + C30354) * C121) * C16986) *
               C50910) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C16986 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C50910 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C16986 +
             (C28640 * C121 + C28641 * C50653) * C50805) *
                C50831) *
               C50888 -
           (((C28644 * C50653 + C28645 * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C16986) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C16986) *
                C50910) *
               C50640) *
              C50943 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C16986 +
             (C28642 * C121 + C28643 * C50653) * C50805) *
                C50910 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C16986 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C50640 -
           (((C29166 * C50653 + C29167 * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C16986) *
                C50831 +
            ((C28639 * C50653 + C28638 * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C16986) *
                C50910) *
               C50888) *
              C50944 +
          (((((C27967 + C27966) * C121 + (C27965 + C27964) * C50653) * C16986 +
             (C29164 * C121 + C29165 * C50653) * C50805) *
                C50910 +
            (((C30354 + C30355) * C121 + (C30356 + C30357) * C50653) * C16986 +
             ((C29177 + C29176) * C121 + (C29179 + C29178) * C50653) * C50805) *
                C50831) *
               C50888 -
           ((((C49761 * C5985 + C50615 * C5986 + C49768 * C4490 +
               C50881 * C4496) *
                  C50653 +
              (C49761 * C5983 + C50615 * C5984 + C49768 * C4484 +
               C50881 * C4492) *
                  C121) *
                 C50805 +
             ((C49761 * C1733 + C50615 * C1741 + C49768 * C1734 +
               C50881 * C1742) *
                  C50653 +
              (C49761 * C1729 + C50615 * C1737 + C49768 * C1730 +
               C50881 * C1738) *
                  C121) *
                 C16986) *
                C50831 +
            (((C27963 + C27962) * C50653 + (C27961 + C27960) * C121) * C50805 +
             ((C27959 + C27958) * C50653 + (C27957 + C27956) * C121) * C16986) *
                C50910) *
               C50640) *
              C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C16986 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C50910 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C16986 +
             (C28640 * C121 + C28641 * C50653) * C50805) *
                C50831) *
               C900 -
           (((C28644 * C50653 + C28645 * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C16986) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C16986) *
                C50910) *
               C901 +
           ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                  C121 +
              (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                  C50653) *
                 C16986 +
             ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
                C50910 +
            (((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C16986 +
             ((C28171 + C28170) * C121 + (C28173 + C28172) * C50653) * C50805) *
                C50831) *
               C902) *
              C1558 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C16986 +
             (C28642 * C121 + C28643 * C50653) * C50805) *
                C50910 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C16986 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C901 -
           (((C29166 * C50653 + C29167 * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C16986) *
                C50831 +
            ((C28639 * C50653 + C28638 * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C16986) *
                C50910) *
               C900 -
           ((((C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
               C50881 * C1107) *
                  C50653 +
              (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
               C50881 * C1099) *
                  C121) *
                 C50805 +
             ((C49761 * C424 + C50615 * C435 + C49768 * C423 + C50881 * C434) *
                  C50653 +
              (C49761 * C405 + C50615 * C420 + C49768 * C404 + C50881 * C419) *
                  C121) *
                 C16986) *
                C50831 +
            (((C28172 + C28173) * C50653 + (C28170 + C28171) * C121) * C50805 +
             ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C16986) *
                C50910) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C253 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C248 -
             (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
             C24878 * C255 + C24879 * C250) *
                C16986 +
            ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
             (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
             (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
                C50805) *
               C50910 +
           (((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
             C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
                C16986 +
            (C28640 * C253 + C28641 * C248 - C26500 * C254 - C26501 * C249 +
             (C26511 + C26510) * C255 + (C26513 + C26512) * C250) *
                C50805) *
               C50831) *
              C50635 * C1558 +
          (((C28640 * C254 -
             ((C27951 + C27950) * C248 + (C27949 + C27948) * C253) +
             C28641 * C249 - C26500 * C255 - C26501 * C250) *
                C16986 +
            (C29826 * C254 - (C28639 * C248 + C28638 * C253) + C29827 * C249 -
             (C26510 + C26511) * C255 - (C26512 + C26513) * C250) *
                C50805) *
               C50910 +
           ((C29164 * C254 -
             ((C27964 + C27965) * C248 + (C27966 + C27967) * C253) +
             C29165 * C249 - (C26010 + C26011) * C255 -
             (C26012 + C26013) * C250) *
                C16986 +
            ((C26011 + C26010) * C254 - (C29166 * C248 + C29167 * C253) +
             (C26013 + C26012) * C249 -
             (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 +
              C50881 * C3555) *
                 C255 -
             (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 +
              C50881 * C3559) *
                 C250) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C540 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50896 -
            (C17186 + C17187 + C17188) * C541 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C540 +
            (C17191 + C17190 + C17189) * C50896 -
            (C17194 + C17193 + C17192) * C541 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C50939 +
          (((C17198 + C17199 + C17200) * C541 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50896 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C540) +
            (C17201 + C17202 + C17203) * C50705) *
               C16986 +
           ((C17206 + C17205 + C17204) * C541 -
            ((C17203 + C17202 + C17201) * C50896 +
             (C17200 + C17199 + C17198) * C540) +
            (C17209 + C17208 + C17207) * C50705) *
               C50805) *
              C50767 * C50940 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C540 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C50896 -
            (C17514 + C17515 + C17516) * C541 -
            (C17517 + C17518 + C17519) * C50705) *
               C16986 +
           ((C17516 + C17515 + C17514) * C540 +
            (C17519 + C17518 + C17517) * C50896 -
            (C16990 * C265 + C16985 * C284 + C16989 * C263 + C16984 * C277 +
             C16988 * C262 + C16983 * C276) *
                C541 -
            (C16990 * C285 + C16985 * C295 + C16989 * C281 + C16984 * C293 +
             C16988 * C280 + C16983 * C292) *
                C50705) *
               C50805) *
              C50767 * C539) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C540 +
            (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C540 + C19905 * C50896 - C19906 * C541 - C19907 * C50705) *
               C19769 +
           (C19906 * C540 + C19907 * C50896 - C19908 * C541 - C19909 * C50705) *
               C19770 +
           (C19908 * C540 + C19909 * C50896 - C19910 * C541 - C19911 * C50705) *
               C19771) *
              C50767 * C50939 +
          ((C19912 * C541 -
            ((C19772 * C134 + C50610 * C144) * C50896 +
             (C19772 * C123 + C50610 * C130) * C540) +
            C19913 * C50705) *
               C19768 +
           (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
            C19915 * C50705) *
               C19769 +
           (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
            C19917 * C50705) *
               C19770 +
           (C19918 * C541 - (C19917 * C50896 + C19916 * C540) +
            C19919 * C50705) *
               C19771) *
              C50767 * C50940 +
          (((C19772 * C124 + C50610 * C131) * C540 +
            (C19772 * C135 + C50610 * C145) * C50896 - C20128 * C541 -
            C20129 * C50705) *
               C19768 +
           (C20128 * C540 + C20129 * C50896 - C20130 * C541 - C20131 * C50705) *
               C19769 +
           (C20130 * C540 + C20131 * C50896 - C20132 * C541 - C20133 * C50705) *
               C19770 +
           (C20132 * C540 + C20133 * C50896 -
            (C19772 * C2326 + C50610 * C2331) * C541 -
            (C19772 * C2332 + C50610 * C2335) * C50705) *
               C19771) *
              C50767 * C539) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[136] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C540 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50896 -
                      (C17186 + C17187 + C17188) * C541 -
                      (C17189 + C17190 + C17191) * C50705) *
                         C16986 +
                     ((C17188 + C17187 + C17186) * C540 +
                      (C17191 + C17190 + C17189) * C50896 -
                      (C17194 + C17193 + C17192) * C541 -
                      (C17197 + C17196 + C17195) * C50705) *
                         C50805) *
                        C50767 * C251 +
                    (((C17198 + C17199 + C17200) * C541 -
                      ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                        C16984 * C145 + C16988 * C134 + C16983 * C144) *
                           C50896 +
                       (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                        C16984 * C131 + C16988 * C123 + C16983 * C130) *
                           C540) +
                      (C17201 + C17202 + C17203) * C50705) *
                         C16986 +
                     ((C17206 + C17205 + C17204) * C541 -
                      ((C17203 + C17202 + C17201) * C50896 +
                       (C17200 + C17199 + C17198) * C540) +
                      (C17209 + C17208 + C17207) * C50705) *
                         C50805) *
                        C50767 * C50640) *
                       C50897 +
                   ((((C17884 + C17885 + C17886) * C541 -
                      ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                        C16984 * C427 + C16988 * C415 + C16983 * C431) *
                           C50896 +
                       (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                        C16984 * C407 + C16988 * C401 + C16983 * C416) *
                           C540) +
                      (C17887 + C17888 + C17889) * C50705) *
                         C16986 +
                     ((C16988 * C1447 + C16983 * C1451 + C16989 * C1446 +
                       C16984 * C1450 + C16990 * C1445 + C16985 * C1449) *
                          C541 -
                      ((C17889 + C17888 + C17887) * C50896 +
                       (C17886 + C17885 + C17884) * C540) +
                      (C16988 * C1455 + C16983 * C1459 + C16989 * C1454 +
                       C16984 * C1458 + C16990 * C1453 + C16985 * C1457) *
                          C50705) *
                         C50805) *
                        C50767 * C251 +
                    (((C16988 * C397 + C16983 * C407 + C16989 * C398 +
                       C16984 * C408 + C16990 * C399 + C16985 * C409) *
                          C540 +
                      (C16988 * C411 + C16983 * C427 + C16989 * C412 +
                       C16984 * C428 + C16990 * C413 + C16985 * C429) *
                          C50896 -
                      (C17890 + C17891 + C17892) * C541 -
                      (C17893 + C17894 + C17895) * C50705) *
                         C16986 +
                     ((C17892 + C17891 + C17890) * C540 +
                      (C17895 + C17894 + C17893) * C50896 -
                      (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 +
                       C16984 * C1449 + C16988 * C1446 + C16983 * C1450) *
                          C541 -
                      (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 +
                       C16984 * C1457 + C16988 * C1454 + C16983 * C1458) *
                          C50705) *
                         C50805) *
                        C50767 * C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C19768 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C19769 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C19770 +
                     (C19908 * C540 + C19909 * C50896 - C19910 * C541 -
                      C19911 * C50705) *
                         C19771) *
                        C50767 * C251 +
                    ((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C19768 +
                     (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                      C19915 * C50705) *
                         C19769 +
                     (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                      C19917 * C50705) *
                         C19770 +
                     (C19918 * C541 - (C19917 * C50896 + C19916 * C540) +
                      C19919 * C50705) *
                         C19771) *
                        C50767 * C50640) *
                       C50897 +
                   (((C20386 * C541 -
                      ((C19772 * C415 + C50610 * C431) * C50896 +
                       (C19772 * C401 + C50610 * C416) * C540) +
                      C20387 * C50705) *
                         C19768 +
                     (C20388 * C541 - (C20387 * C50896 + C20386 * C540) +
                      C20389 * C50705) *
                         C19769 +
                     (C20390 * C541 - (C20389 * C50896 + C20388 * C540) +
                      C20391 * C50705) *
                         C19770 +
                     ((C19772 * C4071 + C50610 * C4073) * C541 -
                      (C20391 * C50896 + C20390 * C540) +
                      (C19772 * C4075 + C50610 * C4077) * C50705) *
                         C19771) *
                        C50767 * C251 +
                    (((C19772 * C397 + C50610 * C407) * C540 +
                      (C19772 * C411 + C50610 * C427) * C50896 - C20392 * C541 -
                      C20393 * C50705) *
                         C19768 +
                     (C20392 * C540 + C20393 * C50896 - C20394 * C541 -
                      C20395 * C50705) *
                         C19769 +
                     (C20394 * C540 + C20395 * C50896 - C20396 * C541 -
                      C20397 * C50705) *
                         C19770 +
                     (C20396 * C540 + C20397 * C50896 -
                      (C19772 * C4070 + C50610 * C4072) * C541 -
                      (C19772 * C4074 + C50610 * C4076) * C50705) *
                         C19771) *
                        C50767 * C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[137] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C253 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C248 -
                     (C17186 + C17187 + C17188) * C254 -
                     (C17189 + C17190 + C17191) * C249 +
                     (C17192 + C17193 + C17194) * C255 +
                     (C17195 + C17196 + C17197) * C250) *
                        C16986 +
                    ((C17188 + C17187 + C17186) * C253 +
                     (C17191 + C17190 + C17189) * C248 -
                     (C17194 + C17193 + C17192) * C254 -
                     (C17197 + C17196 + C17195) * C249 +
                     (C16988 * C983 + C16983 * C987 + C16989 * C982 +
                      C16984 * C986 + C16990 * C981 + C16985 * C985) *
                         C255 +
                     (C16988 * C991 + C16983 * C995 + C16989 * C990 +
                      C16984 * C994 + C16990 * C989 + C16985 * C993) *
                         C250) *
                        C50805) *
                       C50767 * C251 +
                   (((C17198 + C17199 + C17200) * C254 -
                     ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                       C16984 * C145 + C16988 * C134 + C16983 * C144) *
                          C248 +
                      (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                       C16984 * C131 + C16988 * C123 + C16983 * C130) *
                          C253) +
                     (C17201 + C17202 + C17203) * C249 -
                     (C17204 + C17205 + C17206) * C255 -
                     (C17207 + C17208 + C17209) * C250) *
                        C16986 +
                    ((C17206 + C17205 + C17204) * C254 -
                     ((C17203 + C17202 + C17201) * C248 +
                      (C17200 + C17199 + C17198) * C253) +
                     (C17209 + C17208 + C17207) * C249 -
                     (C16990 * C980 + C16985 * C984 + C16989 * C981 +
                      C16984 * C985 + C16988 * C982 + C16983 * C986) *
                         C255 -
                     (C16990 * C988 + C16985 * C992 + C16989 * C989 +
                      C16984 * C993 + C16988 * C990 + C16983 * C994) *
                         C250) *
                        C50805) *
                       C50767 * C50640) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C121 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C50653) *
                        C16986 +
                    ((C16988 * C259 + C16983 * C269 + C16989 * C258 +
                      C16984 * C268 + C16990 * C257 + C16985 * C267) *
                         C121 +
                     (C16988 * C273 + C16983 * C289 + C16989 * C272 +
                      C16984 * C288 + C16990 * C271 + C16985 * C287) *
                         C50653) *
                        C50805) *
                       C50767 * C112 -
                   (((C16990 * C270 + C16985 * C286 + C16989 * C271 +
                      C16984 * C287 + C16988 * C272 + C16983 * C288) *
                         C50653 +
                     (C16990 * C256 + C16985 * C266 + C16989 * C257 +
                      C16984 * C267 + C16988 * C258 + C16983 * C268) *
                         C121) *
                        C50805 +
                    ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                      C16984 * C145 + C16988 * C134 + C16983 * C144) *
                         C50653 +
                     (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                      C16984 * C131 + C16988 * C123 + C16983 * C130) *
                         C121) *
                        C16986) *
                       C50767 * C113 +
                   (((C16988 * C124 + C16983 * C131 + C16989 * C125 +
                      C16984 * C132 + C16990 * C126 + C16985 * C138) *
                         C121 +
                     (C16988 * C135 + C16983 * C145 + C16989 * C136 +
                      C16984 * C146 + C16990 * C137 + C16985 * C147) *
                         C50653) *
                        C16986 +
                    ((C16988 * C257 + C16983 * C267 + C16989 * C256 +
                      C16984 * C266 + C16990 * C264 + C16985 * C282) *
                         C121 +
                     (C16988 * C271 + C16983 * C287 + C16989 * C270 +
                      C16984 * C286 + C16990 * C283 + C16985 * C294) *
                         C50653) *
                        C50805) *
                       C50767 * C114 -
                   (((C16990 * C544 + C16985 * C545 + C16989 * C283 +
                      C16984 * C294 + C16988 * C270 + C16983 * C286) *
                         C50653 +
                     (C16990 * C542 + C16985 * C543 + C16989 * C264 +
                      C16984 * C282 + C16988 * C256 + C16983 * C266) *
                         C121) *
                        C50805 +
                    ((C16990 * C140 + C16985 * C148 + C16989 * C137 +
                      C16984 * C147 + C16988 * C136 + C16983 * C146) *
                         C50653 +
                     (C16990 * C127 + C16985 * C139 + C16989 * C126 +
                      C16984 * C138 + C16988 * C125 + C16983 * C132) *
                         C121) *
                        C16986) *
                       C50767 * C115) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C121 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50653) *
                         C16986 +
                     ((C17188 + C17187 + C17186) * C121 +
                      (C17191 + C17190 + C17189) * C50653) *
                         C50805) *
                        C50767 * C251 -
                    (((C17203 + C17202 + C17201) * C50653 +
                      (C17200 + C17199 + C17198) * C121) *
                         C50805 +
                     ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                       C16984 * C145 + C16988 * C134 + C16983 * C144) *
                          C50653 +
                      (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                       C16984 * C131 + C16988 * C123 + C16983 * C130) *
                          C121) *
                         C16986) *
                        C50767 * C50640) *
                       C394 +
                   ((((C16988 * C397 + C16983 * C407 + C16989 * C398 +
                       C16984 * C408 + C16990 * C399 + C16985 * C409) *
                          C121 +
                      (C16988 * C411 + C16983 * C427 + C16989 * C412 +
                       C16984 * C428 + C16990 * C413 + C16985 * C429) *
                          C50653) *
                         C16986 +
                     ((C16988 * C781 + C16983 * C786 + C16989 * C782 +
                       C16984 * C787 + C16990 * C783 + C16985 * C788) *
                          C121 +
                      (C16988 * C790 + C16983 * C796 + C16989 * C791 +
                       C16984 * C797 + C16990 * C792 + C16985 * C798) *
                          C50653) *
                         C50805) *
                        C50767 * C50640 -
                    (((C16990 * C791 + C16985 * C797 + C16989 * C790 +
                       C16984 * C796 + C16988 * C789 + C16983 * C795) *
                          C50653 +
                      (C16990 * C782 + C16985 * C787 + C16989 * C781 +
                       C16984 * C786 + C16988 * C780 + C16983 * C785) *
                          C121) *
                         C50805 +
                     ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                       C16984 * C427 + C16988 * C415 + C16983 * C431) *
                          C50653 +
                      (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                       C16984 * C407 + C16988 * C401 + C16983 * C416) *
                          C121) *
                         C16986) *
                        C50767 * C251) *
                       C395 +
                   ((((C16988 * C402 + C16983 * C417 + C16989 * C403 +
                       C16984 * C418 + C16990 * C404 + C16985 * C419) *
                          C121 +
                      (C16988 * C421 + C16983 * C432 + C16989 * C422 +
                       C16984 * C433 + C16990 * C423 + C16985 * C434) *
                          C50653) *
                         C16986 +
                     ((C16988 * C1097 + C16983 * C1101 + C16989 * C1096 +
                       C16984 * C1100 + C16990 * C1095 + C16985 * C1099) *
                          C121 +
                      (C16988 * C1105 + C16983 * C1109 + C16989 * C1104 +
                       C16984 * C1108 + C16990 * C1103 + C16985 * C1107) *
                          C50653) *
                         C50805) *
                        C50767 * C251 -
                    (((C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
                       C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                          C50653 +
                      (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
                       C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                          C121) *
                         C50805 +
                     ((C16990 * C424 + C16985 * C435 + C16989 * C423 +
                       C16984 * C434 + C16988 * C422 + C16983 * C433) *
                          C50653 +
                      (C16990 * C405 + C16985 * C420 + C16989 * C404 +
                       C16984 * C419 + C16988 * C403 + C16983 * C418) *
                          C121) *
                         C16986) *
                        C50767 * C50640) *
                       C396)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C19772 * C122 + C50610 * C129) * C121 +
                     (C19772 * C133 + C50610 * C143) * C50653) *
                        C19768 +
                    ((C19772 * C259 + C50610 * C269) * C121 +
                     (C19772 * C273 + C50610 * C289) * C50653) *
                        C19769 +
                    ((C19772 * C260 + C50610 * C274) * C121 +
                     (C19772 * C278 + C50610 * C290) * C50653) *
                        C19770 +
                    ((C19772 * C983 + C50610 * C987) * C121 +
                     (C19772 * C991 + C50610 * C995) * C50653) *
                        C19771) *
                       C50767 * C112 -
                   (((C19772 * C990 + C50610 * C994) * C50653 +
                     (C19772 * C982 + C50610 * C986) * C121) *
                        C19771 +
                    ((C19772 * C279 + C50610 * C291) * C50653 +
                     (C19772 * C261 + C50610 * C275) * C121) *
                        C19770 +
                    ((C19772 * C272 + C50610 * C288) * C50653 +
                     (C19772 * C258 + C50610 * C268) * C121) *
                        C19769 +
                    ((C19772 * C134 + C50610 * C144) * C50653 +
                     (C19772 * C123 + C50610 * C130) * C121) *
                        C19768) *
                       C50767 * C113 +
                   (((C19772 * C124 + C50610 * C131) * C121 +
                     (C19772 * C135 + C50610 * C145) * C50653) *
                        C19768 +
                    ((C19772 * C257 + C50610 * C267) * C121 +
                     (C19772 * C271 + C50610 * C287) * C50653) *
                        C19769 +
                    ((C19772 * C262 + C50610 * C276) * C121 +
                     (C19772 * C280 + C50610 * C292) * C50653) *
                        C19770 +
                    ((C19772 * C981 + C50610 * C985) * C121 +
                     (C19772 * C989 + C50610 * C993) * C50653) *
                        C19771) *
                       C50767 * C114 -
                   (((C19772 * C988 + C50610 * C992) * C50653 +
                     (C19772 * C980 + C50610 * C984) * C121) *
                        C19771 +
                    ((C19772 * C281 + C50610 * C293) * C50653 +
                     (C19772 * C263 + C50610 * C277) * C121) *
                        C19770 +
                    ((C19772 * C270 + C50610 * C286) * C50653 +
                     (C19772 * C256 + C50610 * C266) * C121) *
                        C19769 +
                    ((C19772 * C136 + C50610 * C146) * C50653 +
                     (C19772 * C125 + C50610 * C132) * C121) *
                        C19768) *
                       C50767 * C115) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C19772 * C122 + C50610 * C129) * C253 +
                     (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
                     C19905 * C249 + C19906 * C255 + C19907 * C250) *
                        C19768 +
                    (C19904 * C253 + C19905 * C248 - C19906 * C254 -
                     C19907 * C249 + C19908 * C255 + C19909 * C250) *
                        C19769 +
                    (C19906 * C253 + C19907 * C248 - C19908 * C254 -
                     C19909 * C249 + C19910 * C255 + C19911 * C250) *
                        C19770 +
                    (C19908 * C253 + C19909 * C248 - C19910 * C254 -
                     C19911 * C249 + (C19772 * C3385 + C50610 * C3387) * C255 +
                     (C19772 * C3389 + C50610 * C3391) * C250) *
                        C19771) *
                       C50767 * C251 +
                   ((C19912 * C254 -
                     ((C19772 * C134 + C50610 * C144) * C248 +
                      (C19772 * C123 + C50610 * C130) * C253) +
                     C19913 * C249 - C19914 * C255 - C19915 * C250) *
                        C19768 +
                    (C19914 * C254 - (C19913 * C248 + C19912 * C253) +
                     C19915 * C249 - C19916 * C255 - C19917 * C250) *
                        C19769 +
                    (C19916 * C254 - (C19915 * C248 + C19914 * C253) +
                     C19917 * C249 - C19918 * C255 - C19919 * C250) *
                        C19770 +
                    (C19918 * C254 - (C19917 * C248 + C19916 * C253) +
                     C19919 * C249 - (C19772 * C3384 + C50610 * C3386) * C255 -
                     (C19772 * C3388 + C50610 * C3390) * C250) *
                        C19771) *
                       C50767 * C50640) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C121 +
                      (C19772 * C133 + C50610 * C143) * C50653) *
                         C19768 +
                     (C19904 * C121 + C19905 * C50653) * C19769 +
                     (C19906 * C121 + C19907 * C50653) * C19770 +
                     (C19908 * C121 + C19909 * C50653) * C19771) *
                        C50767 * C251 -
                    ((C19917 * C50653 + C19916 * C121) * C19771 +
                     (C19915 * C50653 + C19914 * C121) * C19770 +
                     (C19913 * C50653 + C19912 * C121) * C19769 +
                     ((C19772 * C134 + C50610 * C144) * C50653 +
                      (C19772 * C123 + C50610 * C130) * C121) *
                         C19768) *
                        C50767 * C50640) *
                       C394 +
                   ((((C19772 * C397 + C50610 * C407) * C121 +
                      (C19772 * C411 + C50610 * C427) * C50653) *
                         C19768 +
                     ((C19772 * C781 + C50610 * C786) * C121 +
                      (C19772 * C790 + C50610 * C796) * C50653) *
                         C19769 +
                     ((C19772 * C1446 + C50610 * C1450) * C121 +
                      (C19772 * C1454 + C50610 * C1458) * C50653) *
                         C19770 +
                     ((C19772 * C3081 + C50610 * C3084) * C121 +
                      (C19772 * C3086 + C50610 * C3090) * C50653) *
                         C19771) *
                        C50767 * C50640 -
                    (((C19772 * C3085 + C50610 * C3089) * C50653 +
                      (C19772 * C3080 + C50610 * C3083) * C121) *
                         C19771 +
                     ((C19772 * C1455 + C50610 * C1459) * C50653 +
                      (C19772 * C1447 + C50610 * C1451) * C121) *
                         C19770 +
                     ((C19772 * C789 + C50610 * C795) * C50653 +
                      (C19772 * C780 + C50610 * C785) * C121) *
                         C19769 +
                     ((C19772 * C415 + C50610 * C431) * C50653 +
                      (C19772 * C401 + C50610 * C416) * C121) *
                         C19768) *
                        C50767 * C251) *
                       C395 +
                   ((((C19772 * C402 + C50610 * C417) * C121 +
                      (C19772 * C421 + C50610 * C432) * C50653) *
                         C19768 +
                     ((C19772 * C1097 + C50610 * C1101) * C121 +
                      (C19772 * C1105 + C50610 * C1109) * C50653) *
                         C19769 +
                     ((C19772 * C2558 + C50610 * C2561) * C121 +
                      (C19772 * C2563 + C50610 * C2567) * C50653) *
                         C19770 +
                     ((C19772 * C3553 + C50610 * C3555) * C121 +
                      (C19772 * C3557 + C50610 * C3559) * C50653) *
                         C19771) *
                        C50767 * C251 -
                    (((C19772 * C3556 + C50610 * C3558) * C50653 +
                      (C19772 * C3552 + C50610 * C3554) * C121) *
                         C19771 +
                     ((C19772 * C2564 + C50610 * C2568) * C50653 +
                      (C19772 * C2559 + C50610 * C2562) * C121) *
                         C19770 +
                     ((C19772 * C1104 + C50610 * C1108) * C50653 +
                      (C19772 * C1096 + C50610 * C1100) * C121) *
                         C19769 +
                     ((C19772 * C422 + C50610 * C433) * C50653 +
                      (C19772 * C403 + C50610 * C418) * C121) *
                         C19768) *
                        C50767 * C50640) *
                       C396)) /
                     (p * q * std::sqrt(p + q));
    d2ee[138] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C121 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50653) *
                         C16986 +
                     ((C17188 + C17187 + C17186) * C121 +
                      (C17191 + C17190 + C17189) * C50653) *
                         C50805) *
                        C50767 * C50939 -
                    (((C17203 + C17202 + C17201) * C50653 +
                      (C17200 + C17199 + C17198) * C121) *
                         C50805 +
                     ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                       C16984 * C145 + C16988 * C134 + C16983 * C144) *
                          C50653 +
                      (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                       C16984 * C131 + C16988 * C123 + C16983 * C130) *
                          C121) *
                         C16986) *
                        C50767 * C50940 +
                    (((C16988 * C124 + C16983 * C131 + C16989 * C125 +
                       C16984 * C132 + C16990 * C126 + C16985 * C138) *
                          C121 +
                      (C16988 * C135 + C16983 * C145 + C16989 * C136 +
                       C16984 * C146 + C16990 * C137 + C16985 * C147) *
                          C50653) *
                         C16986 +
                     ((C17516 + C17515 + C17514) * C121 +
                      (C17519 + C17518 + C17517) * C50653) *
                         C50805) *
                        C50767 * C539) *
                       C50897 +
                   ((((C16988 * C397 + C16983 * C407 + C16989 * C398 +
                       C16984 * C408 + C16990 * C399 + C16985 * C409) *
                          C121 +
                      (C16988 * C411 + C16983 * C427 + C16989 * C412 +
                       C16984 * C428 + C16990 * C413 + C16985 * C429) *
                          C50653) *
                         C16986 +
                     ((C16988 * C781 + C16983 * C786 + C16989 * C782 +
                       C16984 * C787 + C16990 * C783 + C16985 * C788) *
                          C121 +
                      (C16988 * C790 + C16983 * C796 + C16989 * C791 +
                       C16984 * C797 + C16990 * C792 + C16985 * C798) *
                          C50653) *
                         C50805) *
                        C50767 * C50940 -
                    (((C16990 * C791 + C16985 * C797 + C16989 * C790 +
                       C16984 * C796 + C16988 * C789 + C16983 * C795) *
                          C50653 +
                      (C16990 * C782 + C16985 * C787 + C16989 * C781 +
                       C16984 * C786 + C16988 * C780 + C16983 * C785) *
                          C121) *
                         C50805 +
                     ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                       C16984 * C427 + C16988 * C415 + C16983 * C431) *
                          C50653 +
                      (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                       C16984 * C407 + C16988 * C401 + C16983 * C416) *
                          C121) *
                         C16986) *
                        C50767 * C50939 -
                    (((C16990 * C794 + C16985 * C799 + C16989 * C792 +
                       C16984 * C798 + C16988 * C791 + C16983 * C797) *
                          C50653 +
                      (C16990 * C784 + C16985 * C793 + C16989 * C783 +
                       C16984 * C788 + C16988 * C782 + C16983 * C787) *
                          C121) *
                         C50805 +
                     ((C16990 * C414 + C16985 * C430 + C16989 * C413 +
                       C16984 * C429 + C16988 * C412 + C16983 * C428) *
                          C50653 +
                      (C16990 * C400 + C16985 * C410 + C16989 * C399 +
                       C16984 * C409 + C16988 * C398 + C16983 * C408) *
                          C121) *
                         C16986) *
                        C50767 * C539) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C121 +
                      (C19772 * C133 + C50610 * C143) * C50653) *
                         C19768 +
                     (C19904 * C121 + C19905 * C50653) * C19769 +
                     (C19906 * C121 + C19907 * C50653) * C19770 +
                     (C19908 * C121 + C19909 * C50653) * C19771) *
                        C50767 * C50939 -
                    ((C19917 * C50653 + C19916 * C121) * C19771 +
                     (C19915 * C50653 + C19914 * C121) * C19770 +
                     (C19913 * C50653 + C19912 * C121) * C19769 +
                     ((C19772 * C134 + C50610 * C144) * C50653 +
                      (C19772 * C123 + C50610 * C130) * C121) *
                         C19768) *
                        C50767 * C50940 +
                    (((C19772 * C124 + C50610 * C131) * C121 +
                      (C19772 * C135 + C50610 * C145) * C50653) *
                         C19768 +
                     (C20128 * C121 + C20129 * C50653) * C19769 +
                     (C20130 * C121 + C20131 * C50653) * C19770 +
                     (C20132 * C121 + C20133 * C50653) * C19771) *
                        C50767 * C539) *
                       C50897 +
                   ((((C19772 * C397 + C50610 * C407) * C121 +
                      (C19772 * C411 + C50610 * C427) * C50653) *
                         C19768 +
                     ((C19772 * C781 + C50610 * C786) * C121 +
                      (C19772 * C790 + C50610 * C796) * C50653) *
                         C19769 +
                     ((C19772 * C1446 + C50610 * C1450) * C121 +
                      (C19772 * C1454 + C50610 * C1458) * C50653) *
                         C19770 +
                     ((C19772 * C3081 + C50610 * C3084) * C121 +
                      (C19772 * C3086 + C50610 * C3090) * C50653) *
                         C19771) *
                        C50767 * C50940 -
                    (((C19772 * C3085 + C50610 * C3089) * C50653 +
                      (C19772 * C3080 + C50610 * C3083) * C121) *
                         C19771 +
                     ((C19772 * C1455 + C50610 * C1459) * C50653 +
                      (C19772 * C1447 + C50610 * C1451) * C121) *
                         C19770 +
                     ((C19772 * C789 + C50610 * C795) * C50653 +
                      (C19772 * C780 + C50610 * C785) * C121) *
                         C19769 +
                     ((C19772 * C415 + C50610 * C431) * C50653 +
                      (C19772 * C401 + C50610 * C416) * C121) *
                         C19768) *
                        C50767 * C50939 -
                    (((C19772 * C3088 + C50610 * C3091) * C50653 +
                      (C19772 * C3082 + C50610 * C3087) * C121) *
                         C19771 +
                     ((C19772 * C1453 + C50610 * C1457) * C50653 +
                      (C19772 * C1445 + C50610 * C1449) * C121) *
                         C19770 +
                     ((C19772 * C791 + C50610 * C797) * C50653 +
                      (C19772 * C782 + C50610 * C787) * C121) *
                         C19769 +
                     ((C19772 * C412 + C50610 * C428) * C50653 +
                      (C19772 * C398 + C50610 * C408) * C121) *
                         C19768) *
                        C50767 * C539) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C121 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C50653) *
                        C16986 +
                    ((C16988 * C259 + C16983 * C269 + C16989 * C258 +
                      C16984 * C268 + C16990 * C257 + C16985 * C267) *
                         C121 +
                     (C16988 * C273 + C16983 * C289 + C16989 * C272 +
                      C16984 * C288 + C16990 * C271 + C16985 * C287) *
                         C50653) *
                        C50805) *
                       C50767 * C112 -
                   (((C16990 * C270 + C16985 * C286 + C16989 * C271 +
                      C16984 * C287 + C16988 * C272 + C16983 * C288) *
                         C50653 +
                     (C16990 * C256 + C16985 * C266 + C16989 * C257 +
                      C16984 * C267 + C16988 * C258 + C16983 * C268) *
                         C121) *
                        C50805 +
                    ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                      C16984 * C145 + C16988 * C134 + C16983 * C144) *
                         C50653 +
                     (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                      C16984 * C131 + C16988 * C123 + C16983 * C130) *
                         C121) *
                        C16986) *
                       C50767 * C113 +
                   (((C16988 * C124 + C16983 * C131 + C16989 * C125 +
                      C16984 * C132 + C16990 * C126 + C16985 * C138) *
                         C121 +
                     (C16988 * C135 + C16983 * C145 + C16989 * C136 +
                      C16984 * C146 + C16990 * C137 + C16985 * C147) *
                         C50653) *
                        C16986 +
                    ((C16988 * C257 + C16983 * C267 + C16989 * C256 +
                      C16984 * C266 + C16990 * C264 + C16985 * C282) *
                         C121 +
                     (C16988 * C271 + C16983 * C287 + C16989 * C270 +
                      C16984 * C286 + C16990 * C283 + C16985 * C294) *
                         C50653) *
                        C50805) *
                       C50767 * C114 -
                   (((C16990 * C544 + C16985 * C545 + C16989 * C283 +
                      C16984 * C294 + C16988 * C270 + C16983 * C286) *
                         C50653 +
                     (C16990 * C542 + C16985 * C543 + C16989 * C264 +
                      C16984 * C282 + C16988 * C256 + C16983 * C266) *
                         C121) *
                        C50805 +
                    ((C16990 * C140 + C16985 * C148 + C16989 * C137 +
                      C16984 * C147 + C16988 * C136 + C16983 * C146) *
                         C50653 +
                     (C16990 * C127 + C16985 * C139 + C16989 * C126 +
                      C16984 * C138 + C16988 * C125 + C16983 * C132) *
                         C121) *
                        C16986) *
                       C50767 * C115) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C253 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C248 -
                     (C17186 + C17187 + C17188) * C254 -
                     (C17189 + C17190 + C17191) * C249 +
                     (C17192 + C17193 + C17194) * C255 +
                     (C17195 + C17196 + C17197) * C250) *
                        C16986 +
                    ((C17188 + C17187 + C17186) * C253 +
                     (C17191 + C17190 + C17189) * C248 -
                     (C17194 + C17193 + C17192) * C254 -
                     (C17197 + C17196 + C17195) * C249 +
                     (C16988 * C983 + C16983 * C987 + C16989 * C982 +
                      C16984 * C986 + C16990 * C981 + C16985 * C985) *
                         C255 +
                     (C16988 * C991 + C16983 * C995 + C16989 * C990 +
                      C16984 * C994 + C16990 * C989 + C16985 * C993) *
                         C250) *
                        C50805) *
                       C50767 * C251 +
                   (((C17198 + C17199 + C17200) * C254 -
                     ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                       C16984 * C145 + C16988 * C134 + C16983 * C144) *
                          C248 +
                      (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                       C16984 * C131 + C16988 * C123 + C16983 * C130) *
                          C253) +
                     (C17201 + C17202 + C17203) * C249 -
                     (C17204 + C17205 + C17206) * C255 -
                     (C17207 + C17208 + C17209) * C250) *
                        C16986 +
                    ((C17206 + C17205 + C17204) * C254 -
                     ((C17203 + C17202 + C17201) * C248 +
                      (C17200 + C17199 + C17198) * C253) +
                     (C17209 + C17208 + C17207) * C249 -
                     (C16990 * C980 + C16985 * C984 + C16989 * C981 +
                      C16984 * C985 + C16988 * C982 + C16983 * C986) *
                         C255 -
                     (C16990 * C988 + C16985 * C992 + C16989 * C989 +
                      C16984 * C993 + C16988 * C990 + C16983 * C994) *
                         C250) *
                        C50805) *
                       C50767 * C50640) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C19772 * C122 + C50610 * C129) * C121 +
                     (C19772 * C133 + C50610 * C143) * C50653) *
                        C19768 +
                    ((C19772 * C259 + C50610 * C269) * C121 +
                     (C19772 * C273 + C50610 * C289) * C50653) *
                        C19769 +
                    ((C19772 * C260 + C50610 * C274) * C121 +
                     (C19772 * C278 + C50610 * C290) * C50653) *
                        C19770 +
                    ((C19772 * C983 + C50610 * C987) * C121 +
                     (C19772 * C991 + C50610 * C995) * C50653) *
                        C19771) *
                       C50767 * C112 -
                   (((C19772 * C990 + C50610 * C994) * C50653 +
                     (C19772 * C982 + C50610 * C986) * C121) *
                        C19771 +
                    ((C19772 * C279 + C50610 * C291) * C50653 +
                     (C19772 * C261 + C50610 * C275) * C121) *
                        C19770 +
                    ((C19772 * C272 + C50610 * C288) * C50653 +
                     (C19772 * C258 + C50610 * C268) * C121) *
                        C19769 +
                    ((C19772 * C134 + C50610 * C144) * C50653 +
                     (C19772 * C123 + C50610 * C130) * C121) *
                        C19768) *
                       C50767 * C113 +
                   (((C19772 * C124 + C50610 * C131) * C121 +
                     (C19772 * C135 + C50610 * C145) * C50653) *
                        C19768 +
                    ((C19772 * C257 + C50610 * C267) * C121 +
                     (C19772 * C271 + C50610 * C287) * C50653) *
                        C19769 +
                    ((C19772 * C262 + C50610 * C276) * C121 +
                     (C19772 * C280 + C50610 * C292) * C50653) *
                        C19770 +
                    ((C19772 * C981 + C50610 * C985) * C121 +
                     (C19772 * C989 + C50610 * C993) * C50653) *
                        C19771) *
                       C50767 * C114 -
                   (((C19772 * C988 + C50610 * C992) * C50653 +
                     (C19772 * C980 + C50610 * C984) * C121) *
                        C19771 +
                    ((C19772 * C281 + C50610 * C293) * C50653 +
                     (C19772 * C263 + C50610 * C277) * C121) *
                        C19770 +
                    ((C19772 * C270 + C50610 * C286) * C50653 +
                     (C19772 * C256 + C50610 * C266) * C121) *
                        C19769 +
                    ((C19772 * C136 + C50610 * C146) * C50653 +
                     (C19772 * C125 + C50610 * C132) * C121) *
                        C19768) *
                       C50767 * C115) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C19772 * C122 + C50610 * C129) * C253 +
                     (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
                     C19905 * C249 + C19906 * C255 + C19907 * C250) *
                        C19768 +
                    (C19904 * C253 + C19905 * C248 - C19906 * C254 -
                     C19907 * C249 + C19908 * C255 + C19909 * C250) *
                        C19769 +
                    (C19906 * C253 + C19907 * C248 - C19908 * C254 -
                     C19909 * C249 + C19910 * C255 + C19911 * C250) *
                        C19770 +
                    (C19908 * C253 + C19909 * C248 - C19910 * C254 -
                     C19911 * C249 + (C19772 * C3385 + C50610 * C3387) * C255 +
                     (C19772 * C3389 + C50610 * C3391) * C250) *
                        C19771) *
                       C50767 * C251 +
                   ((C19912 * C254 -
                     ((C19772 * C134 + C50610 * C144) * C248 +
                      (C19772 * C123 + C50610 * C130) * C253) +
                     C19913 * C249 - C19914 * C255 - C19915 * C250) *
                        C19768 +
                    (C19914 * C254 - (C19913 * C248 + C19912 * C253) +
                     C19915 * C249 - C19916 * C255 - C19917 * C250) *
                        C19769 +
                    (C19916 * C254 - (C19915 * C248 + C19914 * C253) +
                     C19917 * C249 - C19918 * C255 - C19919 * C250) *
                        C19770 +
                    (C19918 * C254 - (C19917 * C248 + C19916 * C253) +
                     C19919 * C249 - (C19772 * C3384 + C50610 * C3386) * C255 -
                     (C19772 * C3388 + C50610 * C3390) * C250) *
                        C19771) *
                       C50767 * C50640) *
                  C50669) /
                     (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C1213 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50941 -
            (C17186 + C17187 + C17188) * C1214 -
            (C17189 + C17190 + C17191) * C50942 +
            (C17192 + C17193 + C17194) * C1215 +
            (C17195 + C17196 + C17197) * C1210) *
               C16986 +
           ((C17188 + C17187 + C17186) * C1213 +
            (C17191 + C17190 + C17189) * C50941 -
            (C17194 + C17193 + C17192) * C1214 -
            (C17197 + C17196 + C17195) * C50942 +
            (C18154 + C18153 + C18152) * C1215 +
            (C18157 + C18156 + C18155) * C1210) *
               C50805) *
              C50767 * C50888 +
          (((C17198 + C17199 + C17200) * C1214 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50941 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C1213) +
            (C17201 + C17202 + C17203) * C50942 -
            (C17204 + C17205 + C17206) * C1215 -
            (C17207 + C17208 + C17209) * C1210) *
               C16986 +
           ((C17206 + C17205 + C17204) * C1214 -
            ((C17203 + C17202 + C17201) * C50941 +
             (C17200 + C17199 + C17198) * C1213) +
            (C17209 + C17208 + C17207) * C50942 -
            (C16990 * C980 + C16985 * C984 + C16989 * C981 + C16984 * C985 +
             C16988 * C982 + C16983 * C986) *
                C1215 -
            (C16990 * C988 + C16985 * C992 + C16989 * C989 + C16984 * C993 +
             C16988 * C990 + C16983 * C994) *
                C1210) *
               C50805) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C1213 +
            (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
            C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
               C19768 +
           (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
            C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
               C19769 +
           (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
            C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
               C19770 +
           (C19908 * C1213 + C19909 * C50941 - C19910 * C1214 -
            C19911 * C50942 + C20570 * C1215 + C20571 * C1210) *
               C19771) *
              C50767 * C50888 +
          ((C19912 * C1214 -
            ((C19772 * C134 + C50610 * C144) * C50941 +
             (C19772 * C123 + C50610 * C130) * C1213) +
            C19913 * C50942 - C19914 * C1215 - C19915 * C1210) *
               C19768 +
           (C19914 * C1214 - (C19913 * C50941 + C19912 * C1213) +
            C19915 * C50942 - C19916 * C1215 - C19917 * C1210) *
               C19769 +
           (C19916 * C1214 - (C19915 * C50941 + C19914 * C1213) +
            C19917 * C50942 - C19918 * C1215 - C19919 * C1210) *
               C19770 +
           (C19918 * C1214 - (C19917 * C50941 + C19916 * C1213) +
            C19919 * C50942 - (C19772 * C3384 + C50610 * C3386) * C1215 -
            (C19772 * C3388 + C50610 * C3390) * C1210) *
               C19771) *
              C50767 * C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C1213 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50941 -
            (C17186 + C17187 + C17188) * C1214 -
            (C17189 + C17190 + C17191) * C50942 +
            (C17192 + C17193 + C17194) * C1215 +
            (C17195 + C17196 + C17197) * C1210) *
               C16986 +
           ((C17188 + C17187 + C17186) * C1213 +
            (C17191 + C17190 + C17189) * C50941 -
            (C17194 + C17193 + C17192) * C1214 -
            (C17197 + C17196 + C17195) * C50942 +
            (C18154 + C18153 + C18152) * C1215 +
            (C18157 + C18156 + C18155) * C1210) *
               C50805) *
              C50767 * C50635 * C50897 +
          (((C17884 + C17885 + C17886) * C1214 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50941 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C1213) +
            (C17887 + C17888 + C17889) * C50942 -
            (C18820 + C18821 + C18822) * C1215 -
            (C18823 + C18824 + C18825) * C1210) *
               C16986 +
           ((C18822 + C18821 + C18820) * C1214 -
            ((C17889 + C17888 + C17887) * C50941 +
             (C17886 + C17885 + C17884) * C1213) +
            (C18825 + C18824 + C18823) * C50942 -
            (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 + C16984 * C3084 +
             C16988 * C3080 + C16983 * C3083) *
                C1215 -
            (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 + C16984 * C3090 +
             C16988 * C3085 + C16983 * C3089) *
                C1210) *
               C50805) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C1213 +
            (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
            C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
               C19768 +
           (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
            C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
               C19769 +
           (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
            C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
               C19770 +
           (C19908 * C1213 + C19909 * C50941 - C19910 * C1214 -
            C19911 * C50942 + C20570 * C1215 + C20571 * C1210) *
               C19771) *
              C50767 * C50635 * C50897 +
          ((C20386 * C1214 -
            ((C19772 * C415 + C50610 * C431) * C50941 +
             (C19772 * C401 + C50610 * C416) * C1213) +
            C20387 * C50942 - C20388 * C1215 - C20389 * C1210) *
               C19768 +
           (C20388 * C1214 - (C20387 * C50941 + C20386 * C1213) +
            C20389 * C50942 - C20390 * C1215 - C20391 * C1210) *
               C19769 +
           (C20390 * C1214 - (C20389 * C50941 + C20388 * C1213) +
            C20391 * C50942 - C21026 * C1215 - C21027 * C1210) *
               C19770 +
           (C21026 * C1214 - (C20391 * C50941 + C20390 * C1213) +
            C21027 * C50942 - (C19772 * C21017 + C50610 * C21018) * C1215 -
            (C19772 * C21019 + C50610 * C21020) * C1210) *
               C19771) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
            C16990 * C124 + C16985 * C131) *
               C976 +
           (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
            C16990 * C135 + C16985 * C145) *
               C971 -
           (C17186 + C17187 + C17188) * C977 -
           (C17189 + C17190 + C17191) * C972 +
           (C17192 + C17193 + C17194) * C978 +
           (C17195 + C17196 + C17197) * C973 -
           (C18152 + C18153 + C18154) * C979 -
           (C18155 + C18156 + C18157) * C974) *
              C16986 +
          ((C17188 + C17187 + C17186) * C976 +
           (C17191 + C17190 + C17189) * C971 -
           (C17194 + C17193 + C17192) * C977 -
           (C17197 + C17196 + C17195) * C972 +
           (C18154 + C18153 + C18152) * C978 +
           (C18157 + C18156 + C18155) * C973 -
           (C16990 * C2326 + C16985 * C2331 + C16989 * C2325 + C16984 * C2328 +
            C16988 * C2324 + C16983 * C2327) *
               C979 -
           (C16990 * C2332 + C16985 * C2335 + C16989 * C2330 + C16984 * C2334 +
            C16988 * C2329 + C16983 * C2333) *
               C974) *
              C50805) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C903 +
            (C17191 + C17190 + C17189) * C898 -
            (C17194 + C17193 + C17192) * C904 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C900 +
          (((C17198 + C17199 + C17200) * C904 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C898 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C903) +
            (C17201 + C17202 + C17203) * C50705) *
               C16986 +
           ((C17206 + C17205 + C17204) * C904 -
            ((C17203 + C17202 + C17201) * C898 +
             (C17200 + C17199 + C17198) * C903) +
            (C17209 + C17208 + C17207) * C50705) *
               C50805) *
              C50767 * C901 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C903 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C898 -
            (C17514 + C17515 + C17516) * C904 -
            (C17517 + C17518 + C17519) * C50705) *
               C16986 +
           ((C17516 + C17515 + C17514) * C903 +
            (C17519 + C17518 + C17517) * C898 -
            (C16990 * C265 + C16985 * C284 + C16989 * C263 + C16984 * C277 +
             C16988 * C262 + C16983 * C276) *
                C904 -
            (C16990 * C285 + C16985 * C295 + C16989 * C281 + C16984 * C293 +
             C16988 * C280 + C16983 * C292) *
                C50705) *
               C50805) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C903 +
            (C17191 + C17190 + C17189) * C898 -
            (C17194 + C17193 + C17192) * C904 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C50635 * C394 +
          (((C17884 + C17885 + C17886) * C904 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C898 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C903) +
            (C17887 + C17888 + C17889) * C50705) *
               C16986 +
           ((C16988 * C1447 + C16983 * C1451 + C16989 * C1446 + C16984 * C1450 +
             C16990 * C1445 + C16985 * C1449) *
                C904 -
            ((C17889 + C17888 + C17887) * C898 +
             (C17886 + C17885 + C17884) * C903) +
            (C16988 * C1455 + C16983 * C1459 + C16989 * C1454 + C16984 * C1458 +
             C16990 * C1453 + C16985 * C1457) *
                C50705) *
               C50805) *
              C50767 * C50635 * C395 +
          (((C16988 * C402 + C16983 * C417 + C16989 * C403 + C16984 * C418 +
             C16990 * C404 + C16985 * C419) *
                C903 +
            (C16988 * C421 + C16983 * C432 + C16989 * C422 + C16984 * C433 +
             C16990 * C423 + C16985 * C434) *
                C898 -
            (C18316 + C18317 + C18318) * C904 -
            (C18319 + C18320 + C18321) * C50705) *
               C16986 +
           ((C18318 + C18317 + C18316) * C903 +
            (C18321 + C18320 + C18319) * C898 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C904 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C50705) *
               C50805) *
              C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
               C19769 +
           (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
               C19770 +
           (C19908 * C903 + C19909 * C898 - C19910 * C904 - C19911 * C50705) *
               C19771) *
              C50767 * C900 +
          ((C19912 * C904 -
            ((C19772 * C134 + C50610 * C144) * C898 +
             (C19772 * C123 + C50610 * C130) * C903) +
            C19913 * C50705) *
               C19768 +
           (C19914 * C904 - (C19913 * C898 + C19912 * C903) + C19915 * C50705) *
               C19769 +
           (C19916 * C904 - (C19915 * C898 + C19914 * C903) + C19917 * C50705) *
               C19770 +
           (C19918 * C904 - (C19917 * C898 + C19916 * C903) + C19919 * C50705) *
               C19771) *
              C50767 * C901 +
          (((C19772 * C124 + C50610 * C131) * C903 +
            (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
            C20129 * C50705) *
               C19768 +
           (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
               C19769 +
           (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
               C19770 +
           (C20132 * C903 + C20133 * C898 -
            (C19772 * C2326 + C50610 * C2331) * C904 -
            (C19772 * C2332 + C50610 * C2335) * C50705) *
               C19771) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19772 * C122 + C50610 * C129) * C976 +
           (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
           C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
           C19909 * C974) *
              C19768 +
          (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
           C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
              C19769 +
          (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
           C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
              C19770 +
          (C19908 * C976 + C19909 * C971 - C19910 * C977 - C19911 * C972 +
           C20570 * C978 + C20571 * C973 -
           (C19772 * C20561 + C50610 * C20562) * C979 -
           (C19772 * C20563 + C50610 * C20564) * C974) *
              C19771) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
               C19769 +
           (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
               C19770 +
           (C19908 * C903 + C19909 * C898 - C19910 * C904 - C19911 * C50705) *
               C19771) *
              C50767 * C50635 * C394 +
          ((C20386 * C904 -
            ((C19772 * C415 + C50610 * C431) * C898 +
             (C19772 * C401 + C50610 * C416) * C903) +
            C20387 * C50705) *
               C19768 +
           (C20388 * C904 - (C20387 * C898 + C20386 * C903) + C20389 * C50705) *
               C19769 +
           (C20390 * C904 - (C20389 * C898 + C20388 * C903) + C20391 * C50705) *
               C19770 +
           ((C19772 * C4071 + C50610 * C4073) * C904 -
            (C20391 * C898 + C20390 * C903) +
            (C19772 * C4075 + C50610 * C4077) * C50705) *
               C19771) *
              C50767 * C50635 * C395 +
          (((C19772 * C402 + C50610 * C417) * C903 +
            (C19772 * C421 + C50610 * C432) * C898 - C20686 * C904 -
            C20687 * C50705) *
               C19768 +
           (C20686 * C903 + C20687 * C898 - C20688 * C904 - C20689 * C50705) *
               C19769 +
           (C20688 * C903 + C20689 * C898 - C20690 * C904 - C20691 * C50705) *
               C19770 +
           (C20690 * C903 + C20691 * C898 -
            (C19772 * C20669 + C50610 * C20670) * C904 -
            (C19772 * C20671 + C50610 * C20672) * C50705) *
               C19771) *
              C50767 * C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C903 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C898 -
             (C17186 + C17187 + C17188) * C904 -
             (C17189 + C17190 + C17191) * C50705) *
                C16986 +
            ((C17188 + C17187 + C17186) * C903 +
             (C17191 + C17190 + C17189) * C898 -
             (C17194 + C17193 + C17192) * C904 -
             (C17197 + C17196 + C17195) * C50705) *
                C50805) *
               C50767 * C50888 +
           (((C17198 + C17199 + C17200) * C904 -
             ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
               C16988 * C134 + C16983 * C144) *
                  C898 +
              (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
               C16988 * C123 + C16983 * C130) *
                  C903) +
             (C17201 + C17202 + C17203) * C50705) *
                C16986 +
            ((C17206 + C17205 + C17204) * C904 -
             ((C17203 + C17202 + C17201) * C898 +
              (C17200 + C17199 + C17198) * C903) +
             (C17209 + C17208 + C17207) * C50705) *
                C50805) *
               C50767 * C50640) *
              C50897 +
          ((((C17884 + C17885 + C17886) * C904 -
             ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
               C16988 * C415 + C16983 * C431) *
                  C898 +
              (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
               C16988 * C401 + C16983 * C416) *
                  C903) +
             (C17887 + C17888 + C17889) * C50705) *
                C16986 +
            ((C16988 * C1447 + C16983 * C1451 + C16989 * C1446 +
              C16984 * C1450 + C16990 * C1445 + C16985 * C1449) *
                 C904 -
             ((C17889 + C17888 + C17887) * C898 +
              (C17886 + C17885 + C17884) * C903) +
             (C16988 * C1455 + C16983 * C1459 + C16989 * C1454 +
              C16984 * C1458 + C16990 * C1453 + C16985 * C1457) *
                 C50705) *
                C50805) *
               C50767 * C50888 +
           (((C16988 * C397 + C16983 * C407 + C16989 * C398 + C16984 * C408 +
              C16990 * C399 + C16985 * C409) *
                 C903 +
             (C16988 * C411 + C16983 * C427 + C16989 * C412 + C16984 * C428 +
              C16990 * C413 + C16985 * C429) *
                 C898 -
             (C17890 + C17891 + C17892) * C904 -
             (C17893 + C17894 + C17895) * C50705) *
                C16986 +
            ((C17892 + C17891 + C17890) * C903 +
             (C17895 + C17894 + C17893) * C898 -
             (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 +
              C16984 * C1449 + C16988 * C1446 + C16983 * C1450) *
                 C904 -
             (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 +
              C16984 * C1457 + C16988 * C1454 + C16983 * C1458) *
                 C50705) *
                C50805) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C19768 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C19769 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C19770 +
            (C19908 * C903 + C19909 * C898 - C19910 * C904 - C19911 * C50705) *
                C19771) *
               C50767 * C50888 +
           ((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C19768 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C19769 +
            (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
             C19917 * C50705) *
                C19770 +
            (C19918 * C904 - (C19917 * C898 + C19916 * C903) +
             C19919 * C50705) *
                C19771) *
               C50767 * C50640) *
              C50897 +
          (((C20386 * C904 -
             ((C19772 * C415 + C50610 * C431) * C898 +
              (C19772 * C401 + C50610 * C416) * C903) +
             C20387 * C50705) *
                C19768 +
            (C20388 * C904 - (C20387 * C898 + C20386 * C903) +
             C20389 * C50705) *
                C19769 +
            (C20390 * C904 - (C20389 * C898 + C20388 * C903) +
             C20391 * C50705) *
                C19770 +
            ((C19772 * C4071 + C50610 * C4073) * C904 -
             (C20391 * C898 + C20390 * C903) +
             (C19772 * C4075 + C50610 * C4077) * C50705) *
                C19771) *
               C50767 * C50888 +
           (((C19772 * C397 + C50610 * C407) * C903 +
             (C19772 * C411 + C50610 * C427) * C898 - C20392 * C904 -
             C20393 * C50705) *
                C19768 +
            (C20392 * C903 + C20393 * C898 - C20394 * C904 - C20395 * C50705) *
                C19769 +
            (C20394 * C903 + C20395 * C898 - C20396 * C904 - C20397 * C50705) *
                C19770 +
            (C20396 * C903 + C20397 * C898 -
             (C19772 * C4070 + C50610 * C4072) * C904 -
             (C19772 * C4074 + C50610 * C4076) * C50705) *
                C19771) *
               C50767 * C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C903 +
            (C17191 + C17190 + C17189) * C898 -
            (C17194 + C17193 + C17192) * C904 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C900 +
          (((C17198 + C17199 + C17200) * C904 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C898 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C903) +
            (C17201 + C17202 + C17203) * C50705) *
               C16986 +
           ((C17206 + C17205 + C17204) * C904 -
            ((C17203 + C17202 + C17201) * C898 +
             (C17200 + C17199 + C17198) * C903) +
            (C17209 + C17208 + C17207) * C50705) *
               C50805) *
              C50767 * C901 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C903 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C898 -
            (C17514 + C17515 + C17516) * C904 -
            (C17517 + C17518 + C17519) * C50705) *
               C16986 +
           ((C17516 + C17515 + C17514) * C903 +
            (C17519 + C17518 + C17517) * C898 -
            (C16990 * C265 + C16985 * C284 + C16989 * C263 + C16984 * C277 +
             C16988 * C262 + C16983 * C276) *
                C904 -
            (C16990 * C285 + C16985 * C295 + C16989 * C281 + C16984 * C293 +
             C16988 * C280 + C16983 * C292) *
                C50705) *
               C50805) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
            C16990 * C124 + C16985 * C131) *
               C976 +
           (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
            C16990 * C135 + C16985 * C145) *
               C971 -
           (C17186 + C17187 + C17188) * C977 -
           (C17189 + C17190 + C17191) * C972 +
           (C17192 + C17193 + C17194) * C978 +
           (C17195 + C17196 + C17197) * C973 -
           (C18152 + C18153 + C18154) * C979 -
           (C18155 + C18156 + C18157) * C974) *
              C16986 +
          ((C17188 + C17187 + C17186) * C976 +
           (C17191 + C17190 + C17189) * C971 -
           (C17194 + C17193 + C17192) * C977 -
           (C17197 + C17196 + C17195) * C972 +
           (C18154 + C18153 + C18152) * C978 +
           (C18157 + C18156 + C18155) * C973 -
           (C16990 * C2326 + C16985 * C2331 + C16989 * C2325 + C16984 * C2328 +
            C16988 * C2324 + C16983 * C2327) *
               C979 -
           (C16990 * C2332 + C16985 * C2335 + C16989 * C2330 + C16984 * C2334 +
            C16988 * C2329 + C16983 * C2333) *
               C974) *
              C50805) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
               C19769 +
           (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
               C19770 +
           (C19908 * C903 + C19909 * C898 - C19910 * C904 - C19911 * C50705) *
               C19771) *
              C50767 * C900 +
          ((C19912 * C904 -
            ((C19772 * C134 + C50610 * C144) * C898 +
             (C19772 * C123 + C50610 * C130) * C903) +
            C19913 * C50705) *
               C19768 +
           (C19914 * C904 - (C19913 * C898 + C19912 * C903) + C19915 * C50705) *
               C19769 +
           (C19916 * C904 - (C19915 * C898 + C19914 * C903) + C19917 * C50705) *
               C19770 +
           (C19918 * C904 - (C19917 * C898 + C19916 * C903) + C19919 * C50705) *
               C19771) *
              C50767 * C901 +
          (((C19772 * C124 + C50610 * C131) * C903 +
            (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
            C20129 * C50705) *
               C19768 +
           (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
               C19769 +
           (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
               C19770 +
           (C20132 * C903 + C20133 * C898 -
            (C19772 * C2326 + C50610 * C2331) * C904 -
            (C19772 * C2332 + C50610 * C2335) * C50705) *
               C19771) *
              C50767 * C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19772 * C122 + C50610 * C129) * C976 +
           (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
           C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
           C19909 * C974) *
              C19768 +
          (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
           C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
              C19769 +
          (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
           C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
              C19770 +
          (C19908 * C976 + C19909 * C971 - C19910 * C977 - C19911 * C972 +
           C20570 * C978 + C20571 * C973 -
           (C19772 * C20561 + C50610 * C20562) * C979 -
           (C19772 * C20563 + C50610 * C20564) * C974) *
              C19771) *
         C50767 * C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C540 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50896 -
                      (C17186 + C17187 + C17188) * C541 -
                      (C17189 + C17190 + C17191) * C50705) *
                         C16986 +
                     ((C17188 + C17187 + C17186) * C540 +
                      (C17191 + C17190 + C17189) * C50896 -
                      (C17194 + C17193 + C17192) * C541 -
                      (C17197 + C17196 + C17195) * C50705) *
                         C50805) *
                        C50767 * C50888 +
                    (((C17198 + C17199 + C17200) * C541 -
                      ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                        C16984 * C145 + C16988 * C134 + C16983 * C144) *
                           C50896 +
                       (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                        C16984 * C131 + C16988 * C123 + C16983 * C130) *
                           C540) +
                      (C17201 + C17202 + C17203) * C50705) *
                         C16986 +
                     ((C17206 + C17205 + C17204) * C541 -
                      ((C17203 + C17202 + C17201) * C50896 +
                       (C17200 + C17199 + C17198) * C540) +
                      (C17209 + C17208 + C17207) * C50705) *
                         C50805) *
                        C50767 * C50640) *
                       C1558 +
                   ((((C17884 + C17885 + C17886) * C541 -
                      ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                        C16984 * C427 + C16988 * C415 + C16983 * C431) *
                           C50896 +
                       (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                        C16984 * C407 + C16988 * C401 + C16983 * C416) *
                           C540) +
                      (C17887 + C17888 + C17889) * C50705) *
                         C16986 +
                     ((C18822 + C18821 + C18820) * C541 -
                      ((C17889 + C17888 + C17887) * C50896 +
                       (C17886 + C17885 + C17884) * C540) +
                      (C18825 + C18824 + C18823) * C50705) *
                         C50805) *
                        C50767 * C50888 +
                    (((C16988 * C397 + C16983 * C407 + C16989 * C398 +
                       C16984 * C408 + C16990 * C399 + C16985 * C409) *
                          C540 +
                      (C16988 * C411 + C16983 * C427 + C16989 * C412 +
                       C16984 * C428 + C16990 * C413 + C16985 * C429) *
                          C50896 -
                      (C17890 + C17891 + C17892) * C541 -
                      (C17893 + C17894 + C17895) * C50705) *
                         C16986 +
                     ((C17892 + C17891 + C17890) * C540 +
                      (C17895 + C17894 + C17893) * C50896 -
                      (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 +
                       C16984 * C1449 + C16988 * C1446 + C16983 * C1450) *
                          C541 -
                      (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 +
                       C16984 * C1457 + C16988 * C1454 + C16983 * C1458) *
                          C50705) *
                         C50805) *
                        C50767 * C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C19768 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C19769 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C19770 +
                     (C19908 * C540 + C19909 * C50896 - C19910 * C541 -
                      C19911 * C50705) *
                         C19771) *
                        C50767 * C50888 +
                    ((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C19768 +
                     (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                      C19915 * C50705) *
                         C19769 +
                     (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                      C19917 * C50705) *
                         C19770 +
                     (C19918 * C541 - (C19917 * C50896 + C19916 * C540) +
                      C19919 * C50705) *
                         C19771) *
                        C50767 * C50640) *
                       C1558 +
                   (((C20386 * C541 -
                      ((C19772 * C415 + C50610 * C431) * C50896 +
                       (C19772 * C401 + C50610 * C416) * C540) +
                      C20387 * C50705) *
                         C19768 +
                     (C20388 * C541 - (C20387 * C50896 + C20386 * C540) +
                      C20389 * C50705) *
                         C19769 +
                     (C20390 * C541 - (C20389 * C50896 + C20388 * C540) +
                      C20391 * C50705) *
                         C19770 +
                     (C21026 * C541 - (C20391 * C50896 + C20390 * C540) +
                      C21027 * C50705) *
                         C19771) *
                        C50767 * C50888 +
                    (((C19772 * C397 + C50610 * C407) * C540 +
                      (C19772 * C411 + C50610 * C427) * C50896 - C20392 * C541 -
                      C20393 * C50705) *
                         C19768 +
                     (C20392 * C540 + C20393 * C50896 - C20394 * C541 -
                      C20395 * C50705) *
                         C19769 +
                     (C20394 * C540 + C20395 * C50896 - C20396 * C541 -
                      C20397 * C50705) *
                         C19770 +
                     (C20396 * C540 + C20397 * C50896 -
                      (C19772 * C4070 + C50610 * C4072) * C541 -
                      (C19772 * C4074 + C50610 * C4076) * C50705) *
                         C19771) *
                        C50767 * C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C540 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50896 -
            (C17186 + C17187 + C17188) * C541 -
            (C17189 + C17190 + C17191) * C50705) *
               C16986 +
           ((C17188 + C17187 + C17186) * C540 +
            (C17191 + C17190 + C17189) * C50896 -
            (C17194 + C17193 + C17192) * C541 -
            (C17197 + C17196 + C17195) * C50705) *
               C50805) *
              C50767 * C50635 * C50943 +
          (((C17884 + C17885 + C17886) * C541 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50896 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C540) +
            (C17887 + C17888 + C17889) * C50705) *
               C16986 +
           ((C18822 + C18821 + C18820) * C541 -
            ((C17889 + C17888 + C17887) * C50896 +
             (C17886 + C17885 + C17884) * C540) +
            (C18825 + C18824 + C18823) * C50705) *
               C50805) *
              C50767 * C50635 * C50944 +
          (((C16988 * C402 + C16983 * C417 + C16989 * C403 + C16984 * C418 +
             C16990 * C404 + C16985 * C419) *
                C540 +
            (C16988 * C421 + C16983 * C432 + C16989 * C422 + C16984 * C433 +
             C16990 * C423 + C16985 * C434) *
                C50896 -
            (C18316 + C18317 + C18318) * C541 -
            (C18319 + C18320 + C18321) * C50705) *
               C16986 +
           ((C18318 + C18317 + C18316) * C540 +
            (C18321 + C18320 + C18319) * C50896 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C541 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C50705) *
               C50805) *
              C50767 * C50635 * C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C540 +
            (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
            C19905 * C50705) *
               C19768 +
           (C19904 * C540 + C19905 * C50896 - C19906 * C541 - C19907 * C50705) *
               C19769 +
           (C19906 * C540 + C19907 * C50896 - C19908 * C541 - C19909 * C50705) *
               C19770 +
           (C19908 * C540 + C19909 * C50896 - C19910 * C541 - C19911 * C50705) *
               C19771) *
              C50767 * C50635 * C50943 +
          ((C20386 * C541 -
            ((C19772 * C415 + C50610 * C431) * C50896 +
             (C19772 * C401 + C50610 * C416) * C540) +
            C20387 * C50705) *
               C19768 +
           (C20388 * C541 - (C20387 * C50896 + C20386 * C540) +
            C20389 * C50705) *
               C19769 +
           (C20390 * C541 - (C20389 * C50896 + C20388 * C540) +
            C20391 * C50705) *
               C19770 +
           (C21026 * C541 - (C20391 * C50896 + C20390 * C540) +
            C21027 * C50705) *
               C19771) *
              C50767 * C50635 * C50944 +
          (((C19772 * C402 + C50610 * C417) * C540 +
            (C19772 * C421 + C50610 * C432) * C50896 - C20686 * C541 -
            C20687 * C50705) *
               C19768 +
           (C20686 * C540 + C20687 * C50896 - C20688 * C541 - C20689 * C50705) *
               C19769 +
           (C20688 * C540 + C20689 * C50896 - C20690 * C541 - C20691 * C50705) *
               C19770 +
           (C20690 * C540 + C20691 * C50896 -
            (C19772 * C20669 + C50610 * C20670) * C541 -
            (C19772 * C20671 + C50610 * C20672) * C50705) *
               C19771) *
              C50767 * C50635 * C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C16986 +
           ((C17188 + C17187 + C17186) * C253 +
            (C17191 + C17190 + C17189) * C248 -
            (C17194 + C17193 + C17192) * C254 -
            (C17197 + C17196 + C17195) * C249 +
            (C18154 + C18153 + C18152) * C255 +
            (C18157 + C18156 + C18155) * C250) *
               C50805) *
              C50767 * C50635 * C1558 +
          (((C17884 + C17885 + C17886) * C254 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C248 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C253) +
            (C17887 + C17888 + C17889) * C249 -
            (C18820 + C18821 + C18822) * C255 -
            (C18823 + C18824 + C18825) * C250) *
               C16986 +
           ((C18822 + C18821 + C18820) * C254 -
            ((C17889 + C17888 + C17887) * C248 +
             (C17886 + C17885 + C17884) * C253) +
            (C18825 + C18824 + C18823) * C249 -
            (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 + C16984 * C3084 +
             C16988 * C3080 + C16983 * C3083) *
                C255 -
            (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 + C16984 * C3090 +
             C16988 * C3085 + C16983 * C3089) *
                C250) *
               C50805) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C16986 +
            ((C17188 + C17187 + C17186) * C121 +
             (C17191 + C17190 + C17189) * C50653) *
                C50805) *
               C50767 * C900 -
           (((C17203 + C17202 + C17201) * C50653 +
             (C17200 + C17199 + C17198) * C121) *
                C50805 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C16986) *
               C50767 * C901 +
           (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
              C16990 * C126 + C16985 * C138) *
                 C121 +
             (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
              C16990 * C137 + C16985 * C147) *
                 C50653) *
                C16986 +
            ((C17516 + C17515 + C17514) * C121 +
             (C17519 + C17518 + C17517) * C50653) *
                C50805) *
               C50767 * C902) *
              C1558 +
          ((((C16988 * C397 + C16983 * C407 + C16989 * C398 + C16984 * C408 +
              C16990 * C399 + C16985 * C409) *
                 C121 +
             (C16988 * C411 + C16983 * C427 + C16989 * C412 + C16984 * C428 +
              C16990 * C413 + C16985 * C429) *
                 C50653) *
                C16986 +
            ((C17892 + C17891 + C17890) * C121 +
             (C17895 + C17894 + C17893) * C50653) *
                C50805) *
               C50767 * C901 -
           (((C17889 + C17888 + C17887) * C50653 +
             (C17886 + C17885 + C17884) * C121) *
                C50805 +
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50653 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C121) *
                C16986) *
               C50767 * C900 -
           (((C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
              C16988 * C791 + C16983 * C797) *
                 C50653 +
             (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
              C16988 * C782 + C16983 * C787) *
                 C121) *
                C50805 +
            ((C16990 * C414 + C16985 * C430 + C16989 * C413 + C16984 * C429 +
              C16988 * C412 + C16983 * C428) *
                 C50653 +
             (C16990 * C400 + C16985 * C410 + C16989 * C399 + C16984 * C409 +
              C16988 * C398 + C16983 * C408) *
                 C121) *
                C16986) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C121 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50653) *
               C16986 +
           ((C17188 + C17187 + C17186) * C121 +
            (C17191 + C17190 + C17189) * C50653) *
               C50805) *
              C50767 * C50635 * C1724 -
          (((C17889 + C17888 + C17887) * C50653 +
            (C17886 + C17885 + C17884) * C121) *
               C50805 +
           ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
             C16988 * C415 + C16983 * C431) *
                C50653 +
            (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
             C16988 * C401 + C16983 * C416) *
                C121) *
               C16986) *
              C50767 * C50635 * C1725 +
          (((C16988 * C402 + C16983 * C417 + C16989 * C403 + C16984 * C418 +
             C16990 * C404 + C16985 * C419) *
                C121 +
            (C16988 * C421 + C16983 * C432 + C16989 * C422 + C16984 * C433 +
             C16990 * C423 + C16985 * C434) *
                C50653) *
               C16986 +
           ((C18318 + C18317 + C18316) * C121 +
            (C18321 + C18320 + C18319) * C50653) *
               C50805) *
              C50767 * C50635 * C1726 -
          (((C16990 * C5985 + C16985 * C5986 + C16989 * C4490 + C16984 * C4496 +
             C16988 * C4491 + C16983 * C4497) *
                C50653 +
            (C16990 * C5983 + C16985 * C5984 + C16989 * C4484 + C16984 * C4492 +
             C16988 * C4485 + C16983 * C4493) *
                C121) *
               C50805 +
           ((C16990 * C1733 + C16985 * C1741 + C16989 * C1734 + C16984 * C1742 +
             C16988 * C1735 + C16983 * C1743) *
                C50653 +
            (C16990 * C1729 + C16985 * C1737 + C16989 * C1730 + C16984 * C1738 +
             C16988 * C1731 + C16983 * C1739) *
                C121) *
               C16986) *
              C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C19768 +
            (C19904 * C121 + C19905 * C50653) * C19769 +
            (C19906 * C121 + C19907 * C50653) * C19770 +
            (C19908 * C121 + C19909 * C50653) * C19771) *
               C50767 * C900 -
           ((C19917 * C50653 + C19916 * C121) * C19771 +
            (C19915 * C50653 + C19914 * C121) * C19770 +
            (C19913 * C50653 + C19912 * C121) * C19769 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C19768) *
               C50767 * C901 +
           (((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C19768 +
            (C20128 * C121 + C20129 * C50653) * C19769 +
            (C20130 * C121 + C20131 * C50653) * C19770 +
            (C20132 * C121 + C20133 * C50653) * C19771) *
               C50767 * C902) *
              C1558 +
          ((((C19772 * C397 + C50610 * C407) * C121 +
             (C19772 * C411 + C50610 * C427) * C50653) *
                C19768 +
            (C20392 * C121 + C20393 * C50653) * C19769 +
            (C20394 * C121 + C20395 * C50653) * C19770 +
            (C20396 * C121 + C20397 * C50653) * C19771) *
               C50767 * C901 -
           ((C20391 * C50653 + C20390 * C121) * C19771 +
            (C20389 * C50653 + C20388 * C121) * C19770 +
            (C20387 * C50653 + C20386 * C121) * C19769 +
            ((C19772 * C415 + C50610 * C431) * C50653 +
             (C19772 * C401 + C50610 * C416) * C121) *
                C19768) *
               C50767 * C900 -
           (((C19772 * C3088 + C50610 * C3091) * C50653 +
             (C19772 * C3082 + C50610 * C3087) * C121) *
                C19771 +
            ((C19772 * C1453 + C50610 * C1457) * C50653 +
             (C19772 * C1445 + C50610 * C1449) * C121) *
                C19770 +
            ((C19772 * C791 + C50610 * C797) * C50653 +
             (C19772 * C782 + C50610 * C787) * C121) *
                C19769 +
            ((C19772 * C412 + C50610 * C428) * C50653 +
             (C19772 * C398 + C50610 * C408) * C121) *
                C19768) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C19768 +
           (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
            C19908 * C255 + C19909 * C250) *
               C19769 +
           (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
            C19910 * C255 + C19911 * C250) *
               C19770 +
           (C19908 * C253 + C19909 * C248 - C19910 * C254 - C19911 * C249 +
            C20570 * C255 + C20571 * C250) *
               C19771) *
              C50767 * C50635 * C1558 +
          ((C20386 * C254 -
            ((C19772 * C415 + C50610 * C431) * C248 +
             (C19772 * C401 + C50610 * C416) * C253) +
            C20387 * C249 - C20388 * C255 - C20389 * C250) *
               C19768 +
           (C20388 * C254 - (C20387 * C248 + C20386 * C253) + C20389 * C249 -
            C20390 * C255 - C20391 * C250) *
               C19769 +
           (C20390 * C254 - (C20389 * C248 + C20388 * C253) + C20391 * C249 -
            C21026 * C255 - C21027 * C250) *
               C19770 +
           (C21026 * C254 - (C20391 * C248 + C20390 * C253) + C21027 * C249 -
            (C19772 * C21017 + C50610 * C21018) * C255 -
            (C19772 * C21019 + C50610 * C21020) * C250) *
               C19771) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C121 +
            (C19772 * C133 + C50610 * C143) * C50653) *
               C19768 +
           (C19904 * C121 + C19905 * C50653) * C19769 +
           (C19906 * C121 + C19907 * C50653) * C19770 +
           (C19908 * C121 + C19909 * C50653) * C19771) *
              C50767 * C50635 * C1724 -
          ((C20391 * C50653 + C20390 * C121) * C19771 +
           (C20389 * C50653 + C20388 * C121) * C19770 +
           (C20387 * C50653 + C20386 * C121) * C19769 +
           ((C19772 * C415 + C50610 * C431) * C50653 +
            (C19772 * C401 + C50610 * C416) * C121) *
               C19768) *
              C50767 * C50635 * C1725 +
          (((C19772 * C402 + C50610 * C417) * C121 +
            (C19772 * C421 + C50610 * C432) * C50653) *
               C19768 +
           (C20686 * C121 + C20687 * C50653) * C19769 +
           (C20688 * C121 + C20689 * C50653) * C19770 +
           (C20690 * C121 + C20691 * C50653) * C19771) *
              C50767 * C50635 * C1726 -
          (((C19772 * C21290 + C50610 * C21292) * C50653 +
            (C19772 * C21289 + C50610 * C21291) * C121) *
               C19771 +
           ((C19772 * C4487 + C50610 * C4495) * C50653 +
            (C19772 * C4483 + C50610 * C4489) * C121) *
               C19770 +
           ((C19772 * C4491 + C50610 * C4497) * C50653 +
            (C19772 * C4485 + C50610 * C4493) * C121) *
               C19769 +
           ((C19772 * C1735 + C50610 * C1743) * C50653 +
            (C19772 * C1731 + C50610 * C1739) * C121) *
               C19768) *
              C50767 * C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C121 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50653) *
                         C16986 +
                     ((C17188 + C17187 + C17186) * C121 +
                      (C17191 + C17190 + C17189) * C50653) *
                         C50805) *
                        C50767 * C50888 -
                    (((C17203 + C17202 + C17201) * C50653 +
                      (C17200 + C17199 + C17198) * C121) *
                         C50805 +
                     ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                       C16984 * C145 + C16988 * C134 + C16983 * C144) *
                          C50653 +
                      (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                       C16984 * C131 + C16988 * C123 + C16983 * C130) *
                          C121) *
                         C16986) *
                        C50767 * C50640) *
                       C50943 +
                   ((((C16988 * C397 + C16983 * C407 + C16989 * C398 +
                       C16984 * C408 + C16990 * C399 + C16985 * C409) *
                          C121 +
                      (C16988 * C411 + C16983 * C427 + C16989 * C412 +
                       C16984 * C428 + C16990 * C413 + C16985 * C429) *
                          C50653) *
                         C16986 +
                     ((C17892 + C17891 + C17890) * C121 +
                      (C17895 + C17894 + C17893) * C50653) *
                         C50805) *
                        C50767 * C50640 -
                    (((C17889 + C17888 + C17887) * C50653 +
                      (C17886 + C17885 + C17884) * C121) *
                         C50805 +
                     ((C16990 * C412 + C16985 * C428 + C16989 * C411 +
                       C16984 * C427 + C16988 * C415 + C16983 * C431) *
                          C50653 +
                      (C16990 * C398 + C16985 * C408 + C16989 * C397 +
                       C16984 * C407 + C16988 * C401 + C16983 * C416) *
                          C121) *
                         C16986) *
                        C50767 * C50888) *
                       C50944 +
                   ((((C16988 * C402 + C16983 * C417 + C16989 * C403 +
                       C16984 * C418 + C16990 * C404 + C16985 * C419) *
                          C121 +
                      (C16988 * C421 + C16983 * C432 + C16989 * C422 +
                       C16984 * C433 + C16990 * C423 + C16985 * C434) *
                          C50653) *
                         C16986 +
                     ((C18318 + C18317 + C18316) * C121 +
                      (C18321 + C18320 + C18319) * C50653) *
                         C50805) *
                        C50767 * C50888 -
                    (((C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
                       C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                          C50653 +
                      (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
                       C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                          C121) *
                         C50805 +
                     ((C16990 * C424 + C16985 * C435 + C16989 * C423 +
                       C16984 * C434 + C16988 * C422 + C16983 * C433) *
                          C50653 +
                      (C16990 * C405 + C16985 * C420 + C16989 * C404 +
                       C16984 * C419 + C16988 * C403 + C16983 * C418) *
                          C121) *
                         C16986) *
                        C50767 * C50640) *
                       C1974)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C121 +
                      (C19772 * C133 + C50610 * C143) * C50653) *
                         C19768 +
                     (C19904 * C121 + C19905 * C50653) * C19769 +
                     (C19906 * C121 + C19907 * C50653) * C19770 +
                     (C19908 * C121 + C19909 * C50653) * C19771) *
                        C50767 * C50888 -
                    ((C19917 * C50653 + C19916 * C121) * C19771 +
                     (C19915 * C50653 + C19914 * C121) * C19770 +
                     (C19913 * C50653 + C19912 * C121) * C19769 +
                     ((C19772 * C134 + C50610 * C144) * C50653 +
                      (C19772 * C123 + C50610 * C130) * C121) *
                         C19768) *
                        C50767 * C50640) *
                       C50943 +
                   ((((C19772 * C397 + C50610 * C407) * C121 +
                      (C19772 * C411 + C50610 * C427) * C50653) *
                         C19768 +
                     (C20392 * C121 + C20393 * C50653) * C19769 +
                     (C20394 * C121 + C20395 * C50653) * C19770 +
                     (C20396 * C121 + C20397 * C50653) * C19771) *
                        C50767 * C50640 -
                    ((C20391 * C50653 + C20390 * C121) * C19771 +
                     (C20389 * C50653 + C20388 * C121) * C19770 +
                     (C20387 * C50653 + C20386 * C121) * C19769 +
                     ((C19772 * C415 + C50610 * C431) * C50653 +
                      (C19772 * C401 + C50610 * C416) * C121) *
                         C19768) *
                        C50767 * C50888) *
                       C50944 +
                   ((((C19772 * C402 + C50610 * C417) * C121 +
                      (C19772 * C421 + C50610 * C432) * C50653) *
                         C19768 +
                     (C20686 * C121 + C20687 * C50653) * C19769 +
                     (C20688 * C121 + C20689 * C50653) * C19770 +
                     (C20690 * C121 + C20691 * C50653) * C19771) *
                        C50767 * C50888 -
                    (((C19772 * C3556 + C50610 * C3558) * C50653 +
                      (C19772 * C3552 + C50610 * C3554) * C121) *
                         C19771 +
                     ((C19772 * C2564 + C50610 * C2568) * C50653 +
                      (C19772 * C2559 + C50610 * C2562) * C121) *
                         C19770 +
                     ((C19772 * C1104 + C50610 * C1108) * C50653 +
                      (C19772 * C1096 + C50610 * C1100) * C121) *
                         C19769 +
                     ((C19772 * C422 + C50610 * C433) * C50653 +
                      (C19772 * C403 + C50610 * C418) * C121) *
                         C19768) *
                        C50767 * C50640) *
                       C1974)) /
                     (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C16986 +
            ((C17188 + C17187 + C17186) * C121 +
             (C17191 + C17190 + C17189) * C50653) *
                C50805) *
               C50767 * C900 -
           (((C17203 + C17202 + C17201) * C50653 +
             (C17200 + C17199 + C17198) * C121) *
                C50805 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C16986) *
               C50767 * C901 +
           (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
              C16990 * C126 + C16985 * C138) *
                 C121 +
             (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
              C16990 * C137 + C16985 * C147) *
                 C50653) *
                C16986 +
            ((C17516 + C17515 + C17514) * C121 +
             (C17519 + C17518 + C17517) * C50653) *
                C50805) *
               C50767 * C902) *
              C1558 +
          ((((C16988 * C397 + C16983 * C407 + C16989 * C398 + C16984 * C408 +
              C16990 * C399 + C16985 * C409) *
                 C121 +
             (C16988 * C411 + C16983 * C427 + C16989 * C412 + C16984 * C428 +
              C16990 * C413 + C16985 * C429) *
                 C50653) *
                C16986 +
            ((C17892 + C17891 + C17890) * C121 +
             (C17895 + C17894 + C17893) * C50653) *
                C50805) *
               C50767 * C901 -
           (((C17889 + C17888 + C17887) * C50653 +
             (C17886 + C17885 + C17884) * C121) *
                C50805 +
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C50653 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C121) *
                C16986) *
               C50767 * C900 -
           (((C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
              C16988 * C791 + C16983 * C797) *
                 C50653 +
             (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
              C16988 * C782 + C16983 * C787) *
                 C121) *
                C50805 +
            ((C16990 * C414 + C16985 * C430 + C16989 * C413 + C16984 * C429 +
              C16988 * C412 + C16983 * C428) *
                 C50653 +
             (C16990 * C400 + C16985 * C410 + C16989 * C399 + C16984 * C409 +
              C16988 * C398 + C16983 * C408) *
                 C121) *
                C16986) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C16986 +
           ((C17188 + C17187 + C17186) * C253 +
            (C17191 + C17190 + C17189) * C248 -
            (C17194 + C17193 + C17192) * C254 -
            (C17197 + C17196 + C17195) * C249 +
            (C18154 + C18153 + C18152) * C255 +
            (C18157 + C18156 + C18155) * C250) *
               C50805) *
              C50767 * C50635 * C1558 +
          (((C17884 + C17885 + C17886) * C254 -
            ((C16990 * C412 + C16985 * C428 + C16989 * C411 + C16984 * C427 +
              C16988 * C415 + C16983 * C431) *
                 C248 +
             (C16990 * C398 + C16985 * C408 + C16989 * C397 + C16984 * C407 +
              C16988 * C401 + C16983 * C416) *
                 C253) +
            (C17887 + C17888 + C17889) * C249 -
            (C18820 + C18821 + C18822) * C255 -
            (C18823 + C18824 + C18825) * C250) *
               C16986 +
           ((C18822 + C18821 + C18820) * C254 -
            ((C17889 + C17888 + C17887) * C248 +
             (C17886 + C17885 + C17884) * C253) +
            (C18825 + C18824 + C18823) * C249 -
            (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 + C16984 * C3084 +
             C16988 * C3080 + C16983 * C3083) *
                C255 -
            (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 + C16984 * C3090 +
             C16988 * C3085 + C16983 * C3089) *
                C250) *
               C50805) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C19768 +
            (C19904 * C121 + C19905 * C50653) * C19769 +
            (C19906 * C121 + C19907 * C50653) * C19770 +
            (C19908 * C121 + C19909 * C50653) * C19771) *
               C50767 * C900 -
           ((C19917 * C50653 + C19916 * C121) * C19771 +
            (C19915 * C50653 + C19914 * C121) * C19770 +
            (C19913 * C50653 + C19912 * C121) * C19769 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C19768) *
               C50767 * C901 +
           (((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C19768 +
            (C20128 * C121 + C20129 * C50653) * C19769 +
            (C20130 * C121 + C20131 * C50653) * C19770 +
            (C20132 * C121 + C20133 * C50653) * C19771) *
               C50767 * C902) *
              C1558 +
          ((((C19772 * C397 + C50610 * C407) * C121 +
             (C19772 * C411 + C50610 * C427) * C50653) *
                C19768 +
            (C20392 * C121 + C20393 * C50653) * C19769 +
            (C20394 * C121 + C20395 * C50653) * C19770 +
            (C20396 * C121 + C20397 * C50653) * C19771) *
               C50767 * C901 -
           ((C20391 * C50653 + C20390 * C121) * C19771 +
            (C20389 * C50653 + C20388 * C121) * C19770 +
            (C20387 * C50653 + C20386 * C121) * C19769 +
            ((C19772 * C415 + C50610 * C431) * C50653 +
             (C19772 * C401 + C50610 * C416) * C121) *
                C19768) *
               C50767 * C900 -
           (((C19772 * C3088 + C50610 * C3091) * C50653 +
             (C19772 * C3082 + C50610 * C3087) * C121) *
                C19771 +
            ((C19772 * C1453 + C50610 * C1457) * C50653 +
             (C19772 * C1445 + C50610 * C1449) * C121) *
                C19770 +
            ((C19772 * C791 + C50610 * C797) * C50653 +
             (C19772 * C782 + C50610 * C787) * C121) *
                C19769 +
            ((C19772 * C412 + C50610 * C428) * C50653 +
             (C19772 * C398 + C50610 * C408) * C121) *
                C19768) *
               C50767 * C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C19768 +
           (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
            C19908 * C255 + C19909 * C250) *
               C19769 +
           (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
            C19910 * C255 + C19911 * C250) *
               C19770 +
           (C19908 * C253 + C19909 * C248 - C19910 * C254 - C19911 * C249 +
            C20570 * C255 + C20571 * C250) *
               C19771) *
              C50767 * C50635 * C1558 +
          ((C20386 * C254 -
            ((C19772 * C415 + C50610 * C431) * C248 +
             (C19772 * C401 + C50610 * C416) * C253) +
            C20387 * C249 - C20388 * C255 - C20389 * C250) *
               C19768 +
           (C20388 * C254 - (C20387 * C248 + C20386 * C253) + C20389 * C249 -
            C20390 * C255 - C20391 * C250) *
               C19769 +
           (C20390 * C254 - (C20389 * C248 + C20388 * C253) + C20391 * C249 -
            C21026 * C255 - C21027 * C250) *
               C19770 +
           (C21026 * C254 - (C20391 * C248 + C20390 * C253) + C21027 * C249 -
            (C19772 * C21017 + C50610 * C21018) * C255 -
            (C19772 * C21019 + C50610 * C21020) * C250) *
               C19771) *
              C50767 * C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C540 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50896 -
             (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                C50909 +
            ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
             (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
             C28638 * C541 - C28639 * C50705) *
                C50909 +
            (C28640 * C540 + C28641 * C50896 - C26500 * C541 -
             C26501 * C50705) *
                C50805) *
               C50831) *
              C50939 +
          ((((C24866 + C24867) * C541 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50896 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C540) +
             (C24868 + C24869) * C50705) *
                C50909 +
            ((C24871 + C24870) * C541 -
             ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
             (C24873 + C24872) * C50705) *
                C50805) *
               C33783 +
           ((C28642 * C541 -
             ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
             C28643 * C50705) *
                C50909 +
            ((C25583 + C25582) * C541 - (C28644 * C50896 + C28645 * C540) +
             (C25585 + C25584) * C50705) *
                C50805) *
               C50831) *
              C50940 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C540 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50896 -
             (C25190 + C25191) * C541 - (C25192 + C25193) * C50705) *
                C50909 +
            ((C25191 + C25190) * C540 + (C25193 + C25192) * C50896 -
             (C25194 + C25195) * C541 - (C25196 + C25197) * C50705) *
                C50805) *
               C33783 +
           (((C28376 + C28377) * C540 + (C28378 + C28379) * C50896 -
             (C28170 + C28171) * C541 - (C28172 + C28173) * C50705) *
                C50909 +
            ((C28171 + C28170) * C540 + (C28173 + C28172) * C50896 -
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C541 -
             (C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C539) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C540 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50896 -
              (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                 C50909 +
             ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
              (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                 C50805) *
                C33783 +
            (((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
              C28638 * C541 - C28639 * C50705) *
                 C50909 +
             (C28640 * C540 + C28641 * C50896 - C26500 * C541 -
              C26501 * C50705) *
                 C50805) *
                C50831) *
               C251 +
           ((((C24866 + C24867) * C541 -
              ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                   C50896 +
               (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                   C540) +
              (C24868 + C24869) * C50705) *
                 C50909 +
             ((C24871 + C24870) * C541 -
              ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
              (C24873 + C24872) * C50705) *
                 C50805) *
                C33783 +
            ((C28642 * C541 -
              ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
              C28643 * C50705) *
                 C50909 +
             ((C25583 + C25582) * C541 - (C28644 * C50896 + C28645 * C540) +
              (C25585 + C25584) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50897 +
          ((((C28640 * C541 -
              ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
              C28641 * C50705) *
                 C50909 +
             (C29826 * C541 - (C28639 * C50896 + C28638 * C540) +
              C29827 * C50705) *
                 C50805) *
                C33783 +
            ((C29164 * C541 -
              ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
              C29165 * C50705) *
                 C50909 +
             ((C26011 + C26010) * C541 - (C29166 * C50896 + C29167 * C540) +
              (C26013 + C26012) * C50705) *
                 C50805) *
                C50831) *
               C251 +
           ((((C27955 + C27954) * C540 + (C27953 + C27952) * C50896 -
              C28645 * C541 - C28644 * C50705) *
                 C50909 +
             (C28642 * C540 + C28643 * C50896 - (C25582 + C25583) * C541 -
              (C25584 + C25585) * C50705) *
                 C50805) *
                C33783 +
            (((C27956 + C27957) * C540 + (C27958 + C27959) * C50896 -
              (C27961 + C27960) * C541 - (C27963 + C27962) * C50705) *
                 C50909 +
             ((C27960 + C27961) * C540 + (C27962 + C27963) * C50896 -
              (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
               C50881 * C2562) *
                  C541 -
              (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
               C50881 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C253 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C248 -
             (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
             C24878 * C255 + C24879 * C250) *
                C50909 +
            ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
             (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
             (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
             C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
                C50909 +
            (C28640 * C253 + C28641 * C248 - C26500 * C254 - C26501 * C249 +
             (C26511 + C26510) * C255 + (C26513 + C26512) * C250) *
                C50805) *
               C50831) *
              C251 +
          ((((C24866 + C24867) * C254 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C248 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C253) +
             (C24868 + C24869) * C249 - C24880 * C255 - C24881 * C250) *
                C50909 +
            ((C24871 + C24870) * C254 -
             ((C24869 + C24868) * C248 + (C24867 + C24866) * C253) +
             (C24873 + C24872) * C249 - (C24874 + C24875) * C255 -
             (C24876 + C24877) * C250) *
                C50805) *
               C33783 +
           ((C28642 * C254 -
             ((C27952 + C27953) * C248 + (C27954 + C27955) * C253) +
             C28643 * C249 - (C25582 + C25583) * C255 -
             (C25584 + C25585) * C250) *
                C50909 +
            ((C25583 + C25582) * C254 - (C28644 * C248 + C28645 * C253) +
             (C25585 + C25584) * C249 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C255 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C250) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50909 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
               C33783 +
           (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50909 +
            (C28640 * C121 + C28641 * C50653) * C50805) *
               C50831) *
              C112 -
          (((C28644 * C50653 + C28645 * C121) * C50805 +
            ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50909) *
               C50831 +
           (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50909) *
               C33783) *
              C113 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C50909 +
            ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
               C33783 +
           (((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50909 +
            ((C28171 + C28170) * C121 + (C28173 + C28172) * C50653) * C50805) *
               C50831) *
              C114 -
          ((((C49761 * C794 + C50615 * C799 + C49768 * C792 + C50881 * C798) *
                 C50653 +
             (C49761 * C784 + C50615 * C793 + C49768 * C783 + C50881 * C788) *
                 C121) *
                C50805 +
            ((C49761 * C414 + C50615 * C430 + C49768 * C413 + C50881 * C429) *
                 C50653 +
             (C49761 * C400 + C50615 * C410 + C49768 * C399 + C50881 * C409) *
                 C121) *
                C50909) *
               C50831 +
           (((C49761 * C283 + C50615 * C294 + C49768 * C270 + C50881 * C286) *
                 C50653 +
             (C49761 * C264 + C50615 * C282 + C49768 * C256 + C50881 * C266) *
                 C121) *
                C50805 +
            ((C49761 * C137 + C50615 * C147 + C49768 * C136 + C50881 * C146) *
                 C50653 +
             (C49761 * C126 + C50615 * C138 + C49768 * C125 + C50881 * C132) *
                 C121) *
                C50909) *
               C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C33783 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50909 +
             (C28640 * C121 + C28641 * C50653) * C50805) *
                C50831) *
               C251 -
           (((C28644 * C50653 + C28645 * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50909) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C50909) *
                C33783) *
               C50640) *
              C394 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50909 +
             (C28642 * C121 + C28643 * C50653) * C50805) *
                C33783 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50909 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C50640 -
           (((C29166 * C50653 + C29167 * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50909) *
                C50831 +
            ((C28639 * C50653 + C28638 * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50909) *
                C33783) *
               C251) *
              C395 +
          (((((C27967 + C27966) * C121 + (C27965 + C27964) * C50653) * C50909 +
             (C29164 * C121 + C29165 * C50653) * C50805) *
                C33783 +
            (((C30354 + C30355) * C121 + (C30356 + C30357) * C50653) * C50909 +
             ((C29177 + C29176) * C121 + (C29179 + C29178) * C50653) * C50805) *
                C50831) *
               C251 -
           ((((C49761 * C5985 + C50615 * C5986 + C49768 * C4490 +
               C50881 * C4496) *
                  C50653 +
              (C49761 * C5983 + C50615 * C5984 + C49768 * C4484 +
               C50881 * C4492) *
                  C121) *
                 C50805 +
             ((C49761 * C1733 + C50615 * C1741 + C49768 * C1734 +
               C50881 * C1742) *
                  C50653 +
              (C49761 * C1729 + C50615 * C1737 + C49768 * C1730 +
               C50881 * C1738) *
                  C121) *
                 C50909) *
                C50831 +
            (((C27963 + C27962) * C50653 + (C27961 + C27960) * C121) * C50805 +
             ((C27959 + C27958) * C50653 + (C27957 + C27956) * C121) * C50909) *
                C33783) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C33783 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50909 +
             (C28640 * C121 + C28641 * C50653) * C50805) *
                C50831) *
               C50939 -
           (((C28644 * C50653 + C28645 * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50909) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C50909) *
                C33783) *
               C50940 +
           ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                  C121 +
              (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                  C50653) *
                 C50909 +
             ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
                C33783 +
            (((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50909 +
             ((C28171 + C28170) * C121 + (C28173 + C28172) * C50653) * C50805) *
                C50831) *
               C539) *
              C50897 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50909 +
             (C28642 * C121 + C28643 * C50653) * C50805) *
                C33783 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50909 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C50940 -
           (((C29166 * C50653 + C29167 * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50909) *
                C50831 +
            ((C28639 * C50653 + C28638 * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50909) *
                C33783) *
               C50939 -
           ((((C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
               C50881 * C1107) *
                  C50653 +
              (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
               C50881 * C1099) *
                  C121) *
                 C50805 +
             ((C49761 * C424 + C50615 * C435 + C49768 * C423 + C50881 * C434) *
                  C50653 +
              (C49761 * C405 + C50615 * C420 + C49768 * C404 + C50881 * C419) *
                  C121) *
                 C50909) *
                C50831 +
            (((C28172 + C28173) * C50653 + (C28170 + C28171) * C121) * C50805 +
             ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C50909) *
                C33783) *
               C539) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50909 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
               C33783 +
           (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50909 +
            (C28640 * C121 + C28641 * C50653) * C50805) *
               C50831) *
              C112 -
          (((C28644 * C50653 + C28645 * C121) * C50805 +
            ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50909) *
               C50831 +
           (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50909) *
               C33783) *
              C113 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C50909 +
            ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
               C33783 +
           (((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50909 +
            ((C28171 + C28170) * C121 + (C28173 + C28172) * C50653) * C50805) *
               C50831) *
              C114 -
          ((((C49761 * C794 + C50615 * C799 + C49768 * C792 + C50881 * C798) *
                 C50653 +
             (C49761 * C784 + C50615 * C793 + C49768 * C783 + C50881 * C788) *
                 C121) *
                C50805 +
            ((C49761 * C414 + C50615 * C430 + C49768 * C413 + C50881 * C429) *
                 C50653 +
             (C49761 * C400 + C50615 * C410 + C49768 * C399 + C50881 * C409) *
                 C121) *
                C50909) *
               C50831 +
           (((C49761 * C283 + C50615 * C294 + C49768 * C270 + C50881 * C286) *
                 C50653 +
             (C49761 * C264 + C50615 * C282 + C49768 * C256 + C50881 * C266) *
                 C121) *
                C50805 +
            ((C49761 * C137 + C50615 * C147 + C49768 * C136 + C50881 * C146) *
                 C50653 +
             (C49761 * C126 + C50615 * C138 + C49768 * C125 + C50881 * C132) *
                 C121) *
                C50909) *
               C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C253 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C248 -
             (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
             C24878 * C255 + C24879 * C250) *
                C50909 +
            ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
             (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
             (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
             C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
                C50909 +
            (C28640 * C253 + C28641 * C248 - C26500 * C254 - C26501 * C249 +
             (C26511 + C26510) * C255 + (C26513 + C26512) * C250) *
                C50805) *
               C50831) *
              C251 +
          ((((C24866 + C24867) * C254 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C248 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C253) +
             (C24868 + C24869) * C249 - C24880 * C255 - C24881 * C250) *
                C50909 +
            ((C24871 + C24870) * C254 -
             ((C24869 + C24868) * C248 + (C24867 + C24866) * C253) +
             (C24873 + C24872) * C249 - (C24874 + C24875) * C255 -
             (C24876 + C24877) * C250) *
                C50805) *
               C33783 +
           ((C28642 * C254 -
             ((C27952 + C27953) * C248 + (C27954 + C27955) * C253) +
             C28643 * C249 - (C25582 + C25583) * C255 -
             (C25584 + C25585) * C250) *
                C50909 +
            ((C25583 + C25582) * C254 - (C28644 * C248 + C28645 * C253) +
             (C25585 + C25584) * C249 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C255 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C250) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C1213 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50941 -
             (C24854 + C24855) * C1214 - (C24856 + C24857) * C50942 +
             C24878 * C1215 + C24879 * C1210) *
                C50909 +
            ((C24855 + C24854) * C1213 + (C24857 + C24856) * C50941 -
             (C24859 + C24858) * C1214 - (C24861 + C24860) * C50942 +
             (C24862 + C24863) * C1215 + (C24864 + C24865) * C1210) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C1213 + (C27950 + C27951) * C50941 -
             C28638 * C1214 - C28639 * C50942 + C29826 * C1215 +
             C29827 * C1210) *
                C50909 +
            (C28640 * C1213 + C28641 * C50941 - C26500 * C1214 -
             C26501 * C50942 + (C26511 + C26510) * C1215 +
             (C26513 + C26512) * C1210) *
                C50805) *
               C50831) *
              C50888 +
          ((((C24866 + C24867) * C1214 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50941 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C1213) +
             (C24868 + C24869) * C50942 - C24880 * C1215 - C24881 * C1210) *
                C50909 +
            ((C24871 + C24870) * C1214 -
             ((C24869 + C24868) * C50941 + (C24867 + C24866) * C1213) +
             (C24873 + C24872) * C50942 - (C24874 + C24875) * C1215 -
             (C24876 + C24877) * C1210) *
                C50805) *
               C33783 +
           ((C28642 * C1214 -
             ((C27952 + C27953) * C50941 + (C27954 + C27955) * C1213) +
             C28643 * C50942 - (C25582 + C25583) * C1215 -
             (C25584 + C25585) * C1210) *
                C50909 +
            ((C25583 + C25582) * C1214 - (C28644 * C50941 + C28645 * C1213) +
             (C25585 + C25584) * C50942 -
             (C49761 * C3082 + C50615 * C3087 + C49768 * C3081 +
              C50881 * C3084) *
                 C1215 -
             (C49761 * C3088 + C50615 * C3091 + C49768 * C3086 +
              C50881 * C3090) *
                 C1210) *
                C50805) *
               C50831) *
              C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C1213 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50941 -
             (C24854 + C24855) * C1214 - (C24856 + C24857) * C50942 +
             C24878 * C1215 + C24879 * C1210) *
                C50909 +
            ((C24855 + C24854) * C1213 + (C24857 + C24856) * C50941 -
             (C24859 + C24858) * C1214 - (C24861 + C24860) * C50942 +
             (C24862 + C24863) * C1215 + (C24864 + C24865) * C1210) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C1213 + (C27950 + C27951) * C50941 -
             C28638 * C1214 - C28639 * C50942 + C29826 * C1215 +
             C29827 * C1210) *
                C50909 +
            (C28640 * C1213 + C28641 * C50941 - C26500 * C1214 -
             C26501 * C50942 + (C26511 + C26510) * C1215 +
             (C26513 + C26512) * C1210) *
                C50805) *
               C50831) *
              C50635 * C50897 +
          (((C28640 * C1214 -
             ((C27951 + C27950) * C50941 + (C27949 + C27948) * C1213) +
             C28641 * C50942 - C26500 * C1215 - C26501 * C1210) *
                C50909 +
            (C29826 * C1214 - (C28639 * C50941 + C28638 * C1213) +
             C29827 * C50942 - (C26510 + C26511) * C1215 -
             (C26512 + C26513) * C1210) *
                C50805) *
               C33783 +
           ((C29164 * C1214 -
             ((C27964 + C27965) * C50941 + (C27966 + C27967) * C1213) +
             C29165 * C50942 - (C26010 + C26011) * C1215 -
             (C26012 + C26013) * C1210) *
                C50909 +
            ((C26011 + C26010) * C1214 - (C29166 * C50941 + C29167 * C1213) +
             (C26013 + C26012) * C50942 -
             (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 +
              C50881 * C3555) *
                 C1215 -
             (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 +
              C50881 * C3559) *
                 C1210) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C976 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C971 -
            (C24854 + C24855) * C977 - (C24856 + C24857) * C972 +
            C24878 * C978 + C24879 * C973 - C25830 * C979 - C25831 * C974) *
               C50909 +
           ((C24855 + C24854) * C976 + (C24857 + C24856) * C971 -
            (C24859 + C24858) * C977 - (C24861 + C24860) * C972 +
            (C24862 + C24863) * C978 + (C24864 + C24865) * C973 -
            (C25840 + C25841) * C979 - (C25842 + C25843) * C974) *
               C50805) *
              C33783 +
          (((C27948 + C27949) * C976 + (C27950 + C27951) * C971 -
            C28638 * C977 - C28639 * C972 + C29826 * C978 + C29827 * C973 -
            (C26510 + C26511) * C979 - (C26512 + C26513) * C974) *
               C50909 +
           (C28640 * C976 + C28641 * C971 - C26500 * C977 - C26501 * C972 +
            (C26511 + C26510) * C978 + (C26513 + C26512) * C973 -
            (C49761 * C4070 + C50615 * C4072 + C49768 * C4071 +
             C50881 * C4073) *
                C979 -
            (C49761 * C4074 + C50615 * C4076 + C49768 * C4075 +
             C50881 * C4077) *
                C974) *
               C50805) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C903 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C898 -
             (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                C50909 +
            ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
             (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
             C28638 * C904 - C28639 * C50705) *
                C50909 +
            (C28640 * C903 + C28641 * C898 - C26500 * C904 - C26501 * C50705) *
                C50805) *
               C50831) *
              C900 +
          ((((C24866 + C24867) * C904 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C898 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C903) +
             (C24868 + C24869) * C50705) *
                C50909 +
            ((C24871 + C24870) * C904 -
             ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
             (C24873 + C24872) * C50705) *
                C50805) *
               C33783 +
           ((C28642 * C904 -
             ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
             C28643 * C50705) *
                C50909 +
            ((C25583 + C25582) * C904 - (C28644 * C898 + C28645 * C903) +
             (C25585 + C25584) * C50705) *
                C50805) *
               C50831) *
              C901 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C903 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C898 -
             (C25190 + C25191) * C904 - (C25192 + C25193) * C50705) *
                C50909 +
            ((C25191 + C25190) * C903 + (C25193 + C25192) * C898 -
             (C25194 + C25195) * C904 - (C25196 + C25197) * C50705) *
                C50805) *
               C33783 +
           (((C28376 + C28377) * C903 + (C28378 + C28379) * C898 -
             (C28170 + C28171) * C904 - (C28172 + C28173) * C50705) *
                C50909 +
            ((C28171 + C28170) * C903 + (C28173 + C28172) * C898 -
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C904 -
             (C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C903 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C898 -
             (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                C50909 +
            ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
             (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
             C28638 * C904 - C28639 * C50705) *
                C50909 +
            (C28640 * C903 + C28641 * C898 - C26500 * C904 - C26501 * C50705) *
                C50805) *
               C50831) *
              C50635 * C394 +
          (((C28640 * C904 -
             ((C27951 + C27950) * C898 + (C27949 + C27948) * C903) +
             C28641 * C50705) *
                C50909 +
            (C29826 * C904 - (C28639 * C898 + C28638 * C903) +
             C29827 * C50705) *
                C50805) *
               C33783 +
           ((C29164 * C904 -
             ((C27964 + C27965) * C898 + (C27966 + C27967) * C903) +
             C29165 * C50705) *
                C50909 +
            ((C26011 + C26010) * C904 - (C29166 * C898 + C29167 * C903) +
             (C26013 + C26012) * C50705) *
                C50805) *
               C50831) *
              C50635 * C395 +
          ((((C27967 + C27966) * C903 + (C27965 + C27964) * C898 -
             C29167 * C904 - C29166 * C50705) *
                C50909 +
            (C29164 * C903 + C29165 * C898 - (C26010 + C26011) * C904 -
             (C26012 + C26013) * C50705) *
                C50805) *
               C33783 +
           (((C30354 + C30355) * C903 + (C30356 + C30357) * C898 -
             (C29176 + C29177) * C904 - (C29178 + C29179) * C50705) *
                C50909 +
            ((C29177 + C29176) * C903 + (C29179 + C29178) * C898 -
             (C49761 * C4482 + C50615 * C4488 + C49768 * C4483 +
              C50881 * C4489) *
                 C904 -
             (C49761 * C4486 + C50615 * C4494 + C49768 * C4487 +
              C50881 * C4495) *
                 C50705) *
                C50805) *
               C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C903 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C898 -
              (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                 C50909 +
             ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
              (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                 C50805) *
                C33783 +
            (((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
              C28638 * C904 - C28639 * C50705) *
                 C50909 +
             (C28640 * C903 + C28641 * C898 - C26500 * C904 - C26501 * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C24866 + C24867) * C904 -
              ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                   C898 +
               (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                   C903) +
              (C24868 + C24869) * C50705) *
                 C50909 +
             ((C24871 + C24870) * C904 -
              ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
              (C24873 + C24872) * C50705) *
                 C50805) *
                C33783 +
            ((C28642 * C904 -
              ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
              C28643 * C50705) *
                 C50909 +
             ((C25583 + C25582) * C904 - (C28644 * C898 + C28645 * C903) +
              (C25585 + C25584) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50897 +
          ((((C28640 * C904 -
              ((C27951 + C27950) * C898 + (C27949 + C27948) * C903) +
              C28641 * C50705) *
                 C50909 +
             (C29826 * C904 - (C28639 * C898 + C28638 * C903) +
              C29827 * C50705) *
                 C50805) *
                C33783 +
            ((C29164 * C904 -
              ((C27964 + C27965) * C898 + (C27966 + C27967) * C903) +
              C29165 * C50705) *
                 C50909 +
             ((C26011 + C26010) * C904 - (C29166 * C898 + C29167 * C903) +
              (C26013 + C26012) * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C27955 + C27954) * C903 + (C27953 + C27952) * C898 -
              C28645 * C904 - C28644 * C50705) *
                 C50909 +
             (C28642 * C903 + C28643 * C898 - (C25582 + C25583) * C904 -
              (C25584 + C25585) * C50705) *
                 C50805) *
                C33783 +
            (((C27956 + C27957) * C903 + (C27958 + C27959) * C898 -
              (C27961 + C27960) * C904 - (C27963 + C27962) * C50705) *
                 C50909 +
             ((C27960 + C27961) * C903 + (C27962 + C27963) * C898 -
              (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
               C50881 * C2562) *
                  C904 -
              (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
               C50881 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C903 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C898 -
             (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                C50909 +
            ((C24855 + C24854) * C903 + (C24857 + C24856) * C898 -
             (C24859 + C24858) * C904 - (C24861 + C24860) * C50705) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
             C28638 * C904 - C28639 * C50705) *
                C50909 +
            (C28640 * C903 + C28641 * C898 - C26500 * C904 - C26501 * C50705) *
                C50805) *
               C50831) *
              C900 +
          ((((C24866 + C24867) * C904 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C898 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C903) +
             (C24868 + C24869) * C50705) *
                C50909 +
            ((C24871 + C24870) * C904 -
             ((C24869 + C24868) * C898 + (C24867 + C24866) * C903) +
             (C24873 + C24872) * C50705) *
                C50805) *
               C33783 +
           ((C28642 * C904 -
             ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
             C28643 * C50705) *
                C50909 +
            ((C25583 + C25582) * C904 - (C28644 * C898 + C28645 * C903) +
             (C25585 + C25584) * C50705) *
                C50805) *
               C50831) *
              C901 +
          ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C903 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C898 -
             (C25190 + C25191) * C904 - (C25192 + C25193) * C50705) *
                C50909 +
            ((C25191 + C25190) * C903 + (C25193 + C25192) * C898 -
             (C25194 + C25195) * C904 - (C25196 + C25197) * C50705) *
                C50805) *
               C33783 +
           (((C28376 + C28377) * C903 + (C28378 + C28379) * C898 -
             (C28170 + C28171) * C904 - (C28172 + C28173) * C50705) *
                C50909 +
            ((C28171 + C28170) * C903 + (C28173 + C28172) * C898 -
             (C49761 * C1444 + C50615 * C1448 + C49768 * C1445 +
              C50881 * C1449) *
                 C904 -
             (C49761 * C1452 + C50615 * C1456 + C49768 * C1453 +
              C50881 * C1457) *
                 C50705) *
                C50805) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C976 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C971 -
            (C24854 + C24855) * C977 - (C24856 + C24857) * C972 +
            C24878 * C978 + C24879 * C973 - C25830 * C979 - C25831 * C974) *
               C50909 +
           ((C24855 + C24854) * C976 + (C24857 + C24856) * C971 -
            (C24859 + C24858) * C977 - (C24861 + C24860) * C972 +
            (C24862 + C24863) * C978 + (C24864 + C24865) * C973 -
            (C25840 + C25841) * C979 - (C25842 + C25843) * C974) *
               C50805) *
              C33783 +
          (((C27948 + C27949) * C976 + (C27950 + C27951) * C971 -
            C28638 * C977 - C28639 * C972 + C29826 * C978 + C29827 * C973 -
            (C26510 + C26511) * C979 - (C26512 + C26513) * C974) *
               C50909 +
           (C28640 * C976 + C28641 * C971 - C26500 * C977 - C26501 * C972 +
            (C26511 + C26510) * C978 + (C26513 + C26512) * C973 -
            (C49761 * C4070 + C50615 * C4072 + C49768 * C4071 +
             C50881 * C4073) *
                C979 -
            (C49761 * C4074 + C50615 * C4076 + C49768 * C4075 +
             C50881 * C4077) *
                C974) *
               C50805) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C540 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50896 -
              (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                 C50909 +
             ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
              (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                 C50805) *
                C33783 +
            (((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
              C28638 * C541 - C28639 * C50705) *
                 C50909 +
             (C28640 * C540 + C28641 * C50896 - C26500 * C541 -
              C26501 * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C24866 + C24867) * C541 -
              ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                   C50896 +
               (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                   C540) +
              (C24868 + C24869) * C50705) *
                 C50909 +
             ((C24871 + C24870) * C541 -
              ((C24869 + C24868) * C50896 + (C24867 + C24866) * C540) +
              (C24873 + C24872) * C50705) *
                 C50805) *
                C33783 +
            ((C28642 * C541 -
              ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
              C28643 * C50705) *
                 C50909 +
             ((C25583 + C25582) * C541 - (C28644 * C50896 + C28645 * C540) +
              (C25585 + C25584) * C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C1558 +
          ((((C28640 * C541 -
              ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
              C28641 * C50705) *
                 C50909 +
             (C29826 * C541 - (C28639 * C50896 + C28638 * C540) +
              C29827 * C50705) *
                 C50805) *
                C33783 +
            ((C29164 * C541 -
              ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
              C29165 * C50705) *
                 C50909 +
             ((C26011 + C26010) * C541 - (C29166 * C50896 + C29167 * C540) +
              (C26013 + C26012) * C50705) *
                 C50805) *
                C50831) *
               C50888 +
           ((((C27955 + C27954) * C540 + (C27953 + C27952) * C50896 -
              C28645 * C541 - C28644 * C50705) *
                 C50909 +
             (C28642 * C540 + C28643 * C50896 - (C25582 + C25583) * C541 -
              (C25584 + C25585) * C50705) *
                 C50805) *
                C33783 +
            (((C27956 + C27957) * C540 + (C27958 + C27959) * C50896 -
              (C27961 + C27960) * C541 - (C27963 + C27962) * C50705) *
                 C50909 +
             ((C27960 + C27961) * C540 + (C27962 + C27963) * C50896 -
              (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
               C50881 * C2562) *
                  C541 -
              (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
               C50881 * C2568) *
                  C50705) *
                 C50805) *
                C50831) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C540 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50896 -
             (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                C50909 +
            ((C24855 + C24854) * C540 + (C24857 + C24856) * C50896 -
             (C24859 + C24858) * C541 - (C24861 + C24860) * C50705) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
             C28638 * C541 - C28639 * C50705) *
                C50909 +
            (C28640 * C540 + C28641 * C50896 - C26500 * C541 -
             C26501 * C50705) *
                C50805) *
               C50831) *
              C50635 * C50943 +
          (((C28640 * C541 -
             ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
             C28641 * C50705) *
                C50909 +
            (C29826 * C541 - (C28639 * C50896 + C28638 * C540) +
             C29827 * C50705) *
                C50805) *
               C33783 +
           ((C29164 * C541 -
             ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
             C29165 * C50705) *
                C50909 +
            ((C26011 + C26010) * C541 - (C29166 * C50896 + C29167 * C540) +
             (C26013 + C26012) * C50705) *
                C50805) *
               C50831) *
              C50635 * C50944 +
          ((((C27967 + C27966) * C540 + (C27965 + C27964) * C50896 -
             C29167 * C541 - C29166 * C50705) *
                C50909 +
            (C29164 * C540 + C29165 * C50896 - (C26010 + C26011) * C541 -
             (C26012 + C26013) * C50705) *
                C50805) *
               C33783 +
           (((C30354 + C30355) * C540 + (C30356 + C30357) * C50896 -
             (C29176 + C29177) * C541 - (C29178 + C29179) * C50705) *
                C50909 +
            ((C29177 + C29176) * C540 + (C29179 + C29178) * C50896 -
             (C49761 * C4482 + C50615 * C4488 + C49768 * C4483 +
              C50881 * C4489) *
                 C541 -
             (C49761 * C4486 + C50615 * C4494 + C49768 * C4487 +
              C50881 * C4495) *
                 C50705) *
                C50805) *
               C50831) *
              C50635 * C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C253 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C248 -
             (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
             C24878 * C255 + C24879 * C250) *
                C50909 +
            ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
             (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
             (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
             C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
                C50909 +
            (C28640 * C253 + C28641 * C248 - C26500 * C254 - C26501 * C249 +
             (C26511 + C26510) * C255 + (C26513 + C26512) * C250) *
                C50805) *
               C50831) *
              C50635 * C1558 +
          (((C28640 * C254 -
             ((C27951 + C27950) * C248 + (C27949 + C27948) * C253) +
             C28641 * C249 - C26500 * C255 - C26501 * C250) *
                C50909 +
            (C29826 * C254 - (C28639 * C248 + C28638 * C253) + C29827 * C249 -
             (C26510 + C26511) * C255 - (C26512 + C26513) * C250) *
                C50805) *
               C33783 +
           ((C29164 * C254 -
             ((C27964 + C27965) * C248 + (C27966 + C27967) * C253) +
             C29165 * C249 - (C26010 + C26011) * C255 -
             (C26012 + C26013) * C250) *
                C50909 +
            ((C26011 + C26010) * C254 - (C29166 * C248 + C29167 * C253) +
             (C26013 + C26012) * C249 -
             (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 +
              C50881 * C3555) *
                 C255 -
             (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 +
              C50881 * C3559) *
                 C250) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C33783 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50909 +
             (C28640 * C121 + C28641 * C50653) * C50805) *
                C50831) *
               C900 -
           (((C28644 * C50653 + C28645 * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50909) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C50909) *
                C33783) *
               C901 +
           ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                  C121 +
              (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                  C50653) *
                 C50909 +
             ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
                C33783 +
            (((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50909 +
             ((C28171 + C28170) * C121 + (C28173 + C28172) * C50653) * C50805) *
                C50831) *
               C902) *
              C1558 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50909 +
             (C28642 * C121 + C28643 * C50653) * C50805) *
                C33783 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50909 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C901 -
           (((C29166 * C50653 + C29167 * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50909) *
                C50831 +
            ((C28639 * C50653 + C28638 * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50909) *
                C33783) *
               C900 -
           ((((C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
               C50881 * C1107) *
                  C50653 +
              (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
               C50881 * C1099) *
                  C121) *
                 C50805 +
             ((C49761 * C424 + C50615 * C435 + C49768 * C423 + C50881 * C434) *
                  C50653 +
              (C49761 * C405 + C50615 * C420 + C49768 * C404 + C50881 * C419) *
                  C121) *
                 C50909) *
                C50831 +
            (((C28172 + C28173) * C50653 + (C28170 + C28171) * C121) * C50805 +
             ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C50909) *
                C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50909 +
            ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
               C33783 +
           (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50909 +
            (C28640 * C121 + C28641 * C50653) * C50805) *
               C50831) *
              C50635 * C1724 -
          (((C29166 * C50653 + C29167 * C121) * C50805 +
            ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50909) *
               C50831 +
           ((C28639 * C50653 + C28638 * C121) * C50805 +
            ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50909) *
               C33783) *
              C50635 * C1725 +
          ((((C27967 + C27966) * C121 + (C27965 + C27964) * C50653) * C50909 +
            (C29164 * C121 + C29165 * C50653) * C50805) *
               C33783 +
           (((C30354 + C30355) * C121 + (C30356 + C30357) * C50653) * C50909 +
            ((C29177 + C29176) * C121 + (C29179 + C29178) * C50653) * C50805) *
               C50831) *
              C50635 * C1726 -
          ((((C49761 * C6393 + C50615 * C6395 + C49768 * C6394 +
              C50881 * C6396) *
                 C50653 +
             (C49761 * C6389 + C50615 * C6391 + C49768 * C6390 +
              C50881 * C6392) *
                 C121) *
                C50805 +
            ((C49761 * C5383 + C50615 * C5387 + C49768 * C5382 +
              C50881 * C5386) *
                 C50653 +
             (C49761 * C5378 + C50615 * C5381 + C49768 * C5377 +
              C50881 * C5380) *
                 C121) *
                C50909) *
               C50831 +
           (((C29178 + C29179) * C50653 + (C29176 + C29177) * C121) * C50805 +
            ((C30357 + C30356) * C50653 + (C30355 + C30354) * C121) * C50909) *
               C33783) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C33783 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50909 +
             (C28640 * C121 + C28641 * C50653) * C50805) *
                C50831) *
               C50888 -
           (((C28644 * C50653 + C28645 * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50909) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C50909) *
                C33783) *
               C50640) *
              C50943 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50909 +
             (C28642 * C121 + C28643 * C50653) * C50805) *
                C33783 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50909 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C50640 -
           (((C29166 * C50653 + C29167 * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50909) *
                C50831 +
            ((C28639 * C50653 + C28638 * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50909) *
                C33783) *
               C50888) *
              C50944 +
          (((((C27967 + C27966) * C121 + (C27965 + C27964) * C50653) * C50909 +
             (C29164 * C121 + C29165 * C50653) * C50805) *
                C33783 +
            (((C30354 + C30355) * C121 + (C30356 + C30357) * C50653) * C50909 +
             ((C29177 + C29176) * C121 + (C29179 + C29178) * C50653) * C50805) *
                C50831) *
               C50888 -
           ((((C49761 * C5985 + C50615 * C5986 + C49768 * C4490 +
               C50881 * C4496) *
                  C50653 +
              (C49761 * C5983 + C50615 * C5984 + C49768 * C4484 +
               C50881 * C4492) *
                  C121) *
                 C50805 +
             ((C49761 * C1733 + C50615 * C1741 + C49768 * C1734 +
               C50881 * C1742) *
                  C50653 +
              (C49761 * C1729 + C50615 * C1737 + C49768 * C1730 +
               C50881 * C1738) *
                  C121) *
                 C50909) *
                C50831 +
            (((C27963 + C27962) * C50653 + (C27961 + C27960) * C121) * C50805 +
             ((C27959 + C27958) * C50653 + (C27957 + C27956) * C121) * C50909) *
                C33783) *
               C50640) *
              C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                  C121 +
              (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                  C50653) *
                 C50909 +
             ((C24855 + C24854) * C121 + (C24857 + C24856) * C50653) * C50805) *
                C33783 +
            (((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50909 +
             (C28640 * C121 + C28641 * C50653) * C50805) *
                C50831) *
               C900 -
           (((C28644 * C50653 + C28645 * C121) * C50805 +
             ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50909) *
                C50831 +
            (((C24869 + C24868) * C50653 + (C24867 + C24866) * C121) * C50805 +
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50653 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C121) *
                 C50909) *
                C33783) *
               C901 +
           ((((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                  C121 +
              (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                  C50653) *
                 C50909 +
             ((C25191 + C25190) * C121 + (C25193 + C25192) * C50653) * C50805) *
                C33783 +
            (((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50909 +
             ((C28171 + C28170) * C121 + (C28173 + C28172) * C50653) * C50805) *
                C50831) *
               C902) *
              C1558 +
          (((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50909 +
             (C28642 * C121 + C28643 * C50653) * C50805) *
                C33783 +
            (((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50909 +
             ((C27960 + C27961) * C121 + (C27962 + C27963) * C50653) * C50805) *
                C50831) *
               C901 -
           (((C29166 * C50653 + C29167 * C121) * C50805 +
             ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50909) *
                C50831 +
            ((C28639 * C50653 + C28638 * C121) * C50805 +
             ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50909) *
                C33783) *
               C900 -
           ((((C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
               C50881 * C1107) *
                  C50653 +
              (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
               C50881 * C1099) *
                  C121) *
                 C50805 +
             ((C49761 * C424 + C50615 * C435 + C49768 * C423 + C50881 * C434) *
                  C50653 +
              (C49761 * C405 + C50615 * C420 + C49768 * C404 + C50881 * C419) *
                  C121) *
                 C50909) *
                C50831 +
            (((C28172 + C28173) * C50653 + (C28170 + C28171) * C121) * C50805 +
             ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C50909) *
                C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C253 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C248 -
             (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
             C24878 * C255 + C24879 * C250) *
                C50909 +
            ((C24855 + C24854) * C253 + (C24857 + C24856) * C248 -
             (C24859 + C24858) * C254 - (C24861 + C24860) * C249 +
             (C24862 + C24863) * C255 + (C24864 + C24865) * C250) *
                C50805) *
               C33783 +
           (((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
             C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
                C50909 +
            (C28640 * C253 + C28641 * C248 - C26500 * C254 - C26501 * C249 +
             (C26511 + C26510) * C255 + (C26513 + C26512) * C250) *
                C50805) *
               C50831) *
              C50635 * C1558 +
          (((C28640 * C254 -
             ((C27951 + C27950) * C248 + (C27949 + C27948) * C253) +
             C28641 * C249 - C26500 * C255 - C26501 * C250) *
                C50909 +
            (C29826 * C254 - (C28639 * C248 + C28638 * C253) + C29827 * C249 -
             (C26510 + C26511) * C255 - (C26512 + C26513) * C250) *
                C50805) *
               C33783 +
           ((C29164 * C254 -
             ((C27964 + C27965) * C248 + (C27966 + C27967) * C253) +
             C29165 * C249 - (C26010 + C26011) * C255 -
             (C26012 + C26013) * C250) *
                C50909 +
            ((C26011 + C26010) * C254 - (C29166 * C248 + C29167 * C253) +
             (C26013 + C26012) * C249 -
             (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 +
              C50881 * C3555) *
                 C255 -
             (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 +
              C50881 * C3559) *
                 C250) *
                C50805) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C50909 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C50805) *
                        C50947 +
                    ((C22622 + C22623 - C22624 - C22625) * C50909 +
                     (C22626 + C22627 - C22628 - C22629) * C50805) *
                        C50948 +
                    (C24550 * C50909 + C24551 * C50805) * C44486) *
                       C50939 +
                   (((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C50909 +
                     (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                      C19915 * C50705) *
                         C50805) *
                        C50947 +
                    ((C22638 - (C22639 + C22640) + C22641) * C50909 +
                     (C22642 - (C22643 + C22644) + C22645) * C50805) *
                        C50948 +
                    ((C22646 - (C22647 + C22648) + C22649) * C50909 +
                     (C22650 - (C22651 + C22652) + C22653) * C50805) *
                        C44486) *
                       C50940 +
                   ((((C19772 * C124 + C50610 * C131) * C540 +
                      (C19772 * C135 + C50610 * C145) * C50896 - C20128 * C541 -
                      C20129 * C50705) *
                         C50909 +
                     (C20128 * C540 + C20129 * C50896 - C20130 * C541 -
                      C20131 * C50705) *
                         C50805) *
                        C50947 +
                    ((C22420 * C540 + C22421 * C50896 - C22258 * C541 -
                      C22259 * C50705) *
                         C50909 +
                     (C22258 * C540 + C22259 * C50896 - C31552 * C541 -
                      C31553 * C50705) *
                         C50805) *
                        C50948 +
                    ((C22422 * C540 + C22423 * C50896 - C22260 * C541 -
                      C22261 * C50705) *
                         C50909 +
                     (C22260 * C540 + C22261 * C50896 -
                      (C19772 * C2560 + C50610 * C2566) * C541 -
                      (C19772 * C2565 + C50610 * C2569) * C50705) *
                         C50805) *
                        C44486) *
                       C539) *
                  C50669) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C50909 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C50805) *
                         C50947 +
                     ((C22622 + C22623 - C22624 - C22625) * C50909 +
                      (C22626 + C22627 - C22628 - C22629) * C50805) *
                         C50948 +
                     (C24550 * C50909 + C24551 * C50805) * C44486) *
                        C251 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C50909 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C50805) *
                         C50947 +
                     ((C22638 - (C22639 + C22640) + C22641) * C50909 +
                      (C22642 - (C22643 + C22644) + C22645) * C50805) *
                         C50948 +
                     ((C22646 - (C22647 + C22648) + C22649) * C50909 +
                      (C22650 - (C22651 + C22652) + C22653) * C50805) *
                         C44486) *
                        C50640) *
                       C50897 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C50909 +
                      (C22628 - (C22627 + C22626) + C22629) * C50805) *
                         C50947 +
                     ((C22632 - (C22631 + C22630) + C22633) * C50909 +
                      (C22636 - (C22635 + C22634) + C22637) * C50805) *
                         C50948 +
                     ((C24540 - (C24541 + C24542) + C24543) * C50909 +
                      (C24544 - (C24545 + C24546) + C24547) * C50805) *
                         C44486) *
                        C251 +
                    (((C22640 + C22639 - C22638 - C22641) * C50909 +
                      (C22644 + C22643 - C22642 - C22645) * C50805) *
                         C50947 +
                     ((C22648 + C22647 - C22646 - C22649) * C50909 +
                      (C22652 + C22651 - C22650 - C22653) * C50805) *
                         C50948 +
                     ((C39668 + C39667 - C39666 - C39669) * C50909 +
                      (C22074 * C540 + C22075 * C50896 -
                       (C19772 * C4482 + C50610 * C4488) * C541 -
                       (C19772 * C4486 + C50610 * C4494) * C50705) *
                          C50805) *
                         C44486) *
                        C50640) *
                       C50733)) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C50909 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50805) *
               C50947 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50909 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50805) *
               C50948 +
           ((C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C50909 +
            (C23929 + C23930 - C23931 - C23932 + C23933 + C23934) * C50805) *
               C44486) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C50909 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C50805) *
               C50947 +
           ((C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
             C20394 * C255 - C20395 * C250) *
                C50909 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C50805) *
               C50948 +
           ((C21872 * C254 - (C22068 * C248 + C22069 * C253) + C21873 * C249 -
             C21874 * C255 - C21875 * C250) *
                C50909 +
            (C21874 * C254 - (C21873 * C248 + C21872 * C253) + C21875 * C249 -
             (C19772 * C3552 + C50610 * C3554) * C255 -
             (C19772 * C3556 + C50610 * C3558) * C250) *
                C50805) *
               C44486) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50909 +
            (C19904 * C121 + C19905 * C50653) * C50805) *
               C50947 +
           ((C22080 + C22081) * C50909 + (C22026 + C22027) * C50805) * C50948 +
           (C22098 * C50909 + C22066 * C50805) * C44486) *
              C112 -
          ((C22067 * C50805 + C22099 * C50909) * C44486 +
           ((C22040 + C22041) * C50805 + (C22088 + C22089) * C50909) * C50948 +
           ((C19913 * C50653 + C19912 * C121) * C50805 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50909) *
               C50947) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C50909 +
            (C20128 * C121 + C20129 * C50653) * C50805) *
               C50947 +
           ((C22424 + C22425) * C50909 + (C22412 + C22413) * C50805) * C50948 +
           ((C22426 + C22427) * C50909 + (C22418 + C22419) * C50805) * C44486) *
              C114 -
          ((((C19772 * C1102 + C50610 * C1106) * C50653 +
             (C19772 * C1094 + C50610 * C1098) * C121) *
                C50805 +
            ((C19772 * C424 + C50610 * C435) * C50653 +
             (C19772 * C405 + C50610 * C420) * C121) *
                C50909) *
               C44486 +
           (((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C50805 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C50909) *
               C50948 +
           (((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C50805 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C50909) *
               C50947) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50909 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C50947 +
            ((C22080 + C22081) * C50909 + (C22026 + C22027) * C50805) * C50948 +
            C47482 * C44486) *
               C251 -
           (C47483 * C44486 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C50909) * C50948 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50909) *
                C50947) *
               C50640) *
              C394 +
          ((((C22089 + C22088) * C50909 + (C22041 + C22040) * C50805) * C50947 +
            ((C22087 + C22086) * C50909 + (C22035 + C22034) * C50805) * C50948 +
            ((C22090 + C22091) * C50909 + (C22092 + C22093) * C50805) *
                C44486) *
               C50640 -
           ((C24037 * C50805 + C24038 * C50909) * C44486 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C50909) * C50948 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C50909) *
                C50947) *
               C251) *
              C395 +
          ((C47482 * C50947 +
            (C39319 * C50909 + (C22095 + C22094) * C50805) * C50948 +
            ((C24050 + C24051) * C50909 + (C24043 + C24044) * C50805) *
                C44486) *
               C251 -
           ((((C19772 * C6393 + C50610 * C6395) * C50653 +
              (C19772 * C6389 + C50610 * C6391) * C121) *
                 C50805 +
             (C39331 + C39330) * C50909) *
                C44486 +
            ((C22093 + C22092) * C50805 + C39320 * C50909) * C50948 +
            C47483 * C50947) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50909 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C50947 +
            ((C22080 + C22081) * C50909 + (C22026 + C22027) * C50805) * C50948 +
            C47482 * C44486) *
               C50939 -
           (C47483 * C44486 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C50909) * C50948 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50909) *
                C50947) *
               C50940 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C50909 +
             (C20128 * C121 + C20129 * C50653) * C50805) *
                C50947 +
            ((C22424 + C22425) * C50909 + (C22412 + C22413) * C50805) * C50948 +
            ((C22426 + C22427) * C50909 + (C22418 + C22419) * C50805) *
                C44486) *
               C539) *
              C50897 +
          ((((C22089 + C22088) * C50909 + (C22041 + C22040) * C50805) * C50947 +
            ((C22087 + C22086) * C50909 + (C22035 + C22034) * C50805) * C50948 +
            ((C22090 + C22091) * C50909 + (C22092 + C22093) * C50805) *
                C44486) *
               C50940 -
           ((C24037 * C50805 + C24038 * C50909) * C44486 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C50909) * C50948 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C50909) *
                C50947) *
               C50939 -
           ((((C19772 * C5985 + C50610 * C5986) * C50653 +
              (C19772 * C5983 + C50610 * C5984) * C121) *
                 C50805 +
             (C39535 + C39534) * C50909) *
                C44486 +
            ((C22419 + C22418) * C50805 + (C22427 + C22426) * C50909) * C50948 +
            ((C22413 + C22412) * C50805 + (C22425 + C22424) * C50909) *
                C50947) *
               C539) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50909 +
            (C19904 * C121 + C19905 * C50653) * C50805) *
               C50947 +
           ((C22080 + C22081) * C50909 + (C22026 + C22027) * C50805) * C50948 +
           (C22098 * C50909 + C22066 * C50805) * C44486) *
              C112 -
          ((C22067 * C50805 + C22099 * C50909) * C44486 +
           ((C22040 + C22041) * C50805 + (C22088 + C22089) * C50909) * C50948 +
           ((C19913 * C50653 + C19912 * C121) * C50805 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50909) *
               C50947) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C50909 +
            (C20128 * C121 + C20129 * C50653) * C50805) *
               C50947 +
           ((C22424 + C22425) * C50909 + (C22412 + C22413) * C50805) * C50948 +
           ((C22426 + C22427) * C50909 + (C22418 + C22419) * C50805) * C44486) *
              C114 -
          ((((C19772 * C1102 + C50610 * C1106) * C50653 +
             (C19772 * C1094 + C50610 * C1098) * C121) *
                C50805 +
            ((C19772 * C424 + C50610 * C435) * C50653 +
             (C19772 * C405 + C50610 * C420) * C121) *
                C50909) *
               C44486 +
           (((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C50805 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C50909) *
               C50948 +
           (((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C50805 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C50909) *
               C50947) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C50909 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50805) *
               C50947 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50909 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50805) *
               C50948 +
           ((C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C50909 +
            (C23929 + C23930 - C23931 - C23932 + C23933 + C23934) * C50805) *
               C44486) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C50909 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C50805) *
               C50947 +
           ((C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
             C20394 * C255 - C20395 * C250) *
                C50909 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C50805) *
               C50948 +
           ((C21872 * C254 - (C22068 * C248 + C22069 * C253) + C21873 * C249 -
             C21874 * C255 - C21875 * C250) *
                C50909 +
            (C21874 * C254 - (C21873 * C248 + C21872 * C253) + C21875 * C249 -
             (C19772 * C3552 + C50610 * C3554) * C255 -
             (C19772 * C3556 + C50610 * C3558) * C250) *
                C50805) *
               C44486) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C50909 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C50805) *
               C50947 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C50909 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C50805) *
               C50948 +
           ((C23607 + C23608 - C23609 - C23610 + C23611 + C23612) * C50909 +
            (C23613 + C23614 - C23615 - C23616 + C23617 + C23618) * C50805) *
               C44486) *
              C50888 +
          (((C19912 * C1214 -
             ((C19772 * C134 + C50610 * C144) * C50941 +
              (C19772 * C123 + C50610 * C130) * C1213) +
             C19913 * C50942 - C19914 * C1215 - C19915 * C1210) *
                C50909 +
            (C19914 * C1214 - (C19913 * C50941 + C19912 * C1213) +
             C19915 * C50942 - C19916 * C1215 - C19917 * C1210) *
                C50805) *
               C50947 +
           ((C20392 * C1214 - (C22070 * C50941 + C22071 * C1213) +
             C20393 * C50942 - C20394 * C1215 - C20395 * C1210) *
                C50909 +
            (C20394 * C1214 - (C20393 * C50941 + C20392 * C1213) +
             C20395 * C50942 - C20396 * C1215 - C20397 * C1210) *
                C50805) *
               C50948 +
           ((C21872 * C1214 - (C22068 * C50941 + C22069 * C1213) +
             C21873 * C50942 - C21874 * C1215 - C21875 * C1210) *
                C50909 +
            (C21874 * C1214 - (C21873 * C50941 + C21872 * C1213) +
             C21875 * C50942 - (C19772 * C3552 + C50610 * C3554) * C1215 -
             (C19772 * C3556 + C50610 * C3558) * C1210) *
                C50805) *
               C44486) *
              C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C50909 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C50805) *
               C50947 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C50909 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C50805) *
               C50948 +
           ((C23607 + C23608 - C23609 - C23610 + C23611 + C23612) * C50909 +
            (C23613 + C23614 - C23615 - C23616 + C23617 + C23618) * C50805) *
               C44486) *
              C50635 * C50897 +
          (((C23597 - (C23596 + C23595) + C23598 - C23599 - C23600) * C50909 +
            (C23603 - (C23602 + C23601) + C23604 - C23605 - C23606) * C50805) *
               C50947 +
           ((C23609 - (C23608 + C23607) + C23610 - C23611 - C23612) * C50909 +
            (C23615 - (C23614 + C23613) + C23616 - C23617 - C23618) * C50805) *
               C50948 +
           ((C40273 - (C40272 + C40271) + C40274 - C40275 - C40276) * C50909 +
            (C23080 * C1214 - (C22076 * C50941 + C22077 * C1213) +
             C23081 * C50942 - (C19772 * C21289 + C50610 * C21291) * C1215 -
             (C19772 * C21290 + C50610 * C21292) * C1210) *
                C50805) *
               C44486) *
              C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C50909 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C50805) *
              C50947 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C50909 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C50805) *
              C50948 +
          ((C22064 * C976 + C22065 * C971 - C20686 * C977 - C20687 * C972 +
            C20688 * C978 + C20689 * C973 - C20690 * C979 - C20691 * C974) *
               C50909 +
           (C20686 * C976 + C20687 * C971 - C20688 * C977 - C20689 * C972 +
            C20690 * C978 + C20691 * C973 -
            (C19772 * C20669 + C50610 * C20670) * C979 -
            (C19772 * C20671 + C50610 * C20672) * C974) *
               C50805) *
              C44486) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C50909 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50805) *
               C50947 +
           ((C23048 + C23049 - C23050 - C23051) * C50909 +
            (C23052 + C23053 - C23054 - C23055) * C50805) *
               C50948 +
           (C23088 * C50909 + C23089 * C50805) * C44486) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C50909 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C50805) *
               C50947 +
           ((C23433 - (C23434 + C23435) + C23436) * C50909 +
            (C23437 - (C23438 + C23439) + C23440) * C50805) *
               C50948 +
           ((C23441 - (C23442 + C23443) + C23444) * C50909 +
            (C23445 - (C23446 + C23447) + C23448) * C50805) *
               C44486) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C50909 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C50805) *
               C50947 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C50909 +
            (C22258 * C903 + C22259 * C898 - C31552 * C904 - C31553 * C50705) *
                C50805) *
               C50948 +
           ((C22422 * C903 + C22423 * C898 - C22260 * C904 - C22261 * C50705) *
                C50909 +
            (C22260 * C903 + C22261 * C898 -
             (C19772 * C2560 + C50610 * C2566) * C904 -
             (C19772 * C2565 + C50610 * C2569) * C50705) *
                C50805) *
               C44486) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C50909 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50805) *
               C50947 +
           ((C23048 + C23049 - C23050 - C23051) * C50909 +
            (C23052 + C23053 - C23054 - C23055) * C50805) *
               C50948 +
           C48362 * C44486) *
              C50635 * C394 +
          (((C23050 - (C23049 + C23048) + C23051) * C50909 +
            (C23054 - (C23053 + C23052) + C23055) * C50805) *
               C50947 +
           ((C23058 - (C23057 + C23056) + C23059) * C50909 +
            (C23062 - (C23061 + C23060) + C23063) * C50805) *
               C50948 +
           ((C23064 - (C23065 + C23066) + C23067) * C50909 +
            (C23086 - (C23070 + C23071) + C23087) * C50805) *
               C44486) *
              C50635 * C395 +
          (C48362 * C50947 +
           (C39939 * C50909 + (C23071 + C23070 - C23086 - C23087) * C50805) *
               C50948 +
           ((C39936 + C39935 - C39934 - C39937) * C50909 +
            (C23082 * C903 + C23083 * C898 -
             (C19772 * C23043 + C50610 * C23044) * C904 -
             (C19772 * C23045 + C50610 * C23046) * C50705) *
                C50805) *
               C44486) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C903 +
              (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
              C19905 * C50705) *
                 C50909 +
             (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                 C50805) *
                C50947 +
            ((C23048 + C23049 - C23050 - C23051) * C50909 +
             (C23052 + C23053 - C23054 - C23055) * C50805) *
                C50948 +
            C48362 * C44486) *
               C50888 +
           (((C19912 * C904 -
              ((C19772 * C134 + C50610 * C144) * C898 +
               (C19772 * C123 + C50610 * C130) * C903) +
              C19913 * C50705) *
                 C50909 +
             (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
              C19915 * C50705) *
                 C50805) *
                C50947 +
            ((C23433 - (C23434 + C23435) + C23436) * C50909 +
             (C23437 - (C23438 + C23439) + C23440) * C50805) *
                C50948 +
            ((C23441 - (C23442 + C23443) + C23444) * C50909 +
             (C23445 - (C23446 + C23447) + C23448) * C50805) *
                C44486) *
               C50640) *
              C50897 +
          ((((C23050 - (C23049 + C23048) + C23051) * C50909 +
             (C23054 - (C23053 + C23052) + C23055) * C50805) *
                C50947 +
            ((C23058 - (C23057 + C23056) + C23059) * C50909 +
             (C23062 - (C23061 + C23060) + C23063) * C50805) *
                C50948 +
            ((C23064 - (C23065 + C23066) + C23067) * C50909 +
             (C23086 - (C23070 + C23071) + C23087) * C50805) *
                C44486) *
               C50888 +
           (((C23435 + C23434 - C23433 - C23436) * C50909 +
             (C23439 + C23438 - C23437 - C23440) * C50805) *
                C50947 +
            ((C23443 + C23442 - C23441 - C23444) * C50909 +
             (C23447 + C23446 - C23445 - C23448) * C50805) *
                C50948 +
            ((C40171 + C40170 - C40169 - C40172) * C50909 +
             (C22074 * C903 + C22075 * C898 -
              (C19772 * C4482 + C50610 * C4488) * C904 -
              (C19772 * C4486 + C50610 * C4494) * C50705) *
                 C50805) *
                C44486) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C50909 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C50805) *
               C50947 +
           ((C23048 + C23049 - C23050 - C23051) * C50909 +
            (C23052 + C23053 - C23054 - C23055) * C50805) *
               C50948 +
           (C23088 * C50909 + C23089 * C50805) * C44486) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C50909 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C50805) *
               C50947 +
           ((C23433 - (C23434 + C23435) + C23436) * C50909 +
            (C23437 - (C23438 + C23439) + C23440) * C50805) *
               C50948 +
           ((C23441 - (C23442 + C23443) + C23444) * C50909 +
            (C23445 - (C23446 + C23447) + C23448) * C50805) *
               C44486) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C50909 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C50805) *
               C50947 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C50909 +
            (C22258 * C903 + C22259 * C898 - C31552 * C904 - C31553 * C50705) *
                C50805) *
               C50948 +
           ((C22422 * C903 + C22423 * C898 - C22260 * C904 - C22261 * C50705) *
                C50909 +
            (C22260 * C903 + C22261 * C898 -
             (C19772 * C2560 + C50610 * C2566) * C904 -
             (C19772 * C2565 + C50610 * C2569) * C50705) *
                C50805) *
               C44486) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C50909 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C50805) *
              C50947 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C50909 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C50805) *
              C50948 +
          ((C22064 * C976 + C22065 * C971 - C20686 * C977 - C20687 * C972 +
            C20688 * C978 + C20689 * C973 - C20690 * C979 - C20691 * C974) *
               C50909 +
           (C20686 * C976 + C20687 * C971 - C20688 * C977 - C20689 * C972 +
            C20690 * C978 + C20691 * C973 -
            (C19772 * C20669 + C50610 * C20670) * C979 -
            (C19772 * C20671 + C50610 * C20672) * C974) *
               C50805) *
              C44486) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C50909 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C50805) *
                         C50947 +
                     ((C22622 + C22623 - C22624 - C22625) * C50909 +
                      (C22626 + C22627 - C22628 - C22629) * C50805) *
                         C50948 +
                     (C24550 * C50909 + C24551 * C50805) * C44486) *
                        C50888 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C50909 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C50805) *
                         C50947 +
                     ((C22638 - (C22639 + C22640) + C22641) * C50909 +
                      (C22642 - (C22643 + C22644) + C22645) * C50805) *
                         C50948 +
                     ((C22646 - (C22647 + C22648) + C22649) * C50909 +
                      (C22650 - (C22651 + C22652) + C22653) * C50805) *
                         C44486) *
                        C50640) *
                       C1558 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C50909 +
                      (C22628 - (C22627 + C22626) + C22629) * C50805) *
                         C50947 +
                     ((C22632 - (C22631 + C22630) + C22633) * C50909 +
                      (C22636 - (C22635 + C22634) + C22637) * C50805) *
                         C50948 +
                     ((C24540 - (C24541 + C24542) + C24543) * C50909 +
                      (C24544 - (C24545 + C24546) + C24547) * C50805) *
                         C44486) *
                        C50888 +
                    (((C22640 + C22639 - C22638 - C22641) * C50909 +
                      (C22644 + C22643 - C22642 - C22645) * C50805) *
                         C50947 +
                     ((C22648 + C22647 - C22646 - C22649) * C50909 +
                      (C22652 + C22651 - C22650 - C22653) * C50805) *
                         C50948 +
                     ((C39668 + C39667 - C39666 - C39669) * C50909 +
                      (C22074 * C540 + C22075 * C50896 -
                       (C19772 * C4482 + C50610 * C4488) * C541 -
                       (C19772 * C4486 + C50610 * C4494) * C50705) *
                          C50805) *
                         C44486) *
                        C50640) *
                       C50733)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C540 +
             (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
             C19905 * C50705) *
                C50909 +
            (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
             C19907 * C50705) *
                C50805) *
               C50947 +
           ((C22622 + C22623 - C22624 - C22625) * C50909 +
            (C22626 + C22627 - C22628 - C22629) * C50805) *
               C50948 +
           C49730 * C44486) *
              C50635 * C50943 +
          (((C22624 - (C22623 + C22622) + C22625) * C50909 +
            (C22628 - (C22627 + C22626) + C22629) * C50805) *
               C50947 +
           ((C22632 - (C22631 + C22630) + C22633) * C50909 +
            (C22636 - (C22635 + C22634) + C22637) * C50805) *
               C50948 +
           ((C24540 - (C24541 + C24542) + C24543) * C50909 +
            (C24544 - (C24545 + C24546) + C24547) * C50805) *
               C44486) *
              C50635 * C50944 +
          (C49730 * C50947 +
           (C40893 * C50909 + (C24546 + C24545 - C24544 - C24547) * C50805) *
               C50948 +
           ((C40890 + C40889 - C40888 - C40891) * C50909 +
            (C23082 * C540 + C23083 * C50896 -
             (C19772 * C23043 + C50610 * C23044) * C541 -
             (C19772 * C23045 + C50610 * C23046) * C50705) *
                C50805) *
               C44486) *
              C50635 * C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C50909 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50805) *
               C50947 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50909 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50805) *
               C50948 +
           ((C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C50909 +
            (C23929 + C23930 - C23931 - C23932 + C23933 + C23934) * C50805) *
               C44486) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C50909 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C50805) *
               C50947 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C50909 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C50805) *
               C50948 +
           ((C40475 - (C40474 + C40473) + C40476 - C40477 - C40478) * C50909 +
            (C23080 * C254 - (C22076 * C248 + C22077 * C253) + C23081 * C249 -
             (C19772 * C21289 + C50610 * C21291) * C255 -
             (C19772 * C21290 + C50610 * C21292) * C250) *
                C50805) *
               C44486) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50909 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C50947 +
            ((C22080 + C22081) * C50909 + (C22026 + C22027) * C50805) * C50948 +
            C47482 * C44486) *
               C900 -
           (C47483 * C44486 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C50909) * C50948 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50909) *
                C50947) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C50909 +
             (C20128 * C121 + C20129 * C50653) * C50805) *
                C50947 +
            ((C22424 + C22425) * C50909 + (C22412 + C22413) * C50805) * C50948 +
            ((C22426 + C22427) * C50909 + (C22418 + C22419) * C50805) *
                C44486) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C50909 + (C22041 + C22040) * C50805) * C50947 +
            ((C22087 + C22086) * C50909 + (C22035 + C22034) * C50805) * C50948 +
            ((C22090 + C22091) * C50909 + (C22092 + C22093) * C50805) *
                C44486) *
               C901 -
           ((C24037 * C50805 + C24038 * C50909) * C44486 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C50909) * C50948 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C50909) *
                C50947) *
               C900 -
           ((((C19772 * C5985 + C50610 * C5986) * C50653 +
              (C19772 * C5983 + C50610 * C5984) * C121) *
                 C50805 +
             (C39535 + C39534) * C50909) *
                C44486 +
            ((C22419 + C22418) * C50805 + (C22427 + C22426) * C50909) * C50948 +
            ((C22413 + C22412) * C50805 + (C22425 + C22424) * C50909) *
                C50947) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50909 +
            (C19904 * C121 + C19905 * C50653) * C50805) *
               C50947 +
           ((C22080 + C22081) * C50909 + (C22026 + C22027) * C50805) * C50948 +
           C47482 * C44486) *
              C50635 * C1724 -
          (C49241 * C44486 +
           ((C22033 + C22032) * C50805 + (C22083 + C22082) * C50909) * C50948 +
           ((C22027 + C22026) * C50805 + (C22081 + C22080) * C50909) * C50947) *
              C50635 * C1725 +
          (C47482 * C50947 +
           (C39319 * C50909 + (C22095 + C22094) * C50805) * C50948 +
           ((C24050 + C24051) * C50909 + (C24043 + C24044) * C50805) * C44486) *
              C50635 * C1726 -
          ((((C19772 * C24033 + C50610 * C24035) * C50653 +
             (C19772 * C24032 + C50610 * C24034) * C121) *
                C50805 +
            (C40559 + C40558) * C50909) *
               C44486 +
           ((C24044 + C24043) * C50805 + C40549 * C50909) * C50948 +
           C49241 * C50947) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50909 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C50947 +
            ((C22080 + C22081) * C50909 + (C22026 + C22027) * C50805) * C50948 +
            C47482 * C44486) *
               C50888 -
           (C47483 * C44486 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C50909) * C50948 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50909) *
                C50947) *
               C50640) *
              C50943 +
          ((((C22089 + C22088) * C50909 + (C22041 + C22040) * C50805) * C50947 +
            ((C22087 + C22086) * C50909 + (C22035 + C22034) * C50805) * C50948 +
            ((C22090 + C22091) * C50909 + (C22092 + C22093) * C50805) *
                C44486) *
               C50640 -
           (C49241 * C44486 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C50909) * C50948 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C50909) *
                C50947) *
               C50888) *
              C50944 +
          ((C47482 * C50947 +
            (C39319 * C50909 + (C22095 + C22094) * C50805) * C50948 +
            ((C24050 + C24051) * C50909 + (C24043 + C24044) * C50805) *
                C44486) *
               C50888 -
           ((((C19772 * C6393 + C50610 * C6395) * C50653 +
              (C19772 * C6389 + C50610 * C6391) * C121) *
                 C50805 +
             (C39331 + C39330) * C50909) *
                C44486 +
            ((C22093 + C22092) * C50805 + C39320 * C50909) * C50948 +
            C47483 * C50947) *
               C50640) *
              C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C50909 +
             (C19904 * C121 + C19905 * C50653) * C50805) *
                C50947 +
            ((C22080 + C22081) * C50909 + (C22026 + C22027) * C50805) * C50948 +
            C47482 * C44486) *
               C900 -
           (C47483 * C44486 +
            ((C22040 + C22041) * C50805 + (C22088 + C22089) * C50909) * C50948 +
            ((C19913 * C50653 + C19912 * C121) * C50805 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C50909) *
                C50947) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C50909 +
             (C20128 * C121 + C20129 * C50653) * C50805) *
                C50947 +
            ((C22424 + C22425) * C50909 + (C22412 + C22413) * C50805) * C50948 +
            ((C22426 + C22427) * C50909 + (C22418 + C22419) * C50805) *
                C44486) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C50909 + (C22041 + C22040) * C50805) * C50947 +
            ((C22087 + C22086) * C50909 + (C22035 + C22034) * C50805) * C50948 +
            ((C22090 + C22091) * C50909 + (C22092 + C22093) * C50805) *
                C44486) *
               C901 -
           ((C24037 * C50805 + C24038 * C50909) * C44486 +
            ((C22033 + C22032) * C50805 + (C22083 + C22082) * C50909) * C50948 +
            ((C22027 + C22026) * C50805 + (C22081 + C22080) * C50909) *
                C50947) *
               C900 -
           ((((C19772 * C5985 + C50610 * C5986) * C50653 +
              (C19772 * C5983 + C50610 * C5984) * C121) *
                 C50805 +
             (C39535 + C39534) * C50909) *
                C44486 +
            ((C22419 + C22418) * C50805 + (C22427 + C22426) * C50909) * C50948 +
            ((C22413 + C22412) * C50805 + (C22425 + C22424) * C50909) *
                C50947) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C50909 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C50805) *
               C50947 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50909 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C50805) *
               C50948 +
           ((C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C50909 +
            (C23929 + C23930 - C23931 - C23932 + C23933 + C23934) * C50805) *
               C44486) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C50909 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C50805) *
               C50947 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C50909 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C50805) *
               C50948 +
           ((C40475 - (C40474 + C40473) + C40476 - C40477 - C40478) * C50909 +
            (C23080 * C254 - (C22076 * C248 + C22077 * C253) + C23081 * C249 -
             (C19772 * C21289 + C50610 * C21291) * C255 -
             (C19772 * C21290 + C50610 * C21292) * C250) *
                C50805) *
               C44486) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C540 +
             (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
             C19905 * C50705) *
                C2173 +
            (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
             C19907 * C50705) *
                C2174 +
            (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
             C19909 * C50705) *
                C2175) *
               C33783 +
           ((C22622 + C22623 - C22624 - C22625) * C2173 +
            (C22626 + C22627 - C22628 - C22629) * C2174 +
            (C31896 + C31897 - C31898 - C31899) * C2175) *
               C50831) *
              C50939 +
          (((C19912 * C541 -
             ((C19772 * C134 + C50610 * C144) * C50896 +
              (C19772 * C123 + C50610 * C130) * C540) +
             C19913 * C50705) *
                C2173 +
            (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
             C19915 * C50705) *
                C2174 +
            (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
             C19917 * C50705) *
                C2175) *
               C33783 +
           ((C22638 - (C22639 + C22640) + C22641) * C2173 +
            (C22642 - (C22643 + C22644) + C22645) * C2174 +
            (C31900 - (C31901 + C31902) + C31903) * C2175) *
               C50831) *
              C50940 +
          ((((C19772 * C124 + C50610 * C131) * C540 +
             (C19772 * C135 + C50610 * C145) * C50896 - C20128 * C541 -
             C20129 * C50705) *
                C2173 +
            (C20128 * C540 + C20129 * C50896 - C20130 * C541 -
             C20131 * C50705) *
                C2174 +
            (C20130 * C540 + C20131 * C50896 - C20132 * C541 -
             C20133 * C50705) *
                C2175) *
               C33783 +
           ((C22420 * C540 + C22421 * C50896 - C22258 * C541 -
             C22259 * C50705) *
                C2173 +
            (C22258 * C540 + C22259 * C50896 - C31552 * C541 -
             C31553 * C50705) *
                C2174 +
            (C31552 * C540 + C31553 * C50896 -
             (C19772 * C3082 + C50610 * C3087) * C541 -
             (C19772 * C3088 + C50610 * C3091) * C50705) *
                C2175) *
               C50831) *
              C539) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C540 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50896 -
            (C17186 + C17187 + C17188) * C541 -
            (C17189 + C17190 + C17191) * C50705) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C540 +
            (C34129 + C34130 + C34131) * C50896 -
            (C17886 + C17885 + C17884) * C541 -
            (C17889 + C17888 + C17887) * C50705) *
               C50755 * C50831) *
              C50939 +
          (((C17198 + C17199 + C17200) * C541 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50896 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C540) +
            (C17201 + C17202 + C17203) * C50705) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C541 -
            ((C34132 + C34133 + C34134) * C50896 +
             (C34135 + C34136 + C34137) * C540) +
            (C17895 + C17894 + C17893) * C50705) *
               C50755 * C50831) *
              C50940 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C540 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C50896 -
            (C17514 + C17515 + C17516) * C541 -
            (C17517 + C17518 + C17519) * C50705) *
               C50755 * C33783 +
           ((C16988 * C398 + C16983 * C408 + C16989 * C399 + C16984 * C409 +
             C16990 * C400 + C16985 * C410) *
                C540 +
            (C16988 * C412 + C16983 * C428 + C16989 * C413 + C16984 * C429 +
             C16990 * C414 + C16985 * C430) *
                C50896 -
            (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
             C16988 * C782 + C16983 * C787) *
                C541 -
            (C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
             C16988 * C791 + C16983 * C797) *
                C50705) *
               C50755 * C50831) *
              C539) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C540 +
            (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
            C19905 * C50705) *
               C50755 * C39117 +
           (C22622 + C22623 - C22624 - C22625) * C50755 * C39118 +
           C24550 * C50755 * C39119 +
           (C24542 + C24541 - C24540 - C24543) * C50755 * C39120) *
              C50939 +
          ((C19912 * C541 -
            ((C19772 * C134 + C50610 * C144) * C50896 +
             (C19772 * C123 + C50610 * C130) * C540) +
            C19913 * C50705) *
               C50755 * C39117 +
           (C22638 - (C22639 + C22640) + C22641) * C50755 * C39118 +
           (C22646 - (C22647 + C22648) + C22649) * C50755 * C39119 +
           (C22074 * C541 - (C22073 * C50896 + C22072 * C540) +
            C22075 * C50705) *
               C50755 * C39120) *
              C50940 +
          (((C19772 * C124 + C50610 * C131) * C540 +
            (C19772 * C135 + C50610 * C145) * C50896 - C20128 * C541 -
            C20129 * C50705) *
               C50755 * C39117 +
           (C22420 * C540 + C22421 * C50896 - C22258 * C541 - C22259 * C50705) *
               C50755 * C39118 +
           (C22422 * C540 + C22423 * C50896 - C22260 * C541 - C22261 * C50705) *
               C50755 * C39119 +
           ((C19772 * C1729 + C50610 * C1737) * C540 +
            (C19772 * C1733 + C50610 * C1741) * C50896 -
            (C19772 * C5983 + C50610 * C5984) * C541 -
            (C19772 * C5985 + C50610 * C5986) * C50705) *
               C50755 * C39120) *
              C539) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[181] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C2173 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C2174 +
                      (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                       C19909 * C50705) *
                          C2175) *
                         C33783 +
                     ((C22622 + C22623 - C22624 - C22625) * C2173 +
                      (C22626 + C22627 - C22628 - C22629) * C2174 +
                      (C31896 + C31897 - C31898 - C31899) * C2175) *
                         C50831) *
                        C251 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C2173 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C2174 +
                      (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                       C19917 * C50705) *
                          C2175) *
                         C33783 +
                     ((C22638 - (C22639 + C22640) + C22641) * C2173 +
                      (C22642 - (C22643 + C22644) + C22645) * C2174 +
                      (C31900 - (C31901 + C31902) + C31903) * C2175) *
                         C50831) *
                        C50640) *
                       C50897 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C2173 +
                      (C22628 - (C22627 + C22626) + C22629) * C2174 +
                      (C31898 - (C31897 + C31896) + C31899) * C2175) *
                         C33783 +
                     ((C22632 - (C22631 + C22630) + C22633) * C2173 +
                      (C22636 - (C22635 + C22634) + C22637) * C2174 +
                      (C33682 - (C33683 + C33684) + C33685) * C2175) *
                         C50831) *
                        C251 +
                    (((C22640 + C22639 - C22638 - C22641) * C2173 +
                      (C22644 + C22643 - C22642 - C22645) * C2174 +
                      (C31902 + C31901 - C31900 - C31903) * C2175) *
                         C33783 +
                     ((C22648 + C22647 - C22646 - C22649) * C2173 +
                      (C22652 + C22651 - C22650 - C22653) * C2174 +
                      (C21874 * C540 + C21875 * C50896 -
                       (C19772 * C3552 + C50610 * C3554) * C541 -
                       (C19772 * C3556 + C50610 * C3558) * C50705) *
                          C2175) *
                         C50831) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C540 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50896 -
                      (C17186 + C17187 + C17188) * C541 -
                      (C17189 + C17190 + C17191) * C50705) *
                         C50755 * C33783 +
                     ((C34126 + C34127 + C34128) * C540 +
                      (C34129 + C34130 + C34131) * C50896 -
                      (C17886 + C17885 + C17884) * C541 -
                      (C17889 + C17888 + C17887) * C50705) *
                         C50755 * C50831) *
                        C251 +
                    (((C17198 + C17199 + C17200) * C541 -
                      ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                        C16984 * C145 + C16988 * C134 + C16983 * C144) *
                           C50896 +
                       (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                        C16984 * C131 + C16988 * C123 + C16983 * C130) *
                           C540) +
                      (C17201 + C17202 + C17203) * C50705) *
                         C50755 * C33783 +
                     ((C17892 + C17891 + C17890) * C541 -
                      ((C34132 + C34133 + C34134) * C50896 +
                       (C34135 + C34136 + C34137) * C540) +
                      (C17895 + C17894 + C17893) * C50705) *
                         C50755 * C50831) *
                        C50640) *
                       C50897 +
                   ((((C17884 + C17885 + C17886) * C541 -
                      ((C34131 + C34130 + C34129) * C50896 +
                       (C34128 + C34127 + C34126) * C540) +
                      (C17887 + C17888 + C17889) * C50705) *
                         C50755 * C33783 +
                     ((C18318 + C18317 + C18316) * C541 -
                      ((C34144 + C34145 + C34146) * C50896 +
                       (C34147 + C34148 + C34149) * C540) +
                      (C18321 + C18320 + C18319) * C50705) *
                         C50755 * C50831) *
                        C251 +
                    (((C34137 + C34136 + C34135) * C540 +
                      (C34134 + C34133 + C34132) * C50896 -
                      (C17890 + C17891 + C17892) * C541 -
                      (C17893 + C17894 + C17895) * C50705) *
                         C50755 * C33783 +
                     ((C34138 + C34139 + C34140) * C540 +
                      (C34141 + C34142 + C34143) * C50896 -
                      (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
                       C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                          C541 -
                      (C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
                       C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                          C50705) *
                         C50755 * C50831) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C50755 * C39117 +
                     (C22622 + C22623 - C22624 - C22625) * C50755 * C39118 +
                     C24550 * C50755 * C39119 +
                     (C24542 + C24541 - C24540 - C24543) * C50755 * C39120) *
                        C251 +
                    ((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C50755 * C39117 +
                     (C22638 - (C22639 + C22640) + C22641) * C50755 * C39118 +
                     (C22646 - (C22647 + C22648) + C22649) * C50755 * C39119 +
                     (C39666 - (C39667 + C39668) + C39669) * C50755 * C39120) *
                        C50640) *
                       C50897 +
                   (((C22624 - (C22623 + C22622) + C22625) * C50755 * C39117 +
                     (C22632 - (C22631 + C22630) + C22633) * C50755 * C39118 +
                     (C24540 - (C24541 + C24542) + C24543) * C50755 * C39119 +
                     (C23082 * C541 - (C24048 * C50896 + C24047 * C540) +
                      C23083 * C50705) *
                         C50755 * C39120) *
                        C251 +
                    ((C22640 + C22639 - C22638 - C22641) * C50755 * C39117 +
                     (C22648 + C22647 - C22646 - C22649) * C50755 * C39118 +
                     (C39668 + C39667 - C39666 - C39669) * C50755 * C39119 +
                     (C39328 * C540 + C39329 * C50896 -
                      (C19772 * C6389 + C50610 * C6391) * C541 -
                      (C19772 * C6393 + C50610 * C6395) * C50705) *
                         C50755 * C39120) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                 C16990 * C124 + C16985 * C131) *
                    C121 +
                (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                 C16990 * C135 + C16985 * C145) *
                    C50653) *
                   C50755 * C33783 +
               ((C16988 * C401 + C16983 * C416 + C16989 * C397 + C16984 * C407 +
                 C16990 * C398 + C16985 * C408) *
                    C121 +
                (C16988 * C415 + C16983 * C431 + C16989 * C411 + C16984 * C427 +
                 C16990 * C412 + C16985 * C428) *
                    C50653) *
                   C50755 * C50831) *
                  C112 -
              (((C16990 * C413 + C16985 * C429 + C16989 * C412 + C16984 * C428 +
                 C16988 * C411 + C16983 * C427) *
                    C50653 +
                (C16990 * C399 + C16985 * C409 + C16989 * C398 + C16984 * C408 +
                 C16988 * C397 + C16983 * C407) *
                    C121) *
                   C50755 * C50831 +
               ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
                 C16988 * C134 + C16983 * C144) *
                    C50653 +
                (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
                 C16988 * C123 + C16983 * C130) *
                    C121) *
                   C50755 * C33783) *
                  C113 +
              (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
                 C16990 * C126 + C16985 * C138) *
                    C121 +
                (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
                 C16990 * C137 + C16985 * C147) *
                    C50653) *
                   C50755 * C33783 +
               ((C16988 * C398 + C16983 * C408 + C16989 * C399 + C16984 * C409 +
                 C16990 * C400 + C16985 * C410) *
                    C121 +
                (C16988 * C412 + C16983 * C428 + C16989 * C413 + C16984 * C429 +
                 C16990 * C414 + C16985 * C430) *
                    C50653) *
                   C50755 * C50831) *
                  C114 -
              (((C16990 * C647 + C16985 * C649 + C16989 * C414 + C16984 * C430 +
                 C16988 * C413 + C16983 * C429) *
                    C50653 +
                (C16990 * C646 + C16985 * C648 + C16989 * C400 + C16984 * C410 +
                 C16988 * C399 + C16983 * C409) *
                    C121) *
                   C50755 * C50831 +
               ((C16990 * C140 + C16985 * C148 + C16989 * C137 + C16984 * C147 +
                 C16988 * C136 + C16983 * C146) *
                    C50653 +
                (C16990 * C127 + C16985 * C139 + C16989 * C126 + C16984 * C138 +
                 C16988 * C125 + C16983 * C132) *
                    C121) *
                   C50755 * C33783) *
                  C115) *
             C50669 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                 C16990 * C124 + C16985 * C131) *
                    C253 +
                (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                 C16990 * C135 + C16985 * C145) *
                    C248 -
                (C17186 + C17187 + C17188) * C254 -
                (C17189 + C17190 + C17191) * C249 +
                (C17192 + C17193 + C17194) * C255 +
                (C17195 + C17196 + C17197) * C250) *
                   C50755 * C33783 +
               ((C16988 * C401 + C16983 * C416 + C16989 * C397 + C16984 * C407 +
                 C16990 * C398 + C16985 * C408) *
                    C253 +
                (C16988 * C415 + C16983 * C431 + C16989 * C411 + C16984 * C427 +
                 C16990 * C412 + C16985 * C428) *
                    C248 -
                (C17886 + C17885 + C17884) * C254 -
                (C17889 + C17888 + C17887) * C249 +
                (C18822 + C18821 + C18820) * C255 +
                (C18825 + C18824 + C18823) * C250) *
                   C50755 * C50831) *
                  C251 +
              (((C17198 + C17199 + C17200) * C254 -
                ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                  C16984 * C145 + C16988 * C134 + C16983 * C144) *
                     C248 +
                 (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                  C16984 * C131 + C16988 * C123 + C16983 * C130) *
                     C253) +
                (C17201 + C17202 + C17203) * C249 -
                (C17204 + C17205 + C17206) * C255 -
                (C17207 + C17208 + C17209) * C250) *
                   C50755 * C33783 +
               ((C17892 + C17891 + C17890) * C254 -
                ((C16990 * C413 + C16985 * C429 + C16989 * C412 +
                  C16984 * C428 + C16988 * C411 + C16983 * C427) *
                     C248 +
                 (C16990 * C399 + C16985 * C409 + C16989 * C398 +
                  C16984 * C408 + C16988 * C397 + C16983 * C407) *
                     C253) +
                (C17895 + C17894 + C17893) * C249 -
                (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 +
                 C16984 * C1449 + C16988 * C1446 + C16983 * C1450) *
                    C255 -
                (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 +
                 C16984 * C1457 + C16988 * C1454 + C16983 * C1458) *
                    C250) *
                   C50755 * C50831) *
                  C50640) *
             C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C121 +
             (C34129 + C34130 + C34131) * C50653) *
                C50755 * C50831) *
               C251 -
           (((C34132 + C34133 + C34134) * C50653 +
             (C34135 + C34136 + C34137) * C121) *
                C50755 * C50831 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C50755 * C33783) *
               C50640) *
              C394 +
          ((((C34137 + C34136 + C34135) * C121 +
             (C34134 + C34133 + C34132) * C50653) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C121 +
             (C34141 + C34142 + C34143) * C50653) *
                C50755 * C50831) *
               C50640 -
           (((C34144 + C34145 + C34146) * C50653 +
             (C34147 + C34148 + C34149) * C121) *
                C50755 * C50831 +
            ((C34131 + C34130 + C34129) * C50653 +
             (C34128 + C34127 + C34126) * C121) *
                C50755 * C33783) *
               C251) *
              C395 +
          ((((C34149 + C34148 + C34147) * C121 +
             (C34146 + C34145 + C34144) * C50653) *
                C50755 * C33783 +
            ((C16988 * C1731 + C16983 * C1739 + C16989 * C1730 +
              C16984 * C1738 + C16990 * C1729 + C16985 * C1737) *
                 C121 +
             (C16988 * C1735 + C16983 * C1743 + C16989 * C1734 +
              C16984 * C1742 + C16990 * C1733 + C16985 * C1741) *
                 C50653) *
                C50755 * C50831) *
               C251 -
           (((C16990 * C1732 + C16985 * C1740 + C16989 * C1733 +
              C16984 * C1741 + C16988 * C1734 + C16983 * C1742) *
                 C50653 +
             (C16990 * C1728 + C16985 * C1736 + C16989 * C1729 +
              C16984 * C1737 + C16988 * C1730 + C16983 * C1738) *
                 C121) *
                C50755 * C50831 +
            ((C34143 + C34142 + C34141) * C50653 +
             (C34140 + C34139 + C34138) * C121) *
                C50755 * C33783) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C2173 +
            (C19904 * C121 + C19905 * C50653) * C2174 +
            (C19906 * C121 + C19907 * C50653) * C2175) *
               C33783 +
           ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
            (C31394 + C31395) * C2175) *
               C50831) *
              C112 -
          (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
            (C22088 + C22089) * C2173) *
               C50831 +
           ((C19915 * C50653 + C19914 * C121) * C2175 +
            (C19913 * C50653 + C19912 * C121) * C2174 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C2173) *
               C33783) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C2173 +
            (C20128 * C121 + C20129 * C50653) * C2174 +
            (C20130 * C121 + C20131 * C50653) * C2175) *
               C33783 +
           ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
            (C31700 + C31701) * C2175) *
               C50831) *
              C114 -
          ((((C19772 * C1452 + C50610 * C1456) * C50653 +
             (C19772 * C1444 + C50610 * C1448) * C121) *
                C2175 +
            ((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C2174 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C2173) *
               C50831 +
           (((C19772 * C281 + C50610 * C293) * C50653 +
             (C19772 * C263 + C50610 * C277) * C121) *
                C2175 +
            ((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C2174 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C2173) *
               C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C2173 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C2174 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C2175) *
               C33783 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C2173 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C2174 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C2175) *
               C50831) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C2173 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C2174 +
            (C19916 * C254 - (C19915 * C248 + C19914 * C253) + C19917 * C249 -
             C19918 * C255 - C19919 * C250) *
                C2175) *
               C33783 +
           ((C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
             C20394 * C255 - C20395 * C250) *
                C2173 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C2174 +
            (C20396 * C254 - (C20395 * C248 + C20394 * C253) + C20397 * C249 -
             (C19772 * C4070 + C50610 * C4072) * C255 -
             (C19772 * C4074 + C50610 * C4076) * C250) *
                C2175) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C251 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C50640) *
              C394 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C50640 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C251) *
              C395 +
          (((C22098 * C2173 + C22066 * C2174 + (C31401 + C31400) * C2175) *
                C33783 +
            ((C22097 + C22096) * C2173 + (C22095 + C22094) * C2174 +
             (C33194 + C33195) * C2175) *
                C50831) *
               C251 -
           ((((C19772 * C4486 + C50610 * C4494) * C50653 +
              (C19772 * C4482 + C50610 * C4488) * C121) *
                 C2175 +
             (C22093 + C22092) * C2174 + (C22091 + C22090) * C2173) *
                C50831 +
            ((C31399 + C31398) * C2175 + C22067 * C2174 + C22099 * C2173) *
                C33783) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C121 +
            (C19772 * C133 + C50610 * C143) * C50653) *
               C50755 * C39117 +
           (C22080 + C22081) * C50755 * C39118 + C22098 * C50755 * C39119 +
           (C22097 + C22096) * C50755 * C39120) *
              C112 -
          ((C22091 + C22090) * C50755 * C39120 + C22099 * C50755 * C39119 +
           (C22088 + C22089) * C50755 * C39118 +
           ((C19772 * C134 + C50610 * C144) * C50653 +
            (C19772 * C123 + C50610 * C130) * C121) *
               C50755 * C39117) *
              C113 +
          (((C19772 * C124 + C50610 * C131) * C121 +
            (C19772 * C135 + C50610 * C145) * C50653) *
               C50755 * C39117 +
           (C22424 + C22425) * C50755 * C39118 +
           (C22426 + C22427) * C50755 * C39119 +
           ((C19772 * C1729 + C50610 * C1737) * C121 +
            (C19772 * C1733 + C50610 * C1741) * C50653) *
               C50755 * C39120) *
              C114 -
          (((C19772 * C1732 + C50610 * C1740) * C50653 +
            (C19772 * C1728 + C50610 * C1736) * C121) *
               C50755 * C39120 +
           ((C19772 * C424 + C50610 * C435) * C50653 +
            (C19772 * C405 + C50610 * C420) * C121) *
               C50755 * C39119 +
           ((C19772 * C413 + C50610 * C429) * C50653 +
            (C19772 * C399 + C50610 * C409) * C121) *
               C50755 * C39118 +
           ((C19772 * C136 + C50610 * C146) * C50653 +
            (C19772 * C125 + C50610 * C132) * C121) *
               C50755 * C39117) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C50755 * C39117 +
           (C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50755 *
               C39118 +
           (C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C50755 *
               C39119 +
           (C22079 * C253 + C22078 * C248 - C22077 * C254 - C22076 * C249 +
            C23080 * C255 + C23081 * C250) *
               C50755 * C39120) *
              C251 +
          ((C19912 * C254 -
            ((C19772 * C134 + C50610 * C144) * C248 +
             (C19772 * C123 + C50610 * C130) * C253) +
            C19913 * C249 - C19914 * C255 - C19915 * C250) *
               C50755 * C39117 +
           (C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
            C20394 * C255 - C20395 * C250) *
               C50755 * C39118 +
           (C21872 * C254 - (C22068 * C248 + C22069 * C253) + C21873 * C249 -
            C21874 * C255 - C21875 * C250) *
               C50755 * C39119 +
           (C22074 * C254 - (C22073 * C248 + C22072 * C253) + C22075 * C249 -
            (C19772 * C4482 + C50610 * C4488) * C255 -
            (C19772 * C4486 + C50610 * C4494) * C250) *
               C50755 * C39120) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50755 * C39117 +
            (C22080 + C22081) * C50755 * C39118 + C39318 * C39119 +
            C39326 * C39120) *
               C251 -
           (C39327 * C39120 + C39321 * C39119 +
            (C22088 + C22089) * C50755 * C39118 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50755 * C39117) *
               C50640) *
              C394 +
          (((C22089 + C22088) * C50755 * C39117 +
            (C22087 + C22086) * C50755 * C39118 +
            (C22090 + C22091) * C50755 * C39119 +
            (C39330 + C39331) * C50755 * C39120) *
               C50640 -
           ((C24051 + C24050) * C50755 * C39120 + C24038 * C50755 * C39119 +
            (C22083 + C22082) * C50755 * C39118 +
            (C22081 + C22080) * C50755 * C39117) *
               C251) *
              C395 +
          ((C39318 * C39117 + C39326 * C39118 +
            (C24050 + C24051) * C50755 * C39119 +
            ((C19772 * C7296 + C50610 * C7300) * C121 +
             (C19772 * C7298 + C50610 * C7302) * C50653) *
                C50755 * C39120) *
               C251 -
           (((C19772 * C7297 + C50610 * C7301) * C50653 +
             (C19772 * C7295 + C50610 * C7299) * C121) *
                C50755 * C39120 +
            (C39331 + C39330) * C50755 * C39119 + C39327 * C39118 +
            C39321 * C39117) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C50939 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C50940 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C2173 +
             (C20128 * C121 + C20129 * C50653) * C2174 +
             (C20130 * C121 + C20131 * C50653) * C2175) *
                C33783 +
            ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
             (C31700 + C31701) * C2175) *
                C50831) *
               C539) *
              C50897 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C50940 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C50939 -
           ((((C19772 * C2565 + C50610 * C2569) * C50653 +
              (C19772 * C2560 + C50610 * C2566) * C121) *
                 C2175 +
             (C22419 + C22418) * C2174 + (C22427 + C22426) * C2173) *
                C50831 +
            ((C31701 + C31700) * C2175 + (C22413 + C22412) * C2174 +
             (C22425 + C22424) * C2173) *
                C33783) *
               C539) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C121 +
             (C34129 + C34130 + C34131) * C50653) *
                C50755 * C50831) *
               C50939 -
           (((C34132 + C34133 + C34134) * C50653 +
             (C34135 + C34136 + C34137) * C121) *
                C50755 * C50831 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C50755 * C33783) *
               C50940 +
           (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
              C16990 * C126 + C16985 * C138) *
                 C121 +
             (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
              C16990 * C137 + C16985 * C147) *
                 C50653) *
                C50755 * C33783 +
            ((C34454 + C34455 + C34456) * C121 +
             (C34457 + C34458 + C34459) * C50653) *
                C50755 * C50831) *
               C539) *
              C50897 +
          ((((C34137 + C34136 + C34135) * C121 +
             (C34134 + C34133 + C34132) * C50653) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C121 +
             (C34141 + C34142 + C34143) * C50653) *
                C50755 * C50831) *
               C50940 -
           (((C34144 + C34145 + C34146) * C50653 +
             (C34147 + C34148 + C34149) * C121) *
                C50755 * C50831 +
            ((C34131 + C34130 + C34129) * C50653 +
             (C34128 + C34127 + C34126) * C121) *
                C50755 * C33783) *
               C50939 -
           (((C16990 * C425 + C16985 * C436 + C16989 * C424 + C16984 * C435 +
              C16988 * C423 + C16983 * C434) *
                 C50653 +
             (C16990 * C406 + C16985 * C426 + C16989 * C405 + C16984 * C420 +
              C16988 * C404 + C16983 * C419) *
                 C121) *
                C50755 * C50831 +
            ((C34459 + C34458 + C34457) * C50653 +
             (C34456 + C34455 + C34454) * C121) *
                C50755 * C33783) *
               C539) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50755 * C39117 +
            (C22080 + C22081) * C50755 * C39118 + C39318 * C39119 +
            C39326 * C39120) *
               C50939 -
           (C39327 * C39120 + C39321 * C39119 +
            (C22088 + C22089) * C50755 * C39118 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50755 * C39117) *
               C50940 +
           (((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C50755 * C39117 +
            (C22424 + C22425) * C50755 * C39118 +
            (C22426 + C22427) * C50755 * C39119 +
            (C39534 + C39535) * C50755 * C39120) *
               C539) *
              C50897 +
          (((C22089 + C22088) * C50755 * C39117 +
            (C22087 + C22086) * C50755 * C39118 +
            (C22090 + C22091) * C50755 * C39119 +
            (C39330 + C39331) * C50755 * C39120) *
               C50940 -
           ((C24051 + C24050) * C50755 * C39120 + C24038 * C50755 * C39119 +
            (C22083 + C22082) * C50755 * C39118 +
            (C22081 + C22080) * C50755 * C39117) *
               C50939 -
           (((C19772 * C5384 + C50610 * C5388) * C50653 +
             (C19772 * C5379 + C50610 * C5385) * C121) *
                C50755 * C39120 +
            (C39535 + C39534) * C50755 * C39119 +
            (C22427 + C22426) * C50755 * C39118 +
            (C22425 + C22424) * C50755 * C39117) *
               C539) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C50755 * C33783 +
           ((C16988 * C401 + C16983 * C416 + C16989 * C397 + C16984 * C407 +
             C16990 * C398 + C16985 * C408) *
                C253 +
            (C16988 * C415 + C16983 * C431 + C16989 * C411 + C16984 * C427 +
             C16990 * C412 + C16985 * C428) *
                C248 -
            (C17886 + C17885 + C17884) * C254 -
            (C17889 + C17888 + C17887) * C249 +
            (C18822 + C18821 + C18820) * C255 +
            (C18825 + C18824 + C18823) * C250) *
               C50755 * C50831) *
              C251 +
          (((C17198 + C17199 + C17200) * C254 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C248 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C253) +
            (C17201 + C17202 + C17203) * C249 -
            (C17204 + C17205 + C17206) * C255 -
            (C17207 + C17208 + C17209) * C250) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C254 -
            ((C16990 * C413 + C16985 * C429 + C16989 * C412 + C16984 * C428 +
              C16988 * C411 + C16983 * C427) *
                 C248 +
             (C16990 * C399 + C16985 * C409 + C16989 * C398 + C16984 * C408 +
              C16988 * C397 + C16983 * C407) *
                 C253) +
            (C17895 + C17894 + C17893) * C249 -
            (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 + C16984 * C1449 +
             C16988 * C1446 + C16983 * C1450) *
                C255 -
            (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 + C16984 * C1457 +
             C16988 * C1454 + C16983 * C1458) *
                C250) *
               C50755 * C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C121 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50653) *
               C50755 * C33783 +
           ((C16988 * C401 + C16983 * C416 + C16989 * C397 + C16984 * C407 +
             C16990 * C398 + C16985 * C408) *
                C121 +
            (C16988 * C415 + C16983 * C431 + C16989 * C411 + C16984 * C427 +
             C16990 * C412 + C16985 * C428) *
                C50653) *
               C50755 * C50831) *
              C112 -
          (((C16990 * C413 + C16985 * C429 + C16989 * C412 + C16984 * C428 +
             C16988 * C411 + C16983 * C427) *
                C50653 +
            (C16990 * C399 + C16985 * C409 + C16989 * C398 + C16984 * C408 +
             C16988 * C397 + C16983 * C407) *
                C121) *
               C50755 * C50831 +
           ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
             C16988 * C134 + C16983 * C144) *
                C50653 +
            (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
             C16988 * C123 + C16983 * C130) *
                C121) *
               C50755 * C33783) *
              C113 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C121 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C50653) *
               C50755 * C33783 +
           ((C16988 * C398 + C16983 * C408 + C16989 * C399 + C16984 * C409 +
             C16990 * C400 + C16985 * C410) *
                C121 +
            (C16988 * C412 + C16983 * C428 + C16989 * C413 + C16984 * C429 +
             C16990 * C414 + C16985 * C430) *
                C50653) *
               C50755 * C50831) *
              C114 -
          (((C16990 * C647 + C16985 * C649 + C16989 * C414 + C16984 * C430 +
             C16988 * C413 + C16983 * C429) *
                C50653 +
            (C16990 * C646 + C16985 * C648 + C16989 * C400 + C16984 * C410 +
             C16988 * C399 + C16983 * C409) *
                C121) *
               C50755 * C50831 +
           ((C16990 * C140 + C16985 * C148 + C16989 * C137 + C16984 * C147 +
             C16988 * C136 + C16983 * C146) *
                C50653 +
            (C16990 * C127 + C16985 * C139 + C16989 * C126 + C16984 * C138 +
             C16988 * C125 + C16983 * C132) *
                C121) *
               C50755 * C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C2173 +
            (C19904 * C121 + C19905 * C50653) * C2174 +
            (C19906 * C121 + C19907 * C50653) * C2175) *
               C33783 +
           ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
            (C31394 + C31395) * C2175) *
               C50831) *
              C112 -
          (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
            (C22088 + C22089) * C2173) *
               C50831 +
           ((C19915 * C50653 + C19914 * C121) * C2175 +
            (C19913 * C50653 + C19912 * C121) * C2174 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C2173) *
               C33783) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C2173 +
            (C20128 * C121 + C20129 * C50653) * C2174 +
            (C20130 * C121 + C20131 * C50653) * C2175) *
               C33783 +
           ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
            (C31700 + C31701) * C2175) *
               C50831) *
              C114 -
          ((((C19772 * C1452 + C50610 * C1456) * C50653 +
             (C19772 * C1444 + C50610 * C1448) * C121) *
                C2175 +
            ((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C2174 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C2173) *
               C50831 +
           (((C19772 * C281 + C50610 * C293) * C50653 +
             (C19772 * C263 + C50610 * C277) * C121) *
                C2175 +
            ((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C2174 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C2173) *
               C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C2173 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C2174 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C2175) *
               C33783 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C2173 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C2174 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C2175) *
               C50831) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C2173 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C2174 +
            (C19916 * C254 - (C19915 * C248 + C19914 * C253) + C19917 * C249 -
             C19918 * C255 - C19919 * C250) *
                C2175) *
               C33783 +
           ((C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
             C20394 * C255 - C20395 * C250) *
                C2173 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C2174 +
            (C20396 * C254 - (C20395 * C248 + C20394 * C253) + C20397 * C249 -
             (C19772 * C4070 + C50610 * C4072) * C255 -
             (C19772 * C4074 + C50610 * C4076) * C250) *
                C2175) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C121 +
            (C19772 * C133 + C50610 * C143) * C50653) *
               C50755 * C39117 +
           (C22080 + C22081) * C50755 * C39118 + C22098 * C50755 * C39119 +
           (C22097 + C22096) * C50755 * C39120) *
              C112 -
          ((C22091 + C22090) * C50755 * C39120 + C22099 * C50755 * C39119 +
           (C22088 + C22089) * C50755 * C39118 +
           ((C19772 * C134 + C50610 * C144) * C50653 +
            (C19772 * C123 + C50610 * C130) * C121) *
               C50755 * C39117) *
              C113 +
          (((C19772 * C124 + C50610 * C131) * C121 +
            (C19772 * C135 + C50610 * C145) * C50653) *
               C50755 * C39117 +
           (C22424 + C22425) * C50755 * C39118 +
           (C22426 + C22427) * C50755 * C39119 +
           ((C19772 * C1729 + C50610 * C1737) * C121 +
            (C19772 * C1733 + C50610 * C1741) * C50653) *
               C50755 * C39120) *
              C114 -
          (((C19772 * C1732 + C50610 * C1740) * C50653 +
            (C19772 * C1728 + C50610 * C1736) * C121) *
               C50755 * C39120 +
           ((C19772 * C424 + C50610 * C435) * C50653 +
            (C19772 * C405 + C50610 * C420) * C121) *
               C50755 * C39119 +
           ((C19772 * C413 + C50610 * C429) * C50653 +
            (C19772 * C399 + C50610 * C409) * C121) *
               C50755 * C39118 +
           ((C19772 * C136 + C50610 * C146) * C50653 +
            (C19772 * C125 + C50610 * C132) * C121) *
               C50755 * C39117) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C50755 * C39117 +
           (C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50755 *
               C39118 +
           (C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C50755 *
               C39119 +
           (C22079 * C253 + C22078 * C248 - C22077 * C254 - C22076 * C249 +
            C23080 * C255 + C23081 * C250) *
               C50755 * C39120) *
              C251 +
          ((C19912 * C254 -
            ((C19772 * C134 + C50610 * C144) * C248 +
             (C19772 * C123 + C50610 * C130) * C253) +
            C19913 * C249 - C19914 * C255 - C19915 * C250) *
               C50755 * C39117 +
           (C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
            C20394 * C255 - C20395 * C250) *
               C50755 * C39118 +
           (C21872 * C254 - (C22068 * C248 + C22069 * C253) + C21873 * C249 -
            C21874 * C255 - C21875 * C250) *
               C50755 * C39119 +
           (C22074 * C254 - (C22073 * C248 + C22072 * C253) + C22075 * C249 -
            (C19772 * C4482 + C50610 * C4488) * C255 -
            (C19772 * C4486 + C50610 * C4494) * C250) *
               C50755 * C39120) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C2173 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C2174 +
            (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
             C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
                C2175) *
               C33783 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C2173 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C2174 +
            (C32792 + C32793 - C32794 - C32795 + C32796 + C32797) * C2175) *
               C50831) *
              C50888 +
          (((C19912 * C1214 -
             ((C19772 * C134 + C50610 * C144) * C50941 +
              (C19772 * C123 + C50610 * C130) * C1213) +
             C19913 * C50942 - C19914 * C1215 - C19915 * C1210) *
                C2173 +
            (C19914 * C1214 - (C19913 * C50941 + C19912 * C1213) +
             C19915 * C50942 - C19916 * C1215 - C19917 * C1210) *
                C2174 +
            (C19916 * C1214 - (C19915 * C50941 + C19914 * C1213) +
             C19917 * C50942 - C19918 * C1215 - C19919 * C1210) *
                C2175) *
               C33783 +
           ((C20392 * C1214 - (C22070 * C50941 + C22071 * C1213) +
             C20393 * C50942 - C20394 * C1215 - C20395 * C1210) *
                C2173 +
            (C20394 * C1214 - (C20393 * C50941 + C20392 * C1213) +
             C20395 * C50942 - C20396 * C1215 - C20397 * C1210) *
                C2174 +
            (C20396 * C1214 - (C20395 * C50941 + C20394 * C1213) +
             C20397 * C50942 - (C19772 * C4070 + C50610 * C4072) * C1215 -
             (C19772 * C4074 + C50610 * C4076) * C1210) *
                C2175) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C1213 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50941 -
            (C17186 + C17187 + C17188) * C1214 -
            (C17189 + C17190 + C17191) * C50942 +
            (C17192 + C17193 + C17194) * C1215 +
            (C17195 + C17196 + C17197) * C1210) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C1213 +
            (C34129 + C34130 + C34131) * C50941 -
            (C17886 + C17885 + C17884) * C1214 -
            (C17889 + C17888 + C17887) * C50942 +
            (C18822 + C18821 + C18820) * C1215 +
            (C18825 + C18824 + C18823) * C1210) *
               C50755 * C50831) *
              C50888 +
          (((C17198 + C17199 + C17200) * C1214 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50941 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C1213) +
            (C17201 + C17202 + C17203) * C50942 -
            (C17204 + C17205 + C17206) * C1215 -
            (C17207 + C17208 + C17209) * C1210) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C1214 -
            ((C34132 + C34133 + C34134) * C50941 +
             (C34135 + C34136 + C34137) * C1213) +
            (C17895 + C17894 + C17893) * C50942 -
            (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 + C16984 * C1449 +
             C16988 * C1446 + C16983 * C1450) *
                C1215 -
            (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 + C16984 * C1457 +
             C16988 * C1454 + C16983 * C1458) *
                C1210) *
               C50755 * C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C1213 +
            (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
            C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
               C50755 * C39117 +
           (C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C50755 *
               C39118 +
           (C23607 + C23608 - C23609 - C23610 + C23611 + C23612) * C50755 *
               C39119 +
           (C22079 * C1213 + C22078 * C50941 - C22077 * C1214 -
            C22076 * C50942 + C23080 * C1215 + C23081 * C1210) *
               C50755 * C39120) *
              C50888 +
          ((C19912 * C1214 -
            ((C19772 * C134 + C50610 * C144) * C50941 +
             (C19772 * C123 + C50610 * C130) * C1213) +
            C19913 * C50942 - C19914 * C1215 - C19915 * C1210) *
               C50755 * C39117 +
           (C20392 * C1214 - (C22070 * C50941 + C22071 * C1213) +
            C20393 * C50942 - C20394 * C1215 - C20395 * C1210) *
               C50755 * C39118 +
           (C21872 * C1214 - (C22068 * C50941 + C22069 * C1213) +
            C21873 * C50942 - C21874 * C1215 - C21875 * C1210) *
               C50755 * C39119 +
           (C22074 * C1214 - (C22073 * C50941 + C22072 * C1213) +
            C22075 * C50942 - (C19772 * C4482 + C50610 * C4488) * C1215 -
            (C19772 * C4486 + C50610 * C4494) * C1210) *
               C50755 * C39120) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C2173 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C2174 +
            (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
             C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
                C2175) *
               C33783 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C2173 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C2174 +
            (C32792 + C32793 - C32794 - C32795 + C32796 + C32797) * C2175) *
               C50831) *
              C50635 * C50897 +
          (((C23597 - (C23596 + C23595) + C23598 - C23599 - C23600) * C2173 +
            (C23603 - (C23602 + C23601) + C23604 - C23605 - C23606) * C2174 +
            (C32794 - (C32793 + C32792) + C32795 - C32796 - C32797) * C2175) *
               C33783 +
           ((C23609 - (C23608 + C23607) + C23610 - C23611 - C23612) * C2173 +
            (C23615 - (C23614 + C23613) + C23616 - C23617 - C23618) * C2174 +
            (C20690 * C1214 - (C20689 * C50941 + C20688 * C1213) +
             C20691 * C50942 - (C19772 * C20669 + C50610 * C20670) * C1215 -
             (C19772 * C20671 + C50610 * C20672) * C1210) *
                C2175) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C1213 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50941 -
            (C17186 + C17187 + C17188) * C1214 -
            (C17189 + C17190 + C17191) * C50942 +
            (C17192 + C17193 + C17194) * C1215 +
            (C17195 + C17196 + C17197) * C1210) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C1213 +
            (C34129 + C34130 + C34131) * C50941 -
            (C17886 + C17885 + C17884) * C1214 -
            (C17889 + C17888 + C17887) * C50942 +
            (C18822 + C18821 + C18820) * C1215 +
            (C18825 + C18824 + C18823) * C1210) *
               C50755 * C50831) *
              C50635 * C50897 +
          (((C17884 + C17885 + C17886) * C1214 -
            ((C34131 + C34130 + C34129) * C50941 +
             (C34128 + C34127 + C34126) * C1213) +
            (C17887 + C17888 + C17889) * C50942 -
            (C18820 + C18821 + C18822) * C1215 -
            (C18823 + C18824 + C18825) * C1210) *
               C50755 * C33783 +
           ((C18318 + C18317 + C18316) * C1214 -
            ((C34144 + C34145 + C34146) * C50941 +
             (C34147 + C34148 + C34149) * C1213) +
            (C18321 + C18320 + C18319) * C50942 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C1215 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C1210) *
               C50755 * C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C1213 +
            (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
            C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
               C50755 * C39117 +
           (C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C50755 *
               C39118 +
           (C23607 + C23608 - C23609 - C23610 + C23611 + C23612) * C50755 *
               C39119 +
           (C40271 + C40272 - C40273 - C40274 + C40275 + C40276) * C50755 *
               C39120) *
              C50635 * C50897 +
          ((C23597 - (C23596 + C23595) + C23598 - C23599 - C23600) * C50755 *
               C39117 +
           (C23609 - (C23608 + C23607) + C23610 - C23611 - C23612) * C50755 *
               C39118 +
           (C40273 - (C40272 + C40271) + C40274 - C40275 - C40276) * C50755 *
               C39119 +
           (C23082 * C1214 - (C24048 * C50941 + C24047 * C1213) +
            C23083 * C50942 - (C19772 * C23043 + C50610 * C23044) * C1215 -
            (C19772 * C23045 + C50610 * C23046) * C1210) *
               C50755 * C39120) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                 C16990 * C124 + C16985 * C131) *
                    C903 +
                (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                 C16990 * C135 + C16985 * C145) *
                    C898 -
                (C17186 + C17187 + C17188) * C904 -
                (C17189 + C17190 + C17191) * C50705) *
                   C50755 * C33783 +
               ((C34126 + C34127 + C34128) * C903 +
                (C34129 + C34130 + C34131) * C898 -
                (C17886 + C17885 + C17884) * C904 -
                (C17889 + C17888 + C17887) * C50705) *
                   C50755 * C50831) *
                  C900 +
              (((C17198 + C17199 + C17200) * C904 -
                ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                  C16984 * C145 + C16988 * C134 + C16983 * C144) *
                     C898 +
                 (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                  C16984 * C131 + C16988 * C123 + C16983 * C130) *
                     C903) +
                (C17201 + C17202 + C17203) * C50705) *
                   C50755 * C33783 +
               ((C17892 + C17891 + C17890) * C904 -
                ((C34132 + C34133 + C34134) * C898 +
                 (C34135 + C34136 + C34137) * C903) +
                (C17895 + C17894 + C17893) * C50705) *
                   C50755 * C50831) *
                  C901 +
              (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
                 C16990 * C126 + C16985 * C138) *
                    C903 +
                (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
                 C16990 * C137 + C16985 * C147) *
                    C898 -
                (C17514 + C17515 + C17516) * C904 -
                (C17517 + C17518 + C17519) * C50705) *
                   C50755 * C33783 +
               ((C34454 + C34455 + C34456) * C903 +
                (C34457 + C34458 + C34459) * C898 -
                (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
                 C16988 * C782 + C16983 * C787) *
                    C904 -
                (C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
                 C16988 * C791 + C16983 * C797) *
                    C50705) *
                   C50755 * C50831) *
                  C902) *
             C50669 +
         0.5 * std::pow(Pi, 2.5) *
             (((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                C16990 * C124 + C16985 * C131) *
                   C976 +
               (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                C16990 * C135 + C16985 * C145) *
                   C971 -
               (C17186 + C17187 + C17188) * C977 -
               (C17189 + C17190 + C17191) * C972 +
               (C17192 + C17193 + C17194) * C978 +
               (C17195 + C17196 + C17197) * C973 -
               (C18152 + C18153 + C18154) * C979 -
               (C18155 + C18156 + C18157) * C974) *
                  C50755 * C33783 +
              ((C34126 + C34127 + C34128) * C976 +
               (C34129 + C34130 + C34131) * C971 -
               (C17886 + C17885 + C17884) * C977 -
               (C17889 + C17888 + C17887) * C972 +
               (C18822 + C18821 + C18820) * C978 +
               (C18825 + C18824 + C18823) * C973 -
               (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 +
                C16984 * C3084 + C16988 * C3080 + C16983 * C3083) *
                   C979 -
               (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 +
                C16984 * C3090 + C16988 * C3085 + C16983 * C3089) *
                   C974) *
                  C50755 * C50831) *
             C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C903 +
            (C34129 + C34130 + C34131) * C898 -
            (C17886 + C17885 + C17884) * C904 -
            (C17889 + C17888 + C17887) * C50705) *
               C50755 * C50831) *
              C50635 * C394 +
          (((C17884 + C17885 + C17886) * C904 -
            ((C34131 + C34130 + C34129) * C898 +
             (C34128 + C34127 + C34126) * C903) +
            (C17887 + C17888 + C17889) * C50705) *
               C50755 * C33783 +
           ((C18318 + C18317 + C18316) * C904 -
            ((C34144 + C34145 + C34146) * C898 +
             (C34147 + C34148 + C34149) * C903) +
            (C18321 + C18320 + C18319) * C50705) *
               C50755 * C50831) *
              C50635 * C395 +
          (((C34149 + C34148 + C34147) * C903 +
            (C34146 + C34145 + C34144) * C898 -
            (C18316 + C18317 + C18318) * C904 -
            (C18319 + C18320 + C18321) * C50705) *
               C50755 * C33783 +
           ((C16988 * C1731 + C16983 * C1739 + C16989 * C1730 + C16984 * C1738 +
             C16990 * C1729 + C16985 * C1737) *
                C903 +
            (C16988 * C1735 + C16983 * C1743 + C16989 * C1734 + C16984 * C1742 +
             C16990 * C1733 + C16985 * C1741) *
                C898 -
            (C16990 * C5983 + C16985 * C5984 + C16989 * C4484 + C16984 * C4492 +
             C16988 * C4485 + C16983 * C4493) *
                C904 -
            (C16990 * C5985 + C16985 * C5986 + C16989 * C4490 + C16984 * C4496 +
             C16988 * C4491 + C16983 * C4497) *
                C50705) *
               C50755 * C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C2173 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C2174 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C2175) *
               C33783 +
           ((C23048 + C23049 - C23050 - C23051) * C2173 +
            (C23052 + C23053 - C23054 - C23055) * C2174 +
            (C32294 + C32295 - C32296 - C32297) * C2175) *
               C50831) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C2173 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C2174 +
            (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
             C19917 * C50705) *
                C2175) *
               C33783 +
           ((C23433 - (C23434 + C23435) + C23436) * C2173 +
            (C23437 - (C23438 + C23439) + C23440) * C2174 +
            (C32642 - (C32643 + C32644) + C32645) * C2175) *
               C50831) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C2173 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C2174 +
            (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
                C2175) *
               C33783 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C2173 +
            (C22258 * C903 + C22259 * C898 - C31552 * C904 - C31553 * C50705) *
                C2174 +
            (C31552 * C903 + C31553 * C898 -
             (C19772 * C3082 + C50610 * C3087) * C904 -
             (C19772 * C3088 + C50610 * C3091) * C50705) *
                C2175) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C2173 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C2174 +
           (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
            C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
               C2175) *
              C33783 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C2173 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C2174 +
           (C20388 * C976 + C20389 * C971 - C20390 * C977 - C20391 * C972 +
            C21026 * C978 + C21027 * C973 -
            (C19772 * C21017 + C50610 * C21018) * C979 -
            (C19772 * C21019 + C50610 * C21020) * C974) *
               C2175) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C2173 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C2174 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C2175) *
               C33783 +
           ((C23048 + C23049 - C23050 - C23051) * C2173 +
            (C23052 + C23053 - C23054 - C23055) * C2174 +
            (C32294 + C32295 - C32296 - C32297) * C2175) *
               C50831) *
              C50635 * C394 +
          (((C23050 - (C23049 + C23048) + C23051) * C2173 +
            (C23054 - (C23053 + C23052) + C23055) * C2174 +
            (C32296 - (C32295 + C32294) + C32297) * C2175) *
               C33783 +
           ((C23058 - (C23057 + C23056) + C23059) * C2173 +
            (C23062 - (C23061 + C23060) + C23063) * C2174 +
            (C32298 - (C32299 + C32300) + C32301) * C2175) *
               C50831) *
              C50635 * C395 +
          ((C23088 * C2173 + C23089 * C2174 +
            (C32300 + C32299 - C32298 - C32301) * C2175) *
               C33783 +
           ((C23066 + C23065 - C23064 - C23067) * C2173 +
            (C23071 + C23070 - C23086 - C23087) * C2174 +
            (C23080 * C903 + C23081 * C898 -
             (C19772 * C21289 + C50610 * C21291) * C904 -
             (C19772 * C21290 + C50610 * C21292) * C50705) *
                C2175) *
               C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C50755 * C39117 +
           (C23048 + C23049 - C23050 - C23051) * C50755 * C39118 +
           C23088 * C50755 * C39119 +
           (C23066 + C23065 - C23064 - C23067) * C50755 * C39120) *
              C900 +
          ((C19912 * C904 -
            ((C19772 * C134 + C50610 * C144) * C898 +
             (C19772 * C123 + C50610 * C130) * C903) +
            C19913 * C50705) *
               C50755 * C39117 +
           (C23433 - (C23434 + C23435) + C23436) * C50755 * C39118 +
           (C23441 - (C23442 + C23443) + C23444) * C50755 * C39119 +
           (C22074 * C904 - (C22073 * C898 + C22072 * C903) + C22075 * C50705) *
               C50755 * C39120) *
              C901 +
          (((C19772 * C124 + C50610 * C131) * C903 +
            (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
            C20129 * C50705) *
               C50755 * C39117 +
           (C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
               C50755 * C39118 +
           (C22422 * C903 + C22423 * C898 - C22260 * C904 - C22261 * C50705) *
               C50755 * C39119 +
           (C39532 * C903 + C39533 * C898 -
            (C19772 * C5983 + C50610 * C5984) * C904 -
            (C19772 * C5985 + C50610 * C5986) * C50705) *
               C50755 * C39120) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C19772 * C122 + C50610 * C129) * C976 +
           (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
           C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
           C19909 * C974) *
              C50755 * C39117 +
          (C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
           C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
              C50755 * C39118 +
          (C22064 * C976 + C22065 * C971 - C20686 * C977 - C20687 * C972 +
           C20688 * C978 + C20689 * C973 - C20690 * C979 - C20691 * C974) *
              C50755 * C39119 +
          (C22079 * C976 + C22078 * C971 - C22077 * C977 - C22076 * C972 +
           C23080 * C978 + C23081 * C973 -
           (C19772 * C21289 + C50610 * C21291) * C979 -
           (C19772 * C21290 + C50610 * C21292) * C974) *
              C50755 * C39120) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C50755 * C39117 +
           (C23048 + C23049 - C23050 - C23051) * C50755 * C39118 +
           C39932 * C39119 + C39940 * C39120) *
              C50635 * C394 +
          ((C23050 - (C23049 + C23048) + C23051) * C50755 * C39117 +
           (C23058 - (C23057 + C23056) + C23059) * C50755 * C39118 +
           (C23064 - (C23065 + C23066) + C23067) * C50755 * C39119 +
           (C39934 - (C39935 + C39936) + C39937) * C50755 * C39120) *
              C50635 * C395 +
          (C39932 * C39117 + C39940 * C39118 +
           (C39936 + C39935 - C39934 - C39937) * C50755 * C39119 +
           ((C19772 * C7296 + C50610 * C7300) * C903 +
            (C19772 * C7298 + C50610 * C7302) * C898 -
            (C19772 * C24032 + C50610 * C24034) * C904 -
            (C19772 * C24033 + C50610 * C24035) * C50705) *
               C50755 * C39120) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C903 +
              (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
              C19905 * C50705) *
                 C2173 +
             (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                 C2174 +
             (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                 C2175) *
                C33783 +
            ((C23048 + C23049 - C23050 - C23051) * C2173 +
             (C23052 + C23053 - C23054 - C23055) * C2174 +
             (C32294 + C32295 - C32296 - C32297) * C2175) *
                C50831) *
               C50888 +
           (((C19912 * C904 -
              ((C19772 * C134 + C50610 * C144) * C898 +
               (C19772 * C123 + C50610 * C130) * C903) +
              C19913 * C50705) *
                 C2173 +
             (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
              C19915 * C50705) *
                 C2174 +
             (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
              C19917 * C50705) *
                 C2175) *
                C33783 +
            ((C23433 - (C23434 + C23435) + C23436) * C2173 +
             (C23437 - (C23438 + C23439) + C23440) * C2174 +
             (C32642 - (C32643 + C32644) + C32645) * C2175) *
                C50831) *
               C50640) *
              C50897 +
          ((((C23050 - (C23049 + C23048) + C23051) * C2173 +
             (C23054 - (C23053 + C23052) + C23055) * C2174 +
             (C32296 - (C32295 + C32294) + C32297) * C2175) *
                C33783 +
            ((C23058 - (C23057 + C23056) + C23059) * C2173 +
             (C23062 - (C23061 + C23060) + C23063) * C2174 +
             (C32298 - (C32299 + C32300) + C32301) * C2175) *
                C50831) *
               C50888 +
           (((C23435 + C23434 - C23433 - C23436) * C2173 +
             (C23439 + C23438 - C23437 - C23440) * C2174 +
             (C32644 + C32643 - C32642 - C32645) * C2175) *
                C33783 +
            ((C23443 + C23442 - C23441 - C23444) * C2173 +
             (C23447 + C23446 - C23445 - C23448) * C2174 +
             (C21874 * C903 + C21875 * C898 -
              (C19772 * C3552 + C50610 * C3554) * C904 -
              (C19772 * C3556 + C50610 * C3558) * C50705) *
                 C2175) *
                C50831) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C903 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C898 -
             (C17186 + C17187 + C17188) * C904 -
             (C17189 + C17190 + C17191) * C50705) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C903 +
             (C34129 + C34130 + C34131) * C898 -
             (C17886 + C17885 + C17884) * C904 -
             (C17889 + C17888 + C17887) * C50705) *
                C50755 * C50831) *
               C50888 +
           (((C17198 + C17199 + C17200) * C904 -
             ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
               C16988 * C134 + C16983 * C144) *
                  C898 +
              (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
               C16988 * C123 + C16983 * C130) *
                  C903) +
             (C17201 + C17202 + C17203) * C50705) *
                C50755 * C33783 +
            ((C17892 + C17891 + C17890) * C904 -
             ((C34132 + C34133 + C34134) * C898 +
              (C34135 + C34136 + C34137) * C903) +
             (C17895 + C17894 + C17893) * C50705) *
                C50755 * C50831) *
               C50640) *
              C50897 +
          ((((C17884 + C17885 + C17886) * C904 -
             ((C34131 + C34130 + C34129) * C898 +
              (C34128 + C34127 + C34126) * C903) +
             (C17887 + C17888 + C17889) * C50705) *
                C50755 * C33783 +
            ((C18318 + C18317 + C18316) * C904 -
             ((C34144 + C34145 + C34146) * C898 +
              (C34147 + C34148 + C34149) * C903) +
             (C18321 + C18320 + C18319) * C50705) *
                C50755 * C50831) *
               C50888 +
           (((C34137 + C34136 + C34135) * C903 +
             (C34134 + C34133 + C34132) * C898 -
             (C17890 + C17891 + C17892) * C904 -
             (C17893 + C17894 + C17895) * C50705) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C903 +
             (C34141 + C34142 + C34143) * C898 -
             (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
              C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                 C904 -
             (C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
              C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                 C50705) *
                C50755 * C50831) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C50755 * C39117 +
            (C23048 + C23049 - C23050 - C23051) * C50755 * C39118 +
            C39932 * C39119 + C39940 * C39120) *
               C50888 +
           ((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C50755 * C39117 +
            (C23433 - (C23434 + C23435) + C23436) * C50755 * C39118 +
            (C23441 - (C23442 + C23443) + C23444) * C50755 * C39119 +
            (C40169 - (C40170 + C40171) + C40172) * C50755 * C39120) *
               C50640) *
              C50897 +
          (((C23050 - (C23049 + C23048) + C23051) * C50755 * C39117 +
            (C23058 - (C23057 + C23056) + C23059) * C50755 * C39118 +
            (C23064 - (C23065 + C23066) + C23067) * C50755 * C39119 +
            (C39934 - (C39935 + C39936) + C39937) * C50755 * C39120) *
               C50888 +
           ((C23435 + C23434 - C23433 - C23436) * C50755 * C39117 +
            (C23443 + C23442 - C23441 - C23444) * C50755 * C39118 +
            (C40171 + C40170 - C40169 - C40172) * C50755 * C39119 +
            (C39328 * C903 + C39329 * C898 -
             (C19772 * C6389 + C50610 * C6391) * C904 -
             (C19772 * C6393 + C50610 * C6395) * C50705) *
                C50755 * C39120) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
            C16990 * C124 + C16985 * C131) *
               C976 +
           (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
            C16990 * C135 + C16985 * C145) *
               C971 -
           (C17186 + C17187 + C17188) * C977 -
           (C17189 + C17190 + C17191) * C972 +
           (C17192 + C17193 + C17194) * C978 +
           (C17195 + C17196 + C17197) * C973 -
           (C18152 + C18153 + C18154) * C979 -
           (C18155 + C18156 + C18157) * C974) *
              C50755 * C33783 +
          ((C34126 + C34127 + C34128) * C976 +
           (C34129 + C34130 + C34131) * C971 -
           (C17886 + C17885 + C17884) * C977 -
           (C17889 + C17888 + C17887) * C972 +
           (C18822 + C18821 + C18820) * C978 +
           (C18825 + C18824 + C18823) * C973 -
           (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 + C16984 * C3084 +
            C16988 * C3080 + C16983 * C3083) *
               C979 -
           (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 + C16984 * C3090 +
            C16988 * C3085 + C16983 * C3089) *
               C974) *
              C50755 * C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C903 +
            (C34129 + C34130 + C34131) * C898 -
            (C17886 + C17885 + C17884) * C904 -
            (C17889 + C17888 + C17887) * C50705) *
               C50755 * C50831) *
              C900 +
          (((C17198 + C17199 + C17200) * C904 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C898 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C903) +
            (C17201 + C17202 + C17203) * C50705) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C904 -
            ((C34132 + C34133 + C34134) * C898 +
             (C34135 + C34136 + C34137) * C903) +
            (C17895 + C17894 + C17893) * C50705) *
               C50755 * C50831) *
              C901 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C903 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C898 -
            (C17514 + C17515 + C17516) * C904 -
            (C17517 + C17518 + C17519) * C50705) *
               C50755 * C33783 +
           ((C34454 + C34455 + C34456) * C903 +
            (C34457 + C34458 + C34459) * C898 -
            (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
             C16988 * C782 + C16983 * C787) *
                C904 -
            (C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
             C16988 * C791 + C16983 * C797) *
                C50705) *
               C50755 * C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C2173 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C2174 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C2175) *
               C33783 +
           ((C23048 + C23049 - C23050 - C23051) * C2173 +
            (C23052 + C23053 - C23054 - C23055) * C2174 +
            (C32294 + C32295 - C32296 - C32297) * C2175) *
               C50831) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C2173 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C2174 +
            (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
             C19917 * C50705) *
                C2175) *
               C33783 +
           ((C23433 - (C23434 + C23435) + C23436) * C2173 +
            (C23437 - (C23438 + C23439) + C23440) * C2174 +
            (C32642 - (C32643 + C32644) + C32645) * C2175) *
               C50831) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C2173 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C2174 +
            (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
                C2175) *
               C33783 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C2173 +
            (C22258 * C903 + C22259 * C898 - C31552 * C904 - C31553 * C50705) *
                C2174 +
            (C31552 * C903 + C31553 * C898 -
             (C19772 * C3082 + C50610 * C3087) * C904 -
             (C19772 * C3088 + C50610 * C3091) * C50705) *
                C2175) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C2173 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C2174 +
           (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
            C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
               C2175) *
              C33783 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C2173 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C2174 +
           (C20388 * C976 + C20389 * C971 - C20390 * C977 - C20391 * C972 +
            C21026 * C978 + C21027 * C973 -
            (C19772 * C21017 + C50610 * C21018) * C979 -
            (C19772 * C21019 + C50610 * C21020) * C974) *
               C2175) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C903 +
            (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
            C19905 * C50705) *
               C50755 * C39117 +
           (C23048 + C23049 - C23050 - C23051) * C50755 * C39118 +
           C23088 * C50755 * C39119 +
           (C23066 + C23065 - C23064 - C23067) * C50755 * C39120) *
              C900 +
          ((C19912 * C904 -
            ((C19772 * C134 + C50610 * C144) * C898 +
             (C19772 * C123 + C50610 * C130) * C903) +
            C19913 * C50705) *
               C50755 * C39117 +
           (C23433 - (C23434 + C23435) + C23436) * C50755 * C39118 +
           (C23441 - (C23442 + C23443) + C23444) * C50755 * C39119 +
           (C22074 * C904 - (C22073 * C898 + C22072 * C903) + C22075 * C50705) *
               C50755 * C39120) *
              C901 +
          (((C19772 * C124 + C50610 * C131) * C903 +
            (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
            C20129 * C50705) *
               C50755 * C39117 +
           (C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
               C50755 * C39118 +
           (C22422 * C903 + C22423 * C898 - C22260 * C904 - C22261 * C50705) *
               C50755 * C39119 +
           (C39532 * C903 + C39533 * C898 -
            (C19772 * C5983 + C50610 * C5984) * C904 -
            (C19772 * C5985 + C50610 * C5986) * C50705) *
               C50755 * C39120) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19772 * C122 + C50610 * C129) * C976 +
           (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
           C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
           C19909 * C974) *
              C50755 * C39117 +
          (C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
           C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
              C50755 * C39118 +
          (C22064 * C976 + C22065 * C971 - C20686 * C977 - C20687 * C972 +
           C20688 * C978 + C20689 * C973 - C20690 * C979 - C20691 * C974) *
              C50755 * C39119 +
          (C22079 * C976 + C22078 * C971 - C22077 * C977 - C22076 * C972 +
           C23080 * C978 + C23081 * C973 -
           (C19772 * C21289 + C50610 * C21291) * C979 -
           (C19772 * C21290 + C50610 * C21292) * C974) *
              C50755 * C39120) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[190] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C2173 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C2174 +
                      (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                       C19909 * C50705) *
                          C2175) *
                         C33783 +
                     ((C22622 + C22623 - C22624 - C22625) * C2173 +
                      (C22626 + C22627 - C22628 - C22629) * C2174 +
                      (C31896 + C31897 - C31898 - C31899) * C2175) *
                         C50831) *
                        C50888 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C2173 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C2174 +
                      (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                       C19917 * C50705) *
                          C2175) *
                         C33783 +
                     ((C22638 - (C22639 + C22640) + C22641) * C2173 +
                      (C22642 - (C22643 + C22644) + C22645) * C2174 +
                      (C31900 - (C31901 + C31902) + C31903) * C2175) *
                         C50831) *
                        C50640) *
                       C1558 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C2173 +
                      (C22628 - (C22627 + C22626) + C22629) * C2174 +
                      (C31898 - (C31897 + C31896) + C31899) * C2175) *
                         C33783 +
                     ((C22632 - (C22631 + C22630) + C22633) * C2173 +
                      (C22636 - (C22635 + C22634) + C22637) * C2174 +
                      (C33682 - (C33683 + C33684) + C33685) * C2175) *
                         C50831) *
                        C50888 +
                    (((C22640 + C22639 - C22638 - C22641) * C2173 +
                      (C22644 + C22643 - C22642 - C22645) * C2174 +
                      (C31902 + C31901 - C31900 - C31903) * C2175) *
                         C33783 +
                     ((C22648 + C22647 - C22646 - C22649) * C2173 +
                      (C22652 + C22651 - C22650 - C22653) * C2174 +
                      (C21874 * C540 + C21875 * C50896 -
                       (C19772 * C3552 + C50610 * C3554) * C541 -
                       (C19772 * C3556 + C50610 * C3558) * C50705) *
                          C2175) *
                         C50831) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C540 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50896 -
                      (C17186 + C17187 + C17188) * C541 -
                      (C17189 + C17190 + C17191) * C50705) *
                         C50755 * C33783 +
                     ((C34126 + C34127 + C34128) * C540 +
                      (C34129 + C34130 + C34131) * C50896 -
                      (C17886 + C17885 + C17884) * C541 -
                      (C17889 + C17888 + C17887) * C50705) *
                         C50755 * C50831) *
                        C50888 +
                    (((C17198 + C17199 + C17200) * C541 -
                      ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                        C16984 * C145 + C16988 * C134 + C16983 * C144) *
                           C50896 +
                       (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                        C16984 * C131 + C16988 * C123 + C16983 * C130) *
                           C540) +
                      (C17201 + C17202 + C17203) * C50705) *
                         C50755 * C33783 +
                     ((C17892 + C17891 + C17890) * C541 -
                      ((C34132 + C34133 + C34134) * C50896 +
                       (C34135 + C34136 + C34137) * C540) +
                      (C17895 + C17894 + C17893) * C50705) *
                         C50755 * C50831) *
                        C50640) *
                       C1558 +
                   ((((C17884 + C17885 + C17886) * C541 -
                      ((C34131 + C34130 + C34129) * C50896 +
                       (C34128 + C34127 + C34126) * C540) +
                      (C17887 + C17888 + C17889) * C50705) *
                         C50755 * C33783 +
                     ((C18318 + C18317 + C18316) * C541 -
                      ((C34144 + C34145 + C34146) * C50896 +
                       (C34147 + C34148 + C34149) * C540) +
                      (C18321 + C18320 + C18319) * C50705) *
                         C50755 * C50831) *
                        C50888 +
                    (((C34137 + C34136 + C34135) * C540 +
                      (C34134 + C34133 + C34132) * C50896 -
                      (C17890 + C17891 + C17892) * C541 -
                      (C17893 + C17894 + C17895) * C50705) *
                         C50755 * C33783 +
                     ((C34138 + C34139 + C34140) * C540 +
                      (C34141 + C34142 + C34143) * C50896 -
                      (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
                       C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                          C541 -
                      (C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
                       C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                          C50705) *
                         C50755 * C50831) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C50755 * C39117 +
                     (C22622 + C22623 - C22624 - C22625) * C50755 * C39118 +
                     C24550 * C50755 * C39119 +
                     (C24542 + C24541 - C24540 - C24543) * C50755 * C39120) *
                        C50888 +
                    ((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C50755 * C39117 +
                     (C22638 - (C22639 + C22640) + C22641) * C50755 * C39118 +
                     (C22646 - (C22647 + C22648) + C22649) * C50755 * C39119 +
                     (C39666 - (C39667 + C39668) + C39669) * C50755 * C39120) *
                        C50640) *
                       C1558 +
                   (((C22624 - (C22623 + C22622) + C22625) * C50755 * C39117 +
                     (C22632 - (C22631 + C22630) + C22633) * C50755 * C39118 +
                     (C24540 - (C24541 + C24542) + C24543) * C50755 * C39119 +
                     (C23082 * C541 - (C24048 * C50896 + C24047 * C540) +
                      C23083 * C50705) *
                         C50755 * C39120) *
                        C50888 +
                    ((C22640 + C22639 - C22638 - C22641) * C50755 * C39117 +
                     (C22648 + C22647 - C22646 - C22649) * C50755 * C39118 +
                     (C39668 + C39667 - C39666 - C39669) * C50755 * C39119 +
                     (C39328 * C540 + C39329 * C50896 -
                      (C19772 * C6389 + C50610 * C6391) * C541 -
                      (C19772 * C6393 + C50610 * C6395) * C50705) *
                         C50755 * C39120) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[191] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C2173 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C2174 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C2175) *
                        C33783 +
                    ((C22622 + C22623 - C22624 - C22625) * C2173 +
                     (C22626 + C22627 - C22628 - C22629) * C2174 +
                     (C31896 + C31897 - C31898 - C31899) * C2175) *
                        C50831) *
                       C50635 * C50943 +
                   (((C22624 - (C22623 + C22622) + C22625) * C2173 +
                     (C22628 - (C22627 + C22626) + C22629) * C2174 +
                     (C31898 - (C31897 + C31896) + C31899) * C2175) *
                        C33783 +
                    ((C22632 - (C22631 + C22630) + C22633) * C2173 +
                     (C22636 - (C22635 + C22634) + C22637) * C2174 +
                     (C33682 - (C33683 + C33684) + C33685) * C2175) *
                        C50831) *
                       C50635 * C50944 +
                   ((C24550 * C2173 + C24551 * C2174 +
                     (C33684 + C33683 - C33682 - C33685) * C2175) *
                        C33783 +
                    ((C24542 + C24541 - C24540 - C24543) * C2173 +
                     (C24546 + C24545 - C24544 - C24547) * C2174 +
                     (C23080 * C540 + C23081 * C50896 -
                      (C19772 * C21289 + C50610 * C21291) * C541 -
                      (C19772 * C21290 + C50610 * C21292) * C50705) *
                         C2175) *
                        C50831) *
                       C50635 * C1974)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C540 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C50896 -
                     (C17186 + C17187 + C17188) * C541 -
                     (C17189 + C17190 + C17191) * C50705) *
                        C50755 * C33783 +
                    ((C34126 + C34127 + C34128) * C540 +
                     (C34129 + C34130 + C34131) * C50896 -
                     (C17886 + C17885 + C17884) * C541 -
                     (C17889 + C17888 + C17887) * C50705) *
                        C50755 * C50831) *
                       C50635 * C50943 +
                   (((C17884 + C17885 + C17886) * C541 -
                     ((C34131 + C34130 + C34129) * C50896 +
                      (C34128 + C34127 + C34126) * C540) +
                     (C17887 + C17888 + C17889) * C50705) *
                        C50755 * C33783 +
                    ((C18318 + C18317 + C18316) * C541 -
                     ((C34144 + C34145 + C34146) * C50896 +
                      (C34147 + C34148 + C34149) * C540) +
                     (C18321 + C18320 + C18319) * C50705) *
                        C50755 * C50831) *
                       C50635 * C50944 +
                   (((C34149 + C34148 + C34147) * C540 +
                     (C34146 + C34145 + C34144) * C50896 -
                     (C18316 + C18317 + C18318) * C541 -
                     (C18319 + C18320 + C18321) * C50705) *
                        C50755 * C33783 +
                    ((C35932 + C35933 + C35934) * C540 +
                     (C35935 + C35936 + C35937) * C50896 -
                     (C16990 * C5983 + C16985 * C5984 + C16989 * C4484 +
                      C16984 * C4492 + C16988 * C4485 + C16983 * C4493) *
                         C541 -
                     (C16990 * C5985 + C16985 * C5986 + C16989 * C4490 +
                      C16984 * C4496 + C16988 * C4491 + C16983 * C4497) *
                         C50705) *
                        C50755 * C50831) *
                       C50635 * C1974)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C19772 * C122 + C50610 * C129) * C540 +
                     (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                     C19905 * C50705) *
                        C50755 * C39117 +
                    (C22622 + C22623 - C22624 - C22625) * C50755 * C39118 +
                    C40886 * C39119 + C40894 * C39120) *
                       C50635 * C50943 +
                   ((C22624 - (C22623 + C22622) + C22625) * C50755 * C39117 +
                    (C22632 - (C22631 + C22630) + C22633) * C50755 * C39118 +
                    (C24540 - (C24541 + C24542) + C24543) * C50755 * C39119 +
                    (C40888 - (C40889 + C40890) + C40891) * C50755 * C39120) *
                       C50635 * C50944 +
                   (C40886 * C39117 + C40894 * C39118 +
                    (C40890 + C40889 - C40888 - C40891) * C50755 * C39119 +
                    (C40556 * C540 + C40557 * C50896 -
                     (C19772 * C24032 + C50610 * C24034) * C541 -
                     (C19772 * C24033 + C50610 * C24035) * C50705) *
                        C50755 * C39120) *
                       C50635 * C1974)) /
                     (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                  C16984 * C130 + C16990 * C124 + C16985 * C131) *
                     C121 +
                 (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                  C16984 * C144 + C16990 * C135 + C16985 * C145) *
                     C50653) *
                    C50755 * C33783 +
                ((C34126 + C34127 + C34128) * C121 +
                 (C34129 + C34130 + C34131) * C50653) *
                    C50755 * C50831) *
                   C900 -
               (((C34132 + C34133 + C34134) * C50653 +
                 (C34135 + C34136 + C34137) * C121) *
                    C50755 * C50831 +
                ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                  C16984 * C145 + C16988 * C134 + C16983 * C144) *
                     C50653 +
                 (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                  C16984 * C131 + C16988 * C123 + C16983 * C130) *
                     C121) *
                    C50755 * C33783) *
                   C901 +
               (((C16988 * C124 + C16983 * C131 + C16989 * C125 +
                  C16984 * C132 + C16990 * C126 + C16985 * C138) *
                     C121 +
                 (C16988 * C135 + C16983 * C145 + C16989 * C136 +
                  C16984 * C146 + C16990 * C137 + C16985 * C147) *
                     C50653) *
                    C50755 * C33783 +
                ((C34454 + C34455 + C34456) * C121 +
                 (C34457 + C34458 + C34459) * C50653) *
                    C50755 * C50831) *
                   C902) *
                  C1558 +
              ((((C34137 + C34136 + C34135) * C121 +
                 (C34134 + C34133 + C34132) * C50653) *
                    C50755 * C33783 +
                ((C34138 + C34139 + C34140) * C121 +
                 (C34141 + C34142 + C34143) * C50653) *
                    C50755 * C50831) *
                   C901 -
               (((C34144 + C34145 + C34146) * C50653 +
                 (C34147 + C34148 + C34149) * C121) *
                    C50755 * C50831 +
                ((C34131 + C34130 + C34129) * C50653 +
                 (C34128 + C34127 + C34126) * C121) *
                    C50755 * C33783) *
                   C900 -
               (((C16990 * C425 + C16985 * C436 + C16989 * C424 +
                  C16984 * C435 + C16988 * C423 + C16983 * C434) *
                     C50653 +
                 (C16990 * C406 + C16985 * C426 + C16989 * C405 +
                  C16984 * C420 + C16988 * C404 + C16983 * C419) *
                     C121) *
                    C50755 * C50831 +
                ((C34459 + C34458 + C34457) * C50653 +
                 (C34456 + C34455 + C34454) * C121) *
                    C50755 * C33783) *
                   C902) *
                  C50733) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
                 C16990 * C124 + C16985 * C131) *
                    C253 +
                (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
                 C16990 * C135 + C16985 * C145) *
                    C248 -
                (C17186 + C17187 + C17188) * C254 -
                (C17189 + C17190 + C17191) * C249 +
                (C17192 + C17193 + C17194) * C255 +
                (C17195 + C17196 + C17197) * C250) *
                   C50755 * C33783 +
               ((C34126 + C34127 + C34128) * C253 +
                (C34129 + C34130 + C34131) * C248 -
                (C17886 + C17885 + C17884) * C254 -
                (C17889 + C17888 + C17887) * C249 +
                (C18822 + C18821 + C18820) * C255 +
                (C18825 + C18824 + C18823) * C250) *
                   C50755 * C50831) *
                  C50635 * C1558 +
              (((C17884 + C17885 + C17886) * C254 -
                ((C34131 + C34130 + C34129) * C248 +
                 (C34128 + C34127 + C34126) * C253) +
                (C17887 + C17888 + C17889) * C249 -
                (C18820 + C18821 + C18822) * C255 -
                (C18823 + C18824 + C18825) * C250) *
                   C50755 * C33783 +
               ((C18318 + C18317 + C18316) * C254 -
                ((C34144 + C34145 + C34146) * C248 +
                 (C34147 + C34148 + C34149) * C253) +
                (C18321 + C18320 + C18319) * C249 -
                (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 +
                 C16984 * C2562 + C16988 * C2558 + C16983 * C2561) *
                    C255 -
                (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 +
                 C16984 * C2568 + C16988 * C2563 + C16983 * C2567) *
                    C250) *
                   C50755 * C50831) *
                  C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C121 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50653) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C121 +
            (C34129 + C34130 + C34131) * C50653) *
               C50755 * C50831) *
              C50635 * C1724 -
          (((C34144 + C34145 + C34146) * C50653 +
            (C34147 + C34148 + C34149) * C121) *
               C50755 * C50831 +
           ((C34131 + C34130 + C34129) * C50653 +
            (C34128 + C34127 + C34126) * C121) *
               C50755 * C33783) *
              C50635 * C1725 +
          (((C34149 + C34148 + C34147) * C121 +
            (C34146 + C34145 + C34144) * C50653) *
               C50755 * C33783 +
           ((C35932 + C35933 + C35934) * C121 +
            (C35935 + C35936 + C35937) * C50653) *
               C50755 * C50831) *
              C50635 * C1726 -
          (((C16990 * C5384 + C16985 * C5388 + C16989 * C5383 + C16984 * C5387 +
             C16988 * C5382 + C16983 * C5386) *
                C50653 +
            (C16990 * C5379 + C16985 * C5385 + C16989 * C5378 + C16984 * C5381 +
             C16988 * C5377 + C16983 * C5380) *
                C121) *
               C50755 * C50831 +
           ((C35937 + C35936 + C35935) * C50653 +
            (C35934 + C35933 + C35932) * C121) *
               C50755 * C33783) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C900 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C2173 +
             (C20128 * C121 + C20129 * C50653) * C2174 +
             (C20130 * C121 + C20131 * C50653) * C2175) *
                C33783 +
            ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
             (C31700 + C31701) * C2175) *
                C50831) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C901 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C900 -
           ((((C19772 * C2565 + C50610 * C2569) * C50653 +
              (C19772 * C2560 + C50610 * C2566) * C121) *
                 C2175 +
             (C22419 + C22418) * C2174 + (C22427 + C22426) * C2173) *
                C50831 +
            ((C31701 + C31700) * C2175 + (C22413 + C22412) * C2174 +
             (C22425 + C22424) * C2173) *
                C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C2173 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C2174 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C2175) *
               C33783 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C2173 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C2174 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C2175) *
               C50831) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C2173 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C2174 +
            (C33092 - (C33091 + C33090) + C33093 - C33094 - C33095) * C2175) *
               C33783 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C2173 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C2174 +
            (C20690 * C254 - (C20689 * C248 + C20688 * C253) + C20691 * C249 -
             (C19772 * C20669 + C50610 * C20670) * C255 -
             (C19772 * C20671 + C50610 * C20672) * C250) *
                C2175) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C2173 +
            (C19904 * C121 + C19905 * C50653) * C2174 +
            (C19906 * C121 + C19907 * C50653) * C2175) *
               C33783 +
           ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
            (C31394 + C31395) * C2175) *
               C50831) *
              C50635 * C1724 -
          (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
            (C22083 + C22082) * C2173) *
               C50831 +
           ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
            (C22081 + C22080) * C2173) *
               C33783) *
              C50635 * C1725 +
          ((C22098 * C2173 + C22066 * C2174 + (C31401 + C31400) * C2175) *
               C33783 +
           ((C22097 + C22096) * C2173 + (C22095 + C22094) * C2174 +
            (C33194 + C33195) * C2175) *
               C50831) *
              C50635 * C1726 -
          ((((C19772 * C23045 + C50610 * C23046) * C50653 +
             (C19772 * C23043 + C50610 * C23044) * C121) *
                C2175 +
            (C24044 + C24043) * C2174 + (C24051 + C24050) * C2173) *
               C50831 +
           ((C33195 + C33194) * C2175 + C24037 * C2174 + C24038 * C2173) *
               C33783) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50755 * C39117 +
            (C22080 + C22081) * C50755 * C39118 + C39318 * C39119 +
            C39326 * C39120) *
               C900 -
           (C39327 * C39120 + C39321 * C39119 +
            (C22088 + C22089) * C50755 * C39118 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50755 * C39117) *
               C901 +
           (((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C50755 * C39117 +
            (C22424 + C22425) * C50755 * C39118 +
            (C22426 + C22427) * C50755 * C39119 +
            (C39534 + C39535) * C50755 * C39120) *
               C902) *
              C1558 +
          (((C22089 + C22088) * C50755 * C39117 +
            (C22087 + C22086) * C50755 * C39118 +
            (C22090 + C22091) * C50755 * C39119 +
            (C39330 + C39331) * C50755 * C39120) *
               C901 -
           ((C24051 + C24050) * C50755 * C39120 + C24038 * C50755 * C39119 +
            (C22083 + C22082) * C50755 * C39118 +
            (C22081 + C22080) * C50755 * C39117) *
               C900 -
           (((C19772 * C5384 + C50610 * C5388) * C50653 +
             (C19772 * C5379 + C50610 * C5385) * C121) *
                C50755 * C39120 +
            (C39535 + C39534) * C50755 * C39119 +
            (C22427 + C22426) * C50755 * C39118 +
            (C22425 + C22424) * C50755 * C39117) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C50755 * C39117 +
           (C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50755 *
               C39118 +
           (C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C50755 *
               C39119 +
           (C40473 + C40474 - C40475 - C40476 + C40477 + C40478) * C50755 *
               C39120) *
              C50635 * C1558 +
          ((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C50755 *
               C39117 +
           (C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C50755 *
               C39118 +
           (C40475 - (C40474 + C40473) + C40476 - C40477 - C40478) * C50755 *
               C39119 +
           (C23082 * C254 - (C24048 * C248 + C24047 * C253) + C23083 * C249 -
            (C19772 * C23043 + C50610 * C23044) * C255 -
            (C19772 * C23045 + C50610 * C23046) * C250) *
               C50755 * C39120) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C121 +
            (C19772 * C133 + C50610 * C143) * C50653) *
               C50755 * C39117 +
           (C22080 + C22081) * C50755 * C39118 + C39318 * C39119 +
           C39326 * C39120) *
              C50635 * C1724 -
          (C40555 * C39120 + C40550 * C39119 +
           (C22083 + C22082) * C50755 * C39118 +
           (C22081 + C22080) * C50755 * C39117) *
              C50635 * C1725 +
          (C39318 * C39117 + C39326 * C39118 +
           (C24050 + C24051) * C50755 * C39119 +
           (C40558 + C40559) * C50755 * C39120) *
              C50635 * C1726 -
          (((C19772 * C40545 + C50610 * C40547) * C50653 +
            (C19772 * C40544 + C50610 * C40546) * C121) *
               C50755 * C39120 +
           (C40559 + C40558) * C50755 * C39119 + C40555 * C39118 +
           C40550 * C39117) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C50888 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C50640) *
              C50943 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C50640 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C50888) *
              C50944 +
          (((C22098 * C2173 + C22066 * C2174 + (C31401 + C31400) * C2175) *
                C33783 +
            ((C22097 + C22096) * C2173 + (C22095 + C22094) * C2174 +
             (C33194 + C33195) * C2175) *
                C50831) *
               C50888 -
           ((((C19772 * C4486 + C50610 * C4494) * C50653 +
              (C19772 * C4482 + C50610 * C4488) * C121) *
                 C2175 +
             (C22093 + C22092) * C2174 + (C22091 + C22090) * C2173) *
                C50831 +
            ((C31399 + C31398) * C2175 + C22067 * C2174 + C22099 * C2173) *
                C33783) *
               C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C121 +
             (C34129 + C34130 + C34131) * C50653) *
                C50755 * C50831) *
               C50888 -
           (((C34132 + C34133 + C34134) * C50653 +
             (C34135 + C34136 + C34137) * C121) *
                C50755 * C50831 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C50755 * C33783) *
               C50640) *
              C50943 +
          ((((C34137 + C34136 + C34135) * C121 +
             (C34134 + C34133 + C34132) * C50653) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C121 +
             (C34141 + C34142 + C34143) * C50653) *
                C50755 * C50831) *
               C50640 -
           (((C34144 + C34145 + C34146) * C50653 +
             (C34147 + C34148 + C34149) * C121) *
                C50755 * C50831 +
            ((C34131 + C34130 + C34129) * C50653 +
             (C34128 + C34127 + C34126) * C121) *
                C50755 * C33783) *
               C50888) *
              C50944 +
          ((((C34149 + C34148 + C34147) * C121 +
             (C34146 + C34145 + C34144) * C50653) *
                C50755 * C33783 +
            ((C35932 + C35933 + C35934) * C121 +
             (C35935 + C35936 + C35937) * C50653) *
                C50755 * C50831) *
               C50888 -
           (((C16990 * C1732 + C16985 * C1740 + C16989 * C1733 +
              C16984 * C1741 + C16988 * C1734 + C16983 * C1742) *
                 C50653 +
             (C16990 * C1728 + C16985 * C1736 + C16989 * C1729 +
              C16984 * C1737 + C16988 * C1730 + C16983 * C1738) *
                 C121) *
                C50755 * C50831 +
            ((C34143 + C34142 + C34141) * C50653 +
             (C34140 + C34139 + C34138) * C121) *
                C50755 * C33783) *
               C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50755 * C39117 +
            (C22080 + C22081) * C50755 * C39118 + C39318 * C39119 +
            C39326 * C39120) *
               C50888 -
           (C39327 * C39120 + C39321 * C39119 +
            (C22088 + C22089) * C50755 * C39118 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50755 * C39117) *
               C50640) *
              C50943 +
          (((C22089 + C22088) * C50755 * C39117 +
            (C22087 + C22086) * C50755 * C39118 +
            (C22090 + C22091) * C50755 * C39119 +
            (C39330 + C39331) * C50755 * C39120) *
               C50640 -
           (C40555 * C39120 + C40550 * C39119 +
            (C22083 + C22082) * C50755 * C39118 +
            (C22081 + C22080) * C50755 * C39117) *
               C50888) *
              C50944 +
          ((C39318 * C39117 + C39326 * C39118 +
            (C24050 + C24051) * C50755 * C39119 +
            (C40558 + C40559) * C50755 * C39120) *
               C50888 -
           (((C19772 * C7297 + C50610 * C7301) * C50653 +
             (C19772 * C7295 + C50610 * C7299) * C121) *
                C50755 * C39120 +
            (C39331 + C39330) * C50755 * C39119 + C39327 * C39118 +
            C39321 * C39117) *
               C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C253 +
            (C34129 + C34130 + C34131) * C248 -
            (C17886 + C17885 + C17884) * C254 -
            (C17889 + C17888 + C17887) * C249 +
            (C18822 + C18821 + C18820) * C255 +
            (C18825 + C18824 + C18823) * C250) *
               C50755 * C50831) *
              C50635 * C1558 +
          (((C17884 + C17885 + C17886) * C254 -
            ((C34131 + C34130 + C34129) * C248 +
             (C34128 + C34127 + C34126) * C253) +
            (C17887 + C17888 + C17889) * C249 -
            (C18820 + C18821 + C18822) * C255 -
            (C18823 + C18824 + C18825) * C250) *
               C50755 * C33783 +
           ((C18318 + C18317 + C18316) * C254 -
            ((C34144 + C34145 + C34146) * C248 +
             (C34147 + C34148 + C34149) * C253) +
            (C18321 + C18320 + C18319) * C249 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C255 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C250) *
               C50755 * C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C121 +
             (C34129 + C34130 + C34131) * C50653) *
                C50755 * C50831) *
               C900 -
           (((C34132 + C34133 + C34134) * C50653 +
             (C34135 + C34136 + C34137) * C121) *
                C50755 * C50831 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C50755 * C33783) *
               C901 +
           (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
              C16990 * C126 + C16985 * C138) *
                 C121 +
             (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
              C16990 * C137 + C16985 * C147) *
                 C50653) *
                C50755 * C33783 +
            ((C34454 + C34455 + C34456) * C121 +
             (C34457 + C34458 + C34459) * C50653) *
                C50755 * C50831) *
               C902) *
              C1558 +
          ((((C34137 + C34136 + C34135) * C121 +
             (C34134 + C34133 + C34132) * C50653) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C121 +
             (C34141 + C34142 + C34143) * C50653) *
                C50755 * C50831) *
               C901 -
           (((C34144 + C34145 + C34146) * C50653 +
             (C34147 + C34148 + C34149) * C121) *
                C50755 * C50831 +
            ((C34131 + C34130 + C34129) * C50653 +
             (C34128 + C34127 + C34126) * C121) *
                C50755 * C33783) *
               C900 -
           (((C16990 * C425 + C16985 * C436 + C16989 * C424 + C16984 * C435 +
              C16988 * C423 + C16983 * C434) *
                 C50653 +
             (C16990 * C406 + C16985 * C426 + C16989 * C405 + C16984 * C420 +
              C16988 * C404 + C16983 * C419) *
                 C121) *
                C50755 * C50831 +
            ((C34459 + C34458 + C34457) * C50653 +
             (C34456 + C34455 + C34454) * C121) *
                C50755 * C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C900 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C2173 +
             (C20128 * C121 + C20129 * C50653) * C2174 +
             (C20130 * C121 + C20131 * C50653) * C2175) *
                C33783 +
            ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
             (C31700 + C31701) * C2175) *
                C50831) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C901 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C900 -
           ((((C19772 * C2565 + C50610 * C2569) * C50653 +
              (C19772 * C2560 + C50610 * C2566) * C121) *
                 C2175 +
             (C22419 + C22418) * C2174 + (C22427 + C22426) * C2173) *
                C50831 +
            ((C31701 + C31700) * C2175 + (C22413 + C22412) * C2174 +
             (C22425 + C22424) * C2173) *
                C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C2173 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C2174 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C2175) *
               C33783 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C2173 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C2174 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C2175) *
               C50831) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C2173 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C2174 +
            (C33092 - (C33091 + C33090) + C33093 - C33094 - C33095) * C2175) *
               C33783 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C2173 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C2174 +
            (C20690 * C254 - (C20689 * C248 + C20688 * C253) + C20691 * C249 -
             (C19772 * C20669 + C50610 * C20670) * C255 -
             (C19772 * C20671 + C50610 * C20672) * C250) *
                C2175) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C50755 * C39117 +
            (C22080 + C22081) * C50755 * C39118 + C39318 * C39119 +
            C39326 * C39120) *
               C900 -
           (C39327 * C39120 + C39321 * C39119 +
            (C22088 + C22089) * C50755 * C39118 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C50755 * C39117) *
               C901 +
           (((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C50755 * C39117 +
            (C22424 + C22425) * C50755 * C39118 +
            (C22426 + C22427) * C50755 * C39119 +
            (C39534 + C39535) * C50755 * C39120) *
               C902) *
              C1558 +
          (((C22089 + C22088) * C50755 * C39117 +
            (C22087 + C22086) * C50755 * C39118 +
            (C22090 + C22091) * C50755 * C39119 +
            (C39330 + C39331) * C50755 * C39120) *
               C901 -
           ((C24051 + C24050) * C50755 * C39120 + C24038 * C50755 * C39119 +
            (C22083 + C22082) * C50755 * C39118 +
            (C22081 + C22080) * C50755 * C39117) *
               C900 -
           (((C19772 * C5384 + C50610 * C5388) * C50653 +
             (C19772 * C5379 + C50610 * C5385) * C121) *
                C50755 * C39120 +
            (C39535 + C39534) * C50755 * C39119 +
            (C22427 + C22426) * C50755 * C39118 +
            (C22425 + C22424) * C50755 * C39117) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C253 +
            (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
            C19905 * C249 + C19906 * C255 + C19907 * C250) *
               C50755 * C39117 +
           (C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C50755 *
               C39118 +
           (C23923 + C23924 - C23925 - C23926 + C23927 + C23928) * C50755 *
               C39119 +
           (C40473 + C40474 - C40475 - C40476 + C40477 + C40478) * C50755 *
               C39120) *
              C50635 * C1558 +
          ((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C50755 *
               C39117 +
           (C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C50755 *
               C39118 +
           (C40475 - (C40474 + C40473) + C40476 - C40477 - C40478) * C50755 *
               C39119 +
           (C23082 * C254 - (C24048 * C248 + C24047 * C253) + C23083 * C249 -
            (C19772 * C23043 + C50610 * C23044) * C255 -
            (C19772 * C23045 + C50610 * C23046) * C250) *
               C50755 * C39120) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C540 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50896 -
            (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
               C50755 * C50947 +
           ((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
            C28638 * C541 - C28639 * C50705) *
               C50755 * C50948 +
           (C44780 * C540 + C44781 * C50896 - C29167 * C541 - C29166 * C50705) *
               C50755 * C44486) *
              C50939 +
          (((C24866 + C24867) * C541 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50896 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C540) +
            (C24868 + C24869) * C50705) *
               C50755 * C50947 +
           (C28642 * C541 -
            ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
            C28643 * C50705) *
               C50755 * C50948 +
           ((C27960 + C27961) * C541 - (C44782 * C50896 + C44783 * C540) +
            (C27962 + C27963) * C50705) *
               C50755 * C44486) *
              C50940 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C540 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C50896 -
            (C25190 + C25191) * C541 - (C25192 + C25193) * C50705) *
               C50755 * C50947 +
           ((C28376 + C28377) * C540 + (C28378 + C28379) * C50896 -
            (C28170 + C28171) * C541 - (C28172 + C28173) * C50705) *
               C50755 * C50948 +
           ((C49768 * C404 + C50881 * C419 + C49761 * C405 + C50615 * C420) *
                C540 +
            (C49768 * C423 + C50881 * C434 + C49761 * C424 + C50615 * C435) *
                C50896 -
            (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
             C50881 * C1099) *
                C541 -
            (C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
             C50881 * C1107) *
                C50705) *
               C50755 * C44486) *
              C539) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C540 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50896 -
             (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                C50755 * C50947 +
            ((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
             C28638 * C541 - C28639 * C50705) *
                C50755 * C50948 +
            (C44780 * C540 + C44781 * C50896 - C29167 * C541 -
             C29166 * C50705) *
                C50755 * C44486) *
               C251 +
           (((C24866 + C24867) * C541 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50896 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C540) +
             (C24868 + C24869) * C50705) *
                C50755 * C50947 +
            (C28642 * C541 -
             ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
             C28643 * C50705) *
                C50755 * C50948 +
            ((C27960 + C27961) * C541 - (C44782 * C50896 + C44783 * C540) +
             (C27962 + C27963) * C50705) *
                C50755 * C44486) *
               C50640) *
              C50897 +
          (((C28640 * C541 -
             ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
             C28641 * C50705) *
                C50755 * C50947 +
            (C29164 * C541 -
             ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
             C29165 * C50705) *
                C50755 * C50948 +
            ((C29177 + C29176) * C541 -
             ((C30357 + C30356) * C50896 + (C30355 + C30354) * C540) +
             (C29179 + C29178) * C50705) *
                C50755 * C44486) *
               C251 +
           (((C27955 + C27954) * C540 + (C27953 + C27952) * C50896 -
             C28645 * C541 - C28644 * C50705) *
                C50755 * C50947 +
            ((C27956 + C27957) * C540 + (C27958 + C27959) * C50896 -
             (C27961 + C27960) * C541 - (C27963 + C27962) * C50705) *
                C50755 * C50948 +
            ((C44796 + C44797) * C540 + (C44798 + C44799) * C50896 -
             (C49761 * C5983 + C50615 * C5984 + C49768 * C4484 +
              C50881 * C4492) *
                 C541 -
             (C49761 * C5985 + C50615 * C5986 + C49768 * C4490 +
              C50881 * C4496) *
                 C50705) *
                C50755 * C44486) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C253 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C248 -
            (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
            C24878 * C255 + C24879 * C250) *
               C50755 * C50947 +
           ((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
            C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
               C50755 * C50948 +
           ((C27967 + C27966) * C253 + (C27965 + C27964) * C248 -
            C29167 * C254 - C29166 * C249 + (C26011 + C26010) * C255 +
            (C26013 + C26012) * C250) *
               C50755 * C44486) *
              C251 +
          (((C24866 + C24867) * C254 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C248 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C253) +
            (C24868 + C24869) * C249 - C24880 * C255 - C24881 * C250) *
               C50755 * C50947 +
           (C28642 * C254 -
            ((C27952 + C27953) * C248 + (C27954 + C27955) * C253) +
            C28643 * C249 - (C25582 + C25583) * C255 -
            (C25584 + C25585) * C250) *
               C50755 * C50948 +
           ((C27960 + C27961) * C254 -
            ((C27959 + C27958) * C248 + (C27957 + C27956) * C253) +
            (C27962 + C27963) * C249 -
            (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
             C50881 * C2562) *
                C255 -
            (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
             C50881 * C2568) *
                C250) *
               C50755 * C44486) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C121 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50653) *
               C50755 * C50947 +
           ((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50755 *
               C50948 +
           ((C27967 + C27966) * C121 + (C27965 + C27964) * C50653) * C50755 *
               C44486) *
              C112 -
          (((C27959 + C27958) * C50653 + (C27957 + C27956) * C121) * C50755 *
               C44486 +
           ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50755 *
               C50948 +
           ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                C50653 +
            (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                C121) *
               C50755 * C50947) *
              C113 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C121 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C50653) *
               C50755 * C50947 +
           ((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50755 *
               C50948 +
           ((C49768 * C404 + C50881 * C419 + C49761 * C405 + C50615 * C420) *
                C121 +
            (C49768 * C423 + C50881 * C434 + C49761 * C424 + C50615 * C435) *
                C50653) *
               C50755 * C44486) *
              C114 -
          (((C49761 * C425 + C50615 * C436 + C49768 * C424 + C50881 * C435) *
                C50653 +
            (C49761 * C406 + C50615 * C426 + C49768 * C405 + C50881 * C420) *
                C121) *
               C50755 * C44486 +
           ((C49761 * C414 + C50615 * C430 + C49768 * C413 + C50881 * C429) *
                C50653 +
            (C49761 * C400 + C50615 * C410 + C49768 * C399 + C50881 * C409) *
                C121) *
               C50755 * C50948 +
           ((C49761 * C137 + C50615 * C147 + C49768 * C136 + C50881 * C146) *
                C50653 +
            (C49761 * C126 + C50615 * C138 + C49768 * C125 + C50881 * C132) *
                C121) *
               C50755 * C50947) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C50947 +
            ((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50755 *
                C50948 +
            C44802 * C44486) *
               C251 -
           (C44803 * C44486 +
            ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50755 *
                C50948 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50755 * C50947) *
               C50640) *
              C394 +
          ((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50755 *
                C50947 +
            ((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50755 *
                C50948 +
            ((C44796 + C44797) * C121 + (C44798 + C44799) * C50653) * C50755 *
                C44486) *
               C50640 -
           (((C30357 + C30356) * C50653 + (C30355 + C30354) * C121) * C50755 *
                C44486 +
            ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50755 *
                C50948 +
            ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50755 *
                C50947) *
               C251) *
              C395 +
          ((C44802 * C50947 +
            ((C30354 + C30355) * C121 + (C30356 + C30357) * C50653) * C50755 *
                C50948 +
            ((C49768 * C5377 + C50881 * C5380 + C49761 * C5378 +
              C50615 * C5381) *
                 C121 +
             (C49768 * C5382 + C50881 * C5386 + C49761 * C5383 +
              C50615 * C5387) *
                 C50653) *
                C50755 * C44486) *
               C251 -
           (((C49761 * C5384 + C50615 * C5388 + C49768 * C5383 +
              C50881 * C5387) *
                 C50653 +
             (C49761 * C5379 + C50615 * C5385 + C49768 * C5378 +
              C50881 * C5381) *
                 C121) *
                C50755 * C44486 +
            ((C44799 + C44798) * C50653 + (C44797 + C44796) * C121) * C50755 *
                C50948 +
            C44803 * C50947) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C50947 +
            ((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50755 *
                C50948 +
            C44802 * C44486) *
               C50939 -
           (C44803 * C44486 +
            ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50755 *
                C50948 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50755 * C50947) *
               C50940 +
           (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C50755 * C50947 +
            ((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50755 *
                C50948 +
            ((C45104 + C45105) * C121 + (C45106 + C45107) * C50653) * C50755 *
                C44486) *
               C539) *
              C50897 +
          ((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50755 *
                C50947 +
            ((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50755 *
                C50948 +
            ((C44796 + C44797) * C121 + (C44798 + C44799) * C50653) * C50755 *
                C44486) *
               C50940 -
           (((C30357 + C30356) * C50653 + (C30355 + C30354) * C121) * C50755 *
                C44486 +
            ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50755 *
                C50948 +
            ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50755 *
                C50947) *
               C50939 -
           (((C49761 * C1732 + C50615 * C1740 + C49768 * C1733 +
              C50881 * C1741) *
                 C50653 +
             (C49761 * C1728 + C50615 * C1736 + C49768 * C1729 +
              C50881 * C1737) *
                 C121) *
                C50755 * C44486 +
            ((C45107 + C45106) * C50653 + (C45105 + C45104) * C121) * C50755 *
                C50948 +
            ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C50755 *
                C50947) *
               C539) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C121 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50653) *
               C50755 * C50947 +
           ((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50755 *
               C50948 +
           ((C27967 + C27966) * C121 + (C27965 + C27964) * C50653) * C50755 *
               C44486) *
              C112 -
          (((C27959 + C27958) * C50653 + (C27957 + C27956) * C121) * C50755 *
               C44486 +
           ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50755 *
               C50948 +
           ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                C50653 +
            (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                C121) *
               C50755 * C50947) *
              C113 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C121 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C50653) *
               C50755 * C50947 +
           ((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50755 *
               C50948 +
           ((C49768 * C404 + C50881 * C419 + C49761 * C405 + C50615 * C420) *
                C121 +
            (C49768 * C423 + C50881 * C434 + C49761 * C424 + C50615 * C435) *
                C50653) *
               C50755 * C44486) *
              C114 -
          (((C49761 * C425 + C50615 * C436 + C49768 * C424 + C50881 * C435) *
                C50653 +
            (C49761 * C406 + C50615 * C426 + C49768 * C405 + C50881 * C420) *
                C121) *
               C50755 * C44486 +
           ((C49761 * C414 + C50615 * C430 + C49768 * C413 + C50881 * C429) *
                C50653 +
            (C49761 * C400 + C50615 * C410 + C49768 * C399 + C50881 * C409) *
                C121) *
               C50755 * C50948 +
           ((C49761 * C137 + C50615 * C147 + C49768 * C136 + C50881 * C146) *
                C50653 +
            (C49761 * C126 + C50615 * C138 + C49768 * C125 + C50881 * C132) *
                C121) *
               C50755 * C50947) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C253 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C248 -
            (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
            C24878 * C255 + C24879 * C250) *
               C50755 * C50947 +
           ((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
            C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
               C50755 * C50948 +
           ((C27967 + C27966) * C253 + (C27965 + C27964) * C248 -
            C29167 * C254 - C29166 * C249 + (C26011 + C26010) * C255 +
            (C26013 + C26012) * C250) *
               C50755 * C44486) *
              C251 +
          (((C24866 + C24867) * C254 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C248 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C253) +
            (C24868 + C24869) * C249 - C24880 * C255 - C24881 * C250) *
               C50755 * C50947 +
           (C28642 * C254 -
            ((C27952 + C27953) * C248 + (C27954 + C27955) * C253) +
            C28643 * C249 - (C25582 + C25583) * C255 -
            (C25584 + C25585) * C250) *
               C50755 * C50948 +
           ((C27960 + C27961) * C254 -
            ((C27959 + C27958) * C248 + (C27957 + C27956) * C253) +
            (C27962 + C27963) * C249 -
            (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
             C50881 * C2562) *
                C255 -
            (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
             C50881 * C2568) *
                C250) *
               C50755 * C44486) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C1213 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50941 -
            (C24854 + C24855) * C1214 - (C24856 + C24857) * C50942 +
            C24878 * C1215 + C24879 * C1210) *
               C50755 * C50947 +
           ((C27948 + C27949) * C1213 + (C27950 + C27951) * C50941 -
            C28638 * C1214 - C28639 * C50942 + C29826 * C1215 +
            C29827 * C1210) *
               C50755 * C50948 +
           (C44780 * C1213 + C44781 * C50941 - C29167 * C1214 -
            C29166 * C50942 + (C26011 + C26010) * C1215 +
            (C26013 + C26012) * C1210) *
               C50755 * C44486) *
              C50888 +
          (((C24866 + C24867) * C1214 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50941 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C1213) +
            (C24868 + C24869) * C50942 - C24880 * C1215 - C24881 * C1210) *
               C50755 * C50947 +
           (C28642 * C1214 -
            ((C27952 + C27953) * C50941 + (C27954 + C27955) * C1213) +
            C28643 * C50942 - (C25582 + C25583) * C1215 -
            (C25584 + C25585) * C1210) *
               C50755 * C50948 +
           ((C27960 + C27961) * C1214 - (C44782 * C50941 + C44783 * C1213) +
            (C27962 + C27963) * C50942 -
            (C49761 * C2560 + C50615 * C2566 + C49768 * C2559 +
             C50881 * C2562) *
                C1215 -
            (C49761 * C2565 + C50615 * C2569 + C49768 * C2564 +
             C50881 * C2568) *
                C1210) *
               C50755 * C44486) *
              C50640) *
         C50669) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C1213 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50941 -
            (C24854 + C24855) * C1214 - (C24856 + C24857) * C50942 +
            C24878 * C1215 + C24879 * C1210) *
               C50755 * C50947 +
           ((C27948 + C27949) * C1213 + (C27950 + C27951) * C50941 -
            C28638 * C1214 - C28639 * C50942 + C29826 * C1215 +
            C29827 * C1210) *
               C50755 * C50948 +
           (C44780 * C1213 + C44781 * C50941 - C29167 * C1214 -
            C29166 * C50942 + (C26011 + C26010) * C1215 +
            (C26013 + C26012) * C1210) *
               C50755 * C44486) *
              C50635 * C50897 +
          ((C28640 * C1214 -
            ((C27951 + C27950) * C50941 + (C27949 + C27948) * C1213) +
            C28641 * C50942 - C26500 * C1215 - C26501 * C1210) *
               C50755 * C50947 +
           (C29164 * C1214 -
            ((C27964 + C27965) * C50941 + (C27966 + C27967) * C1213) +
            C29165 * C50942 - (C26010 + C26011) * C1215 -
            (C26012 + C26013) * C1210) *
               C50755 * C50948 +
           ((C29177 + C29176) * C1214 -
            ((C30357 + C30356) * C50941 + (C30355 + C30354) * C1213) +
            (C29179 + C29178) * C50942 -
            (C49761 * C4482 + C50615 * C4488 + C49768 * C4483 +
             C50881 * C4489) *
                C1215 -
            (C49761 * C4486 + C50615 * C4494 + C49768 * C4487 +
             C50881 * C4495) *
                C1210) *
               C50755 * C44486) *
              C50635 * C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
               C976 +
           (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
               C971 -
           (C24854 + C24855) * C977 - (C24856 + C24857) * C972 + C24878 * C978 +
           C24879 * C973 - C25830 * C979 - C25831 * C974) *
              C50755 * C50947 +
          ((C27948 + C27949) * C976 + (C27950 + C27951) * C971 - C28638 * C977 -
           C28639 * C972 + C29826 * C978 + C29827 * C973 -
           (C26510 + C26511) * C979 - (C26512 + C26513) * C974) *
              C50755 * C50948 +
          (C44780 * C976 + C44781 * C971 - C29167 * C977 - C29166 * C972 +
           (C26011 + C26010) * C978 + (C26013 + C26012) * C973 -
           (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 + C50881 * C3555) *
               C979 -
           (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 + C50881 * C3559) *
               C974) *
              C50755 * C44486) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C903 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C898 -
            (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
               C50755 * C50947 +
           ((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
            C28638 * C904 - C28639 * C50705) *
               C50755 * C50948 +
           (C44780 * C903 + C44781 * C898 - C29167 * C904 - C29166 * C50705) *
               C50755 * C44486) *
              C900 +
          (((C24866 + C24867) * C904 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C898 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C903) +
            (C24868 + C24869) * C50705) *
               C50755 * C50947 +
           (C28642 * C904 -
            ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
            C28643 * C50705) *
               C50755 * C50948 +
           ((C27960 + C27961) * C904 - (C44782 * C898 + C44783 * C903) +
            (C27962 + C27963) * C50705) *
               C50755 * C44486) *
              C901 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C903 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C898 -
            (C25190 + C25191) * C904 - (C25192 + C25193) * C50705) *
               C50755 * C50947 +
           ((C28376 + C28377) * C903 + (C28378 + C28379) * C898 -
            (C28170 + C28171) * C904 - (C28172 + C28173) * C50705) *
               C50755 * C50948 +
           ((C45104 + C45105) * C903 + (C45106 + C45107) * C898 -
            (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
             C50881 * C1099) *
                C904 -
            (C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
             C50881 * C1107) *
                C50705) *
               C50755 * C44486) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C903 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C898 -
            (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
               C50755 * C50947 +
           ((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
            C28638 * C904 - C28639 * C50705) *
               C50755 * C50948 +
           C45699 * C44486) *
              C50635 * C394 +
          ((C28640 * C904 -
            ((C27951 + C27950) * C898 + (C27949 + C27948) * C903) +
            C28641 * C50705) *
               C50755 * C50947 +
           (C29164 * C904 -
            ((C27964 + C27965) * C898 + (C27966 + C27967) * C903) +
            C29165 * C50705) *
               C50755 * C50948 +
           ((C29177 + C29176) * C904 -
            ((C30357 + C30356) * C898 + (C30355 + C30354) * C903) +
            (C29179 + C29178) * C50705) *
               C50755 * C44486) *
              C50635 * C395 +
          (C45699 * C50947 +
           ((C30354 + C30355) * C903 + (C30356 + C30357) * C898 -
            (C29176 + C29177) * C904 - (C29178 + C29179) * C50705) *
               C50755 * C50948 +
           ((C49768 * C5377 + C50881 * C5380 + C49761 * C5378 +
             C50615 * C5381) *
                C903 +
            (C49768 * C5382 + C50881 * C5386 + C49761 * C5383 +
             C50615 * C5387) *
                C898 -
            (C49761 * C6389 + C50615 * C6391 + C49768 * C6390 +
             C50881 * C6392) *
                C904 -
            (C49761 * C6393 + C50615 * C6395 + C49768 * C6394 +
             C50881 * C6396) *
                C50705) *
               C50755 * C44486) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C903 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C898 -
             (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
                C50755 * C50947 +
            ((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
             C28638 * C904 - C28639 * C50705) *
                C50755 * C50948 +
            C45699 * C44486) *
               C50888 +
           (((C24866 + C24867) * C904 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C898 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C903) +
             (C24868 + C24869) * C50705) *
                C50755 * C50947 +
            (C28642 * C904 -
             ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
             C28643 * C50705) *
                C50755 * C50948 +
            ((C27960 + C27961) * C904 - (C44782 * C898 + C44783 * C903) +
             (C27962 + C27963) * C50705) *
                C50755 * C44486) *
               C50640) *
              C50897 +
          (((C28640 * C904 -
             ((C27951 + C27950) * C898 + (C27949 + C27948) * C903) +
             C28641 * C50705) *
                C50755 * C50947 +
            (C29164 * C904 -
             ((C27964 + C27965) * C898 + (C27966 + C27967) * C903) +
             C29165 * C50705) *
                C50755 * C50948 +
            ((C29177 + C29176) * C904 -
             ((C30357 + C30356) * C898 + (C30355 + C30354) * C903) +
             (C29179 + C29178) * C50705) *
                C50755 * C44486) *
               C50888 +
           (((C27955 + C27954) * C903 + (C27953 + C27952) * C898 -
             C28645 * C904 - C28644 * C50705) *
                C50755 * C50947 +
            ((C27956 + C27957) * C903 + (C27958 + C27959) * C898 -
             (C27961 + C27960) * C904 - (C27963 + C27962) * C50705) *
                C50755 * C50948 +
            ((C44796 + C44797) * C903 + (C44798 + C44799) * C898 -
             (C49761 * C5983 + C50615 * C5984 + C49768 * C4484 +
              C50881 * C4492) *
                 C904 -
             (C49761 * C5985 + C50615 * C5986 + C49768 * C4490 +
              C50881 * C4496) *
                 C50705) *
                C50755 * C44486) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C903 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C898 -
            (C24854 + C24855) * C904 - (C24856 + C24857) * C50705) *
               C50755 * C50947 +
           ((C27948 + C27949) * C903 + (C27950 + C27951) * C898 -
            C28638 * C904 - C28639 * C50705) *
               C50755 * C50948 +
           (C44780 * C903 + C44781 * C898 - C29167 * C904 - C29166 * C50705) *
               C50755 * C44486) *
              C900 +
          (((C24866 + C24867) * C904 -
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C898 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C903) +
            (C24868 + C24869) * C50705) *
               C50755 * C50947 +
           (C28642 * C904 -
            ((C27952 + C27953) * C898 + (C27954 + C27955) * C903) +
            C28643 * C50705) *
               C50755 * C50948 +
           ((C27960 + C27961) * C904 - (C44782 * C898 + C44783 * C903) +
            (C27962 + C27963) * C50705) *
               C50755 * C44486) *
              C901 +
          (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                C903 +
            (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                C898 -
            (C25190 + C25191) * C904 - (C25192 + C25193) * C50705) *
               C50755 * C50947 +
           ((C28376 + C28377) * C903 + (C28378 + C28379) * C898 -
            (C28170 + C28171) * C904 - (C28172 + C28173) * C50705) *
               C50755 * C50948 +
           ((C45104 + C45105) * C903 + (C45106 + C45107) * C898 -
            (C49761 * C1094 + C50615 * C1098 + C49768 * C1095 +
             C50881 * C1099) *
                C904 -
            (C49761 * C1102 + C50615 * C1106 + C49768 * C1103 +
             C50881 * C1107) *
                C50705) *
               C50755 * C44486) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
               C976 +
           (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
               C971 -
           (C24854 + C24855) * C977 - (C24856 + C24857) * C972 + C24878 * C978 +
           C24879 * C973 - C25830 * C979 - C25831 * C974) *
              C50755 * C50947 +
          ((C27948 + C27949) * C976 + (C27950 + C27951) * C971 - C28638 * C977 -
           C28639 * C972 + C29826 * C978 + C29827 * C973 -
           (C26510 + C26511) * C979 - (C26512 + C26513) * C974) *
              C50755 * C50948 +
          (C44780 * C976 + C44781 * C971 - C29167 * C977 - C29166 * C972 +
           (C26011 + C26010) * C978 + (C26013 + C26012) * C973 -
           (C49761 * C3552 + C50615 * C3554 + C49768 * C3553 + C50881 * C3555) *
               C979 -
           (C49761 * C3556 + C50615 * C3558 + C49768 * C3557 + C50881 * C3559) *
               C974) *
              C50755 * C44486) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C540 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50896 -
             (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
                C50755 * C50947 +
            ((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
             C28638 * C541 - C28639 * C50705) *
                C50755 * C50948 +
            (C44780 * C540 + C44781 * C50896 - C29167 * C541 -
             C29166 * C50705) *
                C50755 * C44486) *
               C50888 +
           (((C24866 + C24867) * C541 -
             ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                  C50896 +
              (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                  C540) +
             (C24868 + C24869) * C50705) *
                C50755 * C50947 +
            (C28642 * C541 -
             ((C27952 + C27953) * C50896 + (C27954 + C27955) * C540) +
             C28643 * C50705) *
                C50755 * C50948 +
            ((C27960 + C27961) * C541 - (C44782 * C50896 + C44783 * C540) +
             (C27962 + C27963) * C50705) *
                C50755 * C44486) *
               C50640) *
              C1558 +
          (((C28640 * C541 -
             ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
             C28641 * C50705) *
                C50755 * C50947 +
            (C29164 * C541 -
             ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
             C29165 * C50705) *
                C50755 * C50948 +
            ((C29177 + C29176) * C541 - (C46576 * C50896 + C46577 * C540) +
             (C29179 + C29178) * C50705) *
                C50755 * C44486) *
               C50888 +
           (((C27955 + C27954) * C540 + (C27953 + C27952) * C50896 -
             C28645 * C541 - C28644 * C50705) *
                C50755 * C50947 +
            ((C27956 + C27957) * C540 + (C27958 + C27959) * C50896 -
             (C27961 + C27960) * C541 - (C27963 + C27962) * C50705) *
                C50755 * C50948 +
            ((C44796 + C44797) * C540 + (C44798 + C44799) * C50896 -
             (C49761 * C5983 + C50615 * C5984 + C49768 * C4484 +
              C50881 * C4492) *
                 C541 -
             (C49761 * C5985 + C50615 * C5986 + C49768 * C4490 +
              C50881 * C4496) *
                 C50705) *
                C50755 * C44486) *
               C50640) *
              C50733)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C540 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50896 -
            (C24854 + C24855) * C541 - (C24856 + C24857) * C50705) *
               C50755 * C50947 +
           ((C27948 + C27949) * C540 + (C27950 + C27951) * C50896 -
            C28638 * C541 - C28639 * C50705) *
               C50755 * C50948 +
           C47087 * C44486) *
              C50635 * C50943 +
          ((C28640 * C541 -
            ((C27951 + C27950) * C50896 + (C27949 + C27948) * C540) +
            C28641 * C50705) *
               C50755 * C50947 +
           (C29164 * C541 -
            ((C27964 + C27965) * C50896 + (C27966 + C27967) * C540) +
            C29165 * C50705) *
               C50755 * C50948 +
           ((C29177 + C29176) * C541 - (C46576 * C50896 + C46577 * C540) +
            (C29179 + C29178) * C50705) *
               C50755 * C44486) *
              C50635 * C50944 +
          (C47087 * C50947 +
           ((C30354 + C30355) * C540 + (C30356 + C30357) * C50896 -
            (C29176 + C29177) * C541 - (C29178 + C29179) * C50705) *
               C50755 * C50948 +
           ((C46588 + C46589) * C540 + (C46590 + C46591) * C50896 -
            (C49761 * C6389 + C50615 * C6391 + C49768 * C6390 +
             C50881 * C6392) *
                C541 -
            (C49761 * C6393 + C50615 * C6395 + C49768 * C6394 +
             C50881 * C6396) *
                C50705) *
               C50755 * C44486) *
              C50635 * C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C253 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C248 -
            (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
            C24878 * C255 + C24879 * C250) *
               C50755 * C50947 +
           ((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
            C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
               C50755 * C50948 +
           (C44780 * C253 + C44781 * C248 - C29167 * C254 - C29166 * C249 +
            (C26011 + C26010) * C255 + (C26013 + C26012) * C250) *
               C50755 * C44486) *
              C50635 * C1558 +
          ((C28640 * C254 -
            ((C27951 + C27950) * C248 + (C27949 + C27948) * C253) +
            C28641 * C249 - C26500 * C255 - C26501 * C250) *
               C50755 * C50947 +
           (C29164 * C254 -
            ((C27964 + C27965) * C248 + (C27966 + C27967) * C253) +
            C29165 * C249 - (C26010 + C26011) * C255 -
            (C26012 + C26013) * C250) *
               C50755 * C50948 +
           ((C29177 + C29176) * C254 -
            ((C30357 + C30356) * C248 + (C30355 + C30354) * C253) +
            (C29179 + C29178) * C249 -
            (C49761 * C4482 + C50615 * C4488 + C49768 * C4483 +
             C50881 * C4489) *
                C255 -
            (C49761 * C4486 + C50615 * C4494 + C49768 * C4487 +
             C50881 * C4495) *
                C250) *
               C50755 * C44486) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C50947 +
            ((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50755 *
                C50948 +
            C44802 * C44486) *
               C900 -
           (C44803 * C44486 +
            ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50755 *
                C50948 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50755 * C50947) *
               C901 +
           (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C50755 * C50947 +
            ((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50755 *
                C50948 +
            ((C45104 + C45105) * C121 + (C45106 + C45107) * C50653) * C50755 *
                C44486) *
               C902) *
              C1558 +
          ((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50755 *
                C50947 +
            ((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50755 *
                C50948 +
            ((C44796 + C44797) * C121 + (C44798 + C44799) * C50653) * C50755 *
                C44486) *
               C901 -
           (((C30357 + C30356) * C50653 + (C30355 + C30354) * C121) * C50755 *
                C44486 +
            ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50755 *
                C50948 +
            ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50755 *
                C50947) *
               C900 -
           (((C49761 * C1732 + C50615 * C1740 + C49768 * C1733 +
              C50881 * C1741) *
                 C50653 +
             (C49761 * C1728 + C50615 * C1736 + C49768 * C1729 +
              C50881 * C1737) *
                 C121) *
                C50755 * C44486 +
            ((C45107 + C45106) * C50653 + (C45105 + C45104) * C121) * C50755 *
                C50948 +
            ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C50755 *
                C50947) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C121 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C50653) *
               C50755 * C50947 +
           ((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50755 *
               C50948 +
           C44802 * C44486) *
              C50635 * C1724 -
          (C46593 * C44486 +
           ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50755 *
               C50948 +
           ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50755 *
               C50947) *
              C50635 * C1725 +
          (C44802 * C50947 +
           ((C30354 + C30355) * C121 + (C30356 + C30357) * C50653) * C50755 *
               C50948 +
           ((C46588 + C46589) * C121 + (C46590 + C46591) * C50653) * C50755 *
               C44486) *
              C50635 * C1726 -
          (((C49761 * C7297 + C50615 * C7301 + C49768 * C7298 +
             C50881 * C7302) *
                C50653 +
            (C49761 * C7295 + C50615 * C7299 + C49768 * C7296 +
             C50881 * C7300) *
                C121) *
               C50755 * C44486 +
           ((C46591 + C46590) * C50653 + (C46589 + C46588) * C121) * C50755 *
               C50948 +
           C46593 * C50947) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C50947 +
            ((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50755 *
                C50948 +
            C44802 * C44486) *
               C50888 -
           (C44803 * C44486 +
            ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50755 *
                C50948 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50755 * C50947) *
               C50640) *
              C50943 +
          ((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50755 *
                C50947 +
            ((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50755 *
                C50948 +
            ((C44796 + C44797) * C121 + (C44798 + C44799) * C50653) * C50755 *
                C44486) *
               C50640 -
           (C46593 * C44486 +
            ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50755 *
                C50948 +
            ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50755 *
                C50947) *
               C50888) *
              C50944 +
          ((C44802 * C50947 +
            ((C30354 + C30355) * C121 + (C30356 + C30357) * C50653) * C50755 *
                C50948 +
            ((C46588 + C46589) * C121 + (C46590 + C46591) * C50653) * C50755 *
                C44486) *
               C50888 -
           (((C49761 * C5384 + C50615 * C5388 + C49768 * C5383 +
              C50881 * C5387) *
                 C50653 +
             (C49761 * C5379 + C50615 * C5385 + C49768 * C5378 +
              C50881 * C5381) *
                 C121) *
                C50755 * C44486 +
            ((C44799 + C44798) * C50653 + (C44797 + C44796) * C121) * C50755 *
                C50948 +
            C44803 * C50947) *
               C50640) *
              C1974)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                 C121 +
             (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                 C50653) *
                C50755 * C50947 +
            ((C27948 + C27949) * C121 + (C27950 + C27951) * C50653) * C50755 *
                C50948 +
            C44802 * C44486) *
               C900 -
           (C44803 * C44486 +
            ((C27952 + C27953) * C50653 + (C27954 + C27955) * C121) * C50755 *
                C50948 +
            ((C49761 * C135 + C50615 * C145 + C49768 * C134 + C50881 * C144) *
                 C50653 +
             (C49761 * C124 + C50615 * C131 + C49768 * C123 + C50881 * C130) *
                 C121) *
                C50755 * C50947) *
               C901 +
           (((C49768 * C124 + C50881 * C131 + C49761 * C125 + C50615 * C132) *
                 C121 +
             (C49768 * C135 + C50881 * C145 + C49761 * C136 + C50615 * C146) *
                 C50653) *
                C50755 * C50947 +
            ((C28376 + C28377) * C121 + (C28378 + C28379) * C50653) * C50755 *
                C50948 +
            ((C45104 + C45105) * C121 + (C45106 + C45107) * C50653) * C50755 *
                C44486) *
               C902) *
              C1558 +
          ((((C27955 + C27954) * C121 + (C27953 + C27952) * C50653) * C50755 *
                C50947 +
            ((C27956 + C27957) * C121 + (C27958 + C27959) * C50653) * C50755 *
                C50948 +
            ((C44796 + C44797) * C121 + (C44798 + C44799) * C50653) * C50755 *
                C44486) *
               C901 -
           (((C30357 + C30356) * C50653 + (C30355 + C30354) * C121) * C50755 *
                C44486 +
            ((C27964 + C27965) * C50653 + (C27966 + C27967) * C121) * C50755 *
                C50948 +
            ((C27951 + C27950) * C50653 + (C27949 + C27948) * C121) * C50755 *
                C50947) *
               C900 -
           (((C49761 * C1732 + C50615 * C1740 + C49768 * C1733 +
              C50881 * C1741) *
                 C50653 +
             (C49761 * C1728 + C50615 * C1736 + C49768 * C1729 +
              C50881 * C1737) *
                 C121) *
                C50755 * C44486 +
            ((C45107 + C45106) * C50653 + (C45105 + C45104) * C121) * C50755 *
                C50948 +
            ((C28379 + C28378) * C50653 + (C28377 + C28376) * C121) * C50755 *
                C50947) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50881 * C129 + C49761 * C123 + C50615 * C130) *
                C253 +
            (C49768 * C133 + C50881 * C143 + C49761 * C134 + C50615 * C144) *
                C248 -
            (C24854 + C24855) * C254 - (C24856 + C24857) * C249 +
            C24878 * C255 + C24879 * C250) *
               C50755 * C50947 +
           ((C27948 + C27949) * C253 + (C27950 + C27951) * C248 -
            C28638 * C254 - C28639 * C249 + C29826 * C255 + C29827 * C250) *
               C50755 * C50948 +
           (C44780 * C253 + C44781 * C248 - C29167 * C254 - C29166 * C249 +
            (C26011 + C26010) * C255 + (C26013 + C26012) * C250) *
               C50755 * C44486) *
              C50635 * C1558 +
          ((C28640 * C254 -
            ((C27951 + C27950) * C248 + (C27949 + C27948) * C253) +
            C28641 * C249 - C26500 * C255 - C26501 * C250) *
               C50755 * C50947 +
           (C29164 * C254 -
            ((C27964 + C27965) * C248 + (C27966 + C27967) * C253) +
            C29165 * C249 - (C26010 + C26011) * C255 -
            (C26012 + C26013) * C250) *
               C50755 * C50948 +
           ((C29177 + C29176) * C254 -
            ((C30357 + C30356) * C248 + (C30355 + C30354) * C253) +
            (C29179 + C29178) * C249 -
            (C49761 * C4482 + C50615 * C4488 + C49768 * C4483 +
             C50881 * C4489) *
                C255 -
            (C49761 * C4486 + C50615 * C4494 + C49768 * C4487 +
             C50881 * C4495) *
                C250) *
               C50755 * C44486) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C540 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C50896 -
                     (C17186 + C17187 + C17188) * C541 -
                     (C17189 + C17190 + C17191) * C50705) *
                        C50755 * C33783 +
                    ((C34126 + C34127 + C34128) * C540 +
                     (C34129 + C34130 + C34131) * C50896 -
                     (C17886 + C17885 + C17884) * C541 -
                     (C17889 + C17888 + C17887) * C50705) *
                        C50755 * C50831) *
                       C50939 +
                   (((C17198 + C17199 + C17200) * C541 -
                     ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                       C16984 * C145 + C16988 * C134 + C16983 * C144) *
                          C50896 +
                      (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                       C16984 * C131 + C16988 * C123 + C16983 * C130) *
                          C540) +
                     (C17201 + C17202 + C17203) * C50705) *
                        C50755 * C33783 +
                    ((C17892 + C17891 + C17890) * C541 -
                     ((C34132 + C34133 + C34134) * C50896 +
                      (C34135 + C34136 + C34137) * C540) +
                     (C17895 + C17894 + C17893) * C50705) *
                        C50755 * C50831) *
                       C50940 +
                   (((C16988 * C124 + C16983 * C131 + C16989 * C125 +
                      C16984 * C132 + C16990 * C126 + C16985 * C138) *
                         C540 +
                     (C16988 * C135 + C16983 * C145 + C16989 * C136 +
                      C16984 * C146 + C16990 * C137 + C16985 * C147) *
                         C50896 -
                     (C17514 + C17515 + C17516) * C541 -
                     (C17517 + C17518 + C17519) * C50705) *
                        C50755 * C33783 +
                    ((C16988 * C398 + C16983 * C408 + C16989 * C399 +
                      C16984 * C409 + C16990 * C400 + C16985 * C410) *
                         C540 +
                     (C16988 * C412 + C16983 * C428 + C16989 * C413 +
                      C16984 * C429 + C16990 * C414 + C16985 * C430) *
                         C50896 -
                     (C16990 * C784 + C16985 * C793 + C16989 * C783 +
                      C16984 * C788 + C16988 * C782 + C16983 * C787) *
                         C541 -
                     (C16990 * C794 + C16985 * C799 + C16989 * C792 +
                      C16984 * C798 + C16988 * C791 + C16983 * C797) *
                         C50705) *
                        C50755 * C50831) *
                       C539) *
                  C50669) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C2173 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C2174 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C2175) *
                        C33783 +
                    ((C22622 + C22623 - C22624 - C22625) * C2173 +
                     (C22626 + C22627 - C22628 - C22629) * C2174 +
                     (C31896 + C31897 - C31898 - C31899) * C2175) *
                        C50831) *
                       C50939 +
                   (((C19912 * C541 -
                      ((C19772 * C134 + C50610 * C144) * C50896 +
                       (C19772 * C123 + C50610 * C130) * C540) +
                      C19913 * C50705) *
                         C2173 +
                     (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                      C19915 * C50705) *
                         C2174 +
                     (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                      C19917 * C50705) *
                         C2175) *
                        C33783 +
                    ((C22638 - (C22639 + C22640) + C22641) * C2173 +
                     (C22642 - (C22643 + C22644) + C22645) * C2174 +
                     (C31900 - (C31901 + C31902) + C31903) * C2175) *
                        C50831) *
                       C50940 +
                   ((((C19772 * C124 + C50610 * C131) * C540 +
                      (C19772 * C135 + C50610 * C145) * C50896 - C20128 * C541 -
                      C20129 * C50705) *
                         C2173 +
                     (C20128 * C540 + C20129 * C50896 - C20130 * C541 -
                      C20131 * C50705) *
                         C2174 +
                     (C20130 * C540 + C20131 * C50896 - C20132 * C541 -
                      C20133 * C50705) *
                         C2175) *
                        C33783 +
                    ((C22420 * C540 + C22421 * C50896 - C22258 * C541 -
                      C22259 * C50705) *
                         C2173 +
                     (C22258 * C540 + C22259 * C50896 - C31552 * C541 -
                      C31553 * C50705) *
                         C2174 +
                     (C31552 * C540 + C31553 * C50896 -
                      (C19772 * C3082 + C50610 * C3087) * C541 -
                      (C19772 * C3088 + C50610 * C3091) * C50705) *
                         C2175) *
                        C50831) *
                       C539) *
                  C50669) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C540 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50896 -
                      (C17186 + C17187 + C17188) * C541 -
                      (C17189 + C17190 + C17191) * C50705) *
                         C50755 * C33783 +
                     ((C34126 + C34127 + C34128) * C540 +
                      (C34129 + C34130 + C34131) * C50896 -
                      (C17886 + C17885 + C17884) * C541 -
                      (C17889 + C17888 + C17887) * C50705) *
                         C50755 * C50831) *
                        C251 +
                    (((C17198 + C17199 + C17200) * C541 -
                      ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                        C16984 * C145 + C16988 * C134 + C16983 * C144) *
                           C50896 +
                       (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                        C16984 * C131 + C16988 * C123 + C16983 * C130) *
                           C540) +
                      (C17201 + C17202 + C17203) * C50705) *
                         C50755 * C33783 +
                     ((C17892 + C17891 + C17890) * C541 -
                      ((C34132 + C34133 + C34134) * C50896 +
                       (C34135 + C34136 + C34137) * C540) +
                      (C17895 + C17894 + C17893) * C50705) *
                         C50755 * C50831) *
                        C50640) *
                       C50897 +
                   ((((C17884 + C17885 + C17886) * C541 -
                      ((C34131 + C34130 + C34129) * C50896 +
                       (C34128 + C34127 + C34126) * C540) +
                      (C17887 + C17888 + C17889) * C50705) *
                         C50755 * C33783 +
                     ((C18318 + C18317 + C18316) * C541 -
                      ((C34144 + C34145 + C34146) * C50896 +
                       (C34147 + C34148 + C34149) * C540) +
                      (C18321 + C18320 + C18319) * C50705) *
                         C50755 * C50831) *
                        C251 +
                    (((C34137 + C34136 + C34135) * C540 +
                      (C34134 + C34133 + C34132) * C50896 -
                      (C17890 + C17891 + C17892) * C541 -
                      (C17893 + C17894 + C17895) * C50705) *
                         C50755 * C33783 +
                     ((C34138 + C34139 + C34140) * C540 +
                      (C34141 + C34142 + C34143) * C50896 -
                      (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
                       C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                          C541 -
                      (C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
                       C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                          C50705) *
                         C50755 * C50831) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C2173 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C2174 +
                      (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                       C19909 * C50705) *
                          C2175) *
                         C33783 +
                     ((C22622 + C22623 - C22624 - C22625) * C2173 +
                      (C22626 + C22627 - C22628 - C22629) * C2174 +
                      (C31896 + C31897 - C31898 - C31899) * C2175) *
                         C50831) *
                        C251 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C2173 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C2174 +
                      (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                       C19917 * C50705) *
                          C2175) *
                         C33783 +
                     ((C22638 - (C22639 + C22640) + C22641) * C2173 +
                      (C22642 - (C22643 + C22644) + C22645) * C2174 +
                      (C31900 - (C31901 + C31902) + C31903) * C2175) *
                         C50831) *
                        C50640) *
                       C50897 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C2173 +
                      (C22628 - (C22627 + C22626) + C22629) * C2174 +
                      (C31898 - (C31897 + C31896) + C31899) * C2175) *
                         C33783 +
                     ((C22632 - (C22631 + C22630) + C22633) * C2173 +
                      (C22636 - (C22635 + C22634) + C22637) * C2174 +
                      (C33682 - (C33683 + C33684) + C33685) * C2175) *
                         C50831) *
                        C251 +
                    (((C22640 + C22639 - C22638 - C22641) * C2173 +
                      (C22644 + C22643 - C22642 - C22645) * C2174 +
                      (C31902 + C31901 - C31900 - C31903) * C2175) *
                         C33783 +
                     ((C22648 + C22647 - C22646 - C22649) * C2173 +
                      (C22652 + C22651 - C22650 - C22653) * C2174 +
                      (C21874 * C540 + C21875 * C50896 -
                       (C19772 * C3552 + C50610 * C3554) * C541 -
                       (C19772 * C3556 + C50610 * C3558) * C50705) *
                          C2175) *
                         C50831) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C50755 * C33783 +
           ((C16988 * C401 + C16983 * C416 + C16989 * C397 + C16984 * C407 +
             C16990 * C398 + C16985 * C408) *
                C253 +
            (C16988 * C415 + C16983 * C431 + C16989 * C411 + C16984 * C427 +
             C16990 * C412 + C16985 * C428) *
                C248 -
            (C17886 + C17885 + C17884) * C254 -
            (C17889 + C17888 + C17887) * C249 +
            (C18822 + C18821 + C18820) * C255 +
            (C18825 + C18824 + C18823) * C250) *
               C50755 * C50831) *
              C251 +
          (((C17198 + C17199 + C17200) * C254 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C248 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C253) +
            (C17201 + C17202 + C17203) * C249 -
            (C17204 + C17205 + C17206) * C255 -
            (C17207 + C17208 + C17209) * C250) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C254 -
            ((C16990 * C413 + C16985 * C429 + C16989 * C412 + C16984 * C428 +
              C16988 * C411 + C16983 * C427) *
                 C248 +
             (C16990 * C399 + C16985 * C409 + C16989 * C398 + C16984 * C408 +
              C16988 * C397 + C16983 * C407) *
                 C253) +
            (C17895 + C17894 + C17893) * C249 -
            (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 + C16984 * C1449 +
             C16988 * C1446 + C16983 * C1450) *
                C255 -
            (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 + C16984 * C1457 +
             C16988 * C1454 + C16983 * C1458) *
                C250) *
               C50755 * C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C121 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50653) *
               C50755 * C33783 +
           ((C16988 * C401 + C16983 * C416 + C16989 * C397 + C16984 * C407 +
             C16990 * C398 + C16985 * C408) *
                C121 +
            (C16988 * C415 + C16983 * C431 + C16989 * C411 + C16984 * C427 +
             C16990 * C412 + C16985 * C428) *
                C50653) *
               C50755 * C50831) *
              C112 -
          (((C16990 * C413 + C16985 * C429 + C16989 * C412 + C16984 * C428 +
             C16988 * C411 + C16983 * C427) *
                C50653 +
            (C16990 * C399 + C16985 * C409 + C16989 * C398 + C16984 * C408 +
             C16988 * C397 + C16983 * C407) *
                C121) *
               C50755 * C50831 +
           ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
             C16988 * C134 + C16983 * C144) *
                C50653 +
            (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
             C16988 * C123 + C16983 * C130) *
                C121) *
               C50755 * C33783) *
              C113 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C121 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C50653) *
               C50755 * C33783 +
           ((C16988 * C398 + C16983 * C408 + C16989 * C399 + C16984 * C409 +
             C16990 * C400 + C16985 * C410) *
                C121 +
            (C16988 * C412 + C16983 * C428 + C16989 * C413 + C16984 * C429 +
             C16990 * C414 + C16985 * C430) *
                C50653) *
               C50755 * C50831) *
              C114 -
          (((C16990 * C647 + C16985 * C649 + C16989 * C414 + C16984 * C430 +
             C16988 * C413 + C16983 * C429) *
                C50653 +
            (C16990 * C646 + C16985 * C648 + C16989 * C400 + C16984 * C410 +
             C16988 * C399 + C16983 * C409) *
                C121) *
               C50755 * C50831 +
           ((C16990 * C140 + C16985 * C148 + C16989 * C137 + C16984 * C147 +
             C16988 * C136 + C16983 * C146) *
                C50653 +
            (C16990 * C127 + C16985 * C139 + C16989 * C126 + C16984 * C138 +
             C16988 * C125 + C16983 * C132) *
                C121) *
               C50755 * C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C121 +
             (C34129 + C34130 + C34131) * C50653) *
                C50755 * C50831) *
               C251 -
           (((C34132 + C34133 + C34134) * C50653 +
             (C34135 + C34136 + C34137) * C121) *
                C50755 * C50831 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C50755 * C33783) *
               C50640) *
              C394 +
          ((((C34137 + C34136 + C34135) * C121 +
             (C34134 + C34133 + C34132) * C50653) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C121 +
             (C34141 + C34142 + C34143) * C50653) *
                C50755 * C50831) *
               C50640 -
           (((C34144 + C34145 + C34146) * C50653 +
             (C34147 + C34148 + C34149) * C121) *
                C50755 * C50831 +
            ((C34131 + C34130 + C34129) * C50653 +
             (C34128 + C34127 + C34126) * C121) *
                C50755 * C33783) *
               C251) *
              C395 +
          ((((C34149 + C34148 + C34147) * C121 +
             (C34146 + C34145 + C34144) * C50653) *
                C50755 * C33783 +
            ((C16988 * C1731 + C16983 * C1739 + C16989 * C1730 +
              C16984 * C1738 + C16990 * C1729 + C16985 * C1737) *
                 C121 +
             (C16988 * C1735 + C16983 * C1743 + C16989 * C1734 +
              C16984 * C1742 + C16990 * C1733 + C16985 * C1741) *
                 C50653) *
                C50755 * C50831) *
               C251 -
           (((C16990 * C1732 + C16985 * C1740 + C16989 * C1733 +
              C16984 * C1741 + C16988 * C1734 + C16983 * C1742) *
                 C50653 +
             (C16990 * C1728 + C16985 * C1736 + C16989 * C1729 +
              C16984 * C1737 + C16988 * C1730 + C16983 * C1738) *
                 C121) *
                C50755 * C50831 +
            ((C34143 + C34142 + C34141) * C50653 +
             (C34140 + C34139 + C34138) * C121) *
                C50755 * C33783) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C2173 +
            (C19904 * C121 + C19905 * C50653) * C2174 +
            (C19906 * C121 + C19907 * C50653) * C2175) *
               C33783 +
           ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
            (C31394 + C31395) * C2175) *
               C50831) *
              C112 -
          (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
            (C22088 + C22089) * C2173) *
               C50831 +
           ((C19915 * C50653 + C19914 * C121) * C2175 +
            (C19913 * C50653 + C19912 * C121) * C2174 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C2173) *
               C33783) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C2173 +
            (C20128 * C121 + C20129 * C50653) * C2174 +
            (C20130 * C121 + C20131 * C50653) * C2175) *
               C33783 +
           ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
            (C31700 + C31701) * C2175) *
               C50831) *
              C114 -
          ((((C19772 * C1452 + C50610 * C1456) * C50653 +
             (C19772 * C1444 + C50610 * C1448) * C121) *
                C2175 +
            ((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C2174 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C2173) *
               C50831 +
           (((C19772 * C281 + C50610 * C293) * C50653 +
             (C19772 * C263 + C50610 * C277) * C121) *
                C2175 +
            ((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C2174 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C2173) *
               C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C2173 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C2174 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C2175) *
               C33783 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C2173 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C2174 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C2175) *
               C50831) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C2173 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C2174 +
            (C19916 * C254 - (C19915 * C248 + C19914 * C253) + C19917 * C249 -
             C19918 * C255 - C19919 * C250) *
                C2175) *
               C33783 +
           ((C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
             C20394 * C255 - C20395 * C250) *
                C2173 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C2174 +
            (C20396 * C254 - (C20395 * C248 + C20394 * C253) + C20397 * C249 -
             (C19772 * C4070 + C50610 * C4072) * C255 -
             (C19772 * C4074 + C50610 * C4076) * C250) *
                C2175) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C251 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C50640) *
              C394 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C50640 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C251) *
              C395 +
          (((C22098 * C2173 + C22066 * C2174 + (C31401 + C31400) * C2175) *
                C33783 +
            ((C22097 + C22096) * C2173 + (C22095 + C22094) * C2174 +
             (C33194 + C33195) * C2175) *
                C50831) *
               C251 -
           ((((C19772 * C4486 + C50610 * C4494) * C50653 +
              (C19772 * C4482 + C50610 * C4488) * C121) *
                 C2175 +
             (C22093 + C22092) * C2174 + (C22091 + C22090) * C2173) *
                C50831 +
            ((C31399 + C31398) * C2175 + C22067 * C2174 + C22099 * C2173) *
                C33783) *
               C50640) *
              C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C121 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50653) *
                         C50755 * C33783 +
                     ((C34126 + C34127 + C34128) * C121 +
                      (C34129 + C34130 + C34131) * C50653) *
                         C50755 * C50831) *
                        C50939 -
                    (((C34132 + C34133 + C34134) * C50653 +
                      (C34135 + C34136 + C34137) * C121) *
                         C50755 * C50831 +
                     ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                       C16984 * C145 + C16988 * C134 + C16983 * C144) *
                          C50653 +
                      (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                       C16984 * C131 + C16988 * C123 + C16983 * C130) *
                          C121) *
                         C50755 * C33783) *
                        C50940 +
                    (((C16988 * C124 + C16983 * C131 + C16989 * C125 +
                       C16984 * C132 + C16990 * C126 + C16985 * C138) *
                          C121 +
                      (C16988 * C135 + C16983 * C145 + C16989 * C136 +
                       C16984 * C146 + C16990 * C137 + C16985 * C147) *
                          C50653) *
                         C50755 * C33783 +
                     ((C34454 + C34455 + C34456) * C121 +
                      (C34457 + C34458 + C34459) * C50653) *
                         C50755 * C50831) *
                        C539) *
                       C50897 +
                   ((((C34137 + C34136 + C34135) * C121 +
                      (C34134 + C34133 + C34132) * C50653) *
                         C50755 * C33783 +
                     ((C34138 + C34139 + C34140) * C121 +
                      (C34141 + C34142 + C34143) * C50653) *
                         C50755 * C50831) *
                        C50940 -
                    (((C34144 + C34145 + C34146) * C50653 +
                      (C34147 + C34148 + C34149) * C121) *
                         C50755 * C50831 +
                     ((C34131 + C34130 + C34129) * C50653 +
                      (C34128 + C34127 + C34126) * C121) *
                         C50755 * C33783) *
                        C50939 -
                    (((C16990 * C425 + C16985 * C436 + C16989 * C424 +
                       C16984 * C435 + C16988 * C423 + C16983 * C434) *
                          C50653 +
                      (C16990 * C406 + C16985 * C426 + C16989 * C405 +
                       C16984 * C420 + C16988 * C404 + C16983 * C419) *
                          C121) *
                         C50755 * C50831 +
                     ((C34459 + C34458 + C34457) * C50653 +
                      (C34456 + C34455 + C34454) * C121) *
                         C50755 * C33783) *
                        C539) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C121 +
                       (C19772 * C133 + C50610 * C143) * C50653) *
                          C2173 +
                      (C19904 * C121 + C19905 * C50653) * C2174 +
                      (C19906 * C121 + C19907 * C50653) * C2175) *
                         C33783 +
                     ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
                      (C31394 + C31395) * C2175) *
                         C50831) *
                        C50939 -
                    (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
                      (C22088 + C22089) * C2173) *
                         C50831 +
                     ((C19915 * C50653 + C19914 * C121) * C2175 +
                      (C19913 * C50653 + C19912 * C121) * C2174 +
                      ((C19772 * C134 + C50610 * C144) * C50653 +
                       (C19772 * C123 + C50610 * C130) * C121) *
                          C2173) *
                         C33783) *
                        C50940 +
                    ((((C19772 * C124 + C50610 * C131) * C121 +
                       (C19772 * C135 + C50610 * C145) * C50653) *
                          C2173 +
                      (C20128 * C121 + C20129 * C50653) * C2174 +
                      (C20130 * C121 + C20131 * C50653) * C2175) *
                         C33783 +
                     ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
                      (C31700 + C31701) * C2175) *
                         C50831) *
                        C539) *
                       C50897 +
                   ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
                      (C31397 + C31396) * C2175) *
                         C33783 +
                     ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
                      (C31398 + C31399) * C2175) *
                         C50831) *
                        C50940 -
                    (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
                      (C22083 + C22082) * C2173) *
                         C50831 +
                     ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
                      (C22081 + C22080) * C2173) *
                         C33783) *
                        C50939 -
                    ((((C19772 * C2565 + C50610 * C2569) * C50653 +
                       (C19772 * C2560 + C50610 * C2566) * C121) *
                          C2175 +
                      (C22419 + C22418) * C2174 + (C22427 + C22426) * C2173) *
                         C50831 +
                     ((C31701 + C31700) * C2175 + (C22413 + C22412) * C2174 +
                      (C22425 + C22424) * C2173) *
                         C33783) *
                        C539) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C121 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50653) *
               C50755 * C33783 +
           ((C16988 * C401 + C16983 * C416 + C16989 * C397 + C16984 * C407 +
             C16990 * C398 + C16985 * C408) *
                C121 +
            (C16988 * C415 + C16983 * C431 + C16989 * C411 + C16984 * C427 +
             C16990 * C412 + C16985 * C428) *
                C50653) *
               C50755 * C50831) *
              C112 -
          (((C16990 * C413 + C16985 * C429 + C16989 * C412 + C16984 * C428 +
             C16988 * C411 + C16983 * C427) *
                C50653 +
            (C16990 * C399 + C16985 * C409 + C16989 * C398 + C16984 * C408 +
             C16988 * C397 + C16983 * C407) *
                C121) *
               C50755 * C50831 +
           ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
             C16988 * C134 + C16983 * C144) *
                C50653 +
            (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
             C16988 * C123 + C16983 * C130) *
                C121) *
               C50755 * C33783) *
              C113 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C121 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C50653) *
               C50755 * C33783 +
           ((C16988 * C398 + C16983 * C408 + C16989 * C399 + C16984 * C409 +
             C16990 * C400 + C16985 * C410) *
                C121 +
            (C16988 * C412 + C16983 * C428 + C16989 * C413 + C16984 * C429 +
             C16990 * C414 + C16985 * C430) *
                C50653) *
               C50755 * C50831) *
              C114 -
          (((C16990 * C647 + C16985 * C649 + C16989 * C414 + C16984 * C430 +
             C16988 * C413 + C16983 * C429) *
                C50653 +
            (C16990 * C646 + C16985 * C648 + C16989 * C400 + C16984 * C410 +
             C16988 * C399 + C16983 * C409) *
                C121) *
               C50755 * C50831 +
           ((C16990 * C140 + C16985 * C148 + C16989 * C137 + C16984 * C147 +
             C16988 * C136 + C16983 * C146) *
                C50653 +
            (C16990 * C127 + C16985 * C139 + C16989 * C126 + C16984 * C138 +
             C16988 * C125 + C16983 * C132) *
                C121) *
               C50755 * C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C50755 * C33783 +
           ((C16988 * C401 + C16983 * C416 + C16989 * C397 + C16984 * C407 +
             C16990 * C398 + C16985 * C408) *
                C253 +
            (C16988 * C415 + C16983 * C431 + C16989 * C411 + C16984 * C427 +
             C16990 * C412 + C16985 * C428) *
                C248 -
            (C17886 + C17885 + C17884) * C254 -
            (C17889 + C17888 + C17887) * C249 +
            (C18822 + C18821 + C18820) * C255 +
            (C18825 + C18824 + C18823) * C250) *
               C50755 * C50831) *
              C251 +
          (((C17198 + C17199 + C17200) * C254 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C248 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C253) +
            (C17201 + C17202 + C17203) * C249 -
            (C17204 + C17205 + C17206) * C255 -
            (C17207 + C17208 + C17209) * C250) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C254 -
            ((C16990 * C413 + C16985 * C429 + C16989 * C412 + C16984 * C428 +
              C16988 * C411 + C16983 * C427) *
                 C248 +
             (C16990 * C399 + C16985 * C409 + C16989 * C398 + C16984 * C408 +
              C16988 * C397 + C16983 * C407) *
                 C253) +
            (C17895 + C17894 + C17893) * C249 -
            (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 + C16984 * C1449 +
             C16988 * C1446 + C16983 * C1450) *
                C255 -
            (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 + C16984 * C1457 +
             C16988 * C1454 + C16983 * C1458) *
                C250) *
               C50755 * C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C2173 +
            (C19904 * C121 + C19905 * C50653) * C2174 +
            (C19906 * C121 + C19907 * C50653) * C2175) *
               C33783 +
           ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
            (C31394 + C31395) * C2175) *
               C50831) *
              C112 -
          (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
            (C22088 + C22089) * C2173) *
               C50831 +
           ((C19915 * C50653 + C19914 * C121) * C2175 +
            (C19913 * C50653 + C19912 * C121) * C2174 +
            ((C19772 * C134 + C50610 * C144) * C50653 +
             (C19772 * C123 + C50610 * C130) * C121) *
                C2173) *
               C33783) *
              C113 +
          ((((C19772 * C124 + C50610 * C131) * C121 +
             (C19772 * C135 + C50610 * C145) * C50653) *
                C2173 +
            (C20128 * C121 + C20129 * C50653) * C2174 +
            (C20130 * C121 + C20131 * C50653) * C2175) *
               C33783 +
           ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
            (C31700 + C31701) * C2175) *
               C50831) *
              C114 -
          ((((C19772 * C1452 + C50610 * C1456) * C50653 +
             (C19772 * C1444 + C50610 * C1448) * C121) *
                C2175 +
            ((C19772 * C792 + C50610 * C798) * C50653 +
             (C19772 * C783 + C50610 * C788) * C121) *
                C2174 +
            ((C19772 * C413 + C50610 * C429) * C50653 +
             (C19772 * C399 + C50610 * C409) * C121) *
                C2173) *
               C50831 +
           (((C19772 * C281 + C50610 * C293) * C50653 +
             (C19772 * C263 + C50610 * C277) * C121) *
                C2175 +
            ((C19772 * C270 + C50610 * C286) * C50653 +
             (C19772 * C256 + C50610 * C266) * C121) *
                C2174 +
            ((C19772 * C136 + C50610 * C146) * C50653 +
             (C19772 * C125 + C50610 * C132) * C121) *
                C2173) *
               C33783) *
              C115) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C2173 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C2174 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C2175) *
               C33783 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C2173 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C2174 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C2175) *
               C50831) *
              C251 +
          (((C19912 * C254 -
             ((C19772 * C134 + C50610 * C144) * C248 +
              (C19772 * C123 + C50610 * C130) * C253) +
             C19913 * C249 - C19914 * C255 - C19915 * C250) *
                C2173 +
            (C19914 * C254 - (C19913 * C248 + C19912 * C253) + C19915 * C249 -
             C19916 * C255 - C19917 * C250) *
                C2174 +
            (C19916 * C254 - (C19915 * C248 + C19914 * C253) + C19917 * C249 -
             C19918 * C255 - C19919 * C250) *
                C2175) *
               C33783 +
           ((C20392 * C254 - (C22070 * C248 + C22071 * C253) + C20393 * C249 -
             C20394 * C255 - C20395 * C250) *
                C2173 +
            (C20394 * C254 - (C20393 * C248 + C20392 * C253) + C20395 * C249 -
             C20396 * C255 - C20397 * C250) *
                C2174 +
            (C20396 * C254 - (C20395 * C248 + C20394 * C253) + C20397 * C249 -
             (C19772 * C4070 + C50610 * C4072) * C255 -
             (C19772 * C4074 + C50610 * C4076) * C250) *
                C2175) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C1213 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50941 -
            (C17186 + C17187 + C17188) * C1214 -
            (C17189 + C17190 + C17191) * C50942 +
            (C17192 + C17193 + C17194) * C1215 +
            (C17195 + C17196 + C17197) * C1210) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C1213 +
            (C34129 + C34130 + C34131) * C50941 -
            (C17886 + C17885 + C17884) * C1214 -
            (C17889 + C17888 + C17887) * C50942 +
            (C18822 + C18821 + C18820) * C1215 +
            (C18825 + C18824 + C18823) * C1210) *
               C50755 * C50831) *
              C50888 +
          (((C17198 + C17199 + C17200) * C1214 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50941 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C1213) +
            (C17201 + C17202 + C17203) * C50942 -
            (C17204 + C17205 + C17206) * C1215 -
            (C17207 + C17208 + C17209) * C1210) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C1214 -
            ((C34132 + C34133 + C34134) * C50941 +
             (C34135 + C34136 + C34137) * C1213) +
            (C17895 + C17894 + C17893) * C50942 -
            (C16990 * C1444 + C16985 * C1448 + C16989 * C1445 + C16984 * C1449 +
             C16988 * C1446 + C16983 * C1450) *
                C1215 -
            (C16990 * C1452 + C16985 * C1456 + C16989 * C1453 + C16984 * C1457 +
             C16988 * C1454 + C16983 * C1458) *
                C1210) *
               C50755 * C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C2173 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C2174 +
            (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
             C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
                C2175) *
               C33783 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C2173 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C2174 +
            (C32792 + C32793 - C32794 - C32795 + C32796 + C32797) * C2175) *
               C50831) *
              C50888 +
          (((C19912 * C1214 -
             ((C19772 * C134 + C50610 * C144) * C50941 +
              (C19772 * C123 + C50610 * C130) * C1213) +
             C19913 * C50942 - C19914 * C1215 - C19915 * C1210) *
                C2173 +
            (C19914 * C1214 - (C19913 * C50941 + C19912 * C1213) +
             C19915 * C50942 - C19916 * C1215 - C19917 * C1210) *
                C2174 +
            (C19916 * C1214 - (C19915 * C50941 + C19914 * C1213) +
             C19917 * C50942 - C19918 * C1215 - C19919 * C1210) *
                C2175) *
               C33783 +
           ((C20392 * C1214 - (C22070 * C50941 + C22071 * C1213) +
             C20393 * C50942 - C20394 * C1215 - C20395 * C1210) *
                C2173 +
            (C20394 * C1214 - (C20393 * C50941 + C20392 * C1213) +
             C20395 * C50942 - C20396 * C1215 - C20397 * C1210) *
                C2174 +
            (C20396 * C1214 - (C20395 * C50941 + C20394 * C1213) +
             C20397 * C50942 - (C19772 * C4070 + C50610 * C4072) * C1215 -
             (C19772 * C4074 + C50610 * C4076) * C1210) *
                C2175) *
               C50831) *
              C50640) *
         C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C1213 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50941 -
            (C17186 + C17187 + C17188) * C1214 -
            (C17189 + C17190 + C17191) * C50942 +
            (C17192 + C17193 + C17194) * C1215 +
            (C17195 + C17196 + C17197) * C1210) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C1213 +
            (C34129 + C34130 + C34131) * C50941 -
            (C17886 + C17885 + C17884) * C1214 -
            (C17889 + C17888 + C17887) * C50942 +
            (C18822 + C18821 + C18820) * C1215 +
            (C18825 + C18824 + C18823) * C1210) *
               C50755 * C50831) *
              C50635 * C50897 +
          (((C17884 + C17885 + C17886) * C1214 -
            ((C34131 + C34130 + C34129) * C50941 +
             (C34128 + C34127 + C34126) * C1213) +
            (C17887 + C17888 + C17889) * C50942 -
            (C18820 + C18821 + C18822) * C1215 -
            (C18823 + C18824 + C18825) * C1210) *
               C50755 * C33783 +
           ((C18318 + C18317 + C18316) * C1214 -
            ((C34144 + C34145 + C34146) * C50941 +
             (C34147 + C34148 + C34149) * C1213) +
            (C18321 + C18320 + C18319) * C50942 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C1215 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C1210) *
               C50755 * C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C1213 +
             (C19772 * C133 + C50610 * C143) * C50941 - C19904 * C1214 -
             C19905 * C50942 + C19906 * C1215 + C19907 * C1210) *
                C2173 +
            (C19904 * C1213 + C19905 * C50941 - C19906 * C1214 -
             C19907 * C50942 + C19908 * C1215 + C19909 * C1210) *
                C2174 +
            (C19906 * C1213 + C19907 * C50941 - C19908 * C1214 -
             C19909 * C50942 + C19910 * C1215 + C19911 * C1210) *
                C2175) *
               C33783 +
           ((C23595 + C23596 - C23597 - C23598 + C23599 + C23600) * C2173 +
            (C23601 + C23602 - C23603 - C23604 + C23605 + C23606) * C2174 +
            (C32792 + C32793 - C32794 - C32795 + C32796 + C32797) * C2175) *
               C50831) *
              C50635 * C50897 +
          (((C23597 - (C23596 + C23595) + C23598 - C23599 - C23600) * C2173 +
            (C23603 - (C23602 + C23601) + C23604 - C23605 - C23606) * C2174 +
            (C32794 - (C32793 + C32792) + C32795 - C32796 - C32797) * C2175) *
               C33783 +
           ((C23609 - (C23608 + C23607) + C23610 - C23611 - C23612) * C2173 +
            (C23615 - (C23614 + C23613) + C23616 - C23617 - C23618) * C2174 +
            (C20690 * C1214 - (C20689 * C50941 + C20688 * C1213) +
             C20691 * C50942 - (C19772 * C20669 + C50610 * C20670) * C1215 -
             (C19772 * C20671 + C50610 * C20672) * C1210) *
                C2175) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
            C16990 * C124 + C16985 * C131) *
               C976 +
           (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
            C16990 * C135 + C16985 * C145) *
               C971 -
           (C17186 + C17187 + C17188) * C977 -
           (C17189 + C17190 + C17191) * C972 +
           (C17192 + C17193 + C17194) * C978 +
           (C17195 + C17196 + C17197) * C973 -
           (C18152 + C18153 + C18154) * C979 -
           (C18155 + C18156 + C18157) * C974) *
              C50755 * C33783 +
          ((C34126 + C34127 + C34128) * C976 +
           (C34129 + C34130 + C34131) * C971 -
           (C17886 + C17885 + C17884) * C977 -
           (C17889 + C17888 + C17887) * C972 +
           (C18822 + C18821 + C18820) * C978 +
           (C18825 + C18824 + C18823) * C973 -
           (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 + C16984 * C3084 +
            C16988 * C3080 + C16983 * C3083) *
               C979 -
           (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 + C16984 * C3090 +
            C16988 * C3085 + C16983 * C3089) *
               C974) *
              C50755 * C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C903 +
            (C34129 + C34130 + C34131) * C898 -
            (C17886 + C17885 + C17884) * C904 -
            (C17889 + C17888 + C17887) * C50705) *
               C50755 * C50831) *
              C900 +
          (((C17198 + C17199 + C17200) * C904 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C898 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C903) +
            (C17201 + C17202 + C17203) * C50705) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C904 -
            ((C34132 + C34133 + C34134) * C898 +
             (C34135 + C34136 + C34137) * C903) +
            (C17895 + C17894 + C17893) * C50705) *
               C50755 * C50831) *
              C901 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C903 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C898 -
            (C17514 + C17515 + C17516) * C904 -
            (C17517 + C17518 + C17519) * C50705) *
               C50755 * C33783 +
           ((C34454 + C34455 + C34456) * C903 +
            (C34457 + C34458 + C34459) * C898 -
            (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
             C16988 * C782 + C16983 * C787) *
                C904 -
            (C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
             C16988 * C791 + C16983 * C797) *
                C50705) *
               C50755 * C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C903 +
            (C34129 + C34130 + C34131) * C898 -
            (C17886 + C17885 + C17884) * C904 -
            (C17889 + C17888 + C17887) * C50705) *
               C50755 * C50831) *
              C50635 * C394 +
          (((C17884 + C17885 + C17886) * C904 -
            ((C34131 + C34130 + C34129) * C898 +
             (C34128 + C34127 + C34126) * C903) +
            (C17887 + C17888 + C17889) * C50705) *
               C50755 * C33783 +
           ((C18318 + C18317 + C18316) * C904 -
            ((C34144 + C34145 + C34146) * C898 +
             (C34147 + C34148 + C34149) * C903) +
            (C18321 + C18320 + C18319) * C50705) *
               C50755 * C50831) *
              C50635 * C395 +
          (((C34149 + C34148 + C34147) * C903 +
            (C34146 + C34145 + C34144) * C898 -
            (C18316 + C18317 + C18318) * C904 -
            (C18319 + C18320 + C18321) * C50705) *
               C50755 * C33783 +
           ((C16988 * C1731 + C16983 * C1739 + C16989 * C1730 + C16984 * C1738 +
             C16990 * C1729 + C16985 * C1737) *
                C903 +
            (C16988 * C1735 + C16983 * C1743 + C16989 * C1734 + C16984 * C1742 +
             C16990 * C1733 + C16985 * C1741) *
                C898 -
            (C16990 * C5983 + C16985 * C5984 + C16989 * C4484 + C16984 * C4492 +
             C16988 * C4485 + C16983 * C4493) *
                C904 -
            (C16990 * C5985 + C16985 * C5986 + C16989 * C4490 + C16984 * C4496 +
             C16988 * C4491 + C16983 * C4497) *
                C50705) *
               C50755 * C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C2173 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C2174 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C2175) *
               C33783 +
           ((C23048 + C23049 - C23050 - C23051) * C2173 +
            (C23052 + C23053 - C23054 - C23055) * C2174 +
            (C32294 + C32295 - C32296 - C32297) * C2175) *
               C50831) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C2173 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C2174 +
            (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
             C19917 * C50705) *
                C2175) *
               C33783 +
           ((C23433 - (C23434 + C23435) + C23436) * C2173 +
            (C23437 - (C23438 + C23439) + C23440) * C2174 +
            (C32642 - (C32643 + C32644) + C32645) * C2175) *
               C50831) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C2173 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C2174 +
            (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
                C2175) *
               C33783 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C2173 +
            (C22258 * C903 + C22259 * C898 - C31552 * C904 - C31553 * C50705) *
                C2174 +
            (C31552 * C903 + C31553 * C898 -
             (C19772 * C3082 + C50610 * C3087) * C904 -
             (C19772 * C3088 + C50610 * C3091) * C50705) *
                C2175) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C2173 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C2174 +
           (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
            C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
               C2175) *
              C33783 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C2173 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C2174 +
           (C20388 * C976 + C20389 * C971 - C20390 * C977 - C20391 * C972 +
            C21026 * C978 + C21027 * C973 -
            (C19772 * C21017 + C50610 * C21018) * C979 -
            (C19772 * C21019 + C50610 * C21020) * C974) *
               C2175) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C2173 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C2174 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C2175) *
               C33783 +
           ((C23048 + C23049 - C23050 - C23051) * C2173 +
            (C23052 + C23053 - C23054 - C23055) * C2174 +
            (C32294 + C32295 - C32296 - C32297) * C2175) *
               C50831) *
              C50635 * C394 +
          (((C23050 - (C23049 + C23048) + C23051) * C2173 +
            (C23054 - (C23053 + C23052) + C23055) * C2174 +
            (C32296 - (C32295 + C32294) + C32297) * C2175) *
               C33783 +
           ((C23058 - (C23057 + C23056) + C23059) * C2173 +
            (C23062 - (C23061 + C23060) + C23063) * C2174 +
            (C32298 - (C32299 + C32300) + C32301) * C2175) *
               C50831) *
              C50635 * C395 +
          ((C23088 * C2173 + C23089 * C2174 +
            (C32300 + C32299 - C32298 - C32301) * C2175) *
               C33783 +
           ((C23066 + C23065 - C23064 - C23067) * C2173 +
            (C23071 + C23070 - C23086 - C23087) * C2174 +
            (C23080 * C903 + C23081 * C898 -
             (C19772 * C21289 + C50610 * C21291) * C904 -
             (C19772 * C21290 + C50610 * C21292) * C50705) *
                C2175) *
               C50831) *
              C50635 * C396)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C903 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C898 -
             (C17186 + C17187 + C17188) * C904 -
             (C17189 + C17190 + C17191) * C50705) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C903 +
             (C34129 + C34130 + C34131) * C898 -
             (C17886 + C17885 + C17884) * C904 -
             (C17889 + C17888 + C17887) * C50705) *
                C50755 * C50831) *
               C50888 +
           (((C17198 + C17199 + C17200) * C904 -
             ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
               C16988 * C134 + C16983 * C144) *
                  C898 +
              (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
               C16988 * C123 + C16983 * C130) *
                  C903) +
             (C17201 + C17202 + C17203) * C50705) *
                C50755 * C33783 +
            ((C17892 + C17891 + C17890) * C904 -
             ((C34132 + C34133 + C34134) * C898 +
              (C34135 + C34136 + C34137) * C903) +
             (C17895 + C17894 + C17893) * C50705) *
                C50755 * C50831) *
               C50640) *
              C50897 +
          ((((C17884 + C17885 + C17886) * C904 -
             ((C34131 + C34130 + C34129) * C898 +
              (C34128 + C34127 + C34126) * C903) +
             (C17887 + C17888 + C17889) * C50705) *
                C50755 * C33783 +
            ((C18318 + C18317 + C18316) * C904 -
             ((C34144 + C34145 + C34146) * C898 +
              (C34147 + C34148 + C34149) * C903) +
             (C18321 + C18320 + C18319) * C50705) *
                C50755 * C50831) *
               C50888 +
           (((C34137 + C34136 + C34135) * C903 +
             (C34134 + C34133 + C34132) * C898 -
             (C17890 + C17891 + C17892) * C904 -
             (C17893 + C17894 + C17895) * C50705) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C903 +
             (C34141 + C34142 + C34143) * C898 -
             (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
              C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                 C904 -
             (C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
              C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                 C50705) *
                C50755 * C50831) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C903 +
              (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
              C19905 * C50705) *
                 C2173 +
             (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                 C2174 +
             (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                 C2175) *
                C33783 +
            ((C23048 + C23049 - C23050 - C23051) * C2173 +
             (C23052 + C23053 - C23054 - C23055) * C2174 +
             (C32294 + C32295 - C32296 - C32297) * C2175) *
                C50831) *
               C50888 +
           (((C19912 * C904 -
              ((C19772 * C134 + C50610 * C144) * C898 +
               (C19772 * C123 + C50610 * C130) * C903) +
              C19913 * C50705) *
                 C2173 +
             (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
              C19915 * C50705) *
                 C2174 +
             (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
              C19917 * C50705) *
                 C2175) *
                C33783 +
            ((C23433 - (C23434 + C23435) + C23436) * C2173 +
             (C23437 - (C23438 + C23439) + C23440) * C2174 +
             (C32642 - (C32643 + C32644) + C32645) * C2175) *
                C50831) *
               C50640) *
              C50897 +
          ((((C23050 - (C23049 + C23048) + C23051) * C2173 +
             (C23054 - (C23053 + C23052) + C23055) * C2174 +
             (C32296 - (C32295 + C32294) + C32297) * C2175) *
                C33783 +
            ((C23058 - (C23057 + C23056) + C23059) * C2173 +
             (C23062 - (C23061 + C23060) + C23063) * C2174 +
             (C32298 - (C32299 + C32300) + C32301) * C2175) *
                C50831) *
               C50888 +
           (((C23435 + C23434 - C23433 - C23436) * C2173 +
             (C23439 + C23438 - C23437 - C23440) * C2174 +
             (C32644 + C32643 - C32642 - C32645) * C2175) *
                C33783 +
            ((C23443 + C23442 - C23441 - C23444) * C2173 +
             (C23447 + C23446 - C23445 - C23448) * C2174 +
             (C21874 * C903 + C21875 * C898 -
              (C19772 * C3552 + C50610 * C3554) * C904 -
              (C19772 * C3556 + C50610 * C3558) * C50705) *
                 C2175) *
                C50831) *
               C50640) *
              C50733)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C903 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C898 -
            (C17186 + C17187 + C17188) * C904 -
            (C17189 + C17190 + C17191) * C50705) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C903 +
            (C34129 + C34130 + C34131) * C898 -
            (C17886 + C17885 + C17884) * C904 -
            (C17889 + C17888 + C17887) * C50705) *
               C50755 * C50831) *
              C900 +
          (((C17198 + C17199 + C17200) * C904 -
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C898 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C903) +
            (C17201 + C17202 + C17203) * C50705) *
               C50755 * C33783 +
           ((C17892 + C17891 + C17890) * C904 -
            ((C34132 + C34133 + C34134) * C898 +
             (C34135 + C34136 + C34137) * C903) +
            (C17895 + C17894 + C17893) * C50705) *
               C50755 * C50831) *
              C901 +
          (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
             C16990 * C126 + C16985 * C138) *
                C903 +
            (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
             C16990 * C137 + C16985 * C147) *
                C898 -
            (C17514 + C17515 + C17516) * C904 -
            (C17517 + C17518 + C17519) * C50705) *
               C50755 * C33783 +
           ((C34454 + C34455 + C34456) * C903 +
            (C34457 + C34458 + C34459) * C898 -
            (C16990 * C784 + C16985 * C793 + C16989 * C783 + C16984 * C788 +
             C16988 * C782 + C16983 * C787) *
                C904 -
            (C16990 * C794 + C16985 * C799 + C16989 * C792 + C16984 * C798 +
             C16988 * C791 + C16983 * C797) *
                C50705) *
               C50755 * C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
            C16990 * C124 + C16985 * C131) *
               C976 +
           (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
            C16990 * C135 + C16985 * C145) *
               C971 -
           (C17186 + C17187 + C17188) * C977 -
           (C17189 + C17190 + C17191) * C972 +
           (C17192 + C17193 + C17194) * C978 +
           (C17195 + C17196 + C17197) * C973 -
           (C18152 + C18153 + C18154) * C979 -
           (C18155 + C18156 + C18157) * C974) *
              C50755 * C33783 +
          ((C34126 + C34127 + C34128) * C976 +
           (C34129 + C34130 + C34131) * C971 -
           (C17886 + C17885 + C17884) * C977 -
           (C17889 + C17888 + C17887) * C972 +
           (C18822 + C18821 + C18820) * C978 +
           (C18825 + C18824 + C18823) * C973 -
           (C16990 * C3082 + C16985 * C3087 + C16989 * C3081 + C16984 * C3084 +
            C16988 * C3080 + C16983 * C3083) *
               C979 -
           (C16990 * C3088 + C16985 * C3091 + C16989 * C3086 + C16984 * C3090 +
            C16988 * C3085 + C16983 * C3089) *
               C974) *
              C50755 * C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C903 +
             (C19772 * C133 + C50610 * C143) * C898 - C19904 * C904 -
             C19905 * C50705) *
                C2173 +
            (C19904 * C903 + C19905 * C898 - C19906 * C904 - C19907 * C50705) *
                C2174 +
            (C19906 * C903 + C19907 * C898 - C19908 * C904 - C19909 * C50705) *
                C2175) *
               C33783 +
           ((C23048 + C23049 - C23050 - C23051) * C2173 +
            (C23052 + C23053 - C23054 - C23055) * C2174 +
            (C32294 + C32295 - C32296 - C32297) * C2175) *
               C50831) *
              C900 +
          (((C19912 * C904 -
             ((C19772 * C134 + C50610 * C144) * C898 +
              (C19772 * C123 + C50610 * C130) * C903) +
             C19913 * C50705) *
                C2173 +
            (C19914 * C904 - (C19913 * C898 + C19912 * C903) +
             C19915 * C50705) *
                C2174 +
            (C19916 * C904 - (C19915 * C898 + C19914 * C903) +
             C19917 * C50705) *
                C2175) *
               C33783 +
           ((C23433 - (C23434 + C23435) + C23436) * C2173 +
            (C23437 - (C23438 + C23439) + C23440) * C2174 +
            (C32642 - (C32643 + C32644) + C32645) * C2175) *
               C50831) *
              C901 +
          ((((C19772 * C124 + C50610 * C131) * C903 +
             (C19772 * C135 + C50610 * C145) * C898 - C20128 * C904 -
             C20129 * C50705) *
                C2173 +
            (C20128 * C903 + C20129 * C898 - C20130 * C904 - C20131 * C50705) *
                C2174 +
            (C20130 * C903 + C20131 * C898 - C20132 * C904 - C20133 * C50705) *
                C2175) *
               C33783 +
           ((C22420 * C903 + C22421 * C898 - C22258 * C904 - C22259 * C50705) *
                C2173 +
            (C22258 * C903 + C22259 * C898 - C31552 * C904 - C31553 * C50705) *
                C2174 +
            (C31552 * C903 + C31553 * C898 -
             (C19772 * C3082 + C50610 * C3087) * C904 -
             (C19772 * C3088 + C50610 * C3091) * C50705) *
                C2175) *
               C50831) *
              C902) *
         C50669) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19772 * C122 + C50610 * C129) * C976 +
            (C19772 * C133 + C50610 * C143) * C971 - C19904 * C977 -
            C19905 * C972 + C19906 * C978 + C19907 * C973 - C19908 * C979 -
            C19909 * C974) *
               C2173 +
           (C19904 * C976 + C19905 * C971 - C19906 * C977 - C19907 * C972 +
            C19908 * C978 + C19909 * C973 - C19910 * C979 - C19911 * C974) *
               C2174 +
           (C19906 * C976 + C19907 * C971 - C19908 * C977 - C19909 * C972 +
            C19910 * C978 + C19911 * C973 - C20570 * C979 - C20571 * C974) *
               C2175) *
              C33783 +
          ((C22062 * C976 + C22063 * C971 - C20386 * C977 - C20387 * C972 +
            C20388 * C978 + C20389 * C973 - C20390 * C979 - C20391 * C974) *
               C2173 +
           (C20386 * C976 + C20387 * C971 - C20388 * C977 - C20389 * C972 +
            C20390 * C978 + C20391 * C973 - C21026 * C979 - C21027 * C974) *
               C2174 +
           (C20388 * C976 + C20389 * C971 - C20390 * C977 - C20391 * C972 +
            C21026 * C978 + C21027 * C973 -
            (C19772 * C21017 + C50610 * C21018) * C979 -
            (C19772 * C21019 + C50610 * C21020) * C974) *
               C2175) *
              C50831) *
         C50635 * C50669) /
            (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                       C16984 * C130 + C16990 * C124 + C16985 * C131) *
                          C540 +
                      (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                       C16984 * C144 + C16990 * C135 + C16985 * C145) *
                          C50896 -
                      (C17186 + C17187 + C17188) * C541 -
                      (C17189 + C17190 + C17191) * C50705) *
                         C50755 * C33783 +
                     ((C34126 + C34127 + C34128) * C540 +
                      (C34129 + C34130 + C34131) * C50896 -
                      (C17886 + C17885 + C17884) * C541 -
                      (C17889 + C17888 + C17887) * C50705) *
                         C50755 * C50831) *
                        C50888 +
                    (((C17198 + C17199 + C17200) * C541 -
                      ((C16990 * C136 + C16985 * C146 + C16989 * C135 +
                        C16984 * C145 + C16988 * C134 + C16983 * C144) *
                           C50896 +
                       (C16990 * C125 + C16985 * C132 + C16989 * C124 +
                        C16984 * C131 + C16988 * C123 + C16983 * C130) *
                           C540) +
                      (C17201 + C17202 + C17203) * C50705) *
                         C50755 * C33783 +
                     ((C17892 + C17891 + C17890) * C541 -
                      ((C34132 + C34133 + C34134) * C50896 +
                       (C34135 + C34136 + C34137) * C540) +
                      (C17895 + C17894 + C17893) * C50705) *
                         C50755 * C50831) *
                        C50640) *
                       C1558 +
                   ((((C17884 + C17885 + C17886) * C541 -
                      ((C34131 + C34130 + C34129) * C50896 +
                       (C34128 + C34127 + C34126) * C540) +
                      (C17887 + C17888 + C17889) * C50705) *
                         C50755 * C33783 +
                     ((C18318 + C18317 + C18316) * C541 -
                      ((C34144 + C34145 + C34146) * C50896 +
                       (C34147 + C34148 + C34149) * C540) +
                      (C18321 + C18320 + C18319) * C50705) *
                         C50755 * C50831) *
                        C50888 +
                    (((C34137 + C34136 + C34135) * C540 +
                      (C34134 + C34133 + C34132) * C50896 -
                      (C17890 + C17891 + C17892) * C541 -
                      (C17893 + C17894 + C17895) * C50705) *
                         C50755 * C33783 +
                     ((C34138 + C34139 + C34140) * C540 +
                      (C34141 + C34142 + C34143) * C50896 -
                      (C16990 * C1094 + C16985 * C1098 + C16989 * C1095 +
                       C16984 * C1099 + C16988 * C1096 + C16983 * C1100) *
                          C541 -
                      (C16990 * C1102 + C16985 * C1106 + C16989 * C1103 +
                       C16984 * C1107 + C16988 * C1104 + C16983 * C1108) *
                          C50705) *
                         C50755 * C50831) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C19772 * C122 + C50610 * C129) * C540 +
                       (C19772 * C133 + C50610 * C143) * C50896 -
                       C19904 * C541 - C19905 * C50705) *
                          C2173 +
                      (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                       C19907 * C50705) *
                          C2174 +
                      (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                       C19909 * C50705) *
                          C2175) *
                         C33783 +
                     ((C22622 + C22623 - C22624 - C22625) * C2173 +
                      (C22626 + C22627 - C22628 - C22629) * C2174 +
                      (C31896 + C31897 - C31898 - C31899) * C2175) *
                         C50831) *
                        C50888 +
                    (((C19912 * C541 -
                       ((C19772 * C134 + C50610 * C144) * C50896 +
                        (C19772 * C123 + C50610 * C130) * C540) +
                       C19913 * C50705) *
                          C2173 +
                      (C19914 * C541 - (C19913 * C50896 + C19912 * C540) +
                       C19915 * C50705) *
                          C2174 +
                      (C19916 * C541 - (C19915 * C50896 + C19914 * C540) +
                       C19917 * C50705) *
                          C2175) *
                         C33783 +
                     ((C22638 - (C22639 + C22640) + C22641) * C2173 +
                      (C22642 - (C22643 + C22644) + C22645) * C2174 +
                      (C31900 - (C31901 + C31902) + C31903) * C2175) *
                         C50831) *
                        C50640) *
                       C1558 +
                   ((((C22624 - (C22623 + C22622) + C22625) * C2173 +
                      (C22628 - (C22627 + C22626) + C22629) * C2174 +
                      (C31898 - (C31897 + C31896) + C31899) * C2175) *
                         C33783 +
                     ((C22632 - (C22631 + C22630) + C22633) * C2173 +
                      (C22636 - (C22635 + C22634) + C22637) * C2174 +
                      (C33682 - (C33683 + C33684) + C33685) * C2175) *
                         C50831) *
                        C50888 +
                    (((C22640 + C22639 - C22638 - C22641) * C2173 +
                      (C22644 + C22643 - C22642 - C22645) * C2174 +
                      (C31902 + C31901 - C31900 - C31903) * C2175) *
                         C33783 +
                     ((C22648 + C22647 - C22646 - C22649) * C2173 +
                      (C22652 + C22651 - C22650 - C22653) * C2174 +
                      (C21874 * C540 + C21875 * C50896 -
                       (C19772 * C3552 + C50610 * C3554) * C541 -
                       (C19772 * C3556 + C50610 * C3558) * C50705) *
                          C2175) *
                         C50831) *
                        C50640) *
                       C50733)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16988 * C122 + C16983 * C129 + C16989 * C123 +
                      C16984 * C130 + C16990 * C124 + C16985 * C131) *
                         C540 +
                     (C16988 * C133 + C16983 * C143 + C16989 * C134 +
                      C16984 * C144 + C16990 * C135 + C16985 * C145) *
                         C50896 -
                     (C17186 + C17187 + C17188) * C541 -
                     (C17189 + C17190 + C17191) * C50705) *
                        C50755 * C33783 +
                    ((C34126 + C34127 + C34128) * C540 +
                     (C34129 + C34130 + C34131) * C50896 -
                     (C17886 + C17885 + C17884) * C541 -
                     (C17889 + C17888 + C17887) * C50705) *
                        C50755 * C50831) *
                       C50635 * C50943 +
                   (((C17884 + C17885 + C17886) * C541 -
                     ((C34131 + C34130 + C34129) * C50896 +
                      (C34128 + C34127 + C34126) * C540) +
                     (C17887 + C17888 + C17889) * C50705) *
                        C50755 * C33783 +
                    ((C18318 + C18317 + C18316) * C541 -
                     ((C34144 + C34145 + C34146) * C50896 +
                      (C34147 + C34148 + C34149) * C540) +
                     (C18321 + C18320 + C18319) * C50705) *
                        C50755 * C50831) *
                       C50635 * C50944 +
                   (((C34149 + C34148 + C34147) * C540 +
                     (C34146 + C34145 + C34144) * C50896 -
                     (C18316 + C18317 + C18318) * C541 -
                     (C18319 + C18320 + C18321) * C50705) *
                        C50755 * C33783 +
                    ((C35932 + C35933 + C35934) * C540 +
                     (C35935 + C35936 + C35937) * C50896 -
                     (C16990 * C5983 + C16985 * C5984 + C16989 * C4484 +
                      C16984 * C4492 + C16988 * C4485 + C16983 * C4493) *
                         C541 -
                     (C16990 * C5985 + C16985 * C5986 + C16989 * C4490 +
                      C16984 * C4496 + C16988 * C4491 + C16983 * C4497) *
                         C50705) *
                        C50755 * C50831) *
                       C50635 * C1974)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C19772 * C122 + C50610 * C129) * C540 +
                      (C19772 * C133 + C50610 * C143) * C50896 - C19904 * C541 -
                      C19905 * C50705) *
                         C2173 +
                     (C19904 * C540 + C19905 * C50896 - C19906 * C541 -
                      C19907 * C50705) *
                         C2174 +
                     (C19906 * C540 + C19907 * C50896 - C19908 * C541 -
                      C19909 * C50705) *
                         C2175) *
                        C33783 +
                    ((C22622 + C22623 - C22624 - C22625) * C2173 +
                     (C22626 + C22627 - C22628 - C22629) * C2174 +
                     (C31896 + C31897 - C31898 - C31899) * C2175) *
                        C50831) *
                       C50635 * C50943 +
                   (((C22624 - (C22623 + C22622) + C22625) * C2173 +
                     (C22628 - (C22627 + C22626) + C22629) * C2174 +
                     (C31898 - (C31897 + C31896) + C31899) * C2175) *
                        C33783 +
                    ((C22632 - (C22631 + C22630) + C22633) * C2173 +
                     (C22636 - (C22635 + C22634) + C22637) * C2174 +
                     (C33682 - (C33683 + C33684) + C33685) * C2175) *
                        C50831) *
                       C50635 * C50944 +
                   ((C24550 * C2173 + C24551 * C2174 +
                     (C33684 + C33683 - C33682 - C33685) * C2175) *
                        C33783 +
                    ((C24542 + C24541 - C24540 - C24543) * C2173 +
                     (C24546 + C24545 - C24544 - C24547) * C2174 +
                     (C23080 * C540 + C23081 * C50896 -
                      (C19772 * C21289 + C50610 * C21291) * C541 -
                      (C19772 * C21290 + C50610 * C21292) * C50705) *
                         C2175) *
                        C50831) *
                       C50635 * C1974)) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C253 +
            (C34129 + C34130 + C34131) * C248 -
            (C17886 + C17885 + C17884) * C254 -
            (C17889 + C17888 + C17887) * C249 +
            (C18822 + C18821 + C18820) * C255 +
            (C18825 + C18824 + C18823) * C250) *
               C50755 * C50831) *
              C50635 * C1558 +
          (((C17884 + C17885 + C17886) * C254 -
            ((C34131 + C34130 + C34129) * C248 +
             (C34128 + C34127 + C34126) * C253) +
            (C17887 + C17888 + C17889) * C249 -
            (C18820 + C18821 + C18822) * C255 -
            (C18823 + C18824 + C18825) * C250) *
               C50755 * C33783 +
           ((C18318 + C18317 + C18316) * C254 -
            ((C34144 + C34145 + C34146) * C248 +
             (C34147 + C34148 + C34149) * C253) +
            (C18321 + C18320 + C18319) * C249 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C255 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C250) *
               C50755 * C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C121 +
             (C34129 + C34130 + C34131) * C50653) *
                C50755 * C50831) *
               C900 -
           (((C34132 + C34133 + C34134) * C50653 +
             (C34135 + C34136 + C34137) * C121) *
                C50755 * C50831 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C50755 * C33783) *
               C901 +
           (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
              C16990 * C126 + C16985 * C138) *
                 C121 +
             (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
              C16990 * C137 + C16985 * C147) *
                 C50653) *
                C50755 * C33783 +
            ((C34454 + C34455 + C34456) * C121 +
             (C34457 + C34458 + C34459) * C50653) *
                C50755 * C50831) *
               C902) *
              C1558 +
          ((((C34137 + C34136 + C34135) * C121 +
             (C34134 + C34133 + C34132) * C50653) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C121 +
             (C34141 + C34142 + C34143) * C50653) *
                C50755 * C50831) *
               C901 -
           (((C34144 + C34145 + C34146) * C50653 +
             (C34147 + C34148 + C34149) * C121) *
                C50755 * C50831 +
            ((C34131 + C34130 + C34129) * C50653 +
             (C34128 + C34127 + C34126) * C121) *
                C50755 * C33783) *
               C900 -
           (((C16990 * C425 + C16985 * C436 + C16989 * C424 + C16984 * C435 +
              C16988 * C423 + C16983 * C434) *
                 C50653 +
             (C16990 * C406 + C16985 * C426 + C16989 * C405 + C16984 * C420 +
              C16988 * C404 + C16983 * C419) *
                 C121) *
                C50755 * C50831 +
            ((C34459 + C34458 + C34457) * C50653 +
             (C34456 + C34455 + C34454) * C121) *
                C50755 * C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C121 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C50653) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C121 +
            (C34129 + C34130 + C34131) * C50653) *
               C50755 * C50831) *
              C50635 * C1724 -
          (((C34144 + C34145 + C34146) * C50653 +
            (C34147 + C34148 + C34149) * C121) *
               C50755 * C50831 +
           ((C34131 + C34130 + C34129) * C50653 +
            (C34128 + C34127 + C34126) * C121) *
               C50755 * C33783) *
              C50635 * C1725 +
          (((C34149 + C34148 + C34147) * C121 +
            (C34146 + C34145 + C34144) * C50653) *
               C50755 * C33783 +
           ((C35932 + C35933 + C35934) * C121 +
            (C35935 + C35936 + C35937) * C50653) *
               C50755 * C50831) *
              C50635 * C1726 -
          (((C16990 * C5384 + C16985 * C5388 + C16989 * C5383 + C16984 * C5387 +
             C16988 * C5382 + C16983 * C5386) *
                C50653 +
            (C16990 * C5379 + C16985 * C5385 + C16989 * C5378 + C16984 * C5381 +
             C16988 * C5377 + C16983 * C5380) *
                C121) *
               C50755 * C50831 +
           ((C35937 + C35936 + C35935) * C50653 +
            (C35934 + C35933 + C35932) * C121) *
               C50755 * C33783) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C900 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C2173 +
             (C20128 * C121 + C20129 * C50653) * C2174 +
             (C20130 * C121 + C20131 * C50653) * C2175) *
                C33783 +
            ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
             (C31700 + C31701) * C2175) *
                C50831) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C901 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C900 -
           ((((C19772 * C2565 + C50610 * C2569) * C50653 +
              (C19772 * C2560 + C50610 * C2566) * C121) *
                 C2175 +
             (C22419 + C22418) * C2174 + (C22427 + C22426) * C2173) *
                C50831 +
            ((C31701 + C31700) * C2175 + (C22413 + C22412) * C2174 +
             (C22425 + C22424) * C2173) *
                C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C2173 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C2174 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C2175) *
               C33783 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C2173 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C2174 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C2175) *
               C50831) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C2173 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C2174 +
            (C33092 - (C33091 + C33090) + C33093 - C33094 - C33095) * C2175) *
               C33783 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C2173 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C2174 +
            (C20690 * C254 - (C20689 * C248 + C20688 * C253) + C20691 * C249 -
             (C19772 * C20669 + C50610 * C20670) * C255 -
             (C19772 * C20671 + C50610 * C20672) * C250) *
                C2175) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C121 +
             (C19772 * C133 + C50610 * C143) * C50653) *
                C2173 +
            (C19904 * C121 + C19905 * C50653) * C2174 +
            (C19906 * C121 + C19907 * C50653) * C2175) *
               C33783 +
           ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
            (C31394 + C31395) * C2175) *
               C50831) *
              C50635 * C1724 -
          (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
            (C22083 + C22082) * C2173) *
               C50831 +
           ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
            (C22081 + C22080) * C2173) *
               C33783) *
              C50635 * C1725 +
          ((C22098 * C2173 + C22066 * C2174 + (C31401 + C31400) * C2175) *
               C33783 +
           ((C22097 + C22096) * C2173 + (C22095 + C22094) * C2174 +
            (C33194 + C33195) * C2175) *
               C50831) *
              C50635 * C1726 -
          ((((C19772 * C23045 + C50610 * C23046) * C50653 +
             (C19772 * C23043 + C50610 * C23044) * C121) *
                C2175 +
            (C24044 + C24043) * C2174 + (C24051 + C24050) * C2173) *
               C50831 +
           ((C33195 + C33194) * C2175 + C24037 * C2174 + C24038 * C2173) *
               C33783) *
              C50635 * C1727)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C121 +
             (C34129 + C34130 + C34131) * C50653) *
                C50755 * C50831) *
               C50888 -
           (((C34132 + C34133 + C34134) * C50653 +
             (C34135 + C34136 + C34137) * C121) *
                C50755 * C50831 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C50755 * C33783) *
               C50640) *
              C50943 +
          ((((C34137 + C34136 + C34135) * C121 +
             (C34134 + C34133 + C34132) * C50653) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C121 +
             (C34141 + C34142 + C34143) * C50653) *
                C50755 * C50831) *
               C50640 -
           (((C34144 + C34145 + C34146) * C50653 +
             (C34147 + C34148 + C34149) * C121) *
                C50755 * C50831 +
            ((C34131 + C34130 + C34129) * C50653 +
             (C34128 + C34127 + C34126) * C121) *
                C50755 * C33783) *
               C50888) *
              C50944 +
          ((((C34149 + C34148 + C34147) * C121 +
             (C34146 + C34145 + C34144) * C50653) *
                C50755 * C33783 +
            ((C35932 + C35933 + C35934) * C121 +
             (C35935 + C35936 + C35937) * C50653) *
                C50755 * C50831) *
               C50888 -
           (((C16990 * C1732 + C16985 * C1740 + C16989 * C1733 +
              C16984 * C1741 + C16988 * C1734 + C16983 * C1742) *
                 C50653 +
             (C16990 * C1728 + C16985 * C1736 + C16989 * C1729 +
              C16984 * C1737 + C16988 * C1730 + C16983 * C1738) *
                 C121) *
                C50755 * C50831 +
            ((C34143 + C34142 + C34141) * C50653 +
             (C34140 + C34139 + C34138) * C121) *
                C50755 * C33783) *
               C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C50888 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C50640) *
              C50943 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C50640 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C50888) *
              C50944 +
          (((C22098 * C2173 + C22066 * C2174 + (C31401 + C31400) * C2175) *
                C33783 +
            ((C22097 + C22096) * C2173 + (C22095 + C22094) * C2174 +
             (C33194 + C33195) * C2175) *
                C50831) *
               C50888 -
           ((((C19772 * C4486 + C50610 * C4494) * C50653 +
              (C19772 * C4482 + C50610 * C4488) * C121) *
                 C2175 +
             (C22093 + C22092) * C2174 + (C22091 + C22090) * C2173) *
                C50831 +
            ((C31399 + C31398) * C2175 + C22067 * C2174 + C22099 * C2173) *
                C33783) *
               C50640) *
              C1974)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
              C16990 * C124 + C16985 * C131) *
                 C121 +
             (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
              C16990 * C135 + C16985 * C145) *
                 C50653) *
                C50755 * C33783 +
            ((C34126 + C34127 + C34128) * C121 +
             (C34129 + C34130 + C34131) * C50653) *
                C50755 * C50831) *
               C900 -
           (((C34132 + C34133 + C34134) * C50653 +
             (C34135 + C34136 + C34137) * C121) *
                C50755 * C50831 +
            ((C16990 * C136 + C16985 * C146 + C16989 * C135 + C16984 * C145 +
              C16988 * C134 + C16983 * C144) *
                 C50653 +
             (C16990 * C125 + C16985 * C132 + C16989 * C124 + C16984 * C131 +
              C16988 * C123 + C16983 * C130) *
                 C121) *
                C50755 * C33783) *
               C901 +
           (((C16988 * C124 + C16983 * C131 + C16989 * C125 + C16984 * C132 +
              C16990 * C126 + C16985 * C138) *
                 C121 +
             (C16988 * C135 + C16983 * C145 + C16989 * C136 + C16984 * C146 +
              C16990 * C137 + C16985 * C147) *
                 C50653) *
                C50755 * C33783 +
            ((C34454 + C34455 + C34456) * C121 +
             (C34457 + C34458 + C34459) * C50653) *
                C50755 * C50831) *
               C902) *
              C1558 +
          ((((C34137 + C34136 + C34135) * C121 +
             (C34134 + C34133 + C34132) * C50653) *
                C50755 * C33783 +
            ((C34138 + C34139 + C34140) * C121 +
             (C34141 + C34142 + C34143) * C50653) *
                C50755 * C50831) *
               C901 -
           (((C34144 + C34145 + C34146) * C50653 +
             (C34147 + C34148 + C34149) * C121) *
                C50755 * C50831 +
            ((C34131 + C34130 + C34129) * C50653 +
             (C34128 + C34127 + C34126) * C121) *
                C50755 * C33783) *
               C900 -
           (((C16990 * C425 + C16985 * C436 + C16989 * C424 + C16984 * C435 +
              C16988 * C423 + C16983 * C434) *
                 C50653 +
             (C16990 * C406 + C16985 * C426 + C16989 * C405 + C16984 * C420 +
              C16988 * C404 + C16983 * C419) *
                 C121) *
                C50755 * C50831 +
            ((C34459 + C34458 + C34457) * C50653 +
             (C34456 + C34455 + C34454) * C121) *
                C50755 * C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16988 * C122 + C16983 * C129 + C16989 * C123 + C16984 * C130 +
             C16990 * C124 + C16985 * C131) *
                C253 +
            (C16988 * C133 + C16983 * C143 + C16989 * C134 + C16984 * C144 +
             C16990 * C135 + C16985 * C145) *
                C248 -
            (C17186 + C17187 + C17188) * C254 -
            (C17189 + C17190 + C17191) * C249 +
            (C17192 + C17193 + C17194) * C255 +
            (C17195 + C17196 + C17197) * C250) *
               C50755 * C33783 +
           ((C34126 + C34127 + C34128) * C253 +
            (C34129 + C34130 + C34131) * C248 -
            (C17886 + C17885 + C17884) * C254 -
            (C17889 + C17888 + C17887) * C249 +
            (C18822 + C18821 + C18820) * C255 +
            (C18825 + C18824 + C18823) * C250) *
               C50755 * C50831) *
              C50635 * C1558 +
          (((C17884 + C17885 + C17886) * C254 -
            ((C34131 + C34130 + C34129) * C248 +
             (C34128 + C34127 + C34126) * C253) +
            (C17887 + C17888 + C17889) * C249 -
            (C18820 + C18821 + C18822) * C255 -
            (C18823 + C18824 + C18825) * C250) *
               C50755 * C33783 +
           ((C18318 + C18317 + C18316) * C254 -
            ((C34144 + C34145 + C34146) * C248 +
             (C34147 + C34148 + C34149) * C253) +
            (C18321 + C18320 + C18319) * C249 -
            (C16990 * C2560 + C16985 * C2566 + C16989 * C2559 + C16984 * C2562 +
             C16988 * C2558 + C16983 * C2561) *
                C255 -
            (C16990 * C2565 + C16985 * C2569 + C16989 * C2564 + C16984 * C2568 +
             C16988 * C2563 + C16983 * C2567) *
                C250) *
               C50755 * C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C19772 * C122 + C50610 * C129) * C121 +
              (C19772 * C133 + C50610 * C143) * C50653) *
                 C2173 +
             (C19904 * C121 + C19905 * C50653) * C2174 +
             (C19906 * C121 + C19907 * C50653) * C2175) *
                C33783 +
            ((C22080 + C22081) * C2173 + (C22026 + C22027) * C2174 +
             (C31394 + C31395) * C2175) *
                C50831) *
               C900 -
           (((C31396 + C31397) * C2175 + (C22040 + C22041) * C2174 +
             (C22088 + C22089) * C2173) *
                C50831 +
            ((C19915 * C50653 + C19914 * C121) * C2175 +
             (C19913 * C50653 + C19912 * C121) * C2174 +
             ((C19772 * C134 + C50610 * C144) * C50653 +
              (C19772 * C123 + C50610 * C130) * C121) *
                 C2173) *
                C33783) *
               C901 +
           ((((C19772 * C124 + C50610 * C131) * C121 +
              (C19772 * C135 + C50610 * C145) * C50653) *
                 C2173 +
             (C20128 * C121 + C20129 * C50653) * C2174 +
             (C20130 * C121 + C20131 * C50653) * C2175) *
                C33783 +
            ((C22424 + C22425) * C2173 + (C22412 + C22413) * C2174 +
             (C31700 + C31701) * C2175) *
                C50831) *
               C902) *
              C1558 +
          ((((C22089 + C22088) * C2173 + (C22041 + C22040) * C2174 +
             (C31397 + C31396) * C2175) *
                C33783 +
            ((C22087 + C22086) * C2173 + (C22035 + C22034) * C2174 +
             (C31398 + C31399) * C2175) *
                C50831) *
               C901 -
           (((C31400 + C31401) * C2175 + (C22033 + C22032) * C2174 +
             (C22083 + C22082) * C2173) *
                C50831 +
            ((C31395 + C31394) * C2175 + (C22027 + C22026) * C2174 +
             (C22081 + C22080) * C2173) *
                C33783) *
               C900 -
           ((((C19772 * C2565 + C50610 * C2569) * C50653 +
              (C19772 * C2560 + C50610 * C2566) * C121) *
                 C2175 +
             (C22419 + C22418) * C2174 + (C22427 + C22426) * C2173) *
                C50831 +
            ((C31701 + C31700) * C2175 + (C22413 + C22412) * C2174 +
             (C22425 + C22424) * C2173) *
                C33783) *
               C902) *
              C50733)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19772 * C122 + C50610 * C129) * C253 +
             (C19772 * C133 + C50610 * C143) * C248 - C19904 * C254 -
             C19905 * C249 + C19906 * C255 + C19907 * C250) *
                C2173 +
            (C19904 * C253 + C19905 * C248 - C19906 * C254 - C19907 * C249 +
             C19908 * C255 + C19909 * C250) *
                C2174 +
            (C19906 * C253 + C19907 * C248 - C19908 * C254 - C19909 * C249 +
             C19910 * C255 + C19911 * C250) *
                C2175) *
               C33783 +
           ((C23911 + C23912 - C23913 - C23914 + C23915 + C23916) * C2173 +
            (C23917 + C23918 - C23919 - C23920 + C23921 + C23922) * C2174 +
            (C33090 + C33091 - C33092 - C33093 + C33094 + C33095) * C2175) *
               C50831) *
              C50635 * C1558 +
          (((C23913 - (C23912 + C23911) + C23914 - C23915 - C23916) * C2173 +
            (C23919 - (C23918 + C23917) + C23920 - C23921 - C23922) * C2174 +
            (C33092 - (C33091 + C33090) + C33093 - C33094 - C33095) * C2175) *
               C33783 +
           ((C23925 - (C23924 + C23923) + C23926 - C23927 - C23928) * C2173 +
            (C23931 - (C23930 + C23929) + C23932 - C23933 - C23934) * C2174 +
            (C20690 * C254 - (C20689 * C248 + C20688 * C253) + C20691 * C249 -
             (C19772 * C20669 + C50610 * C20670) * C255 -
             (C19772 * C20671 + C50610 * C20672) * C250) *
                C2175) *
               C50831) *
              C50635 * C50733)) /
            (p * q * std::sqrt(p + q));
}
