/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AC_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_13_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49697 = 0 * ce;
    const double C49696 = ce * de;
    const double C49695 = 0 * de;
    const double C49694 = ce + de;
    const double C49693 = 0 * de;
    const double C49692 = xC - xD;
    const double C49760 = ae * be;
    const double C49759 = ae + be;
    const double C49758 = 0 * be;
    const double C49757 = yA - yB;
    const double C49788 = 0 * ae;
    const double C49783 = 0 * be;
    const double C49822 = yP - yQ;
    const double C49821 = p + q;
    const double C49820 = p * q;
    const double C49819 = xP - xQ;
    const double C49827 = bs[3];
    const double C49838 = bs[4];
    const double C49846 = bs[5];
    const double C49865 = bs[6];
    const double C49895 = bs[7];
    const double C50021 = zP - zQ;
    const double C50237 = bs[2];
    const double C122 = bs[0];
    const double C50619 = xA - xB;
    const double C50646 = yC - yD;
    const double C50658 = zC - zD;
    const double C50755 = zA - zB;
    const double C49702 = C49697 / C49694;
    const double C49699 = 2 * C49694;
    const double C49698 = std::pow(C49694, 2);
    const double C49701 = C49696 * C49692;
    const double C49700 = C49692 * C49695;
    const double C50601 = C49692 * de;
    const double C50600 = C49692 * ce;
    const double C50599 = std::pow(C49692, 2);
    const double C49761 = std::pow(C49759, 2);
    const double C49784 = 2 * C49759;
    const double C49830 = C49694 * C49759;
    const double C143 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (yP - yQ) * (xP - xQ) * ae * ce) /
                         C49694) /
                        C49759;
    const double C49762 = C49760 * C49757;
    const double C49785 = C49757 * C49758;
    const double C50740 = std::pow(C49757, 2);
    const double C50792 = C49757 * be;
    const double C50791 = C49757 * ae;
    const double C49793 = C49788 / C49759;
    const double C49828 = C49822 * ae;
    const double C50047 = std::pow(C49822, 2);
    const double C49823 = 2 * C49820;
    const double C49829 = C49822 * C49819;
    const double C49848 = std::pow(C49819, 2);
    const double C49929 = C49819 * ce;
    const double C50031 = std::pow(C50021, 2);
    const double C50622 = C50619 * be;
    const double C50621 = C50619 * ae;
    const double C50620 = std::pow(C50619, 2);
    const double C50647 = std::pow(C50646, 2);
    const double C50697 = C50646 * de;
    const double C50696 = C50646 * ce;
    const double C50659 = std::pow(C50658, 2);
    const double C50723 = C50658 * de;
    const double C50722 = C50658 * ce;
    const double C50756 = std::pow(C50755, 2);
    const double C50820 = C50755 * be;
    const double C50819 = C50755 * ae;
    const double C50609 = std::pow(C49699, -1);
    const double C50887 = std::pow(C49699, -2);
    const double C49703 = 2 * C49698;
    const double C50878 = 4 * C49698;
    const double C49704 = C49700 / C49694;
    const double C50602 = C50599 * C49696;
    const double C49763 = 2 * C49761;
    const double C50885 = 4 * C49761;
    const double C50630 = std::pow(C49784, -1);
    const double C50900 = std::pow(C49784, -2);
    const double C49790 = C49785 / C49759;
    const double C50741 = C50740 * C49760;
    const double C49832 = C49827 * C49828;
    const double C49840 = C49838 * C49828;
    const double C49851 = C49846 * C49828;
    const double C49871 = C49865 * C49828;
    const double C49903 = C49895 * C49828;
    const double C49824 = C49823 / C49821;
    const double C129 = (-(bs[1] * C49828 * C49823) / C49821) / C49759;
    const double C123 = -(C49819 * bs[1] * C49823) / C49821;
    const double C286 = -(C49822 * bs[1] * C49823) / C49821;
    const double C463 = -(C50021 * bs[1] * C49823) / C49821;
    const double C49833 = C49829 * ae;
    const double C49932 = C49838 * C49929;
    const double C49936 = C49846 * C49929;
    const double C49946 = C49827 * C49929;
    const double C49959 = C49865 * C49929;
    const double C49979 = C49895 * C49929;
    const double C130 = (bs[1] * C49929 * C49823) / (C49821 * C49694);
    const double C50623 = C50620 * C49760;
    const double C50648 = C50647 * C49696;
    const double C50660 = C50659 * C49696;
    const double C50757 = C50756 * C49760;
    const double C49709 = C49695 / C49703;
    const double C49707 = C49693 / C49703;
    const double C49706 = 0 - C49704;
    const double C50603 = C50602 / C49694;
    const double C49787 = C49758 / C49763;
    const double C49791 = C49783 / C49763;
    const double C49794 = 0 - C49790;
    const double C50742 = C50741 / C49759;
    const double C49826 = -C49824;
    const double C49837 = std::pow(C49824, 4);
    const double C49864 = std::pow(C49824, 6);
    const double C144 =
        (-(C49819 * std::pow(-C49824, 3) * bs[3] * C49822 * C49819 * ae * ce) /
         C49694) /
            C49759 -
        (std::pow(C49824, 2) * bs[2] * C49822 * ae * ce) / (C49694 * C49759);
    const double C50238 = std::pow(C49824, 2);
    const double C131 =
        (C49819 * std::pow(C49824, 2) * bs[2] * C49828) / C49759;
    const double C132 =
        (ce * bs[1] * C49823) / (C49821 * C49694) -
        (C49819 * std::pow(C49824, 2) * bs[2] * C49929) / C49694;
    const double C49835 = C49833 * ce;
    const double C50624 = C50623 / C49759;
    const double C50649 = C50648 / C49694;
    const double C50661 = C50660 / C49694;
    const double C50758 = C50757 / C49759;
    const double C49711 = C49706 * ce;
    const double C50604 = -C50603;
    const double C49797 = C49794 * ae;
    const double C50743 = -C50742;
    const double C49831 = std::pow(C49826, 3);
    const double C49845 = std::pow(C49826, 5);
    const double C49894 = std::pow(C49826, 7);
    const double C49842 = C49837 * C49840;
    const double C49933 = C49838 * C49837;
    const double C49934 = C49837 * C49932;
    const double C49874 = C49864 * C49871;
    const double C49964 = C49864 * C49959;
    const double C49980 = C49865 * C49864;
    const double C50239 = C50237 * C50238;
    const double C296 = -(C49822 * C50238 * C50237 * C49929) / C49694;
    const double C297 = (C49822 * C50238 * C50237 * C49828) / C49759 -
                        (ae * bs[1] * C49823) / (C49821 * C49759);
    const double C473 = -(C50021 * C50238 * C50237 * C49929) / C49694;
    const double C474 = (C50021 * C50238 * C50237 * C49828) / C49759;
    const double C49839 = C49838 * C49835;
    const double C49849 = C49846 * C49835;
    const double C49868 = C49865 * C49835;
    const double C49900 = C49895 * C49835;
    const double C50625 = -C50624;
    const double C50650 = -C50649;
    const double C50662 = -C50661;
    const double C50759 = -C50758;
    const double C49714 = C49711 / C49694;
    const double C50605 = std::exp(C50604);
    const double C49799 = C49797 / C49759;
    const double C50744 = std::exp(C50743);
    const double C49834 = C49831 * C49832;
    const double C49930 = C49827 * C49831;
    const double C49947 = C49831 * C49946;
    const double C315 =
        (-(C49822 * C49831 * C49827 * C49835) / C49694) / C49759 -
        (ae * std::pow(C49824, 2) * bs[2] * C49819 * ce) / C49830;
    const double C492 =
        (-((zP - zQ) * C49831 * C49827 * C49835) / C49694) / C49759;
    const double C49853 = C49845 * C49851;
    const double C49939 = C49846 * C49845;
    const double C49940 = C49845 * C49936;
    const double C49907 = C49894 * C49903;
    const double C49984 = C49894 * C49979;
    const double C49847 = C49842 * ce;
    const double C49844 = C49819 * C49842;
    const double C50344 = C49822 * C49842;
    const double C49938 = C49819 * C49933;
    const double C49937 = C49933 * ce;
    const double C50245 = C49933 * C49848;
    const double C50347 = C49933 * C50047;
    const double C50398 = C49822 * C49933;
    const double C50397 = C49933 * ae;
    const double C50578 = C49933 * C50031;
    const double C50589 = C50021 * C49933;
    const double C49949 = C49819 * C49934;
    const double C50046 = ae * C49934;
    const double C50044 = C49822 * C49934;
    const double C49877 = C49874 * C49848;
    const double C49896 = C49874 * ce;
    const double C49892 = C49819 * C49874;
    const double C50452 = C49822 * C49874;
    const double C50494 = C49874 * C50031;
    const double C49967 = C49819 * C49964;
    const double C50102 = C49964 * C50047;
    const double C50164 = ae * C49964;
    const double C50162 = C49822 * C49964;
    const double C50194 = C49964 * C50031;
    const double C50208 = C50021 * C49964;
    const double C49987 = C49980 * C49848;
    const double C49986 = C49819 * C49980;
    const double C49985 = C49980 * ce;
    const double C50456 = C49980 * C50047;
    const double C124 = C50239 * C49848 - (bs[1] * C49823) / C49821;
    const double C285 = C49822 * C49819 * C50239;
    const double C290 = C50239 * C50047 - (bs[1] * C49823) / C49821;
    const double C462 = C50021 * C49819 * C50239;
    const double C467 = C50239 * C50031 - (bs[1] * C49823) / C49821;
    const double C894 = C50021 * C49822 * C50239;
    const double C49841 = C49837 * C49839;
    const double C49852 = C49845 * C49849;
    const double C49873 = C49864 * C49868;
    const double C49906 = C49894 * C49900;
    const double C50626 = std::exp(C50625);
    const double C50651 = std::exp(C50650);
    const double C50663 = std::exp(C50662);
    const double C50760 = std::exp(C50759);
    const double C49716 = C49714 - C49707;
    const double C49705 = C49701 * C50605;
    const double C50606 = C50605 * C50600;
    const double C50610 = C50609 * C50605;
    const double C50875 = C50605 * C50601;
    const double C50872 = C50605 / C49699;
    const double C1032 = C50887 * C50605;
    const double C49801 = C49799 - C49791;
    const double C154 = C50744 * C144;
    const double C152 = C50744 * C131;
    const double C5519 = C50744 * C474;
    const double C49764 = C49762 * C50744;
    const double C117 = -(2 * ae * be * (yA - yB) * C50744) / (ae + be);
    const double C50793 = C50744 * C50791;
    const double C50796 = C50630 * C50744;
    const double C50904 = C50744 * C50792;
    const double C50899 = C50744 / C49784;
    const double C2302 = C50900 * C50744;
    const double C145 =
        (-(C49819 * C49834 * ce) / C49694) / C49759 -
        (C49831 * C49827 * C49835) / C49830 +
        C49819 * ((-(C49819 * std::pow(C49824, 4) * bs[4] * C49835) / C49694) /
                      C49759 -
                  (C49834 * ce) / C49830);
    const double C133 =
        (std::pow(C49824, 2) * bs[2] * C49828 + C49834 * C49848) / C49759;
    const double C135 =
        (2 * C49819 * C49834 + C49819 * (C49834 + C49842 * C49848)) / C49759;
    const double C295 =
        (C49822 * C49819 * C49834 + C49819 * C50239 * ae) / C49759;
    const double C305 =
        (C50238 * C50237 * C49828 + C49822 * (C49822 * C49834 + C50239 * ae) +
         C49822 * C50239 * ae) /
        C49759;
    const double C472 = (C50021 * C49819 * C49834) / C49759;
    const double C476 = (C50021 * (C49834 + C49842 * C49848)) / C49759;
    const double C482 = (C50238 * C50237 * C49828 + C49834 * C50031) / C49759;
    const double C899 = (C50021 * (C49822 * C49834 + C50239 * ae)) / C49759;
    const double C1868 =
        (2 * C50021 * C49834 + C50021 * (C49834 + C49842 * C50031)) / C49759;
    const double C49950 = C49930 * ce;
    const double C50244 = C49819 * C49930;
    const double C50346 = C49822 * C49930;
    const double C50345 = C49930 * ae;
    const double C299 = (C49822 * (C49834 + C49842 * C49848) +
                         (C50239 + C49930 * C49848) * ae) /
                        C49759;
    const double C1121 =
        (2 * (C49822 * C49834 + C50239 * ae) +
         C49822 * (C49834 + C49822 * (C49822 * C49842 + C49930 * ae) +
                   C49822 * C49930 * ae) +
         (C50239 + C49930 * C50047) * ae) /
        C49759;
    const double C1235 = (C49822 * C49834 + C50239 * ae +
                          (C49822 * C49842 + C49930 * ae) * C50031) /
                         C49759;
    const double C1584 =
        (C50021 * (C49834 + C49822 * (C49822 * C49842 + C49930 * ae) +
                   C49822 * C49930 * ae)) /
        C49759;
    const double C125 =
        2 * C49819 * C50239 + C49819 * (C50239 + C49930 * C49848);
    const double C287 = C49822 * (C50239 + C49930 * C49848);
    const double C464 = C50021 * (C50239 + C49930 * C49848);
    const double C1113 =
        2 * C49822 * C50239 + C49822 * (C50239 + C49930 * C50047);
    const double C1576 = C50021 * (C50239 + C49930 * C50047);
    const double C1860 =
        2 * C50021 * C50239 + C50021 * (C50239 + C49930 * C50031);
    const double C5505 =
        3 * (C50239 + C49930 * C50031) +
        C50021 * (2 * C50021 * C49930 + C50021 * (C49930 + C49933 * C50031));
    const double C134 = -(C49819 * (C49819 * C49947 + C50239 * ce) +
                          C50238 * C50237 * C49929 + C49819 * C50239 * ce) /
                        C49694;
    const double C298 = -(C49822 * (C49819 * C49947 + C50239 * ce)) / C49694;
    const double C306 = -(C49947 * C50047 + C50238 * C50237 * C49929) / C49694;
    const double C475 = -(C50021 * (C49819 * C49947 + C50239 * ce)) / C49694;
    const double C483 = -(C49947 * C50031 + C50238 * C50237 * C49929) / C49694;
    const double C900 = -(C50021 * C49822 * C49947) / C49694;
    const double C1120 = (-2 * C49822 * C49947) / C49694 -
                         (C49822 * (C49934 * C50047 + C49947)) / C49694;
    const double C1583 = -(C50021 * (C49934 * C50047 + C49947)) / C49694;
    const double C1867 = (-2 * C50021 * C49947) / C49694 -
                         (C50021 * (C49934 * C50031 + C49947)) / C49694;
    const double C5521 = C50744 * C492;
    const double C49855 = C49853 * C49848;
    const double C49866 = C49853 * ce;
    const double C49862 = C49819 * C49853;
    const double C50396 = C49822 * C49853;
    const double C50447 = C49853 * C50031;
    const double C50493 = C50021 * C49853;
    const double C5508 =
        (3 * (C49834 + C49842 * C50031) +
         C50021 * (2 * C50021 * C49842 + C50021 * (C49842 + C49853 * C50031))) /
        C49759;
    const double C49941 = C49939 * C49848;
    const double C49961 = C49819 * C49939;
    const double C49960 = C49939 * ce;
    const double C50399 = C49939 * C50047;
    const double C50454 = C49822 * C49939;
    const double C50453 = C49939 * ae;
    const double C50590 = C49939 * C50031;
    const double C49942 = C49819 * C49940;
    const double C50050 = C49940 * C50047;
    const double C50101 = ae * C49940;
    const double C50099 = C49822 * C49940;
    const double C50139 = C50021 * C49940;
    const double C50444 = C49940 * C50031;
    const double C5509 =
        (-3 * (C49934 * C50031 + C49947)) / C49694 +
        C50021 * ((-2 * C50021 * C49934) / C49694 -
                  (C50021 * (C49940 * C50031 + C49934)) / C49694);
    const double C49910 = C49907 * C49848;
    const double C49988 = C49819 * C49984;
    const double C50166 = C49984 * C50047;
    const double C49850 = C49847 / C49830;
    const double C484 = (C49819 * C49834 + C49844 * C50031) / C49759;
    const double C49954 = C49938 * ce;
    const double C50249 = 2 * C49938;
    const double C50354 = C49822 * C49938;
    const double C50353 = C49938 * ae;
    const double C50246 = C49930 + C50245;
    const double C50349 = C49930 + C50347;
    const double C50403 = 2 * C50398;
    const double C50401 = C50398 * ae;
    const double C50579 = C49930 + C50578;
    const double C50591 = 2 * C50589;
    const double C50049 = C50046 / C49830;
    const double C1234 = -(C50044 * C50031 + C49822 * C49947) / C49694;
    const double C49880 = C49853 + C49877;
    const double C49901 = C49896 / C49830;
    const double C49902 = 2 * C49892;
    const double C49899 = C49892 * ce;
    const double C50381 = C49822 * C49892;
    const double C50441 = C49892 * C50031;
    const double C50496 = C49853 + C50494;
    const double C50107 = C50102 + C49940;
    const double C50170 = C50164 / C49830;
    const double C50172 = -2 * C50162;
    const double C50168 = ae * C50162;
    const double C50205 = C50021 * C50162;
    const double C50481 = C50162 * C50031;
    const double C50196 = C50194 + C49940;
    const double C50211 = ae * C50208;
    const double C49990 = C49939 + C49987;
    const double C49989 = C49986 * ce;
    const double C50384 = C49986 * C50047;
    const double C50460 = C49939 + C50456;
    const double C146 =
        2 * ((-(C49819 * C49841) / C49694) / C49759 - (C49834 * ce) / C49830) -
        ((C49834 + C49842 * std::pow(C49819, 2)) * ce) / C49830 +
        C49819 *
            ((-(C49819 * C49842 * ce) / C49694) / C49759 - C49841 / C49830 +
             C49819 *
                 ((-(C49819 * std::pow(C49826, 5) * bs[5] * C49835) / C49694) /
                      C49759 -
                  (C49842 * ce) / C49830));
    const double C316 = C49822 * ((-(C49819 * C49841) / C49694) / C49759 -
                                  (C49834 * ce) / C49830) -
                        (ae * (C49819 * C49831 * C49827 * C49819 * ce +
                               bs[2] * std::pow(C49824, 2) * ce)) /
                            C49830;
    const double C320 = (-(ae * C49822 * C49947) / C49694) / C49759 -
                        (C49831 * C49827 * C49835) / C49830 +
                        C49822 * ((-(C49822 * C49841) / C49694) / C49759 -
                                  (ae * C49947) / C49830);
    const double C493 = (zP - zQ) * ((-(C49819 * C49841) / C49694) / C49759 -
                                     (C49834 * ce) / C49830);
    const double C497 = (-(C49841 * std::pow(zP - zQ, 2)) / C49694) / C49759 -
                        (C49831 * C49827 * C49835) / C49830;
    const double C909 = (-(C49822 * C50021 * C49841) / C49694) / C49759 -
                        (ae * C50021 * C49947) / C49830;
    const double C49854 = C49819 * C49852;
    const double C49863 = C49852 / C49830;
    const double C50045 = C49822 * C49852;
    const double C50075 = C50021 * C49852;
    const double C1125 =
        2 * ((-(C49822 * C49841) / C49694) / C49759 - (ae * C49947) / C49830) -
        (ae * (C49934 * std::pow(C49822, 2) + C49947)) / C49830 +
        C49822 *
            ((-(ae * C49822 * C49934) / C49694) / C49759 - C49841 / C49830 +
             C49822 * ((-(C49822 * C49852) / C49694) / C49759 -
                       (ae * C49934) / C49830));
    const double C1239 =
        C49822 * ((-(C49852 * C50031) / C49694) / C49759 - C49841 / C49830) -
        (ae * (C49934 * C50031 + C49947)) / C49830;
    const double C1588 =
        (-(ae * C50021 * C49822 * C49934) / C49694) / C49759 -
        (C50021 * C49841) / C49830 +
        C49822 * ((-(C49822 * C50021 * C49852) / C49694) / C49759 -
                  (ae * C50021 * C49934) / C49830);
    const double C1872 =
        (-2 * C50021 * C49841) / C49830 +
        C50021 * ((-(C49852 * C50031) / C49694) / C49759 - C49841 / C49830);
    const double C49876 = C49819 * C49873;
    const double C49893 = C49873 / C49830;
    const double C50100 = C49822 * C49873;
    const double C50125 = C49873 * C50031;
    const double C50138 = C50021 * C49873;
    const double C49909 = C49819 * C49906;
    const double C50163 = C49822 * C49906;
    const double C50193 = C49906 * C50031;
    const double C50207 = C50021 * C49906;
    const double C50627 = C50626 * C50621;
    const double C50631 = C50630 * C50626;
    const double C50882 = C50626 * C50622;
    const double C50879 = C50626 / C49784;
    const double C17276 = C50900 * C50626;
    const double C50698 = C50651 * C50696;
    const double C50701 = C50609 * C50651;
    const double C50891 = C50651 * C50697;
    const double C50886 = C50651 / C49699;
    const double C282 = C50887 * C50651;
    const double C50724 = C50663 * C50722;
    const double C50727 = C50609 * C50663;
    const double C50895 = C50663 * C50723;
    const double C50888 = C50663 / C49699;
    const double C461 = C50887 * C50663;
    const double C50821 = C50760 * C50819;
    const double C50824 = C50630 * C50760;
    const double C50908 = C50760 * C50820;
    const double C50901 = C50760 / C49784;
    const double C5194 = C50900 * C50760;
    const double C49710 = C49705 / C49698;
    const double C49708 = 2 * C49705;
    const double C50876 = C50606 / C49703;
    const double C50874 = C50606 / C49694;
    const double C50873 = C50606 * C50601;
    const double C1031 = (2 * C50609 * C50606) / C49694;
    const double C50877 = C50610 * C50601;
    const double C109 = C50610 / C50878;
    const double C638 = C50610 / C49699;
    const double C50913 = C50875 / C49694;
    const double C1030 = (C50605 * std::pow(C50600, 2)) / C49698 + C50872;
    const double C49789 = C49764 / C49761;
    const double C49786 = 2 * C49764;
    const double C2307 = ((0 * ae) / C49759 - C49764 / C49761) / (2 * C49759) +
                         (0 * ae) / C49759;
    const double C8144 =
        ((C50744 - (C49757 * 2 * C49764) / C49759) * ae) / C49759 -
        C49758 / C49763;
    const double C8145 = (0 * ae) / C49759 - C49764 / C49761;
    const double C17277 =
        (-C49758 / C49759) / (2 * C49759) -
        ((C50744 - (C49757 * 2 * C49764) / C49759) * be) / C49759;
    const double C17278 =
        (-(2 * C49764) / C49759) / (2 * C49759) - (0 * be) / C49759;
    const double C155 = C117 * C124;
    const double C153 = C117 * C132;
    const double C151 = C117 * C123;
    const double C326 = C117 * C285;
    const double C503 = C117 * C462;
    const double C5524 = C117 * C467;
    const double C5520 = C117 * C473;
    const double C5518 = C117 * C463;
    const double C6107 = C117 * C894;
    const double C50906 = C50793 / C49763;
    const double C50905 = C50793 * C50792;
    const double C50902 = C50793 / C49759;
    const double C2301 = (2 * C50630 * C50793) / C49759;
    const double C2306 =
        (((C50744 - (C49757 * 2 * C49764) / C49759) * ae) / C49759 -
         C49758 / C49763) /
            (2 * C49759) +
        ((C49757 * ((0 * ae) / C49759 - C49764 / C49761) + C50796) * ae) /
            C49759;
    const double C50907 = C50796 * C50792;
    const double C20078 = C50796 / C50885;
    const double C24697 = C50796 / C49784;
    const double C50924 = C50904 / C49759;
    const double C2300 = (C50744 * std::pow(C50791, 2)) / C49761 + C50899;
    const double C158 = C50744 * C145;
    const double C156 = C50744 * C133;
    const double C160 = C50744 * C135;
    const double C327 = C50744 * C295;
    const double C8148 = C50796 * C295;
    const double C17281 = C50796 * C295;
    const double C504 = C50744 * C472;
    const double C508 = C50744 * C476;
    const double C5525 = C50744 * C482;
    const double C6108 = C50744 * C899;
    const double C14094 = C50796 * C899;
    const double C22192 = C50796 * C899;
    const double C5543 = C50744 * C1868;
    const double C49951 = C49949 + C49950;
    const double C307 =
        (C49819 * C49834 + C49822 * (C49822 * C49844 + C50244 * ae) +
         C49822 * C50244 * ae) /
        C49759;
    const double C901 = (C50021 * (C49822 * C49844 + C50244 * ae)) / C49759;
    const double C291 = C49819 * C50239 + C50244 * C50047;
    const double C468 = C49819 * C50239 + C50244 * C50031;
    const double C895 = C50021 * C49822 * C50244;
    const double C1112 =
        2 * C49822 * C50244 + C49822 * (C50244 + C49938 * C50047);
    const double C1575 = C50021 * (C50244 + C49938 * C50047);
    const double C1859 =
        2 * C50021 * C50244 + C50021 * (C50244 + C49938 * C50031);
    const double C1227 = C49822 * C50239 + C50346 * C50031;
    const double C4595 =
        2 * C50021 * C50346 + C50021 * (C50346 + C50398 * C50031);
    const double C50348 = C50344 + C50345;
    const double C331 = C50744 * C299;
    const double C8158 = C50796 * C299;
    const double C17291 = C50796 * C299;
    const double C6114 = C50744 * C1235;
    const double C14109 = C50796 * C1235;
    const double C22200 = C50796 * C1235;
    const double C7089 = C50744 * C1584;
    const double C14789 = C50796 * C1584;
    const double C22739 = C50796 * C1584;
    const double C36691 = C2302 * C1584;
    const double C159 = C117 * C125;
    const double C330 = C117 * C287;
    const double C507 = C117 * C464;
    const double C7088 = C117 * C1576;
    const double C5542 = C117 * C1860;
    const double C7532 = C117 * C5505;
    const double C157 = C117 * C134;
    const double C328 = C117 * C298;
    const double C505 = C117 * C475;
    const double C5526 = C117 * C483;
    const double C6105 = C117 * C900;
    const double C7090 = C117 * C1583;
    const double C5540 = C117 * C1867;
    const double C49857 = C49842 + C49855;
    const double C49869 = C49866 / C49830;
    const double C49870 = 2 * C49862;
    const double C49867 = C49862 * ce;
    const double C50352 = C49822 * C49862;
    const double C1119 =
        (2 * (C49822 * C49844 + C50244 * ae) +
         C49822 * (C49844 + C49822 * (C49822 * C49862 + C49938 * ae) +
                   C49822 * C49938 * ae) +
         (C50244 + C49938 * C50047) * ae) /
        C49759;
    const double C1233 = (C49822 * C49844 + C50244 * ae +
                          (C49822 * C49862 + C49938 * ae) * C50031) /
                         C49759;
    const double C1582 =
        (C50021 * (C49844 + C49822 * (C49822 * C49862 + C49938 * ae) +
                   C49822 * C49938 * ae)) /
        C49759;
    const double C1866 =
        (2 * C50021 * C49844 + C50021 * (C49844 + C49862 * C50031)) / C49759;
    const double C5510 =
        (3 * (C49844 + C49862 * C50031) +
         C50021 * (2 * C50021 * C49862 + C50021 * (C49862 + C49892 * C50031))) /
        C49759;
    const double C50400 = C50396 + C50397;
    const double C50448 = C49842 + C50447;
    const double C50495 = 2 * C50493;
    const double C7533 = C50744 * C5508;
    const double C49943 = C49933 + C49941;
    const double C49965 = C49961 * ce;
    const double C49981 = 2 * C49961;
    const double C50355 = C49961 * C50047;
    const double C50383 = C49822 * C49961;
    const double C50382 = C49961 * ae;
    const double C50575 = C49961 * C50031;
    const double C5506 =
        3 * (C50244 + C49938 * C50031) +
        C50021 * (2 * C50021 * C49938 + C50021 * (C49938 + C49961 * C50031));
    const double C49968 = C49967 + C49960;
    const double C50402 = C49933 + C50399;
    const double C50461 = 2 * C50454;
    const double C50459 = C50454 * ae;
    const double C50586 = C50454 * C50031;
    const double C6528 =
        3 * (C50346 + C50398 * C50031) +
        C50021 * (2 * C50021 * C50398 + C50021 * (C50398 + C50454 * C50031));
    const double C50458 = C50452 + C50453;
    const double C50592 = C49933 + C50590;
    const double C49944 = C49942 + C49937;
    const double C50052 = C50050 + C49934;
    const double C50105 = C50101 / C49830;
    const double C50106 = -2 * C50099;
    const double C50103 = ae * C50099;
    const double C4601 = (-2 * C50021 * C50044) / C49694 -
                         (C50021 * (C50099 * C50031 + C50044)) / C49694;
    const double C6531 =
        (-3 * (C50099 * C50031 + C50044)) / C49694 +
        C50021 * ((-2 * C50021 * C50099) / C49694 -
                  (C50021 * (C50162 * C50031 + C50099)) / C49694);
    const double C50141 = ae * C50139;
    const double C50487 = -2 * C50139;
    const double C50445 = C50444 + C49934;
    const double C7534 = C117 * C5509;
    const double C49913 = C49874 + C49910;
    const double C49991 = C49988 + C49985;
    const double C50173 = C50166 + C49964;
    const double C516 = C50744 * C484;
    const double C1226 = C49822 * C50244 + C50354 * C50031;
    const double C126 = 3 * (C50239 + C49930 * C49848) +
                        C49819 * (2 * C50244 + C49819 * C50246);
    const double C288 = C49822 * (2 * C50244 + C49819 * C50246);
    const double C292 = C50239 + C49930 * C49848 + C50246 * C50047;
    const double C465 = C50021 * (2 * C50244 + C49819 * C50246);
    const double C469 = C50239 + C49930 * C49848 + C50246 * C50031;
    const double C896 = C50021 * C49822 * C50246;
    const double C2508 = 3 * (C50239 + C49930 * C50047) +
                         C49822 * (2 * C50346 + C49822 * C50349);
    const double C2702 = C50239 + C49930 * C50047 + C50349 * C50031;
    const double C3272 = C50021 * (2 * C50346 + C49822 * C50349);
    const double C7522 =
        4 * (2 * C50021 * C49930 + C50021 * C50579) +
        C50021 * (3 * C50579 + C50021 * (2 * C50021 * C49933 +
                                         C50021 * (C49933 + C49939 * C50031)));
    const double C6111 = C117 * C1234;
    const double C49883 = C49819 * C49880;
    const double C49897 = 3 * C49880;
    const double C49891 = C49880 * ce;
    const double C50360 = C49822 * C49880;
    const double C49905 = C49899 / C49694;
    const double C50442 = C49862 + C50441;
    const double C50497 = C50021 * C50496;
    const double C50111 = C49822 * C50107;
    const double C50165 = -3 * C50107;
    const double C50161 = ae * C50107;
    const double C50177 = C50172 / C49694;
    const double C50175 = C50168 / C49694;
    const double C50209 = ae * C50205;
    const double C50482 = C50481 + C50099;
    const double C50198 = ae * C50196;
    const double C50488 = C50021 * C50196;
    const double C50214 = C50211 / C49830;
    const double C49993 = C49819 * C49990;
    const double C49992 = C49990 * ce;
    const double C50363 = C49990 * C50047;
    const double C50387 = C49961 + C50384;
    const double C50463 = C49822 * C50460;
    const double C162 = C50744 * C146;
    const double C329 = C50744 * C316;
    const double C8152 = C50796 * C316;
    const double C17285 = C50796 * C316;
    const double C506 = C50744 * C493;
    const double C5527 = C50744 * C497;
    const double C6106 = C50744 * C909;
    const double C14098 = C50796 * C909;
    const double C22196 = C50796 * C909;
    const double C49856 = C49854 / C49694;
    const double C2711 =
        (-(C49852 * C50031) / C49694) / C49759 - C49841 / C49830 -
        (ae * (C49822 * C49940 * C50031 + C50044)) / C49830 +
        C49822 * (C49822 * ((-(C49873 * C50031) / C49694) / C49759 - C49863) -
                  (ae * (C49940 * C50031 + C49934)) / C49830);
    const double C50048 = C50045 / C49694;
    const double C6112 = C50744 * C1239;
    const double C14105 = C50796 * C1239;
    const double C22204 = C50796 * C1239;
    const double C7091 = C50744 * C1588;
    const double C14785 = C50796 * C1588;
    const double C22735 = C50796 * C1588;
    const double C36697 = C2302 * C1588;
    const double C5541 = C50744 * C1872;
    const double C49879 = C49876 / C49694;
    const double C50104 = C50100 / C49694;
    const double C50126 = C50125 / C49694;
    const double C50140 = C49822 * C50138;
    const double C50206 = C50138 / C49830;
    const double C50224 = -2 * C50138;
    const double C49912 = C49909 / C49694;
    const double C50169 = C50163 / C49694;
    const double C50195 = C50193 / C49694;
    const double C50210 = C49822 * C50207;
    const double C50883 = C50627 / C49763;
    const double C50881 = C50627 / C49759;
    const double C50880 = C50627 * C50622;
    const double C17275 = (2 * C50630 * C50627) / C49759;
    const double C50884 = C50631 * C50622;
    const double C114 = C50631 / C50885;
    const double C8143 = C50631 / C49784;
    const double C50916 = C50882 / C49759;
    const double C17274 = (C50626 * std::pow(C50621, 2)) / C49761 + C50879;
    const double C50893 = C50698 / C49703;
    const double C50892 = C50698 * C50697;
    const double C50889 = C50698 / C49694;
    const double C281 = (2 * C50609 * C50698) / C49694;
    const double C50894 = C50701 * C50697;
    const double C1108 = C50701 / C50878;
    const double C1342 = C50701 / C49699;
    const double C50918 = C50891 / C49694;
    const double C280 = (C50651 * std::pow(C50696, 2)) / C49698 + C50886;
    const double C50897 = C50724 / C49703;
    const double C50896 = C50724 * C50723;
    const double C50890 = C50724 / C49694;
    const double C460 = (2 * C50609 * C50724) / C49694;
    const double C50898 = C50727 * C50723;
    const double C1856 = C50727 / C50878;
    const double C2103 = C50727 / C49699;
    const double C50921 = C50895 / C49694;
    const double C459 = (C50663 * std::pow(C50722, 2)) / C49698 + C50888;
    const double C50910 = C50821 / C49763;
    const double C50909 = C50821 * C50820;
    const double C50903 = C50821 / C49759;
    const double C5193 = (2 * C50630 * C50821) / C49759;
    const double C50911 = C50824 * C50820;
    const double C39100 = C50824 / C50885;
    const double C44456 = C50824 / C49784;
    const double C50927 = C50908 / C49759;
    const double C5192 = (C50760 * std::pow(C50819, 2)) / C49761 + C50901;
    const double C49713 = C49702 - C49710;
    const double C49712 = C49692 * C49708;
    const double C284 = (-C49708 / C49694) / C49699 - (0 * de) / C49694;
    const double C1109 = -C49708 / C49694;
    const double C50912 = C50873 / C49698;
    const double C50914 = C50877 / C49694;
    const double C278 = -C50913;
    const double C49796 = C49793 - C49789;
    const double C49792 = C49757 * C49786;
    const double C36696 = C2307 * C1583;
    const double C36690 = C2307 * C1576;
    const double C8165 = C8144 * C125;
    const double C8159 = C8144 * C134;
    const double C8155 = C8144 * C124;
    const double C8153 = C8144 * C132;
    const double C8149 = C8144 * C123;
    const double C8353 = C8144 * C287;
    const double C8349 = C8144 * C298;
    const double C8345 = C8144 * C285;
    const double C8547 = C8144 * C464;
    const double C8543 = C8144 * C475;
    const double C8539 = C8144 * C462;
    const double C14110 = C8144 * C467;
    const double C14106 = C8144 * C483;
    const double C14095 = C8144 * C473;
    const double C14091 = C8144 * C463;
    const double C14790 = C8144 * C894;
    const double C14786 = C8144 * C900;
    const double C15333 = C8144 * C1234;
    const double C15991 = C8144 * C1583;
    const double C15987 = C8144 * C1576;
    const double C16521 = C8144 * C1867;
    const double C16517 = C8144 * C1860;
    const double C49177 = C8144 * C5509;
    const double C49173 = C8144 * C5505;
    const double C8157 = C8145 * C287;
    const double C8151 = C8145 * C298;
    const double C8147 = C8145 * C285;
    const double C14104 = C8145 * C1234;
    const double C14097 = C8145 * C900;
    const double C14093 = C8145 * C894;
    const double C14788 = C8145 * C1576;
    const double C14784 = C8145 * C1583;
    const double C17298 = C17277 * C125;
    const double C17292 = C17277 * C134;
    const double C17288 = C17277 * C124;
    const double C17286 = C17277 * C132;
    const double C17282 = C17277 * C123;
    const double C17486 = C17277 * C287;
    const double C17482 = C17277 * C298;
    const double C17478 = C17277 * C285;
    const double C17680 = C17277 * C464;
    const double C17676 = C17277 * C475;
    const double C17672 = C17277 * C462;
    const double C22217 = C17277 * C1860;
    const double C22213 = C17277 * C1867;
    const double C22201 = C17277 * C483;
    const double C22197 = C17277 * C467;
    const double C22193 = C17277 * C473;
    const double C22189 = C17277 * C463;
    const double C22748 = C17277 * C1234;
    const double C22740 = C17277 * C894;
    const double C22736 = C17277 * C900;
    const double C23674 = C17277 * C1583;
    const double C23670 = C17277 * C1576;
    const double C24094 = C17277 * C5509;
    const double C24090 = C17277 * C5505;
    const double C17290 = C17278 * C287;
    const double C17284 = C17278 * C298;
    const double C17280 = C17278 * C285;
    const double C22203 = C17278 * C1234;
    const double C22195 = C17278 * C900;
    const double C22191 = C17278 * C894;
    const double C22738 = C17278 * C1576;
    const double C22734 = C17278 * C1583;
    const double C172 = C153 + C154;
    const double C171 = C151 + C152;
    const double C5555 = C5520 + C5521;
    const double C5554 = C5518 + C5519;
    const double C50925 = C50905 / C49761;
    const double C8170 = C50902 * C146;
    const double C8166 = C50902 * C135;
    const double C8160 = C50902 * C145;
    const double C8156 = C50902 * C133;
    const double C8154 = C50902 * C144;
    const double C8150 = C50902 * C131;
    const double C8354 = C50902 * C299;
    const double C8350 = C50902 * C316;
    const double C8346 = C50902 * C295;
    const double C8558 = C50902 * C484;
    const double C8548 = C50902 * C476;
    const double C8544 = C50902 * C493;
    const double C8540 = C50902 * C472;
    const double C14111 = C50902 * C482;
    const double C14107 = C50902 * C497;
    const double C14096 = C50902 * C492;
    const double C14092 = C50902 * C474;
    const double C14791 = C50902 * C899;
    const double C14787 = C50902 * C909;
    const double C15334 = C50902 * C1239;
    const double C15330 = C50902 * C1235;
    const double C15992 = C50902 * C1588;
    const double C15988 = C50902 * C1584;
    const double C16522 = C50902 * C1872;
    const double C16518 = C50902 * C1868;
    const double C49174 = C50902 * C5508;
    const double C2305 =
        (((0 - (C49757 * C49758) / C49759) * ae) / C49759 - (0 * be) / C49763) /
            (2 * C49759) +
        ((C49757 * (((C50744 - (C49757 * 2 * C49764) / C49759) * ae) / C49759 -
                    C49758 / C49763) +
          C50902) *
         ae) /
            C49759 +
        (0 * ae) / C49759 - C49764 / C49761;
    const double C2324 = C2301 * C299;
    const double C2318 = C2301 * C316;
    const double C2312 = C2301 * C295;
    const double C36707 = C2301 * C1235;
    const double C36701 = C2301 * C1239;
    const double C36695 = C2301 * C909;
    const double C36689 = C2301 * C899;
    const double C37217 = C2301 * C1584;
    const double C37211 = C2301 * C1588;
    const double C2323 = C2306 * C287;
    const double C2317 = C2306 * C298;
    const double C2311 = C2306 * C285;
    const double C36700 = C2306 * C1234;
    const double C36694 = C2306 * C900;
    const double C36688 = C2306 * C894;
    const double C37216 = C2306 * C1576;
    const double C37210 = C2306 * C1583;
    const double C50926 = C50907 / C49759;
    const double C31331 = C24697 * C1588;
    const double C31325 = C24697 * C1584;
    const double C17272 = -C50924;
    const double C2344 = C2300 * C146;
    const double C2338 = C2300 * C135;
    const double C2328 = C2300 * C145;
    const double C2322 = C2300 * C133;
    const double C2320 = C2300 * C144;
    const double C2314 = C2300 * C131;
    const double C2528 = C2300 * C316;
    const double C2522 = C2300 * C295;
    const double C2732 = C2300 * C484;
    const double C2722 = C2300 * C493;
    const double C2716 = C2300 * C472;
    const double C2902 = C2300 * C299;
    const double C3066 = C2300 * C476;
    const double C36709 = C2300 * C482;
    const double C36703 = C2300 * C497;
    const double C36693 = C2300 * C492;
    const double C36687 = C2300 * C474;
    const double C37219 = C2300 * C899;
    const double C37213 = C2300 * C909;
    const double C37623 = C2300 * C1239;
    const double C37617 = C2300 * C1235;
    const double C38127 = C2300 * C1588;
    const double C38121 = C2300 * C1584;
    const double C38535 = C2300 * C1872;
    const double C38529 = C2300 * C1868;
    const double C173 = C155 + C156;
    const double C350 = C326 + C327;
    const double C527 = C503 + C504;
    const double C5556 = C5524 + C5525;
    const double C6129 = C6107 + C6108;
    const double C136 =
        (-2 * (C49819 * C49947 + C50239 * ce)) / C49694 -
        (C49819 * (C49819 * C49951 + C49947 + C49819 * C49930 * ce)) / C49694 -
        ((C50239 + C49930 * C49848) * ce) / C49694;
    const double C300 =
        -(C49822 * (C49819 * C49951 + C49947 + C50244 * ce)) / C49694;
    const double C308 =
        -(C49951 * C50047 + C49819 * C49947 + C50239 * ce) / C49694;
    const double C477 =
        -(C50021 * (C49819 * C49951 + C49947 + C50244 * ce)) / C49694;
    const double C485 =
        -(C49951 * C50031 + C49819 * C49947 + C50239 * ce) / C49694;
    const double C902 = -(C50021 * C49822 * C49951) / C49694;
    const double C339 = C50744 * C307;
    const double C2310 = C2302 * C307;
    const double C2538 = C2300 * C307;
    const double C2524 = C2301 * C307;
    const double C8364 = C50902 * C307;
    const double C8348 = C50796 * C307;
    const double C17481 = C50796 * C307;
    const double C24705 = C24697 * C307;
    const double C916 = C50744 * C901;
    const double C2718 = C2301 * C901;
    const double C3290 = C2300 * C901;
    const double C8542 = C50796 * C901;
    const double C9104 = C50902 * C901;
    const double C17675 = C50796 * C901;
    const double C338 = C117 * C291;
    const double C2309 = C2307 * C291;
    const double C2523 = C2306 * C291;
    const double C8363 = C8144 * C291;
    const double C8347 = C8145 * C291;
    const double C17496 = C17277 * C291;
    const double C17480 = C17278 * C291;
    const double C515 = C117 * C468;
    const double C8557 = C8144 * C468;
    const double C17690 = C17277 * C468;
    const double C915 = C117 * C895;
    const double C2717 = C2306 * C895;
    const double C8541 = C8145 * C895;
    const double C9103 = C8144 * C895;
    const double C17674 = C17278 * C895;
    const double C18236 = C17277 * C895;
    const double C2535 = C2306 * C1112;
    const double C2525 = C2307 * C1112;
    const double C8361 = C8145 * C1112;
    const double C17494 = C17278 * C1112;
    const double C2719 = C2307 * C1575;
    const double C3287 = C2306 * C1575;
    const double C5346 = C117 * C1575;
    const double C9101 = C8145 * C1575;
    const double C13887 = C8144 * C1575;
    const double C18234 = C17278 * C1575;
    const double C27740 = C17277 * C1575;
    const double C5538 = C117 * C1859;
    const double C14117 = C8144 * C1859;
    const double C22207 = C17277 * C1859;
    const double C6113 = C117 * C1227;
    const double C14108 = C8145 * C1227;
    const double C15329 = C8144 * C1227;
    const double C22199 = C17278 * C1227;
    const double C22752 = C17277 * C1227;
    const double C36706 = C2306 * C1227;
    const double C6552 = C117 * C4595;
    const double C16519 = C8145 * C4595;
    const double C22215 = C17278 * C4595;
    const double C23166 = C17277 * C4595;
    const double C38530 = C2306 * C4595;
    const double C48265 = C8144 * C4595;
    const double C2511 =
        (3 * (C49834 + C49822 * C50348 + C50346 * ae) +
         C49822 * (2 * C50348 +
                   C49822 * (C49842 + C49822 * (C49822 * C49853 + C49933 * ae) +
                             C49822 * C49933 * ae) +
                   C50349 * ae) +
         (2 * C50346 + C49822 * C50349) * ae) /
        C49759;
    const double C2705 = (C49834 + C49822 * C50348 + C50346 * ae +
                          (C49842 + C49822 * (C49822 * C49853 + C49933 * ae) +
                           C49822 * C49933 * ae) *
                              C50031) /
                         C49759;
    const double C3275 =
        (C50021 * (2 * C50348 +
                   C49822 * (C49842 + C49822 * (C49822 * C49853 + C49933 * ae) +
                             C49822 * C49933 * ae) +
                   C50349 * ae)) /
        C49759;
    const double C175 = C159 + C160;
    const double C352 = C330 + C331;
    const double C529 = C507 + C508;
    const double C7100 = C7088 + C7089;
    const double C5561 = C5542 + C5543;
    const double C174 = C157 + C158;
    const double C137 = (3 * (C49834 + C49842 * C49848) +
                         C49819 * (2 * C49844 + C49819 * C49857)) /
                        C49759;
    const double C301 = (C49822 * (2 * C49844 + C49819 * C49857) +
                         (2 * C50244 + C49819 * C50246) * ae) /
                        C49759;
    const double C309 =
        (C49834 + C49842 * C49848 + C49822 * (C49822 * C49857 + C50246 * ae) +
         C49822 * C50246 * ae) /
        C49759;
    const double C478 = (C50021 * (2 * C49844 + C49819 * C49857)) / C49759;
    const double C486 = (C49834 + C49842 * C49848 + C49857 * C50031) / C49759;
    const double C903 = (C50021 * (C49822 * C49857 + C50246 * ae)) / C49759;
    const double C1864 =
        (2 * C50021 * C49857 + C50021 * (C49857 + C49880 * C50031)) / C49759;
    const double C49872 = C49867 / C49694;
    const double C50356 = C50352 + C50353;
    const double C2536 = C2301 * C1119;
    const double C2526 = C2302 * C1119;
    const double C8362 = C50796 * C1119;
    const double C17495 = C50796 * C1119;
    const double C24909 = C24697 * C1119;
    const double C2730 = C2301 * C1233;
    const double C5343 = C50744 * C1233;
    const double C8556 = C50796 * C1233;
    const double C14798 = C50902 * C1233;
    const double C17689 = C50796 * C1233;
    const double C2720 = C2302 * C1582;
    const double C3288 = C2301 * C1582;
    const double C5347 = C50744 * C1582;
    const double C9102 = C50796 * C1582;
    const double C13888 = C50902 * C1582;
    const double C18235 = C50796 * C1582;
    const double C25091 = C24697 * C1582;
    const double C5539 = C50744 * C1866;
    const double C14118 = C50902 * C1866;
    const double C5551 = C50744 * C5510;
    const double C50404 = C49822 * C50400;
    const double C50451 = 2 * C50400;
    const double C4603 =
        (2 * C50021 * C50348 + C50021 * (C50348 + C50400 * C50031)) / C49759;
    const double C6532 =
        (3 * (C50348 + C50400 * C50031) +
         C50021 *
             (2 * C50021 * C50400 +
              C50021 * (C50400 + (C49822 * C49874 + C49939 * ae) * C50031))) /
        C49759;
    const double C7526 =
        (4 * (2 * C50021 * C49842 + C50021 * C50448) +
         C50021 *
             (3 * C50448 + C50021 * (2 * C50021 * C49853 +
                                     C50021 * (C49853 + C49874 * C50031)))) /
        C49759;
    const double C7538 = C7532 + C7533;
    const double C49962 = C49943 * ce;
    const double C50250 = C49819 * C49943;
    const double C50254 = 3 * C49943;
    const double C50362 = C49822 * C49943;
    const double C50361 = C49943 * ae;
    const double C1117 =
        (2 * (C49822 * C49857 + C50246 * ae) +
         C49822 * (C49857 + C49822 * (C49822 * C49880 + C49943 * ae) +
                   C49822 * C49943 * ae) +
         (C50246 + C49943 * C50047) * ae) /
        C49759;
    const double C1231 = (C49822 * C49857 + C50246 * ae +
                          (C49822 * C49880 + C49943 * ae) * C50031) /
                         C49759;
    const double C1580 =
        (C50021 * (C49857 + C49822 * (C49822 * C49880 + C49943 * ae) +
                   C49822 * C49943 * ae)) /
        C49759;
    const double C1111 =
        2 * C49822 * C50246 + C49822 * (C50246 + C49943 * C50047);
    const double C1574 = C50021 * (C50246 + C49943 * C50047);
    const double C1858 =
        2 * C50021 * C50246 + C50021 * (C50246 + C49943 * C50031);
    const double C5507 =
        3 * (C50246 + C49943 * C50031) +
        C50021 * (2 * C50021 * C49943 + C50021 * (C49943 + C49990 * C50031));
    const double C50357 = C49938 + C50355;
    const double C50388 = 2 * C50383;
    const double C50386 = C50383 * ae;
    const double C4593 =
        2 * C50021 * C50354 + C50021 * (C50354 + C50383 * C50031);
    const double C6527 =
        3 * (C50354 + C50383 * C50031) +
        C50021 * (2 * C50021 * C50383 +
                  C50021 * (C50383 + C49822 * C49986 * C50031));
    const double C50385 = C50381 + C50382;
    const double C50576 = C49938 + C50575;
    const double C5550 = C117 * C5506;
    const double C49969 = C49819 * C49968;
    const double C49978 = -2 * C49968;
    const double C50059 = C49968 * C50047;
    const double C50083 = ae * C49968;
    const double C50081 = C49822 * C49968;
    const double C50132 = C50021 * C49968;
    const double C50438 = C49968 * C50031;
    const double C50405 = C49822 * C50402;
    const double C50457 = 3 * C50402;
    const double C50455 = C50402 * ae;
    const double C4594 =
        2 * C50021 * C50349 + C50021 * (C50349 + C50402 * C50031);
    const double C23159 =
        3 * (C50349 + C50402 * C50031) +
        C50021 * (2 * C50021 * C50402 + C50021 * (C50402 + C50460 * C50031));
    const double C50587 = C50398 + C50586;
    const double C24092 = C17278 * C6528;
    const double C39904 = C117 * C6528;
    const double C49175 = C8145 * C6528;
    const double C50462 = C49822 * C50458;
    const double C50484 = C50458 * C50031;
    const double C50593 = C50021 * C50592;
    const double C49953 = C49819 * C49944;
    const double C49958 = -2 * C49944;
    const double C50058 = ae * C49944;
    const double C50056 = C49822 * C49944;
    const double C1118 = (-2 * C49822 * C49951) / C49694 -
                         (C49822 * (C49944 * C50047 + C49951)) / C49694;
    const double C1581 = -(C50021 * (C49944 * C50047 + C49951)) / C49694;
    const double C1865 = (-2 * C50021 * C49951) / C49694 -
                         (C50021 * (C49944 * C50031 + C49951)) / C49694;
    const double C5511 =
        (-3 * (C49944 * C50031 + C49951)) / C49694 +
        C50021 * ((-2 * C50021 * C49944) / C49694 -
                  (C50021 * (C49968 * C50031 + C49944)) / C49694);
    const double C3281 =
        2 * ((-(C49822 * C50075) / C49694) / C49759 -
             (ae * C50021 * C49934) / C49830) -
        (ae * C50021 * C50052) / C49830 +
        C49822 * ((-(ae * C50021 * C49822 * C49940) / C49694) / C49759 -
                  C50075 / C49830 +
                  C49822 * ((-(C49822 * C50021 * C49873) / C49694) / C49759 -
                            (ae * C50021 * C49940) / C49830));
    const double C2512 =
        (-3 * (C49934 * C50047 + C49947)) / C49694 +
        C49822 * ((-2 * C50044) / C49694 - (C49822 * C50052) / C49694);
    const double C2706 = -(C50052 * C50031 + C49934 * C50047 + C49947) / C49694;
    const double C3276 =
        C50021 * ((-2 * C50044) / C49694 - (C49822 * C50052) / C49694);
    const double C4600 = (-2 * C50021 * C50052) / C49694 -
                         (C50021 * (C50107 * C50031 + C50052)) / C49694;
    const double C50110 = C50106 / C49694;
    const double C50108 = C50103 / C49694;
    const double C6554 = C117 * C4601;
    const double C16523 = C8145 * C4601;
    const double C22211 = C17278 * C4601;
    const double C23170 = C17277 * C4601;
    const double C38536 = C2306 * C4601;
    const double C48269 = C8144 * C4601;
    const double C24096 = C17278 * C6531;
    const double C39906 = C117 * C6531;
    const double C49179 = C8145 * C6531;
    const double C50143 = C50141 / C49830;
    const double C50489 = C50487 / C49694;
    const double C7525 =
        4 * ((-2 * C50021 * C49934) / C49694 - (C50021 * C50445) / C49694) +
        C50021 *
            ((-3 * C50445) / C49694 +
             C50021 * ((-2 * C50139) / C49694 - (C50021 * C50196) / C49694));
    const double C49916 = C49819 * C49913;
    const double C5512 =
        (3 * (C49857 + C49880 * C50031) +
         C50021 * (2 * C50021 * C49880 + C50021 * (C49880 + C49913 * C50031))) /
        C49759;
    const double C49994 = C49819 * C49991;
    const double C50084 = C49991 * C50047;
    const double C50178 = C49822 * C50173;
    const double C23160 =
        (-3 * (C50107 * C50031 + C50052)) / C49694 +
        C50021 * ((-2 * C50021 * C50107) / C49694 -
                  (C50021 * (C50173 * C50031 + C50107)) / C49694);
    const double C2729 = C2306 * C1226;
    const double C5342 = C117 * C1226;
    const double C8555 = C8145 * C1226;
    const double C14797 = C8144 * C1226;
    const double C17688 = C17278 * C1226;
    const double C22742 = C17277 * C1226;
    const double C163 = C117 * C126;
    const double C8173 = C8144 * C126;
    const double C17306 = C17277 * C126;
    const double C334 = C117 * C288;
    const double C2335 = C2306 * C288;
    const double C8163 = C8145 * C288;
    const double C8737 = C8144 * C288;
    const double C17296 = C17278 * C288;
    const double C17870 = C17277 * C288;
    const double C342 = C117 * C292;
    const double C2325 = C2307 * C292;
    const double C2899 = C2306 * C292;
    const double C8371 = C8144 * C292;
    const double C8355 = C8145 * C292;
    const double C17504 = C17277 * C292;
    const double C17488 = C17278 * C292;
    const double C511 = C117 * C465;
    const double C8897 = C8144 * C465;
    const double C18030 = C17277 * C465;
    const double C519 = C117 * C469;
    const double C8565 = C8144 * C469;
    const double C17698 = C17277 * C469;
    const double C919 = C117 * C896;
    const double C3063 = C2306 * C896;
    const double C8549 = C8145 * C896;
    const double C9111 = C8144 * C896;
    const double C17682 = C17278 * C896;
    const double C18244 = C17277 * C896;
    const double C7092 = C117 * C2702;
    const double C15331 = C8145 * C2702;
    const double C22750 = C17278 * C2702;
    const double C23678 = C17277 * C2702;
    const double C36704 = C2307 * C2702;
    const double C37618 = C2306 * C2702;
    const double C48769 = C8144 * C2702;
    const double C15989 = C8145 * C3272;
    const double C23672 = C17278 * C3272;
    const double C37214 = C2307 * C3272;
    const double C38122 = C2306 * C3272;
    const double C40524 = C117 * C7522;
    const double C49885 = C49870 + C49883;
    const double C49898 = C49891 / C49830;
    const double C49908 = -C49905;
    const double C7524 =
        (4 * (2 * C50021 * C49862 + C50021 * C50442) +
         C50021 * (3 * C50442 +
                   C50021 * (2 * C50021 * C49892 +
                             C50021 * (C49892 + C49819 * C49907 * C50031)))) /
        C49759;
    const double C50498 = C50495 + C50497;
    const double C50114 = C50111 / C49694;
    const double C50171 = C50165 / C49694;
    const double C50167 = C50161 / C49830;
    const double C50179 = -C50175;
    const double C50212 = C50209 / C49694;
    const double C24084 =
        4 * ((-2 * C50021 * C50099) / C49694 - (C50021 * C50482) / C49694) +
        C50021 * ((-3 * C50482) / C49694 +
                  C50021 * ((-2 * C50205) / C49694 -
                            (C50021 * (C49822 * C49984 * C50031 + C50162)) /
                                C49694));
    const double C50200 = C50198 / C49830;
    const double C50490 = C50488 / C49694;
    const double C49996 = C49981 + C49993;
    const double C49995 = C49992 / C49694;
    const double C50365 = C49943 + C50363;
    const double C50390 = C49822 * C50387;
    const double C50465 = C50461 + C50463;
    const double C351 = C328 + C329;
    const double C528 = C505 + C506;
    const double C5557 = C5526 + C5527;
    const double C6128 = C6105 + C6106;
    const double C49858 = -C49856;
    const double C7095 = C50744 * C2711;
    const double C15336 = C50796 * C2711;
    const double C22747 = C50796 * C2711;
    const double C31333 = C24697 * C2711;
    const double C36699 = C2302 * C2711;
    const double C37625 = C2301 * C2711;
    const double C48774 = C50902 * C2711;
    const double C50051 = -C50048;
    const double C6130 = C6111 + C6112;
    const double C7101 = C7090 + C7091;
    const double C5560 = C5540 + C5541;
    const double C49882 = -C49879;
    const double C50109 = -C50104;
    const double C50127 = -C50126;
    const double C50142 = C50140 / C49694;
    const double C50226 = C50224 / C49830;
    const double C49915 = -C49912;
    const double C50176 = -C50169;
    const double C50197 = -C50195;
    const double C50213 = C50210 / C49694;
    const double C50915 = C50880 / C49761;
    const double C50917 = C50884 / C49759;
    const double C2303 = -C50916;
    const double C50919 = C50892 / C49698;
    const double C50920 = C50894 / C49694;
    const double C1033 = -C50918;
    const double C50922 = C50896 / C49698;
    const double C50923 = C50898 / C49694;
    const double C1687 = -C50921;
    const double C50928 = C50909 / C49761;
    const double C50929 = C50911 / C49759;
    const double C33763 = -C50927;
    const double C121 =
        (C49713 / C49699 - (0 * de) / C49694) / C49699 + (0 * ce) / C49694;
    const double C643 = C49713 / C49699 - (0 * de) / C49694;
    const double C1037 = C49713 / C49699 + (0 * ce) / C49694;
    const double C49715 = C49712 / C49694;
    const double C50930 = C50872 - C50912;
    const double C50931 = C50876 - C50914;
    const double C20083 =
        (C49796 / C49784 - (0 * be) / C49759) / C49784 + (0 * ae) / C49759;
    const double C24702 = C49796 / C49784 - (0 * be) / C49759;
    const double C49795 = C49792 / C49759;
    const double C36715 = C36696 + C36697;
    const double C36712 = C36690 + C36691;
    const double C8184 = C8157 + C8158;
    const double C8181 = C8151 + C8152;
    const double C8179 = C8147 + C8148;
    const double C14127 = C14104 + C14105;
    const double C14126 = C14097 + C14098;
    const double C14124 = C14093 + C14094;
    const double C14805 = C14788 + C14789;
    const double C14803 = C14784 + C14785;
    const double C17317 = C17290 + C17291;
    const double C17314 = C17284 + C17285;
    const double C17312 = C17280 + C17281;
    const double C22230 = C22203 + C22204;
    const double C22226 = C22195 + C22196;
    const double C22224 = C22191 + C22192;
    const double C22760 = C22738 + C22739;
    const double C22758 = C22734 + C22735;
    const double C5568 = C5555 * C278;
    const double C6537 = C5555 * C50605;
    const double C6911 = C5555 * C50874;
    const double C7255 = C5555 * C1030;
    const double C6536 = C5554 * C1109;
    const double C50938 = C50899 - C50925;
    const double C8188 = C8165 + C8166;
    const double C8185 = C8159 + C8160;
    const double C8183 = C8155 + C8156;
    const double C8182 = C8153 + C8154;
    const double C8180 = C8149 + C8150;
    const double C8381 = C8353 + C8354;
    const double C8379 = C8349 + C8350;
    const double C8377 = C8345 + C8346;
    const double C8575 = C8547 + C8548;
    const double C8573 = C8543 + C8544;
    const double C8571 = C8539 + C8540;
    const double C14130 = C14110 + C14111;
    const double C14128 = C14106 + C14107;
    const double C14125 = C14095 + C14096;
    const double C14123 = C14091 + C14092;
    const double C14806 = C14790 + C14791;
    const double C14804 = C14786 + C14787;
    const double C15339 = C15333 + C15334;
    const double C15997 = C15991 + C15992;
    const double C15995 = C15987 + C15988;
    const double C16527 = C16521 + C16522;
    const double C16525 = C16517 + C16518;
    const double C49183 = C49173 + C49174;
    const double C2337 = C2305 * C125;
    const double C2327 = C2305 * C134;
    const double C2321 = C2305 * C124;
    const double C2319 = C2305 * C132;
    const double C2313 = C2305 * C123;
    const double C2537 = C2305 * C291;
    const double C2527 = C2305 * C298;
    const double C2521 = C2305 * C285;
    const double C2731 = C2305 * C468;
    const double C2721 = C2305 * C475;
    const double C2715 = C2305 * C462;
    const double C2901 = C2305 * C287;
    const double C3065 = C2305 * C464;
    const double C3289 = C2305 * C895;
    const double C36708 = C2305 * C467;
    const double C36702 = C2305 * C483;
    const double C36692 = C2305 * C473;
    const double C36686 = C2305 * C463;
    const double C37218 = C2305 * C894;
    const double C37212 = C2305 * C900;
    const double C37622 = C2305 * C1234;
    const double C37616 = C2305 * C1227;
    const double C38126 = C2305 * C1583;
    const double C38120 = C2305 * C1576;
    const double C38534 = C2305 * C1867;
    const double C38528 = C2305 * C1860;
    const double C2352 = C2323 + C2324;
    const double C2349 = C2317 + C2318;
    const double C2346 = C2311 + C2312;
    const double C36717 = C36700 + C36701;
    const double C36714 = C36694 + C36695;
    const double C36711 = C36688 + C36689;
    const double C37224 = C37216 + C37217;
    const double C37221 = C37210 + C37211;
    const double C50939 = C50906 - C50926;
    const double C17303 = C17272 * C146;
    const double C17299 = C17272 * C135;
    const double C17293 = C17272 * C145;
    const double C17289 = C17272 * C133;
    const double C17287 = C17272 * C144;
    const double C17283 = C17272 * C131;
    const double C17497 = C17272 * C307;
    const double C17487 = C17272 * C299;
    const double C17483 = C17272 * C316;
    const double C17479 = C17272 * C295;
    const double C17691 = C17272 * C484;
    const double C17681 = C17272 * C476;
    const double C17677 = C17272 * C493;
    const double C17673 = C17272 * C472;
    const double C18237 = C17272 * C901;
    const double C22218 = C17272 * C1868;
    const double C22214 = C17272 * C1872;
    const double C22208 = C17272 * C1866;
    const double C22202 = C17272 * C497;
    const double C22198 = C17272 * C482;
    const double C22194 = C17272 * C492;
    const double C22190 = C17272 * C474;
    const double C22753 = C17272 * C1235;
    const double C22749 = C17272 * C1239;
    const double C22743 = C17272 * C1233;
    const double C22741 = C17272 * C899;
    const double C22737 = C17272 * C909;
    const double C23683 = C17272 * C2711;
    const double C23675 = C17272 * C1588;
    const double C23671 = C17272 * C1584;
    const double C24091 = C17272 * C5508;
    const double C27741 = C17272 * C1582;
    const double C5522 = C527 * C284;
    const double C6540 = C527 * C1109;
    const double C6912 = C527 * C49713;
    const double C6538 = C5556 * C1109;
    const double C6548 = C6129 * C1109;
    const double C161 = C117 * C136;
    const double C2343 = C2305 * C136;
    const double C8169 = C8144 * C136;
    const double C17302 = C17277 * C136;
    const double C332 = C117 * C300;
    const double C2329 = C2306 * C300;
    const double C2907 = C2305 * C300;
    const double C8161 = C8145 * C300;
    const double C8357 = C8144 * C300;
    const double C17294 = C17278 * C300;
    const double C17490 = C17277 * C300;
    const double C340 = C117 * C308;
    const double C2315 = C2307 * C308;
    const double C2543 = C2305 * C308;
    const double C2529 = C2306 * C308;
    const double C8367 = C8144 * C308;
    const double C8351 = C8145 * C308;
    const double C17500 = C17277 * C308;
    const double C17484 = C17278 * C308;
    const double C509 = C117 * C477;
    const double C3071 = C2305 * C477;
    const double C8551 = C8144 * C477;
    const double C17684 = C17277 * C477;
    const double C517 = C117 * C485;
    const double C2737 = C2305 * C485;
    const double C8561 = C8144 * C485;
    const double C17694 = C17277 * C485;
    const double C917 = C117 * C902;
    const double C2723 = C2306 * C902;
    const double C3295 = C2305 * C902;
    const double C8545 = C8145 * C902;
    const double C9107 = C8144 * C902;
    const double C17678 = C17278 * C902;
    const double C18240 = C17277 * C902;
    const double C356 = C338 + C339;
    const double C2345 = C2309 + C2310;
    const double C2546 = C2523 + C2524;
    const double C8386 = C8363 + C8364;
    const double C8378 = C8347 + C8348;
    const double C17511 = C17480 + C17481;
    const double C533 = C515 + C516;
    const double C8580 = C8557 + C8558;
    const double C927 = C915 + C916;
    const double C2740 = C2717 + C2718;
    const double C8572 = C8541 + C8542;
    const double C9118 = C9103 + C9104;
    const double C17705 = C17674 + C17675;
    const double C6131 = C6113 + C6114;
    const double C14129 = C14108 + C14109;
    const double C15337 = C15329 + C15330;
    const double C22228 = C22199 + C22200;
    const double C36720 = C36706 + C36707;
    const double C7093 = C50744 * C2705;
    const double C15332 = C50796 * C2705;
    const double C22751 = C50796 * C2705;
    const double C23679 = C17272 * C2705;
    const double C31339 = C24697 * C2705;
    const double C36705 = C2302 * C2705;
    const double C37619 = C2301 * C2705;
    const double C48770 = C50902 * C2705;
    const double C15990 = C50796 * C3275;
    const double C23673 = C50796 * C3275;
    const double C31849 = C24697 * C3275;
    const double C37215 = C2302 * C3275;
    const double C38123 = C2301 * C3275;
    const double C5532 = C529 * C284;
    const double C6920 = C529 * C49713;
    const double C12169 = C529 * C1109;
    const double C7104 = C7100 * C1109;
    const double C6547 = C5561 * C1109;
    const double C164 = C50744 * C137;
    const double C8174 = C50902 * C137;
    const double C17307 = C17272 * C137;
    const double C335 = C50744 * C301;
    const double C2336 = C2301 * C301;
    const double C8164 = C50796 * C301;
    const double C8738 = C50902 * C301;
    const double C17297 = C50796 * C301;
    const double C17871 = C17272 * C301;
    const double C343 = C50744 * C309;
    const double C2326 = C2302 * C309;
    const double C2900 = C2301 * C309;
    const double C8372 = C50902 * C309;
    const double C8356 = C50796 * C309;
    const double C17505 = C17272 * C309;
    const double C17489 = C50796 * C309;
    const double C24721 = C24697 * C309;
    const double C512 = C50744 * C478;
    const double C8898 = C50902 * C478;
    const double C18031 = C17272 * C478;
    const double C520 = C50744 * C486;
    const double C8566 = C50902 * C486;
    const double C17699 = C17272 * C486;
    const double C920 = C50744 * C903;
    const double C3064 = C2301 * C903;
    const double C8550 = C50796 * C903;
    const double C9112 = C50902 * C903;
    const double C17683 = C50796 * C903;
    const double C18245 = C17272 * C903;
    const double C5547 = C50744 * C1864;
    const double C49875 = -C49872;
    const double C2707 = (C49844 + C49822 * C50356 + C50354 * ae +
                          (C49862 + C49822 * (C49822 * C49892 + C49961 * ae) +
                           C49822 * C49961 * ae) *
                              C50031) /
                         C49759;
    const double C2552 = C2535 + C2536;
    const double C2547 = C2525 + C2526;
    const double C8385 = C8361 + C8362;
    const double C17518 = C17494 + C17495;
    const double C2741 = C2719 + C2720;
    const double C3298 = C3287 + C3288;
    const double C5356 = C5346 + C5347;
    const double C9117 = C9101 + C9102;
    const double C13894 = C13887 + C13888;
    const double C18250 = C18234 + C18235;
    const double C5559 = C5538 + C5539;
    const double C14132 = C14117 + C14118;
    const double C50406 = C49842 + C50404;
    const double C6553 = C50744 * C4603;
    const double C16520 = C50796 * C4603;
    const double C22216 = C50796 * C4603;
    const double C23167 = C17272 * C4603;
    const double C38531 = C2301 * C4603;
    const double C48266 = C50902 * C4603;
    const double C24093 = C50796 * C6532;
    const double C39905 = C50744 * C6532;
    const double C49176 = C50796 * C6532;
    const double C40525 = C50744 * C7526;
    const double C7540 = C7538 * C1109;
    const double C49966 = C49962 / C49694;
    const double C50251 = C50249 + C50250;
    const double C1225 = C49822 * C50246 + C50362 * C50031;
    const double C6099 =
        2 * C50021 * C50362 + C50021 * (C50362 + C49822 * C49990 * C50031);
    const double C50364 = C50360 + C50361;
    const double C2898 = C2302 * C1117;
    const double C8370 = C50796 * C1117;
    const double C17503 = C50796 * C1117;
    const double C25269 = C24697 * C1117;
    const double C5731 = C50744 * C1231;
    const double C8564 = C50796 * C1231;
    const double C17697 = C50796 * C1231;
    const double C3062 = C2302 * C1580;
    const double C9110 = C50796 * C1580;
    const double C11124 = C50744 * C1580;
    const double C18243 = C50796 * C1580;
    const double C25433 = C24697 * C1580;
    const double C2897 = C2307 * C1111;
    const double C8369 = C8145 * C1111;
    const double C17502 = C17278 * C1111;
    const double C3061 = C2307 * C1574;
    const double C9109 = C8145 * C1574;
    const double C11123 = C117 * C1574;
    const double C18242 = C17278 * C1574;
    const double C5546 = C117 * C1858;
    const double C2513 =
        (3 * (C49844 + C49822 * C50356 + C50354 * ae) +
         C49822 * (2 * C50356 +
                   C49822 * (C49862 + C49822 * (C49822 * C49892 + C49961 * ae) +
                             C49822 * C49961 * ae) +
                   C50357 * ae) +
         (2 * C50354 + C49822 * C50357) * ae) /
        C49759;
    const double C3277 =
        (C50021 * (2 * C50356 +
                   C49822 * (C49862 + C49822 * (C49822 * C49892 + C49961 * ae) +
                             C49822 * C49961 * ae) +
                   C50357 * ae)) /
        C49759;
    const double C2509 = 3 * (C50244 + C49938 * C50047) +
                         C49822 * (2 * C50354 + C49822 * C50357);
    const double C2703 = C50244 + C49938 * C50047 + C50357 * C50031;
    const double C3273 = C50021 * (2 * C50354 + C49822 * C50357);
    const double C4592 =
        2 * C50021 * C50357 + C50021 * (C50357 + C50387 * C50031);
    const double C6124 = C117 * C4593;
    const double C14115 = C8145 * C4593;
    const double C22209 = C17278 * C4593;
    const double C50389 = C49822 * C50385;
    const double C4599 =
        (2 * C50021 * C50356 + C50021 * (C50356 + C50385 * C50031)) / C49759;
    const double C6530 =
        (3 * (C50356 + C50385 * C50031) +
         C50021 * (2 * C50021 * C50385 +
                   C50021 * (C50385 + (C49822 * C49819 * C49907 + C49986 * ae) *
                                          C50031))) /
        C49759;
    const double C7521 =
        4 * (2 * C50021 * C49938 + C50021 * C50576) +
        C50021 * (3 * C50576 + C50021 * (2 * C50021 * C49961 +
                                         C50021 * (C49961 + C49986 * C50031)));
    const double C5565 = C5550 + C5551;
    const double C49970 = C49969 + C49940;
    const double C49983 = C49978 / C49694;
    const double C50061 = C50059 + C49944;
    const double C50086 = C50083 / C49830;
    const double C50087 = -2 * C50081;
    const double C50085 = ae * C50081;
    const double C50134 = ae * C50132;
    const double C50439 = C50438 + C49944;
    const double C50407 = C50403 + C50405;
    const double C23168 = C17278 * C4594;
    const double C38532 = C2307 * C4594;
    const double C40243 = C117 * C4594;
    const double C48267 = C8145 * C4594;
    const double C24083 =
        4 * (2 * C50021 * C50398 + C50021 * C50587) +
        C50021 * (3 * C50587 +
                  C50021 * (2 * C50021 * C50454 +
                            C50021 * (C50454 + C49822 * C49980 * C50031)));
    const double C50464 = C49853 + C50462;
    const double C50485 = C50400 + C50484;
    const double C50594 = C50591 + C50593;
    const double C49955 = C49953 + C49934;
    const double C49963 = C49958 / C49694;
    const double C50060 = C50058 / C49830;
    const double C1232 = -(C50056 * C50031 + C49822 * C49951) / C49694;
    const double C4597 = (-2 * C50021 * C50056) / C49694 -
                         (C50021 * (C50081 * C50031 + C50056)) / C49694;
    const double C6529 =
        (-3 * (C50081 * C50031 + C50056)) / C49694 +
        C50021 * ((-2 * C50021 * C50081) / C49694 -
                  (C50021 * (C49822 * C49991 * C50031 + C50081)) / C49694);
    const double C2541 = C2306 * C1118;
    const double C2531 = C2307 * C1118;
    const double C8365 = C8145 * C1118;
    const double C17498 = C17278 * C1118;
    const double C2725 = C2307 * C1581;
    const double C3293 = C2306 * C1581;
    const double C5348 = C117 * C1581;
    const double C9105 = C8145 * C1581;
    const double C13891 = C8144 * C1581;
    const double C18238 = C17278 * C1581;
    const double C27744 = C17277 * C1581;
    const double C5544 = C117 * C1865;
    const double C14121 = C8144 * C1865;
    const double C22219 = C17277 * C1865;
    const double C5552 = C117 * C5511;
    const double C15994 = C50796 * C3281;
    const double C23677 = C50796 * C3281;
    const double C31843 = C24697 * C3281;
    const double C37209 = C2302 * C3281;
    const double C38129 = C2301 * C3281;
    const double C7094 = C117 * C2706;
    const double C15335 = C8145 * C2706;
    const double C22746 = C17278 * C2706;
    const double C23682 = C17277 * C2706;
    const double C36698 = C2307 * C2706;
    const double C37624 = C2306 * C2706;
    const double C48773 = C8144 * C2706;
    const double C15993 = C8145 * C3276;
    const double C23676 = C17278 * C3276;
    const double C37208 = C2307 * C3276;
    const double C38128 = C2306 * C3276;
    const double C23172 = C17278 * C4600;
    const double C38538 = C2307 * C4600;
    const double C40245 = C117 * C4600;
    const double C48271 = C8145 * C4600;
    const double C50112 = -C50108;
    const double C40526 = C117 * C7525;
    const double C49918 = C49902 + C49916;
    const double C49997 = C49994 + C49964;
    const double C50088 = C50084 + C49968;
    const double C50181 = C50178 / C49694;
    const double C2746 = C2729 + C2730;
    const double C5354 = C5342 + C5343;
    const double C8579 = C8555 + C8556;
    const double C14808 = C14797 + C14798;
    const double C17712 = C17688 + C17689;
    const double C139 = (4 * (2 * C49844 + C49819 * C49857) +
                         C49819 * (3 * C49857 + C49819 * C49885)) /
                        C49759;
    const double C480 = (C50021 * (3 * C49857 + C49819 * C49885)) / C49759;
    const double C488 =
        (2 * C49844 + C49819 * C49857 + C49885 * C50031) / C49759;
    const double C49911 = C49908 / C49759;
    const double C40520 =
        (5 * (3 * C50448 + C50021 * C50498) +
         C50021 * (4 * C50498 +
                   C50021 * (3 * C50496 +
                             C50021 * (2 * C50021 * C49874 +
                                       C50021 * (C49874 + C49907 * C50031))))) /
        C49759;
    const double C50117 = C50110 - C50114;
    const double C50182 = C50179 / C49759;
    const double C50215 = -C50212;
    const double C50491 = C50489 - C50490;
    const double C49998 = C49996 * ce;
    const double C50255 = C49819 * C49996;
    const double C2510 = 3 * (C50246 + C49943 * C50047) +
                         C49822 * (2 * C50362 + C49822 * C50365);
    const double C2704 = C50246 + C49943 * C50047 + C50365 * C50031;
    const double C3274 = C50021 * (2 * C50362 + C49822 * C50365);
    const double C50392 = C50388 + C50390;
    const double C50467 = C49822 * C50465;
    const double C5531 = C528 * C278;
    const double C5523 = C528 * C50610;
    const double C6541 = C528 * C50605;
    const double C6919 = C528 * C50874;
    const double C6913 = C528 * C50610;
    const double C7267 = C528 * C1030;
    const double C7257 = C528 * C1031;
    const double C5570 = C5557 * C278;
    const double C6539 = C5557 * C50605;
    const double C6915 = C5557 * C50874;
    const double C7261 = C5557 * C1030;
    const double C6134 = C6128 * C278;
    const double C6549 = C6128 * C50605;
    const double C6927 = C6128 * C50874;
    const double C49859 = C49858 / C49759;
    const double C50053 = C50051 / C49759;
    const double C6136 = C6130 * C278;
    const double C6551 = C6130 * C50605;
    const double C6931 = C6130 * C50874;
    const double C7105 = C7101 * C50605;
    const double C5573 = C5560 * C278;
    const double C6546 = C5560 * C50605;
    const double C7885 = C5560 * C50874;
    const double C40350 = C5560 * C1030;
    const double C49884 = C49882 / C49759;
    const double C50113 = C50109 / C49759;
    const double C50128 = C50127 / C49759;
    const double C50144 = -C50142;
    const double C49917 = C49915 / C49759;
    const double C50180 = C50176 / C49759;
    const double C50199 = C50197 / C49759;
    const double C50216 = -C50213;
    const double C50932 = C50879 - C50915;
    const double C50933 = C50883 - C50917;
    const double C50934 = C50886 - C50919;
    const double C50935 = C50893 - C50920;
    const double C50936 = C50888 - C50922;
    const double C50937 = C50897 - C50923;
    const double C50940 = C50901 - C50928;
    const double C50941 = C50910 - C50929;
    const double C5886 = C529 * C643;
    const double C7258 = C529 * C1037;
    const double C49717 = C50605 - C49715;
    const double C5895 = C528 * C50930;
    const double C5889 = C5557 * C50930;
    const double C5883 = C5555 * C50930;
    const double C39502 = C5560 * C50930;
    const double C106 = (C50930 * C50600) / C49694 + (C50874 - C50913) / C49699;
    const double C5885 = C528 * C50931;
    const double C107 =
        (C50931 * C50600) / C49694 + (2 * C50610 + C50930) / C49699;
    const double C108 = (C50600 * C50610) / C49703 + C50931 / C49699;
    const double C24720 = C24702 * C292;
    const double C24710 = C24702 * C308;
    const double C24704 = C24702 * C291;
    const double C24914 = C24702 * C1118;
    const double C24908 = C24702 * C1112;
    const double C25096 = C24702 * C1581;
    const double C25090 = C24702 * C1575;
    const double C25268 = C24702 * C1111;
    const double C25432 = C24702 * C1574;
    const double C31338 = C24702 * C2702;
    const double C31332 = C24702 * C2706;
    const double C31330 = C24702 * C1583;
    const double C31324 = C24702 * C1576;
    const double C31848 = C24702 * C3272;
    const double C31842 = C24702 * C3276;
    const double C33172 = C24702 * C4600;
    const double C33166 = C24702 * C4594;
    const double C49798 = C50744 - C49795;
    const double C24739 = C50938 * C146;
    const double C24733 = C50938 * C135;
    const double C24723 = C50938 * C145;
    const double C24717 = C50938 * C133;
    const double C24715 = C50938 * C144;
    const double C24709 = C50938 * C131;
    const double C24921 = C50938 * C307;
    const double C24911 = C50938 * C316;
    const double C24905 = C50938 * C295;
    const double C25103 = C50938 * C484;
    const double C25093 = C50938 * C493;
    const double C25087 = C50938 * C472;
    const double C25273 = C50938 * C299;
    const double C25437 = C50938 * C476;
    const double C25649 = C50938 * C901;
    const double C31343 = C50938 * C482;
    const double C31337 = C50938 * C497;
    const double C31327 = C50938 * C492;
    const double C31321 = C50938 * C474;
    const double C31853 = C50938 * C899;
    const double C31847 = C50938 * C909;
    const double C32257 = C50938 * C1239;
    const double C32251 = C50938 * C1235;
    const double C32761 = C50938 * C1588;
    const double C32755 = C50938 * C1584;
    const double C33169 = C50938 * C1872;
    const double C33163 = C50938 * C1868;
    const double C20075 =
        (C50938 * C50791) / C49759 + (C50902 - C50924) / C49784;
    const double C8195 = C8183 + C8184;
    const double C47379 = C14128 + C14127;
    const double C2359 = C2337 + C2338;
    const double C2354 = C2327 + C2328;
    const double C2351 = C2321 + C2322;
    const double C2350 = C2319 + C2320;
    const double C2347 = C2313 + C2314;
    const double C2553 = C2537 + C2538;
    const double C2548 = C2527 + C2528;
    const double C2545 = C2521 + C2522;
    const double C2747 = C2731 + C2732;
    const double C2742 = C2721 + C2722;
    const double C2739 = C2715 + C2716;
    const double C2911 = C2901 + C2902;
    const double C3075 = C3065 + C3066;
    const double C3299 = C3289 + C3290;
    const double C36721 = C36708 + C36709;
    const double C36718 = C36702 + C36703;
    const double C36713 = C36692 + C36693;
    const double C36710 = C36686 + C36687;
    const double C37225 = C37218 + C37219;
    const double C37222 = C37212 + C37213;
    const double C37631 = C37622 + C37623;
    const double C37628 = C37616 + C37617;
    const double C38135 = C38126 + C38127;
    const double C38132 = C38120 + C38121;
    const double C38543 = C38534 + C38535;
    const double C38540 = C38528 + C38529;
    const double C24731 = C50939 * C301;
    const double C24719 = C50939 * C299;
    const double C24713 = C50939 * C316;
    const double C24707 = C50939 * C295;
    const double C24919 = C50939 * C1119;
    const double C24907 = C50939 * C307;
    const double C25101 = C50939 * C1233;
    const double C25089 = C50939 * C901;
    const double C25271 = C50939 * C309;
    const double C25435 = C50939 * C903;
    const double C25647 = C50939 * C1582;
    const double C31341 = C50939 * C1235;
    const double C31335 = C50939 * C1239;
    const double C31329 = C50939 * C909;
    const double C31323 = C50939 * C899;
    const double C31851 = C50939 * C1584;
    const double C31845 = C50939 * C1588;
    const double C32259 = C50939 * C2711;
    const double C32253 = C50939 * C2705;
    const double C32763 = C50939 * C3281;
    const double C32757 = C50939 * C3275;
    const double C33165 = C50939 * C4603;
    const double C20076 =
        (C50939 * C50791) / C49759 + (2 * C50796 + C50938) / C49784;
    const double C20077 = (C50791 * C50796) / C49763 + C50939 / C49784;
    const double C17321 = C17298 + C17299;
    const double C17318 = C17292 + C17293;
    const double C17316 = C17288 + C17289;
    const double C17315 = C17286 + C17287;
    const double C17313 = C17282 + C17283;
    const double C17519 = C17496 + C17497;
    const double C17514 = C17486 + C17487;
    const double C17512 = C17482 + C17483;
    const double C17510 = C17478 + C17479;
    const double C17713 = C17690 + C17691;
    const double C17708 = C17680 + C17681;
    const double C17706 = C17676 + C17677;
    const double C17704 = C17672 + C17673;
    const double C18251 = C18236 + C18237;
    const double C22238 = C22217 + C22218;
    const double C22236 = C22213 + C22214;
    const double C22233 = C22207 + C22208;
    const double C22229 = C22201 + C22202;
    const double C22227 = C22197 + C22198;
    const double C22225 = C22193 + C22194;
    const double C22223 = C22189 + C22190;
    const double C22767 = C22752 + C22753;
    const double C22765 = C22748 + C22749;
    const double C22762 = C22742 + C22743;
    const double C22761 = C22740 + C22741;
    const double C22759 = C22736 + C22737;
    const double C23688 = C23674 + C23675;
    const double C23686 = C23670 + C23671;
    const double C24100 = C24090 + C24091;
    const double C27747 = C27740 + C27741;
    const double C176 = C161 + C162;
    const double C2362 = C2343 + C2344;
    const double C8190 = C8169 + C8170;
    const double C17323 = C17302 + C17303;
    const double C5528 = C533 * C284;
    const double C6542 = C533 * C1109;
    const double C6916 = C533 * C49713;
    const double C6104 = C927 * C284;
    const double C6556 = C927 * C1109;
    const double C6926 = C927 * C49713;
    const double C14101 = C8571 + C8572;
    const double C14099 = C8572 + C8571;
    const double C6550 = C6131 * C1109;
    const double C47378 = C14130 + C14129;
    const double C7102 = C7092 + C7093;
    const double C15338 = C15331 + C15332;
    const double C22766 = C22750 + C22751;
    const double C23690 = C23678 + C23679;
    const double C36719 = C36704 + C36705;
    const double C37629 = C37618 + C37619;
    const double C48777 = C48769 + C48770;
    const double C15996 = C15989 + C15990;
    const double C23687 = C23672 + C23673;
    const double C37223 = C37214 + C37215;
    const double C38133 = C38122 + C38123;
    const double C177 = C163 + C164;
    const double C8192 = C8173 + C8174;
    const double C17325 = C17306 + C17307;
    const double C354 = C334 + C335;
    const double C2358 = C2335 + C2336;
    const double C8187 = C8163 + C8164;
    const double C8744 = C8737 + C8738;
    const double C17320 = C17296 + C17297;
    const double C17877 = C17870 + C17871;
    const double C358 = C342 + C343;
    const double C2353 = C2325 + C2326;
    const double C2910 = C2899 + C2900;
    const double C8390 = C8371 + C8372;
    const double C8382 = C8355 + C8356;
    const double C17523 = C17504 + C17505;
    const double C17515 = C17488 + C17489;
    const double C531 = C511 + C512;
    const double C8904 = C8897 + C8898;
    const double C18037 = C18030 + C18031;
    const double C535 = C519 + C520;
    const double C8584 = C8565 + C8566;
    const double C17717 = C17698 + C17699;
    const double C929 = C919 + C920;
    const double C3074 = C3063 + C3064;
    const double C8576 = C8549 + C8550;
    const double C9122 = C9111 + C9112;
    const double C17709 = C17682 + C17683;
    const double C18255 = C18244 + C18245;
    const double C49878 = C49875 / C49759;
    const double C2728 = C2302 * C2707;
    const double C5351 = C50744 * C2707;
    const double C14796 = C50796 * C2707;
    const double C22745 = C50796 * C2707;
    const double C25099 = C24697 * C2707;
    const double C7096 = C5356 * C1109;
    const double C14794 = C9117 + C9118;
    const double C14783 = C9118 + C9117;
    const double C5572 = C5559 * C284;
    const double C6545 = C5559 * C1109;
    const double C7884 = C5559 * C49713;
    const double C50408 = C50406 + C50401;
    const double C6564 = C6552 + C6553;
    const double C16526 = C16519 + C16520;
    const double C22237 = C22215 + C22216;
    const double C23177 = C23166 + C23167;
    const double C38541 = C38530 + C38531;
    const double C48276 = C48265 + C48266;
    const double C24101 = C24092 + C24093;
    const double C39909 = C39904 + C39905;
    const double C49184 = C49175 + C49176;
    const double C40528 = C40524 + C40525;
    const double C303 = (C49822 * (3 * C49857 + C49819 * C49885) +
                         (3 * C50246 + C49819 * C50251) * ae) /
                        C49759;
    const double C311 =
        (2 * C49844 + C49819 * C49857 +
         C49822 * (C49822 * C49885 + C50251 * ae) + C49822 * C50251 * ae) /
        C49759;
    const double C905 = (C50021 * (C49822 * C49885 + C50251 * ae)) / C49759;
    const double C127 = 4 * (2 * C50244 + C49819 * C50246) +
                        C49819 * (3 * C50246 + C49819 * C50251);
    const double C289 = C49822 * (3 * C50246 + C49819 * C50251);
    const double C293 = 2 * C50244 + C49819 * C50246 + C50251 * C50047;
    const double C466 = C50021 * (3 * C50246 + C49819 * C50251);
    const double C470 = 2 * C50244 + C49819 * C50246 + C50251 * C50031;
    const double C897 = C50021 * C49822 * C50251;
    const double C1110 =
        2 * C49822 * C50251 + C49822 * (C50251 + C49996 * C50047);
    const double C1224 = C49822 * C50251 + C49822 * C49996 * C50031;
    const double C1573 = C50021 * (C50251 + C49996 * C50047);
    const double C1857 =
        2 * C50021 * C50251 + C50021 * (C50251 + C49996 * C50031);
    const double C5730 = C117 * C1225;
    const double C8563 = C8145 * C1225;
    const double C17696 = C17278 * C1225;
    const double C2515 =
        (3 * (C49857 + C49822 * C50364 + C50362 * ae) +
         C49822 * (2 * C50364 +
                   C49822 * (C49880 + C49822 * (C49822 * C49913 + C49990 * ae) +
                             C49822 * C49990 * ae) +
                   C50365 * ae) +
         (2 * C50362 + C49822 * C50365) * ae) /
        C49759;
    const double C2709 = (C49857 + C49822 * C50364 + C50362 * ae +
                          (C49880 + C49822 * (C49822 * C49913 + C49990 * ae) +
                           C49822 * C49990 * ae) *
                              C50031) /
                         C49759;
    const double C3279 =
        (C50021 * (2 * C50364 +
                   C49822 * (C49880 + C49822 * (C49822 * C49913 + C49990 * ae) +
                             C49822 * C49990 * ae) +
                   C50365 * ae)) /
        C49759;
    const double C6100 =
        (2 * C50021 * C50364 +
         C50021 * (C50364 + (C49822 * C49913 + C49990 * ae) * C50031)) /
        C49759;
    const double C2909 = C2897 + C2898;
    const double C8389 = C8369 + C8370;
    const double C17522 = C17502 + C17503;
    const double C3073 = C3061 + C3062;
    const double C9121 = C9109 + C9110;
    const double C11127 = C11123 + C11124;
    const double C18254 = C18242 + C18243;
    const double C5563 = C5546 + C5547;
    const double C2534 = C2302 * C2513;
    const double C24917 = C24697 * C2513;
    const double C3286 = C2302 * C3277;
    const double C13886 = C50796 * C3277;
    const double C25645 = C24697 * C3277;
    const double C27739 = C50796 * C3277;
    const double C2533 = C2307 * C2509;
    const double C24916 = C24702 * C2509;
    const double C2727 = C2307 * C2703;
    const double C5350 = C117 * C2703;
    const double C14795 = C8145 * C2703;
    const double C22744 = C17278 * C2703;
    const double C25098 = C24702 * C2703;
    const double C3285 = C2307 * C3273;
    const double C13885 = C8145 * C3273;
    const double C25644 = C24702 * C3273;
    const double C27738 = C17278 * C3273;
    const double C50391 = C49862 + C50389;
    const double C6125 = C50744 * C4599;
    const double C14116 = C50796 * C4599;
    const double C22210 = C50796 * C4599;
    const double C7536 = C5565 * C1109;
    const double C39299 = C5565 * C284;
    const double C40761 = C5565 * C49713;
    const double C49971 = C49970 + C49965;
    const double C2514 =
        (-3 * (C49944 * C50047 + C49951)) / C49694 +
        C49822 * ((-2 * C50056) / C49694 - (C49822 * C50061) / C49694);
    const double C2708 = -(C50061 * C50031 + C49944 * C50047 + C49951) / C49694;
    const double C3278 =
        C50021 * ((-2 * C50056) / C49694 - (C49822 * C50061) / C49694);
    const double C50091 = C50087 / C49694;
    const double C50089 = C50085 / C49830;
    const double C50135 = C50134 / C49830;
    const double C7523 =
        4 * ((-2 * C50021 * C49944) / C49694 - (C50021 * C50439) / C49694) +
        C50021 * ((-3 * C50439) / C49694 +
                  C50021 * ((-2 * C50132) / C49694 -
                            (C50021 * (C49991 * C50031 + C49968)) / C49694));
    const double C3547 = 4 * (2 * C50346 + C49822 * C50349) +
                         C49822 * (3 * C50349 + C49822 * C50407);
    const double C3701 = 2 * C50346 + C49822 * C50349 + C50407 * C50031;
    const double C4195 = C50021 * (3 * C50349 + C49822 * C50407);
    const double C21468 =
        2 * C50021 * C50407 + C50021 * (C50407 + C50465 * C50031);
    const double C50466 = C50464 + C50459;
    const double C24085 =
        (4 * (2 * C50021 * C50400 + C50021 * C50485) +
         C50021 * (3 * C50485 + C50021 * (2 * C50021 * C50458 +
                                          C50021 * (C50458 + (C49822 * C49907 +
                                                              C49980 * ae) *
                                                                 C50031)))) /
        C49759;
    const double C40518 =
        5 * (3 * C50579 + C50021 * C50594) +
        C50021 * (4 * C50594 +
                  C50021 * (3 * C50592 +
                            C50021 * (2 * C50021 * C49939 +
                                      C50021 * (C49939 + C49980 * C50031))));
    const double C49956 = C49955 + C49954;
    const double C2735 = C2306 * C1232;
    const double C5344 = C117 * C1232;
    const double C8559 = C8145 * C1232;
    const double C14801 = C8144 * C1232;
    const double C17692 = C17278 * C1232;
    const double C22754 = C17277 * C1232;
    const double C6126 = C117 * C4597;
    const double C14119 = C8145 * C4597;
    const double C22221 = C17278 * C4597;
    const double C7103 = C7094 + C7095;
    const double C15340 = C15335 + C15336;
    const double C22764 = C22746 + C22747;
    const double C23692 = C23682 + C23683;
    const double C36716 = C36698 + C36699;
    const double C37632 = C37624 + C37625;
    const double C48779 = C48773 + C48774;
    const double C15998 = C15993 + C15994;
    const double C23689 = C23676 + C23677;
    const double C37220 = C37208 + C37209;
    const double C38136 = C38128 + C38129;
    const double C50115 = C50112 / C49759;
    const double C49920 = C49819 * C49918;
    const double C1115 =
        (2 * (C49822 * C49885 + C50251 * ae) +
         C49822 * (C49885 + C49822 * (C49822 * C49918 + C49996 * ae) +
                   C49822 * C49996 * ae) +
         (C50251 + C49996 * C50047) * ae) /
        C49759;
    const double C1229 = (C49822 * C49885 + C50251 * ae +
                          (C49822 * C49918 + C49996 * ae) * C50031) /
                         C49759;
    const double C1578 =
        (C50021 * (C49885 + C49822 * (C49822 * C49918 + C49996 * ae) +
                   C49822 * C49996 * ae)) /
        C49759;
    const double C1862 =
        (2 * C50021 * C49885 + C50021 * (C49885 + C49918 * C50031)) / C49759;
    const double C49999 = C49997 + C49989;
    const double C50092 = C49822 * C50088;
    const double C4596 = (-2 * C50021 * C50061) / C49694 -
                         (C50021 * (C50088 * C50031 + C50061)) / C49694;
    const double C50184 = C50177 - C50181;
    const double C6110 = C5354 * C284;
    const double C6558 = C5354 * C1109;
    const double C6930 = C5354 * C49713;
    const double C14114 = C8579 + C8580;
    const double C14103 = C8580 + C8579;
    const double C168 = C50744 * C139;
    const double C760 = C50744 * C480;
    const double C524 = C50744 * C488;
    const double C49914 = C49911 - C49893;
    const double C3550 =
        4 * ((-2 * C50044) / C49694 - (C49822 * C50052) / C49694) +
        C49822 * ((-3 * C50052) / C49694 + C49822 * C50117);
    const double C3704 =
        (-2 * C50044) / C49694 - (C49822 * C50052) / C49694 + C50117 * C50031;
    const double C4198 = C50021 * ((-3 * C50052) / C49694 + C49822 * C50117);
    const double C50185 = C50182 - C49893;
    const double C50217 = C50215 / C49759;
    const double C40519 =
        5 * ((-3 * C50445) / C49694 + C50021 * C50491) +
        C50021 * (4 * C50491 +
                  C50021 * ((-3 * C50196) / C49694 +
                            C50021 * ((-2 * C50208) / C49694 -
                                      (C50021 * (C49984 * C50031 + C49964)) /
                                          C49694)));
    const double C50000 = C49998 / C49694;
    const double C50256 = C50254 + C50255;
    const double C3546 = 4 * (2 * C50354 + C49822 * C50357) +
                         C49822 * (3 * C50357 + C49822 * C50392);
    const double C3700 = 2 * C50354 + C49822 * C50357 + C50392 * C50031;
    const double C4194 = C50021 * (3 * C50357 + C49822 * C50392);
    const double C50469 = C50457 + C50467;
    const double C6562 = C6538 + C6539;
    const double C49860 = C49859 - C49850;
    const double C50054 = C50053 - C50049;
    const double C7531 = C6546 + C6547;
    const double C39903 = C6547 + C6546;
    const double C49886 = C49884 - C49869;
    const double C50116 = C50113 - C50105;
    const double C50129 = C50128 - C49863;
    const double C50145 = C50144 / C49759;
    const double C49919 = C49917 - C49901;
    const double C50183 = C50180 - C50170;
    const double C50201 = C50199 - C49893;
    const double C50218 = C50216 / C49759;
    const double C111 = (C50932 * C50621) / C49759 + (C50881 - C50916) / C49784;
    const double C112 =
        (C50933 * C50621) / C49759 + (2 * C50631 + C50932) / C49784;
    const double C113 = (C50621 * C50631) / C49763 + C50933 / C49784;
    const double C1105 =
        (C50934 * C50696) / C49694 + (C50889 - C50918) / C49699;
    const double C1106 =
        (C50935 * C50696) / C49694 + (2 * C50701 + C50934) / C49699;
    const double C1107 = (C50696 * C50701) / C49703 + C50935 / C49699;
    const double C1853 =
        (C50936 * C50722) / C49694 + (C50890 - C50921) / C49699;
    const double C1854 =
        (C50937 * C50722) / C49694 + (2 * C50727 + C50936) / C49699;
    const double C1855 = (C50722 * C50727) / C49703 + C50937 / C49699;
    const double C39097 =
        (C50940 * C50819) / C49759 + (C50903 - C50927) / C49784;
    const double C39098 =
        (C50941 * C50819) / C49759 + (2 * C50824 + C50940) / C49784;
    const double C39099 = (C50819 * C50824) / C49763 + C50941 / C49784;
    const double C49718 = C49717 * ce;
    const double C283 = (-C49695 / C49694) / C49699 - (C49717 * de) / C49694;
    const double C24748 = C24720 + C24721;
    const double C24740 = C24704 + C24705;
    const double C24930 = C24908 + C24909;
    const double C25112 = C25090 + C25091;
    const double C25280 = C25268 + C25269;
    const double C25444 = C25432 + C25433;
    const double C31353 = C31338 + C31339;
    const double C31350 = C31332 + C31333;
    const double C31349 = C31330 + C31331;
    const double C31346 = C31324 + C31325;
    const double C31857 = C31848 + C31849;
    const double C31854 = C31842 + C31843;
    const double C49800 = C49798 * ae;
    const double C47383 = C47379 * C278;
    const double C48264 = C47379 * C50605;
    const double C49529 = C47379 * C50874;
    const double C17328 = C17316 + C17317;
    const double C22205 = C17712 + C17713;
    const double C27948 = C17713 + C17712;
    const double C27946 = C17704 + C17705;
    const double C27944 = C17705 + C17704;
    const double C28601 = C18250 + C18251;
    const double C28598 = C18251 + C18250;
    const double C22242 = C22229 + C22230;
    const double C22241 = C22227 + C22228;
    const double C6567 = C6551 + C6550;
    const double C48263 = C47378 * C1109;
    const double C7106 = C7102 * C1109;
    const double C48274 = C15338 + C15337;
    const double C23175 = C22766 + C22767;
    const double C8197 = C8187 + C8188;
    const double C17330 = C17320 + C17321;
    const double C8733 = C8382 + C8381;
    const double C17866 = C17515 + C17514;
    const double C5898 = C531 * C643;
    const double C7270 = C531 * C1037;
    const double C11277 = C531 * C284;
    const double C12519 = C531 * C49713;
    const double C5536 = C535 * C284;
    const double C5892 = C535 * C643;
    const double C6924 = C535 * C49713;
    const double C7264 = C535 * C1037;
    const double C12172 = C535 * C1109;
    const double C6116 = C929 * C284;
    const double C6934 = C929 * C49713;
    const double C12173 = C929 * C1109;
    const double C8893 = C8576 + C8575;
    const double C14523 = C8575 + C8576;
    const double C18026 = C17709 + C17708;
    const double C28338 = C17708 + C17709;
    const double C49881 = C49878 - C49863;
    const double C3551 =
        (4 * (2 * C50348 + C49822 * C50408 + C50349 * ae) +
         C49822 *
             (3 * C50408 +
              C49822 *
                  (2 * C50400 +
                   C49822 * (C49853 + C49822 * (C49822 * C49874 + C49939 * ae) +
                             C49822 * C49939 * ae) +
                   C50402 * ae) +
              C50407 * ae) +
         (3 * C50349 + C49822 * C50407) * ae) /
        C49759;
    const double C3705 =
        (2 * C50348 + C49822 * C50408 + C50349 * ae +
         (2 * C50400 +
          C49822 * (C49853 + C49822 * (C49822 * C49874 + C49939 * ae) +
                    C49822 * C49939 * ae) +
          C50402 * ae) *
             C50031) /
        C49759;
    const double C4199 =
        (C50021 *
         (3 * C50408 +
          C49822 *
              (2 * C50400 +
               C49822 * (C49853 + C49822 * (C49822 * C49874 + C49939 * ae) +
                         C49822 * C49939 * ae) +
               C50402 * ae) +
          C50407 * ae)) /
        C49759;
    const double C4602 =
        (2 * C50021 * C50408 +
         C50021 * (C50408 + (C49853 + C49822 * (C49822 * C49874 + C49939 * ae) +
                             C49822 * C49939 * ae) *
                                C50031)) /
        C49759;
    const double C6568 = C6564 * C1109;
    const double C49172 = C16526 + C16525;
    const double C24089 = C22237 + C22238;
    const double C39911 = C39909 * C1109;
    const double C40530 = C40528 * C1109;
    const double C650 = C50744 * C303;
    const double C8172 = C50796 * C303;
    const double C17305 = C50796 * C303;
    const double C347 = C50744 * C311;
    const double C2334 = C2302 * C311;
    const double C8736 = C50796 * C311;
    const double C17869 = C50796 * C311;
    const double C24729 = C24697 * C311;
    const double C924 = C50744 * C905;
    const double C8896 = C50796 * C905;
    const double C18029 = C50796 * C905;
    const double C167 = C117 * C127;
    const double C649 = C117 * C289;
    const double C8171 = C8145 * C289;
    const double C17304 = C17278 * C289;
    const double C346 = C117 * C293;
    const double C2333 = C2307 * C293;
    const double C8735 = C8145 * C293;
    const double C17868 = C17278 * C293;
    const double C24728 = C24702 * C293;
    const double C759 = C117 * C466;
    const double C523 = C117 * C470;
    const double C923 = C117 * C897;
    const double C8895 = C8145 * C897;
    const double C18028 = C17278 * C897;
    const double C5734 = C5730 + C5731;
    const double C8583 = C8563 + C8564;
    const double C17716 = C17696 + C17697;
    const double C12671 = C11127 * C1109;
    const double C5576 = C5563 * C284;
    const double C7888 = C5563 * C49713;
    const double C13069 = C5563 * C1109;
    const double C39505 = C5563 * C643;
    const double C40353 = C5563 * C1037;
    const double C2551 = C2533 + C2534;
    const double C24934 = C24916 + C24917;
    const double C2745 = C2727 + C2728;
    const double C5358 = C5350 + C5351;
    const double C14807 = C14795 + C14796;
    const double C22763 = C22744 + C22745;
    const double C25116 = C25098 + C25099;
    const double C3297 = C3285 + C3286;
    const double C13893 = C13885 + C13886;
    const double C25656 = C25644 + C25645;
    const double C27746 = C27738 + C27739;
    const double C50393 = C50391 + C50386;
    const double C6132 = C6124 + C6125;
    const double C14131 = C14115 + C14116;
    const double C22234 = C22209 + C22210;
    const double C49972 = C49819 * C49971;
    const double C49977 = -3 * C49971;
    const double C50066 = ae * C49971;
    const double C50064 = C49822 * C49971;
    const double C2539 = C2307 * C2514;
    const double C24922 = C24702 * C2514;
    const double C2733 = C2307 * C2708;
    const double C5352 = C117 * C2708;
    const double C14799 = C8145 * C2708;
    const double C22756 = C17278 * C2708;
    const double C25104 = C24702 * C2708;
    const double C3291 = C2307 * C3278;
    const double C13889 = C8145 * C3278;
    const double C25650 = C24702 * C3278;
    const double C27742 = C17278 * C3278;
    const double C23680 = C17278 * C3701;
    const double C32254 = C24702 * C3701;
    const double C37620 = C2307 * C3701;
    const double C48771 = C8145 * C3701;
    const double C32758 = C24702 * C4195;
    const double C38124 = C2307 * C4195;
    const double C50468 = C49822 * C50466;
    const double C23161 =
        (3 * (C50408 + C50466 * C50031) +
         C50021 *
             (2 * C50021 * C50466 +
              C50021 *
                  (C50466 + (C49874 + C49822 * (C49822 * C49907 + C49980 * ae) +
                             C49822 * C49980 * ae) *
                                C50031))) /
        C49759;
    const double C138 =
        (-3 * (C49819 * C49951 + C49947 + C50244 * ce)) / C49694 +
        C49819 * ((-2 * C49951) / C49694 - (C49819 * C49956) / C49694 -
                  (C50246 * ce) / C49694) -
        ((2 * C50244 + C49819 * C50246) * ce) / C49694;
    const double C302 =
        C49822 * ((-2 * C49951) / C49694 - (C49819 * C49956) / C49694 -
                  (C50246 * ce) / C49694);
    const double C310 =
        -(C49956 * C50047 + C49819 * C49951 + C49947 + C50244 * ce) / C49694;
    const double C479 =
        C50021 * ((-2 * C49951) / C49694 - (C49819 * C49956) / C49694 -
                  (C50246 * ce) / C49694);
    const double C487 =
        -(C49956 * C50031 + C49819 * C49951 + C49947 + C50244 * ce) / C49694;
    const double C904 = -(C50021 * C49822 * C49956) / C49694;
    const double C1116 = (-2 * C49822 * C49956) / C49694 -
                         (C49822 * (C49971 * C50047 + C49956)) / C49694;
    const double C1579 = -(C50021 * (C49971 * C50047 + C49956)) / C49694;
    const double C1863 = (-2 * C50021 * C49956) / C49694 -
                         (C50021 * (C49971 * C50031 + C49956)) / C49694;
    const double C7107 = C7103 * C50605;
    const double C48273 = C15340 + C15339;
    const double C23174 = C22764 + C22765;
    const double C50118 = C50115 - C49863;
    const double C49922 = C49897 + C49920;
    const double C50001 = C49819 * C49999;
    const double C50067 = C49999 * C50047;
    const double C5513 =
        (-3 * (C49971 * C50031 + C49956)) / C49694 +
        C50021 * ((-2 * C50021 * C49971) / C49694 -
                  (C50021 * (C49999 * C50031 + C49971)) / C49694);
    const double C50095 = C50092 / C49694;
    const double C50187 = C49822 * C50184;
    const double C21469 =
        2 * C50021 * C50117 + C50021 * (C50117 + C50184 * C50031);
    const double C47380 = C14114 * C284;
    const double C49530 = C14114 * C49713;
    const double C23684 = C17278 * C3704;
    const double C32260 = C24702 * C3704;
    const double C37626 = C2307 * C3704;
    const double C48775 = C8145 * C3704;
    const double C32764 = C24702 * C4198;
    const double C38130 = C2307 * C4198;
    const double C50219 = C50217 - C50206;
    const double C128 = 5 * (3 * C50246 + C49819 * C50251) +
                        C49819 * (4 * C50251 + C49819 * C50256);
    const double C294 = 3 * C50246 + C49819 * C50251 + C50256 * C50047;
    const double C471 = 3 * C50246 + C49819 * C50251 + C50256 * C50031;
    const double C644 = C49822 * (4 * C50251 + C49819 * C50256);
    const double C754 = C50021 * (4 * C50251 + C49819 * C50256);
    const double C898 = C50021 * C49822 * C50256;
    const double C20770 = 5 * (3 * C50349 + C49822 * C50407) +
                          C49822 * (4 * C50407 + C49822 * C50469);
    const double C20872 = 3 * C50349 + C49822 * C50407 + C50469 * C50031;
    const double C21202 = C50021 * (4 * C50407 + C49822 * C50469);
    const double C147 =
        3 * ((-(C49844 * ce) / C49694) / C49759 - C49841 / C49830 +
             C49819 * C49860) -
        ((2 * C49844 + C49819 * C49857) * ce) / C49830 +
        C49819 *
            (2 * C49860 - (C49857 * ce) / C49830 +
             C49819 *
                 ((-(C49819 * C49853 * ce) / C49694) / C49759 -
                  C49852 / C49830 +
                  C49819 * ((-(C49819 * std::pow(C49824, 6) * bs[6] * C49835) /
                             C49694) /
                                C49759 -
                            (C49853 * ce) / C49830)));
    const double C317 =
        C49822 * ((-(C49844 * ce) / C49694) / C49759 - C49841 / C49830 +
                  C49819 * C49860) -
        (ae * (C49819 * (C49819 * C49837 * C49838 * C49929 + C49930 * ce) +
               C49831 * C49827 * C49929 + C49819 * C49930 * ce)) /
            C49830;
    const double C321 = (-(C49819 * C49841) / C49694) / C49759 -
                        (C49834 * ce) / C49830 -
                        (ae * C49822 * C49951) / C49830 +
                        C49822 * (C49822 * C49860 - (ae * C49951) / C49830);
    const double C494 = (zP - zQ) * ((-(C49844 * ce) / C49694) / C49759 -
                                     C49841 / C49830 + C49819 * C49860);
    const double C498 = (-(C49819 * C49841) / C49694) / C49759 -
                        (C49834 * ce) / C49830 + C49860 * std::pow(zP - zQ, 2);
    const double C910 =
        C49822 * C50021 * C49860 - (ae * C50021 * C49951) / C49830;
    const double C2517 =
        3 * ((-(ae * C50044) / C49694) / C49759 - C49841 / C49830 +
             C49822 * C50054) +
        (((-2 * C50044) / C49694 - (C49822 * C50052) / C49694) * ae) / C49759 +
        C49822 *
            (2 * C50054 - (ae * C50052) / C49830 +
             C49822 * ((-(ae * C49822 * C49940) / C49694) / C49759 - C49863 +
                       C49822 * ((-(C49822 * C49873) / C49694) / C49759 -
                                 (ae * C49940) / C49830)));
    const double C49887 = C49819 * C49886;
    const double C49890 = 2 * C49886;
    const double C50057 = C49822 * C49886;
    const double C50077 = C50021 * C49886;
    const double C50093 = C49886 - C50089;
    const double C1124 =
        2 * (C49822 * C49860 - (ae * C49951) / C49830) -
        (ae * (C49944 * std::pow(C49822, 2) + C49951)) / C49830 +
        C49822 * (C49860 - (ae * C49822 * C49944) / C49830 +
                  C49822 * (C49822 * C49886 - (ae * C49944) / C49830));
    const double C1238 = C49822 * (C49860 + C49886 * C50031) -
                         (ae * (C49944 * C50031 + C49951)) / C49830;
    const double C1587 =
        C50021 * C49860 - (ae * C50021 * C49822 * C49944) / C49830 +
        C49822 * (C49822 * C50021 * C49886 - (ae * C50021 * C49944) / C49830);
    const double C1871 =
        2 * C50021 * C49860 + C50021 * (C49860 + C49886 * C50031);
    const double C50119 = C49822 * C50116;
    const double C50160 = 2 * C50116;
    const double C3707 =
        2 * (C49822 * C50129 - (ae * (C49940 * C50031 + C49934)) / C49830) -
        (ae * (C50107 * C50031 + C50052)) / C49830 +
        C49822 * (C50129 - (ae * (C49822 * C49964 * C50031 + C50099)) / C49830 +
                  C49822 * (C49822 * ((-(C49906 * C50031) / C49694) / C49759 -
                                      C49893) -
                            (ae * (C49964 * C50031 + C49940)) / C49830));
    const double C4606 =
        (-2 * C50075) / C49830 + C50021 * C50129 +
        (((-2 * C50021 * C50099) / C49694 -
          (C50021 * (C49822 * C49964 * C50031 + C50099)) / C49694) *
         ae) /
            C49759 +
        C49822 * ((((-2 * C50139) / C49694 -
                    (C50021 * (C49964 * C50031 + C49940)) / C49694) *
                   ae) /
                      C49759 +
                  C49822 * ((-2 * C50138) / C49830 +
                            C50021 * ((-(C49906 * C50031) / C49694) / C49759 -
                                      C49893)));
    const double C4607 = (((-2 * C50021 * C49934) / C49694 -
                           (C50021 * (C49940 * C50031 + C49934)) / C49694) *
                          ae) /
                             C49759 +
                         C49822 * ((-2 * C50075) / C49830 + C50021 * C50129);
    const double C5514 =
        3 * ((-(C49852 * C50031) / C49694) / C49759 - C49841 / C49830) +
        C50021 * ((-2 * C50075) / C49830 + C50021 * C50129);
    const double C6534 =
        (((-3 * (C49940 * C50031 + C49934)) / C49694 +
          C50021 * ((-2 * C50139) / C49694 -
                    (C50021 * (C49964 * C50031 + C49940)) / C49694)) *
         ae) /
            C49759 +
        C49822 * (3 * C50129 +
                  C50021 * ((-2 * C50138) / C49830 +
                            C50021 * ((-(C49906 * C50031) / C49694) / C49759 -
                                      C49893)));
    const double C7528 =
        4 * ((-2 * C50075) / C49830 + C50021 * C50129) +
        C50021 * (3 * C50129 +
                  C50021 * ((-2 * C50138) / C49830 +
                            C50021 * ((-(C49906 * C50031) / C49694) / C49759 -
                                      C49893)));
    const double C50146 = C50145 - C50143;
    const double C49921 = C49819 * C49919;
    const double C50082 = C49822 * C49919;
    const double C50122 = C49919 * C50031;
    const double C50131 = C50021 * C49919;
    const double C2712 = C49860 + C49886 * C50031 -
                         (ae * (C49822 * C49968 * C50031 + C50056)) / C49830 +
                         C49822 * (C49822 * (C49886 + C49919 * C50031) -
                                   (ae * (C49968 * C50031 + C49944)) / C49830);
    const double C50186 = C49822 * C50183;
    const double C50202 = C49822 * C50201;
    const double C50225 = C50021 * C50201;
    const double C50220 = C50218 - C50214;
    const double C49719 = C49718 / C49694;
    const double C5534 = C533 * C283;
    const double C5530 = C527 * C283;
    const double C5578 = C5559 * C283;
    const double C5574 = C5561 * C283;
    const double C5569 = C5556 * C283;
    const double C5567 = C5554 * C283;
    const double C6122 = C5354 * C283;
    const double C6118 = C927 * C283;
    const double C6137 = C6131 * C283;
    const double C6135 = C6129 * C283;
    const double C11281 = C535 * C283;
    const double C11275 = C529 * C283;
    const double C11777 = C929 * C283;
    const double C39301 = C7538 * C283;
    const double C39639 = C6564 * C283;
    const double C47382 = C47378 * C283;
    const double C49802 = C49800 / C49759;
    const double C22231 = C22205 * C284;
    const double C24447 = C22205 * C49713;
    const double C22244 = C22242 * C278;
    const double C23165 = C22242 * C50605;
    const double C24446 = C22242 * C50874;
    const double C22243 = C22241 * C283;
    const double C23164 = C22241 * C1109;
    const double C48275 = C48263 + C48264;
    const double C48281 = C48274 * C1109;
    const double C23182 = C23175 * C1109;
    const double C23681 = C50796 * C3705;
    const double C32255 = C24697 * C3705;
    const double C37621 = C2302 * C3705;
    const double C48772 = C50796 * C3705;
    const double C32759 = C24697 * C4199;
    const double C38125 = C2302 * C4199;
    const double C23169 = C50796 * C4602;
    const double C33167 = C24697 * C4602;
    const double C38533 = C2302 * C4602;
    const double C40244 = C50744 * C4602;
    const double C48268 = C50796 * C4602;
    const double C49182 = C49172 * C1109;
    const double C24099 = C24089 * C1109;
    const double C179 = C167 + C168;
    const double C653 = C649 + C650;
    const double C8191 = C8171 + C8172;
    const double C17324 = C17304 + C17305;
    const double C360 = C346 + C347;
    const double C2357 = C2333 + C2334;
    const double C8743 = C8735 + C8736;
    const double C17876 = C17868 + C17869;
    const double C24752 = C24728 + C24729;
    const double C763 = C759 + C760;
    const double C537 = C523 + C524;
    const double C931 = C923 + C924;
    const double C8903 = C8895 + C8896;
    const double C18036 = C18028 + C18029;
    const double C6120 = C5734 * C284;
    const double C6938 = C5734 * C49713;
    const double C12175 = C5734 * C1109;
    const double C7098 = C5358 * C1109;
    const double C3549 =
        (4 * (2 * C50356 + C49822 * C50393 + C50357 * ae) +
         C49822 * (3 * C50393 +
                   C49822 * (2 * C50385 +
                             C49822 * (C49892 +
                                       C49822 * (C49822 * C49819 * C49907 +
                                                 C49986 * ae) +
                                       C49822 * C49986 * ae) +
                             C50387 * ae) +
                   C50392 * ae) +
         (3 * C50357 + C49822 * C50392) * ae) /
        C49759;
    const double C3703 =
        (2 * C50356 + C49822 * C50393 + C50357 * ae +
         (2 * C50385 +
          C49822 * (C49892 + C49822 * (C49822 * C49819 * C49907 + C49986 * ae) +
                    C49822 * C49986 * ae) +
          C50387 * ae) *
             C50031) /
        C49759;
    const double C4197 =
        (C50021 * (3 * C50393 +
                   C49822 * (2 * C50385 +
                             C49822 * (C49892 +
                                       C49822 * (C49822 * C49819 * C49907 +
                                                 C49986 * ae) +
                                       C49822 * C49986 * ae) +
                             C50387 * ae) +
                   C50392 * ae)) /
        C49759;
    const double C4598 =
        (2 * C50021 * C50393 +
         C50021 * (C50393 +
                   (C49892 + C49822 * (C49822 * C49819 * C49907 + C49986 * ae) +
                    C49822 * C49986 * ae) *
                       C50031)) /
        C49759;
    const double C6560 = C6132 * C1109;
    const double C39637 = C6132 * C284;
    const double C40141 = C6132 * C49713;
    const double C49973 = C49972 / C49694;
    const double C49982 = C49977 / C49694;
    const double C50068 = C50066 / C49830;
    const double C1230 = -(C50064 * C50031 + C49822 * C49956) / C49694;
    const double C6101 =
        (-2 * C50021 * C50064) / C49694 -
        (C50021 * (C49822 * C49999 * C50031 + C50064)) / C49694;
    const double C50470 = C50451 + C50468;
    const double C165 = C117 * C138;
    const double C8177 = C8144 * C138;
    const double C17310 = C17277 * C138;
    const double C336 = C117 * C302;
    const double C2341 = C2306 * C302;
    const double C8167 = C8145 * C302;
    const double C8741 = C8144 * C302;
    const double C17300 = C17278 * C302;
    const double C17874 = C17277 * C302;
    const double C344 = C117 * C310;
    const double C2331 = C2307 * C310;
    const double C2905 = C2306 * C310;
    const double C8375 = C8144 * C310;
    const double C8359 = C8145 * C310;
    const double C17508 = C17277 * C310;
    const double C17492 = C17278 * C310;
    const double C24726 = C24702 * C310;
    const double C513 = C117 * C479;
    const double C8901 = C8144 * C479;
    const double C18034 = C17277 * C479;
    const double C521 = C117 * C487;
    const double C8569 = C8144 * C487;
    const double C17702 = C17277 * C487;
    const double C921 = C117 * C904;
    const double C3069 = C2306 * C904;
    const double C8553 = C8145 * C904;
    const double C9115 = C8144 * C904;
    const double C17686 = C17278 * C904;
    const double C18248 = C17277 * C904;
    const double C2903 = C2307 * C1116;
    const double C8373 = C8145 * C1116;
    const double C17506 = C17278 * C1116;
    const double C25274 = C24702 * C1116;
    const double C3067 = C2307 * C1579;
    const double C9113 = C8145 * C1579;
    const double C11125 = C117 * C1579;
    const double C18246 = C17278 * C1579;
    const double C25438 = C24702 * C1579;
    const double C5548 = C117 * C1863;
    const double C48280 = C48273 * C50605;
    const double C23181 = C23174 * C50605;
    const double C141 = (5 * (3 * C49857 + C49819 * C49885) +
                         C49819 * (4 * C49885 + C49819 * C49922)) /
                        C49759;
    const double C313 =
        (3 * C49857 + C49819 * C49885 +
         C49822 * (C49822 * C49922 + C50256 * ae) + C49822 * C50256 * ae) /
        C49759;
    const double C490 =
        (3 * C49857 + C49819 * C49885 + C49922 * C50031) / C49759;
    const double C645 = (C49822 * (4 * C49885 + C49819 * C49922) +
                         (4 * C50251 + C49819 * C50256) * ae) /
                        C49759;
    const double C755 = (C50021 * (4 * C49885 + C49819 * C49922)) / C49759;
    const double C907 = (C50021 * (C49822 * C49922 + C50256 * ae)) / C49759;
    const double C50002 = C50001 / C49694;
    const double C50069 = C50067 + C49971;
    const double C50097 = C50091 - C50095;
    const double C50189 = C50171 + C50187;
    const double C166 = C50744 * C147;
    const double C8178 = C50902 * C147;
    const double C17311 = C17272 * C147;
    const double C333 = C50744 * C317;
    const double C2330 = C2301 * C317;
    const double C2908 = C2300 * C317;
    const double C8162 = C50796 * C317;
    const double C8358 = C50902 * C317;
    const double C17295 = C50796 * C317;
    const double C17491 = C17272 * C317;
    const double C24725 = C50939 * C317;
    const double C25279 = C50938 * C317;
    const double C341 = C50744 * C321;
    const double C2316 = C2302 * C321;
    const double C2544 = C2300 * C321;
    const double C2530 = C2301 * C321;
    const double C8368 = C50902 * C321;
    const double C8352 = C50796 * C321;
    const double C17501 = C17272 * C321;
    const double C17485 = C50796 * C321;
    const double C24711 = C24697 * C321;
    const double C24927 = C50938 * C321;
    const double C24913 = C50939 * C321;
    const double C510 = C50744 * C494;
    const double C3072 = C2300 * C494;
    const double C8552 = C50902 * C494;
    const double C17685 = C17272 * C494;
    const double C25443 = C50938 * C494;
    const double C518 = C50744 * C498;
    const double C2738 = C2300 * C498;
    const double C8562 = C50902 * C498;
    const double C17695 = C17272 * C498;
    const double C25109 = C50938 * C498;
    const double C918 = C50744 * C910;
    const double C2724 = C2301 * C910;
    const double C3296 = C2300 * C910;
    const double C8546 = C50796 * C910;
    const double C9108 = C50902 * C910;
    const double C17679 = C50796 * C910;
    const double C18241 = C17272 * C910;
    const double C25095 = C50939 * C910;
    const double C25655 = C50938 * C910;
    const double C49888 = C49881 + C49887;
    const double C49904 = C49890 - C49898;
    const double C50062 = C50057 - C50060;
    const double C3282 =
        2 * (C49822 * C50077 - (ae * C50021 * C49944) / C49830) -
        (ae * C50021 * C50061) / C49830 +
        C49822 * (C50077 - (ae * C50021 * C49822 * C49968) / C49830 +
                  C49822 * (C49822 * C50021 * C49919 -
                            (ae * C50021 * C49968) / C49830));
    const double C2542 = C2301 * C1124;
    const double C2532 = C2302 * C1124;
    const double C8366 = C50796 * C1124;
    const double C17499 = C50796 * C1124;
    const double C24925 = C50939 * C1124;
    const double C24915 = C24697 * C1124;
    const double C2736 = C2301 * C1238;
    const double C5345 = C50744 * C1238;
    const double C8560 = C50796 * C1238;
    const double C14802 = C50902 * C1238;
    const double C17693 = C50796 * C1238;
    const double C22755 = C17272 * C1238;
    const double C25107 = C50939 * C1238;
    const double C2726 = C2302 * C1587;
    const double C3294 = C2301 * C1587;
    const double C5349 = C50744 * C1587;
    const double C9106 = C50796 * C1587;
    const double C13892 = C50902 * C1587;
    const double C18239 = C50796 * C1587;
    const double C25097 = C24697 * C1587;
    const double C25653 = C50939 * C1587;
    const double C27745 = C17272 * C1587;
    const double C5545 = C50744 * C1871;
    const double C14122 = C50902 * C1871;
    const double C22220 = C17272 * C1871;
    const double C50120 = C50118 + C50119;
    const double C50174 = C50160 - C50167;
    const double C23685 = C50796 * C3707;
    const double C32261 = C24697 * C3707;
    const double C37627 = C2302 * C3707;
    const double C48776 = C50796 * C3707;
    const double C23173 = C50796 * C4606;
    const double C33173 = C24697 * C4606;
    const double C38539 = C2302 * C4606;
    const double C40246 = C50744 * C4606;
    const double C48272 = C50796 * C4606;
    const double C6555 = C50744 * C4607;
    const double C16524 = C50796 * C4607;
    const double C22212 = C50796 * C4607;
    const double C23171 = C17272 * C4607;
    const double C33171 = C50939 * C4607;
    const double C38537 = C2301 * C4607;
    const double C48270 = C50902 * C4607;
    const double C7535 = C50744 * C5514;
    const double C24095 = C17272 * C5514;
    const double C49178 = C50902 * C5514;
    const double C24097 = C50796 * C6534;
    const double C39907 = C50744 * C6534;
    const double C49180 = C50796 * C6534;
    const double C40527 = C50744 * C7528;
    const double C4201 =
        3 * ((-(ae * C50021 * C50099) / C49694) / C49759 - C50075 / C49830 +
             C49822 * C50146) +
        (C50021 * C50117 * ae) / C49759 +
        C49822 *
            (2 * C50146 - (ae * C50021 * C50107) / C49830 +
             C49822 *
                 ((-(ae * C50021 * C49822 * C49964) / C49694) / C49759 -
                  C50138 / C49830 +
                  C49822 * ((-(C49822 * C50021 * C49906) / C49694) / C49759 -
                            (ae * C50021 * C49964) / C49830)));
    const double C49923 = C49914 + C49921;
    const double C50090 = C50082 - C50086;
    const double C50123 = C49886 + C50122;
    const double C50133 = C49822 * C50131;
    const double C2734 = C2302 * C2712;
    const double C5353 = C50744 * C2712;
    const double C14800 = C50796 * C2712;
    const double C22757 = C50796 * C2712;
    const double C25105 = C24697 * C2712;
    const double C50188 = C50185 + C50186;
    const double C50203 = C50202 - C50200;
    const double C50227 = C50226 + C50225;
    const double C50221 = C49822 * C50220;
    const double C49720 = C49719 - C49709;
    const double C39298 = C5574 + C5573;
    const double C5580 = C5569 + C5570;
    const double C47384 = C47382 + C47383;
    const double C49803 = C49802 - C49787;
    const double C22245 = C22243 + C22244;
    const double C23176 = C23164 + C23165;
    const double C23691 = C23680 + C23681;
    const double C32264 = C32254 + C32255;
    const double C37630 = C37620 + C37621;
    const double C48778 = C48771 + C48772;
    const double C32768 = C32758 + C32759;
    const double C38134 = C38124 + C38125;
    const double C23178 = C23168 + C23169;
    const double C33176 = C33166 + C33167;
    const double C38542 = C38532 + C38533;
    const double C40247 = C40243 + C40244;
    const double C48277 = C48267 + C48268;
    const double C11579 = C763 * C643;
    const double C12823 = C763 * C1037;
    const double C5904 = C537 * C643;
    const double C7276 = C537 * C1037;
    const double C11279 = C537 * C284;
    const double C13411 = C537 * C49713;
    const double C11775 = C931 * C284;
    const double C12521 = C931 * C49713;
    const double C49974 = C49963 - C49973;
    const double C5732 = C117 * C1230;
    const double C8567 = C8145 * C1230;
    const double C17700 = C17278 * C1230;
    const double C50471 = C50470 + C50455;
    const double C48282 = C48280 + C48281;
    const double C23183 = C23181 + C23182;
    const double C50003 = C49983 - C50002;
    const double C2516 =
        (-3 * (C49971 * C50047 + C49956)) / C49694 +
        C49822 * ((-2 * C50064) / C49694 - (C49822 * C50069) / C49694);
    const double C2710 = -(C50069 * C50031 + C49971 * C50047 + C49956) / C49694;
    const double C3280 =
        C50021 * ((-2 * C50064) / C49694 - (C49822 * C50069) / C49694);
    const double C3548 =
        4 * ((-2 * C50056) / C49694 - (C49822 * C50061) / C49694) +
        C49822 * ((-3 * C50061) / C49694 + C49822 * C50097);
    const double C3702 =
        (-2 * C50056) / C49694 - (C49822 * C50061) / C49694 + C50097 * C50031;
    const double C4196 = C50021 * ((-3 * C50061) / C49694 + C49822 * C50097);
    const double C20771 = 5 * ((-3 * C50052) / C49694 + C49822 * C50117) +
                          C49822 * (4 * C50117 + C49822 * C50189);
    const double C20873 =
        (-3 * C50052) / C49694 + C49822 * C50117 + C50189 * C50031;
    const double C21203 = C50021 * (4 * C50117 + C49822 * C50189);
    const double C178 = C165 + C166;
    const double C8194 = C8177 + C8178;
    const double C17327 = C17310 + C17311;
    const double C353 = C332 + C333;
    const double C2355 = C2329 + C2330;
    const double C2914 = C2907 + C2908;
    const double C8186 = C8161 + C8162;
    const double C8383 = C8357 + C8358;
    const double C17319 = C17294 + C17295;
    const double C17516 = C17490 + C17491;
    const double C357 = C340 + C341;
    const double C2348 = C2315 + C2316;
    const double C2556 = C2543 + C2544;
    const double C2549 = C2529 + C2530;
    const double C8388 = C8367 + C8368;
    const double C8380 = C8351 + C8352;
    const double C17521 = C17500 + C17501;
    const double C17513 = C17484 + C17485;
    const double C24743 = C24710 + C24711;
    const double C530 = C509 + C510;
    const double C3078 = C3071 + C3072;
    const double C8577 = C8551 + C8552;
    const double C17710 = C17684 + C17685;
    const double C534 = C517 + C518;
    const double C2750 = C2737 + C2738;
    const double C8582 = C8561 + C8562;
    const double C17715 = C17694 + C17695;
    const double C928 = C917 + C918;
    const double C2743 = C2723 + C2724;
    const double C3302 = C3295 + C3296;
    const double C8574 = C8545 + C8546;
    const double C9120 = C9107 + C9108;
    const double C17707 = C17678 + C17679;
    const double C18253 = C18240 + C18241;
    const double C148 =
        4 * (2 * C49860 - (C49857 * ce) / C49830 + C49819 * C49888) -
        ((3 * C49857 + C49819 * C49885) * ce) / C49830 +
        C49819 *
            (3 * C49888 - (C49885 * ce) / C49830 +
             C49819 * (2 * C49886 - (C49880 * ce) / C49830 +
                       C49819 * ((-(C49819 * C49874 * ce) / C49694) / C49759 -
                                 C49873 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49826, 7) *
                                              bs[7] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49874 * ce) / C49830))));
    const double C318 =
        (((-2 * (C49819 * C49934 + C49930 * ce)) / C49694 -
          (C49819 *
           (C49819 * (C49819 * C49845 * C49846 * C49929 + C49933 * ce) +
            C49934 + C49819 * C49933 * ce)) /
              C49694 -
          ((C49930 + C49933 * C49848) * ce) / C49694) *
         ae) /
            C49759 +
        C49822 * (2 * C49860 - (C49857 * ce) / C49830 + C49819 * C49888);
    const double C322 = (-(C49844 * ce) / C49694) / C49759 - C49841 / C49830 +
                        C49819 * C49860 - (ae * C49822 * C49956) / C49830 +
                        C49822 * (C49822 * C49888 - (ae * C49956) / C49830);
    const double C495 =
        (zP - zQ) * (2 * C49860 - (C49857 * ce) / C49830 + C49819 * C49888);
    const double C499 = (-(C49844 * ce) / C49694) / C49759 - C49841 / C49830 +
                        C49819 * C49860 + C49888 * std::pow(zP - zQ, 2);
    const double C911 =
        C49822 * C50021 * C49888 - (ae * C50021 * C49956) / C49830;
    const double C2518 =
        3 * (C49860 - (ae * C50056) / C49830 + C49822 * C50062) +
        (((-2 * C50056) / C49694 - (C49822 * C50061) / C49694) * ae) / C49759 +
        C49822 *
            (2 * C50062 - (ae * C50061) / C49830 +
             C49822 * (C49886 - (ae * C49822 * C49968) / C49830 +
                       C49822 * (C49822 * C49919 - (ae * C49968) / C49830)));
    const double C3292 = C2302 * C3282;
    const double C13890 = C50796 * C3282;
    const double C25651 = C24697 * C3282;
    const double C27743 = C50796 * C3282;
    const double C2555 = C2541 + C2542;
    const double C2550 = C2531 + C2532;
    const double C8387 = C8365 + C8366;
    const double C17520 = C17498 + C17499;
    const double C24933 = C24914 + C24915;
    const double C2749 = C2735 + C2736;
    const double C5355 = C5344 + C5345;
    const double C8581 = C8559 + C8560;
    const double C14810 = C14801 + C14802;
    const double C17714 = C17692 + C17693;
    const double C22768 = C22754 + C22755;
    const double C2744 = C2725 + C2726;
    const double C3301 = C3293 + C3294;
    const double C5357 = C5348 + C5349;
    const double C9119 = C9105 + C9106;
    const double C13896 = C13891 + C13892;
    const double C18252 = C18238 + C18239;
    const double C25115 = C25096 + C25097;
    const double C27749 = C27744 + C27745;
    const double C5562 = C5544 + C5545;
    const double C14134 = C14121 + C14122;
    const double C22239 = C22219 + C22220;
    const double C3553 =
        4 * (2 * C50054 - (ae * C50052) / C49830 + C49822 * C50120) +
        (((-3 * C50052) / C49694 + C49822 * C50117) * ae) / C49759 +
        C49822 *
            (3 * C50120 + (C50117 * ae) / C49759 +
             C49822 *
                 (2 * C50116 - (ae * C50107) / C49830 +
                  C49822 *
                      ((-(ae * C49822 * C49964) / C49694) / C49759 - C49893 +
                       C49822 * ((-(C49822 * C49906) / C49694) / C49759 -
                                 (ae * C49964) / C49830))));
    const double C23693 = C23684 + C23685;
    const double C32267 = C32260 + C32261;
    const double C37633 = C37626 + C37627;
    const double C48780 = C48775 + C48776;
    const double C23180 = C23172 + C23173;
    const double C33179 = C33172 + C33173;
    const double C38545 = C38538 + C38539;
    const double C40248 = C40245 + C40246;
    const double C48279 = C48271 + C48272;
    const double C6565 = C6554 + C6555;
    const double C16528 = C16523 + C16524;
    const double C22235 = C22211 + C22212;
    const double C23179 = C23170 + C23171;
    const double C38544 = C38536 + C38537;
    const double C48278 = C48269 + C48270;
    const double C7539 = C7534 + C7535;
    const double C24102 = C24094 + C24095;
    const double C49185 = C49177 + C49178;
    const double C24103 = C24096 + C24097;
    const double C39910 = C39906 + C39907;
    const double C49186 = C49179 + C49180;
    const double C40529 = C40526 + C40527;
    const double C32765 = C24697 * C4201;
    const double C38131 = C2302 * C4201;
    const double C49924 = C49819 * C49923;
    const double C50065 = C49822 * C49923;
    const double C50079 = C50021 * C49923;
    const double C1123 =
        2 * (C49822 * C49888 - (ae * C49956) / C49830) -
        (ae * (C49971 * std::pow(C49822, 2) + C49956)) / C49830 +
        C49822 * (C49888 - (ae * C49822 * C49971) / C49830 +
                  C49822 * (C49822 * C49923 - (ae * C49971) / C49830));
    const double C1237 = C49822 * (C49888 + C49923 * C50031) -
                         (ae * (C49971 * C50031 + C49956)) / C49830;
    const double C1586 =
        C50021 * C49888 - (ae * C50021 * C49822 * C49971) / C49830 +
        C49822 * (C49822 * C50021 * C49923 - (ae * C50021 * C49971) / C49830);
    const double C1870 =
        2 * C50021 * C49888 + C50021 * (C49888 + C49923 * C50031);
    const double C2713 =
        C49888 + C49923 * C50031 -
        (ae * (C49822 * C49999 * C50031 + C50064)) / C49830 +
        C49822 *
            (C49822 *
                 (C49923 +
                  ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                   C49906 / C49830 +
                   C49819 * ((-(C49819 * std::pow(C49824, 8) * bs[8] * C49835) /
                              C49694) /
                                 C49759 -
                             (C49907 * ce) / C49830)) *
                      C50031) -
             (ae * (C49999 * C50031 + C49971)) / C49830);
    const double C50094 = C49822 * C50090;
    const double C3706 =
        2 * (C49822 * C50123 - (ae * (C49968 * C50031 + C49944)) / C49830) -
        (ae * (C50088 * C50031 + C50061)) / C49830 +
        C49822 *
            (C50123 - (ae * (C49822 * C49991 * C50031 + C50081)) / C49830 +
             C49822 * (C49822 * (C49919 + ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830) *
                                              C50031) -
                       (ae * (C49991 * C50031 + C49968)) / C49830));
    const double C4604 =
        2 * C50077 + C50021 * C50123 +
        (((-2 * C50021 * C50081) / C49694 -
          (C50021 * (C49822 * C49991 * C50031 + C50081)) / C49694) *
         ae) /
            C49759 +
        C49822 *
            ((((-2 * C50132) / C49694 -
               (C50021 * (C49991 * C50031 + C49968)) / C49694) *
              ae) /
                 C49759 +
             C49822 * (2 * C50131 +
                       C50021 * (C49919 + ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830) *
                                              C50031)));
    const double C4605 = (((-2 * C50021 * C49944) / C49694 -
                           (C50021 * (C49968 * C50031 + C49944)) / C49694) *
                          ae) /
                             C49759 +
                         C49822 * (2 * C50077 + C50021 * C50123);
    const double C5515 = 3 * (C49860 + C49886 * C50031) +
                         C50021 * (2 * C50077 + C50021 * C50123);
    const double C6533 =
        (((-3 * (C49968 * C50031 + C49944)) / C49694 +
          C50021 * ((-2 * C50132) / C49694 -
                    (C50021 * (C49991 * C50031 + C49968)) / C49694)) *
         ae) /
            C49759 +
        C49822 *
            (3 * C50123 +
             C50021 * (2 * C50131 +
                       C50021 * (C49919 + ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830) *
                                              C50031)));
    const double C7527 =
        4 * (2 * C50077 + C50021 * C50123) +
        C50021 *
            (3 * C50123 +
             C50021 * (2 * C50131 +
                       C50021 * (C49919 + ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830) *
                                              C50031)));
    const double C50136 = C50133 - C50135;
    const double C2748 = C2733 + C2734;
    const double C5359 = C5352 + C5353;
    const double C14809 = C14799 + C14800;
    const double C22769 = C22756 + C22757;
    const double C25119 = C25104 + C25105;
    const double C50190 = C49822 * C50188;
    const double C20875 =
        3 * (C50129 - (ae * (C50162 * C50031 + C50099)) / C49830 +
             C49822 * C50203) +
        ((C50117 + C50184 * C50031) * ae) / C49759 +
        C49822 *
            (2 * C50203 - (ae * (C50173 * C50031 + C50107)) / C49830 +
             C49822 *
                 (C50201 - (ae * (C49822 * C49984 * C50031 + C50162)) / C49830 +
                  C49822 * (C49822 * ((-(std::pow(C49824, 8) * bs[8] * C49835 *
                                         C50031) /
                                       C49694) /
                                          C49759 -
                                      C49906 / C49830) -
                            (ae * (C49984 * C50031 + C49964)) / C49830)));
    const double C21471 =
        2 * ((((-2 * C50139) / C49694 - (C50021 * C50196) / C49694) * ae) /
                 C49759 +
             C49822 * C50227) +
        (((-2 * C50021 * C50107) / C49694 -
          (C50021 * (C50173 * C50031 + C50107)) / C49694) *
         ae) /
            C49759 +
        C49822 * (C50227 +
                  (((-2 * C50205) / C49694 -
                    (C50021 * (C49822 * C49984 * C50031 + C50162)) / C49694) *
                   ae) /
                      C49759 +
                  C49822 * ((((-2 * C50208) / C49694 -
                              (C50021 * (C49984 * C50031 + C49964)) / C49694) *
                             ae) /
                                C49759 +
                            C49822 * ((-2 * C50207) / C49830 +
                                      C50021 * ((-(std::pow(C49824, 8) * bs[8] *
                                                   C49835 * C50031) /
                                                 C49694) /
                                                    C49759 -
                                                C49906 / C49830))));
    const double C23162 =
        3 * C50129 + C50021 * C50227 +
        (((-3 * (C50162 * C50031 + C50099)) / C49694 +
          C50021 * ((-2 * C50205) / C49694 -
                    (C50021 * (C49822 * C49984 * C50031 + C50162)) / C49694)) *
         ae) /
            C49759 +
        C49822 * ((((-3 * C50196) / C49694 +
                    C50021 * ((-2 * C50208) / C49694 -
                              (C50021 * (C49984 * C50031 + C49964)) / C49694)) *
                   ae) /
                      C49759 +
                  C49822 * (3 * C50201 +
                            C50021 * ((-2 * C50207) / C49830 +
                                      C50021 * ((-(std::pow(C49824, 8) * bs[8] *
                                                   C49835 * C50031) /
                                                 C49694) /
                                                    C49759 -
                                                C49906 / C49830))));
    const double C24086 =
        ((4 * ((-2 * C50139) / C49694 - (C50021 * C50196) / C49694) +
          C50021 *
              ((-3 * C50196) / C49694 +
               C50021 * ((-2 * C50208) / C49694 -
                         (C50021 * (C49984 * C50031 + C49964)) / C49694))) *
         ae) /
            C49759 +
        C49822 * (4 * C50227 +
                  C50021 * (3 * C50201 +
                            C50021 * ((-2 * C50207) / C49830 +
                                      C50021 * ((-(std::pow(C49824, 8) * bs[8] *
                                                   C49835 * C50031) /
                                                 C49694) /
                                                    C49759 -
                                                C49906 / C49830))));
    const double C40521 =
        5 * (3 * C50129 + C50021 * C50227) +
        C50021 * (4 * C50227 +
                  C50021 * (3 * C50201 +
                            C50021 * ((-2 * C50207) / C49830 +
                                      C50021 * ((-(std::pow(C49824, 8) * bs[8] *
                                                   C49835 * C50031) /
                                                 C49694) /
                                                    C49759 -
                                                C49906 / C49830))));
    const double C50222 = C50219 + C50221;
    const double C6940 = C5354 * C49720;
    const double C6936 = C927 * C49720;
    const double C6932 = C6131 * C49720;
    const double C6928 = C6129 * C49720;
    const double C6922 = C533 * C49720;
    const double C6918 = C527 * C49720;
    const double C6914 = C5556 * C49720;
    const double C6910 = C5554 * C49720;
    const double C7890 = C5559 * C49720;
    const double C7886 = C5561 * C49720;
    const double C12523 = C929 * C49720;
    const double C12517 = C529 * C49720;
    const double C13413 = C535 * C49720;
    const double C24445 = C22241 * C49720;
    const double C40143 = C6564 * C49720;
    const double C40763 = C7538 * C49720;
    const double C49528 = C47378 * C49720;
    const double C118 =
        ((((0 - (C49692 * C49693) / C49694) * ce) / C49694 - (0 * de) / C49703 +
          C49695 / C49694) /
             C49699 -
         ((C49692 * C49716 + 0) * de) / C49694) /
            C49699 +
        ((C49692 * (C49716 / C49699 -
                    ((C49692 * C49720 + C50874) * de) / C49694 + C49713) +
          C50930) *
         ce) /
            C49694 +
        C49720 / C49699 - ((C49692 * C49713 + C50610) * de) / C49694;
    const double C119 =
        (C49716 / C49699 - ((C49692 * C49720 + C50874) * de) / C49694 +
         C49713) /
            C49699 +
        ((C49692 *
              (C49720 / C49699 - ((C49692 * C49713 + C50610) * de) / C49694) +
          C50931) *
         ce) /
            C49694 +
        2 * (C49713 / C49699 - (0 * de) / C49694);
    const double C120 =
        (C49720 / C49699 - ((C49692 * C49713 + C50610) * de) / C49694) /
            C49699 +
        ((C49692 * (C49713 / C49699 - (0 * de) / C49694) + C638) * ce) / C49694;
    const double C641 =
        C49716 / C49699 - ((C49692 * C49720 + C50874) * de) / C49694 + C49713;
    const double C642 =
        C49720 / C49699 - ((C49692 * C49713 + C50610) * de) / C49694;
    const double C1035 =
        C49716 / C49699 + ((C49692 * C49720 + C50874) * ce) / C49694 + C49713;
    const double C1036 =
        C49720 / C49699 + ((C49692 * C49713 + C50610) * ce) / C49694;
    const double C39303 = C39298 - C5572;
    const double C5582 = C5580 - C5528;
    const double C47385 = C47384 - C47380;
    const double C20080 =
        ((((0 - (C49757 * C49783) / C49759) * ae) / C49759 - (0 * be) / C49763 +
          C49758 / C49759) /
             C49784 -
         ((C49757 * C49801 + 0) * be) / C49759) /
            C49784 +
        ((C49757 * (C49801 / C49784 -
                    ((C49757 * C49803 + C50902) * be) / C49759 + C49796) +
          C50938) *
         ae) /
            C49759 +
        C49803 / C49784 - ((C49757 * C49796 + C50796) * be) / C49759;
    const double C20081 =
        (C49801 / C49784 - ((C49757 * C49803 + C50902) * be) / C49759 +
         C49796) /
            C49784 +
        ((C49757 *
              (C49803 / C49784 - ((C49757 * C49796 + C50796) * be) / C49759) +
          C50939) *
         ae) /
            C49759 +
        2 * (C49796 / C49784 - (0 * be) / C49759);
    const double C20082 =
        (C49803 / C49784 - ((C49757 * C49796 + C50796) * be) / C49759) /
            C49784 +
        ((C49757 * (C49796 / C49784 - (0 * be) / C49759) + C24697) * ae) /
            C49759;
    const double C24700 =
        C49801 / C49784 - ((C49757 * C49803 + C50902) * be) / C49759 + C49796;
    const double C24701 =
        C49803 / C49784 - ((C49757 * C49796 + C50796) * be) / C49759;
    const double C22246 = C22245 - C22231;
    const double C40249 = C40247 * C1109;
    const double C49975 = C49974 - C49966;
    const double C20772 =
        (5 * (3 * C50408 + C49822 * C50471 + C50407 * ae) +
         C49822 * (4 * C50471 +
                   C49822 * (3 * C50466 +
                             C49822 * (2 * C50458 +
                                       C49822 * (C49874 +
                                                 C49822 * (C49822 * C49907 +
                                                           C49980 * ae) +
                                                 C49822 * C49980 * ae) +
                                       C50460 * ae) +
                             C50465 * ae) +
                   C50469 * ae) +
         (4 * C50407 + C49822 * C50469) * ae) /
        C49759;
    const double C20874 =
        (3 * C50408 + C49822 * C50471 + C50407 * ae +
         (3 * C50466 +
          C49822 *
              (2 * C50458 +
               C49822 * (C49874 + C49822 * (C49822 * C49907 + C49980 * ae) +
                         C49822 * C49980 * ae) +
               C50460 * ae) +
          C50465 * ae) *
             C50031) /
        C49759;
    const double C21204 =
        (C50021 *
         (4 * C50471 +
          C49822 *
              (3 * C50466 +
               C49822 * (2 * C50458 +
                         C49822 * (C49874 +
                                   C49822 * (C49822 * C49907 + C49980 * ae) +
                                   C49822 * C49980 * ae) +
                         C50460 * ae) +
               C50465 * ae) +
          C50469 * ae)) /
        C49759;
    const double C21470 =
        (2 * C50021 * C50471 +
         C50021 *
             (C50471 +
              (2 * C50458 +
               C49822 * (C49874 + C49822 * (C49822 * C49907 + C49980 * ae) +
                         C49822 * C49980 * ae) +
               C50460 * ae) *
                  C50031)) /
        C49759;
    const double C50004 = C50003 - C49995;
    const double C8196 = C8185 + C8186;
    const double C17329 = C17318 + C17319;
    const double C5533 = C530 * C50610;
    const double C5897 = C530 * C50931;
    const double C5887 = C530 * C638;
    const double C6921 = C530 * C50610;
    const double C7269 = C530 * C1031;
    const double C7259 = C530 * C1032;
    const double C11276 = C530 * C278;
    const double C11576 = C530 * C50930;
    const double C12170 = C530 * C50605;
    const double C12518 = C530 * C50874;
    const double C12820 = C530 * C1030;
    const double C5535 = C534 * C278;
    const double C5529 = C534 * C50610;
    const double C5901 = C534 * C50930;
    const double C5891 = C534 * C50931;
    const double C6543 = C534 * C50605;
    const double C6923 = C534 * C50874;
    const double C6917 = C534 * C50610;
    const double C7273 = C534 * C1030;
    const double C7263 = C534 * C1031;
    const double C6117 = C928 * C278;
    const double C6109 = C928 * C50610;
    const double C6557 = C928 * C50605;
    const double C6935 = C928 * C50874;
    const double C6929 = C928 * C50610;
    const double C14102 = C8573 + C8574;
    const double C14100 = C8574 + C8573;
    const double C27947 = C17706 + C17707;
    const double C27945 = C17707 + C17706;
    const double C170 = C50744 * C148;
    const double C337 = C50744 * C318;
    const double C2342 = C2301 * C318;
    const double C8168 = C50796 * C318;
    const double C8742 = C50902 * C318;
    const double C17301 = C50796 * C318;
    const double C17875 = C17272 * C318;
    const double C24737 = C50939 * C318;
    const double C345 = C50744 * C322;
    const double C2332 = C2302 * C322;
    const double C2906 = C2301 * C322;
    const double C8376 = C50902 * C322;
    const double C8360 = C50796 * C322;
    const double C17509 = C17272 * C322;
    const double C17493 = C50796 * C322;
    const double C24727 = C24697 * C322;
    const double C25277 = C50939 * C322;
    const double C514 = C50744 * C495;
    const double C8902 = C50902 * C495;
    const double C18035 = C17272 * C495;
    const double C522 = C50744 * C499;
    const double C8570 = C50902 * C499;
    const double C17703 = C17272 * C499;
    const double C922 = C50744 * C911;
    const double C3070 = C2301 * C911;
    const double C8554 = C50796 * C911;
    const double C9116 = C50902 * C911;
    const double C17687 = C50796 * C911;
    const double C18249 = C17272 * C911;
    const double C25441 = C50939 * C911;
    const double C2540 = C2302 * C2518;
    const double C24923 = C24697 * C2518;
    const double C3300 = C3291 + C3292;
    const double C13895 = C13889 + C13890;
    const double C25659 = C25650 + C25651;
    const double C27748 = C27742 + C27743;
    const double C6121 = C5355 * C278;
    const double C6115 = C5355 * C50610;
    const double C6559 = C5355 * C50605;
    const double C6939 = C5355 * C50874;
    const double C6933 = C5355 * C50610;
    const double C14113 = C8581 + C8582;
    const double C14112 = C8582 + C8581;
    const double C22206 = C17714 + C17715;
    const double C27949 = C17715 + C17714;
    const double C7097 = C5357 * C50605;
    const double C14793 = C9119 + C9120;
    const double C14792 = C9120 + C9119;
    const double C28600 = C18252 + C18253;
    const double C28599 = C18253 + C18252;
    const double C5577 = C5562 * C278;
    const double C5575 = C5562 * C50610;
    const double C6544 = C5562 * C50605;
    const double C7889 = C5562 * C50874;
    const double C7887 = C5562 * C50610;
    const double C39504 = C5562 * C50931;
    const double C40352 = C5562 * C1031;
    const double C40250 = C40248 * C50605;
    const double C6569 = C6565 * C50605;
    const double C39638 = C6565 * C278;
    const double C40142 = C6565 * C50874;
    const double C49171 = C16528 + C16527;
    const double C24088 = C22235 + C22236;
    const double C7541 = C7539 * C50605;
    const double C39300 = C7539 * C278;
    const double C40762 = C7539 * C50874;
    const double C39912 = C39910 * C50605;
    const double C40531 = C40529 * C50605;
    const double C32771 = C32764 + C32765;
    const double C38137 = C38130 + C38131;
    const double C49925 = C49904 + C49924;
    const double C50070 = C50065 - C50068;
    const double C3283 =
        2 * (C49822 * C50079 - (ae * C50021 * C49971) / C49830) -
        (ae * C50021 * C50069) / C49830 +
        C49822 * (C50079 - (ae * C50021 * C49822 * C49999) / C49830 +
                  C49822 * (C49822 * C50021 *
                                ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830)) -
                            (ae * C50021 * C49999) / C49830));
    const double C5516 =
        3 * (C49888 + C49923 * C50031) +
        C50021 *
            (2 * C50079 +
             C50021 *
                 (C49923 +
                  ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                   C49906 / C49830 +
                   C49819 * ((-(C49819 * std::pow(C49824, 8) * bs[8] * C49835) /
                              C49694) /
                                 C49759 -
                             (C49907 * ce) / C49830)) *
                      C50031));
    const double C6102 =
        (((-2 * C50021 * C49971) / C49694 -
          (C50021 * (C49999 * C50031 + C49971)) / C49694) *
         ae) /
            C49759 +
        C49822 *
            (2 * C50079 +
             C50021 *
                 (C49923 +
                  ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                   C49906 / C49830 +
                   C49819 * ((-(C49819 * std::pow(C49824, 8) * bs[8] * C49835) /
                              C49694) /
                                 C49759 -
                             (C49907 * ce) / C49830)) *
                      C50031));
    const double C2904 = C2302 * C1123;
    const double C8374 = C50796 * C1123;
    const double C17507 = C50796 * C1123;
    const double C25275 = C24697 * C1123;
    const double C5733 = C50744 * C1237;
    const double C8568 = C50796 * C1237;
    const double C17701 = C50796 * C1237;
    const double C3068 = C2302 * C1586;
    const double C9114 = C50796 * C1586;
    const double C11126 = C50744 * C1586;
    const double C18247 = C50796 * C1586;
    const double C25439 = C24697 * C1586;
    const double C5549 = C50744 * C1870;
    const double C50096 = C50093 + C50094;
    const double C6127 = C50744 * C4605;
    const double C14120 = C50796 * C4605;
    const double C22222 = C50796 * C4605;
    const double C5553 = C50744 * C5515;
    const double C4200 =
        3 * (C50077 - (ae * C50021 * C50081) / C49830 + C49822 * C50136) +
        (C50021 * C50097 * ae) / C49759 +
        C49822 * (2 * C50136 - (ae * C50021 * C50088) / C49830 +
                  C49822 * (C50131 - (ae * C50021 * C49822 * C49991) / C49830 +
                            C49822 * (C49822 * C50021 *
                                          ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830) -
                                      (ae * C50021 * C49991) / C49830)));
    const double C7099 = C5359 * C50605;
    const double C50191 = C50174 + C50190;
    const double C21205 =
        4 * (2 * C50146 - (ae * C50021 * C50107) / C49830 + C49822 * C50222) +
        (C50021 * C50189 * ae) / C49759 +
        C49822 *
            (3 * C50222 + (C50021 * C50184 * ae) / C49759 +
             C49822 *
                 (2 * C50220 - (ae * C50021 * C50173) / C49830 +
                  C49822 *
                      ((-(ae * C50021 * C49822 * C49984) / C49694) / C49759 -
                       C50207 / C49830 +
                       C49822 * ((-(C49822 * C50021 * std::pow(C49824, 8) *
                                    bs[8] * C49835) /
                                  C49694) /
                                     C49759 -
                                 (ae * C50021 * C49984) / C49830))));
    const double C7882 = C6914 + C6915;
    const double C40760 = C7886 + C7885;
    const double C24449 = C24445 + C24446;
    const double C49532 = C49528 + C49529;
    const double C5900 = C533 * C641;
    const double C5894 = C527 * C641;
    const double C5888 = C5556 * C641;
    const double C5882 = C5554 * C641;
    const double C11575 = C529 * C641;
    const double C39501 = C5561 * C641;
    const double C5902 = C535 * C642;
    const double C5896 = C529 * C642;
    const double C5890 = C533 * C642;
    const double C5884 = C527 * C642;
    const double C11577 = C531 * C642;
    const double C39503 = C5559 * C642;
    const double C7272 = C533 * C1035;
    const double C7266 = C527 * C1035;
    const double C7260 = C5556 * C1035;
    const double C7254 = C5554 * C1035;
    const double C12819 = C529 * C1035;
    const double C40349 = C5561 * C1035;
    const double C7274 = C535 * C1036;
    const double C7268 = C529 * C1036;
    const double C7262 = C533 * C1036;
    const double C7256 = C527 * C1036;
    const double C12821 = C531 * C1036;
    const double C40351 = C5559 * C1036;
    const double C24738 = C24700 * C136;
    const double C24732 = C24700 * C125;
    const double C24722 = C24700 * C134;
    const double C24716 = C24700 * C124;
    const double C24714 = C24700 * C132;
    const double C24708 = C24700 * C123;
    const double C24926 = C24700 * C308;
    const double C24920 = C24700 * C291;
    const double C24910 = C24700 * C298;
    const double C24904 = C24700 * C285;
    const double C25108 = C24700 * C485;
    const double C25102 = C24700 * C468;
    const double C25092 = C24700 * C475;
    const double C25086 = C24700 * C462;
    const double C25278 = C24700 * C300;
    const double C25272 = C24700 * C287;
    const double C25442 = C24700 * C477;
    const double C25436 = C24700 * C464;
    const double C25654 = C24700 * C902;
    const double C25648 = C24700 * C895;
    const double C31342 = C24700 * C467;
    const double C31336 = C24700 * C483;
    const double C31326 = C24700 * C473;
    const double C31320 = C24700 * C463;
    const double C31852 = C24700 * C894;
    const double C31846 = C24700 * C900;
    const double C32256 = C24700 * C1234;
    const double C32250 = C24700 * C1227;
    const double C32760 = C24700 * C1583;
    const double C32754 = C24700 * C1576;
    const double C33168 = C24700 * C1867;
    const double C33162 = C24700 * C1860;
    const double C24736 = C24701 * C302;
    const double C24730 = C24701 * C288;
    const double C24724 = C24701 * C300;
    const double C24718 = C24701 * C287;
    const double C24712 = C24701 * C298;
    const double C24706 = C24701 * C285;
    const double C24924 = C24701 * C1118;
    const double C24918 = C24701 * C1112;
    const double C24912 = C24701 * C308;
    const double C24906 = C24701 * C291;
    const double C25106 = C24701 * C1232;
    const double C25100 = C24701 * C1226;
    const double C25094 = C24701 * C902;
    const double C25088 = C24701 * C895;
    const double C25276 = C24701 * C310;
    const double C25270 = C24701 * C292;
    const double C25440 = C24701 * C904;
    const double C25434 = C24701 * C896;
    const double C25652 = C24701 * C1581;
    const double C25646 = C24701 * C1575;
    const double C31340 = C24701 * C1227;
    const double C31334 = C24701 * C1234;
    const double C31328 = C24701 * C900;
    const double C31322 = C24701 * C894;
    const double C31850 = C24701 * C1576;
    const double C31844 = C24701 * C1583;
    const double C32258 = C24701 * C2706;
    const double C32252 = C24701 * C2702;
    const double C32762 = C24701 * C3276;
    const double C32756 = C24701 * C3272;
    const double C33170 = C24701 * C4601;
    const double C33164 = C24701 * C4595;
    const double C140 =
        4 * ((-2 * C49951) / C49694 - (C49819 * C49956) / C49694 -
             (C50246 * ce) / C49694) +
        C49819 * ((-3 * C49956) / C49694 + C49819 * C49975 -
                  (C50251 * ce) / C49694) -
        ((3 * C50246 + C49819 * C50251) * ce) / C49694;
    const double C304 = C49822 * ((-3 * C49956) / C49694 + C49819 * C49975 -
                                  (C50251 * ce) / C49694);
    const double C312 = (-2 * C49951) / C49694 - (C49819 * C49956) / C49694 -
                        (C50246 * ce) / C49694 + C49975 * C50047;
    const double C481 = C50021 * ((-3 * C49956) / C49694 + C49819 * C49975 -
                                  (C50251 * ce) / C49694);
    const double C489 = (-2 * C49951) / C49694 - (C49819 * C49956) / C49694 -
                        (C50246 * ce) / C49694 + C49975 * C50031;
    const double C906 = C50021 * C49822 * C49975;
    const double C50005 = C49819 * C50004;
    const double C1114 =
        2 * C49822 * C49975 + C49822 * (C49975 + C50004 * C50047);
    const double C1228 = C49822 * C49975 + C49822 * C50004 * C50031;
    const double C1577 = C50021 * (C49975 + C50004 * C50047);
    const double C1861 =
        2 * C50021 * C49975 + C50021 * (C49975 + C50004 * C50031);
    const double C5558 = C5534 + C5535;
    const double C5583 = C5582 - C5529;
    const double C6563 = C6542 + C6543;
    const double C7883 = C6922 + C6923;
    const double C355 = C336 + C337;
    const double C2361 = C2341 + C2342;
    const double C8189 = C8167 + C8168;
    const double C8746 = C8741 + C8742;
    const double C17322 = C17300 + C17301;
    const double C17879 = C17874 + C17875;
    const double C359 = C344 + C345;
    const double C2356 = C2331 + C2332;
    const double C2913 = C2905 + C2906;
    const double C8392 = C8375 + C8376;
    const double C8384 = C8359 + C8360;
    const double C17525 = C17508 + C17509;
    const double C17517 = C17492 + C17493;
    const double C24751 = C24726 + C24727;
    const double C532 = C513 + C514;
    const double C8906 = C8901 + C8902;
    const double C18039 = C18034 + C18035;
    const double C536 = C521 + C522;
    const double C8586 = C8569 + C8570;
    const double C17719 = C17702 + C17703;
    const double C930 = C921 + C922;
    const double C3077 = C3069 + C3070;
    const double C8578 = C8553 + C8554;
    const double C9124 = C9115 + C9116;
    const double C17711 = C17686 + C17687;
    const double C18257 = C18248 + C18249;
    const double C2554 = C2539 + C2540;
    const double C24937 = C24922 + C24923;
    const double C6566 = C6559 + C6558;
    const double C47381 = C14113 * C50610;
    const double C49531 = C14113 * C50610;
    const double C22232 = C22206 * C50610;
    const double C24448 = C22206 * C50610;
    const double C39304 = C39303 - C5575;
    const double C7530 = C6544 + C6545;
    const double C39908 = C6569 + C6568;
    const double C49181 = C49171 * C50605;
    const double C24098 = C24088 * C50605;
    const double C40523 = C7541 + C7540;
    const double C149 =
        5 * (3 * C49888 - (C49885 * ce) / C49830 + C49819 * C49925) -
        ((4 * C49885 + C49819 * C49922) * ce) / C49830 +
        C49819 *
            (4 * C49925 - (C49922 * ce) / C49830 +
             C49819 *
                 (3 * C49923 - (C49918 * ce) / C49830 +
                  C49819 *
                      (2 * C49919 - (C49913 * ce) / C49830 +
                       C49819 * ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830)))));
    const double C319 =
        (((-3 * (C49819 * C49944 + C49934 + C49938 * ce)) / C49694 +
          C49819 * ((-2 * C49944) / C49694 -
                    (C49819 * (C49819 * (C49819 * C49864 * C49865 * C49929 +
                                         C49939 * ce) +
                               C49940 + C49819 * C49939 * ce)) /
                        C49694 -
                    (C49943 * ce) / C49694) -
          ((2 * C49938 + C49819 * C49943) * ce) / C49694) *
         ae) /
            C49759 +
        C49822 * (3 * C49888 - (C49885 * ce) / C49830 + C49819 * C49925);
    const double C323 = 2 * C49860 - (C49857 * ce) / C49830 + C49819 * C49888 +
                        (C49822 * C49975 * ae) / C49759 +
                        C49822 * ((C49975 * ae) / C49759 + C49822 * C49925);
    const double C496 =
        (zP - zQ) * (3 * C49888 - (C49885 * ce) / C49830 + C49819 * C49925);
    const double C500 = 2 * C49860 - (C49857 * ce) / C49830 + C49819 * C49888 +
                        C49925 * std::pow(zP - zQ, 2);
    const double C501 =
        3 * C49888 - (C49885 * ce) / C49830 + C49819 * C49925 +
        (3 * C49923 - (C49918 * ce) / C49830 +
         C49819 *
             (2 * C49919 - (C49913 * ce) / C49830 +
              C49819 *
                  ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                   C49906 / C49830 +
                   C49819 * ((-(C49819 * std::pow(C49824, 8) * bs[8] * C49835) /
                              C49694) /
                                 C49759 -
                             (C49907 * ce) / C49830)))) *
            std::pow(zP - zQ, 2);
    const double C757 =
        (zP - zQ) *
        (4 * C49925 - (C49922 * ce) / C49830 +
         C49819 *
             (3 * C49923 - (C49918 * ce) / C49830 +
              C49819 * (2 * C49919 - (C49913 * ce) / C49830 +
                        C49819 * ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                  C49906 / C49830 +
                                  C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                               bs[8] * C49835) /
                                             C49694) /
                                                C49759 -
                                            (C49907 * ce) / C49830)))));
    const double C912 =
        (C50021 * C49975 * ae) / C49759 + C49822 * C50021 * C49925;
    const double C1122 =
        2 * ((C49975 * ae) / C49759 + C49822 * C49925) +
        ((C49975 + C50004 * std::pow(C49822, 2)) * ae) / C49759 +
        C49822 *
            (C49925 + (C49822 * C50004 * ae) / C49759 +
             C49822 *
                 ((C50004 * ae) / C49759 +
                  C49822 *
                      (2 * C49919 - (C49913 * ce) / C49830 +
                       C49819 * ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830)))));
    const double C1236 =
        ((C49975 + C50004 * C50031) * ae) / C49759 +
        C49822 *
            (C49925 +
             (2 * C49919 - (C49913 * ce) / C49830 +
              C49819 *
                  ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                   C49906 / C49830 +
                   C49819 * ((-(C49819 * std::pow(C49824, 8) * bs[8] * C49835) /
                              C49694) /
                                 C49759 -
                             (C49907 * ce) / C49830))) *
                 C50031);
    const double C1585 =
        C50021 * C49925 + (C50021 * C49822 * C50004 * ae) / C49759 +
        C49822 * ((C50021 * C50004 * ae) / C49759 +
                  C49822 * C50021 *
                      (2 * C49919 - (C49913 * ce) / C49830 +
                       C49819 * ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830))));
    const double C1869 =
        2 * C50021 * C49925 +
        C50021 *
            (C49925 +
             (2 * C49919 - (C49913 * ce) / C49830 +
              C49819 *
                  ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                   C49906 / C49830 +
                   C49819 * ((-(C49819 * std::pow(C49824, 8) * bs[8] * C49835) /
                              C49694) /
                                 C49759 -
                             (C49907 * ce) / C49830))) *
                 C50031);
    const double C2519 =
        3 * (C49888 - (ae * C50064) / C49830 + C49822 * C50070) +
        (((-2 * C50064) / C49694 - (C49822 * C50069) / C49694) * ae) / C49759 +
        C49822 *
            (2 * C50070 - (ae * C50069) / C49830 +
             C49822 *
                 (C49923 - (ae * C49822 * C49999) / C49830 +
                  C49822 *
                      (C49822 * ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830)) -
                       (ae * C49999) / C49830)));
    const double C2912 = C2903 + C2904;
    const double C8391 = C8373 + C8374;
    const double C17524 = C17506 + C17507;
    const double C25283 = C25274 + C25275;
    const double C5735 = C5732 + C5733;
    const double C8585 = C8567 + C8568;
    const double C17718 = C17700 + C17701;
    const double C3076 = C3067 + C3068;
    const double C9123 = C9113 + C9114;
    const double C11128 = C11125 + C11126;
    const double C18256 = C18246 + C18247;
    const double C25447 = C25438 + C25439;
    const double C5564 = C5548 + C5549;
    const double C3552 =
        4 * (2 * C50062 - (ae * C50061) / C49830 + C49822 * C50096) +
        (((-3 * C50061) / C49694 + C49822 * C50097) * ae) / C49759 +
        C49822 *
            (3 * C50096 + (C50097 * ae) / C49759 +
             C49822 *
                 (2 * C50090 - (ae * C50088) / C49830 +
                  C49822 *
                      (C49919 - (ae * C49822 * C49991) / C49830 +
                       C49822 * (C49822 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830) -
                                 (ae * C49991) / C49830))));
    const double C6133 = C6126 + C6127;
    const double C14133 = C14119 + C14120;
    const double C22240 = C22221 + C22222;
    const double C5566 = C5552 + C5553;
    const double C20773 =
        5 * (3 * C50120 + (C50117 * ae) / C49759 + C49822 * C50191) +
        ((4 * C50117 + C49822 * C50189) * ae) / C49759 +
        C49822 *
            (4 * C50191 + (C50189 * ae) / C49759 +
             C49822 *
                 (3 * C50188 + (C50184 * ae) / C49759 +
                  C49822 *
                      (2 * C50183 - (ae * C50173) / C49830 +
                       C49822 * ((-(ae * C49822 * C49984) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49822 * ((-(C49822 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (ae * C49984) / C49830)))));
    const double C7892 = C7882 - C6916;
    const double C40765 = C40760 - C7884;
    const double C24450 = C24449 - C24447;
    const double C49533 = C49532 - C49530;
    const double C24757 = C24738 + C24739;
    const double C24754 = C24732 + C24733;
    const double C24749 = C24722 + C24723;
    const double C24746 = C24716 + C24717;
    const double C24745 = C24714 + C24715;
    const double C24742 = C24708 + C24709;
    const double C24939 = C24926 + C24927;
    const double C24936 = C24920 + C24921;
    const double C24931 = C24910 + C24911;
    const double C24928 = C24904 + C24905;
    const double C25121 = C25108 + C25109;
    const double C25118 = C25102 + C25103;
    const double C25113 = C25092 + C25093;
    const double C25110 = C25086 + C25087;
    const double C25285 = C25278 + C25279;
    const double C25282 = C25272 + C25273;
    const double C25449 = C25442 + C25443;
    const double C25446 = C25436 + C25437;
    const double C25661 = C25654 + C25655;
    const double C25658 = C25648 + C25649;
    const double C31355 = C31342 + C31343;
    const double C31352 = C31336 + C31337;
    const double C31347 = C31326 + C31327;
    const double C31344 = C31320 + C31321;
    const double C31859 = C31852 + C31853;
    const double C31856 = C31846 + C31847;
    const double C32265 = C32256 + C32257;
    const double C32262 = C32250 + C32251;
    const double C32769 = C32760 + C32761;
    const double C32766 = C32754 + C32755;
    const double C33177 = C33168 + C33169;
    const double C33174 = C33162 + C33163;
    const double C24756 = C24736 + C24737;
    const double C24753 = C24730 + C24731;
    const double C24750 = C24724 + C24725;
    const double C24747 = C24718 + C24719;
    const double C24744 = C24712 + C24713;
    const double C24741 = C24706 + C24707;
    const double C24938 = C24924 + C24925;
    const double C24935 = C24918 + C24919;
    const double C24932 = C24912 + C24913;
    const double C24929 = C24906 + C24907;
    const double C25120 = C25106 + C25107;
    const double C25117 = C25100 + C25101;
    const double C25114 = C25094 + C25095;
    const double C25111 = C25088 + C25089;
    const double C25284 = C25276 + C25277;
    const double C25281 = C25270 + C25271;
    const double C25448 = C25440 + C25441;
    const double C25445 = C25434 + C25435;
    const double C25660 = C25652 + C25653;
    const double C25657 = C25646 + C25647;
    const double C31354 = C31340 + C31341;
    const double C31351 = C31334 + C31335;
    const double C31348 = C31328 + C31329;
    const double C31345 = C31322 + C31323;
    const double C31858 = C31850 + C31851;
    const double C31855 = C31844 + C31845;
    const double C32266 = C32258 + C32259;
    const double C32263 = C32252 + C32253;
    const double C32770 = C32762 + C32763;
    const double C32767 = C32756 + C32757;
    const double C33178 = C33170 + C33171;
    const double C33175 = C33164 + C33165;
    const double C169 = C117 * C140;
    const double C651 = C117 * C304;
    const double C8175 = C8145 * C304;
    const double C17308 = C17278 * C304;
    const double C348 = C117 * C312;
    const double C2339 = C2307 * C312;
    const double C8739 = C8145 * C312;
    const double C17872 = C17278 * C312;
    const double C24734 = C24702 * C312;
    const double C761 = C117 * C481;
    const double C525 = C117 * C489;
    const double C925 = C117 * C906;
    const double C8899 = C8145 * C906;
    const double C18032 = C17278 * C906;
    const double C50006 = C49982 + C50005;
    const double C5571 = C5558 - C5536;
    const double C7893 = C7883 - C6924;
    const double C8198 = C8189 + C8190;
    const double C17331 = C17322 + C17323;
    const double C8734 = C8384 + C8383;
    const double C17867 = C17517 + C17516;
    const double C5899 = C532 * C638;
    const double C7271 = C532 * C1032;
    const double C11278 = C532 * C50610;
    const double C11578 = C532 * C50931;
    const double C12520 = C532 * C50610;
    const double C12822 = C532 * C1031;
    const double C5537 = C536 * C50610;
    const double C5903 = C536 * C50931;
    const double C5893 = C536 * C638;
    const double C6925 = C536 * C50610;
    const double C7275 = C536 * C1031;
    const double C7265 = C536 * C1032;
    const double C11280 = C536 * C278;
    const double C12171 = C536 * C50605;
    const double C13412 = C536 * C50874;
    const double C6119 = C930 * C50610;
    const double C6937 = C930 * C50610;
    const double C11776 = C930 * C278;
    const double C12174 = C930 * C50605;
    const double C12522 = C930 * C50874;
    const double C8894 = C8578 + C8577;
    const double C14524 = C8577 + C8578;
    const double C18027 = C17711 + C17710;
    const double C28339 = C17710 + C17711;
    const double C47386 = C47385 - C47381;
    const double C22247 = C22246 - C22232;
    const double C49187 = C49181 + C49182;
    const double C24104 = C24098 + C24099;
    const double C652 = C50744 * C319;
    const double C8176 = C50796 * C319;
    const double C17309 = C50796 * C319;
    const double C349 = C50744 * C323;
    const double C2340 = C2302 * C323;
    const double C8740 = C50796 * C323;
    const double C17873 = C50796 * C323;
    const double C24735 = C24697 * C323;
    const double C762 = C50744 * C496;
    const double C526 = C50744 * C500;
    const double C926 = C50744 * C912;
    const double C8900 = C50796 * C912;
    const double C18033 = C50796 * C912;
    const double C6123 = C5735 * C50610;
    const double C6941 = C5735 * C50610;
    const double C12176 = C5735 * C50605;
    const double C12672 = C11128 * C50605;
    const double C5579 = C5564 * C50610;
    const double C7891 = C5564 * C50610;
    const double C13070 = C5564 * C50605;
    const double C39506 = C5564 * C638;
    const double C40354 = C5564 * C1032;
    const double C6561 = C6133 * C50605;
    const double C39640 = C6133 * C50610;
    const double C40144 = C6133 * C50610;
    const double C7537 = C5566 * C50605;
    const double C39302 = C5566 * C50610;
    const double C40764 = C5566 * C50610;
    const double C7894 = C7892 - C6917;
    const double C40766 = C40765 - C7887;
    const double C24451 = C24450 - C24448;
    const double C49534 = C49533 - C49531;
    const double C180 = C169 + C170;
    const double C50007 = C50006 - C50000;
    const double C5581 = C5571 - C5537;
    const double C7895 = C7893 - C6925;
    const double C654 = C651 + C652;
    const double C8193 = C8175 + C8176;
    const double C17326 = C17308 + C17309;
    const double C361 = C348 + C349;
    const double C2360 = C2339 + C2340;
    const double C8745 = C8739 + C8740;
    const double C17878 = C17872 + C17873;
    const double C24755 = C24734 + C24735;
    const double C764 = C761 + C762;
    const double C538 = C525 + C526;
    const double C932 = C925 + C926;
    const double C8905 = C8899 + C8900;
    const double C18038 = C18032 + C18033;
    const double C324 =
        3 * C49888 - (C49885 * ce) / C49830 + C49819 * C49925 +
        (C49822 * C50007 * ae) / C49759 +
        C49822 *
            ((C50007 * ae) / C49759 +
             C49822 *
                 (3 * C49923 - (C49918 * ce) / C49830 +
                  C49819 *
                      (2 * C49919 - (C49913 * ce) / C49830 +
                       C49819 * ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830)))));
    const double C647 =
        ((4 * C49975 + C49819 * C50007 -
          ((3 * C49943 + C49819 * C49996) * ce) / C49694) *
         ae) /
            C49759 +
        C49822 *
            (4 * C49925 - (C49922 * ce) / C49830 +
             C49819 *
                 (3 * C49923 - (C49918 * ce) / C49830 +
                  C49819 *
                      (2 * C49919 - (C49913 * ce) / C49830 +
                       C49819 * ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830)))));
    const double C913 =
        (C50021 * C50007 * ae) / C49759 +
        C49822 * C50021 *
            (3 * C49923 - (C49918 * ce) / C49830 +
             C49819 * (2 * C49919 - (C49913 * ce) / C49830 +
                       C49819 * ((-(C49819 * C49907 * ce) / C49694) / C49759 -
                                 C49906 / C49830 +
                                 C49819 * ((-(C49819 * std::pow(C49824, 8) *
                                              bs[8] * C49835) /
                                            C49694) /
                                               C49759 -
                                           (C49907 * ce) / C49830))));
    const double C142 =
        5 * ((-3 * C49956) / C49694 + C49819 * C49975 -
             (C50251 * ce) / C49694) +
        C49819 * (4 * C49975 + C49819 * C50007 - (C50256 * ce) / C49694) -
        ((4 * C50251 + C49819 * C50256) * ce) / C49694;
    const double C314 = (-3 * C49956) / C49694 + C49819 * C49975 -
                        (C50251 * ce) / C49694 + C50007 * C50047;
    const double C491 = (-3 * C49956) / C49694 + C49819 * C49975 -
                        (C50251 * ce) / C49694 + C50007 * C50031;
    const double C646 =
        C49822 * (4 * C49975 + C49819 * C50007 - (C50256 * ce) / C49694);
    const double C756 =
        C50021 * (4 * C49975 + C49819 * C50007 - (C50256 * ce) / C49694);
    const double C908 = C50021 * C49822 * C50007;
    const double C11580 = C764 * C638;
    const double C12824 = C764 * C1032;
    const double C5905 = C538 * C638;
    const double C7277 = C538 * C1032;
    const double C11282 = C538 * C50610;
    const double C13414 = C538 * C50610;
    const double C11778 = C932 * C50610;
    const double C12524 = C932 * C50610;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C641 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50930 -
            (C8179 + C8180) * C642 - (C8181 + C8182) * C50931 + C8195 * C643 +
            C8196 * C638) *
               C50760 * C50932 +
           ((C8180 + C8179) * C641 + (C8182 + C8181) * C50930 -
            (C8184 + C8183) * C642 - (C8186 + C8185) * C50931 +
            (C8188 + C8187) * C643 + (C8190 + C8189) * C638) *
               C50760 * C50933 +
           (C8195 * C641 + C8196 * C50930 - C8197 * C642 - C8198 * C50931 +
            (C8192 + C8191) * C643 + (C8194 + C8193) * C638) *
               C50760 * C8143) *
              C50663 * C50889 +
          (((C8377 + C8378) * C642 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50930 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C641) +
            (C8379 + C8380) * C50931 - C8733 * C643 - C8734 * C638) *
               C50760 * C50932 +
           ((C8381 + C8382) * C642 -
            ((C8380 + C8379) * C50930 + (C8378 + C8377) * C641) +
            (C8383 + C8384) * C50931 - (C8743 + C8744) * C643 -
            (C8745 + C8746) * C638) *
               C50760 * C50933 +
           ((C8744 + C8743) * C642 - (C8734 * C50930 + C8733 * C641) +
            (C8746 + C8745) * C50931 -
            (C8145 * C294 + C50796 * C313 + C8144 * C289 + C50902 * C303) *
                C643 -
            (C8145 * C314 + C50796 * C324 + C8144 * C304 + C50902 * C319) *
                C638) *
               C50760 * C8143) *
              C50663 * C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C283 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                C50760 * C50932 +
            ((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                C50760 * C50933 +
            (C8195 * C283 + C8196 * C278 - C8197 * C284 - C8198 * C50610) *
                C50760 * C8143) *
               C50890 +
           (((C8571 + C8572) * C284 -
             ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                  C278 +
              (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                  C283) +
             (C8573 + C8574) * C50610) *
                C50760 * C50932 +
            ((C8575 + C8576) * C284 -
             ((C8574 + C8573) * C278 + (C8572 + C8571) * C283) +
             (C8577 + C8578) * C50610) *
                C50760 * C50933 +
            ((C8904 + C8903) * C284 - (C8894 * C278 + C8893 * C283) +
             (C8906 + C8905) * C50610) *
                C50760 * C8143) *
               C50727) *
              C50889 +
          ((((C8377 + C8378) * C284 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C278 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C283) +
             (C8379 + C8380) * C50610) *
                C50760 * C50932 +
            ((C8381 + C8382) * C284 -
             ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
             (C8383 + C8384) * C50610) *
                C50760 * C50933 +
            ((C8744 + C8743) * C284 - (C8734 * C278 + C8733 * C283) +
             (C8746 + C8745) * C50610) *
                C50760 * C8143) *
               C50890 +
           (((C8144 * C894 + C50902 * C899 + C8145 * C1576 + C50796 * C1584) *
                 C283 +
             (C8144 * C900 + C50902 * C909 + C8145 * C1583 + C50796 * C1588) *
                 C278 -
             (C9117 + C9118) * C284 - (C9119 + C9120) * C50610) *
                C50760 * C50932 +
            ((C9118 + C9117) * C283 + (C9120 + C9119) * C278 -
             (C9121 + C9122) * C284 - (C9123 + C9124) * C50610) *
                C50760 * C50933 +
            ((C9122 + C9121) * C283 + (C9124 + C9123) * C278 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C284 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C50610) *
                C50760 * C8143) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C283 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
               C50760 * C50932 +
           ((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
            (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
               C50760 * C50933 +
           (C8195 * C283 + C8196 * C278 - C8197 * C284 - C8198 * C50610) *
               C50760 * C8143) *
              C50663 * C280 +
          (((C8377 + C8378) * C284 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C278 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C283) +
            (C8379 + C8380) * C50610) *
               C50760 * C50932 +
           ((C8381 + C8382) * C284 -
            ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
            (C8383 + C8384) * C50610) *
               C50760 * C50933 +
           ((C8144 * C288 + C50902 * C301 + C8145 * C293 + C50796 * C311) *
                C284 -
            ((C8384 + C8383) * C278 + (C8382 + C8381) * C283) +
            (C8144 * C302 + C50902 * C318 + C8145 * C312 + C50796 * C323) *
                C50610) *
               C50760 * C8143) *
              C50663 * C281 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C283 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C278 -
            (C8385 + C8386) * C284 - (C8387 + C8388) * C50610) *
               C50760 * C50932 +
           ((C8386 + C8385) * C283 + (C8388 + C8387) * C278 -
            (C8389 + C8390) * C284 - (C8391 + C8392) * C50610) *
               C50760 * C50933 +
           ((C8390 + C8389) * C283 + (C8392 + C8391) * C278 -
            (C8145 * C1110 + C50796 * C1115 + C8144 * C293 + C50902 * C311) *
                C284 -
            (C8145 * C1114 + C50796 * C1122 + C8144 * C312 + C50902 * C323) *
                C50610) *
               C50760 * C8143) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
               C118 +
           (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
               C106 -
           (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
           C8196 * C108 - C8197 * C121 - C8198 * C109) *
              C50760 * C50932 +
          ((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
           (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
           (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
           (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
              C50760 * C50933 +
          (C8195 * C118 + C8196 * C106 - C8197 * C119 - C8198 * C107 +
           (C8192 + C8191) * C120 + (C8194 + C8193) * C108 -
           (C8145 * C644 + C50796 * C645 + C8144 * C127 + C50902 * C139) *
               C121 -
           (C8145 * C646 + C50796 * C647 + C8144 * C140 + C50902 * C148) *
               C109) *
              C50760 * C8143) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C283 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
               C50760 * C50932 +
           ((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
            (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
               C50760 * C50933 +
           (C8195 * C283 + C8196 * C278 - C8197 * C284 - C8198 * C50610) *
               C50760 * C8143) *
              C459 +
          (((C8571 + C8572) * C284 -
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C278 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C283) +
            (C8573 + C8574) * C50610) *
               C50760 * C50932 +
           ((C8575 + C8576) * C284 -
            ((C8574 + C8573) * C278 + (C8572 + C8571) * C283) +
            (C8577 + C8578) * C50610) *
               C50760 * C50933 +
           ((C8144 * C465 + C50902 * C478 + C8145 * C897 + C50796 * C905) *
                C284 -
            ((C8578 + C8577) * C278 + (C8576 + C8575) * C283) +
            (C8144 * C479 + C50902 * C495 + C8145 * C906 + C50796 * C912) *
                C50610) *
               C50760 * C8143) *
              C460 +
          (((C8144 * C467 + C50902 * C482 + C8145 * C1227 + C50796 * C1235) *
                C283 +
            (C8144 * C483 + C50902 * C497 + C8145 * C1234 + C50796 * C1239) *
                C278 -
            (C8579 + C8580) * C284 - (C8581 + C8582) * C50610) *
               C50760 * C50932 +
           ((C8580 + C8579) * C283 + (C8582 + C8581) * C278 -
            (C8583 + C8584) * C284 - (C8585 + C8586) * C50610) *
               C50760 * C50933 +
           ((C8584 + C8583) * C283 + (C8586 + C8585) * C278 -
            (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
                C284 -
            (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
                C50610) *
               C50760 * C8143) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C641 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50930 -
            (C8179 + C8180) * C642 - (C8181 + C8182) * C50931 + C8195 * C643 +
            C8196 * C638) *
               C50760 * C50932 +
           ((C8180 + C8179) * C641 + (C8182 + C8181) * C50930 -
            (C8184 + C8183) * C642 - (C8186 + C8185) * C50931 +
            (C8188 + C8187) * C643 + (C8190 + C8189) * C638) *
               C50760 * C50933 +
           (C8195 * C641 + C8196 * C50930 - C8197 * C642 - C8198 * C50931 +
            (C8192 + C8191) * C643 + (C8194 + C8193) * C638) *
               C50760 * C8143) *
              C50890 +
          (((C8571 + C8572) * C642 -
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C50930 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C641) +
            (C8573 + C8574) * C50931 - C8893 * C643 - C8894 * C638) *
               C50760 * C50932 +
           ((C8575 + C8576) * C642 -
            ((C8574 + C8573) * C50930 + (C8572 + C8571) * C641) +
            (C8577 + C8578) * C50931 - (C8903 + C8904) * C643 -
            (C8905 + C8906) * C638) *
               C50760 * C50933 +
           ((C8904 + C8903) * C642 - (C8894 * C50930 + C8893 * C641) +
            (C8906 + C8905) * C50931 -
            (C8145 * C898 + C50796 * C907 + C8144 * C466 + C50902 * C480) *
                C643 -
            (C8145 * C908 + C50796 * C913 + C8144 * C481 + C50902 * C496) *
                C638) *
               C50760 * C8143) *
              C50727) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
               C118 +
           (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
               C106 -
           (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
           C8196 * C108 - C8197 * C121 - C8198 * C109) *
              C50760 * C50932 +
          ((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
           (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
           (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
           (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
              C50760 * C50933 +
          (C8195 * C118 + C8196 * C106 - C8197 * C119 - C8198 * C107 +
           (C8192 + C8191) * C120 + (C8194 + C8193) * C108 -
           (C8145 * C644 + C50796 * C645 + C8144 * C127 + C50902 * C139) *
               C121 -
           (C8145 * C646 + C50796 * C647 + C8144 * C140 + C50902 * C148) *
               C109) *
              C50760 * C8143) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C283 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
               C50760 * C50932 +
           ((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
            (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
               C50760 * C50933 +
           (C8195 * C283 + C8196 * C278 - C8197 * C284 - C8198 * C50610) *
               C50760 * C8143) *
              C50663 * C280 +
          (((C8377 + C8378) * C284 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C278 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C283) +
            (C8379 + C8380) * C50610) *
               C50760 * C50932 +
           ((C8381 + C8382) * C284 -
            ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
            (C8383 + C8384) * C50610) *
               C50760 * C50933 +
           ((C8144 * C288 + C50902 * C301 + C8145 * C293 + C50796 * C311) *
                C284 -
            ((C8384 + C8383) * C278 + (C8382 + C8381) * C283) +
            (C8144 * C302 + C50902 * C318 + C8145 * C312 + C50796 * C323) *
                C50610) *
               C50760 * C8143) *
              C50663 * C281 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C283 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C278 -
            (C8385 + C8386) * C284 - (C8387 + C8388) * C50610) *
               C50760 * C50932 +
           ((C8386 + C8385) * C283 + (C8388 + C8387) * C278 -
            (C8389 + C8390) * C284 - (C8391 + C8392) * C50610) *
               C50760 * C50933 +
           ((C8390 + C8389) * C283 + (C8392 + C8391) * C278 -
            (C8145 * C1110 + C50796 * C1115 + C8144 * C293 + C50902 * C311) *
                C284 -
            (C8145 * C1114 + C50796 * C1122 + C8144 * C312 + C50902 * C323) *
                C50610) *
               C50760 * C8143) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C49720 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50874 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
               C50760 * C50932 +
           ((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
            (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
               C50760 * C50933 +
           (C8195 * C49720 + C8196 * C50874 - C8197 * C49713 - C8198 * C50610) *
               C50760 * C8143) *
              C50663 * C50934 +
          (((C8377 + C8378) * C49713 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50874 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C49720) +
            (C8379 + C8380) * C50610) *
               C50760 * C50932 +
           ((C8381 + C8382) * C49713 -
            ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
            (C8383 + C8384) * C50610) *
               C50760 * C50933 +
           ((C8744 + C8743) * C49713 - (C8734 * C50874 + C8733 * C49720) +
            (C8746 + C8745) * C50610) *
               C50760 * C8143) *
              C50663 * C50935 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C49720 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C50874 -
            (C8385 + C8386) * C49713 - (C8387 + C8388) * C50610) *
               C50760 * C50932 +
           ((C8386 + C8385) * C49720 + (C8388 + C8387) * C50874 -
            (C8389 + C8390) * C49713 - (C8391 + C8392) * C50610) *
               C50760 * C50933 +
           ((C8390 + C8389) * C49720 + (C8392 + C8391) * C50874 -
            (C8145 * C1110 + C50796 * C1115 + C8144 * C293 + C50902 * C311) *
                C49713 -
            (C8145 * C1114 + C50796 * C1122 + C8144 * C312 + C50902 * C323) *
                C50610) *
               C50760 * C8143) *
              C50663 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C50932 +
            ((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50760 *
                C50933 +
            (C8195 * C1109 + C8196 * C50605) * C50760 * C8143) *
               C50890 -
           ((C8894 * C50605 + C8893 * C1109) * C50760 * C8143 +
            ((C8574 + C8573) * C50605 + (C8572 + C8571) * C1109) * C50760 *
                C50933 +
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C50605 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C1109) *
                C50760 * C50932) *
               C50727) *
              C50934 +
          ((((C8144 * C894 + C50902 * C899 + C8145 * C1576 + C50796 * C1584) *
                 C1109 +
             (C8144 * C900 + C50902 * C909 + C8145 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C50932 +
            ((C9118 + C9117) * C1109 + (C9120 + C9119) * C50605) * C50760 *
                C50933 +
            ((C9122 + C9121) * C1109 + (C9124 + C9123) * C50605) * C50760 *
                C8143) *
               C50727 -
           ((C8734 * C50605 + C8733 * C1109) * C50760 * C8143 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50760 *
                C50933 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50760 * C50932) *
               C50890) *
              C50935 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C50760 * C50932 +
            ((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50760 *
                C50933 +
            ((C8390 + C8389) * C1109 + (C8392 + C8391) * C50605) * C50760 *
                C8143) *
               C50890 -
           (((C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50605 +
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C1109) *
                C50760 * C8143 +
            ((C8145 * C3278 + C50796 * C3282 + C8144 * C1581 + C50902 * C1587) *
                 C50605 +
             (C8145 * C3273 + C50796 * C3277 + C8144 * C1575 + C50902 * C1582) *
                 C1109) *
                C50760 * C50933 +
            ((C8145 * C3276 + C50796 * C3281 + C8144 * C1583 + C50902 * C1588) *
                 C50605 +
             (C8145 * C3272 + C50796 * C3275 + C8144 * C1576 + C50902 * C1584) *
                 C1109) *
                C50760 * C50932) *
               C50727) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1109 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50605) *
               C50760 * C50932 +
           ((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50760 *
               C50933 +
           (C8195 * C1109 + C8196 * C50605) * C50760 * C8143) *
              C50663 * C1105 -
          ((C8734 * C50605 + C8733 * C1109) * C50760 * C8143 +
           ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50760 *
               C50933 +
           ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                C50605 +
            (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                C1109) *
               C50760 * C50932) *
              C50663 * C1106 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C1109 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C50605) *
               C50760 * C50932 +
           ((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50760 *
               C50933 +
           ((C8390 + C8389) * C1109 + (C8392 + C8391) * C50605) * C50760 *
               C8143) *
              C50663 * C1107 -
          (((C8145 * C2516 + C50796 * C2519 + C8144 * C1116 + C50902 * C1123) *
                C50605 +
            (C8145 * C2510 + C50796 * C2515 + C8144 * C1111 + C50902 * C1117) *
                C1109) *
               C50760 * C8143 +
           ((C8145 * C2514 + C50796 * C2518 + C8144 * C1118 + C50902 * C1124) *
                C50605 +
            (C8145 * C2509 + C50796 * C2513 + C8144 * C1112 + C50902 * C1119) *
                C1109) *
               C50760 * C50933 +
           ((C8145 * C2512 + C50796 * C2517 + C8144 * C1120 + C50902 * C1125) *
                C50605 +
            (C8145 * C2508 + C50796 * C2511 + C8144 * C1113 + C50902 * C1121) *
                C1109) *
               C50760 * C50932) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1035 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C1030 -
            (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
            C8196 * C1032) *
               C50760 * C50932 +
           ((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
            (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
            (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
               C50760 * C50933 +
           (C8195 * C1035 + C8196 * C1030 - C8197 * C1036 - C8198 * C1031 +
            (C8192 + C8191) * C1037 + (C8194 + C8193) * C1032) *
               C50760 * C8143) *
              C50663 * C1033 +
          (((C8377 + C8378) * C1036 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C1030 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1035) +
            (C8379 + C8380) * C1031 - C8733 * C1037 - C8734 * C1032) *
               C50760 * C50932 +
           ((C8381 + C8382) * C1036 -
            ((C8380 + C8379) * C1030 + (C8378 + C8377) * C1035) +
            (C8383 + C8384) * C1031 - (C8743 + C8744) * C1037 -
            (C8745 + C8746) * C1032) *
               C50760 * C50933 +
           ((C8744 + C8743) * C1036 - (C8734 * C1030 + C8733 * C1035) +
            (C8746 + C8745) * C1031 -
            (C8145 * C294 + C50796 * C313 + C8144 * C289 + C50902 * C303) *
                C1037 -
            (C8145 * C314 + C50796 * C324 + C8144 * C304 + C50902 * C319) *
                C1032) *
               C50760 * C8143) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C50932 +
            ((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50760 *
                C50933 +
            (C8195 * C1109 + C8196 * C50605) * C50760 * C8143) *
               C459 -
           ((C8894 * C50605 + C8893 * C1109) * C50760 * C8143 +
            ((C8574 + C8573) * C50605 + (C8572 + C8571) * C1109) * C50760 *
                C50933 +
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C50605 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C1109) *
                C50760 * C50932) *
               C460 +
           (((C8144 * C467 + C50902 * C482 + C8145 * C1227 + C50796 * C1235) *
                 C1109 +
             (C8144 * C483 + C50902 * C497 + C8145 * C1234 + C50796 * C1239) *
                 C50605) *
                C50760 * C50932 +
            ((C8580 + C8579) * C1109 + (C8582 + C8581) * C50605) * C50760 *
                C50933 +
            ((C8584 + C8583) * C1109 + (C8586 + C8585) * C50605) * C50760 *
                C8143) *
               C461) *
              C1033 +
          ((((C8144 * C894 + C50902 * C899 + C8145 * C1576 + C50796 * C1584) *
                 C1109 +
             (C8144 * C900 + C50902 * C909 + C8145 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C50932 +
            ((C9118 + C9117) * C1109 + (C9120 + C9119) * C50605) * C50760 *
                C50933 +
            ((C9122 + C9121) * C1109 + (C9124 + C9123) * C50605) * C50760 *
                C8143) *
               C460 -
           ((C8734 * C50605 + C8733 * C1109) * C50760 * C8143 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50760 *
                C50933 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50760 * C50932) *
               C459 -
           (((C8145 * C2710 + C50796 * C2713 + C8144 * C1230 + C50902 * C1237) *
                 C50605 +
             (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 + C50902 * C1231) *
                 C1109) *
                C50760 * C8143 +
            ((C8145 * C2708 + C50796 * C2712 + C8144 * C1232 + C50902 * C1238) *
                 C50605 +
             (C8145 * C2703 + C50796 * C2707 + C8144 * C1226 + C50902 * C1233) *
                 C1109) *
                C50760 * C50933 +
            ((C8145 * C2706 + C50796 * C2711 + C8144 * C1234 + C50902 * C1239) *
                 C50605 +
             (C8145 * C2702 + C50796 * C2705 + C8144 * C1227 + C50902 * C1235) *
                 C1109) *
                C50760 * C50932) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C49720 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50874 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                C50760 * C50932 +
            ((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                C50760 * C50933 +
            (C8195 * C49720 + C8196 * C50874 - C8197 * C49713 -
             C8198 * C50610) *
                C50760 * C8143) *
               C50890 +
           (((C8571 + C8572) * C49713 -
             ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                  C50874 +
              (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                  C49720) +
             (C8573 + C8574) * C50610) *
                C50760 * C50932 +
            ((C8575 + C8576) * C49713 -
             ((C8574 + C8573) * C50874 + (C8572 + C8571) * C49720) +
             (C8577 + C8578) * C50610) *
                C50760 * C50933 +
            ((C8904 + C8903) * C49713 - (C8894 * C50874 + C8893 * C49720) +
             (C8906 + C8905) * C50610) *
                C50760 * C8143) *
               C50727) *
              C1033 +
          ((((C8377 + C8378) * C49713 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50874 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C49720) +
             (C8379 + C8380) * C50610) *
                C50760 * C50932 +
            ((C8381 + C8382) * C49713 -
             ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
             (C8383 + C8384) * C50610) *
                C50760 * C50933 +
            ((C8744 + C8743) * C49713 - (C8734 * C50874 + C8733 * C49720) +
             (C8746 + C8745) * C50610) *
                C50760 * C8143) *
               C50890 +
           (((C8144 * C894 + C50902 * C899 + C8145 * C1576 + C50796 * C1584) *
                 C49720 +
             (C8144 * C900 + C50902 * C909 + C8145 * C1583 + C50796 * C1588) *
                 C50874 -
             (C9117 + C9118) * C49713 - (C9119 + C9120) * C50610) *
                C50760 * C50932 +
            ((C9118 + C9117) * C49720 + (C9120 + C9119) * C50874 -
             (C9121 + C9122) * C49713 - (C9123 + C9124) * C50610) *
                C50760 * C50933 +
            ((C9122 + C9121) * C49720 + (C9124 + C9123) * C50874 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C49713 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C50610) *
                C50760 * C8143) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1035 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C1030 -
            (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
            C8196 * C1032) *
               C50760 * C50932 +
           ((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
            (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
            (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
               C50760 * C50933 +
           (C8195 * C1035 + C8196 * C1030 - C8197 * C1036 - C8198 * C1031 +
            (C8192 + C8191) * C1037 + (C8194 + C8193) * C1032) *
               C50760 * C8143) *
              C50663 * C1033 +
          (((C8377 + C8378) * C1036 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C1030 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1035) +
            (C8379 + C8380) * C1031 - C8733 * C1037 - C8734 * C1032) *
               C50760 * C50932 +
           ((C8381 + C8382) * C1036 -
            ((C8380 + C8379) * C1030 + (C8378 + C8377) * C1035) +
            (C8383 + C8384) * C1031 - (C8743 + C8744) * C1037 -
            (C8745 + C8746) * C1032) *
               C50760 * C50933 +
           ((C8744 + C8743) * C1036 - (C8734 * C1030 + C8733 * C1035) +
            (C8746 + C8745) * C1031 -
            (C8145 * C294 + C50796 * C313 + C8144 * C289 + C50902 * C303) *
                C1037 -
            (C8145 * C314 + C50796 * C324 + C8144 * C304 + C50902 * C319) *
                C1032) *
               C50760 * C8143) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1109 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50605) *
               C50760 * C50932 +
           ((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50760 *
               C50933 +
           (C8195 * C1109 + C8196 * C50605) * C50760 * C8143) *
              C50663 * C1105 -
          ((C8734 * C50605 + C8733 * C1109) * C50760 * C8143 +
           ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50760 *
               C50933 +
           ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                C50605 +
            (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                C1109) *
               C50760 * C50932) *
              C50663 * C1106 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C1109 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C50605) *
               C50760 * C50932 +
           ((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50760 *
               C50933 +
           ((C8390 + C8389) * C1109 + (C8392 + C8391) * C50605) * C50760 *
               C8143) *
              C50663 * C1107 -
          (((C8145 * C2516 + C50796 * C2519 + C8144 * C1116 + C50902 * C1123) *
                C50605 +
            (C8145 * C2510 + C50796 * C2515 + C8144 * C1111 + C50902 * C1117) *
                C1109) *
               C50760 * C8143 +
           ((C8145 * C2514 + C50796 * C2518 + C8144 * C1118 + C50902 * C1124) *
                C50605 +
            (C8145 * C2509 + C50796 * C2513 + C8144 * C1112 + C50902 * C1119) *
                C1109) *
               C50760 * C50933 +
           ((C8145 * C2512 + C50796 * C2517 + C8144 * C1120 + C50902 * C1125) *
                C50605 +
            (C8145 * C2508 + C50796 * C2511 + C8144 * C1113 + C50902 * C1121) *
                C1109) *
               C50760 * C50932) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C49720 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50874 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                C50760 * C50932 +
            ((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                C50760 * C50933 +
            (C8195 * C49720 + C8196 * C50874 - C8197 * C49713 -
             C8198 * C50610) *
                C50760 * C8143) *
               C1687 +
           (((C8571 + C8572) * C49713 -
             ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                  C50874 +
              (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                  C49720) +
             (C8573 + C8574) * C50610) *
                C50760 * C50932 +
            ((C8575 + C8576) * C49713 -
             ((C8574 + C8573) * C50874 + (C8572 + C8571) * C49720) +
             (C8577 + C8578) * C50610) *
                C50760 * C50933 +
            ((C8904 + C8903) * C49713 - (C8894 * C50874 + C8893 * C49720) +
             (C8906 + C8905) * C50610) *
                C50760 * C8143) *
               C50727) *
              C50889 +
          ((((C8377 + C8378) * C49713 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50874 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C49720) +
             (C8379 + C8380) * C50610) *
                C50760 * C50932 +
            ((C8381 + C8382) * C49713 -
             ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
             (C8383 + C8384) * C50610) *
                C50760 * C50933 +
            ((C8744 + C8743) * C49713 - (C8734 * C50874 + C8733 * C49720) +
             (C8746 + C8745) * C50610) *
                C50760 * C8143) *
               C1687 +
           (((C8144 * C894 + C50902 * C899 + C8145 * C1576 + C50796 * C1584) *
                 C49720 +
             (C8144 * C900 + C50902 * C909 + C8145 * C1583 + C50796 * C1588) *
                 C50874 -
             (C9117 + C9118) * C49713 - (C9119 + C9120) * C50610) *
                C50760 * C50932 +
            ((C9118 + C9117) * C49720 + (C9120 + C9119) * C50874 -
             (C9121 + C9122) * C49713 - (C9123 + C9124) * C50610) *
                C50760 * C50933 +
            ((C9122 + C9121) * C49720 + (C9124 + C9123) * C50874 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C49713 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C50610) *
                C50760 * C8143) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C50932 +
            ((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50760 *
                C50933 +
            (C8195 * C1109 + C8196 * C50605) * C50760 * C8143) *
               C50936 -
           ((C8894 * C50605 + C8893 * C1109) * C50760 * C8143 +
            ((C8574 + C8573) * C50605 + (C8572 + C8571) * C1109) * C50760 *
                C50933 +
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C50605 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C1109) *
                C50760 * C50932) *
               C50937 +
           (((C8144 * C467 + C50902 * C482 + C8145 * C1227 + C50796 * C1235) *
                 C1109 +
             (C8144 * C483 + C50902 * C497 + C8145 * C1234 + C50796 * C1239) *
                 C50605) *
                C50760 * C50932 +
            ((C8580 + C8579) * C1109 + (C8582 + C8581) * C50605) * C50760 *
                C50933 +
            ((C8584 + C8583) * C1109 + (C8586 + C8585) * C50605) * C50760 *
                C8143) *
               C2103) *
              C50889 +
          ((((C8144 * C894 + C50902 * C899 + C8145 * C1576 + C50796 * C1584) *
                 C1109 +
             (C8144 * C900 + C50902 * C909 + C8145 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C50932 +
            ((C9118 + C9117) * C1109 + (C9120 + C9119) * C50605) * C50760 *
                C50933 +
            ((C9122 + C9121) * C1109 + (C9124 + C9123) * C50605) * C50760 *
                C8143) *
               C50937 -
           ((C8734 * C50605 + C8733 * C1109) * C50760 * C8143 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50760 *
                C50933 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50760 * C50932) *
               C50936 -
           (((C8145 * C2710 + C50796 * C2713 + C8144 * C1230 + C50902 * C1237) *
                 C50605 +
             (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 + C50902 * C1231) *
                 C1109) *
                C50760 * C8143 +
            ((C8145 * C2708 + C50796 * C2712 + C8144 * C1232 + C50902 * C1238) *
                 C50605 +
             (C8145 * C2703 + C50796 * C2707 + C8144 * C1226 + C50902 * C1233) *
                 C1109) *
                C50760 * C50933 +
            ((C8145 * C2706 + C50796 * C2711 + C8144 * C1234 + C50902 * C1239) *
                 C50605 +
             (C8145 * C2702 + C50796 * C2705 + C8144 * C1227 + C50902 * C1235) *
                 C1109) *
                C50760 * C50932) *
               C2103) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C50932 +
            ((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50760 *
                C50933 +
            (C8195 * C1109 + C8196 * C50605) * C50760 * C8143) *
               C1687 -
           ((C8894 * C50605 + C8893 * C1109) * C50760 * C8143 +
            ((C8574 + C8573) * C50605 + (C8572 + C8571) * C1109) * C50760 *
                C50933 +
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C50605 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C1109) *
                C50760 * C50932) *
               C50727) *
              C280 +
          ((((C8144 * C894 + C50902 * C899 + C8145 * C1576 + C50796 * C1584) *
                 C1109 +
             (C8144 * C900 + C50902 * C909 + C8145 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C50932 +
            ((C9118 + C9117) * C1109 + (C9120 + C9119) * C50605) * C50760 *
                C50933 +
            ((C9122 + C9121) * C1109 + (C9124 + C9123) * C50605) * C50760 *
                C8143) *
               C50727 -
           ((C8734 * C50605 + C8733 * C1109) * C50760 * C8143 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50760 *
                C50933 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50760 * C50932) *
               C1687) *
              C281 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C50760 * C50932 +
            ((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50760 *
                C50933 +
            ((C8390 + C8389) * C1109 + (C8392 + C8391) * C50605) * C50760 *
                C8143) *
               C1687 -
           (((C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50605 +
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C1109) *
                C50760 * C8143 +
            ((C8145 * C3278 + C50796 * C3282 + C8144 * C1581 + C50902 * C1587) *
                 C50605 +
             (C8145 * C3273 + C50796 * C3277 + C8144 * C1575 + C50902 * C1582) *
                 C1109) *
                C50760 * C50933 +
            ((C8145 * C3276 + C50796 * C3281 + C8144 * C1583 + C50902 * C1588) *
                 C50605 +
             (C8145 * C3272 + C50796 * C3275 + C8144 * C1576 + C50902 * C1584) *
                 C1109) *
                C50760 * C50932) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1035 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C1030 -
            (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
            C8196 * C1032) *
               C50760 * C50932 +
           ((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
            (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
            (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
               C50760 * C50933 +
           (C8195 * C1035 + C8196 * C1030 - C8197 * C1036 - C8198 * C1031 +
            (C8192 + C8191) * C1037 + (C8194 + C8193) * C1032) *
               C50760 * C8143) *
              C1687 +
          (((C8571 + C8572) * C1036 -
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C1030 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C1035) +
            (C8573 + C8574) * C1031 - C8893 * C1037 - C8894 * C1032) *
               C50760 * C50932 +
           ((C8575 + C8576) * C1036 -
            ((C8574 + C8573) * C1030 + (C8572 + C8571) * C1035) +
            (C8577 + C8578) * C1031 - (C8903 + C8904) * C1037 -
            (C8905 + C8906) * C1032) *
               C50760 * C50933 +
           ((C8904 + C8903) * C1036 - (C8894 * C1030 + C8893 * C1035) +
            (C8906 + C8905) * C1031 -
            (C8145 * C898 + C50796 * C907 + C8144 * C466 + C50902 * C480) *
                C1037 -
            (C8145 * C908 + C50796 * C913 + C8144 * C481 + C50902 * C496) *
                C1032) *
               C50760 * C8143) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1109 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50605) *
               C50760 * C50932 +
           ((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50760 *
               C50933 +
           (C8195 * C1109 + C8196 * C50605) * C50760 * C8143) *
              C1853 -
          ((C8894 * C50605 + C8893 * C1109) * C50760 * C8143 +
           ((C8574 + C8573) * C50605 + (C8572 + C8571) * C1109) * C50760 *
               C50933 +
           ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                C50605 +
            (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                C1109) *
               C50760 * C50932) *
              C1854 +
          (((C8144 * C467 + C50902 * C482 + C8145 * C1227 + C50796 * C1235) *
                C1109 +
            (C8144 * C483 + C50902 * C497 + C8145 * C1234 + C50796 * C1239) *
                C50605) *
               C50760 * C50932 +
           ((C8580 + C8579) * C1109 + (C8582 + C8581) * C50605) * C50760 *
               C50933 +
           ((C8584 + C8583) * C1109 + (C8586 + C8585) * C50605) * C50760 *
               C8143) *
              C1855 -
          (((C8145 * C6101 + C50796 * C6102 + C8144 * C1863 + C50902 * C1870) *
                C50605 +
            (C8145 * C6099 + C50796 * C6100 + C8144 * C1858 + C50902 * C1864) *
                C1109) *
               C50760 * C8143 +
           ((C8145 * C4597 + C50796 * C4605 + C8144 * C1865 + C50902 * C1871) *
                C50605 +
            (C8145 * C4593 + C50796 * C4599 + C8144 * C1859 + C50902 * C1866) *
                C1109) *
               C50760 * C50933 +
           ((C8145 * C4601 + C50796 * C4607 + C8144 * C1867 + C50902 * C1872) *
                C50605 +
            (C8145 * C4595 + C50796 * C4603 + C8144 * C1860 + C50902 * C1868) *
                C1109) *
               C50760 * C50932) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C49720 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50874 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
               C50760 * C50932 +
           ((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
            (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
               C50760 * C50933 +
           (C8195 * C49720 + C8196 * C50874 - C8197 * C49713 - C8198 * C50610) *
               C50760 * C8143) *
              C50936 +
          (((C8571 + C8572) * C49713 -
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C50874 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C49720) +
            (C8573 + C8574) * C50610) *
               C50760 * C50932 +
           ((C8575 + C8576) * C49713 -
            ((C8574 + C8573) * C50874 + (C8572 + C8571) * C49720) +
            (C8577 + C8578) * C50610) *
               C50760 * C50933 +
           ((C8904 + C8903) * C49713 - (C8894 * C50874 + C8893 * C49720) +
            (C8906 + C8905) * C50610) *
               C50760 * C8143) *
              C50937 +
          (((C8144 * C467 + C50902 * C482 + C8145 * C1227 + C50796 * C1235) *
                C49720 +
            (C8144 * C483 + C50902 * C497 + C8145 * C1234 + C50796 * C1239) *
                C50874 -
            (C8579 + C8580) * C49713 - (C8581 + C8582) * C50610) *
               C50760 * C50932 +
           ((C8580 + C8579) * C49720 + (C8582 + C8581) * C50874 -
            (C8583 + C8584) * C49713 - (C8585 + C8586) * C50610) *
               C50760 * C50933 +
           ((C8584 + C8583) * C49720 + (C8586 + C8585) * C50874 -
            (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
                C49713 -
            (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
                C50610) *
               C50760 * C8143) *
              C2103) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1035 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C1030 -
            (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
            C8196 * C1032) *
               C50760 * C50932 +
           ((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
            (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
            (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
               C50760 * C50933 +
           (C8195 * C1035 + C8196 * C1030 - C8197 * C1036 - C8198 * C1031 +
            (C8192 + C8191) * C1037 + (C8194 + C8193) * C1032) *
               C50760 * C8143) *
              C1687 +
          (((C8571 + C8572) * C1036 -
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C1030 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C1035) +
            (C8573 + C8574) * C1031 - C8893 * C1037 - C8894 * C1032) *
               C50760 * C50932 +
           ((C8575 + C8576) * C1036 -
            ((C8574 + C8573) * C1030 + (C8572 + C8571) * C1035) +
            (C8577 + C8578) * C1031 - (C8903 + C8904) * C1037 -
            (C8905 + C8906) * C1032) *
               C50760 * C50933 +
           ((C8904 + C8903) * C1036 - (C8894 * C1030 + C8893 * C1035) +
            (C8906 + C8905) * C1031 -
            (C8145 * C898 + C50796 * C907 + C8144 * C466 + C50902 * C480) *
                C1037 -
            (C8145 * C908 + C50796 * C913 + C8144 * C481 + C50902 * C496) *
                C1032) *
               C50760 * C8143) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C50932 +
            ((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50760 *
                C50933 +
            (C8195 * C1109 + C8196 * C50605) * C50760 * C8143) *
               C1687 -
           ((C8894 * C50605 + C8893 * C1109) * C50760 * C8143 +
            ((C8574 + C8573) * C50605 + (C8572 + C8571) * C1109) * C50760 *
                C50933 +
            ((C8145 * C900 + C50796 * C909 + C8144 * C473 + C50902 * C492) *
                 C50605 +
             (C8145 * C894 + C50796 * C899 + C8144 * C463 + C50902 * C474) *
                 C1109) *
                C50760 * C50932) *
               C50727) *
              C280 +
          ((((C8144 * C894 + C50902 * C899 + C8145 * C1576 + C50796 * C1584) *
                 C1109 +
             (C8144 * C900 + C50902 * C909 + C8145 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C50932 +
            ((C9118 + C9117) * C1109 + (C9120 + C9119) * C50605) * C50760 *
                C50933 +
            ((C9122 + C9121) * C1109 + (C9124 + C9123) * C50605) * C50760 *
                C8143) *
               C50727 -
           ((C8734 * C50605 + C8733 * C1109) * C50760 * C8143 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50760 *
                C50933 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50760 * C50932) *
               C1687) *
              C281 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C50760 * C50932 +
            ((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50760 *
                C50933 +
            ((C8390 + C8389) * C1109 + (C8392 + C8391) * C50605) * C50760 *
                C8143) *
               C1687 -
           (((C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50605 +
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C1109) *
                C50760 * C8143 +
            ((C8145 * C3278 + C50796 * C3282 + C8144 * C1581 + C50902 * C1587) *
                 C50605 +
             (C8145 * C3273 + C50796 * C3277 + C8144 * C1575 + C50902 * C1582) *
                 C1109) *
                C50760 * C50933 +
            ((C8145 * C3276 + C50796 * C3281 + C8144 * C1583 + C50902 * C1588) *
                 C50605 +
             (C8145 * C3272 + C50796 * C3275 + C8144 * C1576 + C50902 * C1584) *
                 C1109) *
                C50760 * C50932) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C641 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50930 -
             (C8179 + C8180) * C642 - (C8181 + C8182) * C50931 + C8195 * C643 +
             C8196 * C638) *
                C50903 +
            ((C14123 + C14124) * C641 + (C14125 + C14126) * C50930 -
             C14099 * C642 - C14100 * C50931 + (C8575 + C8576) * C643 +
             (C8577 + C8578) * C638) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C641 + (C8182 + C8181) * C50930 -
             (C8184 + C8183) * C642 - (C8186 + C8185) * C50931 +
             (C8188 + C8187) * C643 + (C8190 + C8189) * C638) *
                C50903 +
            (C14101 * C641 + C14102 * C50930 - C8893 * C642 - C8894 * C50931 +
             (C8904 + C8903) * C643 + (C8906 + C8905) * C638) *
                C50824) *
               C50631) *
              C50663 * C50889 +
          ((((C8377 + C8378) * C642 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50930 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C641) +
             (C8379 + C8380) * C50931 - C8733 * C643 - C8734 * C638) *
                C50903 +
            ((C9118 + C9117) * C642 -
             ((C8145 * C1583 + C50796 * C1588 + C8144 * C900 + C50902 * C909) *
                  C50930 +
              (C8145 * C1576 + C50796 * C1584 + C8144 * C894 + C50902 * C899) *
                  C641) +
             (C9120 + C9119) * C50931 - (C9121 + C9122) * C643 -
             (C9123 + C9124) * C638) *
                C50824) *
               C2303 +
           (((C8381 + C8382) * C642 -
             ((C8380 + C8379) * C50930 + (C8378 + C8377) * C641) +
             (C8383 + C8384) * C50931 - (C8743 + C8744) * C643 -
             (C8745 + C8746) * C638) *
                C50903 +
            ((C9122 + C9121) * C642 -
             ((C9119 + C9120) * C50930 + (C9117 + C9118) * C641) +
             (C9124 + C9123) * C50931 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C643 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C638) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C283 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C278 -
              (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                 C50903 +
             ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
              C14099 * C284 - C14100 * C50610) *
                 C50824) *
                C2303 +
            (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
              (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                 C50903 +
             (C14101 * C283 + C14102 * C278 - C8893 * C284 - C8894 * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           (((C14101 * C284 -
              ((C14126 + C14125) * C278 + (C14124 + C14123) * C283) +
              C14102 * C50610) *
                 C50903 +
             (C14103 * C284 -
              ((C14127 + C14128) * C278 + (C14129 + C14130) * C283) +
              C14112 * C50610) *
                 C50824) *
                C2303 +
            ((C14523 * C284 - (C14100 * C278 + C14099 * C283) +
              C14524 * C50610) *
                 C50903 +
             ((C8584 + C8583) * C284 - (C14113 * C278 + C14114 * C283) +
              (C8586 + C8585) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50889 +
          (((((C8377 + C8378) * C284 -
              ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                   C278 +
               (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                   C283) +
              (C8379 + C8380) * C50610) *
                 C50903 +
             (C14783 * C284 -
              ((C14803 + C14804) * C278 + (C14805 + C14806) * C283) +
              C14792 * C50610) *
                 C50824) *
                C2303 +
            (((C8381 + C8382) * C284 -
              ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
              (C8383 + C8384) * C50610) *
                 C50903 +
             ((C9122 + C9121) * C284 - (C14793 * C278 + C14794 * C283) +
              (C9124 + C9123) * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           ((((C14806 + C14805) * C283 + (C14804 + C14803) * C278 -
              C14794 * C284 - C14793 * C50610) *
                 C50903 +
             ((C8144 * C1227 + C50902 * C1235 + C8145 * C2702 +
               C50796 * C2705) *
                  C283 +
              (C8144 * C1234 + C50902 * C1239 + C8145 * C2706 +
               C50796 * C2711) *
                  C278 -
              (C14807 + C14808) * C284 - (C14809 + C14810) * C50610) *
                 C50824) *
                C2303 +
            ((C14783 * C283 + C14792 * C278 - (C9121 + C9122) * C284 -
              (C9123 + C9124) * C50610) *
                 C50903 +
             ((C14808 + C14807) * C283 + (C14810 + C14809) * C278 -
              (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 +
               C50902 * C1231) *
                  C284 -
              (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 +
               C50902 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C283 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                C50903 +
            ((C8144 * C463 + C50902 * C474 + C8145 * C894 + C50796 * C899) *
                 C283 +
             (C8144 * C473 + C50902 * C492 + C8145 * C900 + C50796 * C909) *
                 C278 -
             (C8572 + C8571) * C284 - (C8574 + C8573) * C50610) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                C50903 +
            ((C8571 + C8572) * C283 + (C8573 + C8574) * C278 - C8893 * C284 -
             C8894 * C50610) *
                C50824) *
               C50631) *
              C50663 * C280 +
          ((((C8377 + C8378) * C284 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C278 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C283) +
             (C8379 + C8380) * C50610) *
                C50903 +
            ((C9118 + C9117) * C284 -
             ((C8145 * C1583 + C50796 * C1588 + C8144 * C900 + C50902 * C909) *
                  C278 +
              (C8145 * C1576 + C50796 * C1584 + C8144 * C894 + C50902 * C899) *
                  C283) +
             (C9120 + C9119) * C50610) *
                C50824) *
               C2303 +
           (((C8381 + C8382) * C284 -
             ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
             (C8383 + C8384) * C50610) *
                C50903 +
            ((C9122 + C9121) * C284 -
             ((C9119 + C9120) * C278 + (C9117 + C9118) * C283) +
             (C9124 + C9123) * C50610) *
                C50824) *
               C50631) *
              C50663 * C281 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C283 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C278 -
             (C8385 + C8386) * C284 - (C8387 + C8388) * C50610) *
                C50903 +
            ((C8144 * C1576 + C50902 * C1584 + C8145 * C3272 + C50796 * C3275) *
                 C283 +
             (C8144 * C1583 + C50902 * C1588 + C8145 * C3276 + C50796 * C3281) *
                 C278 -
             (C13893 + C13894) * C284 - (C13895 + C13896) * C50610) *
                C50824) *
               C2303 +
           (((C8386 + C8385) * C283 + (C8388 + C8387) * C278 -
             (C8389 + C8390) * C284 - (C8391 + C8392) * C50610) *
                C50903 +
            ((C13894 + C13893) * C283 + (C13896 + C13895) * C278 -
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C284 -
             (C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C118 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C106 -
            (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
            C8196 * C108 - C8197 * C121 - C8198 * C109) *
               C50903 +
           ((C8144 * C463 + C50902 * C474 + C8145 * C894 + C50796 * C899) *
                C118 +
            (C8144 * C473 + C50902 * C492 + C8145 * C900 + C50796 * C909) *
                C106 -
            (C8572 + C8571) * C119 - (C8574 + C8573) * C107 +
            (C8575 + C8576) * C120 + (C8577 + C8578) * C108 -
            (C8903 + C8904) * C121 - (C8905 + C8906) * C109) *
               C50824) *
              C2303 +
          (((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
            (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
            (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
            (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
               C50903 +
           ((C8571 + C8572) * C118 + (C8573 + C8574) * C106 - C8893 * C119 -
            C8894 * C107 + (C8904 + C8903) * C120 + (C8906 + C8905) * C108 -
            (C8145 * C898 + C50796 * C907 + C8144 * C466 + C50902 * C480) *
                C121 -
            (C8145 * C908 + C50796 * C913 + C8144 * C481 + C50902 * C496) *
                C109) *
               C50824) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C283 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                C50903 +
            ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
             C14099 * C284 - C14100 * C50610) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                C50903 +
            (C14101 * C283 + C14102 * C278 - C8893 * C284 - C8894 * C50610) *
                C50824) *
               C50631) *
              C459 +
          (((C14101 * C284 -
             ((C14126 + C14125) * C278 + (C14124 + C14123) * C283) +
             C14102 * C50610) *
                C50903 +
            (C14103 * C284 -
             ((C14127 + C14128) * C278 + (C14129 + C14130) * C283) +
             C14112 * C50610) *
                C50824) *
               C2303 +
           (((C8575 + C8576) * C284 - (C14100 * C278 + C14099 * C283) +
             (C8577 + C8578) * C50610) *
                C50903 +
            ((C8584 + C8583) * C284 - (C14113 * C278 + C14114 * C283) +
             (C8586 + C8585) * C50610) *
                C50824) *
               C50631) *
              C460 +
          ((((C14130 + C14129) * C283 + (C14128 + C14127) * C278 -
             C14114 * C284 - C14113 * C50610) *
                C50903 +
            ((C8144 * C1860 + C50902 * C1868 + C8145 * C4595 + C50796 * C4603) *
                 C283 +
             (C8144 * C1867 + C50902 * C1872 + C8145 * C4601 + C50796 * C4607) *
                 C278 -
             (C14131 + C14132) * C284 - (C14133 + C14134) * C50610) *
                C50824) *
               C2303 +
           ((C14103 * C283 + C14112 * C278 - (C8583 + C8584) * C284 -
             (C8585 + C8586) * C50610) *
                C50903 +
            ((C14132 + C14131) * C283 + (C14134 + C14133) * C278 -
             (C8145 * C6099 + C50796 * C6100 + C8144 * C1858 + C50902 * C1864) *
                 C284 -
             (C8145 * C6101 + C50796 * C6102 + C8144 * C1863 + C50902 * C1870) *
                 C50610) *
                C50824) *
               C50631) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C641 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50930 -
             (C8179 + C8180) * C642 - (C8181 + C8182) * C50931 + C8195 * C643 +
             C8196 * C638) *
                C50903 +
            ((C14123 + C14124) * C641 + (C14125 + C14126) * C50930 -
             C14099 * C642 - C14100 * C50931 + C14523 * C643 + C14524 * C638) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C641 + (C8182 + C8181) * C50930 -
             (C8184 + C8183) * C642 - (C8186 + C8185) * C50931 +
             (C8188 + C8187) * C643 + (C8190 + C8189) * C638) *
                C50903 +
            (C14101 * C641 + C14102 * C50930 - C8893 * C642 - C8894 * C50931 +
             (C8904 + C8903) * C643 + (C8906 + C8905) * C638) *
                C50824) *
               C50631) *
              C50890 +
          (((C14101 * C642 -
             ((C14126 + C14125) * C50930 + (C14124 + C14123) * C641) +
             C14102 * C50931 - C8893 * C643 - C8894 * C638) *
                C50903 +
            (C14103 * C642 -
             ((C14127 + C14128) * C50930 + (C14129 + C14130) * C641) +
             C14112 * C50931 - (C8583 + C8584) * C643 -
             (C8585 + C8586) * C638) *
                C50824) *
               C2303 +
           ((C14523 * C642 - (C14100 * C50930 + C14099 * C641) +
             C14524 * C50931 - (C8903 + C8904) * C643 -
             (C8905 + C8906) * C638) *
                C50903 +
            ((C8584 + C8583) * C642 - (C14113 * C50930 + C14114 * C641) +
             (C8586 + C8585) * C50931 -
             (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
                 C643 -
             (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
                 C638) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C118 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C106 -
            (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
            C8196 * C108 - C8197 * C121 - C8198 * C109) *
               C50903 +
           ((C8144 * C463 + C50902 * C474 + C8145 * C894 + C50796 * C899) *
                C118 +
            (C8144 * C473 + C50902 * C492 + C8145 * C900 + C50796 * C909) *
                C106 -
            (C8572 + C8571) * C119 - (C8574 + C8573) * C107 +
            (C8575 + C8576) * C120 + (C8577 + C8578) * C108 -
            (C8903 + C8904) * C121 - (C8905 + C8906) * C109) *
               C50824) *
              C2303 +
          (((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
            (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
            (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
            (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
               C50903 +
           ((C8571 + C8572) * C118 + (C8573 + C8574) * C106 - C8893 * C119 -
            C8894 * C107 + (C8904 + C8903) * C120 + (C8906 + C8905) * C108 -
            (C8145 * C898 + C50796 * C907 + C8144 * C466 + C50902 * C480) *
                C121 -
            (C8145 * C908 + C50796 * C913 + C8144 * C481 + C50902 * C496) *
                C109) *
               C50824) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C283 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                C50903 +
            ((C8144 * C463 + C50902 * C474 + C8145 * C894 + C50796 * C899) *
                 C283 +
             (C8144 * C473 + C50902 * C492 + C8145 * C900 + C50796 * C909) *
                 C278 -
             (C8572 + C8571) * C284 - (C8574 + C8573) * C50610) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                C50903 +
            ((C8571 + C8572) * C283 + (C8573 + C8574) * C278 - C8893 * C284 -
             C8894 * C50610) *
                C50824) *
               C50631) *
              C50663 * C280 +
          ((((C8377 + C8378) * C284 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C278 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C283) +
             (C8379 + C8380) * C50610) *
                C50903 +
            ((C9118 + C9117) * C284 -
             ((C8145 * C1583 + C50796 * C1588 + C8144 * C900 + C50902 * C909) *
                  C278 +
              (C8145 * C1576 + C50796 * C1584 + C8144 * C894 + C50902 * C899) *
                  C283) +
             (C9120 + C9119) * C50610) *
                C50824) *
               C2303 +
           (((C8381 + C8382) * C284 -
             ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
             (C8383 + C8384) * C50610) *
                C50903 +
            ((C9122 + C9121) * C284 -
             ((C9119 + C9120) * C278 + (C9117 + C9118) * C283) +
             (C9124 + C9123) * C50610) *
                C50824) *
               C50631) *
              C50663 * C281 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C283 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C278 -
             (C8385 + C8386) * C284 - (C8387 + C8388) * C50610) *
                C50903 +
            ((C8144 * C1576 + C50902 * C1584 + C8145 * C3272 + C50796 * C3275) *
                 C283 +
             (C8144 * C1583 + C50902 * C1588 + C8145 * C3276 + C50796 * C3281) *
                 C278 -
             (C13893 + C13894) * C284 - (C13895 + C13896) * C50610) *
                C50824) *
               C2303 +
           (((C8386 + C8385) * C283 + (C8388 + C8387) * C278 -
             (C8389 + C8390) * C284 - (C8391 + C8392) * C50610) *
                C50903 +
            ((C13894 + C13893) * C283 + (C13896 + C13895) * C278 -
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C284 -
             (C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C49720 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50874 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                C50903 +
            ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
             C14099 * C49713 - C14100 * C50610) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                C50903 +
            (C14101 * C49720 + C14102 * C50874 - C8893 * C49713 -
             C8894 * C50610) *
                C50824) *
               C50631) *
              C50663 * C50934 +
          ((((C8377 + C8378) * C49713 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50874 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C49720) +
             (C8379 + C8380) * C50610) *
                C50903 +
            (C14783 * C49713 -
             ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
             C14792 * C50610) *
                C50824) *
               C2303 +
           (((C8381 + C8382) * C49713 -
             ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
             (C8383 + C8384) * C50610) *
                C50903 +
            ((C9122 + C9121) * C49713 - (C14793 * C50874 + C14794 * C49720) +
             (C9124 + C9123) * C50610) *
                C50824) *
               C50631) *
              C50663 * C50935 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C49720 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50874 -
             (C8385 + C8386) * C49713 - (C8387 + C8388) * C50610) *
                C50903 +
            ((C8144 * C1576 + C50902 * C1584 + C8145 * C3272 + C50796 * C3275) *
                 C49720 +
             (C8144 * C1583 + C50902 * C1588 + C8145 * C3276 + C50796 * C3281) *
                 C50874 -
             (C13893 + C13894) * C49713 - (C13895 + C13896) * C50610) *
                C50824) *
               C2303 +
           (((C8386 + C8385) * C49720 + (C8388 + C8387) * C50874 -
             (C8389 + C8390) * C49713 - (C8391 + C8392) * C50610) *
                C50903 +
            ((C13894 + C13893) * C49720 + (C13896 + C13895) * C50874 -
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C49713 -
             (C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C2303 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50903 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C50890 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C50903) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C50903) *
                C2303) *
               C50727) *
              C50934 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50903 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C2303 +
            ((C14783 * C1109 + C14792 * C50605) * C50903 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50903) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C50903) *
                C2303) *
               C50890) *
              C50935 +
          (((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                  C1109 +
              (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                  C50605) *
                 C50903 +
             ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) *
                 C50824) *
                C2303 +
            (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50903 +
             ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) *
                 C50824) *
                C50631) *
               C50890 -
           ((((C8145 * C3702 + C50796 * C3706 + C8144 * C2708 +
               C50902 * C2712) *
                  C50605 +
              (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 +
               C50902 * C2707) *
                  C1109) *
                 C50824 +
             ((C13895 + C13896) * C50605 + (C13893 + C13894) * C1109) *
                 C50903) *
                C50631 +
            (((C8145 * C3704 + C50796 * C3707 + C8144 * C2706 +
               C50902 * C2711) *
                  C50605 +
              (C8145 * C3701 + C50796 * C3705 + C8144 * C2702 +
               C50902 * C2705) *
                  C1109) *
                 C50824 +
             ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) *
                 C50903) *
                C2303) *
               C50727) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50903 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50824) *
               C2303 +
           (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50903 +
            (C14101 * C1109 + C14102 * C50605) * C50824) *
               C50631) *
              C50663 * C1105 -
          (((C14793 * C50605 + C14794 * C1109) * C50824 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50903) *
               C50631 +
           (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50903) *
               C2303) *
              C50663 * C1106 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C50903 +
            ((C8144 * C1576 + C50902 * C1584 + C8145 * C3272 + C50796 * C3275) *
                 C1109 +
             (C8144 * C1583 + C50902 * C1588 + C8145 * C3276 + C50796 * C3281) *
                 C50605) *
                C50824) *
               C2303 +
           (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50903 +
            ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) * C50824) *
               C50631) *
              C50663 * C1107 -
          ((((C8145 * C4196 + C50796 * C4200 + C8144 * C3278 + C50902 * C3282) *
                 C50605 +
             (C8145 * C4194 + C50796 * C4197 + C8144 * C3273 + C50902 * C3277) *
                 C1109) *
                C50824 +
            ((C8145 * C2514 + C50796 * C2518 + C8144 * C1118 + C50902 * C1124) *
                 C50605 +
             (C8145 * C2509 + C50796 * C2513 + C8144 * C1112 + C50902 * C1119) *
                 C1109) *
                C50903) *
               C50631 +
           (((C8145 * C4198 + C50796 * C4201 + C8144 * C3276 + C50902 * C3281) *
                 C50605 +
             (C8145 * C4195 + C50796 * C4199 + C8144 * C3272 + C50902 * C3275) *
                 C1109) *
                C50824 +
            ((C8145 * C2512 + C50796 * C2517 + C8144 * C1120 + C50902 * C1125) *
                 C50605 +
             (C8145 * C2508 + C50796 * C2511 + C8144 * C1113 + C50902 * C1121) *
                 C1109) *
                C50903) *
               C2303) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1035 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C1030 -
             (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
             C8196 * C1032) *
                C50903 +
            ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
             C14099 * C1036 - C14100 * C1031 + C14523 * C1037 +
             C14524 * C1032) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
             (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
             (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
                C50903 +
            (C14101 * C1035 + C14102 * C1030 - C8893 * C1036 - C8894 * C1031 +
             (C8904 + C8903) * C1037 + (C8906 + C8905) * C1032) *
                C50824) *
               C50631) *
              C50663 * C1033 +
          ((((C8377 + C8378) * C1036 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C1030 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1035) +
             (C8379 + C8380) * C1031 - C8733 * C1037 - C8734 * C1032) *
                C50903 +
            (C14783 * C1036 -
             ((C14803 + C14804) * C1030 + (C14805 + C14806) * C1035) +
             C14792 * C1031 - (C9121 + C9122) * C1037 -
             (C9123 + C9124) * C1032) *
                C50824) *
               C2303 +
           (((C8381 + C8382) * C1036 -
             ((C8380 + C8379) * C1030 + (C8378 + C8377) * C1035) +
             (C8383 + C8384) * C1031 - (C8743 + C8744) * C1037 -
             (C8745 + C8746) * C1032) *
                C50903 +
            ((C9122 + C9121) * C1036 - (C14793 * C1030 + C14794 * C1035) +
             (C9124 + C9123) * C1031 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C1037 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C1032) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C2303 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50903 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C459 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C50903) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C50903) *
                C2303) *
               C460 +
           ((((C14130 + C14129) * C1109 + (C14128 + C14127) * C50605) * C50903 +
             ((C8144 * C1860 + C50902 * C1868 + C8145 * C4595 +
               C50796 * C4603) *
                  C1109 +
              (C8144 * C1867 + C50902 * C1872 + C8145 * C4601 +
               C50796 * C4607) *
                  C50605) *
                 C50824) *
                C2303 +
            ((C14103 * C1109 + C14112 * C50605) * C50903 +
             ((C14132 + C14131) * C1109 + (C14134 + C14133) * C50605) *
                 C50824) *
                C50631) *
               C461) *
              C1033 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50903 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C2303 +
            ((C14783 * C1109 + C14792 * C50605) * C50903 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C460 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50903) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C50903) *
                C2303) *
               C459 -
           ((((C8145 * C4596 + C50796 * C4604 + C8144 * C4597 +
               C50902 * C4605) *
                  C50605 +
              (C8145 * C4592 + C50796 * C4598 + C8144 * C4593 +
               C50902 * C4599) *
                  C1109) *
                 C50824 +
             ((C14809 + C14810) * C50605 + (C14807 + C14808) * C1109) *
                 C50903) *
                C50631 +
            (((C8145 * C4600 + C50796 * C4606 + C8144 * C4601 +
               C50902 * C4607) *
                  C50605 +
              (C8145 * C4594 + C50796 * C4602 + C8144 * C4595 +
               C50902 * C4603) *
                  C1109) *
                 C50824 +
             ((C15340 + C15339) * C50605 + (C15338 + C15337) * C1109) *
                 C50903) *
                C2303) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C49720 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50874 -
              (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                 C50903 +
             ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
              C14099 * C49713 - C14100 * C50610) *
                 C50824) *
                C2303 +
            (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
              (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                 C50903 +
             (C14101 * C49720 + C14102 * C50874 - C8893 * C49713 -
              C8894 * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           (((C14101 * C49713 -
              ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
              C14102 * C50610) *
                 C50903 +
             (C14103 * C49713 -
              ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
              C14112 * C50610) *
                 C50824) *
                C2303 +
            ((C14523 * C49713 - (C14100 * C50874 + C14099 * C49720) +
              C14524 * C50610) *
                 C50903 +
             ((C8584 + C8583) * C49713 - (C14113 * C50874 + C14114 * C49720) +
              (C8586 + C8585) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C1033 +
          (((((C8377 + C8378) * C49713 -
              ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                   C50874 +
               (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                   C49720) +
              (C8379 + C8380) * C50610) *
                 C50903 +
             (C14783 * C49713 -
              ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
              C14792 * C50610) *
                 C50824) *
                C2303 +
            (((C8381 + C8382) * C49713 -
              ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
              (C8383 + C8384) * C50610) *
                 C50903 +
             ((C9122 + C9121) * C49713 - (C14793 * C50874 + C14794 * C49720) +
              (C9124 + C9123) * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           ((((C14806 + C14805) * C49720 + (C14804 + C14803) * C50874 -
              C14794 * C49713 - C14793 * C50610) *
                 C50903 +
             ((C15337 + C15338) * C49720 + (C15339 + C15340) * C50874 -
              (C14807 + C14808) * C49713 - (C14809 + C14810) * C50610) *
                 C50824) *
                C2303 +
            ((C14783 * C49720 + C14792 * C50874 - (C9121 + C9122) * C49713 -
              (C9123 + C9124) * C50610) *
                 C50903 +
             ((C14808 + C14807) * C49720 + (C14810 + C14809) * C50874 -
              (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 +
               C50902 * C1231) *
                  C49713 -
              (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 +
               C50902 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1035 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C1030 -
             (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
             C8196 * C1032) *
                C50903 +
            ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
             C14099 * C1036 - C14100 * C1031 + C14523 * C1037 +
             C14524 * C1032) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
             (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
             (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
                C50903 +
            (C14101 * C1035 + C14102 * C1030 - C8893 * C1036 - C8894 * C1031 +
             (C8904 + C8903) * C1037 + (C8906 + C8905) * C1032) *
                C50824) *
               C50631) *
              C50663 * C1033 +
          ((((C8377 + C8378) * C1036 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C1030 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1035) +
             (C8379 + C8380) * C1031 - C8733 * C1037 - C8734 * C1032) *
                C50903 +
            (C14783 * C1036 -
             ((C14803 + C14804) * C1030 + (C14805 + C14806) * C1035) +
             C14792 * C1031 - (C9121 + C9122) * C1037 -
             (C9123 + C9124) * C1032) *
                C50824) *
               C2303 +
           (((C8381 + C8382) * C1036 -
             ((C8380 + C8379) * C1030 + (C8378 + C8377) * C1035) +
             (C8383 + C8384) * C1031 - (C8743 + C8744) * C1037 -
             (C8745 + C8746) * C1032) *
                C50903 +
            ((C9122 + C9121) * C1036 - (C14793 * C1030 + C14794 * C1035) +
             (C9124 + C9123) * C1031 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C1037 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C1032) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50903 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50824) *
               C2303 +
           (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50903 +
            (C14101 * C1109 + C14102 * C50605) * C50824) *
               C50631) *
              C50663 * C1105 -
          (((C14793 * C50605 + C14794 * C1109) * C50824 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50903) *
               C50631 +
           (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50903) *
               C2303) *
              C50663 * C1106 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C50903 +
            ((C8144 * C1576 + C50902 * C1584 + C8145 * C3272 + C50796 * C3275) *
                 C1109 +
             (C8144 * C1583 + C50902 * C1588 + C8145 * C3276 + C50796 * C3281) *
                 C50605) *
                C50824) *
               C2303 +
           (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50903 +
            ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) * C50824) *
               C50631) *
              C50663 * C1107 -
          ((((C8145 * C4196 + C50796 * C4200 + C8144 * C3278 + C50902 * C3282) *
                 C50605 +
             (C8145 * C4194 + C50796 * C4197 + C8144 * C3273 + C50902 * C3277) *
                 C1109) *
                C50824 +
            ((C8145 * C2514 + C50796 * C2518 + C8144 * C1118 + C50902 * C1124) *
                 C50605 +
             (C8145 * C2509 + C50796 * C2513 + C8144 * C1112 + C50902 * C1119) *
                 C1109) *
                C50903) *
               C50631 +
           (((C8145 * C4198 + C50796 * C4201 + C8144 * C3276 + C50902 * C3281) *
                 C50605 +
             (C8145 * C4195 + C50796 * C4199 + C8144 * C3272 + C50902 * C3275) *
                 C1109) *
                C50824 +
            ((C8145 * C2512 + C50796 * C2517 + C8144 * C1120 + C50902 * C1125) *
                 C50605 +
             (C8145 * C2508 + C50796 * C2511 + C8144 * C1113 + C50902 * C1121) *
                 C1109) *
                C50903) *
               C2303) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C49720 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50874 -
              (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                 C50903 +
             ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
              C14099 * C49713 - C14100 * C50610) *
                 C50824) *
                C2303 +
            (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
              (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                 C50903 +
             (C14101 * C49720 + C14102 * C50874 - C8893 * C49713 -
              C8894 * C50610) *
                 C50824) *
                C50631) *
               C1687 +
           (((C14101 * C49713 -
              ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
              C14102 * C50610) *
                 C50903 +
             (C14103 * C49713 -
              ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
              C14112 * C50610) *
                 C50824) *
                C2303 +
            ((C14523 * C49713 - (C14100 * C50874 + C14099 * C49720) +
              C14524 * C50610) *
                 C50903 +
             ((C8584 + C8583) * C49713 - (C14113 * C50874 + C14114 * C49720) +
              (C8586 + C8585) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50889 +
          (((((C8377 + C8378) * C49713 -
              ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                   C50874 +
               (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                   C49720) +
              (C8379 + C8380) * C50610) *
                 C50903 +
             (C14783 * C49713 -
              ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
              C14792 * C50610) *
                 C50824) *
                C2303 +
            (((C8381 + C8382) * C49713 -
              ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
              (C8383 + C8384) * C50610) *
                 C50903 +
             ((C9122 + C9121) * C49713 - (C14793 * C50874 + C14794 * C49720) +
              (C9124 + C9123) * C50610) *
                 C50824) *
                C50631) *
               C1687 +
           ((((C14806 + C14805) * C49720 + (C14804 + C14803) * C50874 -
              C14794 * C49713 - C14793 * C50610) *
                 C50903 +
             ((C15337 + C15338) * C49720 + (C15339 + C15340) * C50874 -
              (C14807 + C14808) * C49713 - (C14809 + C14810) * C50610) *
                 C50824) *
                C2303 +
            ((C14783 * C49720 + C14792 * C50874 - (C9121 + C9122) * C49713 -
              (C9123 + C9124) * C50610) *
                 C50903 +
             ((C14808 + C14807) * C49720 + (C14810 + C14809) * C50874 -
              (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 +
               C50902 * C1231) *
                  C49713 -
              (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 +
               C50902 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C2303 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50903 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C50936 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C50903) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C50903) *
                C2303) *
               C50937 +
           ((((C14130 + C14129) * C1109 + (C14128 + C14127) * C50605) * C50903 +
             ((C16525 + C16526) * C1109 + (C16527 + C16528) * C50605) *
                 C50824) *
                C2303 +
            ((C14103 * C1109 + C14112 * C50605) * C50903 +
             ((C14132 + C14131) * C1109 + (C14134 + C14133) * C50605) *
                 C50824) *
                C50631) *
               C2103) *
              C50889 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50903 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C2303 +
            ((C14783 * C1109 + C14792 * C50605) * C50903 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C50937 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50903) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C50903) *
                C2303) *
               C50936 -
           ((((C8145 * C4596 + C50796 * C4604 + C8144 * C4597 +
               C50902 * C4605) *
                  C50605 +
              (C8145 * C4592 + C50796 * C4598 + C8144 * C4593 +
               C50902 * C4599) *
                  C1109) *
                 C50824 +
             ((C14809 + C14810) * C50605 + (C14807 + C14808) * C1109) *
                 C50903) *
                C50631 +
            (((C8145 * C4600 + C50796 * C4606 + C8144 * C4601 +
               C50902 * C4607) *
                  C50605 +
              (C8145 * C4594 + C50796 * C4602 + C8144 * C4595 +
               C50902 * C4603) *
                  C1109) *
                 C50824 +
             ((C15340 + C15339) * C50605 + (C15338 + C15337) * C1109) *
                 C50903) *
                C2303) *
               C2103) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C2303 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50903 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C1687 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C50903) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C50903) *
                C2303) *
               C50727) *
              C280 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50903 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C2303 +
            ((C14783 * C1109 + C14792 * C50605) * C50903 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50903) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C50903) *
                C2303) *
               C1687) *
              C281 +
          (((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                  C1109 +
              (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                  C50605) *
                 C50903 +
             ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) *
                 C50824) *
                C2303 +
            (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50903 +
             ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) *
                 C50824) *
                C50631) *
               C1687 -
           ((((C8145 * C3702 + C50796 * C3706 + C8144 * C2708 +
               C50902 * C2712) *
                  C50605 +
              (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 +
               C50902 * C2707) *
                  C1109) *
                 C50824 +
             ((C13895 + C13896) * C50605 + (C13893 + C13894) * C1109) *
                 C50903) *
                C50631 +
            (((C8145 * C3704 + C50796 * C3707 + C8144 * C2706 +
               C50902 * C2711) *
                  C50605 +
              (C8145 * C3701 + C50796 * C3705 + C8144 * C2702 +
               C50902 * C2705) *
                  C1109) *
                 C50824 +
             ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) *
                 C50903) *
                C2303) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1035 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C1030 -
             (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
             C8196 * C1032) *
                C50903 +
            ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
             C14099 * C1036 - C14100 * C1031 + C14523 * C1037 +
             C14524 * C1032) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
             (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
             (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
                C50903 +
            (C14101 * C1035 + C14102 * C1030 - C8893 * C1036 - C8894 * C1031 +
             (C8904 + C8903) * C1037 + (C8906 + C8905) * C1032) *
                C50824) *
               C50631) *
              C1687 +
          (((C14101 * C1036 -
             ((C14126 + C14125) * C1030 + (C14124 + C14123) * C1035) +
             C14102 * C1031 - C8893 * C1037 - C8894 * C1032) *
                C50903 +
            (C14103 * C1036 -
             ((C14127 + C14128) * C1030 + (C14129 + C14130) * C1035) +
             C14112 * C1031 - (C8583 + C8584) * C1037 -
             (C8585 + C8586) * C1032) *
                C50824) *
               C2303 +
           ((C14523 * C1036 - (C14100 * C1030 + C14099 * C1035) +
             C14524 * C1031 - (C8903 + C8904) * C1037 -
             (C8905 + C8906) * C1032) *
                C50903 +
            ((C8584 + C8583) * C1036 - (C14113 * C1030 + C14114 * C1035) +
             (C8586 + C8585) * C1031 -
             (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
                 C1037 -
             (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
                 C1032) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50903 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50824) *
               C2303 +
           (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50903 +
            (C14101 * C1109 + C14102 * C50605) * C50824) *
               C50631) *
              C1853 -
          (((C14113 * C50605 + C14114 * C1109) * C50824 +
            (C14100 * C50605 + C14099 * C1109) * C50903) *
               C50631 +
           (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
            ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) * C50903) *
               C2303) *
              C1854 +
          ((((C14130 + C14129) * C1109 + (C14128 + C14127) * C50605) * C50903 +
            ((C16525 + C16526) * C1109 + (C16527 + C16528) * C50605) * C50824) *
               C2303 +
           ((C14103 * C1109 + C14112 * C50605) * C50903 +
            ((C14132 + C14131) * C1109 + (C14134 + C14133) * C50605) * C50824) *
               C50631) *
              C1855 -
          ((((C8145 * C6529 + C50796 * C6533 + C8144 * C5511 + C50902 * C5515) *
                 C50605 +
             (C8145 * C6527 + C50796 * C6530 + C8144 * C5506 + C50902 * C5510) *
                 C1109) *
                C50824 +
            ((C14133 + C14134) * C50605 + (C14131 + C14132) * C1109) * C50903) *
               C50631 +
           (((C8145 * C6531 + C50796 * C6534 + C8144 * C5509 + C50902 * C5514) *
                 C50605 +
             (C8145 * C6528 + C50796 * C6532 + C8144 * C5505 + C50902 * C5508) *
                 C1109) *
                C50824 +
            ((C16528 + C16527) * C50605 + (C16526 + C16525) * C1109) * C50903) *
               C2303) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C49720 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50874 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                C50903 +
            ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
             C14099 * C49713 - C14100 * C50610) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                C50903 +
            (C14101 * C49720 + C14102 * C50874 - C8893 * C49713 -
             C8894 * C50610) *
                C50824) *
               C50631) *
              C50936 +
          (((C14101 * C49713 -
             ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
             C14102 * C50610) *
                C50903 +
            (C14103 * C49713 -
             ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
             C14112 * C50610) *
                C50824) *
               C2303 +
           ((C14523 * C49713 - (C14100 * C50874 + C14099 * C49720) +
             C14524 * C50610) *
                C50903 +
            ((C8584 + C8583) * C49713 - (C14113 * C50874 + C14114 * C49720) +
             (C8586 + C8585) * C50610) *
                C50824) *
               C50631) *
              C50937 +
          ((((C14130 + C14129) * C49720 + (C14128 + C14127) * C50874 -
             C14114 * C49713 - C14113 * C50610) *
                C50903 +
            ((C16525 + C16526) * C49720 + (C16527 + C16528) * C50874 -
             (C14131 + C14132) * C49713 - (C14133 + C14134) * C50610) *
                C50824) *
               C2303 +
           ((C14103 * C49720 + C14112 * C50874 - (C8583 + C8584) * C49713 -
             (C8585 + C8586) * C50610) *
                C50903 +
            ((C14132 + C14131) * C49720 + (C14134 + C14133) * C50874 -
             (C8145 * C6099 + C50796 * C6100 + C8144 * C1858 + C50902 * C1864) *
                 C49713 -
             (C8145 * C6101 + C50796 * C6102 + C8144 * C1863 + C50902 * C1870) *
                 C50610) *
                C50824) *
               C50631) *
              C2103) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1035 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C1030 -
             (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
             C8196 * C1032) *
                C50903 +
            ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
             C14099 * C1036 - C14100 * C1031 + C14523 * C1037 +
             C14524 * C1032) *
                C50824) *
               C2303 +
           (((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
             (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
             (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
                C50903 +
            (C14101 * C1035 + C14102 * C1030 - C8893 * C1036 - C8894 * C1031 +
             (C8904 + C8903) * C1037 + (C8906 + C8905) * C1032) *
                C50824) *
               C50631) *
              C1687 +
          (((C14101 * C1036 -
             ((C14126 + C14125) * C1030 + (C14124 + C14123) * C1035) +
             C14102 * C1031 - C8893 * C1037 - C8894 * C1032) *
                C50903 +
            (C14103 * C1036 -
             ((C14127 + C14128) * C1030 + (C14129 + C14130) * C1035) +
             C14112 * C1031 - (C8583 + C8584) * C1037 -
             (C8585 + C8586) * C1032) *
                C50824) *
               C2303 +
           ((C14523 * C1036 - (C14100 * C1030 + C14099 * C1035) +
             C14524 * C1031 - (C8903 + C8904) * C1037 -
             (C8905 + C8906) * C1032) *
                C50903 +
            ((C8584 + C8583) * C1036 - (C14113 * C1030 + C14114 * C1035) +
             (C8586 + C8585) * C1031 -
             (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
                 C1037 -
             (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
                 C1032) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C2303 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C50903 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C1687 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C50903) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C50903) *
                C2303) *
               C50727) *
              C280 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50903 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C2303 +
            ((C14783 * C1109 + C14792 * C50605) * C50903 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C50903) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C50903) *
                C2303) *
               C1687) *
              C281 +
          (((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                  C1109 +
              (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                  C50605) *
                 C50903 +
             ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) *
                 C50824) *
                C2303 +
            (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C50903 +
             ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) *
                 C50824) *
                C50631) *
               C1687 -
           ((((C8145 * C3702 + C50796 * C3706 + C8144 * C2708 +
               C50902 * C2712) *
                  C50605 +
              (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 +
               C50902 * C2707) *
                  C1109) *
                 C50824 +
             ((C13895 + C13896) * C50605 + (C13893 + C13894) * C1109) *
                 C50903) *
                C50631 +
            (((C8145 * C3704 + C50796 * C3707 + C8144 * C2706 +
               C50902 * C2711) *
                  C50605 +
              (C8145 * C3701 + C50796 * C3705 + C8144 * C2702 +
               C50902 * C2705) *
                  C1109) *
                 C50824 +
             ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) *
                 C50903) *
                C2303) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C641 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50930 -
            (C2345 + C2346 + C2347) * C642 - (C2348 + C2349 + C2350) * C50931 +
            (C2351 + C2352 + C2353) * C643 + (C2354 + C2355 + C2356) * C638) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C641 + (C2350 + C2349 + C2348) * C50930 -
            (C2353 + C2352 + C2351) * C642 - (C2356 + C2355 + C2354) * C50931 +
            (C2359 + C2358 + C2357) * C643 + (C2362 + C2361 + C2360) * C638) *
               C50760 * C50631) *
              C50663 * C50889 +
          (((C2545 + C2546 + C2547) * C642 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50930 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C641) +
            (C2548 + C2549 + C2550) * C50931 - (C2909 + C2910 + C2911) * C643 -
            (C2912 + C2913 + C2914) * C638) *
               C50760 * C2303 +
           ((C2911 + C2910 + C2909) * C642 -
            ((C2550 + C2549 + C2548) * C50930 +
             (C2547 + C2546 + C2545) * C641) +
            (C2914 + C2913 + C2912) * C50931 -
            (C2307 * C1110 + C2302 * C1115 + C2306 * C293 + C2301 * C311 +
             C2305 * C288 + C2300 * C301) *
                C643 -
            (C2307 * C1114 + C2302 * C1122 + C2306 * C312 + C2301 * C323 +
             C2305 * C302 + C2300 * C318) *
                C638) *
               C50760 * C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C641 +
            (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
            C172 * C50931 + C173 * C643 + C174 * C638) *
               C50760 * C111 +
           (C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
            C175 * C643 + C176 * C638) *
               C50760 * C112 +
           (C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
            C177 * C643 + C178 * C638) *
               C50760 * C113 +
           (C175 * C641 + C176 * C50930 - C177 * C642 - C178 * C50931 +
            C179 * C643 + C180 * C638) *
               C50760 * C114) *
              C50663 * C50889 +
          ((C350 * C642 -
            ((C117 * C296 + C50744 * C315) * C50930 +
             (C117 * C286 + C50744 * C297) * C641) +
            C351 * C50931 - C352 * C643 - C353 * C638) *
               C50760 * C111 +
           (C352 * C642 - (C351 * C50930 + C350 * C641) + C353 * C50931 -
            C354 * C643 - C355 * C638) *
               C50760 * C112 +
           (C354 * C642 - (C353 * C50930 + C352 * C641) + C355 * C50931 -
            C653 * C643 - C654 * C638) *
               C50760 * C113 +
           (C653 * C642 - (C355 * C50930 + C354 * C641) + C654 * C50931 -
            (C117 * C644 + C50744 * C645) * C643 -
            (C117 * C646 + C50744 * C647) * C638) *
               C50760 * C114) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C641 +
             (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
             C172 * C50931 + C173 * C643 + C174 * C638) *
                C5192 +
            (C5554 * C641 + C5555 * C50930 - C527 * C642 - C528 * C50931 +
             C529 * C643 + C530 * C638) *
                C5193 +
            (C5556 * C641 + C5557 * C50930 - C533 * C642 - C534 * C50931 +
             C535 * C643 + C536 * C638) *
                C5194) *
               C2303 +
           ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
             C175 * C643 + C176 * C638) *
                C5192 +
            (C527 * C641 + C528 * C50930 - C529 * C642 - C530 * C50931 +
             C531 * C643 + C532 * C638) *
                C5193 +
            (C533 * C641 + C534 * C50930 - C535 * C642 - C536 * C50931 +
             C537 * C643 + C538 * C638) *
                C5194) *
               C50631) *
              C50663 * C50889 +
          (((C350 * C642 -
             ((C117 * C296 + C50744 * C315) * C50930 +
              (C117 * C286 + C50744 * C297) * C641) +
             C351 * C50931 - C352 * C643 - C353 * C638) *
                C5192 +
            (C927 * C642 -
             ((C117 * C900 + C50744 * C909) * C50930 +
              (C117 * C894 + C50744 * C899) * C641) +
             C928 * C50931 - C929 * C643 - C930 * C638) *
                C5193 +
            (C5354 * C642 -
             ((C117 * C1234 + C50744 * C1239) * C50930 +
              (C117 * C1227 + C50744 * C1235) * C641) +
             C5355 * C50931 - C5734 * C643 - C5735 * C638) *
                C5194) *
               C2303 +
           ((C352 * C642 - (C351 * C50930 + C350 * C641) + C353 * C50931 -
             C354 * C643 - C355 * C638) *
                C5192 +
            (C929 * C642 - (C928 * C50930 + C927 * C641) + C930 * C50931 -
             C931 * C643 - C932 * C638) *
                C5193 +
            (C5734 * C642 - (C5355 * C50930 + C5354 * C641) + C5735 * C50931 -
             (C117 * C1224 + C50744 * C1229) * C643 -
             (C117 * C1228 + C50744 * C1236) * C638) *
                C5194) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C283 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C278 -
             (C2345 + C2346 + C2347) * C284 -
             (C2348 + C2349 + C2350) * C50610) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
             (C2353 + C2352 + C2351) * C284 -
             (C2356 + C2355 + C2354) * C50610) *
                C50760 * C50631) *
               C50890 +
           (((C2739 + C2740 + C2741) * C284 -
             ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
               C2305 * C473 + C2300 * C492) *
                  C278 +
              (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
               C2305 * C463 + C2300 * C474) *
                  C283) +
             (C2742 + C2743 + C2744) * C50610) *
                C50760 * C2303 +
            ((C3075 + C3074 + C3073) * C284 -
             ((C2744 + C2743 + C2742) * C278 + (C2741 + C2740 + C2739) * C283) +
             (C3078 + C3077 + C3076) * C50610) *
                C50760 * C50631) *
               C50727) *
              C50889 +
          ((((C2545 + C2546 + C2547) * C284 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C278 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C283) +
             (C2548 + C2549 + C2550) * C50610) *
                C50760 * C2303 +
            ((C2911 + C2910 + C2909) * C284 -
             ((C2550 + C2549 + C2548) * C278 + (C2547 + C2546 + C2545) * C283) +
             (C2914 + C2913 + C2912) * C50610) *
                C50760 * C50631) *
               C50890 +
           (((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C283 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C278 -
             (C3297 + C3298 + C3299) * C284 -
             (C3300 + C3301 + C3302) * C50610) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C283 + (C3302 + C3301 + C3300) * C278 -
             (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
              C2305 * C896 + C2300 * C903) *
                 C284 -
             (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
              C2305 * C904 + C2300 * C911) *
                 C50610) *
                C50760 * C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C50760 * C111 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50760 *
                C112 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50760 *
                C113 +
            (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50610) * C50760 *
                C114) *
               C50890 +
           ((C527 * C284 -
             ((C117 * C473 + C50744 * C492) * C278 +
              (C117 * C463 + C50744 * C474) * C283) +
             C528 * C50610) *
                C50760 * C111 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50610) *
                C50760 * C112 +
            (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50610) *
                C50760 * C113 +
            (C763 * C284 - (C532 * C278 + C531 * C283) + C764 * C50610) *
                C50760 * C114) *
               C50727) *
              C50889 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C50760 * C111 +
            (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C50760 * C112 +
            (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                C50760 * C113 +
            (C653 * C284 - (C355 * C278 + C354 * C283) + C654 * C50610) *
                C50760 * C114) *
               C50890 +
           (((C117 * C894 + C50744 * C899) * C283 +
             (C117 * C900 + C50744 * C909) * C278 - C927 * C284 -
             C928 * C50610) *
                C50760 * C111 +
            (C927 * C283 + C928 * C278 - C929 * C284 - C930 * C50610) * C50760 *
                C112 +
            (C929 * C283 + C930 * C278 - C931 * C284 - C932 * C50610) * C50760 *
                C113 +
            (C931 * C283 + C932 * C278 - (C117 * C898 + C50744 * C907) * C284 -
             (C117 * C908 + C50744 * C913) * C50610) *
                C50760 * C114) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C283 +
              (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
              C172 * C50610) *
                 C5192 +
             (C5567 + C5568 - C5522 - C5523) * C5193 + C5583 * C5194) *
                C2303 +
            ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C5192 +
             (C5530 + C5531 - C5532 - C5533) * C5193 + C5581 * C5194) *
                C50631) *
               C50890 +
           (((C5522 - (C5568 + C5567) + C5523) * C5192 +
             (C5528 - (C5570 + C5569) + C5529) * C5193 +
             (C5572 - (C5573 + C5574) + C5575) * C5194) *
                C2303 +
            ((C5532 - (C5531 + C5530) + C5533) * C5192 +
             (C5536 - (C5535 + C5534) + C5537) * C5193 +
             (C5576 - (C5577 + C5578) + C5579) * C5194) *
                C50631) *
               C50727) *
              C50889 +
          ((((C350 * C284 -
              ((C117 * C296 + C50744 * C315) * C278 +
               (C117 * C286 + C50744 * C297) * C283) +
              C351 * C50610) *
                 C5192 +
             (C6104 - (C6134 + C6135) + C6109) * C5193 +
             (C6110 - (C6136 + C6137) + C6115) * C5194) *
                C2303 +
            ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                 C5192 +
             (C6116 - (C6117 + C6118) + C6119) * C5193 +
             (C6120 - (C6121 + C6122) + C6123) * C5194) *
                C50631) *
               C50890 +
           (((C6135 + C6134 - C6104 - C6109) * C5192 +
             (C6137 + C6136 - C6110 - C6115) * C5193 +
             ((C117 * C4595 + C50744 * C4603) * C283 +
              (C117 * C4601 + C50744 * C4607) * C278 - C6132 * C284 -
              C6133 * C50610) *
                 C5194) *
                C2303 +
            ((C6118 + C6117 - C6116 - C6119) * C5192 +
             (C6122 + C6121 - C6120 - C6123) * C5193 +
             (C6132 * C283 + C6133 * C278 -
              (C117 * C6099 + C50744 * C6100) * C284 -
              (C117 * C6101 + C50744 * C6102) * C50610) *
                 C5194) *
                C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C50744 * C129) * C118 +
               (C117 * C130 + C50744 * C143) * C106 - C171 * C119 -
               C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
               C176 * C109) *
                  C50760 * C111 +
              (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
               C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                  C50760 * C112 +
              (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
               C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                  C50760 * C113 +
              (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 +
               C179 * C120 + C180 * C108 -
               (C117 * C128 + C50744 * C141) * C121 -
               (C117 * C142 + C50744 * C149) * C109) *
                  C50760 * C114) *
             C50663 * C50651 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50744 * C129) * C283 +
                (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
                C172 * C50610) *
                   C50760 * C111 +
               (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) *
                   C50760 * C112 +
               (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) *
                   C50760 * C113 +
               (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50610) *
                   C50760 * C114) *
                  C50663 * C280 +
              ((C350 * C284 -
                ((C117 * C296 + C50744 * C315) * C278 +
                 (C117 * C286 + C50744 * C297) * C283) +
                C351 * C50610) *
                   C50760 * C111 +
               (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                   C50760 * C112 +
               (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                   C50760 * C113 +
               ((C117 * C289 + C50744 * C303) * C284 -
                (C355 * C278 + C354 * C283) +
                (C117 * C304 + C50744 * C319) * C50610) *
                   C50760 * C114) *
                  C50663 * C281 +
              (((C117 * C290 + C50744 * C305) * C283 +
                (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
                C357 * C50610) *
                   C50760 * C111 +
               (C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) *
                   C50760 * C112 +
               (C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) *
                   C50760 * C113 +
               (C360 * C283 + C361 * C278 -
                (C117 * C294 + C50744 * C313) * C284 -
                (C117 * C314 + C50744 * C324) * C50610) *
                   C50760 * C114) *
                  C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C283 +
            (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50760 *
               C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50760 *
               C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50610) * C50760 *
               C114) *
              C459 +
          ((C527 * C284 -
            ((C117 * C473 + C50744 * C492) * C278 +
             (C117 * C463 + C50744 * C474) * C283) +
            C528 * C50610) *
               C50760 * C111 +
           (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50610) *
               C50760 * C112 +
           (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50610) *
               C50760 * C113 +
           ((C117 * C466 + C50744 * C480) * C284 - (C532 * C278 + C531 * C283) +
            (C117 * C481 + C50744 * C496) * C50610) *
               C50760 * C114) *
              C460 +
          (((C117 * C467 + C50744 * C482) * C283 +
            (C117 * C483 + C50744 * C497) * C278 - C533 * C284 -
            C534 * C50610) *
               C50760 * C111 +
           (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50610) * C50760 *
               C112 +
           (C535 * C283 + C536 * C278 - C537 * C284 - C538 * C50610) * C50760 *
               C113 +
           (C537 * C283 + C538 * C278 - (C117 * C471 + C50744 * C490) * C284 -
            (C117 * C491 + C50744 * C501) * C50610) *
               C50760 * C114) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
            C2307 * C290 + C2302 * C305) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
            C2307 * C306 + C2302 * C320) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C50760 * C2303 +
          ((C2347 + C2346 + C2345) * C118 + (C2350 + C2349 + C2348) * C106 -
           (C2353 + C2352 + C2351) * C119 - (C2356 + C2355 + C2354) * C107 +
           (C2359 + C2358 + C2357) * C120 + (C2362 + C2361 + C2360) * C108 -
           (C2307 * C294 + C2302 * C313 + C2306 * C289 + C2301 * C303 +
            C2305 * C126 + C2300 * C137) *
               C121 -
           (C2307 * C314 + C2302 * C324 + C2306 * C304 + C2301 * C319 +
            C2305 * C138 + C2300 * C147) *
               C109) *
              C50760 * C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C50663 * C280 +
          (((C2545 + C2546 + C2547) * C284 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C278 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C283) +
            (C2548 + C2549 + C2550) * C50610) *
               C50760 * C2303 +
           ((C2305 * C287 + C2300 * C299 + C2306 * C292 + C2301 * C309 +
             C2307 * C1111 + C2302 * C1117) *
                C284 -
            ((C2550 + C2549 + C2548) * C278 + (C2547 + C2546 + C2545) * C283) +
            (C2305 * C300 + C2300 * C317 + C2306 * C310 + C2301 * C322 +
             C2307 * C1116 + C2302 * C1123) *
                C50610) *
               C50760 * C50631) *
              C50663 * C281 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C283 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C278 -
            (C2551 + C2552 + C2553) * C284 - (C2554 + C2555 + C2556) * C50610) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C283 + (C2556 + C2555 + C2554) * C278 -
            (C2307 * C2510 + C2302 * C2515 + C2306 * C1111 + C2301 * C1117 +
             C2305 * C292 + C2300 * C309) *
                C284 -
            (C2307 * C2516 + C2302 * C2519 + C2306 * C1116 + C2301 * C1123 +
             C2305 * C310 + C2300 * C322) *
                C50610) *
               C50760 * C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C459 +
          (((C2739 + C2740 + C2741) * C284 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C278 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C283) +
            (C2742 + C2743 + C2744) * C50610) *
               C50760 * C2303 +
           ((C2305 * C464 + C2300 * C476 + C2306 * C896 + C2301 * C903 +
             C2307 * C1574 + C2302 * C1580) *
                C284 -
            ((C2744 + C2743 + C2742) * C278 + (C2741 + C2740 + C2739) * C283) +
            (C2305 * C477 + C2300 * C494 + C2306 * C904 + C2301 * C911 +
             C2307 * C1579 + C2302 * C1586) *
                C50610) *
               C50760 * C50631) *
              C460 +
          (((C2305 * C467 + C2300 * C482 + C2306 * C1227 + C2301 * C1235 +
             C2307 * C2702 + C2302 * C2705) *
                C283 +
            (C2305 * C483 + C2300 * C497 + C2306 * C1234 + C2301 * C1239 +
             C2307 * C2706 + C2302 * C2711) *
                C278 -
            (C2745 + C2746 + C2747) * C284 - (C2748 + C2749 + C2750) * C50610) *
               C50760 * C2303 +
           ((C2747 + C2746 + C2745) * C283 + (C2750 + C2749 + C2748) * C278 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C284 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C50610) *
               C50760 * C50631) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C5192 +
           ((C117 * C463 + C50744 * C474) * C118 +
            (C117 * C473 + C50744 * C492) * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C5193 +
           ((C117 * C467 + C50744 * C482) * C118 +
            (C117 * C483 + C50744 * C497) * C106 - C533 * C119 - C534 * C107 +
            C535 * C120 + C536 * C108 - C537 * C121 - C538 * C109) *
               C5194) *
              C2303 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C5192 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C5193 +
           (C533 * C118 + C534 * C106 - C535 * C119 - C536 * C107 +
            C537 * C120 + C538 * C108 - (C117 * C471 + C50744 * C490) * C121 -
            (C117 * C491 + C50744 * C501) * C109) *
               C5194) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C5192 +
            ((C117 * C463 + C50744 * C474) * C283 +
             (C117 * C473 + C50744 * C492) * C278 - C527 * C284 -
             C528 * C50610) *
                C5193 +
            ((C117 * C467 + C50744 * C482) * C283 +
             (C117 * C483 + C50744 * C497) * C278 - C533 * C284 -
             C534 * C50610) *
                C5194) *
               C2303 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C5192 +
            (C527 * C283 + C528 * C278 - C529 * C284 - C530 * C50610) * C5193 +
            (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50610) * C5194) *
               C50631) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C5192 +
            (C927 * C284 -
             ((C117 * C900 + C50744 * C909) * C278 +
              (C117 * C894 + C50744 * C899) * C283) +
             C928 * C50610) *
                C5193 +
            (C5354 * C284 -
             ((C117 * C1234 + C50744 * C1239) * C278 +
              (C117 * C1227 + C50744 * C1235) * C283) +
             C5355 * C50610) *
                C5194) *
               C2303 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C5192 +
            (C929 * C284 - (C928 * C278 + C927 * C283) + C930 * C50610) *
                C5193 +
            ((C117 * C1225 + C50744 * C1231) * C284 -
             (C5355 * C278 + C5354 * C283) +
             (C117 * C1230 + C50744 * C1237) * C50610) *
                C5194) *
               C50631) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C5192 +
            ((C117 * C1576 + C50744 * C1584) * C283 +
             (C117 * C1583 + C50744 * C1588) * C278 - C5356 * C284 -
             C5357 * C50610) *
                C5193 +
            ((C117 * C2702 + C50744 * C2705) * C283 +
             (C117 * C2706 + C50744 * C2711) * C278 - C5358 * C284 -
             C5359 * C50610) *
                C5194) *
               C2303 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C5192 +
            (C5356 * C283 + C5357 * C278 -
             (C117 * C1574 + C50744 * C1580) * C284 -
             (C117 * C1579 + C50744 * C1586) * C50610) *
                C5193 +
            (C5358 * C283 + C5359 * C278 -
             (C117 * C2704 + C50744 * C2709) * C284 -
             (C117 * C2710 + C50744 * C2713) * C50610) *
                C5194) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C5192 +
            (C5567 + C5568 - C5522 - C5523) * C5193 + C5583 * C5194) *
               C2303 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C5192 +
            (C5530 + C5531 - C5532 - C5533) * C5193 + C5581 * C5194) *
               C50631) *
              C459 +
          (((C5522 - (C5568 + C5567) + C5523) * C5192 +
            (C5528 - (C5570 + C5569) + C5529) * C5193 +
            (C5572 - (C5573 + C5574) + C5575) * C5194) *
               C2303 +
           ((C5532 - (C5531 + C5530) + C5533) * C5192 +
            (C5536 - (C5535 + C5534) + C5537) * C5193 +
            (C5576 - (C5577 + C5578) + C5579) * C5194) *
               C50631) *
              C460 +
          ((C5583 * C5192 + (C5574 + C5573 - C5572 - C5575) * C5193 +
            ((C117 * C5505 + C50744 * C5508) * C283 +
             (C117 * C5509 + C50744 * C5514) * C278 - C5565 * C284 -
             C5566 * C50610) *
                C5194) *
               C2303 +
           (C5581 * C5192 + (C5578 + C5577 - C5576 - C5579) * C5193 +
            (C5565 * C283 + C5566 * C278 -
             (C117 * C5507 + C50744 * C5512) * C284 -
             (C117 * C5513 + C50744 * C5516) * C50610) *
                C5194) *
               C50631) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C641 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50930 -
            (C2345 + C2346 + C2347) * C642 - (C2348 + C2349 + C2350) * C50931 +
            (C2351 + C2352 + C2353) * C643 + (C2354 + C2355 + C2356) * C638) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C641 + (C2350 + C2349 + C2348) * C50930 -
            (C2353 + C2352 + C2351) * C642 - (C2356 + C2355 + C2354) * C50931 +
            (C2359 + C2358 + C2357) * C643 + (C2362 + C2361 + C2360) * C638) *
               C50760 * C50631) *
              C50890 +
          (((C2739 + C2740 + C2741) * C642 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50930 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C641) +
            (C2742 + C2743 + C2744) * C50931 - (C3073 + C3074 + C3075) * C643 -
            (C3076 + C3077 + C3078) * C638) *
               C50760 * C2303 +
           ((C3075 + C3074 + C3073) * C642 -
            ((C2744 + C2743 + C2742) * C50930 +
             (C2741 + C2740 + C2739) * C641) +
            (C3078 + C3077 + C3076) * C50931 -
            (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
             C2305 * C465 + C2300 * C478) *
                C643 -
            (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
             C2305 * C479 + C2300 * C495) *
                C638) *
               C50760 * C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C641 +
            (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
            C172 * C50931 + C173 * C643 + C174 * C638) *
               C50760 * C111 +
           (C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
            C175 * C643 + C176 * C638) *
               C50760 * C112 +
           (C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
            C177 * C643 + C178 * C638) *
               C50760 * C113 +
           (C175 * C641 + C176 * C50930 - C177 * C642 - C178 * C50931 +
            C179 * C643 + C180 * C638) *
               C50760 * C114) *
              C50890 +
          ((C527 * C642 -
            ((C117 * C473 + C50744 * C492) * C50930 +
             (C117 * C463 + C50744 * C474) * C641) +
            C528 * C50931 - C529 * C643 - C530 * C638) *
               C50760 * C111 +
           (C529 * C642 - (C528 * C50930 + C527 * C641) + C530 * C50931 -
            C531 * C643 - C532 * C638) *
               C50760 * C112 +
           (C531 * C642 - (C530 * C50930 + C529 * C641) + C532 * C50931 -
            C763 * C643 - C764 * C638) *
               C50760 * C113 +
           (C763 * C642 - (C532 * C50930 + C531 * C641) + C764 * C50931 -
            (C117 * C754 + C50744 * C755) * C643 -
            (C117 * C756 + C50744 * C757) * C638) *
               C50760 * C114) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C641 +
             (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
             C172 * C50931 + C173 * C643 + C174 * C638) *
                C5192 +
            (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C5193 +
            (C5888 + C5889 - C5890 - C5891 + C5892 + C5893) * C5194) *
               C2303 +
           ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
             C175 * C643 + C176 * C638) *
                C5192 +
            (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C5193 +
            (C5900 + C5901 - C5902 - C5903 + C5904 + C5905) * C5194) *
               C50631) *
              C50890 +
          (((C5884 - (C5883 + C5882) + C5885 - C5886 - C5887) * C5192 +
            (C5890 - (C5889 + C5888) + C5891 - C5892 - C5893) * C5193 +
            (C5559 * C642 - (C5560 * C50930 + C5561 * C641) + C5562 * C50931 -
             C5563 * C643 - C5564 * C638) *
                C5194) *
               C2303 +
           ((C5896 - (C5895 + C5894) + C5897 - C5898 - C5899) * C5192 +
            (C5902 - (C5901 + C5900) + C5903 - C5904 - C5905) * C5193 +
            (C5563 * C642 - (C5562 * C50930 + C5559 * C641) + C5564 * C50931 -
             (C117 * C1857 + C50744 * C1862) * C643 -
             (C117 * C1861 + C50744 * C1869) * C638) *
                C5194) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C283 +
            (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50760 *
               C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50760 *
               C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50610) * C50760 *
               C114) *
              C50663 * C280 +
          ((C350 * C284 -
            ((C117 * C296 + C50744 * C315) * C278 +
             (C117 * C286 + C50744 * C297) * C283) +
            C351 * C50610) *
               C50760 * C111 +
           (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
               C50760 * C112 +
           (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
               C50760 * C113 +
           ((C117 * C289 + C50744 * C303) * C284 - (C355 * C278 + C354 * C283) +
            (C117 * C304 + C50744 * C319) * C50610) *
               C50760 * C114) *
              C50663 * C281 +
          (((C117 * C290 + C50744 * C305) * C283 +
            (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
            C357 * C50610) *
               C50760 * C111 +
           (C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C50760 *
               C112 +
           (C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) * C50760 *
               C113 +
           (C360 * C283 + C361 * C278 - (C117 * C294 + C50744 * C313) * C284 -
            (C117 * C314 + C50744 * C324) * C50610) *
               C50760 * C114) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50744 * C129) * C118 +
           (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50760 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50760 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50760 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50744 * C141) * C121 -
           (C117 * C142 + C50744 * C149) * C109) *
              C50760 * C114) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
            C2307 * C290 + C2302 * C305) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
            C2307 * C306 + C2302 * C320) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C50760 * C2303 +
          ((C2347 + C2346 + C2345) * C118 + (C2350 + C2349 + C2348) * C106 -
           (C2353 + C2352 + C2351) * C119 - (C2356 + C2355 + C2354) * C107 +
           (C2359 + C2358 + C2357) * C120 + (C2362 + C2361 + C2360) * C108 -
           (C2307 * C294 + C2302 * C313 + C2306 * C289 + C2301 * C303 +
            C2305 * C126 + C2300 * C137) *
               C121 -
           (C2307 * C314 + C2302 * C324 + C2306 * C304 + C2301 * C319 +
            C2305 * C138 + C2300 * C147) *
               C109) *
              C50760 * C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C50663 * C280 +
          (((C2545 + C2546 + C2547) * C284 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C278 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C283) +
            (C2548 + C2549 + C2550) * C50610) *
               C50760 * C2303 +
           ((C2305 * C287 + C2300 * C299 + C2306 * C292 + C2301 * C309 +
             C2307 * C1111 + C2302 * C1117) *
                C284 -
            ((C2550 + C2549 + C2548) * C278 + (C2547 + C2546 + C2545) * C283) +
            (C2305 * C300 + C2300 * C317 + C2306 * C310 + C2301 * C322 +
             C2307 * C1116 + C2302 * C1123) *
                C50610) *
               C50760 * C50631) *
              C50663 * C281 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C283 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C278 -
            (C2551 + C2552 + C2553) * C284 - (C2554 + C2555 + C2556) * C50610) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C283 + (C2556 + C2555 + C2554) * C278 -
            (C2307 * C2510 + C2302 * C2515 + C2306 * C1111 + C2301 * C1117 +
             C2305 * C292 + C2300 * C309) *
                C284 -
            (C2307 * C2516 + C2302 * C2519 + C2306 * C1116 + C2301 * C1123 +
             C2305 * C310 + C2300 * C322) *
                C50610) *
               C50760 * C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C5192 +
           ((C117 * C463 + C50744 * C474) * C118 +
            (C117 * C473 + C50744 * C492) * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C5193 +
           ((C117 * C467 + C50744 * C482) * C118 +
            (C117 * C483 + C50744 * C497) * C106 - C533 * C119 - C534 * C107 +
            C535 * C120 + C536 * C108 - C537 * C121 - C538 * C109) *
               C5194) *
              C2303 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C5192 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C5193 +
           (C533 * C118 + C534 * C106 - C535 * C119 - C536 * C107 +
            C537 * C120 + C538 * C108 - (C117 * C471 + C50744 * C490) * C121 -
            (C117 * C491 + C50744 * C501) * C109) *
               C5194) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C5192 +
            ((C117 * C463 + C50744 * C474) * C283 +
             (C117 * C473 + C50744 * C492) * C278 - C527 * C284 -
             C528 * C50610) *
                C5193 +
            ((C117 * C467 + C50744 * C482) * C283 +
             (C117 * C483 + C50744 * C497) * C278 - C533 * C284 -
             C534 * C50610) *
                C5194) *
               C2303 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C5192 +
            (C527 * C283 + C528 * C278 - C529 * C284 - C530 * C50610) * C5193 +
            (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50610) * C5194) *
               C50631) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C5192 +
            (C927 * C284 -
             ((C117 * C900 + C50744 * C909) * C278 +
              (C117 * C894 + C50744 * C899) * C283) +
             C928 * C50610) *
                C5193 +
            (C5354 * C284 -
             ((C117 * C1234 + C50744 * C1239) * C278 +
              (C117 * C1227 + C50744 * C1235) * C283) +
             C5355 * C50610) *
                C5194) *
               C2303 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C5192 +
            (C929 * C284 - (C928 * C278 + C927 * C283) + C930 * C50610) *
                C5193 +
            ((C117 * C1225 + C50744 * C1231) * C284 -
             (C5355 * C278 + C5354 * C283) +
             (C117 * C1230 + C50744 * C1237) * C50610) *
                C5194) *
               C50631) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C5192 +
            ((C117 * C1576 + C50744 * C1584) * C283 +
             (C117 * C1583 + C50744 * C1588) * C278 - C5356 * C284 -
             C5357 * C50610) *
                C5193 +
            ((C117 * C2702 + C50744 * C2705) * C283 +
             (C117 * C2706 + C50744 * C2711) * C278 - C5358 * C284 -
             C5359 * C50610) *
                C5194) *
               C2303 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C5192 +
            (C5356 * C283 + C5357 * C278 -
             (C117 * C1574 + C50744 * C1580) * C284 -
             (C117 * C1579 + C50744 * C1586) * C50610) *
                C5193 +
            (C5358 * C283 + C5359 * C278 -
             (C117 * C2704 + C50744 * C2709) * C284 -
             (C117 * C2710 + C50744 * C2713) * C50610) *
                C5194) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50874 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50874 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C50663 * C50934 +
          (((C2545 + C2546 + C2547) * C49713 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50874 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C49720) +
            (C2548 + C2549 + C2550) * C50610) *
               C50760 * C2303 +
           ((C2911 + C2910 + C2909) * C49713 -
            ((C2550 + C2549 + C2548) * C50874 +
             (C2547 + C2546 + C2545) * C49720) +
            (C2914 + C2913 + C2912) * C50610) *
               C50760 * C50631) *
              C50663 * C50935 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C49720 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50874 -
            (C2551 + C2552 + C2553) * C49713 -
            (C2554 + C2555 + C2556) * C50610) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C49720 +
            (C2556 + C2555 + C2554) * C50874 -
            (C2307 * C2510 + C2302 * C2515 + C2306 * C1111 + C2301 * C1117 +
             C2305 * C292 + C2300 * C309) *
                C49713 -
            (C2307 * C2516 + C2302 * C2519 + C2306 * C1116 + C2301 * C1123 +
             C2305 * C310 + C2300 * C322) *
                C50610) *
               C50760 * C50631) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C49720 +
            (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
               C50760 * C112 +
           (C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
               C50760 * C113 +
           (C175 * C49720 + C176 * C50874 - C177 * C49713 - C178 * C50610) *
               C50760 * C114) *
              C50663 * C50934 +
          ((C350 * C49713 -
            ((C117 * C296 + C50744 * C315) * C50874 +
             (C117 * C286 + C50744 * C297) * C49720) +
            C351 * C50610) *
               C50760 * C111 +
           (C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
               C50760 * C112 +
           (C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
               C50760 * C113 +
           (C653 * C49713 - (C355 * C50874 + C354 * C49720) + C654 * C50610) *
               C50760 * C114) *
              C50663 * C50935 +
          (((C117 * C290 + C50744 * C305) * C49720 +
            (C117 * C306 + C50744 * C320) * C50874 - C356 * C49713 -
            C357 * C50610) *
               C50760 * C111 +
           (C356 * C49720 + C357 * C50874 - C358 * C49713 - C359 * C50610) *
               C50760 * C112 +
           (C358 * C49720 + C359 * C50874 - C360 * C49713 - C361 * C50610) *
               C50760 * C113 +
           (C360 * C49720 + C361 * C50874 -
            (C117 * C294 + C50744 * C313) * C49713 -
            (C117 * C314 + C50744 * C324) * C50610) *
               C50760 * C114) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C5192 +
            (C5554 * C49720 + C5555 * C50874 - C527 * C49713 - C528 * C50610) *
                C5193 +
            (C5556 * C49720 + C5557 * C50874 - C533 * C49713 - C534 * C50610) *
                C5194) *
               C2303 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C5192 +
            (C527 * C49720 + C528 * C50874 - C529 * C49713 - C530 * C50610) *
                C5193 +
            (C533 * C49720 + C534 * C50874 - C535 * C49713 - C536 * C50610) *
                C5194) *
               C50631) *
              C50663 * C50934 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C5192 +
            (C927 * C49713 - (C6128 * C50874 + C6129 * C49720) +
             C928 * C50610) *
                C5193 +
            (C5354 * C49713 - (C6130 * C50874 + C6131 * C49720) +
             C5355 * C50610) *
                C5194) *
               C2303 +
           ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C5192 +
            (C929 * C49713 - (C928 * C50874 + C927 * C49720) + C930 * C50610) *
                C5193 +
            (C5734 * C49713 - (C5355 * C50874 + C5354 * C49720) +
             C5735 * C50610) *
                C5194) *
               C50631) *
              C50663 * C50935 +
          ((((C117 * C290 + C50744 * C305) * C49720 +
             (C117 * C306 + C50744 * C320) * C50874 - C356 * C49713 -
             C357 * C50610) *
                C5192 +
            ((C117 * C1576 + C50744 * C1584) * C49720 +
             (C117 * C1583 + C50744 * C1588) * C50874 - C5356 * C49713 -
             C5357 * C50610) *
                C5193 +
            ((C117 * C2702 + C50744 * C2705) * C49720 +
             (C117 * C2706 + C50744 * C2711) * C50874 - C5358 * C49713 -
             C5359 * C50610) *
                C5194) *
               C2303 +
           ((C356 * C49720 + C357 * C50874 - C358 * C49713 - C359 * C50610) *
                C5192 +
            (C5356 * C49720 + C5357 * C50874 -
             (C117 * C1574 + C50744 * C1580) * C49713 -
             (C117 * C1579 + C50744 * C1586) * C50610) *
                C5193 +
            (C5358 * C49720 + C5359 * C50874 -
             (C117 * C2704 + C50744 * C2709) * C49713 -
             (C117 * C2710 + C50744 * C2713) * C50610) *
                C5194) *
               C50631) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2305 * C122 + C2300 * C129 + C2306 * C286 +
                      C2301 * C297 + C2307 * C290 + C2302 * C305) *
                         C1109 +
                     (C2305 * C130 + C2300 * C143 + C2306 * C296 +
                      C2301 * C315 + C2307 * C306 + C2302 * C320) *
                         C50605) *
                        C50760 * C2303 +
                    ((C2347 + C2346 + C2345) * C1109 +
                     (C2350 + C2349 + C2348) * C50605) *
                        C50760 * C50631) *
                       C50890 -
                   (((C2744 + C2743 + C2742) * C50605 +
                     (C2741 + C2740 + C2739) * C1109) *
                        C50760 * C50631 +
                    ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 +
                      C2301 * C909 + C2305 * C473 + C2300 * C492) *
                         C50605 +
                     (C2307 * C1576 + C2302 * C1584 + C2306 * C894 +
                      C2301 * C899 + C2305 * C463 + C2300 * C474) *
                         C1109) *
                        C50760 * C2303) *
                       C50727) *
                      C50934 +
                  ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 +
                      C2301 * C1584 + C2307 * C3272 + C2302 * C3275) *
                         C1109 +
                     (C2305 * C900 + C2300 * C909 + C2306 * C1583 +
                      C2301 * C1588 + C2307 * C3276 + C2302 * C3281) *
                         C50605) *
                        C50760 * C2303 +
                    ((C3299 + C3298 + C3297) * C1109 +
                     (C3302 + C3301 + C3300) * C50605) *
                        C50760 * C50631) *
                       C50727 -
                   (((C2550 + C2549 + C2548) * C50605 +
                     (C2547 + C2546 + C2545) * C1109) *
                        C50760 * C50631 +
                    ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 +
                      C2301 * C320 + C2305 * C296 + C2300 * C315) *
                         C50605 +
                     (C2307 * C1113 + C2302 * C1121 + C2306 * C290 +
                      C2301 * C305 + C2305 * C286 + C2300 * C297) *
                         C1109) *
                        C50760 * C2303) *
                       C50890) *
                      C50935 +
                  ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 +
                      C2301 * C1121 + C2307 * C2508 + C2302 * C2511) *
                         C1109 +
                     (C2305 * C306 + C2300 * C320 + C2306 * C1120 +
                      C2301 * C1125 + C2307 * C2512 + C2302 * C2517) *
                         C50605) *
                        C50760 * C2303 +
                    ((C2553 + C2552 + C2551) * C1109 +
                     (C2556 + C2555 + C2554) * C50605) *
                        C50760 * C50631) *
                       C50890 -
                   (((C2307 * C4196 + C2302 * C4200 + C2306 * C3278 +
                      C2301 * C3282 + C2305 * C1581 + C2300 * C1587) *
                         C50605 +
                     (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 +
                      C2301 * C3277 + C2305 * C1575 + C2300 * C1582) *
                         C1109) *
                        C50760 * C50631 +
                    ((C2307 * C4198 + C2302 * C4201 + C2306 * C3276 +
                      C2301 * C3281 + C2305 * C1583 + C2300 * C1588) *
                         C50605 +
                     (C2307 * C4195 + C2302 * C4199 + C2306 * C3272 +
                      C2301 * C3275 + C2305 * C1576 + C2300 * C1584) *
                         C1109) *
                        C50760 * C2303) *
                       C50727) *
                      C1342)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50744 * C129) * C1109 +
                     (C117 * C130 + C50744 * C143) * C50605) *
                        C50760 * C111 +
                    (C171 * C1109 + C172 * C50605) * C50760 * C112 +
                    (C173 * C1109 + C174 * C50605) * C50760 * C113 +
                    (C175 * C1109 + C176 * C50605) * C50760 * C114) *
                       C50890 -
                   ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
                    (C530 * C50605 + C529 * C1109) * C50760 * C113 +
                    (C528 * C50605 + C527 * C1109) * C50760 * C112 +
                    ((C117 * C473 + C50744 * C492) * C50605 +
                     (C117 * C463 + C50744 * C474) * C1109) *
                        C50760 * C111) *
                       C50727) *
                      C50934 +
                  ((((C117 * C894 + C50744 * C899) * C1109 +
                     (C117 * C900 + C50744 * C909) * C50605) *
                        C50760 * C111 +
                    (C927 * C1109 + C928 * C50605) * C50760 * C112 +
                    (C929 * C1109 + C930 * C50605) * C50760 * C113 +
                    (C931 * C1109 + C932 * C50605) * C50760 * C114) *
                       C50727 -
                   ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
                    (C353 * C50605 + C352 * C1109) * C50760 * C113 +
                    (C351 * C50605 + C350 * C1109) * C50760 * C112 +
                    ((C117 * C296 + C50744 * C315) * C50605 +
                     (C117 * C286 + C50744 * C297) * C1109) *
                        C50760 * C111) *
                       C50890) *
                      C50935 +
                  ((((C117 * C290 + C50744 * C305) * C1109 +
                     (C117 * C306 + C50744 * C320) * C50605) *
                        C50760 * C111 +
                    (C356 * C1109 + C357 * C50605) * C50760 * C112 +
                    (C358 * C1109 + C359 * C50605) * C50760 * C113 +
                    (C360 * C1109 + C361 * C50605) * C50760 * C114) *
                       C50890 -
                   (((C117 * C1577 + C50744 * C1585) * C50605 +
                     (C117 * C1573 + C50744 * C1578) * C1109) *
                        C50760 * C114 +
                    ((C117 * C1579 + C50744 * C1586) * C50605 +
                     (C117 * C1574 + C50744 * C1580) * C1109) *
                        C50760 * C113 +
                    ((C117 * C1581 + C50744 * C1587) * C50605 +
                     (C117 * C1575 + C50744 * C1582) * C1109) *
                        C50760 * C112 +
                    ((C117 * C1583 + C50744 * C1588) * C50605 +
                     (C117 * C1576 + C50744 * C1584) * C1109) *
                        C50760 * C111) *
                       C50727) *
                      C1342)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C122 + C50744 * C129) * C1109 +
                      (C117 * C130 + C50744 * C143) * C50605) *
                         C5192 +
                     (C6536 + C6537) * C5193 + C6562 * C5194) *
                        C2303 +
                    ((C171 * C1109 + C172 * C50605) * C5192 +
                     (C6540 + C6541) * C5193 + C6563 * C5194) *
                        C50631) *
                       C50890 -
                   (((C6544 + C6545) * C5194 + (C6543 + C6542) * C5193 +
                     (C6541 + C6540) * C5192) *
                        C50631 +
                    ((C6546 + C6547) * C5194 + (C6539 + C6538) * C5193 +
                     (C6537 + C6536) * C5192) *
                        C2303) *
                       C50727) *
                      C50934 +
                  ((((C6548 + C6549) * C5192 + (C6550 + C6551) * C5193 +
                     (C6568 + C6569) * C5194) *
                        C2303 +
                    ((C6556 + C6557) * C5192 + (C6558 + C6559) * C5193 +
                     (C6560 + C6561) * C5194) *
                        C50631) *
                       C50727 -
                   ((C6566 * C5194 + (C6557 + C6556) * C5193 +
                     (C351 * C50605 + C350 * C1109) * C5192) *
                        C50631 +
                    (C6567 * C5194 + (C6549 + C6548) * C5193 +
                     ((C117 * C296 + C50744 * C315) * C50605 +
                      (C117 * C286 + C50744 * C297) * C1109) *
                         C5192) *
                        C2303) *
                       C50890) *
                      C50935 +
                  (((((C117 * C290 + C50744 * C305) * C1109 +
                      (C117 * C306 + C50744 * C320) * C50605) *
                         C5192 +
                     (C7104 + C7105) * C5193 + (C7106 + C7107) * C5194) *
                        C2303 +
                    ((C356 * C1109 + C357 * C50605) * C5192 +
                     (C7096 + C7097) * C5193 + (C7098 + C7099) * C5194) *
                        C50631) *
                       C50890 -
                   ((((C117 * C4596 + C50744 * C4604) * C50605 +
                      (C117 * C4592 + C50744 * C4598) * C1109) *
                         C5194 +
                     (C7099 + C7098) * C5193 + (C7097 + C7096) * C5192) *
                        C50631 +
                    (((C117 * C4600 + C50744 * C4606) * C50605 +
                      (C117 * C4594 + C50744 * C4602) * C1109) *
                         C5194 +
                     (C7107 + C7106) * C5193 + (C7105 + C7104) * C5192) *
                        C2303) *
                       C50727) *
                      C1342)) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50744 * C129) * C1035 +
                (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
                C172 * C1031 + C173 * C1037 + C174 * C1032) *
                   C50760 * C111 +
               (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                C175 * C1037 + C176 * C1032) *
                   C50760 * C112 +
               (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                C177 * C1037 + C178 * C1032) *
                   C50760 * C113 +
               (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
                C179 * C1037 + C180 * C1032) *
                   C50760 * C114) *
                  C50663 * C1033 +
              ((C350 * C1036 -
                ((C117 * C296 + C50744 * C315) * C1030 +
                 (C117 * C286 + C50744 * C297) * C1035) +
                C351 * C1031 - C352 * C1037 - C353 * C1032) *
                   C50760 * C111 +
               (C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
                C354 * C1037 - C355 * C1032) *
                   C50760 * C112 +
               (C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
                C653 * C1037 - C654 * C1032) *
                   C50760 * C113 +
               (C653 * C1036 - (C355 * C1030 + C354 * C1035) + C654 * C1031 -
                (C117 * C644 + C50744 * C645) * C1037 -
                (C117 * C646 + C50744 * C647) * C1032) *
                   C50760 * C114) *
                  C50663 * C50701) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50744 * C129) * C1109 +
                (C117 * C130 + C50744 * C143) * C50605) *
                   C50760 * C111 +
               (C171 * C1109 + C172 * C50605) * C50760 * C112 +
               (C173 * C1109 + C174 * C50605) * C50760 * C113 +
               (C175 * C1109 + C176 * C50605) * C50760 * C114) *
                  C50663 * C1105 -
              ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
               (C353 * C50605 + C352 * C1109) * C50760 * C113 +
               (C351 * C50605 + C350 * C1109) * C50760 * C112 +
               ((C117 * C296 + C50744 * C315) * C50605 +
                (C117 * C286 + C50744 * C297) * C1109) *
                   C50760 * C111) *
                  C50663 * C1106 +
              (((C117 * C290 + C50744 * C305) * C1109 +
                (C117 * C306 + C50744 * C320) * C50605) *
                   C50760 * C111 +
               (C356 * C1109 + C357 * C50605) * C50760 * C112 +
               (C358 * C1109 + C359 * C50605) * C50760 * C113 +
               (C360 * C1109 + C361 * C50605) * C50760 * C114) *
                  C50663 * C1107 -
              (((C117 * C1114 + C50744 * C1122) * C50605 +
                (C117 * C1110 + C50744 * C1115) * C1109) *
                   C50760 * C114 +
               ((C117 * C1116 + C50744 * C1123) * C50605 +
                (C117 * C1111 + C50744 * C1117) * C1109) *
                   C50760 * C113 +
               ((C117 * C1118 + C50744 * C1124) * C50605 +
                (C117 * C1112 + C50744 * C1119) * C1109) *
                   C50760 * C112 +
               ((C117 * C1120 + C50744 * C1125) * C50605 +
                (C117 * C1113 + C50744 * C1121) * C1109) *
                   C50760 * C111) *
                  C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50760 * C111 +
            (C171 * C1109 + C172 * C50605) * C50760 * C112 +
            (C173 * C1109 + C174 * C50605) * C50760 * C113 +
            (C175 * C1109 + C176 * C50605) * C50760 * C114) *
               C459 -
           ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
            (C530 * C50605 + C529 * C1109) * C50760 * C113 +
            (C528 * C50605 + C527 * C1109) * C50760 * C112 +
            ((C117 * C473 + C50744 * C492) * C50605 +
             (C117 * C463 + C50744 * C474) * C1109) *
                C50760 * C111) *
               C460 +
           (((C117 * C467 + C50744 * C482) * C1109 +
             (C117 * C483 + C50744 * C497) * C50605) *
                C50760 * C111 +
            (C533 * C1109 + C534 * C50605) * C50760 * C112 +
            (C535 * C1109 + C536 * C50605) * C50760 * C113 +
            (C537 * C1109 + C538 * C50605) * C50760 * C114) *
               C461) *
              C1033 +
          ((((C117 * C894 + C50744 * C899) * C1109 +
             (C117 * C900 + C50744 * C909) * C50605) *
                C50760 * C111 +
            (C927 * C1109 + C928 * C50605) * C50760 * C112 +
            (C929 * C1109 + C930 * C50605) * C50760 * C113 +
            (C931 * C1109 + C932 * C50605) * C50760 * C114) *
               C460 -
           ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
            (C353 * C50605 + C352 * C1109) * C50760 * C113 +
            (C351 * C50605 + C350 * C1109) * C50760 * C112 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C50760 * C111) *
               C459 -
           (((C117 * C1228 + C50744 * C1236) * C50605 +
             (C117 * C1224 + C50744 * C1229) * C1109) *
                C50760 * C114 +
            ((C117 * C1230 + C50744 * C1237) * C50605 +
             (C117 * C1225 + C50744 * C1231) * C1109) *
                C50760 * C113 +
            ((C117 * C1232 + C50744 * C1238) * C50605 +
             (C117 * C1226 + C50744 * C1233) * C1109) *
                C50760 * C112 +
            ((C117 * C1234 + C50744 * C1239) * C50605 +
             (C117 * C1227 + C50744 * C1235) * C1109) *
                C50760 * C111) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1035 + (C2350 + C2349 + C2348) * C1030 -
            (C2353 + C2352 + C2351) * C1036 - (C2356 + C2355 + C2354) * C1031 +
            (C2359 + C2358 + C2357) * C1037 + (C2362 + C2361 + C2360) * C1032) *
               C50760 * C50631) *
              C50663 * C1033 +
          (((C2545 + C2546 + C2547) * C1036 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C1030 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1035) +
            (C2548 + C2549 + C2550) * C1031 - (C2909 + C2910 + C2911) * C1037 -
            (C2912 + C2913 + C2914) * C1032) *
               C50760 * C2303 +
           ((C2911 + C2910 + C2909) * C1036 -
            ((C2550 + C2549 + C2548) * C1030 +
             (C2547 + C2546 + C2545) * C1035) +
            (C2914 + C2913 + C2912) * C1031 -
            (C2307 * C1110 + C2302 * C1115 + C2306 * C293 + C2301 * C311 +
             C2305 * C288 + C2300 * C301) *
                C1037 -
            (C2307 * C1114 + C2302 * C1122 + C2306 * C312 + C2301 * C323 +
             C2305 * C302 + C2300 * C318) *
                C1032) *
               C50760 * C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1109 +
            (C2350 + C2349 + C2348) * C50605) *
               C50760 * C50631) *
              C50663 * C1105 -
          (((C2550 + C2549 + C2548) * C50605 +
            (C2547 + C2546 + C2545) * C1109) *
               C50760 * C50631 +
           ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
             C2305 * C296 + C2300 * C315) *
                C50605 +
            (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
             C2305 * C286 + C2300 * C297) *
                C1109) *
               C50760 * C2303) *
              C50663 * C1106 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C1109 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50605) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C1109 +
            (C2556 + C2555 + C2554) * C50605) *
               C50760 * C50631) *
              C50663 * C1107 -
          (((C2307 * C3548 + C2302 * C3552 + C2306 * C2514 + C2301 * C2518 +
             C2305 * C1118 + C2300 * C1124) *
                C50605 +
            (C2307 * C3546 + C2302 * C3549 + C2306 * C2509 + C2301 * C2513 +
             C2305 * C1112 + C2300 * C1119) *
                C1109) *
               C50760 * C50631 +
           ((C2307 * C3550 + C2302 * C3553 + C2306 * C2512 + C2301 * C2517 +
             C2305 * C1120 + C2300 * C1125) *
                C50605 +
            (C2307 * C3547 + C2302 * C3551 + C2306 * C2508 + C2301 * C2511 +
             C2305 * C1113 + C2300 * C1121) *
                C1109) *
               C50760 * C2303) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C1109 +
             (C2350 + C2349 + C2348) * C50605) *
                C50760 * C50631) *
               C459 -
           (((C2744 + C2743 + C2742) * C50605 +
             (C2741 + C2740 + C2739) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50605 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1109) *
                C50760 * C2303) *
               C460 +
           (((C2305 * C467 + C2300 * C482 + C2306 * C1227 + C2301 * C1235 +
              C2307 * C2702 + C2302 * C2705) *
                 C1109 +
             (C2305 * C483 + C2300 * C497 + C2306 * C1234 + C2301 * C1239 +
              C2307 * C2706 + C2302 * C2711) *
                 C50605) *
                C50760 * C2303 +
            ((C2747 + C2746 + C2745) * C1109 +
             (C2750 + C2749 + C2748) * C50605) *
                C50760 * C50631) *
               C461) *
              C1033 +
          ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C1109 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50605) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C1109 +
             (C3302 + C3301 + C3300) * C50605) *
                C50760 * C50631) *
               C460 -
           (((C2550 + C2549 + C2548) * C50605 +
             (C2547 + C2546 + C2545) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C50760 * C2303) *
               C459 -
           (((C2307 * C3702 + C2302 * C3706 + C2306 * C2708 + C2301 * C2712 +
              C2305 * C1232 + C2300 * C1238) *
                 C50605 +
             (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 + C2301 * C2707 +
              C2305 * C1226 + C2300 * C1233) *
                 C1109) *
                C50760 * C50631 +
            ((C2307 * C3704 + C2302 * C3707 + C2306 * C2706 + C2301 * C2711 +
              C2305 * C1234 + C2300 * C1239) *
                 C50605 +
             (C2307 * C3701 + C2302 * C3705 + C2306 * C2702 + C2301 * C2705 +
              C2305 * C1227 + C2300 * C1235) *
                 C1109) *
                C50760 * C2303) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C5192 +
            (C5554 * C1035 + C5555 * C1030 - C527 * C1036 - C528 * C1031 +
             C529 * C1037 + C530 * C1032) *
                C5193 +
            (C5556 * C1035 + C5557 * C1030 - C533 * C1036 - C534 * C1031 +
             C535 * C1037 + C536 * C1032) *
                C5194) *
               C2303 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C5192 +
            (C527 * C1035 + C528 * C1030 - C529 * C1036 - C530 * C1031 +
             C531 * C1037 + C532 * C1032) *
                C5193 +
            (C533 * C1035 + C534 * C1030 - C535 * C1036 - C536 * C1031 +
             C537 * C1037 + C538 * C1032) *
                C5194) *
               C50631) *
              C50663 * C1033 +
          (((C350 * C1036 -
             ((C117 * C296 + C50744 * C315) * C1030 +
              (C117 * C286 + C50744 * C297) * C1035) +
             C351 * C1031 - C352 * C1037 - C353 * C1032) *
                C5192 +
            (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C5193 +
            (C5354 * C1036 - (C6130 * C1030 + C6131 * C1035) + C5355 * C1031 -
             C5734 * C1037 - C5735 * C1032) *
                C5194) *
               C2303 +
           ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
             C354 * C1037 - C355 * C1032) *
                C5192 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C5193 +
            (C5734 * C1036 - (C5355 * C1030 + C5354 * C1035) + C5735 * C1031 -
             (C117 * C1224 + C50744 * C1229) * C1037 -
             (C117 * C1228 + C50744 * C1236) * C1032) *
                C5194) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C117 * C122 + C50744 * C129) * C1109 +
                                 (C117 * C130 + C50744 * C143) * C50605) *
                                    C5192 +
                                (C5554 * C1109 + C5555 * C50605) * C5193 +
                                (C5556 * C1109 + C5557 * C50605) * C5194) *
                                   C2303 +
                               ((C171 * C1109 + C172 * C50605) * C5192 +
                                (C527 * C1109 + C528 * C50605) * C5193 +
                                (C533 * C1109 + C534 * C50605) * C5194) *
                                   C50631) *
                                  C50663 * C1105 -
                              (((C5355 * C50605 + C5354 * C1109) * C5194 +
                                (C928 * C50605 + C927 * C1109) * C5193 +
                                (C351 * C50605 + C350 * C1109) * C5192) *
                                   C50631 +
                               ((C6130 * C50605 + C6131 * C1109) * C5194 +
                                (C6128 * C50605 + C6129 * C1109) * C5193 +
                                ((C117 * C296 + C50744 * C315) * C50605 +
                                 (C117 * C286 + C50744 * C297) * C1109) *
                                    C5192) *
                                   C2303) *
                                  C50663 * C1106 +
                              ((((C117 * C290 + C50744 * C305) * C1109 +
                                 (C117 * C306 + C50744 * C320) * C50605) *
                                    C5192 +
                                ((C117 * C1576 + C50744 * C1584) * C1109 +
                                 (C117 * C1583 + C50744 * C1588) * C50605) *
                                    C5193 +
                                ((C117 * C2702 + C50744 * C2705) * C1109 +
                                 (C117 * C2706 + C50744 * C2711) * C50605) *
                                    C5194) *
                                   C2303 +
                               ((C356 * C1109 + C357 * C50605) * C5192 +
                                (C5356 * C1109 + C5357 * C50605) * C5193 +
                                (C5358 * C1109 + C5359 * C50605) * C5194) *
                                   C50631) *
                                  C50663 * C1107 -
                              ((((C117 * C3702 + C50744 * C3706) * C50605 +
                                 (C117 * C3700 + C50744 * C3703) * C1109) *
                                    C5194 +
                                ((C117 * C3278 + C50744 * C3282) * C50605 +
                                 (C117 * C3273 + C50744 * C3277) * C1109) *
                                    C5193 +
                                ((C117 * C1118 + C50744 * C1124) * C50605 +
                                 (C117 * C1112 + C50744 * C1119) * C1109) *
                                    C5192) *
                                   C50631 +
                               (((C117 * C3704 + C50744 * C3707) * C50605 +
                                 (C117 * C3701 + C50744 * C3705) * C1109) *
                                    C5194 +
                                ((C117 * C3276 + C50744 * C3281) * C50605 +
                                 (C117 * C3272 + C50744 * C3275) * C1109) *
                                    C5193 +
                                ((C117 * C1120 + C50744 * C1125) * C50605 +
                                 (C117 * C1113 + C50744 * C1121) * C1109) *
                                    C5192) *
                                   C2303) *
                                  C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C5192 +
             (C6536 + C6537) * C5193 + C6562 * C5194) *
                C2303 +
            ((C171 * C1109 + C172 * C50605) * C5192 + (C6540 + C6541) * C5193 +
             C6563 * C5194) *
                C50631) *
               C459 -
           (((C6544 + C6545) * C5194 + (C6543 + C6542) * C5193 +
             (C6541 + C6540) * C5192) *
                C50631 +
            ((C6546 + C6547) * C5194 + (C6539 + C6538) * C5193 +
             (C6537 + C6536) * C5192) *
                C2303) *
               C460 +
           ((C6562 * C5192 + (C6547 + C6546) * C5193 +
             ((C117 * C5505 + C50744 * C5508) * C1109 +
              (C117 * C5509 + C50744 * C5514) * C50605) *
                 C5194) *
                C2303 +
            (C6563 * C5192 + (C6545 + C6544) * C5193 +
             (C5565 * C1109 + C5566 * C50605) * C5194) *
                C50631) *
               C461) *
              C1033 +
          ((((C6548 + C6549) * C5192 + (C6550 + C6551) * C5193 +
             (C6568 + C6569) * C5194) *
                C2303 +
            ((C6556 + C6557) * C5192 + (C6558 + C6559) * C5193 +
             (C6560 + C6561) * C5194) *
                C50631) *
               C460 -
           ((C6566 * C5194 + (C6557 + C6556) * C5193 +
             (C351 * C50605 + C350 * C1109) * C5192) *
                C50631 +
            (C6567 * C5194 + (C6549 + C6548) * C5193 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C5192) *
                C2303) *
               C459 -
           ((((C117 * C6529 + C50744 * C6533) * C50605 +
              (C117 * C6527 + C50744 * C6530) * C1109) *
                 C5194 +
             (C6561 + C6560) * C5193 + C6566 * C5192) *
                C50631 +
            (((C117 * C6531 + C50744 * C6534) * C50605 +
              (C117 * C6528 + C50744 * C6532) * C1109) *
                 C5194 +
             (C6569 + C6568) * C5193 + C6567 * C5192) *
                C2303) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50874 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50610) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C49720 +
             (C2350 + C2349 + C2348) * C50874 -
             (C2353 + C2352 + C2351) * C49713 -
             (C2356 + C2355 + C2354) * C50610) *
                C50760 * C50631) *
               C50890 +
           (((C2739 + C2740 + C2741) * C49713 -
             ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
               C2305 * C473 + C2300 * C492) *
                  C50874 +
              (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
               C2305 * C463 + C2300 * C474) *
                  C49720) +
             (C2742 + C2743 + C2744) * C50610) *
                C50760 * C2303 +
            ((C3075 + C3074 + C3073) * C49713 -
             ((C2744 + C2743 + C2742) * C50874 +
              (C2741 + C2740 + C2739) * C49720) +
             (C3078 + C3077 + C3076) * C50610) *
                C50760 * C50631) *
               C50727) *
              C1033 +
          ((((C2545 + C2546 + C2547) * C49713 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C50874 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C49720) +
             (C2548 + C2549 + C2550) * C50610) *
                C50760 * C2303 +
            ((C2911 + C2910 + C2909) * C49713 -
             ((C2550 + C2549 + C2548) * C50874 +
              (C2547 + C2546 + C2545) * C49720) +
             (C2914 + C2913 + C2912) * C50610) *
                C50760 * C50631) *
               C50890 +
           (((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C49720 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50874 -
             (C3297 + C3298 + C3299) * C49713 -
             (C3300 + C3301 + C3302) * C50610) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C49720 +
             (C3302 + C3301 + C3300) * C50874 -
             (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
              C2305 * C896 + C2300 * C903) *
                 C49713 -
             (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
              C2305 * C904 + C2300 * C911) *
                 C50610) *
                C50760 * C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C50760 * C111 +
            (C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C50760 * C112 +
            (C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C50760 * C113 +
            (C175 * C49720 + C176 * C50874 - C177 * C49713 - C178 * C50610) *
                C50760 * C114) *
               C50890 +
           ((C527 * C49713 -
             ((C117 * C473 + C50744 * C492) * C50874 +
              (C117 * C463 + C50744 * C474) * C49720) +
             C528 * C50610) *
                C50760 * C111 +
            (C529 * C49713 - (C528 * C50874 + C527 * C49720) + C530 * C50610) *
                C50760 * C112 +
            (C531 * C49713 - (C530 * C50874 + C529 * C49720) + C532 * C50610) *
                C50760 * C113 +
            (C763 * C49713 - (C532 * C50874 + C531 * C49720) + C764 * C50610) *
                C50760 * C114) *
               C50727) *
              C1033 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C50760 * C111 +
            (C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C50760 * C112 +
            (C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                C50760 * C113 +
            (C653 * C49713 - (C355 * C50874 + C354 * C49720) + C654 * C50610) *
                C50760 * C114) *
               C50890 +
           (((C117 * C894 + C50744 * C899) * C49720 +
             (C117 * C900 + C50744 * C909) * C50874 - C927 * C49713 -
             C928 * C50610) *
                C50760 * C111 +
            (C927 * C49720 + C928 * C50874 - C929 * C49713 - C930 * C50610) *
                C50760 * C112 +
            (C929 * C49720 + C930 * C50874 - C931 * C49713 - C932 * C50610) *
                C50760 * C113 +
            (C931 * C49720 + C932 * C50874 -
             (C117 * C898 + C50744 * C907) * C49713 -
             (C117 * C908 + C50744 * C913) * C50610) *
                C50760 * C114) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C5192 +
             (C6910 + C6911 - C6912 - C6913) * C5193 +
             (C6914 + C6915 - C6916 - C6917) * C5194) *
                C2303 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C5192 +
             (C6918 + C6919 - C6920 - C6921) * C5193 +
             (C6922 + C6923 - C6924 - C6925) * C5194) *
                C50631) *
               C50890 +
           (((C6912 - (C6911 + C6910) + C6913) * C5192 +
             (C6916 - (C6915 + C6914) + C6917) * C5193 +
             (C5559 * C49713 - (C5560 * C50874 + C5561 * C49720) +
              C5562 * C50610) *
                 C5194) *
                C2303 +
            ((C6920 - (C6919 + C6918) + C6921) * C5192 +
             (C6924 - (C6923 + C6922) + C6925) * C5193 +
             (C5563 * C49713 - (C5562 * C50874 + C5559 * C49720) +
              C5564 * C50610) *
                 C5194) *
                C50631) *
               C50727) *
              C1033 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C5192 +
             (C6926 - (C6927 + C6928) + C6929) * C5193 +
             (C6930 - (C6931 + C6932) + C6933) * C5194) *
                C2303 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C5192 +
             (C6934 - (C6935 + C6936) + C6937) * C5193 +
             (C6938 - (C6939 + C6940) + C6941) * C5194) *
                C50631) *
               C50890 +
           (((C6928 + C6927 - C6926 - C6929) * C5192 +
             (C6932 + C6931 - C6930 - C6933) * C5193 +
             (C6564 * C49720 + C6565 * C50874 - C6132 * C49713 -
              C6133 * C50610) *
                 C5194) *
                C2303 +
            ((C6936 + C6935 - C6934 - C6937) * C5192 +
             (C6940 + C6939 - C6938 - C6941) * C5193 +
             (C6132 * C49720 + C6133 * C50874 -
              (C117 * C6099 + C50744 * C6100) * C49713 -
              (C117 * C6101 + C50744 * C6102) * C50610) *
                 C5194) *
                C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1109 +
            (C117 * C130 + C50744 * C143) * C50605) *
               C50760 * C111 +
           (C171 * C1109 + C172 * C50605) * C50760 * C112 +
           (C173 * C1109 + C174 * C50605) * C50760 * C113 +
           (C175 * C1109 + C176 * C50605) * C50760 * C114) *
              C50663 * C1105 -
          ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
           (C353 * C50605 + C352 * C1109) * C50760 * C113 +
           (C351 * C50605 + C350 * C1109) * C50760 * C112 +
           ((C117 * C296 + C50744 * C315) * C50605 +
            (C117 * C286 + C50744 * C297) * C1109) *
               C50760 * C111) *
              C50663 * C1106 +
          (((C117 * C290 + C50744 * C305) * C1109 +
            (C117 * C306 + C50744 * C320) * C50605) *
               C50760 * C111 +
           (C356 * C1109 + C357 * C50605) * C50760 * C112 +
           (C358 * C1109 + C359 * C50605) * C50760 * C113 +
           (C360 * C1109 + C361 * C50605) * C50760 * C114) *
              C50663 * C1107 -
          (((C117 * C1114 + C50744 * C1122) * C50605 +
            (C117 * C1110 + C50744 * C1115) * C1109) *
               C50760 * C114 +
           ((C117 * C1116 + C50744 * C1123) * C50605 +
            (C117 * C1111 + C50744 * C1117) * C1109) *
               C50760 * C113 +
           ((C117 * C1118 + C50744 * C1124) * C50605 +
            (C117 * C1112 + C50744 * C1119) * C1109) *
               C50760 * C112 +
           ((C117 * C1120 + C50744 * C1125) * C50605 +
            (C117 * C1113 + C50744 * C1121) * C1109) *
               C50760 * C111) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50760 * C111 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C50760 * C112 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C50760 * C113 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C50760 * C114) *
              C50663 * C1033 +
          ((C350 * C1036 -
            ((C117 * C296 + C50744 * C315) * C1030 +
             (C117 * C286 + C50744 * C297) * C1035) +
            C351 * C1031 - C352 * C1037 - C353 * C1032) *
               C50760 * C111 +
           (C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
            C354 * C1037 - C355 * C1032) *
               C50760 * C112 +
           (C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
            C653 * C1037 - C654 * C1032) *
               C50760 * C113 +
           (C653 * C1036 - (C355 * C1030 + C354 * C1035) + C654 * C1031 -
            (C117 * C644 + C50744 * C645) * C1037 -
            (C117 * C646 + C50744 * C647) * C1032) *
               C50760 * C114) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1035 + (C2350 + C2349 + C2348) * C1030 -
            (C2353 + C2352 + C2351) * C1036 - (C2356 + C2355 + C2354) * C1031 +
            (C2359 + C2358 + C2357) * C1037 + (C2362 + C2361 + C2360) * C1032) *
               C50760 * C50631) *
              C50663 * C1033 +
          (((C2545 + C2546 + C2547) * C1036 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C1030 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1035) +
            (C2548 + C2549 + C2550) * C1031 - (C2909 + C2910 + C2911) * C1037 -
            (C2912 + C2913 + C2914) * C1032) *
               C50760 * C2303 +
           ((C2911 + C2910 + C2909) * C1036 -
            ((C2550 + C2549 + C2548) * C1030 +
             (C2547 + C2546 + C2545) * C1035) +
            (C2914 + C2913 + C2912) * C1031 -
            (C2307 * C1110 + C2302 * C1115 + C2306 * C293 + C2301 * C311 +
             C2305 * C288 + C2300 * C301) *
                C1037 -
            (C2307 * C1114 + C2302 * C1122 + C2306 * C312 + C2301 * C323 +
             C2305 * C302 + C2300 * C318) *
                C1032) *
               C50760 * C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1109 +
            (C2350 + C2349 + C2348) * C50605) *
               C50760 * C50631) *
              C50663 * C1105 -
          (((C2550 + C2549 + C2548) * C50605 +
            (C2547 + C2546 + C2545) * C1109) *
               C50760 * C50631 +
           ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
             C2305 * C296 + C2300 * C315) *
                C50605 +
            (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
             C2305 * C286 + C2300 * C297) *
                C1109) *
               C50760 * C2303) *
              C50663 * C1106 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C1109 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50605) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C1109 +
            (C2556 + C2555 + C2554) * C50605) *
               C50760 * C50631) *
              C50663 * C1107 -
          (((C2307 * C3548 + C2302 * C3552 + C2306 * C2514 + C2301 * C2518 +
             C2305 * C1118 + C2300 * C1124) *
                C50605 +
            (C2307 * C3546 + C2302 * C3549 + C2306 * C2509 + C2301 * C2513 +
             C2305 * C1112 + C2300 * C1119) *
                C1109) *
               C50760 * C50631 +
           ((C2307 * C3550 + C2302 * C3553 + C2306 * C2512 + C2301 * C2517 +
             C2305 * C1120 + C2300 * C1125) *
                C50605 +
            (C2307 * C3547 + C2302 * C3551 + C2306 * C2508 + C2301 * C2511 +
             C2305 * C1113 + C2300 * C1121) *
                C1109) *
               C50760 * C2303) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C5192 +
            (C5554 * C1035 + C5555 * C1030 - C527 * C1036 - C528 * C1031 +
             C529 * C1037 + C530 * C1032) *
                C5193 +
            (C5556 * C1035 + C5557 * C1030 - C533 * C1036 - C534 * C1031 +
             C535 * C1037 + C536 * C1032) *
                C5194) *
               C2303 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C5192 +
            (C527 * C1035 + C528 * C1030 - C529 * C1036 - C530 * C1031 +
             C531 * C1037 + C532 * C1032) *
                C5193 +
            (C533 * C1035 + C534 * C1030 - C535 * C1036 - C536 * C1031 +
             C537 * C1037 + C538 * C1032) *
                C5194) *
               C50631) *
              C50663 * C1033 +
          (((C350 * C1036 -
             ((C117 * C296 + C50744 * C315) * C1030 +
              (C117 * C286 + C50744 * C297) * C1035) +
             C351 * C1031 - C352 * C1037 - C353 * C1032) *
                C5192 +
            (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C5193 +
            (C5354 * C1036 - (C6130 * C1030 + C6131 * C1035) + C5355 * C1031 -
             C5734 * C1037 - C5735 * C1032) *
                C5194) *
               C2303 +
           ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
             C354 * C1037 - C355 * C1032) *
                C5192 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C5193 +
            (C5734 * C1036 - (C5355 * C1030 + C5354 * C1035) + C5735 * C1031 -
             (C117 * C1224 + C50744 * C1229) * C1037 -
             (C117 * C1228 + C50744 * C1236) * C1032) *
                C5194) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C5192 +
            (C5554 * C1109 + C5555 * C50605) * C5193 +
            (C5556 * C1109 + C5557 * C50605) * C5194) *
               C2303 +
           ((C171 * C1109 + C172 * C50605) * C5192 +
            (C527 * C1109 + C528 * C50605) * C5193 +
            (C533 * C1109 + C534 * C50605) * C5194) *
               C50631) *
              C50663 * C1105 -
          (((C5355 * C50605 + C5354 * C1109) * C5194 +
            (C928 * C50605 + C927 * C1109) * C5193 +
            (C351 * C50605 + C350 * C1109) * C5192) *
               C50631 +
           ((C6130 * C50605 + C6131 * C1109) * C5194 +
            (C6128 * C50605 + C6129 * C1109) * C5193 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C5192) *
               C2303) *
              C50663 * C1106 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C5192 +
            ((C117 * C1576 + C50744 * C1584) * C1109 +
             (C117 * C1583 + C50744 * C1588) * C50605) *
                C5193 +
            ((C117 * C2702 + C50744 * C2705) * C1109 +
             (C117 * C2706 + C50744 * C2711) * C50605) *
                C5194) *
               C2303 +
           ((C356 * C1109 + C357 * C50605) * C5192 +
            (C5356 * C1109 + C5357 * C50605) * C5193 +
            (C5358 * C1109 + C5359 * C50605) * C5194) *
               C50631) *
              C50663 * C1107 -
          ((((C117 * C3702 + C50744 * C3706) * C50605 +
             (C117 * C3700 + C50744 * C3703) * C1109) *
                C5194 +
            ((C117 * C3278 + C50744 * C3282) * C50605 +
             (C117 * C3273 + C50744 * C3277) * C1109) *
                C5193 +
            ((C117 * C1118 + C50744 * C1124) * C50605 +
             (C117 * C1112 + C50744 * C1119) * C1109) *
                C5192) *
               C50631 +
           (((C117 * C3704 + C50744 * C3707) * C50605 +
             (C117 * C3701 + C50744 * C3705) * C1109) *
                C5194 +
            ((C117 * C3276 + C50744 * C3281) * C50605 +
             (C117 * C3272 + C50744 * C3275) * C1109) *
                C5193 +
            ((C117 * C1120 + C50744 * C1125) * C50605 +
             (C117 * C1113 + C50744 * C1121) * C1109) *
                C5192) *
               C2303) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50874 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50610) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C49720 +
             (C2350 + C2349 + C2348) * C50874 -
             (C2353 + C2352 + C2351) * C49713 -
             (C2356 + C2355 + C2354) * C50610) *
                C50760 * C50631) *
               C1687 +
           (((C2739 + C2740 + C2741) * C49713 -
             ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
               C2305 * C473 + C2300 * C492) *
                  C50874 +
              (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
               C2305 * C463 + C2300 * C474) *
                  C49720) +
             (C2742 + C2743 + C2744) * C50610) *
                C50760 * C2303 +
            ((C3075 + C3074 + C3073) * C49713 -
             ((C2744 + C2743 + C2742) * C50874 +
              (C2741 + C2740 + C2739) * C49720) +
             (C3078 + C3077 + C3076) * C50610) *
                C50760 * C50631) *
               C50727) *
              C50889 +
          ((((C2545 + C2546 + C2547) * C49713 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C50874 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C49720) +
             (C2548 + C2549 + C2550) * C50610) *
                C50760 * C2303 +
            ((C2911 + C2910 + C2909) * C49713 -
             ((C2550 + C2549 + C2548) * C50874 +
              (C2547 + C2546 + C2545) * C49720) +
             (C2914 + C2913 + C2912) * C50610) *
                C50760 * C50631) *
               C1687 +
           (((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C49720 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50874 -
             (C3297 + C3298 + C3299) * C49713 -
             (C3300 + C3301 + C3302) * C50610) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C49720 +
             (C3302 + C3301 + C3300) * C50874 -
             (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
              C2305 * C896 + C2300 * C903) *
                 C49713 -
             (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
              C2305 * C904 + C2300 * C911) *
                 C50610) *
                C50760 * C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C50760 * C111 +
            (C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C50760 * C112 +
            (C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C50760 * C113 +
            (C175 * C49720 + C176 * C50874 - C177 * C49713 - C178 * C50610) *
                C50760 * C114) *
               C1687 +
           ((C527 * C49713 -
             ((C117 * C473 + C50744 * C492) * C50874 +
              (C117 * C463 + C50744 * C474) * C49720) +
             C528 * C50610) *
                C50760 * C111 +
            (C529 * C49713 - (C528 * C50874 + C527 * C49720) + C530 * C50610) *
                C50760 * C112 +
            (C531 * C49713 - (C530 * C50874 + C529 * C49720) + C532 * C50610) *
                C50760 * C113 +
            (C763 * C49713 - (C532 * C50874 + C531 * C49720) + C764 * C50610) *
                C50760 * C114) *
               C50727) *
              C50889 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C50760 * C111 +
            (C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C50760 * C112 +
            (C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                C50760 * C113 +
            (C653 * C49713 - (C355 * C50874 + C354 * C49720) + C654 * C50610) *
                C50760 * C114) *
               C1687 +
           (((C117 * C894 + C50744 * C899) * C49720 +
             (C117 * C900 + C50744 * C909) * C50874 - C927 * C49713 -
             C928 * C50610) *
                C50760 * C111 +
            (C927 * C49720 + C928 * C50874 - C929 * C49713 - C930 * C50610) *
                C50760 * C112 +
            (C929 * C49720 + C930 * C50874 - C931 * C49713 - C932 * C50610) *
                C50760 * C113 +
            (C931 * C49720 + C932 * C50874 -
             (C117 * C898 + C50744 * C907) * C49713 -
             (C117 * C908 + C50744 * C913) * C50610) *
                C50760 * C114) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C5192 +
             (C6910 + C6911 - C6912 - C6913) * C5193 +
             (C6914 + C6915 - C6916 - C6917) * C5194) *
                C2303 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C5192 +
             (C6918 + C6919 - C6920 - C6921) * C5193 +
             (C6922 + C6923 - C6924 - C6925) * C5194) *
                C50631) *
               C1687 +
           (((C6912 - (C6911 + C6910) + C6913) * C5192 +
             (C6916 - (C6915 + C6914) + C6917) * C5193 +
             (C5559 * C49713 - (C5560 * C50874 + C5561 * C49720) +
              C5562 * C50610) *
                 C5194) *
                C2303 +
            ((C6920 - (C6919 + C6918) + C6921) * C5192 +
             (C6924 - (C6923 + C6922) + C6925) * C5193 +
             (C5563 * C49713 - (C5562 * C50874 + C5559 * C49720) +
              C5564 * C50610) *
                 C5194) *
                C50631) *
               C50727) *
              C50889 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C5192 +
             (C6926 - (C6927 + C6928) + C6929) * C5193 +
             (C6930 - (C6931 + C6932) + C6933) * C5194) *
                C2303 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C5192 +
             (C6934 - (C6935 + C6936) + C6937) * C5193 +
             (C6938 - (C6939 + C6940) + C6941) * C5194) *
                C50631) *
               C1687 +
           (((C6928 + C6927 - C6926 - C6929) * C5192 +
             (C6932 + C6931 - C6930 - C6933) * C5193 +
             (C6564 * C49720 + C6565 * C50874 - C6132 * C49713 -
              C6133 * C50610) *
                 C5194) *
                C2303 +
            ((C6936 + C6935 - C6934 - C6937) * C5192 +
             (C6940 + C6939 - C6938 - C6941) * C5193 +
             (C6132 * C49720 + C6133 * C50874 -
              (C117 * C6099 + C50744 * C6100) * C49713 -
              (C117 * C6101 + C50744 * C6102) * C50610) *
                 C5194) *
                C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2305 * C122 + C2300 * C129 + C2306 * C286 +
                      C2301 * C297 + C2307 * C290 + C2302 * C305) *
                         C1109 +
                     (C2305 * C130 + C2300 * C143 + C2306 * C296 +
                      C2301 * C315 + C2307 * C306 + C2302 * C320) *
                         C50605) *
                        C50760 * C2303 +
                    ((C2347 + C2346 + C2345) * C1109 +
                     (C2350 + C2349 + C2348) * C50605) *
                        C50760 * C50631) *
                       C50936 -
                   (((C2744 + C2743 + C2742) * C50605 +
                     (C2741 + C2740 + C2739) * C1109) *
                        C50760 * C50631 +
                    ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 +
                      C2301 * C909 + C2305 * C473 + C2300 * C492) *
                         C50605 +
                     (C2307 * C1576 + C2302 * C1584 + C2306 * C894 +
                      C2301 * C899 + C2305 * C463 + C2300 * C474) *
                         C1109) *
                        C50760 * C2303) *
                       C50937 +
                   (((C2305 * C467 + C2300 * C482 + C2306 * C1227 +
                      C2301 * C1235 + C2307 * C2702 + C2302 * C2705) *
                         C1109 +
                     (C2305 * C483 + C2300 * C497 + C2306 * C1234 +
                      C2301 * C1239 + C2307 * C2706 + C2302 * C2711) *
                         C50605) *
                        C50760 * C2303 +
                    ((C2747 + C2746 + C2745) * C1109 +
                     (C2750 + C2749 + C2748) * C50605) *
                        C50760 * C50631) *
                       C2103) *
                      C50889 +
                  ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 +
                      C2301 * C1584 + C2307 * C3272 + C2302 * C3275) *
                         C1109 +
                     (C2305 * C900 + C2300 * C909 + C2306 * C1583 +
                      C2301 * C1588 + C2307 * C3276 + C2302 * C3281) *
                         C50605) *
                        C50760 * C2303 +
                    ((C3299 + C3298 + C3297) * C1109 +
                     (C3302 + C3301 + C3300) * C50605) *
                        C50760 * C50631) *
                       C50937 -
                   (((C2550 + C2549 + C2548) * C50605 +
                     (C2547 + C2546 + C2545) * C1109) *
                        C50760 * C50631 +
                    ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 +
                      C2301 * C320 + C2305 * C296 + C2300 * C315) *
                         C50605 +
                     (C2307 * C1113 + C2302 * C1121 + C2306 * C290 +
                      C2301 * C305 + C2305 * C286 + C2300 * C297) *
                         C1109) *
                        C50760 * C2303) *
                       C50936 -
                   (((C2307 * C3702 + C2302 * C3706 + C2306 * C2708 +
                      C2301 * C2712 + C2305 * C1232 + C2300 * C1238) *
                         C50605 +
                     (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 +
                      C2301 * C2707 + C2305 * C1226 + C2300 * C1233) *
                         C1109) *
                        C50760 * C50631 +
                    ((C2307 * C3704 + C2302 * C3707 + C2306 * C2706 +
                      C2301 * C2711 + C2305 * C1234 + C2300 * C1239) *
                         C50605 +
                     (C2307 * C3701 + C2302 * C3705 + C2306 * C2702 +
                      C2301 * C2705 + C2305 * C1227 + C2300 * C1235) *
                         C1109) *
                        C50760 * C2303) *
                       C2103) *
                      C50701)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50744 * C129) * C1109 +
                     (C117 * C130 + C50744 * C143) * C50605) *
                        C50760 * C111 +
                    (C171 * C1109 + C172 * C50605) * C50760 * C112 +
                    (C173 * C1109 + C174 * C50605) * C50760 * C113 +
                    (C175 * C1109 + C176 * C50605) * C50760 * C114) *
                       C50936 -
                   ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
                    (C530 * C50605 + C529 * C1109) * C50760 * C113 +
                    (C528 * C50605 + C527 * C1109) * C50760 * C112 +
                    ((C117 * C473 + C50744 * C492) * C50605 +
                     (C117 * C463 + C50744 * C474) * C1109) *
                        C50760 * C111) *
                       C50937 +
                   (((C117 * C467 + C50744 * C482) * C1109 +
                     (C117 * C483 + C50744 * C497) * C50605) *
                        C50760 * C111 +
                    (C533 * C1109 + C534 * C50605) * C50760 * C112 +
                    (C535 * C1109 + C536 * C50605) * C50760 * C113 +
                    (C537 * C1109 + C538 * C50605) * C50760 * C114) *
                       C2103) *
                      C50889 +
                  ((((C117 * C894 + C50744 * C899) * C1109 +
                     (C117 * C900 + C50744 * C909) * C50605) *
                        C50760 * C111 +
                    (C927 * C1109 + C928 * C50605) * C50760 * C112 +
                    (C929 * C1109 + C930 * C50605) * C50760 * C113 +
                    (C931 * C1109 + C932 * C50605) * C50760 * C114) *
                       C50937 -
                   ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
                    (C353 * C50605 + C352 * C1109) * C50760 * C113 +
                    (C351 * C50605 + C350 * C1109) * C50760 * C112 +
                    ((C117 * C296 + C50744 * C315) * C50605 +
                     (C117 * C286 + C50744 * C297) * C1109) *
                        C50760 * C111) *
                       C50936 -
                   (((C117 * C1228 + C50744 * C1236) * C50605 +
                     (C117 * C1224 + C50744 * C1229) * C1109) *
                        C50760 * C114 +
                    ((C117 * C1230 + C50744 * C1237) * C50605 +
                     (C117 * C1225 + C50744 * C1231) * C1109) *
                        C50760 * C113 +
                    ((C117 * C1232 + C50744 * C1238) * C50605 +
                     (C117 * C1226 + C50744 * C1233) * C1109) *
                        C50760 * C112 +
                    ((C117 * C1234 + C50744 * C1239) * C50605 +
                     (C117 * C1227 + C50744 * C1235) * C1109) *
                        C50760 * C111) *
                       C2103) *
                      C50701)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C122 + C50744 * C129) * C1109 +
                      (C117 * C130 + C50744 * C143) * C50605) *
                         C5192 +
                     (C6536 + C6537) * C5193 + C6562 * C5194) *
                        C2303 +
                    ((C171 * C1109 + C172 * C50605) * C5192 +
                     (C6540 + C6541) * C5193 + C6563 * C5194) *
                        C50631) *
                       C50936 -
                   ((C7530 * C5194 + (C6543 + C6542) * C5193 +
                     (C6541 + C6540) * C5192) *
                        C50631 +
                    (C7531 * C5194 + (C6539 + C6538) * C5193 +
                     (C6537 + C6536) * C5192) *
                        C2303) *
                       C50937 +
                   ((C6562 * C5192 + (C6547 + C6546) * C5193 +
                     (C7540 + C7541) * C5194) *
                        C2303 +
                    (C6563 * C5192 + (C6545 + C6544) * C5193 +
                     (C7536 + C7537) * C5194) *
                        C50631) *
                       C2103) *
                      C50889 +
                  ((((C6548 + C6549) * C5192 + (C6550 + C6551) * C5193 +
                     (C6568 + C6569) * C5194) *
                        C2303 +
                    ((C6556 + C6557) * C5192 + (C6558 + C6559) * C5193 +
                     (C6560 + C6561) * C5194) *
                        C50631) *
                       C50937 -
                   ((C6566 * C5194 + (C6557 + C6556) * C5193 +
                     (C351 * C50605 + C350 * C1109) * C5192) *
                        C50631 +
                    (C6567 * C5194 + (C6549 + C6548) * C5193 +
                     ((C117 * C296 + C50744 * C315) * C50605 +
                      (C117 * C286 + C50744 * C297) * C1109) *
                         C5192) *
                        C2303) *
                       C50936 -
                   ((((C117 * C6529 + C50744 * C6533) * C50605 +
                      (C117 * C6527 + C50744 * C6530) * C1109) *
                         C5194 +
                     (C6561 + C6560) * C5193 + C6566 * C5192) *
                        C50631 +
                    (((C117 * C6531 + C50744 * C6534) * C50605 +
                      (C117 * C6528 + C50744 * C6532) * C1109) *
                         C5194 +
                     (C6569 + C6568) * C5193 + C6567 * C5192) *
                        C2303) *
                       C2103) *
                      C50701)) /
                    (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50744 * C129) * C1035 +
                (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
                C172 * C1031 + C173 * C1037 + C174 * C1032) *
                   C50760 * C111 +
               (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                C175 * C1037 + C176 * C1032) *
                   C50760 * C112 +
               (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                C177 * C1037 + C178 * C1032) *
                   C50760 * C113 +
               (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
                C179 * C1037 + C180 * C1032) *
                   C50760 * C114) *
                  C1687 +
              ((C527 * C1036 -
                ((C117 * C473 + C50744 * C492) * C1030 +
                 (C117 * C463 + C50744 * C474) * C1035) +
                C528 * C1031 - C529 * C1037 - C530 * C1032) *
                   C50760 * C111 +
               (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
                C531 * C1037 - C532 * C1032) *
                   C50760 * C112 +
               (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
                C763 * C1037 - C764 * C1032) *
                   C50760 * C113 +
               (C763 * C1036 - (C532 * C1030 + C531 * C1035) + C764 * C1031 -
                (C117 * C754 + C50744 * C755) * C1037 -
                (C117 * C756 + C50744 * C757) * C1032) *
                   C50760 * C114) *
                  C50727) *
             C50651 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50744 * C129) * C1109 +
                 (C117 * C130 + C50744 * C143) * C50605) *
                    C50760 * C111 +
                (C171 * C1109 + C172 * C50605) * C50760 * C112 +
                (C173 * C1109 + C174 * C50605) * C50760 * C113 +
                (C175 * C1109 + C176 * C50605) * C50760 * C114) *
                   C1687 -
               ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
                (C530 * C50605 + C529 * C1109) * C50760 * C113 +
                (C528 * C50605 + C527 * C1109) * C50760 * C112 +
                ((C117 * C473 + C50744 * C492) * C50605 +
                 (C117 * C463 + C50744 * C474) * C1109) *
                    C50760 * C111) *
                   C50727) *
                  C280 +
              ((((C117 * C894 + C50744 * C899) * C1109 +
                 (C117 * C900 + C50744 * C909) * C50605) *
                    C50760 * C111 +
                (C927 * C1109 + C928 * C50605) * C50760 * C112 +
                (C929 * C1109 + C930 * C50605) * C50760 * C113 +
                (C931 * C1109 + C932 * C50605) * C50760 * C114) *
                   C50727 -
               ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
                (C353 * C50605 + C352 * C1109) * C50760 * C113 +
                (C351 * C50605 + C350 * C1109) * C50760 * C112 +
                ((C117 * C296 + C50744 * C315) * C50605 +
                 (C117 * C286 + C50744 * C297) * C1109) *
                    C50760 * C111) *
                   C1687) *
                  C281 +
              ((((C117 * C290 + C50744 * C305) * C1109 +
                 (C117 * C306 + C50744 * C320) * C50605) *
                    C50760 * C111 +
                (C356 * C1109 + C357 * C50605) * C50760 * C112 +
                (C358 * C1109 + C359 * C50605) * C50760 * C113 +
                (C360 * C1109 + C361 * C50605) * C50760 * C114) *
                   C1687 -
               (((C117 * C1577 + C50744 * C1585) * C50605 +
                 (C117 * C1573 + C50744 * C1578) * C1109) *
                    C50760 * C114 +
                ((C117 * C1579 + C50744 * C1586) * C50605 +
                 (C117 * C1574 + C50744 * C1580) * C1109) *
                    C50760 * C113 +
                ((C117 * C1581 + C50744 * C1587) * C50605 +
                 (C117 * C1575 + C50744 * C1582) * C1109) *
                    C50760 * C112 +
                ((C117 * C1583 + C50744 * C1588) * C50605 +
                 (C117 * C1576 + C50744 * C1584) * C1109) *
                    C50760 * C111) *
                   C50727) *
                  C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1109 +
            (C117 * C130 + C50744 * C143) * C50605) *
               C50760 * C111 +
           (C171 * C1109 + C172 * C50605) * C50760 * C112 +
           (C173 * C1109 + C174 * C50605) * C50760 * C113 +
           (C175 * C1109 + C176 * C50605) * C50760 * C114) *
              C1853 -
          ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
           (C530 * C50605 + C529 * C1109) * C50760 * C113 +
           (C528 * C50605 + C527 * C1109) * C50760 * C112 +
           ((C117 * C473 + C50744 * C492) * C50605 +
            (C117 * C463 + C50744 * C474) * C1109) *
               C50760 * C111) *
              C1854 +
          (((C117 * C467 + C50744 * C482) * C1109 +
            (C117 * C483 + C50744 * C497) * C50605) *
               C50760 * C111 +
           (C533 * C1109 + C534 * C50605) * C50760 * C112 +
           (C535 * C1109 + C536 * C50605) * C50760 * C113 +
           (C537 * C1109 + C538 * C50605) * C50760 * C114) *
              C1855 -
          (((C117 * C1861 + C50744 * C1869) * C50605 +
            (C117 * C1857 + C50744 * C1862) * C1109) *
               C50760 * C114 +
           ((C117 * C1863 + C50744 * C1870) * C50605 +
            (C117 * C1858 + C50744 * C1864) * C1109) *
               C50760 * C113 +
           ((C117 * C1865 + C50744 * C1871) * C50605 +
            (C117 * C1859 + C50744 * C1866) * C1109) *
               C50760 * C112 +
           ((C117 * C1867 + C50744 * C1872) * C50605 +
            (C117 * C1860 + C50744 * C1868) * C1109) *
               C50760 * C111) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1035 + (C2350 + C2349 + C2348) * C1030 -
            (C2353 + C2352 + C2351) * C1036 - (C2356 + C2355 + C2354) * C1031 +
            (C2359 + C2358 + C2357) * C1037 + (C2362 + C2361 + C2360) * C1032) *
               C50760 * C50631) *
              C1687 +
          (((C2739 + C2740 + C2741) * C1036 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C1030 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1035) +
            (C2742 + C2743 + C2744) * C1031 - (C3073 + C3074 + C3075) * C1037 -
            (C3076 + C3077 + C3078) * C1032) *
               C50760 * C2303 +
           ((C3075 + C3074 + C3073) * C1036 -
            ((C2744 + C2743 + C2742) * C1030 +
             (C2741 + C2740 + C2739) * C1035) +
            (C3078 + C3077 + C3076) * C1031 -
            (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
             C2305 * C465 + C2300 * C478) *
                C1037 -
            (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
             C2305 * C479 + C2300 * C495) *
                C1032) *
               C50760 * C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C1109 +
             (C2350 + C2349 + C2348) * C50605) *
                C50760 * C50631) *
               C1687 -
           (((C2744 + C2743 + C2742) * C50605 +
             (C2741 + C2740 + C2739) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50605 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1109) *
                C50760 * C2303) *
               C50727) *
              C280 +
          ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C1109 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50605) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C1109 +
             (C3302 + C3301 + C3300) * C50605) *
                C50760 * C50631) *
               C50727 -
           (((C2550 + C2549 + C2548) * C50605 +
             (C2547 + C2546 + C2545) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C50760 * C2303) *
               C1687) *
              C281 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C50760 * C2303 +
            ((C2553 + C2552 + C2551) * C1109 +
             (C2556 + C2555 + C2554) * C50605) *
                C50760 * C50631) *
               C1687 -
           (((C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
              C2305 * C1581 + C2300 * C1587) *
                 C50605 +
             (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
              C2305 * C1575 + C2300 * C1582) *
                 C1109) *
                C50760 * C50631 +
            ((C2307 * C4198 + C2302 * C4201 + C2306 * C3276 + C2301 * C3281 +
              C2305 * C1583 + C2300 * C1588) *
                 C50605 +
             (C2307 * C4195 + C2302 * C4199 + C2306 * C3272 + C2301 * C3275 +
              C2305 * C1576 + C2300 * C1584) *
                 C1109) *
                C50760 * C2303) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1109 +
            (C2350 + C2349 + C2348) * C50605) *
               C50760 * C50631) *
              C1853 -
          (((C2744 + C2743 + C2742) * C50605 +
            (C2741 + C2740 + C2739) * C1109) *
               C50760 * C50631 +
           ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
             C2305 * C473 + C2300 * C492) *
                C50605 +
            (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
             C2305 * C463 + C2300 * C474) *
                C1109) *
               C50760 * C2303) *
              C1854 +
          (((C2305 * C467 + C2300 * C482 + C2306 * C1227 + C2301 * C1235 +
             C2307 * C2702 + C2302 * C2705) *
                C1109 +
            (C2305 * C483 + C2300 * C497 + C2306 * C1234 + C2301 * C1239 +
             C2307 * C2706 + C2302 * C2711) *
                C50605) *
               C50760 * C2303 +
           ((C2747 + C2746 + C2745) * C1109 +
            (C2750 + C2749 + C2748) * C50605) *
               C50760 * C50631) *
              C1855 -
          (((C2307 * C4596 + C2302 * C4604 + C2306 * C4597 + C2301 * C4605 +
             C2305 * C1865 + C2300 * C1871) *
                C50605 +
            (C2307 * C4592 + C2302 * C4598 + C2306 * C4593 + C2301 * C4599 +
             C2305 * C1859 + C2300 * C1866) *
                C1109) *
               C50760 * C50631 +
           ((C2307 * C4600 + C2302 * C4606 + C2306 * C4601 + C2301 * C4607 +
             C2305 * C1867 + C2300 * C1872) *
                C50605 +
            (C2307 * C4594 + C2302 * C4602 + C2306 * C4595 + C2301 * C4603 +
             C2305 * C1860 + C2300 * C1868) *
                C1109) *
               C50760 * C2303) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C5192 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C5193 +
            (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C5194) *
               C2303 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C5192 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C5193 +
            (C7272 + C7273 - C7274 - C7275 + C7276 + C7277) * C5194) *
               C50631) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C5192 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C5193 +
            (C5559 * C1036 - (C5560 * C1030 + C5561 * C1035) + C5562 * C1031 -
             C5563 * C1037 - C5564 * C1032) *
                C5194) *
               C2303 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C5192 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C5193 +
            (C5563 * C1036 - (C5562 * C1030 + C5559 * C1035) + C5564 * C1031 -
             (C117 * C1857 + C50744 * C1862) * C1037 -
             (C117 * C1861 + C50744 * C1869) * C1032) *
                C5194) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C5192 +
             (C6536 + C6537) * C5193 + C6562 * C5194) *
                C2303 +
            ((C171 * C1109 + C172 * C50605) * C5192 + (C6540 + C6541) * C5193 +
             C6563 * C5194) *
                C50631) *
               C1687 -
           (((C6544 + C6545) * C5194 + (C6543 + C6542) * C5193 +
             (C6541 + C6540) * C5192) *
                C50631 +
            ((C6546 + C6547) * C5194 + (C6539 + C6538) * C5193 +
             (C6537 + C6536) * C5192) *
                C2303) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C5192 + (C6550 + C6551) * C5193 +
             (C6568 + C6569) * C5194) *
                C2303 +
            ((C6556 + C6557) * C5192 + (C6558 + C6559) * C5193 +
             (C6560 + C6561) * C5194) *
                C50631) *
               C50727 -
           ((C6566 * C5194 + (C6557 + C6556) * C5193 +
             (C351 * C50605 + C350 * C1109) * C5192) *
                C50631 +
            (C6567 * C5194 + (C6549 + C6548) * C5193 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C5192) *
                C2303) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C5192 +
             (C7104 + C7105) * C5193 + (C7106 + C7107) * C5194) *
                C2303 +
            ((C356 * C1109 + C357 * C50605) * C5192 + (C7096 + C7097) * C5193 +
             (C7098 + C7099) * C5194) *
                C50631) *
               C1687 -
           ((((C117 * C4596 + C50744 * C4604) * C50605 +
              (C117 * C4592 + C50744 * C4598) * C1109) *
                 C5194 +
             (C7099 + C7098) * C5193 + (C7097 + C7096) * C5192) *
                C50631 +
            (((C117 * C4600 + C50744 * C4606) * C50605 +
              (C117 * C4594 + C50744 * C4602) * C1109) *
                 C5194 +
             (C7107 + C7106) * C5193 + (C7105 + C7104) * C5192) *
                C2303) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C5192 +
            (C6536 + C6537) * C5193 + C6562 * C5194) *
               C2303 +
           ((C171 * C1109 + C172 * C50605) * C5192 + (C6540 + C6541) * C5193 +
            C6563 * C5194) *
               C50631) *
              C1853 -
          ((C7530 * C5194 + (C6543 + C6542) * C5193 + (C6541 + C6540) * C5192) *
               C50631 +
           (C7531 * C5194 + (C6539 + C6538) * C5193 + (C6537 + C6536) * C5192) *
               C2303) *
              C1854 +
          ((C6562 * C5192 + (C6547 + C6546) * C5193 + (C7540 + C7541) * C5194) *
               C2303 +
           (C6563 * C5192 + (C6545 + C6544) * C5193 + (C7536 + C7537) * C5194) *
               C50631) *
              C1855 -
          ((((C117 * C7523 + C50744 * C7527) * C50605 +
             (C117 * C7521 + C50744 * C7524) * C1109) *
                C5194 +
            (C7537 + C7536) * C5193 + C7530 * C5192) *
               C50631 +
           (((C117 * C7525 + C50744 * C7528) * C50605 +
             (C117 * C7522 + C50744 * C7526) * C1109) *
                C5194 +
            (C7541 + C7540) * C5193 + C7531 * C5192) *
               C2303) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50874 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50874 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C50936 +
          (((C2739 + C2740 + C2741) * C49713 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50874 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C49720) +
            (C2742 + C2743 + C2744) * C50610) *
               C50760 * C2303 +
           ((C3075 + C3074 + C3073) * C49713 -
            ((C2744 + C2743 + C2742) * C50874 +
             (C2741 + C2740 + C2739) * C49720) +
            (C3078 + C3077 + C3076) * C50610) *
               C50760 * C50631) *
              C50937 +
          (((C2305 * C467 + C2300 * C482 + C2306 * C1227 + C2301 * C1235 +
             C2307 * C2702 + C2302 * C2705) *
                C49720 +
            (C2305 * C483 + C2300 * C497 + C2306 * C1234 + C2301 * C1239 +
             C2307 * C2706 + C2302 * C2711) *
                C50874 -
            (C2745 + C2746 + C2747) * C49713 -
            (C2748 + C2749 + C2750) * C50610) *
               C50760 * C2303 +
           ((C2747 + C2746 + C2745) * C49720 +
            (C2750 + C2749 + C2748) * C50874 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C49713 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C50610) *
               C50760 * C50631) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C49720 +
            (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
               C50760 * C112 +
           (C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
               C50760 * C113 +
           (C175 * C49720 + C176 * C50874 - C177 * C49713 - C178 * C50610) *
               C50760 * C114) *
              C50936 +
          ((C527 * C49713 -
            ((C117 * C473 + C50744 * C492) * C50874 +
             (C117 * C463 + C50744 * C474) * C49720) +
            C528 * C50610) *
               C50760 * C111 +
           (C529 * C49713 - (C528 * C50874 + C527 * C49720) + C530 * C50610) *
               C50760 * C112 +
           (C531 * C49713 - (C530 * C50874 + C529 * C49720) + C532 * C50610) *
               C50760 * C113 +
           (C763 * C49713 - (C532 * C50874 + C531 * C49720) + C764 * C50610) *
               C50760 * C114) *
              C50937 +
          (((C117 * C467 + C50744 * C482) * C49720 +
            (C117 * C483 + C50744 * C497) * C50874 - C533 * C49713 -
            C534 * C50610) *
               C50760 * C111 +
           (C533 * C49720 + C534 * C50874 - C535 * C49713 - C536 * C50610) *
               C50760 * C112 +
           (C535 * C49720 + C536 * C50874 - C537 * C49713 - C538 * C50610) *
               C50760 * C113 +
           (C537 * C49720 + C538 * C50874 -
            (C117 * C471 + C50744 * C490) * C49713 -
            (C117 * C491 + C50744 * C501) * C50610) *
               C50760 * C114) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C5192 +
            (C6910 + C6911 - C6912 - C6913) * C5193 + C7894 * C5194) *
               C2303 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C5192 +
            (C6918 + C6919 - C6920 - C6921) * C5193 + C7895 * C5194) *
               C50631) *
              C50936 +
          (((C6912 - (C6911 + C6910) + C6913) * C5192 +
            (C6916 - (C6915 + C6914) + C6917) * C5193 +
            (C7884 - (C7885 + C7886) + C7887) * C5194) *
               C2303 +
           ((C6920 - (C6919 + C6918) + C6921) * C5192 +
            (C6924 - (C6923 + C6922) + C6925) * C5193 +
            (C7888 - (C7889 + C7890) + C7891) * C5194) *
               C50631) *
              C50937 +
          ((C7894 * C5192 + (C7886 + C7885 - C7884 - C7887) * C5193 +
            (C7538 * C49720 + C7539 * C50874 - C5565 * C49713 -
             C5566 * C50610) *
                C5194) *
               C2303 +
           (C7895 * C5192 + (C7890 + C7889 - C7888 - C7891) * C5193 +
            (C5565 * C49720 + C5566 * C50874 -
             (C117 * C5507 + C50744 * C5512) * C49713 -
             (C117 * C5513 + C50744 * C5516) * C50610) *
                C5194) *
               C50631) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50760 * C111 +
            (C171 * C1109 + C172 * C50605) * C50760 * C112 +
            (C173 * C1109 + C174 * C50605) * C50760 * C113 +
            (C175 * C1109 + C176 * C50605) * C50760 * C114) *
               C1687 -
           ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
            (C530 * C50605 + C529 * C1109) * C50760 * C113 +
            (C528 * C50605 + C527 * C1109) * C50760 * C112 +
            ((C117 * C473 + C50744 * C492) * C50605 +
             (C117 * C463 + C50744 * C474) * C1109) *
                C50760 * C111) *
               C50727) *
              C280 +
          ((((C117 * C894 + C50744 * C899) * C1109 +
             (C117 * C900 + C50744 * C909) * C50605) *
                C50760 * C111 +
            (C927 * C1109 + C928 * C50605) * C50760 * C112 +
            (C929 * C1109 + C930 * C50605) * C50760 * C113 +
            (C931 * C1109 + C932 * C50605) * C50760 * C114) *
               C50727 -
           ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
            (C353 * C50605 + C352 * C1109) * C50760 * C113 +
            (C351 * C50605 + C350 * C1109) * C50760 * C112 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C50760 * C111) *
               C1687) *
              C281 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C50760 * C111 +
            (C356 * C1109 + C357 * C50605) * C50760 * C112 +
            (C358 * C1109 + C359 * C50605) * C50760 * C113 +
            (C360 * C1109 + C361 * C50605) * C50760 * C114) *
               C1687 -
           (((C117 * C1577 + C50744 * C1585) * C50605 +
             (C117 * C1573 + C50744 * C1578) * C1109) *
                C50760 * C114 +
            ((C117 * C1579 + C50744 * C1586) * C50605 +
             (C117 * C1574 + C50744 * C1580) * C1109) *
                C50760 * C113 +
            ((C117 * C1581 + C50744 * C1587) * C50605 +
             (C117 * C1575 + C50744 * C1582) * C1109) *
                C50760 * C112 +
            ((C117 * C1583 + C50744 * C1588) * C50605 +
             (C117 * C1576 + C50744 * C1584) * C1109) *
                C50760 * C111) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50760 * C111 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C50760 * C112 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C50760 * C113 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C50760 * C114) *
              C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50744 * C492) * C1030 +
             (C117 * C463 + C50744 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C50760 * C111 +
           (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
            C531 * C1037 - C532 * C1032) *
               C50760 * C112 +
           (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
            C763 * C1037 - C764 * C1032) *
               C50760 * C113 +
           (C763 * C1036 - (C532 * C1030 + C531 * C1035) + C764 * C1031 -
            (C117 * C754 + C50744 * C755) * C1037 -
            (C117 * C756 + C50744 * C757) * C1032) *
               C50760 * C114) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1035 + (C2350 + C2349 + C2348) * C1030 -
            (C2353 + C2352 + C2351) * C1036 - (C2356 + C2355 + C2354) * C1031 +
            (C2359 + C2358 + C2357) * C1037 + (C2362 + C2361 + C2360) * C1032) *
               C50760 * C50631) *
              C1687 +
          (((C2739 + C2740 + C2741) * C1036 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C1030 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1035) +
            (C2742 + C2743 + C2744) * C1031 - (C3073 + C3074 + C3075) * C1037 -
            (C3076 + C3077 + C3078) * C1032) *
               C50760 * C2303 +
           ((C3075 + C3074 + C3073) * C1036 -
            ((C2744 + C2743 + C2742) * C1030 +
             (C2741 + C2740 + C2739) * C1035) +
            (C3078 + C3077 + C3076) * C1031 -
            (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
             C2305 * C465 + C2300 * C478) *
                C1037 -
            (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
             C2305 * C479 + C2300 * C495) *
                C1032) *
               C50760 * C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C1109 +
             (C2350 + C2349 + C2348) * C50605) *
                C50760 * C50631) *
               C1687 -
           (((C2744 + C2743 + C2742) * C50605 +
             (C2741 + C2740 + C2739) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50605 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1109) *
                C50760 * C2303) *
               C50727) *
              C280 +
          ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C1109 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50605) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C1109 +
             (C3302 + C3301 + C3300) * C50605) *
                C50760 * C50631) *
               C50727 -
           (((C2550 + C2549 + C2548) * C50605 +
             (C2547 + C2546 + C2545) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C50760 * C2303) *
               C1687) *
              C281 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C50760 * C2303 +
            ((C2553 + C2552 + C2551) * C1109 +
             (C2556 + C2555 + C2554) * C50605) *
                C50760 * C50631) *
               C1687 -
           (((C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
              C2305 * C1581 + C2300 * C1587) *
                 C50605 +
             (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
              C2305 * C1575 + C2300 * C1582) *
                 C1109) *
                C50760 * C50631 +
            ((C2307 * C4198 + C2302 * C4201 + C2306 * C3276 + C2301 * C3281 +
              C2305 * C1583 + C2300 * C1588) *
                 C50605 +
             (C2307 * C4195 + C2302 * C4199 + C2306 * C3272 + C2301 * C3275 +
              C2305 * C1576 + C2300 * C1584) *
                 C1109) *
                C50760 * C2303) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C5192 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C5193 +
            (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C5194) *
               C2303 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C5192 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C5193 +
            (C7272 + C7273 - C7274 - C7275 + C7276 + C7277) * C5194) *
               C50631) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C5192 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C5193 +
            (C5559 * C1036 - (C5560 * C1030 + C5561 * C1035) + C5562 * C1031 -
             C5563 * C1037 - C5564 * C1032) *
                C5194) *
               C2303 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C5192 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C5193 +
            (C5563 * C1036 - (C5562 * C1030 + C5559 * C1035) + C5564 * C1031 -
             (C117 * C1857 + C50744 * C1862) * C1037 -
             (C117 * C1861 + C50744 * C1869) * C1032) *
                C5194) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C5192 +
             (C6536 + C6537) * C5193 + C6562 * C5194) *
                C2303 +
            ((C171 * C1109 + C172 * C50605) * C5192 + (C6540 + C6541) * C5193 +
             C6563 * C5194) *
                C50631) *
               C1687 -
           (((C6544 + C6545) * C5194 + (C6543 + C6542) * C5193 +
             (C6541 + C6540) * C5192) *
                C50631 +
            ((C6546 + C6547) * C5194 + (C6539 + C6538) * C5193 +
             (C6537 + C6536) * C5192) *
                C2303) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C5192 + (C6550 + C6551) * C5193 +
             (C6568 + C6569) * C5194) *
                C2303 +
            ((C6556 + C6557) * C5192 + (C6558 + C6559) * C5193 +
             (C6560 + C6561) * C5194) *
                C50631) *
               C50727 -
           ((C6566 * C5194 + (C6557 + C6556) * C5193 +
             (C351 * C50605 + C350 * C1109) * C5192) *
                C50631 +
            (C6567 * C5194 + (C6549 + C6548) * C5193 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C5192) *
                C2303) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C5192 +
             (C7104 + C7105) * C5193 + (C7106 + C7107) * C5194) *
                C2303 +
            ((C356 * C1109 + C357 * C50605) * C5192 + (C7096 + C7097) * C5193 +
             (C7098 + C7099) * C5194) *
                C50631) *
               C1687 -
           ((((C117 * C4596 + C50744 * C4604) * C50605 +
              (C117 * C4592 + C50744 * C4598) * C1109) *
                 C5194 +
             (C7099 + C7098) * C5193 + (C7097 + C7096) * C5192) *
                C50631 +
            (((C117 * C4600 + C50744 * C4606) * C50605 +
              (C117 * C4594 + C50744 * C4602) * C1109) *
                 C5194 +
             (C7107 + C7106) * C5193 + (C7105 + C7104) * C5192) *
                C2303) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50744 * C129) * C641 +
                     (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
                     C172 * C50931 + C173 * C643 + C174 * C638) *
                        C50903 +
                    (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C50824) *
                       C50932 +
                   ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
                     C175 * C643 + C176 * C638) *
                        C50903 +
                    (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C50824) *
                       C50933 +
                   ((C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
                     C177 * C643 + C178 * C638) *
                        C50903 +
                    (C529 * C641 + C530 * C50930 - C531 * C642 - C532 * C50931 +
                     C763 * C643 + C764 * C638) *
                        C50824) *
                       C8143) *
                      C50663 * C50889 +
                  (((C350 * C642 -
                     ((C117 * C296 + C50744 * C315) * C50930 +
                      (C117 * C286 + C50744 * C297) * C641) +
                     C351 * C50931 - C352 * C643 - C353 * C638) *
                        C50903 +
                    (C927 * C642 - (C6128 * C50930 + C6129 * C641) +
                     C928 * C50931 - C929 * C643 - C930 * C638) *
                        C50824) *
                       C50932 +
                   ((C352 * C642 - (C351 * C50930 + C350 * C641) +
                     C353 * C50931 - C354 * C643 - C355 * C638) *
                        C50903 +
                    (C929 * C642 - (C928 * C50930 + C927 * C641) +
                     C930 * C50931 - C931 * C643 - C932 * C638) *
                        C50824) *
                       C50933 +
                   ((C354 * C642 - (C353 * C50930 + C352 * C641) +
                     C355 * C50931 - C653 * C643 - C654 * C638) *
                        C50903 +
                    (C931 * C642 - (C930 * C50930 + C929 * C641) +
                     C932 * C50931 - (C117 * C898 + C50744 * C907) * C643 -
                     (C117 * C908 + C50744 * C913) * C638) *
                        C50824) *
                       C8143) *
                      C50663 * C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C283 +
              (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
              C172 * C50610) *
                 C50903 +
             (C5567 + C5568 - C5522 - C5523) * C50824) *
                C50932 +
            ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) *
                 C50903 +
             (C5530 + C5531 - C5532 - C5533) * C50824) *
                C50933 +
            ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) *
                 C50903 +
             (C11275 + C11276 - C11277 - C11278) * C50824) *
                C8143) *
               C50890 +
           (((C5522 - (C5568 + C5567) + C5523) * C50903 +
             (C5528 - (C5570 + C5569) + C5529) * C50824) *
                C50932 +
            ((C5532 - (C5531 + C5530) + C5533) * C50903 +
             (C5536 - (C5535 + C5534) + C5537) * C50824) *
                C50933 +
            ((C11277 - (C11276 + C11275) + C11278) * C50903 +
             (C11279 - (C11280 + C11281) + C11282) * C50824) *
                C8143) *
               C50727) *
              C50889 +
          ((((C350 * C284 -
              ((C117 * C296 + C50744 * C315) * C278 +
               (C117 * C286 + C50744 * C297) * C283) +
              C351 * C50610) *
                 C50903 +
             (C6104 - (C6134 + C6135) + C6109) * C50824) *
                C50932 +
            ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                 C50903 +
             (C6116 - (C6117 + C6118) + C6119) * C50824) *
                C50933 +
            ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                 C50903 +
             (C11775 - (C11776 + C11777) + C11778) * C50824) *
                C8143) *
               C50890 +
           (((C6135 + C6134 - C6104 - C6109) * C50903 +
             (C6137 + C6136 - C6110 - C6115) * C50824) *
                C50932 +
            ((C6118 + C6117 - C6116 - C6119) * C50903 +
             (C6122 + C6121 - C6120 - C6123) * C50824) *
                C50933 +
            ((C11777 + C11776 - C11775 - C11778) * C50903 +
             (C5734 * C283 + C5735 * C278 -
              (C117 * C1224 + C50744 * C1229) * C284 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C8143) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C50903 +
            (C5567 + C5568 - C5522 - C5523) * C50824) *
               C50932 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50903 +
            (C5530 + C5531 - C5532 - C5533) * C50824) *
               C50933 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50903 +
            (C529 * C283 + C530 * C278 - C531 * C284 - C532 * C50610) *
                C50824) *
               C8143) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C50903 +
            (C6104 - (C6134 + C6135) + C6109) * C50824) *
               C50932 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C50903 +
            (C6116 - (C6117 + C6118) + C6119) * C50824) *
               C50933 +
           ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                C50903 +
            (C931 * C284 - (C930 * C278 + C929 * C283) + C932 * C50610) *
                C50824) *
               C8143) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C50903 +
            (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
                C50824) *
               C50932 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C50903 +
            (C5356 * C283 + C5357 * C278 - C11127 * C284 - C11128 * C50610) *
                C50824) *
               C50933 +
           ((C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) * C50903 +
            (C11127 * C283 + C11128 * C278 -
             (C117 * C1573 + C50744 * C1578) * C284 -
             (C117 * C1577 + C50744 * C1585) * C50610) *
                C50824) *
               C8143) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50903 +
           (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C50824) *
              C50932 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50903 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C50824) *
              C50933 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C50903 +
           (C529 * C118 + C530 * C106 - C531 * C119 - C532 * C107 +
            C763 * C120 + C764 * C108 - (C117 * C754 + C50744 * C755) * C121 -
            (C117 * C756 + C50744 * C757) * C109) *
               C50824) *
              C8143) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C50903 +
            (C5567 + C5568 - C5522 - C5523) * C50824) *
               C50932 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50903 +
            (C5530 + C5531 - C5532 - C5533) * C50824) *
               C50933 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50903 +
            (C11275 + C11276 - C11277 - C11278) * C50824) *
               C8143) *
              C459 +
          (((C5522 - (C5568 + C5567) + C5523) * C50903 +
            (C5528 - (C5570 + C5569) + C5529) * C50824) *
               C50932 +
           ((C5532 - (C5531 + C5530) + C5533) * C50903 +
            (C5536 - (C5535 + C5534) + C5537) * C50824) *
               C50933 +
           ((C11277 - (C11276 + C11275) + C11278) * C50903 +
            (C11279 - (C11280 + C11281) + C11282) * C50824) *
               C8143) *
              C460 +
          ((C5583 * C50903 + (C5574 + C5573 - C5572 - C5575) * C50824) *
               C50932 +
           (C5581 * C50903 + (C5578 + C5577 - C5576 - C5579) * C50824) *
               C50933 +
           ((C11281 + C11280 - C11279 - C11282) * C50903 +
            (C5563 * C283 + C5564 * C278 -
             (C117 * C1857 + C50744 * C1862) * C284 -
             (C117 * C1861 + C50744 * C1869) * C50610) *
                C50824) *
               C8143) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C641 +
             (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
             C172 * C50931 + C173 * C643 + C174 * C638) *
                C50903 +
            (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C50824) *
               C50932 +
           ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
             C175 * C643 + C176 * C638) *
                C50903 +
            (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C50824) *
               C50933 +
           ((C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
             C177 * C643 + C178 * C638) *
                C50903 +
            (C11575 + C11576 - C11577 - C11578 + C11579 + C11580) * C50824) *
               C8143) *
              C50890 +
          (((C5884 - (C5883 + C5882) + C5885 - C5886 - C5887) * C50903 +
            (C5890 - (C5889 + C5888) + C5891 - C5892 - C5893) * C50824) *
               C50932 +
           ((C5896 - (C5895 + C5894) + C5897 - C5898 - C5899) * C50903 +
            (C5902 - (C5901 + C5900) + C5903 - C5904 - C5905) * C50824) *
               C50933 +
           ((C11577 - (C11576 + C11575) + C11578 - C11579 - C11580) * C50903 +
            (C537 * C642 - (C536 * C50930 + C535 * C641) + C538 * C50931 -
             (C117 * C471 + C50744 * C490) * C643 -
             (C117 * C491 + C50744 * C501) * C638) *
                C50824) *
               C8143) *
              C50727) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50903 +
           (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C50824) *
              C50932 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50903 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C50824) *
              C50933 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C50903 +
           (C529 * C118 + C530 * C106 - C531 * C119 - C532 * C107 +
            C763 * C120 + C764 * C108 - (C117 * C754 + C50744 * C755) * C121 -
            (C117 * C756 + C50744 * C757) * C109) *
               C50824) *
              C8143) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C50903 +
            (C5567 + C5568 - C5522 - C5523) * C50824) *
               C50932 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50903 +
            (C5530 + C5531 - C5532 - C5533) * C50824) *
               C50933 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50903 +
            (C529 * C283 + C530 * C278 - C531 * C284 - C532 * C50610) *
                C50824) *
               C8143) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C50903 +
            (C6104 - (C6134 + C6135) + C6109) * C50824) *
               C50932 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C50903 +
            (C6116 - (C6117 + C6118) + C6119) * C50824) *
               C50933 +
           ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                C50903 +
            (C931 * C284 - (C930 * C278 + C929 * C283) + C932 * C50610) *
                C50824) *
               C8143) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C50903 +
            (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
                C50824) *
               C50932 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C50903 +
            (C5356 * C283 + C5357 * C278 - C11127 * C284 - C11128 * C50610) *
                C50824) *
               C50933 +
           ((C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) * C50903 +
            (C11127 * C283 + C11128 * C278 -
             (C117 * C1573 + C50744 * C1578) * C284 -
             (C117 * C1577 + C50744 * C1585) * C50610) *
                C50824) *
               C8143) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C50903 +
            (C6910 + C6911 - C6912 - C6913) * C50824) *
               C50932 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C50903 +
            (C6918 + C6919 - C6920 - C6921) * C50824) *
               C50933 +
           ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C50903 +
            (C529 * C49720 + C530 * C50874 - C531 * C49713 - C532 * C50610) *
                C50824) *
               C8143) *
              C50663 * C50934 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C50903 +
            (C6926 - (C6927 + C6928) + C6929) * C50824) *
               C50932 +
           ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C50903 +
            (C6934 - (C6935 + C6936) + C6937) * C50824) *
               C50933 +
           ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                C50903 +
            (C931 * C49713 - (C930 * C50874 + C929 * C49720) + C932 * C50610) *
                C50824) *
               C8143) *
              C50663 * C50935 +
          ((((C117 * C290 + C50744 * C305) * C49720 +
             (C117 * C306 + C50744 * C320) * C50874 - C356 * C49713 -
             C357 * C50610) *
                C50903 +
            (C7100 * C49720 + C7101 * C50874 - C5356 * C49713 -
             C5357 * C50610) *
                C50824) *
               C50932 +
           ((C356 * C49720 + C357 * C50874 - C358 * C49713 - C359 * C50610) *
                C50903 +
            (C5356 * C49720 + C5357 * C50874 - C11127 * C49713 -
             C11128 * C50610) *
                C50824) *
               C50933 +
           ((C358 * C49720 + C359 * C50874 - C360 * C49713 - C361 * C50610) *
                C50903 +
            (C11127 * C49720 + C11128 * C50874 -
             (C117 * C1573 + C50744 * C1578) * C49713 -
             (C117 * C1577 + C50744 * C1585) * C50610) *
                C50824) *
               C8143) *
              C50663 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50903 +
             (C6536 + C6537) * C50824) *
                C50932 +
            ((C171 * C1109 + C172 * C50605) * C50903 +
             (C6540 + C6541) * C50824) *
                C50933 +
            ((C173 * C1109 + C174 * C50605) * C50903 +
             (C12169 + C12170) * C50824) *
                C8143) *
               C50890 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C50903) * C8143 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C50903) * C50933 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C50903) * C50932) *
               C50727) *
              C50934 +
          ((((C6548 + C6549) * C50903 + (C6550 + C6551) * C50824) * C50932 +
            ((C6556 + C6557) * C50903 + (C6558 + C6559) * C50824) * C50933 +
            ((C12173 + C12174) * C50903 + (C12175 + C12176) * C50824) * C8143) *
               C50727 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C50903) *
                C8143 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C50903) *
                C50933 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50903) *
                C50932) *
               C50890) *
              C50935 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C50903 +
             (C7104 + C7105) * C50824) *
                C50932 +
            ((C356 * C1109 + C357 * C50605) * C50903 +
             (C7096 + C7097) * C50824) *
                C50933 +
            ((C358 * C1109 + C359 * C50605) * C50903 +
             (C12671 + C12672) * C50824) *
                C8143) *
               C50890 -
           ((((C117 * C2710 + C50744 * C2713) * C50605 +
              (C117 * C2704 + C50744 * C2709) * C1109) *
                 C50824 +
             (C12672 + C12671) * C50903) *
                C8143 +
            ((C7099 + C7098) * C50824 + (C7097 + C7096) * C50903) * C50933 +
            ((C7107 + C7106) * C50824 + (C7105 + C7104) * C50903) * C50932) *
               C50727) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50903 +
            (C6536 + C6537) * C50824) *
               C50932 +
           ((C171 * C1109 + C172 * C50605) * C50903 +
            (C6540 + C6541) * C50824) *
               C50933 +
           ((C173 * C1109 + C174 * C50605) * C50903 +
            (C529 * C1109 + C530 * C50605) * C50824) *
               C8143) *
              C50663 * C1105 -
          (((C930 * C50605 + C929 * C1109) * C50824 +
            (C353 * C50605 + C352 * C1109) * C50903) *
               C8143 +
           ((C6557 + C6556) * C50824 +
            (C351 * C50605 + C350 * C1109) * C50903) *
               C50933 +
           ((C6549 + C6548) * C50824 + ((C117 * C296 + C50744 * C315) * C50605 +
                                        (C117 * C286 + C50744 * C297) * C1109) *
                                           C50903) *
               C50932) *
              C50663 * C1106 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C50903 +
            (C7104 + C7105) * C50824) *
               C50932 +
           ((C356 * C1109 + C357 * C50605) * C50903 +
            (C7096 + C7097) * C50824) *
               C50933 +
           ((C358 * C1109 + C359 * C50605) * C50903 +
            (C11127 * C1109 + C11128 * C50605) * C50824) *
               C8143) *
              C50663 * C1107 -
          ((((C117 * C3280 + C50744 * C3283) * C50605 +
             (C117 * C3274 + C50744 * C3279) * C1109) *
                C50824 +
            ((C117 * C1116 + C50744 * C1123) * C50605 +
             (C117 * C1111 + C50744 * C1117) * C1109) *
                C50903) *
               C8143 +
           (((C117 * C3278 + C50744 * C3282) * C50605 +
             (C117 * C3273 + C50744 * C3277) * C1109) *
                C50824 +
            ((C117 * C1118 + C50744 * C1124) * C50605 +
             (C117 * C1112 + C50744 * C1119) * C1109) *
                C50903) *
               C50933 +
           (((C117 * C3276 + C50744 * C3281) * C50605 +
             (C117 * C3272 + C50744 * C3275) * C1109) *
                C50824 +
            ((C117 * C1120 + C50744 * C1125) * C50605 +
             (C117 * C1113 + C50744 * C1121) * C1109) *
                C50903) *
               C50932) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C50903 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C50932 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50903 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C50933 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C50903 +
            (C529 * C1035 + C530 * C1030 - C531 * C1036 - C532 * C1031 +
             C763 * C1037 + C764 * C1032) *
                C50824) *
               C8143) *
              C50663 * C1033 +
          (((C350 * C1036 -
             ((C117 * C296 + C50744 * C315) * C1030 +
              (C117 * C286 + C50744 * C297) * C1035) +
             C351 * C1031 - C352 * C1037 - C353 * C1032) *
                C50903 +
            (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C50824) *
               C50932 +
           ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
             C354 * C1037 - C355 * C1032) *
                C50903 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50824) *
               C50933 +
           ((C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
             C653 * C1037 - C654 * C1032) *
                C50903 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50744 * C907) * C1037 -
             (C117 * C908 + C50744 * C913) * C1032) *
                C50824) *
               C8143) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50903 +
             (C6536 + C6537) * C50824) *
                C50932 +
            ((C171 * C1109 + C172 * C50605) * C50903 +
             (C6540 + C6541) * C50824) *
                C50933 +
            ((C173 * C1109 + C174 * C50605) * C50903 +
             (C12169 + C12170) * C50824) *
                C8143) *
               C459 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C50903) * C8143 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C50903) * C50933 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C50903) * C50932) *
               C460 +
           ((C6562 * C50903 + (C6547 + C6546) * C50824) * C50932 +
            (C6563 * C50903 + (C6545 + C6544) * C50824) * C50933 +
            ((C12172 + C12171) * C50903 +
             (C5563 * C1109 + C5564 * C50605) * C50824) *
                C8143) *
               C461) *
              C1033 +
          ((((C6548 + C6549) * C50903 + (C6550 + C6551) * C50824) * C50932 +
            ((C6556 + C6557) * C50903 + (C6558 + C6559) * C50824) * C50933 +
            ((C12173 + C12174) * C50903 + (C12175 + C12176) * C50824) * C8143) *
               C460 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C50903) *
                C8143 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C50903) *
                C50933 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50903) *
                C50932) *
               C459 -
           ((((C117 * C6101 + C50744 * C6102) * C50605 +
              (C117 * C6099 + C50744 * C6100) * C1109) *
                 C50824 +
             (C12176 + C12175) * C50903) *
                C8143 +
            ((C6561 + C6560) * C50824 + C6566 * C50903) * C50933 +
            ((C6569 + C6568) * C50824 + C6567 * C50903) * C50932) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C50903 +
             (C6910 + C6911 - C6912 - C6913) * C50824) *
                C50932 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C50903 +
             (C6918 + C6919 - C6920 - C6921) * C50824) *
                C50933 +
            ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                 C50903 +
             (C12517 + C12518 - C12519 - C12520) * C50824) *
                C8143) *
               C50890 +
           (((C6912 - (C6911 + C6910) + C6913) * C50903 +
             (C6916 - (C6915 + C6914) + C6917) * C50824) *
                C50932 +
            ((C6920 - (C6919 + C6918) + C6921) * C50903 +
             (C6924 - (C6923 + C6922) + C6925) * C50824) *
                C50933 +
            ((C12519 - (C12518 + C12517) + C12520) * C50903 +
             (C537 * C49713 - (C536 * C50874 + C535 * C49720) + C538 * C50610) *
                 C50824) *
                C8143) *
               C50727) *
              C1033 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C50903 +
             (C6926 - (C6927 + C6928) + C6929) * C50824) *
                C50932 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C50903 +
             (C6934 - (C6935 + C6936) + C6937) * C50824) *
                C50933 +
            ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                 C50903 +
             (C12521 - (C12522 + C12523) + C12524) * C50824) *
                C8143) *
               C50890 +
           (((C6928 + C6927 - C6926 - C6929) * C50903 +
             (C6932 + C6931 - C6930 - C6933) * C50824) *
                C50932 +
            ((C6936 + C6935 - C6934 - C6937) * C50903 +
             (C6940 + C6939 - C6938 - C6941) * C50824) *
                C50933 +
            ((C12523 + C12522 - C12521 - C12524) * C50903 +
             (C5734 * C49720 + C5735 * C50874 -
              (C117 * C1224 + C50744 * C1229) * C49713 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C8143) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C50903 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C50932 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50903 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C50933 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C50903 +
            (C529 * C1035 + C530 * C1030 - C531 * C1036 - C532 * C1031 +
             C763 * C1037 + C764 * C1032) *
                C50824) *
               C8143) *
              C50663 * C1033 +
          (((C350 * C1036 -
             ((C117 * C296 + C50744 * C315) * C1030 +
              (C117 * C286 + C50744 * C297) * C1035) +
             C351 * C1031 - C352 * C1037 - C353 * C1032) *
                C50903 +
            (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C50824) *
               C50932 +
           ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
             C354 * C1037 - C355 * C1032) *
                C50903 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50824) *
               C50933 +
           ((C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
             C653 * C1037 - C654 * C1032) *
                C50903 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50744 * C907) * C1037 -
             (C117 * C908 + C50744 * C913) * C1032) *
                C50824) *
               C8143) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50903 +
            (C6536 + C6537) * C50824) *
               C50932 +
           ((C171 * C1109 + C172 * C50605) * C50903 +
            (C6540 + C6541) * C50824) *
               C50933 +
           ((C173 * C1109 + C174 * C50605) * C50903 +
            (C529 * C1109 + C530 * C50605) * C50824) *
               C8143) *
              C50663 * C1105 -
          (((C930 * C50605 + C929 * C1109) * C50824 +
            (C353 * C50605 + C352 * C1109) * C50903) *
               C8143 +
           ((C6557 + C6556) * C50824 +
            (C351 * C50605 + C350 * C1109) * C50903) *
               C50933 +
           ((C6549 + C6548) * C50824 + ((C117 * C296 + C50744 * C315) * C50605 +
                                        (C117 * C286 + C50744 * C297) * C1109) *
                                           C50903) *
               C50932) *
              C50663 * C1106 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C50903 +
            (C7104 + C7105) * C50824) *
               C50932 +
           ((C356 * C1109 + C357 * C50605) * C50903 +
            (C7096 + C7097) * C50824) *
               C50933 +
           ((C358 * C1109 + C359 * C50605) * C50903 +
            (C11127 * C1109 + C11128 * C50605) * C50824) *
               C8143) *
              C50663 * C1107 -
          ((((C117 * C3280 + C50744 * C3283) * C50605 +
             (C117 * C3274 + C50744 * C3279) * C1109) *
                C50824 +
            ((C117 * C1116 + C50744 * C1123) * C50605 +
             (C117 * C1111 + C50744 * C1117) * C1109) *
                C50903) *
               C8143 +
           (((C117 * C3278 + C50744 * C3282) * C50605 +
             (C117 * C3273 + C50744 * C3277) * C1109) *
                C50824 +
            ((C117 * C1118 + C50744 * C1124) * C50605 +
             (C117 * C1112 + C50744 * C1119) * C1109) *
                C50903) *
               C50933 +
           (((C117 * C3276 + C50744 * C3281) * C50605 +
             (C117 * C3272 + C50744 * C3275) * C1109) *
                C50824 +
            ((C117 * C1120 + C50744 * C1125) * C50605 +
             (C117 * C1113 + C50744 * C1121) * C1109) *
                C50903) *
               C50932) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C50903 +
             (C6910 + C6911 - C6912 - C6913) * C50824) *
                C50932 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C50903 +
             (C6918 + C6919 - C6920 - C6921) * C50824) *
                C50933 +
            ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                 C50903 +
             (C12517 + C12518 - C12519 - C12520) * C50824) *
                C8143) *
               C1687 +
           (((C6912 - (C6911 + C6910) + C6913) * C50903 +
             (C6916 - (C6915 + C6914) + C6917) * C50824) *
                C50932 +
            ((C6920 - (C6919 + C6918) + C6921) * C50903 +
             (C6924 - (C6923 + C6922) + C6925) * C50824) *
                C50933 +
            ((C12519 - (C12518 + C12517) + C12520) * C50903 +
             (C537 * C49713 - (C536 * C50874 + C535 * C49720) + C538 * C50610) *
                 C50824) *
                C8143) *
               C50727) *
              C50889 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C50903 +
             (C6926 - (C6927 + C6928) + C6929) * C50824) *
                C50932 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C50903 +
             (C6934 - (C6935 + C6936) + C6937) * C50824) *
                C50933 +
            ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                 C50903 +
             (C12521 - (C12522 + C12523) + C12524) * C50824) *
                C8143) *
               C1687 +
           (((C6928 + C6927 - C6926 - C6929) * C50903 +
             (C6932 + C6931 - C6930 - C6933) * C50824) *
                C50932 +
            ((C6936 + C6935 - C6934 - C6937) * C50903 +
             (C6940 + C6939 - C6938 - C6941) * C50824) *
                C50933 +
            ((C12523 + C12522 - C12521 - C12524) * C50903 +
             (C5734 * C49720 + C5735 * C50874 -
              (C117 * C1224 + C50744 * C1229) * C49713 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C8143) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50903 +
             (C6536 + C6537) * C50824) *
                C50932 +
            ((C171 * C1109 + C172 * C50605) * C50903 +
             (C6540 + C6541) * C50824) *
                C50933 +
            ((C173 * C1109 + C174 * C50605) * C50903 +
             (C12169 + C12170) * C50824) *
                C8143) *
               C50936 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C50903) * C8143 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C50903) * C50933 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C50903) * C50932) *
               C50937 +
           ((C6562 * C50903 + (C6547 + C6546) * C50824) * C50932 +
            (C6563 * C50903 + (C6545 + C6544) * C50824) * C50933 +
            ((C12172 + C12171) * C50903 + (C13069 + C13070) * C50824) * C8143) *
               C2103) *
              C50889 +
          ((((C6548 + C6549) * C50903 + (C6550 + C6551) * C50824) * C50932 +
            ((C6556 + C6557) * C50903 + (C6558 + C6559) * C50824) * C50933 +
            ((C12173 + C12174) * C50903 + (C12175 + C12176) * C50824) * C8143) *
               C50937 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C50903) *
                C8143 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C50903) *
                C50933 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50903) *
                C50932) *
               C50936 -
           ((((C117 * C6101 + C50744 * C6102) * C50605 +
              (C117 * C6099 + C50744 * C6100) * C1109) *
                 C50824 +
             (C12176 + C12175) * C50903) *
                C8143 +
            ((C6561 + C6560) * C50824 + C6566 * C50903) * C50933 +
            ((C6569 + C6568) * C50824 + C6567 * C50903) * C50932) *
               C2103) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50903 +
             (C6536 + C6537) * C50824) *
                C50932 +
            ((C171 * C1109 + C172 * C50605) * C50903 +
             (C6540 + C6541) * C50824) *
                C50933 +
            ((C173 * C1109 + C174 * C50605) * C50903 +
             (C12169 + C12170) * C50824) *
                C8143) *
               C1687 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C50903) * C8143 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C50903) * C50933 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C50903) * C50932) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C50903 + (C6550 + C6551) * C50824) * C50932 +
            ((C6556 + C6557) * C50903 + (C6558 + C6559) * C50824) * C50933 +
            ((C12173 + C12174) * C50903 + (C12175 + C12176) * C50824) * C8143) *
               C50727 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C50903) *
                C8143 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C50903) *
                C50933 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50903) *
                C50932) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C50903 +
             (C7104 + C7105) * C50824) *
                C50932 +
            ((C356 * C1109 + C357 * C50605) * C50903 +
             (C7096 + C7097) * C50824) *
                C50933 +
            ((C358 * C1109 + C359 * C50605) * C50903 +
             (C12671 + C12672) * C50824) *
                C8143) *
               C1687 -
           ((((C117 * C2710 + C50744 * C2713) * C50605 +
              (C117 * C2704 + C50744 * C2709) * C1109) *
                 C50824 +
             (C12672 + C12671) * C50903) *
                C8143 +
            ((C7099 + C7098) * C50824 + (C7097 + C7096) * C50903) * C50933 +
            ((C7107 + C7106) * C50824 + (C7105 + C7104) * C50903) * C50932) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C50903 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C50932 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50903 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C50933 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C50903 +
            (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) * C50824) *
               C8143) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C50903 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C50824) *
               C50932 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C50903 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C50824) *
               C50933 +
           ((C12821 - (C12820 + C12819) + C12822 - C12823 - C12824) * C50903 +
            (C537 * C1036 - (C536 * C1030 + C535 * C1035) + C538 * C1031 -
             (C117 * C471 + C50744 * C490) * C1037 -
             (C117 * C491 + C50744 * C501) * C1032) *
                C50824) *
               C8143) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50903 +
            (C6536 + C6537) * C50824) *
               C50932 +
           ((C171 * C1109 + C172 * C50605) * C50903 +
            (C6540 + C6541) * C50824) *
               C50933 +
           ((C173 * C1109 + C174 * C50605) * C50903 +
            (C12169 + C12170) * C50824) *
               C8143) *
              C1853 -
          (((C12171 + C12172) * C50824 + (C12170 + C12169) * C50903) * C8143 +
           ((C6543 + C6542) * C50824 + (C6541 + C6540) * C50903) * C50933 +
           ((C6539 + C6538) * C50824 + (C6537 + C6536) * C50903) * C50932) *
              C1854 +
          ((C6562 * C50903 + (C6547 + C6546) * C50824) * C50932 +
           (C6563 * C50903 + (C6545 + C6544) * C50824) * C50933 +
           ((C12172 + C12171) * C50903 + (C13069 + C13070) * C50824) * C8143) *
              C1855 -
          ((((C117 * C5513 + C50744 * C5516) * C50605 +
             (C117 * C5507 + C50744 * C5512) * C1109) *
                C50824 +
            (C13070 + C13069) * C50903) *
               C8143 +
           ((C7537 + C7536) * C50824 + C7530 * C50903) * C50933 +
           ((C7541 + C7540) * C50824 + C7531 * C50903) * C50932) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C50903 +
            (C6910 + C6911 - C6912 - C6913) * C50824) *
               C50932 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C50903 +
            (C6918 + C6919 - C6920 - C6921) * C50824) *
               C50933 +
           ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C50903 +
            (C12517 + C12518 - C12519 - C12520) * C50824) *
               C8143) *
              C50936 +
          (((C6912 - (C6911 + C6910) + C6913) * C50903 +
            (C6916 - (C6915 + C6914) + C6917) * C50824) *
               C50932 +
           ((C6920 - (C6919 + C6918) + C6921) * C50903 +
            (C6924 - (C6923 + C6922) + C6925) * C50824) *
               C50933 +
           ((C12519 - (C12518 + C12517) + C12520) * C50903 +
            (C13411 - (C13412 + C13413) + C13414) * C50824) *
               C8143) *
              C50937 +
          ((C7894 * C50903 + (C7886 + C7885 - C7884 - C7887) * C50824) *
               C50932 +
           (C7895 * C50903 + (C7890 + C7889 - C7888 - C7891) * C50824) *
               C50933 +
           ((C13413 + C13412 - C13411 - C13414) * C50903 +
            (C5563 * C49720 + C5564 * C50874 -
             (C117 * C1857 + C50744 * C1862) * C49713 -
             (C117 * C1861 + C50744 * C1869) * C50610) *
                C50824) *
               C8143) *
              C2103) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C50903 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C50932 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50903 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C50933 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C50903 +
            (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) * C50824) *
               C8143) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C50903 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C50824) *
               C50932 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C50903 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C50824) *
               C50933 +
           ((C12821 - (C12820 + C12819) + C12822 - C12823 - C12824) * C50903 +
            (C537 * C1036 - (C536 * C1030 + C535 * C1035) + C538 * C1031 -
             (C117 * C471 + C50744 * C490) * C1037 -
             (C117 * C491 + C50744 * C501) * C1032) *
                C50824) *
               C8143) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50903 +
             (C6536 + C6537) * C50824) *
                C50932 +
            ((C171 * C1109 + C172 * C50605) * C50903 +
             (C6540 + C6541) * C50824) *
                C50933 +
            ((C173 * C1109 + C174 * C50605) * C50903 +
             (C12169 + C12170) * C50824) *
                C8143) *
               C1687 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C50903) * C8143 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C50903) * C50933 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C50903) * C50932) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C50903 + (C6550 + C6551) * C50824) * C50932 +
            ((C6556 + C6557) * C50903 + (C6558 + C6559) * C50824) * C50933 +
            ((C12173 + C12174) * C50903 + (C12175 + C12176) * C50824) * C8143) *
               C50727 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C50903) *
                C8143 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C50903) *
                C50933 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50903) *
                C50932) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C50903 +
             (C7104 + C7105) * C50824) *
                C50932 +
            ((C356 * C1109 + C357 * C50605) * C50903 +
             (C7096 + C7097) * C50824) *
                C50933 +
            ((C358 * C1109 + C359 * C50605) * C50903 +
             (C12671 + C12672) * C50824) *
                C8143) *
               C1687 -
           ((((C117 * C2710 + C50744 * C2713) * C50605 +
              (C117 * C2704 + C50744 * C2709) * C1109) *
                 C50824 +
             (C12672 + C12671) * C50903) *
                C8143 +
            ((C7099 + C7098) * C50824 + (C7097 + C7096) * C50903) * C50933 +
            ((C7107 + C7106) * C50824 + (C7105 + C7104) * C50903) * C50932) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C641 +
            (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
            C172 * C50931 + C173 * C643 + C174 * C638) *
               C50760 * C111 +
           (C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
            C175 * C643 + C176 * C638) *
               C50760 * C112 +
           (C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
            C177 * C643 + C178 * C638) *
               C50760 * C113 +
           (C175 * C641 + C176 * C50930 - C177 * C642 - C178 * C50931 +
            C179 * C643 + C180 * C638) *
               C50760 * C114) *
              C50663 * C50889 +
          ((C350 * C642 -
            ((C117 * C296 + C50744 * C315) * C50930 +
             (C117 * C286 + C50744 * C297) * C641) +
            C351 * C50931 - C352 * C643 - C353 * C638) *
               C50760 * C111 +
           (C352 * C642 - (C351 * C50930 + C350 * C641) + C353 * C50931 -
            C354 * C643 - C355 * C638) *
               C50760 * C112 +
           (C354 * C642 - (C353 * C50930 + C352 * C641) + C355 * C50931 -
            C653 * C643 - C654 * C638) *
               C50760 * C113 +
           (C653 * C642 - (C355 * C50930 + C354 * C641) + C654 * C50931 -
            (C117 * C644 + C50744 * C645) * C643 -
            (C117 * C646 + C50744 * C647) * C638) *
               C50760 * C114) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C641 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50930 -
            (C2345 + C2346 + C2347) * C642 - (C2348 + C2349 + C2350) * C50931 +
            (C2351 + C2352 + C2353) * C643 + (C2354 + C2355 + C2356) * C638) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C641 + (C2350 + C2349 + C2348) * C50930 -
            (C2353 + C2352 + C2351) * C642 - (C2356 + C2355 + C2354) * C50931 +
            (C2359 + C2358 + C2357) * C643 + (C2362 + C2361 + C2360) * C638) *
               C50760 * C50631) *
              C50663 * C50889 +
          (((C2545 + C2546 + C2547) * C642 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50930 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C641) +
            (C2548 + C2549 + C2550) * C50931 - (C2909 + C2910 + C2911) * C643 -
            (C2912 + C2913 + C2914) * C638) *
               C50760 * C2303 +
           ((C2911 + C2910 + C2909) * C642 -
            ((C2550 + C2549 + C2548) * C50930 +
             (C2547 + C2546 + C2545) * C641) +
            (C2914 + C2913 + C2912) * C50931 -
            (C2307 * C1110 + C2302 * C1115 + C2306 * C293 + C2301 * C311 +
             C2305 * C288 + C2300 * C301) *
                C643 -
            (C2307 * C1114 + C2302 * C1122 + C2306 * C312 + C2301 * C323 +
             C2305 * C302 + C2300 * C318) *
                C638) *
               C50760 * C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C50760 * C111 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50760 *
                C112 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50760 *
                C113 +
            (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50610) * C50760 *
                C114) *
               C50890 +
           ((C527 * C284 -
             ((C117 * C473 + C50744 * C492) * C278 +
              (C117 * C463 + C50744 * C474) * C283) +
             C528 * C50610) *
                C50760 * C111 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50610) *
                C50760 * C112 +
            (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50610) *
                C50760 * C113 +
            (C763 * C284 - (C532 * C278 + C531 * C283) + C764 * C50610) *
                C50760 * C114) *
               C50727) *
              C50889 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C50760 * C111 +
            (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C50760 * C112 +
            (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                C50760 * C113 +
            (C653 * C284 - (C355 * C278 + C354 * C283) + C654 * C50610) *
                C50760 * C114) *
               C50890 +
           (((C117 * C894 + C50744 * C899) * C283 +
             (C117 * C900 + C50744 * C909) * C278 - C927 * C284 -
             C928 * C50610) *
                C50760 * C111 +
            (C927 * C283 + C928 * C278 - C929 * C284 - C930 * C50610) * C50760 *
                C112 +
            (C929 * C283 + C930 * C278 - C931 * C284 - C932 * C50610) * C50760 *
                C113 +
            (C931 * C283 + C932 * C278 - (C117 * C898 + C50744 * C907) * C284 -
             (C117 * C908 + C50744 * C913) * C50610) *
                C50760 * C114) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C283 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C278 -
             (C2345 + C2346 + C2347) * C284 -
             (C2348 + C2349 + C2350) * C50610) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
             (C2353 + C2352 + C2351) * C284 -
             (C2356 + C2355 + C2354) * C50610) *
                C50760 * C50631) *
               C50890 +
           (((C2739 + C2740 + C2741) * C284 -
             ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
               C2305 * C473 + C2300 * C492) *
                  C278 +
              (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
               C2305 * C463 + C2300 * C474) *
                  C283) +
             (C2742 + C2743 + C2744) * C50610) *
                C50760 * C2303 +
            ((C3075 + C3074 + C3073) * C284 -
             ((C2744 + C2743 + C2742) * C278 + (C2741 + C2740 + C2739) * C283) +
             (C3078 + C3077 + C3076) * C50610) *
                C50760 * C50631) *
               C50727) *
              C50889 +
          ((((C2545 + C2546 + C2547) * C284 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C278 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C283) +
             (C2548 + C2549 + C2550) * C50610) *
                C50760 * C2303 +
            ((C2911 + C2910 + C2909) * C284 -
             ((C2550 + C2549 + C2548) * C278 + (C2547 + C2546 + C2545) * C283) +
             (C2914 + C2913 + C2912) * C50610) *
                C50760 * C50631) *
               C50890 +
           (((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C283 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C278 -
             (C3297 + C3298 + C3299) * C284 -
             (C3300 + C3301 + C3302) * C50610) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C283 + (C3302 + C3301 + C3300) * C278 -
             (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
              C2305 * C896 + C2300 * C903) *
                 C284 -
             (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
              C2305 * C904 + C2300 * C911) *
                 C50610) *
                C50760 * C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C283 +
            (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50760 *
               C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50760 *
               C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50610) * C50760 *
               C114) *
              C50663 * C280 +
          ((C350 * C284 -
            ((C117 * C296 + C50744 * C315) * C278 +
             (C117 * C286 + C50744 * C297) * C283) +
            C351 * C50610) *
               C50760 * C111 +
           (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
               C50760 * C112 +
           (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
               C50760 * C113 +
           ((C117 * C289 + C50744 * C303) * C284 - (C355 * C278 + C354 * C283) +
            (C117 * C304 + C50744 * C319) * C50610) *
               C50760 * C114) *
              C50663 * C281 +
          (((C117 * C290 + C50744 * C305) * C283 +
            (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
            C357 * C50610) *
               C50760 * C111 +
           (C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C50760 *
               C112 +
           (C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) * C50760 *
               C113 +
           (C360 * C283 + C361 * C278 - (C117 * C294 + C50744 * C313) * C284 -
            (C117 * C314 + C50744 * C324) * C50610) *
               C50760 * C114) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50744 * C129) * C118 +
           (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50760 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50760 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50760 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50744 * C141) * C121 -
           (C117 * C142 + C50744 * C149) * C109) *
              C50760 * C114) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C283 +
            (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50760 *
               C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50760 *
               C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50610) * C50760 *
               C114) *
              C459 +
          ((C527 * C284 -
            ((C117 * C473 + C50744 * C492) * C278 +
             (C117 * C463 + C50744 * C474) * C283) +
            C528 * C50610) *
               C50760 * C111 +
           (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50610) *
               C50760 * C112 +
           (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50610) *
               C50760 * C113 +
           ((C117 * C466 + C50744 * C480) * C284 - (C532 * C278 + C531 * C283) +
            (C117 * C481 + C50744 * C496) * C50610) *
               C50760 * C114) *
              C460 +
          (((C117 * C467 + C50744 * C482) * C283 +
            (C117 * C483 + C50744 * C497) * C278 - C533 * C284 -
            C534 * C50610) *
               C50760 * C111 +
           (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50610) * C50760 *
               C112 +
           (C535 * C283 + C536 * C278 - C537 * C284 - C538 * C50610) * C50760 *
               C113 +
           (C537 * C283 + C538 * C278 - (C117 * C471 + C50744 * C490) * C284 -
            (C117 * C491 + C50744 * C501) * C50610) *
               C50760 * C114) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
            C2307 * C290 + C2302 * C305) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
            C2307 * C306 + C2302 * C320) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C50760 * C2303 +
          ((C2347 + C2346 + C2345) * C118 + (C2350 + C2349 + C2348) * C106 -
           (C2353 + C2352 + C2351) * C119 - (C2356 + C2355 + C2354) * C107 +
           (C2359 + C2358 + C2357) * C120 + (C2362 + C2361 + C2360) * C108 -
           (C2307 * C294 + C2302 * C313 + C2306 * C289 + C2301 * C303 +
            C2305 * C126 + C2300 * C137) *
               C121 -
           (C2307 * C314 + C2302 * C324 + C2306 * C304 + C2301 * C319 +
            C2305 * C138 + C2300 * C147) *
               C109) *
              C50760 * C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C50663 * C280 +
          (((C2545 + C2546 + C2547) * C284 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C278 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C283) +
            (C2548 + C2549 + C2550) * C50610) *
               C50760 * C2303 +
           ((C2305 * C287 + C2300 * C299 + C2306 * C292 + C2301 * C309 +
             C2307 * C1111 + C2302 * C1117) *
                C284 -
            ((C2550 + C2549 + C2548) * C278 + (C2547 + C2546 + C2545) * C283) +
            (C2305 * C300 + C2300 * C317 + C2306 * C310 + C2301 * C322 +
             C2307 * C1116 + C2302 * C1123) *
                C50610) *
               C50760 * C50631) *
              C50663 * C281 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C283 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C278 -
            (C2551 + C2552 + C2553) * C284 - (C2554 + C2555 + C2556) * C50610) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C283 + (C2556 + C2555 + C2554) * C278 -
            (C2307 * C2510 + C2302 * C2515 + C2306 * C1111 + C2301 * C1117 +
             C2305 * C292 + C2300 * C309) *
                C284 -
            (C2307 * C2516 + C2302 * C2519 + C2306 * C1116 + C2301 * C1123 +
             C2305 * C310 + C2300 * C322) *
                C50610) *
               C50760 * C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C459 +
          (((C2739 + C2740 + C2741) * C284 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C278 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C283) +
            (C2742 + C2743 + C2744) * C50610) *
               C50760 * C2303 +
           ((C2305 * C464 + C2300 * C476 + C2306 * C896 + C2301 * C903 +
             C2307 * C1574 + C2302 * C1580) *
                C284 -
            ((C2744 + C2743 + C2742) * C278 + (C2741 + C2740 + C2739) * C283) +
            (C2305 * C477 + C2300 * C494 + C2306 * C904 + C2301 * C911 +
             C2307 * C1579 + C2302 * C1586) *
                C50610) *
               C50760 * C50631) *
              C460 +
          (((C2305 * C467 + C2300 * C482 + C2306 * C1227 + C2301 * C1235 +
             C2307 * C2702 + C2302 * C2705) *
                C283 +
            (C2305 * C483 + C2300 * C497 + C2306 * C1234 + C2301 * C1239 +
             C2307 * C2706 + C2302 * C2711) *
                C278 -
            (C2745 + C2746 + C2747) * C284 - (C2748 + C2749 + C2750) * C50610) *
               C50760 * C2303 +
           ((C2747 + C2746 + C2745) * C283 + (C2750 + C2749 + C2748) * C278 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C284 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C50610) *
               C50760 * C50631) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C641 +
            (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
            C172 * C50931 + C173 * C643 + C174 * C638) *
               C50760 * C111 +
           (C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
            C175 * C643 + C176 * C638) *
               C50760 * C112 +
           (C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
            C177 * C643 + C178 * C638) *
               C50760 * C113 +
           (C175 * C641 + C176 * C50930 - C177 * C642 - C178 * C50931 +
            C179 * C643 + C180 * C638) *
               C50760 * C114) *
              C50890 +
          ((C527 * C642 -
            ((C117 * C473 + C50744 * C492) * C50930 +
             (C117 * C463 + C50744 * C474) * C641) +
            C528 * C50931 - C529 * C643 - C530 * C638) *
               C50760 * C111 +
           (C529 * C642 - (C528 * C50930 + C527 * C641) + C530 * C50931 -
            C531 * C643 - C532 * C638) *
               C50760 * C112 +
           (C531 * C642 - (C530 * C50930 + C529 * C641) + C532 * C50931 -
            C763 * C643 - C764 * C638) *
               C50760 * C113 +
           (C763 * C642 - (C532 * C50930 + C531 * C641) + C764 * C50931 -
            (C117 * C754 + C50744 * C755) * C643 -
            (C117 * C756 + C50744 * C757) * C638) *
               C50760 * C114) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C641 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50930 -
            (C2345 + C2346 + C2347) * C642 - (C2348 + C2349 + C2350) * C50931 +
            (C2351 + C2352 + C2353) * C643 + (C2354 + C2355 + C2356) * C638) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C641 + (C2350 + C2349 + C2348) * C50930 -
            (C2353 + C2352 + C2351) * C642 - (C2356 + C2355 + C2354) * C50931 +
            (C2359 + C2358 + C2357) * C643 + (C2362 + C2361 + C2360) * C638) *
               C50760 * C50631) *
              C50890 +
          (((C2739 + C2740 + C2741) * C642 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50930 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C641) +
            (C2742 + C2743 + C2744) * C50931 - (C3073 + C3074 + C3075) * C643 -
            (C3076 + C3077 + C3078) * C638) *
               C50760 * C2303 +
           ((C3075 + C3074 + C3073) * C642 -
            ((C2744 + C2743 + C2742) * C50930 +
             (C2741 + C2740 + C2739) * C641) +
            (C3078 + C3077 + C3076) * C50931 -
            (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
             C2305 * C465 + C2300 * C478) *
                C643 -
            (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
             C2305 * C479 + C2300 * C495) *
                C638) *
               C50760 * C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50744 * C129) * C118 +
           (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50760 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50760 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50760 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50744 * C141) * C121 -
           (C117 * C142 + C50744 * C149) * C109) *
              C50760 * C114) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C283 +
            (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50760 *
               C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C50760 *
               C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50610) * C50760 *
               C114) *
              C50663 * C280 +
          ((C350 * C284 -
            ((C117 * C296 + C50744 * C315) * C278 +
             (C117 * C286 + C50744 * C297) * C283) +
            C351 * C50610) *
               C50760 * C111 +
           (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
               C50760 * C112 +
           (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
               C50760 * C113 +
           ((C117 * C289 + C50744 * C303) * C284 - (C355 * C278 + C354 * C283) +
            (C117 * C304 + C50744 * C319) * C50610) *
               C50760 * C114) *
              C50663 * C281 +
          (((C117 * C290 + C50744 * C305) * C283 +
            (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
            C357 * C50610) *
               C50760 * C111 +
           (C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C50760 *
               C112 +
           (C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) * C50760 *
               C113 +
           (C360 * C283 + C361 * C278 - (C117 * C294 + C50744 * C313) * C284 -
            (C117 * C314 + C50744 * C324) * C50610) *
               C50760 * C114) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
            C2307 * C290 + C2302 * C305) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
            C2307 * C306 + C2302 * C320) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C50760 * C2303 +
          ((C2347 + C2346 + C2345) * C118 + (C2350 + C2349 + C2348) * C106 -
           (C2353 + C2352 + C2351) * C119 - (C2356 + C2355 + C2354) * C107 +
           (C2359 + C2358 + C2357) * C120 + (C2362 + C2361 + C2360) * C108 -
           (C2307 * C294 + C2302 * C313 + C2306 * C289 + C2301 * C303 +
            C2305 * C126 + C2300 * C137) *
               C121 -
           (C2307 * C314 + C2302 * C324 + C2306 * C304 + C2301 * C319 +
            C2305 * C138 + C2300 * C147) *
               C109) *
              C50760 * C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C283 + (C2350 + C2349 + C2348) * C278 -
            (C2353 + C2352 + C2351) * C284 - (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C50663 * C280 +
          (((C2545 + C2546 + C2547) * C284 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C278 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C283) +
            (C2548 + C2549 + C2550) * C50610) *
               C50760 * C2303 +
           ((C2305 * C287 + C2300 * C299 + C2306 * C292 + C2301 * C309 +
             C2307 * C1111 + C2302 * C1117) *
                C284 -
            ((C2550 + C2549 + C2548) * C278 + (C2547 + C2546 + C2545) * C283) +
            (C2305 * C300 + C2300 * C317 + C2306 * C310 + C2301 * C322 +
             C2307 * C1116 + C2302 * C1123) *
                C50610) *
               C50760 * C50631) *
              C50663 * C281 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C283 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C278 -
            (C2551 + C2552 + C2553) * C284 - (C2554 + C2555 + C2556) * C50610) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C283 + (C2556 + C2555 + C2554) * C278 -
            (C2307 * C2510 + C2302 * C2515 + C2306 * C1111 + C2301 * C1117 +
             C2305 * C292 + C2300 * C309) *
                C284 -
            (C2307 * C2516 + C2302 * C2519 + C2306 * C1116 + C2301 * C1123 +
             C2305 * C310 + C2300 * C322) *
                C50610) *
               C50760 * C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C49720 +
            (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
               C50760 * C112 +
           (C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
               C50760 * C113 +
           (C175 * C49720 + C176 * C50874 - C177 * C49713 - C178 * C50610) *
               C50760 * C114) *
              C50663 * C50934 +
          ((C350 * C49713 -
            ((C117 * C296 + C50744 * C315) * C50874 +
             (C117 * C286 + C50744 * C297) * C49720) +
            C351 * C50610) *
               C50760 * C111 +
           (C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
               C50760 * C112 +
           (C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
               C50760 * C113 +
           (C653 * C49713 - (C355 * C50874 + C354 * C49720) + C654 * C50610) *
               C50760 * C114) *
              C50663 * C50935 +
          (((C117 * C290 + C50744 * C305) * C49720 +
            (C117 * C306 + C50744 * C320) * C50874 - C356 * C49713 -
            C357 * C50610) *
               C50760 * C111 +
           (C356 * C49720 + C357 * C50874 - C358 * C49713 - C359 * C50610) *
               C50760 * C112 +
           (C358 * C49720 + C359 * C50874 - C360 * C49713 - C361 * C50610) *
               C50760 * C113 +
           (C360 * C49720 + C361 * C50874 -
            (C117 * C294 + C50744 * C313) * C49713 -
            (C117 * C314 + C50744 * C324) * C50610) *
               C50760 * C114) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50874 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50874 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C50663 * C50934 +
          (((C2545 + C2546 + C2547) * C49713 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50874 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C49720) +
            (C2548 + C2549 + C2550) * C50610) *
               C50760 * C2303 +
           ((C2911 + C2910 + C2909) * C49713 -
            ((C2550 + C2549 + C2548) * C50874 +
             (C2547 + C2546 + C2545) * C49720) +
            (C2914 + C2913 + C2912) * C50610) *
               C50760 * C50631) *
              C50663 * C50935 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C49720 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50874 -
            (C2551 + C2552 + C2553) * C49713 -
            (C2554 + C2555 + C2556) * C50610) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C49720 +
            (C2556 + C2555 + C2554) * C50874 -
            (C2307 * C2510 + C2302 * C2515 + C2306 * C1111 + C2301 * C1117 +
             C2305 * C292 + C2300 * C309) *
                C49713 -
            (C2307 * C2516 + C2302 * C2519 + C2306 * C1116 + C2301 * C1123 +
             C2305 * C310 + C2300 * C322) *
                C50610) *
               C50760 * C50631) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50744 * C129) * C1109 +
                     (C117 * C130 + C50744 * C143) * C50605) *
                        C50760 * C111 +
                    (C171 * C1109 + C172 * C50605) * C50760 * C112 +
                    (C173 * C1109 + C174 * C50605) * C50760 * C113 +
                    (C175 * C1109 + C176 * C50605) * C50760 * C114) *
                       C50890 -
                   ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
                    (C530 * C50605 + C529 * C1109) * C50760 * C113 +
                    (C528 * C50605 + C527 * C1109) * C50760 * C112 +
                    ((C117 * C473 + C50744 * C492) * C50605 +
                     (C117 * C463 + C50744 * C474) * C1109) *
                        C50760 * C111) *
                       C50727) *
                      C50934 +
                  ((((C117 * C894 + C50744 * C899) * C1109 +
                     (C117 * C900 + C50744 * C909) * C50605) *
                        C50760 * C111 +
                    (C927 * C1109 + C928 * C50605) * C50760 * C112 +
                    (C929 * C1109 + C930 * C50605) * C50760 * C113 +
                    (C931 * C1109 + C932 * C50605) * C50760 * C114) *
                       C50727 -
                   ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
                    (C353 * C50605 + C352 * C1109) * C50760 * C113 +
                    (C351 * C50605 + C350 * C1109) * C50760 * C112 +
                    ((C117 * C296 + C50744 * C315) * C50605 +
                     (C117 * C286 + C50744 * C297) * C1109) *
                        C50760 * C111) *
                       C50890) *
                      C50935 +
                  ((((C117 * C290 + C50744 * C305) * C1109 +
                     (C117 * C306 + C50744 * C320) * C50605) *
                        C50760 * C111 +
                    (C356 * C1109 + C357 * C50605) * C50760 * C112 +
                    (C358 * C1109 + C359 * C50605) * C50760 * C113 +
                    (C360 * C1109 + C361 * C50605) * C50760 * C114) *
                       C50890 -
                   (((C117 * C1577 + C50744 * C1585) * C50605 +
                     (C117 * C1573 + C50744 * C1578) * C1109) *
                        C50760 * C114 +
                    ((C117 * C1579 + C50744 * C1586) * C50605 +
                     (C117 * C1574 + C50744 * C1580) * C1109) *
                        C50760 * C113 +
                    ((C117 * C1581 + C50744 * C1587) * C50605 +
                     (C117 * C1575 + C50744 * C1582) * C1109) *
                        C50760 * C112 +
                    ((C117 * C1583 + C50744 * C1588) * C50605 +
                     (C117 * C1576 + C50744 * C1584) * C1109) *
                        C50760 * C111) *
                       C50727) *
                      C1342)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2305 * C122 + C2300 * C129 + C2306 * C286 +
                      C2301 * C297 + C2307 * C290 + C2302 * C305) *
                         C1109 +
                     (C2305 * C130 + C2300 * C143 + C2306 * C296 +
                      C2301 * C315 + C2307 * C306 + C2302 * C320) *
                         C50605) *
                        C50760 * C2303 +
                    ((C2347 + C2346 + C2345) * C1109 +
                     (C2350 + C2349 + C2348) * C50605) *
                        C50760 * C50631) *
                       C50890 -
                   (((C2744 + C2743 + C2742) * C50605 +
                     (C2741 + C2740 + C2739) * C1109) *
                        C50760 * C50631 +
                    ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 +
                      C2301 * C909 + C2305 * C473 + C2300 * C492) *
                         C50605 +
                     (C2307 * C1576 + C2302 * C1584 + C2306 * C894 +
                      C2301 * C899 + C2305 * C463 + C2300 * C474) *
                         C1109) *
                        C50760 * C2303) *
                       C50727) *
                      C50934 +
                  ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 +
                      C2301 * C1584 + C2307 * C3272 + C2302 * C3275) *
                         C1109 +
                     (C2305 * C900 + C2300 * C909 + C2306 * C1583 +
                      C2301 * C1588 + C2307 * C3276 + C2302 * C3281) *
                         C50605) *
                        C50760 * C2303 +
                    ((C3299 + C3298 + C3297) * C1109 +
                     (C3302 + C3301 + C3300) * C50605) *
                        C50760 * C50631) *
                       C50727 -
                   (((C2550 + C2549 + C2548) * C50605 +
                     (C2547 + C2546 + C2545) * C1109) *
                        C50760 * C50631 +
                    ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 +
                      C2301 * C320 + C2305 * C296 + C2300 * C315) *
                         C50605 +
                     (C2307 * C1113 + C2302 * C1121 + C2306 * C290 +
                      C2301 * C305 + C2305 * C286 + C2300 * C297) *
                         C1109) *
                        C50760 * C2303) *
                       C50890) *
                      C50935 +
                  ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 +
                      C2301 * C1121 + C2307 * C2508 + C2302 * C2511) *
                         C1109 +
                     (C2305 * C306 + C2300 * C320 + C2306 * C1120 +
                      C2301 * C1125 + C2307 * C2512 + C2302 * C2517) *
                         C50605) *
                        C50760 * C2303 +
                    ((C2553 + C2552 + C2551) * C1109 +
                     (C2556 + C2555 + C2554) * C50605) *
                        C50760 * C50631) *
                       C50890 -
                   (((C2307 * C4196 + C2302 * C4200 + C2306 * C3278 +
                      C2301 * C3282 + C2305 * C1581 + C2300 * C1587) *
                         C50605 +
                     (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 +
                      C2301 * C3277 + C2305 * C1575 + C2300 * C1582) *
                         C1109) *
                        C50760 * C50631 +
                    ((C2307 * C4198 + C2302 * C4201 + C2306 * C3276 +
                      C2301 * C3281 + C2305 * C1583 + C2300 * C1588) *
                         C50605 +
                     (C2307 * C4195 + C2302 * C4199 + C2306 * C3272 +
                      C2301 * C3275 + C2305 * C1576 + C2300 * C1584) *
                         C1109) *
                        C50760 * C2303) *
                       C50727) *
                      C1342)) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1109 +
            (C117 * C130 + C50744 * C143) * C50605) *
               C50760 * C111 +
           (C171 * C1109 + C172 * C50605) * C50760 * C112 +
           (C173 * C1109 + C174 * C50605) * C50760 * C113 +
           (C175 * C1109 + C176 * C50605) * C50760 * C114) *
              C50663 * C1105 -
          ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
           (C353 * C50605 + C352 * C1109) * C50760 * C113 +
           (C351 * C50605 + C350 * C1109) * C50760 * C112 +
           ((C117 * C296 + C50744 * C315) * C50605 +
            (C117 * C286 + C50744 * C297) * C1109) *
               C50760 * C111) *
              C50663 * C1106 +
          (((C117 * C290 + C50744 * C305) * C1109 +
            (C117 * C306 + C50744 * C320) * C50605) *
               C50760 * C111 +
           (C356 * C1109 + C357 * C50605) * C50760 * C112 +
           (C358 * C1109 + C359 * C50605) * C50760 * C113 +
           (C360 * C1109 + C361 * C50605) * C50760 * C114) *
              C50663 * C1107 -
          (((C117 * C1114 + C50744 * C1122) * C50605 +
            (C117 * C1110 + C50744 * C1115) * C1109) *
               C50760 * C114 +
           ((C117 * C1116 + C50744 * C1123) * C50605 +
            (C117 * C1111 + C50744 * C1117) * C1109) *
               C50760 * C113 +
           ((C117 * C1118 + C50744 * C1124) * C50605 +
            (C117 * C1112 + C50744 * C1119) * C1109) *
               C50760 * C112 +
           ((C117 * C1120 + C50744 * C1125) * C50605 +
            (C117 * C1113 + C50744 * C1121) * C1109) *
               C50760 * C111) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50760 * C111 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C50760 * C112 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C50760 * C113 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C50760 * C114) *
              C50663 * C1033 +
          ((C350 * C1036 -
            ((C117 * C296 + C50744 * C315) * C1030 +
             (C117 * C286 + C50744 * C297) * C1035) +
            C351 * C1031 - C352 * C1037 - C353 * C1032) *
               C50760 * C111 +
           (C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
            C354 * C1037 - C355 * C1032) *
               C50760 * C112 +
           (C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
            C653 * C1037 - C654 * C1032) *
               C50760 * C113 +
           (C653 * C1036 - (C355 * C1030 + C354 * C1035) + C654 * C1031 -
            (C117 * C644 + C50744 * C645) * C1037 -
            (C117 * C646 + C50744 * C647) * C1032) *
               C50760 * C114) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50760 * C111 +
            (C171 * C1109 + C172 * C50605) * C50760 * C112 +
            (C173 * C1109 + C174 * C50605) * C50760 * C113 +
            (C175 * C1109 + C176 * C50605) * C50760 * C114) *
               C459 -
           ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
            (C530 * C50605 + C529 * C1109) * C50760 * C113 +
            (C528 * C50605 + C527 * C1109) * C50760 * C112 +
            ((C117 * C473 + C50744 * C492) * C50605 +
             (C117 * C463 + C50744 * C474) * C1109) *
                C50760 * C111) *
               C460 +
           (((C117 * C467 + C50744 * C482) * C1109 +
             (C117 * C483 + C50744 * C497) * C50605) *
                C50760 * C111 +
            (C533 * C1109 + C534 * C50605) * C50760 * C112 +
            (C535 * C1109 + C536 * C50605) * C50760 * C113 +
            (C537 * C1109 + C538 * C50605) * C50760 * C114) *
               C461) *
              C1033 +
          ((((C117 * C894 + C50744 * C899) * C1109 +
             (C117 * C900 + C50744 * C909) * C50605) *
                C50760 * C111 +
            (C927 * C1109 + C928 * C50605) * C50760 * C112 +
            (C929 * C1109 + C930 * C50605) * C50760 * C113 +
            (C931 * C1109 + C932 * C50605) * C50760 * C114) *
               C460 -
           ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
            (C353 * C50605 + C352 * C1109) * C50760 * C113 +
            (C351 * C50605 + C350 * C1109) * C50760 * C112 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C50760 * C111) *
               C459 -
           (((C117 * C1228 + C50744 * C1236) * C50605 +
             (C117 * C1224 + C50744 * C1229) * C1109) *
                C50760 * C114 +
            ((C117 * C1230 + C50744 * C1237) * C50605 +
             (C117 * C1225 + C50744 * C1231) * C1109) *
                C50760 * C113 +
            ((C117 * C1232 + C50744 * C1238) * C50605 +
             (C117 * C1226 + C50744 * C1233) * C1109) *
                C50760 * C112 +
            ((C117 * C1234 + C50744 * C1239) * C50605 +
             (C117 * C1227 + C50744 * C1235) * C1109) *
                C50760 * C111) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1035 + (C2350 + C2349 + C2348) * C1030 -
            (C2353 + C2352 + C2351) * C1036 - (C2356 + C2355 + C2354) * C1031 +
            (C2359 + C2358 + C2357) * C1037 + (C2362 + C2361 + C2360) * C1032) *
               C50760 * C50631) *
              C50663 * C1033 +
          (((C2545 + C2546 + C2547) * C1036 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C1030 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1035) +
            (C2548 + C2549 + C2550) * C1031 - (C2909 + C2910 + C2911) * C1037 -
            (C2912 + C2913 + C2914) * C1032) *
               C50760 * C2303 +
           ((C2911 + C2910 + C2909) * C1036 -
            ((C2550 + C2549 + C2548) * C1030 +
             (C2547 + C2546 + C2545) * C1035) +
            (C2914 + C2913 + C2912) * C1031 -
            (C2307 * C1110 + C2302 * C1115 + C2306 * C293 + C2301 * C311 +
             C2305 * C288 + C2300 * C301) *
                C1037 -
            (C2307 * C1114 + C2302 * C1122 + C2306 * C312 + C2301 * C323 +
             C2305 * C302 + C2300 * C318) *
                C1032) *
               C50760 * C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1109 +
            (C2350 + C2349 + C2348) * C50605) *
               C50760 * C50631) *
              C50663 * C1105 -
          (((C2550 + C2549 + C2548) * C50605 +
            (C2547 + C2546 + C2545) * C1109) *
               C50760 * C50631 +
           ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
             C2305 * C296 + C2300 * C315) *
                C50605 +
            (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
             C2305 * C286 + C2300 * C297) *
                C1109) *
               C50760 * C2303) *
              C50663 * C1106 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C1109 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50605) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C1109 +
            (C2556 + C2555 + C2554) * C50605) *
               C50760 * C50631) *
              C50663 * C1107 -
          (((C2307 * C3548 + C2302 * C3552 + C2306 * C2514 + C2301 * C2518 +
             C2305 * C1118 + C2300 * C1124) *
                C50605 +
            (C2307 * C3546 + C2302 * C3549 + C2306 * C2509 + C2301 * C2513 +
             C2305 * C1112 + C2300 * C1119) *
                C1109) *
               C50760 * C50631 +
           ((C2307 * C3550 + C2302 * C3553 + C2306 * C2512 + C2301 * C2517 +
             C2305 * C1120 + C2300 * C1125) *
                C50605 +
            (C2307 * C3547 + C2302 * C3551 + C2306 * C2508 + C2301 * C2511 +
             C2305 * C1113 + C2300 * C1121) *
                C1109) *
               C50760 * C2303) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C1109 +
             (C2350 + C2349 + C2348) * C50605) *
                C50760 * C50631) *
               C459 -
           (((C2744 + C2743 + C2742) * C50605 +
             (C2741 + C2740 + C2739) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50605 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1109) *
                C50760 * C2303) *
               C460 +
           (((C2305 * C467 + C2300 * C482 + C2306 * C1227 + C2301 * C1235 +
              C2307 * C2702 + C2302 * C2705) *
                 C1109 +
             (C2305 * C483 + C2300 * C497 + C2306 * C1234 + C2301 * C1239 +
              C2307 * C2706 + C2302 * C2711) *
                 C50605) *
                C50760 * C2303 +
            ((C2747 + C2746 + C2745) * C1109 +
             (C2750 + C2749 + C2748) * C50605) *
                C50760 * C50631) *
               C461) *
              C1033 +
          ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C1109 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50605) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C1109 +
             (C3302 + C3301 + C3300) * C50605) *
                C50760 * C50631) *
               C460 -
           (((C2550 + C2549 + C2548) * C50605 +
             (C2547 + C2546 + C2545) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C50760 * C2303) *
               C459 -
           (((C2307 * C3702 + C2302 * C3706 + C2306 * C2708 + C2301 * C2712 +
              C2305 * C1232 + C2300 * C1238) *
                 C50605 +
             (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 + C2301 * C2707 +
              C2305 * C1226 + C2300 * C1233) *
                 C1109) *
                C50760 * C50631 +
            ((C2307 * C3704 + C2302 * C3707 + C2306 * C2706 + C2301 * C2711 +
              C2305 * C1234 + C2300 * C1239) *
                 C50605 +
             (C2307 * C3701 + C2302 * C3705 + C2306 * C2702 + C2301 * C2705 +
              C2305 * C1227 + C2300 * C1235) *
                 C1109) *
                C50760 * C2303) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C50760 * C111 +
            (C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C50760 * C112 +
            (C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C50760 * C113 +
            (C175 * C49720 + C176 * C50874 - C177 * C49713 - C178 * C50610) *
                C50760 * C114) *
               C50890 +
           ((C527 * C49713 -
             ((C117 * C473 + C50744 * C492) * C50874 +
              (C117 * C463 + C50744 * C474) * C49720) +
             C528 * C50610) *
                C50760 * C111 +
            (C529 * C49713 - (C528 * C50874 + C527 * C49720) + C530 * C50610) *
                C50760 * C112 +
            (C531 * C49713 - (C530 * C50874 + C529 * C49720) + C532 * C50610) *
                C50760 * C113 +
            (C763 * C49713 - (C532 * C50874 + C531 * C49720) + C764 * C50610) *
                C50760 * C114) *
               C50727) *
              C1033 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C50760 * C111 +
            (C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C50760 * C112 +
            (C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                C50760 * C113 +
            (C653 * C49713 - (C355 * C50874 + C354 * C49720) + C654 * C50610) *
                C50760 * C114) *
               C50890 +
           (((C117 * C894 + C50744 * C899) * C49720 +
             (C117 * C900 + C50744 * C909) * C50874 - C927 * C49713 -
             C928 * C50610) *
                C50760 * C111 +
            (C927 * C49720 + C928 * C50874 - C929 * C49713 - C930 * C50610) *
                C50760 * C112 +
            (C929 * C49720 + C930 * C50874 - C931 * C49713 - C932 * C50610) *
                C50760 * C113 +
            (C931 * C49720 + C932 * C50874 -
             (C117 * C898 + C50744 * C907) * C49713 -
             (C117 * C908 + C50744 * C913) * C50610) *
                C50760 * C114) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50874 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50610) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C49720 +
             (C2350 + C2349 + C2348) * C50874 -
             (C2353 + C2352 + C2351) * C49713 -
             (C2356 + C2355 + C2354) * C50610) *
                C50760 * C50631) *
               C50890 +
           (((C2739 + C2740 + C2741) * C49713 -
             ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
               C2305 * C473 + C2300 * C492) *
                  C50874 +
              (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
               C2305 * C463 + C2300 * C474) *
                  C49720) +
             (C2742 + C2743 + C2744) * C50610) *
                C50760 * C2303 +
            ((C3075 + C3074 + C3073) * C49713 -
             ((C2744 + C2743 + C2742) * C50874 +
              (C2741 + C2740 + C2739) * C49720) +
             (C3078 + C3077 + C3076) * C50610) *
                C50760 * C50631) *
               C50727) *
              C1033 +
          ((((C2545 + C2546 + C2547) * C49713 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C50874 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C49720) +
             (C2548 + C2549 + C2550) * C50610) *
                C50760 * C2303 +
            ((C2911 + C2910 + C2909) * C49713 -
             ((C2550 + C2549 + C2548) * C50874 +
              (C2547 + C2546 + C2545) * C49720) +
             (C2914 + C2913 + C2912) * C50610) *
                C50760 * C50631) *
               C50890 +
           (((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C49720 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50874 -
             (C3297 + C3298 + C3299) * C49713 -
             (C3300 + C3301 + C3302) * C50610) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C49720 +
             (C3302 + C3301 + C3300) * C50874 -
             (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
              C2305 * C896 + C2300 * C903) *
                 C49713 -
             (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
              C2305 * C904 + C2300 * C911) *
                 C50610) *
                C50760 * C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50760 * C111 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C50760 * C112 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C50760 * C113 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C50760 * C114) *
              C50663 * C1033 +
          ((C350 * C1036 -
            ((C117 * C296 + C50744 * C315) * C1030 +
             (C117 * C286 + C50744 * C297) * C1035) +
            C351 * C1031 - C352 * C1037 - C353 * C1032) *
               C50760 * C111 +
           (C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
            C354 * C1037 - C355 * C1032) *
               C50760 * C112 +
           (C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
            C653 * C1037 - C654 * C1032) *
               C50760 * C113 +
           (C653 * C1036 - (C355 * C1030 + C354 * C1035) + C654 * C1031 -
            (C117 * C644 + C50744 * C645) * C1037 -
            (C117 * C646 + C50744 * C647) * C1032) *
               C50760 * C114) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1109 +
            (C117 * C130 + C50744 * C143) * C50605) *
               C50760 * C111 +
           (C171 * C1109 + C172 * C50605) * C50760 * C112 +
           (C173 * C1109 + C174 * C50605) * C50760 * C113 +
           (C175 * C1109 + C176 * C50605) * C50760 * C114) *
              C50663 * C1105 -
          ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
           (C353 * C50605 + C352 * C1109) * C50760 * C113 +
           (C351 * C50605 + C350 * C1109) * C50760 * C112 +
           ((C117 * C296 + C50744 * C315) * C50605 +
            (C117 * C286 + C50744 * C297) * C1109) *
               C50760 * C111) *
              C50663 * C1106 +
          (((C117 * C290 + C50744 * C305) * C1109 +
            (C117 * C306 + C50744 * C320) * C50605) *
               C50760 * C111 +
           (C356 * C1109 + C357 * C50605) * C50760 * C112 +
           (C358 * C1109 + C359 * C50605) * C50760 * C113 +
           (C360 * C1109 + C361 * C50605) * C50760 * C114) *
              C50663 * C1107 -
          (((C117 * C1114 + C50744 * C1122) * C50605 +
            (C117 * C1110 + C50744 * C1115) * C1109) *
               C50760 * C114 +
           ((C117 * C1116 + C50744 * C1123) * C50605 +
            (C117 * C1111 + C50744 * C1117) * C1109) *
               C50760 * C113 +
           ((C117 * C1118 + C50744 * C1124) * C50605 +
            (C117 * C1112 + C50744 * C1119) * C1109) *
               C50760 * C112 +
           ((C117 * C1120 + C50744 * C1125) * C50605 +
            (C117 * C1113 + C50744 * C1121) * C1109) *
               C50760 * C111) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1035 + (C2350 + C2349 + C2348) * C1030 -
            (C2353 + C2352 + C2351) * C1036 - (C2356 + C2355 + C2354) * C1031 +
            (C2359 + C2358 + C2357) * C1037 + (C2362 + C2361 + C2360) * C1032) *
               C50760 * C50631) *
              C50663 * C1033 +
          (((C2545 + C2546 + C2547) * C1036 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C1030 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1035) +
            (C2548 + C2549 + C2550) * C1031 - (C2909 + C2910 + C2911) * C1037 -
            (C2912 + C2913 + C2914) * C1032) *
               C50760 * C2303 +
           ((C2911 + C2910 + C2909) * C1036 -
            ((C2550 + C2549 + C2548) * C1030 +
             (C2547 + C2546 + C2545) * C1035) +
            (C2914 + C2913 + C2912) * C1031 -
            (C2307 * C1110 + C2302 * C1115 + C2306 * C293 + C2301 * C311 +
             C2305 * C288 + C2300 * C301) *
                C1037 -
            (C2307 * C1114 + C2302 * C1122 + C2306 * C312 + C2301 * C323 +
             C2305 * C302 + C2300 * C318) *
                C1032) *
               C50760 * C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1109 +
            (C2350 + C2349 + C2348) * C50605) *
               C50760 * C50631) *
              C50663 * C1105 -
          (((C2550 + C2549 + C2548) * C50605 +
            (C2547 + C2546 + C2545) * C1109) *
               C50760 * C50631 +
           ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
             C2305 * C296 + C2300 * C315) *
                C50605 +
            (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
             C2305 * C286 + C2300 * C297) *
                C1109) *
               C50760 * C2303) *
              C50663 * C1106 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C1109 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50605) *
               C50760 * C2303 +
           ((C2553 + C2552 + C2551) * C1109 +
            (C2556 + C2555 + C2554) * C50605) *
               C50760 * C50631) *
              C50663 * C1107 -
          (((C2307 * C3548 + C2302 * C3552 + C2306 * C2514 + C2301 * C2518 +
             C2305 * C1118 + C2300 * C1124) *
                C50605 +
            (C2307 * C3546 + C2302 * C3549 + C2306 * C2509 + C2301 * C2513 +
             C2305 * C1112 + C2300 * C1119) *
                C1109) *
               C50760 * C50631 +
           ((C2307 * C3550 + C2302 * C3553 + C2306 * C2512 + C2301 * C2517 +
             C2305 * C1120 + C2300 * C1125) *
                C50605 +
            (C2307 * C3547 + C2302 * C3551 + C2306 * C2508 + C2301 * C2511 +
             C2305 * C1113 + C2300 * C1121) *
                C1109) *
               C50760 * C2303) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C50760 * C111 +
            (C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C50760 * C112 +
            (C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C50760 * C113 +
            (C175 * C49720 + C176 * C50874 - C177 * C49713 - C178 * C50610) *
                C50760 * C114) *
               C1687 +
           ((C527 * C49713 -
             ((C117 * C473 + C50744 * C492) * C50874 +
              (C117 * C463 + C50744 * C474) * C49720) +
             C528 * C50610) *
                C50760 * C111 +
            (C529 * C49713 - (C528 * C50874 + C527 * C49720) + C530 * C50610) *
                C50760 * C112 +
            (C531 * C49713 - (C530 * C50874 + C529 * C49720) + C532 * C50610) *
                C50760 * C113 +
            (C763 * C49713 - (C532 * C50874 + C531 * C49720) + C764 * C50610) *
                C50760 * C114) *
               C50727) *
              C50889 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C50760 * C111 +
            (C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C50760 * C112 +
            (C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                C50760 * C113 +
            (C653 * C49713 - (C355 * C50874 + C354 * C49720) + C654 * C50610) *
                C50760 * C114) *
               C1687 +
           (((C117 * C894 + C50744 * C899) * C49720 +
             (C117 * C900 + C50744 * C909) * C50874 - C927 * C49713 -
             C928 * C50610) *
                C50760 * C111 +
            (C927 * C49720 + C928 * C50874 - C929 * C49713 - C930 * C50610) *
                C50760 * C112 +
            (C929 * C49720 + C930 * C50874 - C931 * C49713 - C932 * C50610) *
                C50760 * C113 +
            (C931 * C49720 + C932 * C50874 -
             (C117 * C898 + C50744 * C907) * C49713 -
             (C117 * C908 + C50744 * C913) * C50610) *
                C50760 * C114) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50874 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50610) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C49720 +
             (C2350 + C2349 + C2348) * C50874 -
             (C2353 + C2352 + C2351) * C49713 -
             (C2356 + C2355 + C2354) * C50610) *
                C50760 * C50631) *
               C1687 +
           (((C2739 + C2740 + C2741) * C49713 -
             ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
               C2305 * C473 + C2300 * C492) *
                  C50874 +
              (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
               C2305 * C463 + C2300 * C474) *
                  C49720) +
             (C2742 + C2743 + C2744) * C50610) *
                C50760 * C2303 +
            ((C3075 + C3074 + C3073) * C49713 -
             ((C2744 + C2743 + C2742) * C50874 +
              (C2741 + C2740 + C2739) * C49720) +
             (C3078 + C3077 + C3076) * C50610) *
                C50760 * C50631) *
               C50727) *
              C50889 +
          ((((C2545 + C2546 + C2547) * C49713 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C50874 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C49720) +
             (C2548 + C2549 + C2550) * C50610) *
                C50760 * C2303 +
            ((C2911 + C2910 + C2909) * C49713 -
             ((C2550 + C2549 + C2548) * C50874 +
              (C2547 + C2546 + C2545) * C49720) +
             (C2914 + C2913 + C2912) * C50610) *
                C50760 * C50631) *
               C1687 +
           (((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C49720 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50874 -
             (C3297 + C3298 + C3299) * C49713 -
             (C3300 + C3301 + C3302) * C50610) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C49720 +
             (C3302 + C3301 + C3300) * C50874 -
             (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
              C2305 * C896 + C2300 * C903) *
                 C49713 -
             (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
              C2305 * C904 + C2300 * C911) *
                 C50610) *
                C50760 * C50631) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50744 * C129) * C1109 +
                     (C117 * C130 + C50744 * C143) * C50605) *
                        C50760 * C111 +
                    (C171 * C1109 + C172 * C50605) * C50760 * C112 +
                    (C173 * C1109 + C174 * C50605) * C50760 * C113 +
                    (C175 * C1109 + C176 * C50605) * C50760 * C114) *
                       C50936 -
                   ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
                    (C530 * C50605 + C529 * C1109) * C50760 * C113 +
                    (C528 * C50605 + C527 * C1109) * C50760 * C112 +
                    ((C117 * C473 + C50744 * C492) * C50605 +
                     (C117 * C463 + C50744 * C474) * C1109) *
                        C50760 * C111) *
                       C50937 +
                   (((C117 * C467 + C50744 * C482) * C1109 +
                     (C117 * C483 + C50744 * C497) * C50605) *
                        C50760 * C111 +
                    (C533 * C1109 + C534 * C50605) * C50760 * C112 +
                    (C535 * C1109 + C536 * C50605) * C50760 * C113 +
                    (C537 * C1109 + C538 * C50605) * C50760 * C114) *
                       C2103) *
                      C50889 +
                  ((((C117 * C894 + C50744 * C899) * C1109 +
                     (C117 * C900 + C50744 * C909) * C50605) *
                        C50760 * C111 +
                    (C927 * C1109 + C928 * C50605) * C50760 * C112 +
                    (C929 * C1109 + C930 * C50605) * C50760 * C113 +
                    (C931 * C1109 + C932 * C50605) * C50760 * C114) *
                       C50937 -
                   ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
                    (C353 * C50605 + C352 * C1109) * C50760 * C113 +
                    (C351 * C50605 + C350 * C1109) * C50760 * C112 +
                    ((C117 * C296 + C50744 * C315) * C50605 +
                     (C117 * C286 + C50744 * C297) * C1109) *
                        C50760 * C111) *
                       C50936 -
                   (((C117 * C1228 + C50744 * C1236) * C50605 +
                     (C117 * C1224 + C50744 * C1229) * C1109) *
                        C50760 * C114 +
                    ((C117 * C1230 + C50744 * C1237) * C50605 +
                     (C117 * C1225 + C50744 * C1231) * C1109) *
                        C50760 * C113 +
                    ((C117 * C1232 + C50744 * C1238) * C50605 +
                     (C117 * C1226 + C50744 * C1233) * C1109) *
                        C50760 * C112 +
                    ((C117 * C1234 + C50744 * C1239) * C50605 +
                     (C117 * C1227 + C50744 * C1235) * C1109) *
                        C50760 * C111) *
                       C2103) *
                      C50701)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2305 * C122 + C2300 * C129 + C2306 * C286 +
                      C2301 * C297 + C2307 * C290 + C2302 * C305) *
                         C1109 +
                     (C2305 * C130 + C2300 * C143 + C2306 * C296 +
                      C2301 * C315 + C2307 * C306 + C2302 * C320) *
                         C50605) *
                        C50760 * C2303 +
                    ((C2347 + C2346 + C2345) * C1109 +
                     (C2350 + C2349 + C2348) * C50605) *
                        C50760 * C50631) *
                       C50936 -
                   (((C2744 + C2743 + C2742) * C50605 +
                     (C2741 + C2740 + C2739) * C1109) *
                        C50760 * C50631 +
                    ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 +
                      C2301 * C909 + C2305 * C473 + C2300 * C492) *
                         C50605 +
                     (C2307 * C1576 + C2302 * C1584 + C2306 * C894 +
                      C2301 * C899 + C2305 * C463 + C2300 * C474) *
                         C1109) *
                        C50760 * C2303) *
                       C50937 +
                   (((C2305 * C467 + C2300 * C482 + C2306 * C1227 +
                      C2301 * C1235 + C2307 * C2702 + C2302 * C2705) *
                         C1109 +
                     (C2305 * C483 + C2300 * C497 + C2306 * C1234 +
                      C2301 * C1239 + C2307 * C2706 + C2302 * C2711) *
                         C50605) *
                        C50760 * C2303 +
                    ((C2747 + C2746 + C2745) * C1109 +
                     (C2750 + C2749 + C2748) * C50605) *
                        C50760 * C50631) *
                       C2103) *
                      C50889 +
                  ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 +
                      C2301 * C1584 + C2307 * C3272 + C2302 * C3275) *
                         C1109 +
                     (C2305 * C900 + C2300 * C909 + C2306 * C1583 +
                      C2301 * C1588 + C2307 * C3276 + C2302 * C3281) *
                         C50605) *
                        C50760 * C2303 +
                    ((C3299 + C3298 + C3297) * C1109 +
                     (C3302 + C3301 + C3300) * C50605) *
                        C50760 * C50631) *
                       C50937 -
                   (((C2550 + C2549 + C2548) * C50605 +
                     (C2547 + C2546 + C2545) * C1109) *
                        C50760 * C50631 +
                    ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 +
                      C2301 * C320 + C2305 * C296 + C2300 * C315) *
                         C50605 +
                     (C2307 * C1113 + C2302 * C1121 + C2306 * C290 +
                      C2301 * C305 + C2305 * C286 + C2300 * C297) *
                         C1109) *
                        C50760 * C2303) *
                       C50936 -
                   (((C2307 * C3702 + C2302 * C3706 + C2306 * C2708 +
                      C2301 * C2712 + C2305 * C1232 + C2300 * C1238) *
                         C50605 +
                     (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 +
                      C2301 * C2707 + C2305 * C1226 + C2300 * C1233) *
                         C1109) *
                        C50760 * C50631 +
                    ((C2307 * C3704 + C2302 * C3707 + C2306 * C2706 +
                      C2301 * C2711 + C2305 * C1234 + C2300 * C1239) *
                         C50605 +
                     (C2307 * C3701 + C2302 * C3705 + C2306 * C2702 +
                      C2301 * C2705 + C2305 * C1227 + C2300 * C1235) *
                         C1109) *
                        C50760 * C2303) *
                       C2103) *
                      C50701)) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50760 * C111 +
            (C171 * C1109 + C172 * C50605) * C50760 * C112 +
            (C173 * C1109 + C174 * C50605) * C50760 * C113 +
            (C175 * C1109 + C176 * C50605) * C50760 * C114) *
               C1687 -
           ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
            (C530 * C50605 + C529 * C1109) * C50760 * C113 +
            (C528 * C50605 + C527 * C1109) * C50760 * C112 +
            ((C117 * C473 + C50744 * C492) * C50605 +
             (C117 * C463 + C50744 * C474) * C1109) *
                C50760 * C111) *
               C50727) *
              C280 +
          ((((C117 * C894 + C50744 * C899) * C1109 +
             (C117 * C900 + C50744 * C909) * C50605) *
                C50760 * C111 +
            (C927 * C1109 + C928 * C50605) * C50760 * C112 +
            (C929 * C1109 + C930 * C50605) * C50760 * C113 +
            (C931 * C1109 + C932 * C50605) * C50760 * C114) *
               C50727 -
           ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
            (C353 * C50605 + C352 * C1109) * C50760 * C113 +
            (C351 * C50605 + C350 * C1109) * C50760 * C112 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C50760 * C111) *
               C1687) *
              C281 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C50760 * C111 +
            (C356 * C1109 + C357 * C50605) * C50760 * C112 +
            (C358 * C1109 + C359 * C50605) * C50760 * C113 +
            (C360 * C1109 + C361 * C50605) * C50760 * C114) *
               C1687 -
           (((C117 * C1577 + C50744 * C1585) * C50605 +
             (C117 * C1573 + C50744 * C1578) * C1109) *
                C50760 * C114 +
            ((C117 * C1579 + C50744 * C1586) * C50605 +
             (C117 * C1574 + C50744 * C1580) * C1109) *
                C50760 * C113 +
            ((C117 * C1581 + C50744 * C1587) * C50605 +
             (C117 * C1575 + C50744 * C1582) * C1109) *
                C50760 * C112 +
            ((C117 * C1583 + C50744 * C1588) * C50605 +
             (C117 * C1576 + C50744 * C1584) * C1109) *
                C50760 * C111) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50760 * C111 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C50760 * C112 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C50760 * C113 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C50760 * C114) *
              C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50744 * C492) * C1030 +
             (C117 * C463 + C50744 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C50760 * C111 +
           (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
            C531 * C1037 - C532 * C1032) *
               C50760 * C112 +
           (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
            C763 * C1037 - C764 * C1032) *
               C50760 * C113 +
           (C763 * C1036 - (C532 * C1030 + C531 * C1035) + C764 * C1031 -
            (C117 * C754 + C50744 * C755) * C1037 -
            (C117 * C756 + C50744 * C757) * C1032) *
               C50760 * C114) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1109 +
            (C117 * C130 + C50744 * C143) * C50605) *
               C50760 * C111 +
           (C171 * C1109 + C172 * C50605) * C50760 * C112 +
           (C173 * C1109 + C174 * C50605) * C50760 * C113 +
           (C175 * C1109 + C176 * C50605) * C50760 * C114) *
              C1853 -
          ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
           (C530 * C50605 + C529 * C1109) * C50760 * C113 +
           (C528 * C50605 + C527 * C1109) * C50760 * C112 +
           ((C117 * C473 + C50744 * C492) * C50605 +
            (C117 * C463 + C50744 * C474) * C1109) *
               C50760 * C111) *
              C1854 +
          (((C117 * C467 + C50744 * C482) * C1109 +
            (C117 * C483 + C50744 * C497) * C50605) *
               C50760 * C111 +
           (C533 * C1109 + C534 * C50605) * C50760 * C112 +
           (C535 * C1109 + C536 * C50605) * C50760 * C113 +
           (C537 * C1109 + C538 * C50605) * C50760 * C114) *
              C1855 -
          (((C117 * C1861 + C50744 * C1869) * C50605 +
            (C117 * C1857 + C50744 * C1862) * C1109) *
               C50760 * C114 +
           ((C117 * C1863 + C50744 * C1870) * C50605 +
            (C117 * C1858 + C50744 * C1864) * C1109) *
               C50760 * C113 +
           ((C117 * C1865 + C50744 * C1871) * C50605 +
            (C117 * C1859 + C50744 * C1866) * C1109) *
               C50760 * C112 +
           ((C117 * C1867 + C50744 * C1872) * C50605 +
            (C117 * C1860 + C50744 * C1868) * C1109) *
               C50760 * C111) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1035 + (C2350 + C2349 + C2348) * C1030 -
            (C2353 + C2352 + C2351) * C1036 - (C2356 + C2355 + C2354) * C1031 +
            (C2359 + C2358 + C2357) * C1037 + (C2362 + C2361 + C2360) * C1032) *
               C50760 * C50631) *
              C1687 +
          (((C2739 + C2740 + C2741) * C1036 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C1030 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1035) +
            (C2742 + C2743 + C2744) * C1031 - (C3073 + C3074 + C3075) * C1037 -
            (C3076 + C3077 + C3078) * C1032) *
               C50760 * C2303 +
           ((C3075 + C3074 + C3073) * C1036 -
            ((C2744 + C2743 + C2742) * C1030 +
             (C2741 + C2740 + C2739) * C1035) +
            (C3078 + C3077 + C3076) * C1031 -
            (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
             C2305 * C465 + C2300 * C478) *
                C1037 -
            (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
             C2305 * C479 + C2300 * C495) *
                C1032) *
               C50760 * C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C1109 +
             (C2350 + C2349 + C2348) * C50605) *
                C50760 * C50631) *
               C1687 -
           (((C2744 + C2743 + C2742) * C50605 +
             (C2741 + C2740 + C2739) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50605 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1109) *
                C50760 * C2303) *
               C50727) *
              C280 +
          ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C1109 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50605) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C1109 +
             (C3302 + C3301 + C3300) * C50605) *
                C50760 * C50631) *
               C50727 -
           (((C2550 + C2549 + C2548) * C50605 +
             (C2547 + C2546 + C2545) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C50760 * C2303) *
               C1687) *
              C281 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C50760 * C2303 +
            ((C2553 + C2552 + C2551) * C1109 +
             (C2556 + C2555 + C2554) * C50605) *
                C50760 * C50631) *
               C1687 -
           (((C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
              C2305 * C1581 + C2300 * C1587) *
                 C50605 +
             (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
              C2305 * C1575 + C2300 * C1582) *
                 C1109) *
                C50760 * C50631 +
            ((C2307 * C4198 + C2302 * C4201 + C2306 * C3276 + C2301 * C3281 +
              C2305 * C1583 + C2300 * C1588) *
                 C50605 +
             (C2307 * C4195 + C2302 * C4199 + C2306 * C3272 + C2301 * C3275 +
              C2305 * C1576 + C2300 * C1584) *
                 C1109) *
                C50760 * C2303) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1109 +
            (C2350 + C2349 + C2348) * C50605) *
               C50760 * C50631) *
              C1853 -
          (((C2744 + C2743 + C2742) * C50605 +
            (C2741 + C2740 + C2739) * C1109) *
               C50760 * C50631 +
           ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
             C2305 * C473 + C2300 * C492) *
                C50605 +
            (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
             C2305 * C463 + C2300 * C474) *
                C1109) *
               C50760 * C2303) *
              C1854 +
          (((C2305 * C467 + C2300 * C482 + C2306 * C1227 + C2301 * C1235 +
             C2307 * C2702 + C2302 * C2705) *
                C1109 +
            (C2305 * C483 + C2300 * C497 + C2306 * C1234 + C2301 * C1239 +
             C2307 * C2706 + C2302 * C2711) *
                C50605) *
               C50760 * C2303 +
           ((C2747 + C2746 + C2745) * C1109 +
            (C2750 + C2749 + C2748) * C50605) *
               C50760 * C50631) *
              C1855 -
          (((C2307 * C4596 + C2302 * C4604 + C2306 * C4597 + C2301 * C4605 +
             C2305 * C1865 + C2300 * C1871) *
                C50605 +
            (C2307 * C4592 + C2302 * C4598 + C2306 * C4593 + C2301 * C4599 +
             C2305 * C1859 + C2300 * C1866) *
                C1109) *
               C50760 * C50631 +
           ((C2307 * C4600 + C2302 * C4606 + C2306 * C4601 + C2301 * C4607 +
             C2305 * C1867 + C2300 * C1872) *
                C50605 +
            (C2307 * C4594 + C2302 * C4602 + C2306 * C4595 + C2301 * C4603 +
             C2305 * C1860 + C2300 * C1868) *
                C1109) *
               C50760 * C2303) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C49720 +
            (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
            C172 * C50610) *
               C50760 * C111 +
           (C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
               C50760 * C112 +
           (C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
               C50760 * C113 +
           (C175 * C49720 + C176 * C50874 - C177 * C49713 - C178 * C50610) *
               C50760 * C114) *
              C50936 +
          ((C527 * C49713 -
            ((C117 * C473 + C50744 * C492) * C50874 +
             (C117 * C463 + C50744 * C474) * C49720) +
            C528 * C50610) *
               C50760 * C111 +
           (C529 * C49713 - (C528 * C50874 + C527 * C49720) + C530 * C50610) *
               C50760 * C112 +
           (C531 * C49713 - (C530 * C50874 + C529 * C49720) + C532 * C50610) *
               C50760 * C113 +
           (C763 * C49713 - (C532 * C50874 + C531 * C49720) + C764 * C50610) *
               C50760 * C114) *
              C50937 +
          (((C117 * C467 + C50744 * C482) * C49720 +
            (C117 * C483 + C50744 * C497) * C50874 - C533 * C49713 -
            C534 * C50610) *
               C50760 * C111 +
           (C533 * C49720 + C534 * C50874 - C535 * C49713 - C536 * C50610) *
               C50760 * C112 +
           (C535 * C49720 + C536 * C50874 - C537 * C49713 - C538 * C50610) *
               C50760 * C113 +
           (C537 * C49720 + C538 * C50874 -
            (C117 * C471 + C50744 * C490) * C49713 -
            (C117 * C491 + C50744 * C501) * C50610) *
               C50760 * C114) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50874 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50610) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C49720 +
            (C2350 + C2349 + C2348) * C50874 -
            (C2353 + C2352 + C2351) * C49713 -
            (C2356 + C2355 + C2354) * C50610) *
               C50760 * C50631) *
              C50936 +
          (((C2739 + C2740 + C2741) * C49713 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50874 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C49720) +
            (C2742 + C2743 + C2744) * C50610) *
               C50760 * C2303 +
           ((C3075 + C3074 + C3073) * C49713 -
            ((C2744 + C2743 + C2742) * C50874 +
             (C2741 + C2740 + C2739) * C49720) +
            (C3078 + C3077 + C3076) * C50610) *
               C50760 * C50631) *
              C50937 +
          (((C2305 * C467 + C2300 * C482 + C2306 * C1227 + C2301 * C1235 +
             C2307 * C2702 + C2302 * C2705) *
                C49720 +
            (C2305 * C483 + C2300 * C497 + C2306 * C1234 + C2301 * C1239 +
             C2307 * C2706 + C2302 * C2711) *
                C50874 -
            (C2745 + C2746 + C2747) * C49713 -
            (C2748 + C2749 + C2750) * C50610) *
               C50760 * C2303 +
           ((C2747 + C2746 + C2745) * C49720 +
            (C2750 + C2749 + C2748) * C50874 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C49713 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C50610) *
               C50760 * C50631) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50760 * C111 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C50760 * C112 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C50760 * C113 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C50760 * C114) *
              C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50744 * C492) * C1030 +
             (C117 * C463 + C50744 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C50760 * C111 +
           (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
            C531 * C1037 - C532 * C1032) *
               C50760 * C112 +
           (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
            C763 * C1037 - C764 * C1032) *
               C50760 * C113 +
           (C763 * C1036 - (C532 * C1030 + C531 * C1035) + C764 * C1031 -
            (C117 * C754 + C50744 * C755) * C1037 -
            (C117 * C756 + C50744 * C757) * C1032) *
               C50760 * C114) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50760 * C111 +
            (C171 * C1109 + C172 * C50605) * C50760 * C112 +
            (C173 * C1109 + C174 * C50605) * C50760 * C113 +
            (C175 * C1109 + C176 * C50605) * C50760 * C114) *
               C1687 -
           ((C532 * C50605 + C531 * C1109) * C50760 * C114 +
            (C530 * C50605 + C529 * C1109) * C50760 * C113 +
            (C528 * C50605 + C527 * C1109) * C50760 * C112 +
            ((C117 * C473 + C50744 * C492) * C50605 +
             (C117 * C463 + C50744 * C474) * C1109) *
                C50760 * C111) *
               C50727) *
              C280 +
          ((((C117 * C894 + C50744 * C899) * C1109 +
             (C117 * C900 + C50744 * C909) * C50605) *
                C50760 * C111 +
            (C927 * C1109 + C928 * C50605) * C50760 * C112 +
            (C929 * C1109 + C930 * C50605) * C50760 * C113 +
            (C931 * C1109 + C932 * C50605) * C50760 * C114) *
               C50727 -
           ((C355 * C50605 + C354 * C1109) * C50760 * C114 +
            (C353 * C50605 + C352 * C1109) * C50760 * C113 +
            (C351 * C50605 + C350 * C1109) * C50760 * C112 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C50760 * C111) *
               C1687) *
              C281 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C50760 * C111 +
            (C356 * C1109 + C357 * C50605) * C50760 * C112 +
            (C358 * C1109 + C359 * C50605) * C50760 * C113 +
            (C360 * C1109 + C361 * C50605) * C50760 * C114) *
               C1687 -
           (((C117 * C1577 + C50744 * C1585) * C50605 +
             (C117 * C1573 + C50744 * C1578) * C1109) *
                C50760 * C114 +
            ((C117 * C1579 + C50744 * C1586) * C50605 +
             (C117 * C1574 + C50744 * C1580) * C1109) *
                C50760 * C113 +
            ((C117 * C1581 + C50744 * C1587) * C50605 +
             (C117 * C1575 + C50744 * C1582) * C1109) *
                C50760 * C112 +
            ((C117 * C1583 + C50744 * C1588) * C50605 +
             (C117 * C1576 + C50744 * C1584) * C1109) *
                C50760 * C111) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C50760 * C2303 +
           ((C2347 + C2346 + C2345) * C1035 + (C2350 + C2349 + C2348) * C1030 -
            (C2353 + C2352 + C2351) * C1036 - (C2356 + C2355 + C2354) * C1031 +
            (C2359 + C2358 + C2357) * C1037 + (C2362 + C2361 + C2360) * C1032) *
               C50760 * C50631) *
              C1687 +
          (((C2739 + C2740 + C2741) * C1036 -
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C1030 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1035) +
            (C2742 + C2743 + C2744) * C1031 - (C3073 + C3074 + C3075) * C1037 -
            (C3076 + C3077 + C3078) * C1032) *
               C50760 * C2303 +
           ((C3075 + C3074 + C3073) * C1036 -
            ((C2744 + C2743 + C2742) * C1030 +
             (C2741 + C2740 + C2739) * C1035) +
            (C3078 + C3077 + C3076) * C1031 -
            (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
             C2305 * C465 + C2300 * C478) *
                C1037 -
            (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
             C2305 * C479 + C2300 * C495) *
                C1032) *
               C50760 * C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C50760 * C2303 +
            ((C2347 + C2346 + C2345) * C1109 +
             (C2350 + C2349 + C2348) * C50605) *
                C50760 * C50631) *
               C1687 -
           (((C2744 + C2743 + C2742) * C50605 +
             (C2741 + C2740 + C2739) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1583 + C2302 * C1588 + C2306 * C900 + C2301 * C909 +
              C2305 * C473 + C2300 * C492) *
                 C50605 +
             (C2307 * C1576 + C2302 * C1584 + C2306 * C894 + C2301 * C899 +
              C2305 * C463 + C2300 * C474) *
                 C1109) *
                C50760 * C2303) *
               C50727) *
              C280 +
          ((((C2305 * C894 + C2300 * C899 + C2306 * C1576 + C2301 * C1584 +
              C2307 * C3272 + C2302 * C3275) *
                 C1109 +
             (C2305 * C900 + C2300 * C909 + C2306 * C1583 + C2301 * C1588 +
              C2307 * C3276 + C2302 * C3281) *
                 C50605) *
                C50760 * C2303 +
            ((C3299 + C3298 + C3297) * C1109 +
             (C3302 + C3301 + C3300) * C50605) *
                C50760 * C50631) *
               C50727 -
           (((C2550 + C2549 + C2548) * C50605 +
             (C2547 + C2546 + C2545) * C1109) *
                C50760 * C50631 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C50760 * C2303) *
               C1687) *
              C281 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C50760 * C2303 +
            ((C2553 + C2552 + C2551) * C1109 +
             (C2556 + C2555 + C2554) * C50605) *
                C50760 * C50631) *
               C1687 -
           (((C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
              C2305 * C1581 + C2300 * C1587) *
                 C50605 +
             (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
              C2305 * C1575 + C2300 * C1582) *
                 C1109) *
                C50760 * C50631 +
            ((C2307 * C4198 + C2302 * C4201 + C2306 * C3276 + C2301 * C3281 +
              C2305 * C1583 + C2300 * C1588) *
                 C50605 +
             (C2307 * C4195 + C2302 * C4199 + C2306 * C3272 + C2301 * C3275 +
              C2305 * C1576 + C2300 * C1584) *
                 C1109) *
                C50760 * C2303) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C641 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50930 -
                    (C24740 + C24741 + C24742) * C642 -
                    (C24743 + C24744 + C24745) * C50931 +
                    (C24746 + C24747 + C24748) * C643 +
                    (C24749 + C24750 + C24751) * C638) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C641 +
                    (C24745 + C24744 + C24743) * C50930 -
                    (C24748 + C24747 + C24746) * C642 -
                    (C24751 + C24750 + C24749) * C50931 +
                    (C24754 + C24753 + C24752) * C643 +
                    (C24757 + C24756 + C24755) * C638) *
                       C50760 * C50631) *
                      C50663 * C50889 +
                  (((C24928 + C24929 + C24930) * C642 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50930 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C641) +
                    (C24931 + C24932 + C24933) * C50931 -
                    (C25280 + C25281 + C25282) * C643 -
                    (C25283 + C25284 + C25285) * C638) *
                       C50760 * C50881 +
                   ((C25282 + C25281 + C25280) * C642 -
                    ((C24933 + C24932 + C24931) * C50930 +
                     (C24930 + C24929 + C24928) * C641) +
                    (C25285 + C25284 + C25283) * C50931 -
                    (C24702 * C1110 + C24697 * C1115 + C24701 * C293 +
                     C50939 * C311 + C24700 * C288 + C50938 * C301) *
                        C643 -
                    (C24702 * C1114 + C24697 * C1122 + C24701 * C312 +
                     C50939 * C323 + C24700 * C302 + C50938 * C318) *
                        C638) *
                       C50760 * C50631) *
                      C50663 * C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C283 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C278 -
                     (C24740 + C24741 + C24742) * C284 -
                     (C24743 + C24744 + C24745) * C50610) *
                        C50760 * C50881 +
                    ((C24742 + C24741 + C24740) * C283 +
                     (C24745 + C24744 + C24743) * C278 -
                     (C24748 + C24747 + C24746) * C284 -
                     (C24751 + C24750 + C24749) * C50610) *
                        C50760 * C50631) *
                       C50890 +
                   (((C25110 + C25111 + C25112) * C284 -
                     ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                       C50939 * C909 + C24700 * C473 + C50938 * C492) *
                          C278 +
                      (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                       C50939 * C899 + C24700 * C463 + C50938 * C474) *
                          C283) +
                     (C25113 + C25114 + C25115) * C50610) *
                        C50760 * C50881 +
                    ((C25446 + C25445 + C25444) * C284 -
                     ((C25115 + C25114 + C25113) * C278 +
                      (C25112 + C25111 + C25110) * C283) +
                     (C25449 + C25448 + C25447) * C50610) *
                        C50760 * C50631) *
                       C50727) *
                      C50889 +
                  ((((C24928 + C24929 + C24930) * C284 -
                     ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                       C50939 * C320 + C24700 * C296 + C50938 * C315) *
                          C278 +
                      (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                       C50939 * C305 + C24700 * C286 + C50938 * C297) *
                          C283) +
                     (C24931 + C24932 + C24933) * C50610) *
                        C50760 * C50881 +
                    ((C25282 + C25281 + C25280) * C284 -
                     ((C24933 + C24932 + C24931) * C278 +
                      (C24930 + C24929 + C24928) * C283) +
                     (C25285 + C25284 + C25283) * C50610) *
                        C50760 * C50631) *
                       C50890 +
                   (((C24700 * C894 + C50938 * C899 + C24701 * C1576 +
                      C50939 * C1584 + C24702 * C3272 + C24697 * C3275) *
                         C283 +
                     (C24700 * C900 + C50938 * C909 + C24701 * C1583 +
                      C50939 * C1588 + C24702 * C3276 + C24697 * C3281) *
                         C278 -
                     (C25656 + C25657 + C25658) * C284 -
                     (C25659 + C25660 + C25661) * C50610) *
                        C50760 * C50881 +
                    ((C25658 + C25657 + C25656) * C283 +
                     (C25661 + C25660 + C25659) * C278 -
                     (C24702 * C3274 + C24697 * C3279 + C24701 * C1574 +
                      C50939 * C1580 + C24700 * C896 + C50938 * C903) *
                         C284 -
                     (C24702 * C3280 + C24697 * C3283 + C24701 * C1579 +
                      C50939 * C1586 + C24700 * C904 + C50938 * C911) *
                         C50610) *
                        C50760 * C50631) *
                       C50727) *
                      C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C283 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C283 +
                    (C24745 + C24744 + C24743) * C278 -
                    (C24748 + C24747 + C24746) * C284 -
                    (C24751 + C24750 + C24749) * C50610) *
                       C50760 * C50631) *
                      C50663 * C280 +
                  (((C24928 + C24929 + C24930) * C284 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C278 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C283) +
                    (C24931 + C24932 + C24933) * C50610) *
                       C50760 * C50881 +
                   ((C24700 * C287 + C50938 * C299 + C24701 * C292 +
                     C50939 * C309 + C24702 * C1111 + C24697 * C1117) *
                        C284 -
                    ((C24933 + C24932 + C24931) * C278 +
                     (C24930 + C24929 + C24928) * C283) +
                    (C24700 * C300 + C50938 * C317 + C24701 * C310 +
                     C50939 * C322 + C24702 * C1116 + C24697 * C1123) *
                        C50610) *
                       C50760 * C50631) *
                      C50663 * C281 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C283 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C278 -
                    (C24934 + C24935 + C24936) * C284 -
                    (C24937 + C24938 + C24939) * C50610) *
                       C50760 * C50881 +
                   ((C24936 + C24935 + C24934) * C283 +
                    (C24939 + C24938 + C24937) * C278 -
                    (C24702 * C2510 + C24697 * C2515 + C24701 * C1111 +
                     C50939 * C1117 + C24700 * C292 + C50938 * C309) *
                        C284 -
                    (C24702 * C2516 + C24697 * C2519 + C24701 * C1116 +
                     C50939 * C1123 + C24700 * C310 + C50938 * C322) *
                        C50610) *
                       C50760 * C50631) *
                      C50663 * C282)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                    C50939 * C297 + C24702 * C290 + C24697 * C305) *
                       C118 +
                   (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                    C50939 * C315 + C24702 * C306 + C24697 * C320) *
                       C106 -
                   (C24740 + C24741 + C24742) * C119 -
                   (C24743 + C24744 + C24745) * C107 +
                   (C24746 + C24747 + C24748) * C120 +
                   (C24749 + C24750 + C24751) * C108 -
                   (C24752 + C24753 + C24754) * C121 -
                   (C24755 + C24756 + C24757) * C109) *
                      C50760 * C50881 +
                  ((C24742 + C24741 + C24740) * C118 +
                   (C24745 + C24744 + C24743) * C106 -
                   (C24748 + C24747 + C24746) * C119 -
                   (C24751 + C24750 + C24749) * C107 +
                   (C24754 + C24753 + C24752) * C120 +
                   (C24757 + C24756 + C24755) * C108 -
                   (C24702 * C294 + C24697 * C313 + C24701 * C289 +
                    C50939 * C303 + C24700 * C126 + C50938 * C137) *
                       C121 -
                   (C24702 * C314 + C24697 * C324 + C24701 * C304 +
                    C50939 * C319 + C24700 * C138 + C50938 * C147) *
                       C109) *
                      C50760 * C50631) *
                 C50663 * C50651) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C283 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C283 +
                    (C24745 + C24744 + C24743) * C278 -
                    (C24748 + C24747 + C24746) * C284 -
                    (C24751 + C24750 + C24749) * C50610) *
                       C50760 * C50631) *
                      C459 +
                  (((C25110 + C25111 + C25112) * C284 -
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C278 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C283) +
                    (C25113 + C25114 + C25115) * C50610) *
                       C50760 * C50881 +
                   ((C24700 * C464 + C50938 * C476 + C24701 * C896 +
                     C50939 * C903 + C24702 * C1574 + C24697 * C1580) *
                        C284 -
                    ((C25115 + C25114 + C25113) * C278 +
                     (C25112 + C25111 + C25110) * C283) +
                    (C24700 * C477 + C50938 * C494 + C24701 * C904 +
                     C50939 * C911 + C24702 * C1579 + C24697 * C1586) *
                        C50610) *
                       C50760 * C50631) *
                      C460 +
                  (((C24700 * C467 + C50938 * C482 + C24701 * C1227 +
                     C50939 * C1235 + C24702 * C2702 + C24697 * C2705) *
                        C283 +
                    (C24700 * C483 + C50938 * C497 + C24701 * C1234 +
                     C50939 * C1239 + C24702 * C2706 + C24697 * C2711) *
                        C278 -
                    (C25116 + C25117 + C25118) * C284 -
                    (C25119 + C25120 + C25121) * C50610) *
                       C50760 * C50881 +
                   ((C25118 + C25117 + C25116) * C283 +
                    (C25121 + C25120 + C25119) * C278 -
                    (C24702 * C2704 + C24697 * C2709 + C24701 * C1225 +
                     C50939 * C1231 + C24700 * C469 + C50938 * C486) *
                        C284 -
                    (C24702 * C2710 + C24697 * C2713 + C24701 * C1230 +
                     C50939 * C1237 + C24700 * C487 + C50938 * C499) *
                        C50610) *
                       C50760 * C50631) *
                      C461) *
                 C50651) /
                    (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C641 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50930 -
                    (C24740 + C24741 + C24742) * C642 -
                    (C24743 + C24744 + C24745) * C50931 +
                    (C24746 + C24747 + C24748) * C643 +
                    (C24749 + C24750 + C24751) * C638) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C641 +
                    (C24745 + C24744 + C24743) * C50930 -
                    (C24748 + C24747 + C24746) * C642 -
                    (C24751 + C24750 + C24749) * C50931 +
                    (C24754 + C24753 + C24752) * C643 +
                    (C24757 + C24756 + C24755) * C638) *
                       C50760 * C50631) *
                      C50890 +
                  (((C25110 + C25111 + C25112) * C642 -
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C50930 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C641) +
                    (C25113 + C25114 + C25115) * C50931 -
                    (C25444 + C25445 + C25446) * C643 -
                    (C25447 + C25448 + C25449) * C638) *
                       C50760 * C50881 +
                   ((C25446 + C25445 + C25444) * C642 -
                    ((C25115 + C25114 + C25113) * C50930 +
                     (C25112 + C25111 + C25110) * C641) +
                    (C25449 + C25448 + C25447) * C50931 -
                    (C24702 * C1573 + C24697 * C1578 + C24701 * C897 +
                     C50939 * C905 + C24700 * C465 + C50938 * C478) *
                        C643 -
                    (C24702 * C1577 + C24697 * C1585 + C24701 * C906 +
                     C50939 * C912 + C24700 * C479 + C50938 * C495) *
                        C638) *
                       C50760 * C50631) *
                      C50727) *
                 C50651) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                    C50939 * C297 + C24702 * C290 + C24697 * C305) *
                       C118 +
                   (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                    C50939 * C315 + C24702 * C306 + C24697 * C320) *
                       C106 -
                   (C24740 + C24741 + C24742) * C119 -
                   (C24743 + C24744 + C24745) * C107 +
                   (C24746 + C24747 + C24748) * C120 +
                   (C24749 + C24750 + C24751) * C108 -
                   (C24752 + C24753 + C24754) * C121 -
                   (C24755 + C24756 + C24757) * C109) *
                      C50760 * C50881 +
                  ((C24742 + C24741 + C24740) * C118 +
                   (C24745 + C24744 + C24743) * C106 -
                   (C24748 + C24747 + C24746) * C119 -
                   (C24751 + C24750 + C24749) * C107 +
                   (C24754 + C24753 + C24752) * C120 +
                   (C24757 + C24756 + C24755) * C108 -
                   (C24702 * C294 + C24697 * C313 + C24701 * C289 +
                    C50939 * C303 + C24700 * C126 + C50938 * C137) *
                       C121 -
                   (C24702 * C314 + C24697 * C324 + C24701 * C304 +
                    C50939 * C319 + C24700 * C138 + C50938 * C147) *
                       C109) *
                      C50760 * C50631) *
                 C50663 * C50651) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C283 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C283 +
                    (C24745 + C24744 + C24743) * C278 -
                    (C24748 + C24747 + C24746) * C284 -
                    (C24751 + C24750 + C24749) * C50610) *
                       C50760 * C50631) *
                      C50663 * C280 +
                  (((C24928 + C24929 + C24930) * C284 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C278 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C283) +
                    (C24931 + C24932 + C24933) * C50610) *
                       C50760 * C50881 +
                   ((C24700 * C287 + C50938 * C299 + C24701 * C292 +
                     C50939 * C309 + C24702 * C1111 + C24697 * C1117) *
                        C284 -
                    ((C24933 + C24932 + C24931) * C278 +
                     (C24930 + C24929 + C24928) * C283) +
                    (C24700 * C300 + C50938 * C317 + C24701 * C310 +
                     C50939 * C322 + C24702 * C1116 + C24697 * C1123) *
                        C50610) *
                       C50760 * C50631) *
                      C50663 * C281 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C283 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C278 -
                    (C24934 + C24935 + C24936) * C284 -
                    (C24937 + C24938 + C24939) * C50610) *
                       C50760 * C50881 +
                   ((C24936 + C24935 + C24934) * C283 +
                    (C24939 + C24938 + C24937) * C278 -
                    (C24702 * C2510 + C24697 * C2515 + C24701 * C1111 +
                     C50939 * C1117 + C24700 * C292 + C50938 * C309) *
                        C284 -
                    (C24702 * C2516 + C24697 * C2519 + C24701 * C1116 +
                     C50939 * C1123 + C24700 * C310 + C50938 * C322) *
                        C50610) *
                       C50760 * C50631) *
                      C50663 * C282)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C49720 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50874 -
                    (C24740 + C24741 + C24742) * C49713 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C49720 +
                    (C24745 + C24744 + C24743) * C50874 -
                    (C24748 + C24747 + C24746) * C49713 -
                    (C24751 + C24750 + C24749) * C50610) *
                       C50760 * C50631) *
                      C50663 * C50934 +
                  (((C24928 + C24929 + C24930) * C49713 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50874 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C49720) +
                    (C24931 + C24932 + C24933) * C50610) *
                       C50760 * C50881 +
                   ((C25282 + C25281 + C25280) * C49713 -
                    ((C24933 + C24932 + C24931) * C50874 +
                     (C24930 + C24929 + C24928) * C49720) +
                    (C25285 + C25284 + C25283) * C50610) *
                       C50760 * C50631) *
                      C50663 * C50935 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C49720 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C50874 -
                    (C24934 + C24935 + C24936) * C49713 -
                    (C24937 + C24938 + C24939) * C50610) *
                       C50760 * C50881 +
                   ((C24936 + C24935 + C24934) * C49720 +
                    (C24939 + C24938 + C24937) * C50874 -
                    (C24702 * C2510 + C24697 * C2515 + C24701 * C1111 +
                     C50939 * C1117 + C24700 * C292 + C50938 * C309) *
                        C49713 -
                    (C24702 * C2516 + C24697 * C2519 + C24701 * C1116 +
                     C50939 * C1123 + C24700 * C310 + C50938 * C322) *
                        C50610) *
                       C50760 * C50631) *
                      C50663 * C1342)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1109 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50605) *
                        C50760 * C50881 +
                    ((C24742 + C24741 + C24740) * C1109 +
                     (C24745 + C24744 + C24743) * C50605) *
                        C50760 * C50631) *
                       C50890 -
                   (((C25115 + C25114 + C25113) * C50605 +
                     (C25112 + C25111 + C25110) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C50605 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C1109) *
                        C50760 * C50881) *
                       C50727) *
                      C50934 +
                  ((((C24700 * C894 + C50938 * C899 + C24701 * C1576 +
                      C50939 * C1584 + C24702 * C3272 + C24697 * C3275) *
                         C1109 +
                     (C24700 * C900 + C50938 * C909 + C24701 * C1583 +
                      C50939 * C1588 + C24702 * C3276 + C24697 * C3281) *
                         C50605) *
                        C50760 * C50881 +
                    ((C25658 + C25657 + C25656) * C1109 +
                     (C25661 + C25660 + C25659) * C50605) *
                        C50760 * C50631) *
                       C50727 -
                   (((C24933 + C24932 + C24931) * C50605 +
                     (C24930 + C24929 + C24928) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50605 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1109) *
                        C50760 * C50881) *
                       C50890) *
                      C50935 +
                  ((((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                      C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                         C1109 +
                     (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                      C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                         C50605) *
                        C50760 * C50881 +
                    ((C24936 + C24935 + C24934) * C1109 +
                     (C24939 + C24938 + C24937) * C50605) *
                        C50760 * C50631) *
                       C50890 -
                   (((C24702 * C4196 + C24697 * C4200 + C24701 * C3278 +
                      C50939 * C3282 + C24700 * C1581 + C50938 * C1587) *
                         C50605 +
                     (C24702 * C4194 + C24697 * C4197 + C24701 * C3273 +
                      C50939 * C3277 + C24700 * C1575 + C50938 * C1582) *
                         C1109) *
                        C50760 * C50631 +
                    ((C24702 * C4198 + C24697 * C4201 + C24701 * C3276 +
                      C50939 * C3281 + C24700 * C1583 + C50938 * C1588) *
                         C50605 +
                     (C24702 * C4195 + C24697 * C4199 + C24701 * C3272 +
                      C50939 * C3275 + C24700 * C1576 + C50938 * C1584) *
                         C1109) *
                        C50760 * C50881) *
                       C50727) *
                      C1342)) /
                (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1109 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50605) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C1109 +
                    (C24745 + C24744 + C24743) * C50605) *
                       C50760 * C50631) *
                      C50663 * C1105 -
                  (((C24933 + C24932 + C24931) * C50605 +
                    (C24930 + C24929 + C24928) * C1109) *
                       C50760 * C50631 +
                   ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                     C50939 * C320 + C24700 * C296 + C50938 * C315) *
                        C50605 +
                    (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                     C50939 * C305 + C24700 * C286 + C50938 * C297) *
                        C1109) *
                       C50760 * C50881) *
                      C50663 * C1106 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C1109 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C50605) *
                       C50760 * C50881 +
                   ((C24936 + C24935 + C24934) * C1109 +
                    (C24939 + C24938 + C24937) * C50605) *
                       C50760 * C50631) *
                      C50663 * C1107 -
                  (((C24702 * C3548 + C24697 * C3552 + C24701 * C2514 +
                     C50939 * C2518 + C24700 * C1118 + C50938 * C1124) *
                        C50605 +
                    (C24702 * C3546 + C24697 * C3549 + C24701 * C2509 +
                     C50939 * C2513 + C24700 * C1112 + C50938 * C1119) *
                        C1109) *
                       C50760 * C50631 +
                   ((C24702 * C3550 + C24697 * C3553 + C24701 * C2512 +
                     C50939 * C2517 + C24700 * C1120 + C50938 * C1125) *
                        C50605 +
                    (C24702 * C3547 + C24697 * C3551 + C24701 * C2508 +
                     C50939 * C2511 + C24700 * C1113 + C50938 * C1121) *
                        C1109) *
                       C50760 * C50881) *
                      C50663 * C1108)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1035 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C1030 -
                    (C24740 + C24741 + C24742) * C1036 -
                    (C24743 + C24744 + C24745) * C1031 +
                    (C24746 + C24747 + C24748) * C1037 +
                    (C24749 + C24750 + C24751) * C1032) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C1035 +
                    (C24745 + C24744 + C24743) * C1030 -
                    (C24748 + C24747 + C24746) * C1036 -
                    (C24751 + C24750 + C24749) * C1031 +
                    (C24754 + C24753 + C24752) * C1037 +
                    (C24757 + C24756 + C24755) * C1032) *
                       C50760 * C50631) *
                      C50663 * C1033 +
                  (((C24928 + C24929 + C24930) * C1036 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C1030 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1035) +
                    (C24931 + C24932 + C24933) * C1031 -
                    (C25280 + C25281 + C25282) * C1037 -
                    (C25283 + C25284 + C25285) * C1032) *
                       C50760 * C50881 +
                   ((C25282 + C25281 + C25280) * C1036 -
                    ((C24933 + C24932 + C24931) * C1030 +
                     (C24930 + C24929 + C24928) * C1035) +
                    (C25285 + C25284 + C25283) * C1031 -
                    (C24702 * C1110 + C24697 * C1115 + C24701 * C293 +
                     C50939 * C311 + C24700 * C288 + C50938 * C301) *
                        C1037 -
                    (C24702 * C1114 + C24697 * C1122 + C24701 * C312 +
                     C50939 * C323 + C24700 * C302 + C50938 * C318) *
                        C1032) *
                       C50760 * C50631) *
                      C50663 * C50701)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1109 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50605) *
                        C50760 * C50881 +
                    ((C24742 + C24741 + C24740) * C1109 +
                     (C24745 + C24744 + C24743) * C50605) *
                        C50760 * C50631) *
                       C459 -
                   (((C25115 + C25114 + C25113) * C50605 +
                     (C25112 + C25111 + C25110) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C50605 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C1109) *
                        C50760 * C50881) *
                       C460 +
                   (((C24700 * C467 + C50938 * C482 + C24701 * C1227 +
                      C50939 * C1235 + C24702 * C2702 + C24697 * C2705) *
                         C1109 +
                     (C24700 * C483 + C50938 * C497 + C24701 * C1234 +
                      C50939 * C1239 + C24702 * C2706 + C24697 * C2711) *
                         C50605) *
                        C50760 * C50881 +
                    ((C25118 + C25117 + C25116) * C1109 +
                     (C25121 + C25120 + C25119) * C50605) *
                        C50760 * C50631) *
                       C461) *
                      C1033 +
                  ((((C24700 * C894 + C50938 * C899 + C24701 * C1576 +
                      C50939 * C1584 + C24702 * C3272 + C24697 * C3275) *
                         C1109 +
                     (C24700 * C900 + C50938 * C909 + C24701 * C1583 +
                      C50939 * C1588 + C24702 * C3276 + C24697 * C3281) *
                         C50605) *
                        C50760 * C50881 +
                    ((C25658 + C25657 + C25656) * C1109 +
                     (C25661 + C25660 + C25659) * C50605) *
                        C50760 * C50631) *
                       C460 -
                   (((C24933 + C24932 + C24931) * C50605 +
                     (C24930 + C24929 + C24928) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50605 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1109) *
                        C50760 * C50881) *
                       C459 -
                   (((C24702 * C3702 + C24697 * C3706 + C24701 * C2708 +
                      C50939 * C2712 + C24700 * C1232 + C50938 * C1238) *
                         C50605 +
                     (C24702 * C3700 + C24697 * C3703 + C24701 * C2703 +
                      C50939 * C2707 + C24700 * C1226 + C50938 * C1233) *
                         C1109) *
                        C50760 * C50631 +
                    ((C24702 * C3704 + C24697 * C3707 + C24701 * C2706 +
                      C50939 * C2711 + C24700 * C1234 + C50938 * C1239) *
                         C50605 +
                     (C24702 * C3701 + C24697 * C3705 + C24701 * C2702 +
                      C50939 * C2705 + C24700 * C1227 + C50938 * C1235) *
                         C1109) *
                        C50760 * C50881) *
                       C461) *
                      C50701)) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C49720 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50874 -
                     (C24740 + C24741 + C24742) * C49713 -
                     (C24743 + C24744 + C24745) * C50610) *
                        C50760 * C50881 +
                    ((C24742 + C24741 + C24740) * C49720 +
                     (C24745 + C24744 + C24743) * C50874 -
                     (C24748 + C24747 + C24746) * C49713 -
                     (C24751 + C24750 + C24749) * C50610) *
                        C50760 * C50631) *
                       C50890 +
                   (((C25110 + C25111 + C25112) * C49713 -
                     ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                       C50939 * C909 + C24700 * C473 + C50938 * C492) *
                          C50874 +
                      (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                       C50939 * C899 + C24700 * C463 + C50938 * C474) *
                          C49720) +
                     (C25113 + C25114 + C25115) * C50610) *
                        C50760 * C50881 +
                    ((C25446 + C25445 + C25444) * C49713 -
                     ((C25115 + C25114 + C25113) * C50874 +
                      (C25112 + C25111 + C25110) * C49720) +
                     (C25449 + C25448 + C25447) * C50610) *
                        C50760 * C50631) *
                       C50727) *
                      C1033 +
                  ((((C24928 + C24929 + C24930) * C49713 -
                     ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                       C50939 * C320 + C24700 * C296 + C50938 * C315) *
                          C50874 +
                      (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                       C50939 * C305 + C24700 * C286 + C50938 * C297) *
                          C49720) +
                     (C24931 + C24932 + C24933) * C50610) *
                        C50760 * C50881 +
                    ((C25282 + C25281 + C25280) * C49713 -
                     ((C24933 + C24932 + C24931) * C50874 +
                      (C24930 + C24929 + C24928) * C49720) +
                     (C25285 + C25284 + C25283) * C50610) *
                        C50760 * C50631) *
                       C50890 +
                   (((C24700 * C894 + C50938 * C899 + C24701 * C1576 +
                      C50939 * C1584 + C24702 * C3272 + C24697 * C3275) *
                         C49720 +
                     (C24700 * C900 + C50938 * C909 + C24701 * C1583 +
                      C50939 * C1588 + C24702 * C3276 + C24697 * C3281) *
                         C50874 -
                     (C25656 + C25657 + C25658) * C49713 -
                     (C25659 + C25660 + C25661) * C50610) *
                        C50760 * C50881 +
                    ((C25658 + C25657 + C25656) * C49720 +
                     (C25661 + C25660 + C25659) * C50874 -
                     (C24702 * C3274 + C24697 * C3279 + C24701 * C1574 +
                      C50939 * C1580 + C24700 * C896 + C50938 * C903) *
                         C49713 -
                     (C24702 * C3280 + C24697 * C3283 + C24701 * C1579 +
                      C50939 * C1586 + C24700 * C904 + C50938 * C911) *
                         C50610) *
                        C50760 * C50631) *
                       C50727) *
                      C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1035 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C1030 -
                    (C24740 + C24741 + C24742) * C1036 -
                    (C24743 + C24744 + C24745) * C1031 +
                    (C24746 + C24747 + C24748) * C1037 +
                    (C24749 + C24750 + C24751) * C1032) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C1035 +
                    (C24745 + C24744 + C24743) * C1030 -
                    (C24748 + C24747 + C24746) * C1036 -
                    (C24751 + C24750 + C24749) * C1031 +
                    (C24754 + C24753 + C24752) * C1037 +
                    (C24757 + C24756 + C24755) * C1032) *
                       C50760 * C50631) *
                      C50663 * C1033 +
                  (((C24928 + C24929 + C24930) * C1036 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C1030 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1035) +
                    (C24931 + C24932 + C24933) * C1031 -
                    (C25280 + C25281 + C25282) * C1037 -
                    (C25283 + C25284 + C25285) * C1032) *
                       C50760 * C50881 +
                   ((C25282 + C25281 + C25280) * C1036 -
                    ((C24933 + C24932 + C24931) * C1030 +
                     (C24930 + C24929 + C24928) * C1035) +
                    (C25285 + C25284 + C25283) * C1031 -
                    (C24702 * C1110 + C24697 * C1115 + C24701 * C293 +
                     C50939 * C311 + C24700 * C288 + C50938 * C301) *
                        C1037 -
                    (C24702 * C1114 + C24697 * C1122 + C24701 * C312 +
                     C50939 * C323 + C24700 * C302 + C50938 * C318) *
                        C1032) *
                       C50760 * C50631) *
                      C50663 * C50701)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1109 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50605) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C1109 +
                    (C24745 + C24744 + C24743) * C50605) *
                       C50760 * C50631) *
                      C50663 * C1105 -
                  (((C24933 + C24932 + C24931) * C50605 +
                    (C24930 + C24929 + C24928) * C1109) *
                       C50760 * C50631 +
                   ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                     C50939 * C320 + C24700 * C296 + C50938 * C315) *
                        C50605 +
                    (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                     C50939 * C305 + C24700 * C286 + C50938 * C297) *
                        C1109) *
                       C50760 * C50881) *
                      C50663 * C1106 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C1109 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C50605) *
                       C50760 * C50881 +
                   ((C24936 + C24935 + C24934) * C1109 +
                    (C24939 + C24938 + C24937) * C50605) *
                       C50760 * C50631) *
                      C50663 * C1107 -
                  (((C24702 * C3548 + C24697 * C3552 + C24701 * C2514 +
                     C50939 * C2518 + C24700 * C1118 + C50938 * C1124) *
                        C50605 +
                    (C24702 * C3546 + C24697 * C3549 + C24701 * C2509 +
                     C50939 * C2513 + C24700 * C1112 + C50938 * C1119) *
                        C1109) *
                       C50760 * C50631 +
                   ((C24702 * C3550 + C24697 * C3553 + C24701 * C2512 +
                     C50939 * C2517 + C24700 * C1120 + C50938 * C1125) *
                        C50605 +
                    (C24702 * C3547 + C24697 * C3551 + C24701 * C2508 +
                     C50939 * C2511 + C24700 * C1113 + C50938 * C1121) *
                        C1109) *
                       C50760 * C50881) *
                      C50663 * C1108)) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C49720 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50874 -
                     (C24740 + C24741 + C24742) * C49713 -
                     (C24743 + C24744 + C24745) * C50610) *
                        C50760 * C50881 +
                    ((C24742 + C24741 + C24740) * C49720 +
                     (C24745 + C24744 + C24743) * C50874 -
                     (C24748 + C24747 + C24746) * C49713 -
                     (C24751 + C24750 + C24749) * C50610) *
                        C50760 * C50631) *
                       C1687 +
                   (((C25110 + C25111 + C25112) * C49713 -
                     ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                       C50939 * C909 + C24700 * C473 + C50938 * C492) *
                          C50874 +
                      (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                       C50939 * C899 + C24700 * C463 + C50938 * C474) *
                          C49720) +
                     (C25113 + C25114 + C25115) * C50610) *
                        C50760 * C50881 +
                    ((C25446 + C25445 + C25444) * C49713 -
                     ((C25115 + C25114 + C25113) * C50874 +
                      (C25112 + C25111 + C25110) * C49720) +
                     (C25449 + C25448 + C25447) * C50610) *
                        C50760 * C50631) *
                       C50727) *
                      C50889 +
                  ((((C24928 + C24929 + C24930) * C49713 -
                     ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                       C50939 * C320 + C24700 * C296 + C50938 * C315) *
                          C50874 +
                      (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                       C50939 * C305 + C24700 * C286 + C50938 * C297) *
                          C49720) +
                     (C24931 + C24932 + C24933) * C50610) *
                        C50760 * C50881 +
                    ((C25282 + C25281 + C25280) * C49713 -
                     ((C24933 + C24932 + C24931) * C50874 +
                      (C24930 + C24929 + C24928) * C49720) +
                     (C25285 + C25284 + C25283) * C50610) *
                        C50760 * C50631) *
                       C1687 +
                   (((C24700 * C894 + C50938 * C899 + C24701 * C1576 +
                      C50939 * C1584 + C24702 * C3272 + C24697 * C3275) *
                         C49720 +
                     (C24700 * C900 + C50938 * C909 + C24701 * C1583 +
                      C50939 * C1588 + C24702 * C3276 + C24697 * C3281) *
                         C50874 -
                     (C25656 + C25657 + C25658) * C49713 -
                     (C25659 + C25660 + C25661) * C50610) *
                        C50760 * C50881 +
                    ((C25658 + C25657 + C25656) * C49720 +
                     (C25661 + C25660 + C25659) * C50874 -
                     (C24702 * C3274 + C24697 * C3279 + C24701 * C1574 +
                      C50939 * C1580 + C24700 * C896 + C50938 * C903) *
                         C49713 -
                     (C24702 * C3280 + C24697 * C3283 + C24701 * C1579 +
                      C50939 * C1586 + C24700 * C904 + C50938 * C911) *
                         C50610) *
                        C50760 * C50631) *
                       C50727) *
                      C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[86] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1109 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50605) *
                        C50760 * C50881 +
                    ((C24742 + C24741 + C24740) * C1109 +
                     (C24745 + C24744 + C24743) * C50605) *
                        C50760 * C50631) *
                       C50936 -
                   (((C25115 + C25114 + C25113) * C50605 +
                     (C25112 + C25111 + C25110) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C50605 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C1109) *
                        C50760 * C50881) *
                       C50937 +
                   (((C24700 * C467 + C50938 * C482 + C24701 * C1227 +
                      C50939 * C1235 + C24702 * C2702 + C24697 * C2705) *
                         C1109 +
                     (C24700 * C483 + C50938 * C497 + C24701 * C1234 +
                      C50939 * C1239 + C24702 * C2706 + C24697 * C2711) *
                         C50605) *
                        C50760 * C50881 +
                    ((C25118 + C25117 + C25116) * C1109 +
                     (C25121 + C25120 + C25119) * C50605) *
                        C50760 * C50631) *
                       C2103) *
                      C50889 +
                  ((((C24700 * C894 + C50938 * C899 + C24701 * C1576 +
                      C50939 * C1584 + C24702 * C3272 + C24697 * C3275) *
                         C1109 +
                     (C24700 * C900 + C50938 * C909 + C24701 * C1583 +
                      C50939 * C1588 + C24702 * C3276 + C24697 * C3281) *
                         C50605) *
                        C50760 * C50881 +
                    ((C25658 + C25657 + C25656) * C1109 +
                     (C25661 + C25660 + C25659) * C50605) *
                        C50760 * C50631) *
                       C50937 -
                   (((C24933 + C24932 + C24931) * C50605 +
                     (C24930 + C24929 + C24928) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50605 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1109) *
                        C50760 * C50881) *
                       C50936 -
                   (((C24702 * C3702 + C24697 * C3706 + C24701 * C2708 +
                      C50939 * C2712 + C24700 * C1232 + C50938 * C1238) *
                         C50605 +
                     (C24702 * C3700 + C24697 * C3703 + C24701 * C2703 +
                      C50939 * C2707 + C24700 * C1226 + C50938 * C1233) *
                         C1109) *
                        C50760 * C50631 +
                    ((C24702 * C3704 + C24697 * C3707 + C24701 * C2706 +
                      C50939 * C2711 + C24700 * C1234 + C50938 * C1239) *
                         C50605 +
                     (C24702 * C3701 + C24697 * C3705 + C24701 * C2702 +
                      C50939 * C2705 + C24700 * C1227 + C50938 * C1235) *
                         C1109) *
                        C50760 * C50881) *
                       C2103) *
                      C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[87] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1109 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50605) *
                        C50760 * C50881 +
                    ((C24742 + C24741 + C24740) * C1109 +
                     (C24745 + C24744 + C24743) * C50605) *
                        C50760 * C50631) *
                       C1687 -
                   (((C25115 + C25114 + C25113) * C50605 +
                     (C25112 + C25111 + C25110) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C50605 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C1109) *
                        C50760 * C50881) *
                       C50727) *
                      C280 +
                  ((((C24700 * C894 + C50938 * C899 + C24701 * C1576 +
                      C50939 * C1584 + C24702 * C3272 + C24697 * C3275) *
                         C1109 +
                     (C24700 * C900 + C50938 * C909 + C24701 * C1583 +
                      C50939 * C1588 + C24702 * C3276 + C24697 * C3281) *
                         C50605) *
                        C50760 * C50881 +
                    ((C25658 + C25657 + C25656) * C1109 +
                     (C25661 + C25660 + C25659) * C50605) *
                        C50760 * C50631) *
                       C50727 -
                   (((C24933 + C24932 + C24931) * C50605 +
                     (C24930 + C24929 + C24928) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50605 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1109) *
                        C50760 * C50881) *
                       C1687) *
                      C281 +
                  ((((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                      C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                         C1109 +
                     (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                      C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                         C50605) *
                        C50760 * C50881 +
                    ((C24936 + C24935 + C24934) * C1109 +
                     (C24939 + C24938 + C24937) * C50605) *
                        C50760 * C50631) *
                       C1687 -
                   (((C24702 * C4196 + C24697 * C4200 + C24701 * C3278 +
                      C50939 * C3282 + C24700 * C1581 + C50938 * C1587) *
                         C50605 +
                     (C24702 * C4194 + C24697 * C4197 + C24701 * C3273 +
                      C50939 * C3277 + C24700 * C1575 + C50938 * C1582) *
                         C1109) *
                        C50760 * C50631 +
                    ((C24702 * C4198 + C24697 * C4201 + C24701 * C3276 +
                      C50939 * C3281 + C24700 * C1583 + C50938 * C1588) *
                         C50605 +
                     (C24702 * C4195 + C24697 * C4199 + C24701 * C3272 +
                      C50939 * C3275 + C24700 * C1576 + C50938 * C1584) *
                         C1109) *
                        C50760 * C50881) *
                       C50727) *
                      C282)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1035 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C1030 -
                    (C24740 + C24741 + C24742) * C1036 -
                    (C24743 + C24744 + C24745) * C1031 +
                    (C24746 + C24747 + C24748) * C1037 +
                    (C24749 + C24750 + C24751) * C1032) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C1035 +
                    (C24745 + C24744 + C24743) * C1030 -
                    (C24748 + C24747 + C24746) * C1036 -
                    (C24751 + C24750 + C24749) * C1031 +
                    (C24754 + C24753 + C24752) * C1037 +
                    (C24757 + C24756 + C24755) * C1032) *
                       C50760 * C50631) *
                      C1687 +
                  (((C25110 + C25111 + C25112) * C1036 -
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C1030 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C1035) +
                    (C25113 + C25114 + C25115) * C1031 -
                    (C25444 + C25445 + C25446) * C1037 -
                    (C25447 + C25448 + C25449) * C1032) *
                       C50760 * C50881 +
                   ((C25446 + C25445 + C25444) * C1036 -
                    ((C25115 + C25114 + C25113) * C1030 +
                     (C25112 + C25111 + C25110) * C1035) +
                    (C25449 + C25448 + C25447) * C1031 -
                    (C24702 * C1573 + C24697 * C1578 + C24701 * C897 +
                     C50939 * C905 + C24700 * C465 + C50938 * C478) *
                        C1037 -
                    (C24702 * C1577 + C24697 * C1585 + C24701 * C906 +
                     C50939 * C912 + C24700 * C479 + C50938 * C495) *
                        C1032) *
                       C50760 * C50631) *
                      C50727) *
                 C50651) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1109 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50605) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C1109 +
                    (C24745 + C24744 + C24743) * C50605) *
                       C50760 * C50631) *
                      C1853 -
                  (((C25115 + C25114 + C25113) * C50605 +
                    (C25112 + C25111 + C25110) * C1109) *
                       C50760 * C50631 +
                   ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                     C50939 * C909 + C24700 * C473 + C50938 * C492) *
                        C50605 +
                    (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                     C50939 * C899 + C24700 * C463 + C50938 * C474) *
                        C1109) *
                       C50760 * C50881) *
                      C1854 +
                  (((C24700 * C467 + C50938 * C482 + C24701 * C1227 +
                     C50939 * C1235 + C24702 * C2702 + C24697 * C2705) *
                        C1109 +
                    (C24700 * C483 + C50938 * C497 + C24701 * C1234 +
                     C50939 * C1239 + C24702 * C2706 + C24697 * C2711) *
                        C50605) *
                       C50760 * C50881 +
                   ((C25118 + C25117 + C25116) * C1109 +
                    (C25121 + C25120 + C25119) * C50605) *
                       C50760 * C50631) *
                      C1855 -
                  (((C24702 * C4596 + C24697 * C4604 + C24701 * C4597 +
                     C50939 * C4605 + C24700 * C1865 + C50938 * C1871) *
                        C50605 +
                    (C24702 * C4592 + C24697 * C4598 + C24701 * C4593 +
                     C50939 * C4599 + C24700 * C1859 + C50938 * C1866) *
                        C1109) *
                       C50760 * C50631 +
                   ((C24702 * C4600 + C24697 * C4606 + C24701 * C4601 +
                     C50939 * C4607 + C24700 * C1867 + C50938 * C1872) *
                        C50605 +
                    (C24702 * C4594 + C24697 * C4602 + C24701 * C4595 +
                     C50939 * C4603 + C24700 * C1860 + C50938 * C1868) *
                        C1109) *
                       C50760 * C50881) *
                      C1856) *
                 C50651) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C49720 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50874 -
                    (C24740 + C24741 + C24742) * C49713 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C49720 +
                    (C24745 + C24744 + C24743) * C50874 -
                    (C24748 + C24747 + C24746) * C49713 -
                    (C24751 + C24750 + C24749) * C50610) *
                       C50760 * C50631) *
                      C50936 +
                  (((C25110 + C25111 + C25112) * C49713 -
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C50874 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C49720) +
                    (C25113 + C25114 + C25115) * C50610) *
                       C50760 * C50881 +
                   ((C25446 + C25445 + C25444) * C49713 -
                    ((C25115 + C25114 + C25113) * C50874 +
                     (C25112 + C25111 + C25110) * C49720) +
                    (C25449 + C25448 + C25447) * C50610) *
                       C50760 * C50631) *
                      C50937 +
                  (((C24700 * C467 + C50938 * C482 + C24701 * C1227 +
                     C50939 * C1235 + C24702 * C2702 + C24697 * C2705) *
                        C49720 +
                    (C24700 * C483 + C50938 * C497 + C24701 * C1234 +
                     C50939 * C1239 + C24702 * C2706 + C24697 * C2711) *
                        C50874 -
                    (C25116 + C25117 + C25118) * C49713 -
                    (C25119 + C25120 + C25121) * C50610) *
                       C50760 * C50881 +
                   ((C25118 + C25117 + C25116) * C49720 +
                    (C25121 + C25120 + C25119) * C50874 -
                    (C24702 * C2704 + C24697 * C2709 + C24701 * C1225 +
                     C50939 * C1231 + C24700 * C469 + C50938 * C486) *
                        C49713 -
                    (C24702 * C2710 + C24697 * C2713 + C24701 * C1230 +
                     C50939 * C1237 + C24700 * C487 + C50938 * C499) *
                        C50610) *
                       C50760 * C50631) *
                      C2103) *
                 C50651) /
                (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1035 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C1030 -
                    (C24740 + C24741 + C24742) * C1036 -
                    (C24743 + C24744 + C24745) * C1031 +
                    (C24746 + C24747 + C24748) * C1037 +
                    (C24749 + C24750 + C24751) * C1032) *
                       C50760 * C50881 +
                   ((C24742 + C24741 + C24740) * C1035 +
                    (C24745 + C24744 + C24743) * C1030 -
                    (C24748 + C24747 + C24746) * C1036 -
                    (C24751 + C24750 + C24749) * C1031 +
                    (C24754 + C24753 + C24752) * C1037 +
                    (C24757 + C24756 + C24755) * C1032) *
                       C50760 * C50631) *
                      C1687 +
                  (((C25110 + C25111 + C25112) * C1036 -
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C1030 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C1035) +
                    (C25113 + C25114 + C25115) * C1031 -
                    (C25444 + C25445 + C25446) * C1037 -
                    (C25447 + C25448 + C25449) * C1032) *
                       C50760 * C50881 +
                   ((C25446 + C25445 + C25444) * C1036 -
                    ((C25115 + C25114 + C25113) * C1030 +
                     (C25112 + C25111 + C25110) * C1035) +
                    (C25449 + C25448 + C25447) * C1031 -
                    (C24702 * C1573 + C24697 * C1578 + C24701 * C897 +
                     C50939 * C905 + C24700 * C465 + C50938 * C478) *
                        C1037 -
                    (C24702 * C1577 + C24697 * C1585 + C24701 * C906 +
                     C50939 * C912 + C24700 * C479 + C50938 * C495) *
                        C1032) *
                       C50760 * C50631) *
                      C50727) *
                 C50651) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1109 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50605) *
                        C50760 * C50881 +
                    ((C24742 + C24741 + C24740) * C1109 +
                     (C24745 + C24744 + C24743) * C50605) *
                        C50760 * C50631) *
                       C1687 -
                   (((C25115 + C25114 + C25113) * C50605 +
                     (C25112 + C25111 + C25110) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1583 + C24697 * C1588 + C24701 * C900 +
                      C50939 * C909 + C24700 * C473 + C50938 * C492) *
                         C50605 +
                     (C24702 * C1576 + C24697 * C1584 + C24701 * C894 +
                      C50939 * C899 + C24700 * C463 + C50938 * C474) *
                         C1109) *
                        C50760 * C50881) *
                       C50727) *
                      C280 +
                  ((((C24700 * C894 + C50938 * C899 + C24701 * C1576 +
                      C50939 * C1584 + C24702 * C3272 + C24697 * C3275) *
                         C1109 +
                     (C24700 * C900 + C50938 * C909 + C24701 * C1583 +
                      C50939 * C1588 + C24702 * C3276 + C24697 * C3281) *
                         C50605) *
                        C50760 * C50881 +
                    ((C25658 + C25657 + C25656) * C1109 +
                     (C25661 + C25660 + C25659) * C50605) *
                        C50760 * C50631) *
                       C50727 -
                   (((C24933 + C24932 + C24931) * C50605 +
                     (C24930 + C24929 + C24928) * C1109) *
                        C50760 * C50631 +
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50605 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1109) *
                        C50760 * C50881) *
                       C1687) *
                      C281 +
                  ((((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                      C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                         C1109 +
                     (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                      C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                         C50605) *
                        C50760 * C50881 +
                    ((C24936 + C24935 + C24934) * C1109 +
                     (C24939 + C24938 + C24937) * C50605) *
                        C50760 * C50631) *
                       C1687 -
                   (((C24702 * C4196 + C24697 * C4200 + C24701 * C3278 +
                      C50939 * C3282 + C24700 * C1581 + C50938 * C1587) *
                         C50605 +
                     (C24702 * C4194 + C24697 * C4197 + C24701 * C3273 +
                      C50939 * C3277 + C24700 * C1575 + C50938 * C1582) *
                         C1109) *
                        C50760 * C50631 +
                    ((C24702 * C4198 + C24697 * C4201 + C24701 * C3276 +
                      C50939 * C3281 + C24700 * C1583 + C50938 * C1588) *
                         C50605 +
                     (C24702 * C4195 + C24697 * C4199 + C24701 * C3272 +
                      C50939 * C3275 + C24700 * C1576 + C50938 * C1584) *
                         C1109) *
                        C50760 * C50881) *
                       C50727) *
                      C282)) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C641 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50930 -
                    (C24740 + C24741 + C24742) * C642 -
                    (C24743 + C24744 + C24745) * C50931 +
                    (C24746 + C24747 + C24748) * C643 +
                    (C24749 + C24750 + C24751) * C638) *
                       C50903 +
                   ((C31344 + C31345 + C31346) * C641 +
                    (C31347 + C31348 + C31349) * C50930 -
                    (C25112 + C25111 + C25110) * C642 -
                    (C25115 + C25114 + C25113) * C50931 +
                    (C25446 + C25445 + C25444) * C643 +
                    (C25449 + C25448 + C25447) * C638) *
                       C50824) *
                      C50626 * C50663 * C50889 +
                  (((C24928 + C24929 + C24930) * C642 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50930 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C641) +
                    (C24931 + C24932 + C24933) * C50931 -
                    (C25280 + C25281 + C25282) * C643 -
                    (C25283 + C25284 + C25285) * C638) *
                       C50903 +
                   ((C25658 + C25657 + C25656) * C642 -
                    ((C24702 * C3276 + C24697 * C3281 + C24701 * C1583 +
                      C50939 * C1588 + C24700 * C900 + C50938 * C909) *
                         C50930 +
                     (C24702 * C3272 + C24697 * C3275 + C24701 * C1576 +
                      C50939 * C1584 + C24700 * C894 + C50938 * C899) *
                         C641) +
                    (C25661 + C25660 + C25659) * C50931 -
                    (C24702 * C3274 + C24697 * C3279 + C24701 * C1574 +
                     C50939 * C1580 + C24700 * C896 + C50938 * C903) *
                        C643 -
                    (C24702 * C3280 + C24697 * C3283 + C24701 * C1579 +
                     C50939 * C1586 + C24700 * C904 + C50938 * C911) *
                        C638) *
                       C50824) *
                      C50626 * C50663 * C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C283 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C278 -
                     (C24740 + C24741 + C24742) * C284 -
                     (C24743 + C24744 + C24745) * C50610) *
                        C50903 +
                    ((C31344 + C31345 + C31346) * C283 +
                     (C31347 + C31348 + C31349) * C278 -
                     (C25112 + C25111 + C25110) * C284 -
                     (C25115 + C25114 + C25113) * C50610) *
                        C50824) *
                       C50626 * C50890 +
                   (((C25110 + C25111 + C25112) * C284 -
                     ((C31349 + C31348 + C31347) * C278 +
                      (C31346 + C31345 + C31344) * C283) +
                     (C25113 + C25114 + C25115) * C50610) *
                        C50903 +
                    ((C25118 + C25117 + C25116) * C284 -
                     ((C31350 + C31351 + C31352) * C278 +
                      (C31353 + C31354 + C31355) * C283) +
                     (C25121 + C25120 + C25119) * C50610) *
                        C50824) *
                       C50626 * C50727) *
                      C50889 +
                  ((((C24928 + C24929 + C24930) * C284 -
                     ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                       C50939 * C320 + C24700 * C296 + C50938 * C315) *
                          C278 +
                      (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                       C50939 * C305 + C24700 * C286 + C50938 * C297) *
                          C283) +
                     (C24931 + C24932 + C24933) * C50610) *
                        C50903 +
                    ((C25658 + C25657 + C25656) * C284 -
                     ((C31854 + C31855 + C31856) * C278 +
                      (C31857 + C31858 + C31859) * C283) +
                     (C25661 + C25660 + C25659) * C50610) *
                        C50824) *
                       C50626 * C50890 +
                   (((C31859 + C31858 + C31857) * C283 +
                     (C31856 + C31855 + C31854) * C278 -
                     (C25656 + C25657 + C25658) * C284 -
                     (C25659 + C25660 + C25661) * C50610) *
                        C50903 +
                    ((C24700 * C1227 + C50938 * C1235 + C24701 * C2702 +
                      C50939 * C2705 + C24702 * C3701 + C24697 * C3705) *
                         C283 +
                     (C24700 * C1234 + C50938 * C1239 + C24701 * C2706 +
                      C50939 * C2711 + C24702 * C3704 + C24697 * C3707) *
                         C278 -
                     (C24702 * C3700 + C24697 * C3703 + C24701 * C2703 +
                      C50939 * C2707 + C24700 * C1226 + C50938 * C1233) *
                         C284 -
                     (C24702 * C3702 + C24697 * C3706 + C24701 * C2708 +
                      C50939 * C2712 + C24700 * C1232 + C50938 * C1238) *
                         C50610) *
                        C50824) *
                       C50626 * C50727) *
                      C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C283 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50903 +
                   ((C24700 * C463 + C50938 * C474 + C24701 * C894 +
                     C50939 * C899 + C24702 * C1576 + C24697 * C1584) *
                        C283 +
                    (C24700 * C473 + C50938 * C492 + C24701 * C900 +
                     C50939 * C909 + C24702 * C1583 + C24697 * C1588) *
                        C278 -
                    (C25112 + C25111 + C25110) * C284 -
                    (C25115 + C25114 + C25113) * C50610) *
                       C50824) *
                      C50626 * C50663 * C280 +
                  (((C24928 + C24929 + C24930) * C284 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C278 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C283) +
                    (C24931 + C24932 + C24933) * C50610) *
                       C50903 +
                   ((C25658 + C25657 + C25656) * C284 -
                    ((C24702 * C3276 + C24697 * C3281 + C24701 * C1583 +
                      C50939 * C1588 + C24700 * C900 + C50938 * C909) *
                         C278 +
                     (C24702 * C3272 + C24697 * C3275 + C24701 * C1576 +
                      C50939 * C1584 + C24700 * C894 + C50938 * C899) *
                         C283) +
                    (C25661 + C25660 + C25659) * C50610) *
                       C50824) *
                      C50626 * C50663 * C281 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C283 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C278 -
                    (C24934 + C24935 + C24936) * C284 -
                    (C24937 + C24938 + C24939) * C50610) *
                       C50903 +
                   ((C24700 * C1576 + C50938 * C1584 + C24701 * C3272 +
                     C50939 * C3275 + C24702 * C4195 + C24697 * C4199) *
                        C283 +
                    (C24700 * C1583 + C50938 * C1588 + C24701 * C3276 +
                     C50939 * C3281 + C24702 * C4198 + C24697 * C4201) *
                        C278 -
                    (C24702 * C4194 + C24697 * C4197 + C24701 * C3273 +
                     C50939 * C3277 + C24700 * C1575 + C50938 * C1582) *
                        C284 -
                    (C24702 * C4196 + C24697 * C4200 + C24701 * C3278 +
                     C50939 * C3282 + C24700 * C1581 + C50938 * C1587) *
                        C50610) *
                       C50824) *
                      C50626 * C50663 * C282)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                    C50939 * C297 + C24702 * C290 + C24697 * C305) *
                       C118 +
                   (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                    C50939 * C315 + C24702 * C306 + C24697 * C320) *
                       C106 -
                   (C24740 + C24741 + C24742) * C119 -
                   (C24743 + C24744 + C24745) * C107 +
                   (C24746 + C24747 + C24748) * C120 +
                   (C24749 + C24750 + C24751) * C108 -
                   (C24752 + C24753 + C24754) * C121 -
                   (C24755 + C24756 + C24757) * C109) *
                      C50903 +
                  ((C24700 * C463 + C50938 * C474 + C24701 * C894 +
                    C50939 * C899 + C24702 * C1576 + C24697 * C1584) *
                       C118 +
                   (C24700 * C473 + C50938 * C492 + C24701 * C900 +
                    C50939 * C909 + C24702 * C1583 + C24697 * C1588) *
                       C106 -
                   (C25112 + C25111 + C25110) * C119 -
                   (C25115 + C25114 + C25113) * C107 +
                   (C25446 + C25445 + C25444) * C120 +
                   (C25449 + C25448 + C25447) * C108 -
                   (C24702 * C1573 + C24697 * C1578 + C24701 * C897 +
                    C50939 * C905 + C24700 * C465 + C50938 * C478) *
                       C121 -
                   (C24702 * C1577 + C24697 * C1585 + C24701 * C906 +
                    C50939 * C912 + C24700 * C479 + C50938 * C495) *
                       C109) *
                      C50824) *
                 C50626 * C50663 * C50651) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C283 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50903 +
                   ((C31344 + C31345 + C31346) * C283 +
                    (C31347 + C31348 + C31349) * C278 -
                    (C25112 + C25111 + C25110) * C284 -
                    (C25115 + C25114 + C25113) * C50610) *
                       C50824) *
                      C50626 * C459 +
                  (((C25110 + C25111 + C25112) * C284 -
                    ((C31349 + C31348 + C31347) * C278 +
                     (C31346 + C31345 + C31344) * C283) +
                    (C25113 + C25114 + C25115) * C50610) *
                       C50903 +
                   ((C25118 + C25117 + C25116) * C284 -
                    ((C31350 + C31351 + C31352) * C278 +
                     (C31353 + C31354 + C31355) * C283) +
                    (C25121 + C25120 + C25119) * C50610) *
                       C50824) *
                      C50626 * C460 +
                  (((C31355 + C31354 + C31353) * C283 +
                    (C31352 + C31351 + C31350) * C278 -
                    (C25116 + C25117 + C25118) * C284 -
                    (C25119 + C25120 + C25121) * C50610) *
                       C50903 +
                   ((C24700 * C1860 + C50938 * C1868 + C24701 * C4595 +
                     C50939 * C4603 + C24702 * C4594 + C24697 * C4602) *
                        C283 +
                    (C24700 * C1867 + C50938 * C1872 + C24701 * C4601 +
                     C50939 * C4607 + C24702 * C4600 + C24697 * C4606) *
                        C278 -
                    (C24702 * C4592 + C24697 * C4598 + C24701 * C4593 +
                     C50939 * C4599 + C24700 * C1859 + C50938 * C1866) *
                        C284 -
                    (C24702 * C4596 + C24697 * C4604 + C24701 * C4597 +
                     C50939 * C4605 + C24700 * C1865 + C50938 * C1871) *
                        C50610) *
                       C50824) *
                      C50626 * C461) *
                 C50651) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C641 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50930 -
                    (C24740 + C24741 + C24742) * C642 -
                    (C24743 + C24744 + C24745) * C50931 +
                    (C24746 + C24747 + C24748) * C643 +
                    (C24749 + C24750 + C24751) * C638) *
                       C50903 +
                   ((C31344 + C31345 + C31346) * C641 +
                    (C31347 + C31348 + C31349) * C50930 -
                    (C25112 + C25111 + C25110) * C642 -
                    (C25115 + C25114 + C25113) * C50931 +
                    (C25446 + C25445 + C25444) * C643 +
                    (C25449 + C25448 + C25447) * C638) *
                       C50824) *
                      C50626 * C50890 +
                  (((C25110 + C25111 + C25112) * C642 -
                    ((C31349 + C31348 + C31347) * C50930 +
                     (C31346 + C31345 + C31344) * C641) +
                    (C25113 + C25114 + C25115) * C50931 -
                    (C25444 + C25445 + C25446) * C643 -
                    (C25447 + C25448 + C25449) * C638) *
                       C50903 +
                   ((C25118 + C25117 + C25116) * C642 -
                    ((C31350 + C31351 + C31352) * C50930 +
                     (C31353 + C31354 + C31355) * C641) +
                    (C25121 + C25120 + C25119) * C50931 -
                    (C24702 * C2704 + C24697 * C2709 + C24701 * C1225 +
                     C50939 * C1231 + C24700 * C469 + C50938 * C486) *
                        C643 -
                    (C24702 * C2710 + C24697 * C2713 + C24701 * C1230 +
                     C50939 * C1237 + C24700 * C487 + C50938 * C499) *
                        C638) *
                       C50824) *
                      C50626 * C50727) *
                 C50651) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                    C50939 * C297 + C24702 * C290 + C24697 * C305) *
                       C118 +
                   (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                    C50939 * C315 + C24702 * C306 + C24697 * C320) *
                       C106 -
                   (C24740 + C24741 + C24742) * C119 -
                   (C24743 + C24744 + C24745) * C107 +
                   (C24746 + C24747 + C24748) * C120 +
                   (C24749 + C24750 + C24751) * C108 -
                   (C24752 + C24753 + C24754) * C121 -
                   (C24755 + C24756 + C24757) * C109) *
                      C50903 +
                  ((C24700 * C463 + C50938 * C474 + C24701 * C894 +
                    C50939 * C899 + C24702 * C1576 + C24697 * C1584) *
                       C118 +
                   (C24700 * C473 + C50938 * C492 + C24701 * C900 +
                    C50939 * C909 + C24702 * C1583 + C24697 * C1588) *
                       C106 -
                   (C25112 + C25111 + C25110) * C119 -
                   (C25115 + C25114 + C25113) * C107 +
                   (C25446 + C25445 + C25444) * C120 +
                   (C25449 + C25448 + C25447) * C108 -
                   (C24702 * C1573 + C24697 * C1578 + C24701 * C897 +
                    C50939 * C905 + C24700 * C465 + C50938 * C478) *
                       C121 -
                   (C24702 * C1577 + C24697 * C1585 + C24701 * C906 +
                    C50939 * C912 + C24700 * C479 + C50938 * C495) *
                       C109) *
                      C50824) *
                 C50626 * C50663 * C50651) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C283 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C278 -
                    (C24740 + C24741 + C24742) * C284 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50903 +
                   ((C24700 * C463 + C50938 * C474 + C24701 * C894 +
                     C50939 * C899 + C24702 * C1576 + C24697 * C1584) *
                        C283 +
                    (C24700 * C473 + C50938 * C492 + C24701 * C900 +
                     C50939 * C909 + C24702 * C1583 + C24697 * C1588) *
                        C278 -
                    (C25112 + C25111 + C25110) * C284 -
                    (C25115 + C25114 + C25113) * C50610) *
                       C50824) *
                      C50626 * C50663 * C280 +
                  (((C24928 + C24929 + C24930) * C284 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C278 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C283) +
                    (C24931 + C24932 + C24933) * C50610) *
                       C50903 +
                   ((C25658 + C25657 + C25656) * C284 -
                    ((C24702 * C3276 + C24697 * C3281 + C24701 * C1583 +
                      C50939 * C1588 + C24700 * C900 + C50938 * C909) *
                         C278 +
                     (C24702 * C3272 + C24697 * C3275 + C24701 * C1576 +
                      C50939 * C1584 + C24700 * C894 + C50938 * C899) *
                         C283) +
                    (C25661 + C25660 + C25659) * C50610) *
                       C50824) *
                      C50626 * C50663 * C281 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C283 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C278 -
                    (C24934 + C24935 + C24936) * C284 -
                    (C24937 + C24938 + C24939) * C50610) *
                       C50903 +
                   ((C24700 * C1576 + C50938 * C1584 + C24701 * C3272 +
                     C50939 * C3275 + C24702 * C4195 + C24697 * C4199) *
                        C283 +
                    (C24700 * C1583 + C50938 * C1588 + C24701 * C3276 +
                     C50939 * C3281 + C24702 * C4198 + C24697 * C4201) *
                        C278 -
                    (C24702 * C4194 + C24697 * C4197 + C24701 * C3273 +
                     C50939 * C3277 + C24700 * C1575 + C50938 * C1582) *
                        C284 -
                    (C24702 * C4196 + C24697 * C4200 + C24701 * C3278 +
                     C50939 * C3282 + C24700 * C1581 + C50938 * C1587) *
                        C50610) *
                       C50824) *
                      C50626 * C50663 * C282)) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C49720 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50874 -
                    (C24740 + C24741 + C24742) * C49713 -
                    (C24743 + C24744 + C24745) * C50610) *
                       C50903 +
                   ((C31344 + C31345 + C31346) * C49720 +
                    (C31347 + C31348 + C31349) * C50874 -
                    (C25112 + C25111 + C25110) * C49713 -
                    (C25115 + C25114 + C25113) * C50610) *
                       C50824) *
                      C50626 * C50663 * C50934 +
                  (((C24928 + C24929 + C24930) * C49713 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50874 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C49720) +
                    (C24931 + C24932 + C24933) * C50610) *
                       C50903 +
                   ((C25658 + C25657 + C25656) * C49713 -
                    ((C31854 + C31855 + C31856) * C50874 +
                     (C31857 + C31858 + C31859) * C49720) +
                    (C25661 + C25660 + C25659) * C50610) *
                       C50824) *
                      C50626 * C50663 * C50935 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C49720 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C50874 -
                    (C24934 + C24935 + C24936) * C49713 -
                    (C24937 + C24938 + C24939) * C50610) *
                       C50903 +
                   ((C24700 * C1576 + C50938 * C1584 + C24701 * C3272 +
                     C50939 * C3275 + C24702 * C4195 + C24697 * C4199) *
                        C49720 +
                    (C24700 * C1583 + C50938 * C1588 + C24701 * C3276 +
                     C50939 * C3281 + C24702 * C4198 + C24697 * C4201) *
                        C50874 -
                    (C24702 * C4194 + C24697 * C4197 + C24701 * C3273 +
                     C50939 * C3277 + C24700 * C1575 + C50938 * C1582) *
                        C49713 -
                    (C24702 * C4196 + C24697 * C4200 + C24701 * C3278 +
                     C50939 * C3282 + C24700 * C1581 + C50938 * C1587) *
                        C50610) *
                       C50824) *
                      C50626 * C50663 * C1342)) /
                (p * q * std::sqrt(p + q));
    d2ee[96] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1109 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50605) *
                        C50903 +
                    ((C31344 + C31345 + C31346) * C1109 +
                     (C31347 + C31348 + C31349) * C50605) *
                        C50824) *
                       C50626 * C50890 -
                   (((C31350 + C31351 + C31352) * C50605 +
                     (C31353 + C31354 + C31355) * C1109) *
                        C50824 +
                    ((C31349 + C31348 + C31347) * C50605 +
                     (C31346 + C31345 + C31344) * C1109) *
                        C50903) *
                       C50626 * C50727) *
                      C50934 +
                  ((((C31859 + C31858 + C31857) * C1109 +
                     (C31856 + C31855 + C31854) * C50605) *
                        C50903 +
                    ((C32262 + C32263 + C32264) * C1109 +
                     (C32265 + C32266 + C32267) * C50605) *
                        C50824) *
                       C50626 * C50727 -
                   (((C31854 + C31855 + C31856) * C50605 +
                     (C31857 + C31858 + C31859) * C1109) *
                        C50824 +
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50605 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1109) *
                        C50903) *
                       C50626 * C50890) *
                      C50935 +
                  ((((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                      C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                         C1109 +
                     (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                      C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                         C50605) *
                        C50903 +
                    ((C32766 + C32767 + C32768) * C1109 +
                     (C32769 + C32770 + C32771) * C50605) *
                        C50824) *
                       C50626 * C50890 -
                   (((C24702 * C20873 + C24697 * C20875 + C24701 * C3704 +
                      C50939 * C3707 + C24700 * C2706 + C50938 * C2711) *
                         C50605 +
                     (C24702 * C20872 + C24697 * C20874 + C24701 * C3701 +
                      C50939 * C3705 + C24700 * C2702 + C50938 * C2705) *
                         C1109) *
                        C50824 +
                    ((C32771 + C32770 + C32769) * C50605 +
                     (C32768 + C32767 + C32766) * C1109) *
                        C50903) *
                       C50626 * C50727) *
                      C1342)) /
                (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1109 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50605) *
                       C50903 +
                   ((C31344 + C31345 + C31346) * C1109 +
                    (C31347 + C31348 + C31349) * C50605) *
                       C50824) *
                      C50626 * C50663 * C1105 -
                  (((C31854 + C31855 + C31856) * C50605 +
                    (C31857 + C31858 + C31859) * C1109) *
                       C50824 +
                   ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                     C50939 * C320 + C24700 * C296 + C50938 * C315) *
                        C50605 +
                    (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                     C50939 * C305 + C24700 * C286 + C50938 * C297) *
                        C1109) *
                       C50903) *
                      C50626 * C50663 * C1106 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C1109 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C50605) *
                       C50903 +
                   ((C24700 * C1576 + C50938 * C1584 + C24701 * C3272 +
                     C50939 * C3275 + C24702 * C4195 + C24697 * C4199) *
                        C1109 +
                    (C24700 * C1583 + C50938 * C1588 + C24701 * C3276 +
                     C50939 * C3281 + C24702 * C4198 + C24697 * C4201) *
                        C50605) *
                       C50824) *
                      C50626 * C50663 * C1107 -
                  (((C24702 * C21203 + C24697 * C21205 + C24701 * C4198 +
                     C50939 * C4201 + C24700 * C3276 + C50938 * C3281) *
                        C50605 +
                    (C24702 * C21202 + C24697 * C21204 + C24701 * C4195 +
                     C50939 * C4199 + C24700 * C3272 + C50938 * C3275) *
                        C1109) *
                       C50824 +
                   ((C24702 * C3550 + C24697 * C3553 + C24701 * C2512 +
                     C50939 * C2517 + C24700 * C1120 + C50938 * C1125) *
                        C50605 +
                    (C24702 * C3547 + C24697 * C3551 + C24701 * C2508 +
                     C50939 * C2511 + C24700 * C1113 + C50938 * C1121) *
                        C1109) *
                       C50903) *
                      C50626 * C50663 * C1108)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1035 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C1030 -
                    (C24740 + C24741 + C24742) * C1036 -
                    (C24743 + C24744 + C24745) * C1031 +
                    (C24746 + C24747 + C24748) * C1037 +
                    (C24749 + C24750 + C24751) * C1032) *
                       C50903 +
                   ((C31344 + C31345 + C31346) * C1035 +
                    (C31347 + C31348 + C31349) * C1030 -
                    (C25112 + C25111 + C25110) * C1036 -
                    (C25115 + C25114 + C25113) * C1031 +
                    (C25446 + C25445 + C25444) * C1037 +
                    (C25449 + C25448 + C25447) * C1032) *
                       C50824) *
                      C50626 * C50663 * C1033 +
                  (((C24928 + C24929 + C24930) * C1036 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C1030 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1035) +
                    (C24931 + C24932 + C24933) * C1031 -
                    (C25280 + C25281 + C25282) * C1037 -
                    (C25283 + C25284 + C25285) * C1032) *
                       C50903 +
                   ((C25658 + C25657 + C25656) * C1036 -
                    ((C31854 + C31855 + C31856) * C1030 +
                     (C31857 + C31858 + C31859) * C1035) +
                    (C25661 + C25660 + C25659) * C1031 -
                    (C24702 * C3274 + C24697 * C3279 + C24701 * C1574 +
                     C50939 * C1580 + C24700 * C896 + C50938 * C903) *
                        C1037 -
                    (C24702 * C3280 + C24697 * C3283 + C24701 * C1579 +
                     C50939 * C1586 + C24700 * C904 + C50938 * C911) *
                        C1032) *
                       C50824) *
                      C50626 * C50663 * C50701)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1109 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50605) *
                        C50903 +
                    ((C31344 + C31345 + C31346) * C1109 +
                     (C31347 + C31348 + C31349) * C50605) *
                        C50824) *
                       C50626 * C459 -
                   (((C31350 + C31351 + C31352) * C50605 +
                     (C31353 + C31354 + C31355) * C1109) *
                        C50824 +
                    ((C31349 + C31348 + C31347) * C50605 +
                     (C31346 + C31345 + C31344) * C1109) *
                        C50903) *
                       C50626 * C460 +
                   (((C31355 + C31354 + C31353) * C1109 +
                     (C31352 + C31351 + C31350) * C50605) *
                        C50903 +
                    ((C24700 * C1860 + C50938 * C1868 + C24701 * C4595 +
                      C50939 * C4603 + C24702 * C4594 + C24697 * C4602) *
                         C1109 +
                     (C24700 * C1867 + C50938 * C1872 + C24701 * C4601 +
                      C50939 * C4607 + C24702 * C4600 + C24697 * C4606) *
                         C50605) *
                        C50824) *
                       C50626 * C461) *
                      C1033 +
                  ((((C31859 + C31858 + C31857) * C1109 +
                     (C31856 + C31855 + C31854) * C50605) *
                        C50903 +
                    ((C32262 + C32263 + C32264) * C1109 +
                     (C32265 + C32266 + C32267) * C50605) *
                        C50824) *
                       C50626 * C460 -
                   (((C31854 + C31855 + C31856) * C50605 +
                     (C31857 + C31858 + C31859) * C1109) *
                        C50824 +
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C50605 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1109) *
                        C50903) *
                       C50626 * C459 -
                   (((C24702 * C21469 + C24697 * C21471 + C24701 * C4600 +
                      C50939 * C4606 + C24700 * C4601 + C50938 * C4607) *
                         C50605 +
                     (C24702 * C21468 + C24697 * C21470 + C24701 * C4594 +
                      C50939 * C4602 + C24700 * C4595 + C50938 * C4603) *
                         C1109) *
                        C50824 +
                    ((C32267 + C32266 + C32265) * C50605 +
                     (C32264 + C32263 + C32262) * C1109) *
                        C50903) *
                       C50626 * C461) *
                      C50701)) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C49720 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50874 -
                     (C24740 + C24741 + C24742) * C49713 -
                     (C24743 + C24744 + C24745) * C50610) *
                        C50903 +
                    ((C31344 + C31345 + C31346) * C49720 +
                     (C31347 + C31348 + C31349) * C50874 -
                     (C25112 + C25111 + C25110) * C49713 -
                     (C25115 + C25114 + C25113) * C50610) *
                        C50824) *
                       C50626 * C50890 +
                   (((C25110 + C25111 + C25112) * C49713 -
                     ((C31349 + C31348 + C31347) * C50874 +
                      (C31346 + C31345 + C31344) * C49720) +
                     (C25113 + C25114 + C25115) * C50610) *
                        C50903 +
                    ((C25118 + C25117 + C25116) * C49713 -
                     ((C31350 + C31351 + C31352) * C50874 +
                      (C31353 + C31354 + C31355) * C49720) +
                     (C25121 + C25120 + C25119) * C50610) *
                        C50824) *
                       C50626 * C50727) *
                      C1033 +
                  ((((C24928 + C24929 + C24930) * C49713 -
                     ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                       C50939 * C320 + C24700 * C296 + C50938 * C315) *
                          C50874 +
                      (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                       C50939 * C305 + C24700 * C286 + C50938 * C297) *
                          C49720) +
                     (C24931 + C24932 + C24933) * C50610) *
                        C50903 +
                    ((C25658 + C25657 + C25656) * C49713 -
                     ((C31854 + C31855 + C31856) * C50874 +
                      (C31857 + C31858 + C31859) * C49720) +
                     (C25661 + C25660 + C25659) * C50610) *
                        C50824) *
                       C50626 * C50890 +
                   (((C31859 + C31858 + C31857) * C49720 +
                     (C31856 + C31855 + C31854) * C50874 -
                     (C25656 + C25657 + C25658) * C49713 -
                     (C25659 + C25660 + C25661) * C50610) *
                        C50903 +
                    ((C32262 + C32263 + C32264) * C49720 +
                     (C32265 + C32266 + C32267) * C50874 -
                     (C24702 * C3700 + C24697 * C3703 + C24701 * C2703 +
                      C50939 * C2707 + C24700 * C1226 + C50938 * C1233) *
                         C49713 -
                     (C24702 * C3702 + C24697 * C3706 + C24701 * C2708 +
                      C50939 * C2712 + C24700 * C1232 + C50938 * C1238) *
                         C50610) *
                        C50824) *
                       C50626 * C50727) *
                      C50701)) /
                (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1035 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C1030 -
                    (C24740 + C24741 + C24742) * C1036 -
                    (C24743 + C24744 + C24745) * C1031 +
                    (C24746 + C24747 + C24748) * C1037 +
                    (C24749 + C24750 + C24751) * C1032) *
                       C50903 +
                   ((C31344 + C31345 + C31346) * C1035 +
                    (C31347 + C31348 + C31349) * C1030 -
                    (C25112 + C25111 + C25110) * C1036 -
                    (C25115 + C25114 + C25113) * C1031 +
                    (C25446 + C25445 + C25444) * C1037 +
                    (C25449 + C25448 + C25447) * C1032) *
                       C50824) *
                      C50626 * C50663 * C1033 +
                  (((C24928 + C24929 + C24930) * C1036 -
                    ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                      C50939 * C320 + C24700 * C296 + C50938 * C315) *
                         C1030 +
                     (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                      C50939 * C305 + C24700 * C286 + C50938 * C297) *
                         C1035) +
                    (C24931 + C24932 + C24933) * C1031 -
                    (C25280 + C25281 + C25282) * C1037 -
                    (C25283 + C25284 + C25285) * C1032) *
                       C50903 +
                   ((C25658 + C25657 + C25656) * C1036 -
                    ((C31854 + C31855 + C31856) * C1030 +
                     (C31857 + C31858 + C31859) * C1035) +
                    (C25661 + C25660 + C25659) * C1031 -
                    (C24702 * C3274 + C24697 * C3279 + C24701 * C1574 +
                     C50939 * C1580 + C24700 * C896 + C50938 * C903) *
                        C1037 -
                    (C24702 * C3280 + C24697 * C3283 + C24701 * C1579 +
                     C50939 * C1586 + C24700 * C904 + C50938 * C911) *
                        C1032) *
                       C50824) *
                      C50626 * C50663 * C50701)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                     C50939 * C297 + C24702 * C290 + C24697 * C305) *
                        C1109 +
                    (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                     C50939 * C315 + C24702 * C306 + C24697 * C320) *
                        C50605) *
                       C50903 +
                   ((C31344 + C31345 + C31346) * C1109 +
                    (C31347 + C31348 + C31349) * C50605) *
                       C50824) *
                      C50626 * C50663 * C1105 -
                  (((C31854 + C31855 + C31856) * C50605 +
                    (C31857 + C31858 + C31859) * C1109) *
                       C50824 +
                   ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                     C50939 * C320 + C24700 * C296 + C50938 * C315) *
                        C50605 +
                    (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                     C50939 * C305 + C24700 * C286 + C50938 * C297) *
                        C1109) *
                       C50903) *
                      C50626 * C50663 * C1106 +
                  (((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                     C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                        C1109 +
                    (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                     C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                        C50605) *
                       C50903 +
                   ((C24700 * C1576 + C50938 * C1584 + C24701 * C3272 +
                     C50939 * C3275 + C24702 * C4195 + C24697 * C4199) *
                        C1109 +
                    (C24700 * C1583 + C50938 * C1588 + C24701 * C3276 +
                     C50939 * C3281 + C24702 * C4198 + C24697 * C4201) *
                        C50605) *
                       C50824) *
                      C50626 * C50663 * C1107 -
                  (((C24702 * C21203 + C24697 * C21205 + C24701 * C4198 +
                     C50939 * C4201 + C24700 * C3276 + C50938 * C3281) *
                        C50605 +
                    (C24702 * C21202 + C24697 * C21204 + C24701 * C4195 +
                     C50939 * C4199 + C24700 * C3272 + C50938 * C3275) *
                        C1109) *
                       C50824 +
                   ((C24702 * C3550 + C24697 * C3553 + C24701 * C2512 +
                     C50939 * C2517 + C24700 * C1120 + C50938 * C1125) *
                        C50605 +
                    (C24702 * C3547 + C24697 * C3551 + C24701 * C2508 +
                     C50939 * C2511 + C24700 * C1113 + C50938 * C1121) *
                        C1109) *
                       C50903) *
                      C50626 * C50663 * C1108)) /
                    (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                       C50939 * C297 + C24702 * C290 + C24697 * C305) *
                          C49720 +
                      (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                       C50939 * C315 + C24702 * C306 + C24697 * C320) *
                          C50874 -
                      (C24740 + C24741 + C24742) * C49713 -
                      (C24743 + C24744 + C24745) * C50610) *
                         C50903 +
                     ((C31344 + C31345 + C31346) * C49720 +
                      (C31347 + C31348 + C31349) * C50874 -
                      (C25112 + C25111 + C25110) * C49713 -
                      (C25115 + C25114 + C25113) * C50610) *
                         C50824) *
                        C50626 * C1687 +
                    (((C25110 + C25111 + C25112) * C49713 -
                      ((C31349 + C31348 + C31347) * C50874 +
                       (C31346 + C31345 + C31344) * C49720) +
                      (C25113 + C25114 + C25115) * C50610) *
                         C50903 +
                     ((C25118 + C25117 + C25116) * C49713 -
                      ((C31350 + C31351 + C31352) * C50874 +
                       (C31353 + C31354 + C31355) * C49720) +
                      (C25121 + C25120 + C25119) * C50610) *
                         C50824) *
                        C50626 * C50727) *
                       C50889 +
                   ((((C24928 + C24929 + C24930) * C49713 -
                      ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                        C50939 * C320 + C24700 * C296 + C50938 * C315) *
                           C50874 +
                       (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                        C50939 * C305 + C24700 * C286 + C50938 * C297) *
                           C49720) +
                      (C24931 + C24932 + C24933) * C50610) *
                         C50903 +
                     ((C25658 + C25657 + C25656) * C49713 -
                      ((C31854 + C31855 + C31856) * C50874 +
                       (C31857 + C31858 + C31859) * C49720) +
                      (C25661 + C25660 + C25659) * C50610) *
                         C50824) *
                        C50626 * C1687 +
                    (((C31859 + C31858 + C31857) * C49720 +
                      (C31856 + C31855 + C31854) * C50874 -
                      (C25656 + C25657 + C25658) * C49713 -
                      (C25659 + C25660 + C25661) * C50610) *
                         C50903 +
                     ((C32262 + C32263 + C32264) * C49720 +
                      (C32265 + C32266 + C32267) * C50874 -
                      (C24702 * C3700 + C24697 * C3703 + C24701 * C2703 +
                       C50939 * C2707 + C24700 * C1226 + C50938 * C1233) *
                          C49713 -
                      (C24702 * C3702 + C24697 * C3706 + C24701 * C2708 +
                       C50939 * C2712 + C24700 * C1232 + C50938 * C1238) *
                          C50610) *
                         C50824) *
                        C50626 * C50727) *
                       C50701)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                       C50939 * C297 + C24702 * C290 + C24697 * C305) *
                          C1109 +
                      (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                       C50939 * C315 + C24702 * C306 + C24697 * C320) *
                          C50605) *
                         C50903 +
                     ((C31344 + C31345 + C31346) * C1109 +
                      (C31347 + C31348 + C31349) * C50605) *
                         C50824) *
                        C50626 * C50936 -
                    (((C31350 + C31351 + C31352) * C50605 +
                      (C31353 + C31354 + C31355) * C1109) *
                         C50824 +
                     ((C31349 + C31348 + C31347) * C50605 +
                      (C31346 + C31345 + C31344) * C1109) *
                         C50903) *
                        C50626 * C50937 +
                    (((C31355 + C31354 + C31353) * C1109 +
                      (C31352 + C31351 + C31350) * C50605) *
                         C50903 +
                     ((C33174 + C33175 + C33176) * C1109 +
                      (C33177 + C33178 + C33179) * C50605) *
                         C50824) *
                        C50626 * C2103) *
                       C50889 +
                   ((((C31859 + C31858 + C31857) * C1109 +
                      (C31856 + C31855 + C31854) * C50605) *
                         C50903 +
                     ((C32262 + C32263 + C32264) * C1109 +
                      (C32265 + C32266 + C32267) * C50605) *
                         C50824) *
                        C50626 * C50937 -
                    (((C31854 + C31855 + C31856) * C50605 +
                      (C31857 + C31858 + C31859) * C1109) *
                         C50824 +
                     ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                       C50939 * C320 + C24700 * C296 + C50938 * C315) *
                          C50605 +
                      (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                       C50939 * C305 + C24700 * C286 + C50938 * C297) *
                          C1109) *
                         C50903) *
                        C50626 * C50936 -
                    (((C24702 * C21469 + C24697 * C21471 + C24701 * C4600 +
                       C50939 * C4606 + C24700 * C4601 + C50938 * C4607) *
                          C50605 +
                      (C24702 * C21468 + C24697 * C21470 + C24701 * C4594 +
                       C50939 * C4602 + C24700 * C4595 + C50938 * C4603) *
                          C1109) *
                         C50824 +
                     ((C32267 + C32266 + C32265) * C50605 +
                      (C32264 + C32263 + C32262) * C1109) *
                         C50903) *
                        C50626 * C2103) *
                       C50701)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                       C50939 * C297 + C24702 * C290 + C24697 * C305) *
                          C1109 +
                      (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                       C50939 * C315 + C24702 * C306 + C24697 * C320) *
                          C50605) *
                         C50903 +
                     ((C31344 + C31345 + C31346) * C1109 +
                      (C31347 + C31348 + C31349) * C50605) *
                         C50824) *
                        C50626 * C1687 -
                    (((C31350 + C31351 + C31352) * C50605 +
                      (C31353 + C31354 + C31355) * C1109) *
                         C50824 +
                     ((C31349 + C31348 + C31347) * C50605 +
                      (C31346 + C31345 + C31344) * C1109) *
                         C50903) *
                        C50626 * C50727) *
                       C280 +
                   ((((C31859 + C31858 + C31857) * C1109 +
                      (C31856 + C31855 + C31854) * C50605) *
                         C50903 +
                     ((C32262 + C32263 + C32264) * C1109 +
                      (C32265 + C32266 + C32267) * C50605) *
                         C50824) *
                        C50626 * C50727 -
                    (((C31854 + C31855 + C31856) * C50605 +
                      (C31857 + C31858 + C31859) * C1109) *
                         C50824 +
                     ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                       C50939 * C320 + C24700 * C296 + C50938 * C315) *
                          C50605 +
                      (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                       C50939 * C305 + C24700 * C286 + C50938 * C297) *
                          C1109) *
                         C50903) *
                        C50626 * C1687) *
                       C281 +
                   ((((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                       C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                          C1109 +
                      (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                       C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                          C50605) *
                         C50903 +
                     ((C32766 + C32767 + C32768) * C1109 +
                      (C32769 + C32770 + C32771) * C50605) *
                         C50824) *
                        C50626 * C1687 -
                    (((C24702 * C20873 + C24697 * C20875 + C24701 * C3704 +
                       C50939 * C3707 + C24700 * C2706 + C50938 * C2711) *
                          C50605 +
                      (C24702 * C20872 + C24697 * C20874 + C24701 * C3701 +
                       C50939 * C3705 + C24700 * C2702 + C50938 * C2705) *
                          C1109) *
                         C50824 +
                     ((C32771 + C32770 + C32769) * C50605 +
                      (C32768 + C32767 + C32766) * C1109) *
                         C50903) *
                        C50626 * C50727) *
                       C282)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1035 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C1030 -
                     (C24740 + C24741 + C24742) * C1036 -
                     (C24743 + C24744 + C24745) * C1031 +
                     (C24746 + C24747 + C24748) * C1037 +
                     (C24749 + C24750 + C24751) * C1032) *
                        C50903 +
                    ((C31344 + C31345 + C31346) * C1035 +
                     (C31347 + C31348 + C31349) * C1030 -
                     (C25112 + C25111 + C25110) * C1036 -
                     (C25115 + C25114 + C25113) * C1031 +
                     (C25446 + C25445 + C25444) * C1037 +
                     (C25449 + C25448 + C25447) * C1032) *
                        C50824) *
                       C50626 * C1687 +
                   (((C25110 + C25111 + C25112) * C1036 -
                     ((C31349 + C31348 + C31347) * C1030 +
                      (C31346 + C31345 + C31344) * C1035) +
                     (C25113 + C25114 + C25115) * C1031 -
                     (C25444 + C25445 + C25446) * C1037 -
                     (C25447 + C25448 + C25449) * C1032) *
                        C50903 +
                    ((C25118 + C25117 + C25116) * C1036 -
                     ((C31350 + C31351 + C31352) * C1030 +
                      (C31353 + C31354 + C31355) * C1035) +
                     (C25121 + C25120 + C25119) * C1031 -
                     (C24702 * C2704 + C24697 * C2709 + C24701 * C1225 +
                      C50939 * C1231 + C24700 * C469 + C50938 * C486) *
                         C1037 -
                     (C24702 * C2710 + C24697 * C2713 + C24701 * C1230 +
                      C50939 * C1237 + C24700 * C487 + C50938 * C499) *
                         C1032) *
                        C50824) *
                       C50626 * C50727) *
                  C50651) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1109 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50605) *
                        C50903 +
                    ((C31344 + C31345 + C31346) * C1109 +
                     (C31347 + C31348 + C31349) * C50605) *
                        C50824) *
                       C50626 * C1853 -
                   (((C31350 + C31351 + C31352) * C50605 +
                     (C31353 + C31354 + C31355) * C1109) *
                        C50824 +
                    ((C31349 + C31348 + C31347) * C50605 +
                     (C31346 + C31345 + C31344) * C1109) *
                        C50903) *
                       C50626 * C1854 +
                   (((C31355 + C31354 + C31353) * C1109 +
                     (C31352 + C31351 + C31350) * C50605) *
                        C50903 +
                    ((C33174 + C33175 + C33176) * C1109 +
                     (C33177 + C33178 + C33179) * C50605) *
                        C50824) *
                       C50626 * C1855 -
                   (((C24702 * C23160 + C24697 * C23162 + C24701 * C6531 +
                      C50939 * C6534 + C24700 * C5509 + C50938 * C5514) *
                         C50605 +
                     (C24702 * C23159 + C24697 * C23161 + C24701 * C6528 +
                      C50939 * C6532 + C24700 * C5505 + C50938 * C5508) *
                         C1109) *
                        C50824 +
                    ((C33179 + C33178 + C33177) * C50605 +
                     (C33176 + C33175 + C33174) * C1109) *
                        C50903) *
                       C50626 * C1856) *
                  C50651) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C49720 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C50874 -
                     (C24740 + C24741 + C24742) * C49713 -
                     (C24743 + C24744 + C24745) * C50610) *
                        C50903 +
                    ((C31344 + C31345 + C31346) * C49720 +
                     (C31347 + C31348 + C31349) * C50874 -
                     (C25112 + C25111 + C25110) * C49713 -
                     (C25115 + C25114 + C25113) * C50610) *
                        C50824) *
                       C50626 * C50936 +
                   (((C25110 + C25111 + C25112) * C49713 -
                     ((C31349 + C31348 + C31347) * C50874 +
                      (C31346 + C31345 + C31344) * C49720) +
                     (C25113 + C25114 + C25115) * C50610) *
                        C50903 +
                    ((C25118 + C25117 + C25116) * C49713 -
                     ((C31350 + C31351 + C31352) * C50874 +
                      (C31353 + C31354 + C31355) * C49720) +
                     (C25121 + C25120 + C25119) * C50610) *
                        C50824) *
                       C50626 * C50937 +
                   (((C31355 + C31354 + C31353) * C49720 +
                     (C31352 + C31351 + C31350) * C50874 -
                     (C25116 + C25117 + C25118) * C49713 -
                     (C25119 + C25120 + C25121) * C50610) *
                        C50903 +
                    ((C33174 + C33175 + C33176) * C49720 +
                     (C33177 + C33178 + C33179) * C50874 -
                     (C24702 * C4592 + C24697 * C4598 + C24701 * C4593 +
                      C50939 * C4599 + C24700 * C1859 + C50938 * C1866) *
                         C49713 -
                     (C24702 * C4596 + C24697 * C4604 + C24701 * C4597 +
                      C50939 * C4605 + C24700 * C1865 + C50938 * C1871) *
                         C50610) *
                        C50824) *
                       C50626 * C2103) *
                  C50651) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                      C50939 * C297 + C24702 * C290 + C24697 * C305) *
                         C1035 +
                     (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                      C50939 * C315 + C24702 * C306 + C24697 * C320) *
                         C1030 -
                     (C24740 + C24741 + C24742) * C1036 -
                     (C24743 + C24744 + C24745) * C1031 +
                     (C24746 + C24747 + C24748) * C1037 +
                     (C24749 + C24750 + C24751) * C1032) *
                        C50903 +
                    ((C31344 + C31345 + C31346) * C1035 +
                     (C31347 + C31348 + C31349) * C1030 -
                     (C25112 + C25111 + C25110) * C1036 -
                     (C25115 + C25114 + C25113) * C1031 +
                     (C25446 + C25445 + C25444) * C1037 +
                     (C25449 + C25448 + C25447) * C1032) *
                        C50824) *
                       C50626 * C1687 +
                   (((C25110 + C25111 + C25112) * C1036 -
                     ((C31349 + C31348 + C31347) * C1030 +
                      (C31346 + C31345 + C31344) * C1035) +
                     (C25113 + C25114 + C25115) * C1031 -
                     (C25444 + C25445 + C25446) * C1037 -
                     (C25447 + C25448 + C25449) * C1032) *
                        C50903 +
                    ((C25118 + C25117 + C25116) * C1036 -
                     ((C31350 + C31351 + C31352) * C1030 +
                      (C31353 + C31354 + C31355) * C1035) +
                     (C25121 + C25120 + C25119) * C1031 -
                     (C24702 * C2704 + C24697 * C2709 + C24701 * C1225 +
                      C50939 * C1231 + C24700 * C469 + C50938 * C486) *
                         C1037 -
                     (C24702 * C2710 + C24697 * C2713 + C24701 * C1230 +
                      C50939 * C1237 + C24700 * C487 + C50938 * C499) *
                         C1032) *
                        C50824) *
                       C50626 * C50727) *
                  C50651) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C24700 * C122 + C50938 * C129 + C24701 * C286 +
                       C50939 * C297 + C24702 * C290 + C24697 * C305) *
                          C1109 +
                      (C24700 * C130 + C50938 * C143 + C24701 * C296 +
                       C50939 * C315 + C24702 * C306 + C24697 * C320) *
                          C50605) *
                         C50903 +
                     ((C31344 + C31345 + C31346) * C1109 +
                      (C31347 + C31348 + C31349) * C50605) *
                         C50824) *
                        C50626 * C1687 -
                    (((C31350 + C31351 + C31352) * C50605 +
                      (C31353 + C31354 + C31355) * C1109) *
                         C50824 +
                     ((C31349 + C31348 + C31347) * C50605 +
                      (C31346 + C31345 + C31344) * C1109) *
                         C50903) *
                        C50626 * C50727) *
                       C280 +
                   ((((C31859 + C31858 + C31857) * C1109 +
                      (C31856 + C31855 + C31854) * C50605) *
                         C50903 +
                     ((C32262 + C32263 + C32264) * C1109 +
                      (C32265 + C32266 + C32267) * C50605) *
                         C50824) *
                        C50626 * C50727 -
                    (((C31854 + C31855 + C31856) * C50605 +
                      (C31857 + C31858 + C31859) * C1109) *
                         C50824 +
                     ((C24702 * C1120 + C24697 * C1125 + C24701 * C306 +
                       C50939 * C320 + C24700 * C296 + C50938 * C315) *
                          C50605 +
                      (C24702 * C1113 + C24697 * C1121 + C24701 * C290 +
                       C50939 * C305 + C24700 * C286 + C50938 * C297) *
                          C1109) *
                         C50903) *
                        C50626 * C1687) *
                       C281 +
                   ((((C24700 * C290 + C50938 * C305 + C24701 * C1113 +
                       C50939 * C1121 + C24702 * C2508 + C24697 * C2511) *
                          C1109 +
                      (C24700 * C306 + C50938 * C320 + C24701 * C1120 +
                       C50939 * C1125 + C24702 * C2512 + C24697 * C2517) *
                          C50605) *
                         C50903 +
                     ((C32766 + C32767 + C32768) * C1109 +
                      (C32769 + C32770 + C32771) * C50605) *
                         C50824) *
                        C50626 * C1687 -
                    (((C24702 * C20873 + C24697 * C20875 + C24701 * C3704 +
                       C50939 * C3707 + C24700 * C2706 + C50938 * C2711) *
                          C50605 +
                      (C24702 * C20872 + C24697 * C20874 + C24701 * C3701 +
                       C50939 * C3705 + C24700 * C2702 + C50938 * C2705) *
                          C1109) *
                         C50824 +
                     ((C32771 + C32770 + C32769) * C50605 +
                      (C32768 + C32767 + C32766) * C1109) *
                         C50903) *
                        C50626 * C50727) *
                       C282)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C641 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50930 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C642 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50931 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C643 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C638) *
              C50760 * C50626 * C50663 * C50889 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C642 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50930 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C641) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C50931 -
           (C20083 * C2510 + C20078 * C2515 + C20082 * C1111 + C20077 * C1117 +
            C20081 * C292 + C20076 * C309 + C20080 * C287 + C20075 * C299) *
               C643 -
           (C20083 * C2516 + C20078 * C2519 + C20082 * C1116 + C20077 * C1123 +
            C20081 * C310 + C20076 * C322 + C20080 * C300 + C20075 * C317) *
               C638) *
              C50760 * C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C641 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50930 -
            (C17312 + C17313) * C642 - (C17314 + C17315) * C50931 +
            C17328 * C643 + C17329 * C638) *
               C50760 * C17274 +
           ((C17313 + C17312) * C641 + (C17315 + C17314) * C50930 -
            (C17317 + C17316) * C642 - (C17319 + C17318) * C50931 +
            (C17321 + C17320) * C643 + (C17323 + C17322) * C638) *
               C50760 * C17275 +
           (C17328 * C641 + C17329 * C50930 - C17330 * C642 - C17331 * C50931 +
            (C17325 + C17324) * C643 + (C17327 + C17326) * C638) *
               C50760 * C17276) *
              C50663 * C50889 +
          (((C17510 + C17511) * C642 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50930 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C641) +
            (C17512 + C17513) * C50931 - C17866 * C643 - C17867 * C638) *
               C50760 * C17274 +
           ((C17514 + C17515) * C642 -
            ((C17513 + C17512) * C50930 + (C17511 + C17510) * C641) +
            (C17516 + C17517) * C50931 - (C17876 + C17877) * C643 -
            (C17878 + C17879) * C638) *
               C50760 * C17275 +
           ((C17877 + C17876) * C642 - (C17867 * C50930 + C17866 * C641) +
            (C17879 + C17878) * C50931 -
            (C17278 * C294 + C50796 * C313 + C17277 * C289 + C17272 * C303) *
                C643 -
            (C17278 * C314 + C50796 * C324 + C17277 * C304 + C17272 * C319) *
                C638) *
               C50760 * C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C641 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50930 -
            (C17312 + C17313) * C642 - (C17314 + C17315) * C50931 +
            C17328 * C643 + C17329 * C638) *
               C5192 +
           ((C22223 + C22224) * C641 + (C22225 + C22226) * C50930 -
            (C17705 + C17704) * C642 - (C17707 + C17706) * C50931 +
            (C17708 + C17709) * C643 + (C17710 + C17711) * C638) *
               C5193 +
           (C22241 * C641 + C22242 * C50930 - C22205 * C642 - C22206 * C50931 +
            (C17717 + C17716) * C643 + (C17719 + C17718) * C638) *
               C5194) *
              C50626 * C50663 * C50889 +
          (((C17510 + C17511) * C642 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50930 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C641) +
            (C17512 + C17513) * C50931 - C17866 * C643 - C17867 * C638) *
               C5192 +
           ((C18251 + C18250) * C642 -
            ((C17278 * C1583 + C50796 * C1588 + C17277 * C900 + C17272 * C909) *
                 C50930 +
             (C17278 * C1576 + C50796 * C1584 + C17277 * C894 + C17272 * C899) *
                 C641) +
            (C18253 + C18252) * C50931 - (C18254 + C18255) * C643 -
            (C18256 + C18257) * C638) *
               C5193 +
           ((C17277 * C1226 + C17272 * C1233 + C17278 * C2703 +
             C50796 * C2707) *
                C642 -
            ((C17278 * C2706 + C50796 * C2711 + C17277 * C1234 +
              C17272 * C1239) *
                 C50930 +
             (C17278 * C2702 + C50796 * C2705 + C17277 * C1227 +
              C17272 * C1235) *
                 C641) +
            (C17277 * C1232 + C17272 * C1238 + C17278 * C2708 +
             C50796 * C2712) *
                C50931 -
            (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
             C17272 * C1231) *
                C643 -
            (C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
             C17272 * C1237) *
                C638) *
               C5194) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C283 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C278 -
            (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
             C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
                C284 -
            (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
             C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
                C50610) *
               C50760 * C50626 * C50890 +
           ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
             C20082 * C1575 + C20077 * C1582 + C20083 * C3273 +
             C20078 * C3277) *
                C284 -
            ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 +
              C20077 * C1588 + C20081 * C900 + C20076 * C909 + C20080 * C473 +
              C20075 * C492) *
                 C278 +
             (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 +
              C20077 * C1584 + C20081 * C894 + C20076 * C899 + C20080 * C463 +
              C20075 * C474) *
                 C283) +
            (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
             C20082 * C1581 + C20077 * C1587 + C20083 * C3278 +
             C20078 * C3282) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50889 +
          (((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
             C20082 * C1112 + C20077 * C1119 + C20083 * C2509 +
             C20078 * C2513) *
                C284 -
            ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 +
              C20077 * C1125 + C20081 * C306 + C20076 * C320 + C20080 * C296 +
              C20075 * C315) *
                 C278 +
             (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 +
              C20077 * C1121 + C20081 * C290 + C20076 * C305 + C20080 * C286 +
              C20075 * C297) *
                 C283) +
            (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
             C20082 * C1118 + C20077 * C1124 + C20083 * C2514 +
             C20078 * C2518) *
                C50610) *
               C50760 * C50626 * C50890 +
           ((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C283 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C278 -
            (C20083 * C4194 + C20078 * C4197 + C20082 * C3273 + C20077 * C3277 +
             C20081 * C1575 + C20076 * C1582 + C20080 * C895 + C20075 * C901) *
                C284 -
            (C20083 * C4196 + C20078 * C4200 + C20082 * C3278 + C20077 * C3282 +
             C20081 * C1581 + C20076 * C1587 + C20080 * C902 + C20075 * C910) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
                C50760 * C17274 +
            ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
                C50760 * C17275 +
            (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C50610) *
                C50760 * C17276) *
               C50890 +
           (((C17704 + C17705) * C284 -
             ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                  C278 +
              (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                  C283) +
             (C17706 + C17707) * C50610) *
                C50760 * C17274 +
            ((C17708 + C17709) * C284 -
             ((C17707 + C17706) * C278 + (C17705 + C17704) * C283) +
             (C17710 + C17711) * C50610) *
                C50760 * C17275 +
            ((C18037 + C18036) * C284 - (C18027 * C278 + C18026 * C283) +
             (C18039 + C18038) * C50610) *
                C50760 * C17276) *
               C50727) *
              C50889 +
          ((((C17510 + C17511) * C284 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C278 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C283) +
             (C17512 + C17513) * C50610) *
                C50760 * C17274 +
            ((C17514 + C17515) * C284 -
             ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
             (C17516 + C17517) * C50610) *
                C50760 * C17275 +
            ((C17877 + C17876) * C284 - (C17867 * C278 + C17866 * C283) +
             (C17879 + C17878) * C50610) *
                C50760 * C17276) *
               C50890 +
           (((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C283 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C278 -
             (C18250 + C18251) * C284 - (C18252 + C18253) * C50610) *
                C50760 * C17274 +
            ((C18251 + C18250) * C283 + (C18253 + C18252) * C278 -
             (C18254 + C18255) * C284 - (C18256 + C18257) * C50610) *
                C50760 * C17275 +
            ((C18255 + C18254) * C283 + (C18257 + C18256) * C278 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C284 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C50610) *
                C50760 * C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
                C5192 +
            ((C22223 + C22224) * C283 + (C22225 + C22226) * C278 -
             (C17705 + C17704) * C284 - (C17707 + C17706) * C50610) *
                C5193 +
            C22247 * C5194) *
               C50626 * C50890 +
           (((C17704 + C17705) * C284 -
             ((C22226 + C22225) * C278 + (C22224 + C22223) * C283) +
             (C17706 + C17707) * C50610) *
                C5192 +
            ((C17713 + C17712) * C284 -
             ((C22230 + C22229) * C278 + (C22228 + C22227) * C283) +
             (C17715 + C17714) * C50610) *
                C5193 +
            ((C22233 + C22234) * C284 -
             ((C22235 + C22236) * C278 + (C22237 + C22238) * C283) +
             (C22239 + C22240) * C50610) *
                C5194) *
               C50626 * C50727) *
              C50889 +
          ((((C17510 + C17511) * C284 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C278 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C283) +
             (C17512 + C17513) * C50610) *
                C5192 +
            ((C18251 + C18250) * C284 -
             ((C22758 + C22759) * C278 + (C22760 + C22761) * C283) +
             (C18253 + C18252) * C50610) *
                C5193 +
            ((C22762 + C22763) * C284 -
             ((C22764 + C22765) * C278 + (C22766 + C22767) * C283) +
             (C22768 + C22769) * C50610) *
                C5194) *
               C50626 * C50890 +
           (((C22761 + C22760) * C283 + (C22759 + C22758) * C278 -
             (C18250 + C18251) * C284 - (C18252 + C18253) * C50610) *
                C5192 +
            ((C22767 + C22766) * C283 + (C22765 + C22764) * C278 -
             (C22763 + C22762) * C284 - (C22769 + C22768) * C50610) *
                C5193 +
            ((C17277 * C4595 + C17272 * C4603 + C17278 * C4594 +
              C50796 * C4602) *
                 C283 +
             (C17277 * C4601 + C17272 * C4607 + C17278 * C4600 +
              C50796 * C4606) *
                 C278 -
             (C17278 * C4592 + C50796 * C4598 + C17277 * C4593 +
              C17272 * C4599) *
                 C284 -
             (C17278 * C4596 + C50796 * C4604 + C17277 * C4597 +
              C17272 * C4605) *
                 C50610) *
                C5194) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                   C118 +
               (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                   C106 -
               (C17312 + C17313) * C119 - (C17314 + C17315) * C107 +
               C17328 * C120 + C17329 * C108 - C17330 * C121 - C17331 * C109) *
                  C50760 * C17274 +
              ((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
               (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
               (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
               (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
                  C50760 * C17275 +
              (C17328 * C118 + C17329 * C106 - C17330 * C119 - C17331 * C107 +
               (C17325 + C17324) * C120 + (C17327 + C17326) * C108 -
               (C17278 * C644 + C50796 * C645 + C17277 * C127 + C17272 * C139) *
                   C121 -
               (C17278 * C646 + C50796 * C647 + C17277 * C140 + C17272 * C148) *
                   C109) *
                  C50760 * C17276) *
             C50663 * C50651 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17277 * C122 + C17272 * C129 + C17278 * C286 +
                 C50796 * C297) *
                    C283 +
                (C17277 * C130 + C17272 * C143 + C17278 * C296 +
                 C50796 * C315) *
                    C278 -
                (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
                   C50760 * C17274 +
               ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
                (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
                   C50760 * C17275 +
               (C17328 * C283 + C17329 * C278 - C17330 * C284 -
                C17331 * C50610) *
                   C50760 * C17276) *
                  C50663 * C280 +
              (((C17510 + C17511) * C284 -
                ((C17278 * C306 + C50796 * C320 + C17277 * C296 +
                  C17272 * C315) *
                     C278 +
                 (C17278 * C290 + C50796 * C305 + C17277 * C286 +
                  C17272 * C297) *
                     C283) +
                (C17512 + C17513) * C50610) *
                   C50760 * C17274 +
               ((C17514 + C17515) * C284 -
                ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
                (C17516 + C17517) * C50610) *
                   C50760 * C17275 +
               ((C17277 * C288 + C17272 * C301 + C17278 * C293 +
                 C50796 * C311) *
                    C284 -
                ((C17517 + C17516) * C278 + (C17515 + C17514) * C283) +
                (C17277 * C302 + C17272 * C318 + C17278 * C312 +
                 C50796 * C323) *
                    C50610) *
                   C50760 * C17276) *
                  C50663 * C281 +
              (((C17277 * C290 + C17272 * C305 + C17278 * C1113 +
                 C50796 * C1121) *
                    C283 +
                (C17277 * C306 + C17272 * C320 + C17278 * C1120 +
                 C50796 * C1125) *
                    C278 -
                (C17518 + C17519) * C284 - (C17520 + C17521) * C50610) *
                   C50760 * C17274 +
               ((C17519 + C17518) * C283 + (C17521 + C17520) * C278 -
                (C17522 + C17523) * C284 - (C17524 + C17525) * C50610) *
                   C50760 * C17275 +
               ((C17523 + C17522) * C283 + (C17525 + C17524) * C278 -
                (C17278 * C1110 + C50796 * C1115 + C17277 * C293 +
                 C17272 * C311) *
                    C284 -
                (C17278 * C1114 + C50796 * C1122 + C17277 * C312 +
                 C17272 * C323) *
                    C50610) *
                   C50760 * C17276) *
                  C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C50610) *
               C50760 * C17276) *
              C459 +
          (((C17704 + C17705) * C284 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C278 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C283) +
            (C17706 + C17707) * C50610) *
               C50760 * C17274 +
           ((C17708 + C17709) * C284 -
            ((C17707 + C17706) * C278 + (C17705 + C17704) * C283) +
            (C17710 + C17711) * C50610) *
               C50760 * C17275 +
           ((C17277 * C465 + C17272 * C478 + C17278 * C897 + C50796 * C905) *
                C284 -
            ((C17711 + C17710) * C278 + (C17709 + C17708) * C283) +
            (C17277 * C479 + C17272 * C495 + C17278 * C906 + C50796 * C912) *
                C50610) *
               C50760 * C17276) *
              C460 +
          (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                C283 +
            (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                C278 -
            (C17712 + C17713) * C284 - (C17714 + C17715) * C50610) *
               C50760 * C17274 +
           ((C17713 + C17712) * C283 + (C17715 + C17714) * C278 -
            (C17716 + C17717) * C284 - (C17718 + C17719) * C50610) *
               C50760 * C17275 +
           ((C17717 + C17716) * C283 + (C17719 + C17718) * C278 -
            (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
                C284 -
            (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
                C50610) *
               C50760 * C17276) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
           C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
              C118 +
          (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
           C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
              C106 -
          (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
           C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
              C119 -
          (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
           C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
              C107 +
          (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
           C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
              C120 +
          (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
           C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
              C108 -
          (C20083 * C1110 + C20078 * C1115 + C20082 * C293 + C20077 * C311 +
           C20081 * C288 + C20076 * C301 + C20080 * C125 + C20075 * C135) *
              C121 -
          (C20083 * C1114 + C20078 * C1122 + C20082 * C312 + C20077 * C323 +
           C20081 * C302 + C20076 * C318 + C20080 * C136 + C20075 * C146) *
              C109) *
         C50760 * C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C278 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C50663 * C280 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C284 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C278 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C283) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C50610) *
              C50760 * C50626 * C50663 * C281 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C283 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C278 -
           (C20083 * C3546 + C20078 * C3549 + C20082 * C2509 + C20077 * C2513 +
            C20081 * C1112 + C20076 * C1119 + C20080 * C291 + C20075 * C307) *
               C284 -
           (C20083 * C3548 + C20078 * C3552 + C20082 * C2514 + C20077 * C2518 +
            C20081 * C1118 + C20076 * C1124 + C20080 * C308 + C20075 * C321) *
               C50610) *
              C50760 * C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C278 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C459 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C284 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C278 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C283) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C50610) *
              C50760 * C50626 * C460 +
          ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
            C20082 * C2702 + C20077 * C2705 + C20083 * C3701 + C20078 * C3705) *
               C283 +
           (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
            C20082 * C2706 + C20077 * C2711 + C20083 * C3704 + C20078 * C3707) *
               C278 -
           (C20083 * C3700 + C20078 * C3703 + C20082 * C2703 + C20077 * C2707 +
            C20081 * C1226 + C20076 * C1233 + C20080 * C468 + C20075 * C484) *
               C284 -
           (C20083 * C3702 + C20078 * C3706 + C20082 * C2708 + C20077 * C2712 +
            C20081 * C1232 + C20076 * C1238 + C20080 * C485 + C20075 * C498) *
               C50610) *
              C50760 * C50626 * C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C5192 +
          ((C17277 * C463 + C17272 * C474 + C17278 * C894 + C50796 * C899) *
               C118 +
           (C17277 * C473 + C17272 * C492 + C17278 * C900 + C50796 * C909) *
               C106 -
           (C17705 + C17704) * C119 - (C17707 + C17706) * C107 +
           (C17708 + C17709) * C120 + (C17710 + C17711) * C108 -
           (C18036 + C18037) * C121 - (C18038 + C18039) * C109) *
              C5193 +
          ((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
               C118 +
           (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
               C106 -
           (C17712 + C17713) * C119 - (C17714 + C17715) * C107 +
           (C17717 + C17716) * C120 + (C17719 + C17718) * C108 -
           (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
               C121 -
           (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
               C109) *
              C5194) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
               C5192 +
           ((C17277 * C463 + C17272 * C474 + C17278 * C894 + C50796 * C899) *
                C283 +
            (C17277 * C473 + C17272 * C492 + C17278 * C900 + C50796 * C909) *
                C278 -
            (C17705 + C17704) * C284 - (C17707 + C17706) * C50610) *
               C5193 +
           ((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                C283 +
            (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                C278 -
            (C17712 + C17713) * C284 - (C17714 + C17715) * C50610) *
               C5194) *
              C50626 * C50663 * C280 +
          (((C17510 + C17511) * C284 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C278 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C283) +
            (C17512 + C17513) * C50610) *
               C5192 +
           ((C18251 + C18250) * C284 -
            ((C17278 * C1583 + C50796 * C1588 + C17277 * C900 + C17272 * C909) *
                 C278 +
             (C17278 * C1576 + C50796 * C1584 + C17277 * C894 + C17272 * C899) *
                 C283) +
            (C18253 + C18252) * C50610) *
               C5193 +
           ((C17277 * C1226 + C17272 * C1233 + C17278 * C2703 +
             C50796 * C2707) *
                C284 -
            ((C17278 * C2706 + C50796 * C2711 + C17277 * C1234 +
              C17272 * C1239) *
                 C278 +
             (C17278 * C2702 + C50796 * C2705 + C17277 * C1227 +
              C17272 * C1235) *
                 C283) +
            (C17277 * C1232 + C17272 * C1238 + C17278 * C2708 +
             C50796 * C2712) *
                C50610) *
               C5194) *
              C50626 * C50663 * C281 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C283 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C278 -
            (C17518 + C17519) * C284 - (C17520 + C17521) * C50610) *
               C5192 +
           ((C17277 * C1576 + C17272 * C1584 + C17278 * C3272 +
             C50796 * C3275) *
                C283 +
            (C17277 * C1583 + C17272 * C1588 + C17278 * C3276 +
             C50796 * C3281) *
                C278 -
            (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
             C17272 * C1582) *
                C284 -
            (C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
             C17272 * C1587) *
                C50610) *
               C5193 +
           ((C17277 * C2702 + C17272 * C2705 + C17278 * C3701 +
             C50796 * C3705) *
                C283 +
            (C17277 * C2706 + C17272 * C2711 + C17278 * C3704 +
             C50796 * C3707) *
                C278 -
            (C17278 * C3700 + C50796 * C3703 + C17277 * C2703 +
             C17272 * C2707) *
                C284 -
            (C17278 * C3702 + C50796 * C3706 + C17277 * C2708 +
             C17272 * C2712) *
                C50610) *
               C5194) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
               C5192 +
           ((C22223 + C22224) * C283 + (C22225 + C22226) * C278 -
            (C17705 + C17704) * C284 - (C17707 + C17706) * C50610) *
               C5193 +
           C22247 * C5194) *
              C50626 * C459 +
          (((C17704 + C17705) * C284 -
            ((C22226 + C22225) * C278 + (C22224 + C22223) * C283) +
            (C17706 + C17707) * C50610) *
               C5192 +
           ((C17713 + C17712) * C284 -
            ((C22230 + C22229) * C278 + (C22228 + C22227) * C283) +
            (C17715 + C17714) * C50610) *
               C5193 +
           ((C22233 + C22234) * C284 -
            ((C22235 + C22236) * C278 + (C22237 + C22238) * C283) +
            (C22239 + C22240) * C50610) *
               C5194) *
              C50626 * C460 +
          (C22247 * C5192 +
           ((C22238 + C22237) * C283 + (C22236 + C22235) * C278 -
            (C22234 + C22233) * C284 - (C22240 + C22239) * C50610) *
               C5193 +
           ((C17277 * C5505 + C17272 * C5508 + C17278 * C6528 +
             C50796 * C6532) *
                C283 +
            (C17277 * C5509 + C17272 * C5514 + C17278 * C6531 +
             C50796 * C6534) *
                C278 -
            (C17278 * C6527 + C50796 * C6530 + C17277 * C5506 +
             C17272 * C5510) *
                C284 -
            (C17278 * C6529 + C50796 * C6533 + C17277 * C5511 +
             C17272 * C5515) *
                C50610) *
               C5194) *
              C50626 * C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C641 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50930 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C642 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50931 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C643 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C638) *
              C50760 * C50626 * C50890 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C642 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50930 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C641) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C50931 -
           (C20083 * C3274 + C20078 * C3279 + C20082 * C1574 + C20077 * C1580 +
            C20081 * C896 + C20076 * C903 + C20080 * C464 + C20075 * C476) *
               C643 -
           (C20083 * C3280 + C20078 * C3283 + C20082 * C1579 + C20077 * C1586 +
            C20081 * C904 + C20076 * C911 + C20080 * C477 + C20075 * C494) *
               C638) *
              C50760 * C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C641 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50930 -
            (C17312 + C17313) * C642 - (C17314 + C17315) * C50931 +
            C17328 * C643 + C17329 * C638) *
               C50760 * C17274 +
           ((C17313 + C17312) * C641 + (C17315 + C17314) * C50930 -
            (C17317 + C17316) * C642 - (C17319 + C17318) * C50931 +
            (C17321 + C17320) * C643 + (C17323 + C17322) * C638) *
               C50760 * C17275 +
           (C17328 * C641 + C17329 * C50930 - C17330 * C642 - C17331 * C50931 +
            (C17325 + C17324) * C643 + (C17327 + C17326) * C638) *
               C50760 * C17276) *
              C50890 +
          (((C17704 + C17705) * C642 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50930 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C641) +
            (C17706 + C17707) * C50931 - C18026 * C643 - C18027 * C638) *
               C50760 * C17274 +
           ((C17708 + C17709) * C642 -
            ((C17707 + C17706) * C50930 + (C17705 + C17704) * C641) +
            (C17710 + C17711) * C50931 - (C18036 + C18037) * C643 -
            (C18038 + C18039) * C638) *
               C50760 * C17275 +
           ((C18037 + C18036) * C642 - (C18027 * C50930 + C18026 * C641) +
            (C18039 + C18038) * C50931 -
            (C17278 * C898 + C50796 * C907 + C17277 * C466 + C17272 * C480) *
                C643 -
            (C17278 * C908 + C50796 * C913 + C17277 * C481 + C17272 * C496) *
                C638) *
               C50760 * C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C641 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50930 -
            (C17312 + C17313) * C642 - (C17314 + C17315) * C50931 +
            C17328 * C643 + C17329 * C638) *
               C5192 +
           ((C22223 + C22224) * C641 + (C22225 + C22226) * C50930 -
            (C17705 + C17704) * C642 - (C17707 + C17706) * C50931 +
            (C17708 + C17709) * C643 + (C17710 + C17711) * C638) *
               C5193 +
           (C22241 * C641 + C22242 * C50930 - C22205 * C642 - C22206 * C50931 +
            (C17717 + C17716) * C643 + (C17719 + C17718) * C638) *
               C5194) *
              C50626 * C50890 +
          (((C17704 + C17705) * C642 -
            ((C22226 + C22225) * C50930 + (C22224 + C22223) * C641) +
            (C17706 + C17707) * C50931 - C18026 * C643 - C18027 * C638) *
               C5192 +
           ((C17713 + C17712) * C642 -
            ((C22230 + C22229) * C50930 + (C22228 + C22227) * C641) +
            (C17715 + C17714) * C50931 - (C17716 + C17717) * C643 -
            (C17718 + C17719) * C638) *
               C5193 +
           ((C22233 + C22234) * C642 -
            ((C22235 + C22236) * C50930 + (C22237 + C22238) * C641) +
            (C22239 + C22240) * C50931 -
            (C17278 * C6099 + C50796 * C6100 + C17277 * C1858 +
             C17272 * C1864) *
                C643 -
            (C17278 * C6101 + C50796 * C6102 + C17277 * C1863 +
             C17272 * C1870) *
                C638) *
               C5194) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C50610) *
               C50760 * C17276) *
              C50663 * C280 +
          (((C17510 + C17511) * C284 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C278 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C283) +
            (C17512 + C17513) * C50610) *
               C50760 * C17274 +
           ((C17514 + C17515) * C284 -
            ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
            (C17516 + C17517) * C50610) *
               C50760 * C17275 +
           ((C17277 * C288 + C17272 * C301 + C17278 * C293 + C50796 * C311) *
                C284 -
            ((C17517 + C17516) * C278 + (C17515 + C17514) * C283) +
            (C17277 * C302 + C17272 * C318 + C17278 * C312 + C50796 * C323) *
                C50610) *
               C50760 * C17276) *
              C50663 * C281 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C283 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C278 -
            (C17518 + C17519) * C284 - (C17520 + C17521) * C50610) *
               C50760 * C17274 +
           ((C17519 + C17518) * C283 + (C17521 + C17520) * C278 -
            (C17522 + C17523) * C284 - (C17524 + C17525) * C50610) *
               C50760 * C17275 +
           ((C17523 + C17522) * C283 + (C17525 + C17524) * C278 -
            (C17278 * C1110 + C50796 * C1115 + C17277 * C293 + C17272 * C311) *
                C284 -
            (C17278 * C1114 + C50796 * C1122 + C17277 * C312 + C17272 * C323) *
                C50610) *
               C50760 * C17276) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C50760 * C17274 +
          ((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
           (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
           (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
           (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
              C50760 * C17275 +
          (C17328 * C118 + C17329 * C106 - C17330 * C119 - C17331 * C107 +
           (C17325 + C17324) * C120 + (C17327 + C17326) * C108 -
           (C17278 * C644 + C50796 * C645 + C17277 * C127 + C17272 * C139) *
               C121 -
           (C17278 * C646 + C50796 * C647 + C17277 * C140 + C17272 * C148) *
               C109) *
              C50760 * C17276) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
           C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
              C118 +
          (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
           C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
              C106 -
          (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
           C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
              C119 -
          (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
           C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
              C107 +
          (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
           C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
              C120 +
          (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
           C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
              C108 -
          (C20083 * C1110 + C20078 * C1115 + C20082 * C293 + C20077 * C311 +
           C20081 * C288 + C20076 * C301 + C20080 * C125 + C20075 * C135) *
              C121 -
          (C20083 * C1114 + C20078 * C1122 + C20082 * C312 + C20077 * C323 +
           C20081 * C302 + C20076 * C318 + C20080 * C136 + C20075 * C146) *
              C109) *
         C50760 * C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C278 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C50663 * C280 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C284 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C278 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C283) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C50610) *
              C50760 * C50626 * C50663 * C281 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C283 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C278 -
           (C20083 * C3546 + C20078 * C3549 + C20082 * C2509 + C20077 * C2513 +
            C20081 * C1112 + C20076 * C1119 + C20080 * C291 + C20075 * C307) *
               C284 -
           (C20083 * C3548 + C20078 * C3552 + C20082 * C2514 + C20077 * C2518 +
            C20081 * C1118 + C20076 * C1124 + C20080 * C308 + C20075 * C321) *
               C50610) *
              C50760 * C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C5192 +
          ((C17277 * C463 + C17272 * C474 + C17278 * C894 + C50796 * C899) *
               C118 +
           (C17277 * C473 + C17272 * C492 + C17278 * C900 + C50796 * C909) *
               C106 -
           (C17705 + C17704) * C119 - (C17707 + C17706) * C107 +
           (C17708 + C17709) * C120 + (C17710 + C17711) * C108 -
           (C18036 + C18037) * C121 - (C18038 + C18039) * C109) *
              C5193 +
          ((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
               C118 +
           (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
               C106 -
           (C17712 + C17713) * C119 - (C17714 + C17715) * C107 +
           (C17717 + C17716) * C120 + (C17719 + C17718) * C108 -
           (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
               C121 -
           (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
               C109) *
              C5194) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
               C5192 +
           ((C17277 * C463 + C17272 * C474 + C17278 * C894 + C50796 * C899) *
                C283 +
            (C17277 * C473 + C17272 * C492 + C17278 * C900 + C50796 * C909) *
                C278 -
            (C17705 + C17704) * C284 - (C17707 + C17706) * C50610) *
               C5193 +
           ((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                C283 +
            (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                C278 -
            (C17712 + C17713) * C284 - (C17714 + C17715) * C50610) *
               C5194) *
              C50626 * C50663 * C280 +
          (((C17510 + C17511) * C284 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C278 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C283) +
            (C17512 + C17513) * C50610) *
               C5192 +
           ((C18251 + C18250) * C284 -
            ((C17278 * C1583 + C50796 * C1588 + C17277 * C900 + C17272 * C909) *
                 C278 +
             (C17278 * C1576 + C50796 * C1584 + C17277 * C894 + C17272 * C899) *
                 C283) +
            (C18253 + C18252) * C50610) *
               C5193 +
           ((C17277 * C1226 + C17272 * C1233 + C17278 * C2703 +
             C50796 * C2707) *
                C284 -
            ((C17278 * C2706 + C50796 * C2711 + C17277 * C1234 +
              C17272 * C1239) *
                 C278 +
             (C17278 * C2702 + C50796 * C2705 + C17277 * C1227 +
              C17272 * C1235) *
                 C283) +
            (C17277 * C1232 + C17272 * C1238 + C17278 * C2708 +
             C50796 * C2712) *
                C50610) *
               C5194) *
              C50626 * C50663 * C281 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C283 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C278 -
            (C17518 + C17519) * C284 - (C17520 + C17521) * C50610) *
               C5192 +
           ((C17277 * C1576 + C17272 * C1584 + C17278 * C3272 +
             C50796 * C3275) *
                C283 +
            (C17277 * C1583 + C17272 * C1588 + C17278 * C3276 +
             C50796 * C3281) *
                C278 -
            (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
             C17272 * C1582) *
                C284 -
            (C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
             C17272 * C1587) *
                C50610) *
               C5193 +
           ((C17277 * C2702 + C17272 * C2705 + C17278 * C3701 +
             C50796 * C3705) *
                C283 +
            (C17277 * C2706 + C17272 * C2711 + C17278 * C3704 +
             C50796 * C3707) *
                C278 -
            (C17278 * C3700 + C50796 * C3703 + C17277 * C2703 +
             C17272 * C2707) *
                C284 -
            (C17278 * C3702 + C50796 * C3706 + C17277 * C2708 +
             C17272 * C2712) *
                C50610) *
               C5194) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50874 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C50663 * C50934 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C49713 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50874 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C49720) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C50610) *
              C50760 * C50626 * C50663 * C50935 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C49720 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C50874 -
           (C20083 * C3546 + C20078 * C3549 + C20082 * C2509 + C20077 * C2513 +
            C20081 * C1112 + C20076 * C1119 + C20080 * C291 + C20075 * C307) *
               C49713 -
           (C20083 * C3548 + C20078 * C3552 + C20082 * C2514 + C20077 * C2518 +
            C20081 * C1118 + C20076 * C1124 + C20080 * C308 + C20075 * C321) *
               C50610) *
              C50760 * C50626 * C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50874 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C49720 + C17329 * C50874 - C17330 * C49713 -
            C17331 * C50610) *
               C50760 * C17276) *
              C50663 * C50934 +
          (((C17510 + C17511) * C49713 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50874 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C49720) +
            (C17512 + C17513) * C50610) *
               C50760 * C17274 +
           ((C17514 + C17515) * C49713 -
            ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
            (C17516 + C17517) * C50610) *
               C50760 * C17275 +
           ((C17877 + C17876) * C49713 - (C17867 * C50874 + C17866 * C49720) +
            (C17879 + C17878) * C50610) *
               C50760 * C17276) *
              C50663 * C50935 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C49720 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C50874 -
            (C17518 + C17519) * C49713 - (C17520 + C17521) * C50610) *
               C50760 * C17274 +
           ((C17519 + C17518) * C49720 + (C17521 + C17520) * C50874 -
            (C17522 + C17523) * C49713 - (C17524 + C17525) * C50610) *
               C50760 * C17275 +
           ((C17523 + C17522) * C49720 + (C17525 + C17524) * C50874 -
            (C17278 * C1110 + C50796 * C1115 + C17277 * C293 + C17272 * C311) *
                C49713 -
            (C17278 * C1114 + C50796 * C1122 + C17277 * C312 + C17272 * C323) *
                C50610) *
               C50760 * C17276) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50874 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
               C5192 +
           ((C22223 + C22224) * C49720 + (C22225 + C22226) * C50874 -
            (C17705 + C17704) * C49713 - (C17707 + C17706) * C50610) *
               C5193 +
           (C22241 * C49720 + C22242 * C50874 - C22205 * C49713 -
            C22206 * C50610) *
               C5194) *
              C50626 * C50663 * C50934 +
          (((C17510 + C17511) * C49713 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50874 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C49720) +
            (C17512 + C17513) * C50610) *
               C5192 +
           ((C18251 + C18250) * C49713 -
            ((C22758 + C22759) * C50874 + (C22760 + C22761) * C49720) +
            (C18253 + C18252) * C50610) *
               C5193 +
           ((C22762 + C22763) * C49713 - (C23174 * C50874 + C23175 * C49720) +
            (C22768 + C22769) * C50610) *
               C5194) *
              C50626 * C50663 * C50935 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C49720 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C50874 -
            (C17518 + C17519) * C49713 - (C17520 + C17521) * C50610) *
               C5192 +
           ((C17277 * C1576 + C17272 * C1584 + C17278 * C3272 +
             C50796 * C3275) *
                C49720 +
            (C17277 * C1583 + C17272 * C1588 + C17278 * C3276 +
             C50796 * C3281) *
                C50874 -
            (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
             C17272 * C1582) *
                C49713 -
            (C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
             C17272 * C1587) *
                C50610) *
               C5193 +
           ((C17277 * C2702 + C17272 * C2705 + C17278 * C3701 +
             C50796 * C3705) *
                C49720 +
            (C17277 * C2706 + C17272 * C2711 + C17278 * C3704 +
             C50796 * C3707) *
                C50874 -
            (C17278 * C3700 + C50796 * C3703 + C17277 * C2703 +
             C17272 * C2707) *
                C49713 -
            (C17278 * C3702 + C50796 * C3706 + C17277 * C2708 +
             C17272 * C2712) *
                C50610) *
               C5194) *
              C50626 * C50663 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C50890 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C50727) *
              C50934 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C50727 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C50890) *
              C50935 +
          (((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
             C20082 * C2508 + C20077 * C2511 + C20083 * C3547 +
             C20078 * C3551) *
                C1109 +
            (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
             C20082 * C2512 + C20077 * C2517 + C20083 * C3550 +
             C20078 * C3553) *
                C50605) *
               C50760 * C50626 * C50890 -
           ((C20083 * C21203 + C20078 * C21205 + C20082 * C4198 +
             C20077 * C4201 + C20081 * C3276 + C20076 * C3281 + C20080 * C1583 +
             C20075 * C1588) *
                C50605 +
            (C20083 * C21202 + C20078 * C21204 + C20082 * C4195 +
             C20077 * C4199 + C20081 * C3272 + C20076 * C3275 + C20080 * C1576 +
             C20075 * C1584) *
                C1109) *
               C50760 * C50626 * C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C50890 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C50934 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C50727 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C50890) *
              C50935 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C50760 * C17274 +
            ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50760 *
                C17275 +
            ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) * C50760 *
                C17276) *
               C50890 -
           (((C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
              C17272 * C1586) *
                 C50605 +
             (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
              C17272 * C1580) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
              C17272 * C1587) *
                 C50605 +
             (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
              C17272 * C1582) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C3276 + C50796 * C3281 + C17277 * C1583 +
              C17272 * C1588) *
                 C50605 +
             (C17278 * C3272 + C50796 * C3275 + C17277 * C1576 +
              C17272 * C1584) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C5192 +
            ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C5193 +
            C23176 * C5194) *
               C50626 * C50890 -
           (((C22235 + C22236) * C50605 + (C22237 + C22238) * C1109) * C5194 +
            ((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C5193 +
            ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) * C5192) *
               C50626 * C50727) *
              C50934 +
          ((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C5192 +
            ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) * C5193 +
            ((C23177 + C23178) * C1109 + (C23179 + C23180) * C50605) * C5194) *
               C50626 * C50727 -
           (C23183 * C5194 +
            ((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C5193 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C5192) *
               C50626 * C50890) *
              C50935 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C5192 +
            ((C23686 + C23687) * C1109 + (C23688 + C23689) * C50605) * C5193 +
            ((C23690 + C23691) * C1109 + (C23692 + C23693) * C50605) * C5194) *
               C50626 * C50890 -
           (((C17278 * C21469 + C50796 * C21471 + C17277 * C4600 +
              C17272 * C4606) *
                 C50605 +
             (C17278 * C21468 + C50796 * C21470 + C17277 * C4594 +
              C17272 * C4602) *
                 C1109) *
                C5194 +
            ((C23693 + C23692) * C50605 + (C23691 + C23690) * C1109) * C5193 +
            ((C23689 + C23688) * C50605 + (C23687 + C23686) * C1109) * C5192) *
               C50626 * C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17277 * C122 + C17272 * C129 + C17278 * C286 +
                 C50796 * C297) *
                    C1035 +
                (C17277 * C130 + C17272 * C143 + C17278 * C296 +
                 C50796 * C315) *
                    C1030 -
                (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
                C17328 * C1037 + C17329 * C1032) *
                   C50760 * C17274 +
               ((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
                (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
                (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
                   C50760 * C17275 +
               (C17328 * C1035 + C17329 * C1030 - C17330 * C1036 -
                C17331 * C1031 + (C17325 + C17324) * C1037 +
                (C17327 + C17326) * C1032) *
                   C50760 * C17276) *
                  C50663 * C1033 +
              (((C17510 + C17511) * C1036 -
                ((C17278 * C306 + C50796 * C320 + C17277 * C296 +
                  C17272 * C315) *
                     C1030 +
                 (C17278 * C290 + C50796 * C305 + C17277 * C286 +
                  C17272 * C297) *
                     C1035) +
                (C17512 + C17513) * C1031 - C17866 * C1037 - C17867 * C1032) *
                   C50760 * C17274 +
               ((C17514 + C17515) * C1036 -
                ((C17513 + C17512) * C1030 + (C17511 + C17510) * C1035) +
                (C17516 + C17517) * C1031 - (C17876 + C17877) * C1037 -
                (C17878 + C17879) * C1032) *
                   C50760 * C17275 +
               ((C17877 + C17876) * C1036 - (C17867 * C1030 + C17866 * C1035) +
                (C17879 + C17878) * C1031 -
                (C17278 * C294 + C50796 * C313 + C17277 * C289 +
                 C17272 * C303) *
                    C1037 -
                (C17278 * C314 + C50796 * C324 + C17277 * C304 +
                 C17272 * C319) *
                    C1032) *
                   C50760 * C17276) *
                  C50663 * C50701) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17277 * C122 + C17272 * C129 + C17278 * C286 +
                 C50796 * C297) *
                    C1109 +
                (C17277 * C130 + C17272 * C143 + C17278 * C296 +
                 C50796 * C315) *
                    C50605) *
                   C50760 * C17274 +
               ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) *
                   C50760 * C17275 +
               (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
                  C50663 * C1105 -
              ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
               ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) *
                   C50760 * C17275 +
               ((C17278 * C306 + C50796 * C320 + C17277 * C296 +
                 C17272 * C315) *
                    C50605 +
                (C17278 * C290 + C50796 * C305 + C17277 * C286 +
                 C17272 * C297) *
                    C1109) *
                   C50760 * C17274) *
                  C50663 * C1106 +
              (((C17277 * C290 + C17272 * C305 + C17278 * C1113 +
                 C50796 * C1121) *
                    C1109 +
                (C17277 * C306 + C17272 * C320 + C17278 * C1120 +
                 C50796 * C1125) *
                    C50605) *
                   C50760 * C17274 +
               ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) *
                   C50760 * C17275 +
               ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) *
                   C50760 * C17276) *
                  C50663 * C1107 -
              (((C17278 * C2516 + C50796 * C2519 + C17277 * C1116 +
                 C17272 * C1123) *
                    C50605 +
                (C17278 * C2510 + C50796 * C2515 + C17277 * C1111 +
                 C17272 * C1117) *
                    C1109) *
                   C50760 * C17276 +
               ((C17278 * C2514 + C50796 * C2518 + C17277 * C1118 +
                 C17272 * C1124) *
                    C50605 +
                (C17278 * C2509 + C50796 * C2513 + C17277 * C1112 +
                 C17272 * C1119) *
                    C1109) *
                   C50760 * C17275 +
               ((C17278 * C2512 + C50796 * C2517 + C17277 * C1120 +
                 C17272 * C1125) *
                    C50605 +
                (C17278 * C2508 + C50796 * C2511 + C17277 * C1113 +
                 C17272 * C1121) *
                    C1109) *
                   C50760 * C17274) *
                  C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C459 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C460 +
           (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                 C1109 +
             (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                 C50605) *
                C50760 * C17274 +
            ((C17713 + C17712) * C1109 + (C17715 + C17714) * C50605) * C50760 *
                C17275 +
            ((C17717 + C17716) * C1109 + (C17719 + C17718) * C50605) * C50760 *
                C17276) *
               C461) *
              C1033 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C460 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C459 -
           (((C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
              C17272 * C1237) *
                 C50605 +
             (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
              C17272 * C1231) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C2708 + C50796 * C2712 + C17277 * C1232 +
              C17272 * C1238) *
                 C50605 +
             (C17278 * C2703 + C50796 * C2707 + C17277 * C1226 +
              C17272 * C1233) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C2706 + C50796 * C2711 + C17277 * C1234 +
              C17272 * C1239) *
                 C50605 +
             (C17278 * C2702 + C50796 * C2705 + C17277 * C1227 +
              C17272 * C1235) *
                 C1109) *
                C50760 * C17274) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1035 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C1030 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C1036 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C1031 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C1037 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C1032) *
              C50760 * C50626 * C50663 * C1033 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C1036 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C1030 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1035) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C1031 -
           (C20083 * C2510 + C20078 * C2515 + C20082 * C1111 + C20077 * C1117 +
            C20081 * C292 + C20076 * C309 + C20080 * C287 + C20075 * C299) *
               C1037 -
           (C20083 * C2516 + C20078 * C2519 + C20082 * C1116 + C20077 * C1123 +
            C20081 * C310 + C20076 * C322 + C20080 * C300 + C20075 * C317) *
               C1032) *
              C50760 * C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1109 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50605) *
              C50760 * C50626 * C50663 * C1105 -
          ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
            C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
               C50605 +
           (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
            C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
               C1109) *
              C50760 * C50626 * C50663 * C1106 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C1109 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C50605) *
              C50760 * C50626 * C50663 * C1107 -
          ((C20083 * C20771 + C20078 * C20773 + C20082 * C3550 +
            C20077 * C3553 + C20081 * C2512 + C20076 * C2517 + C20080 * C1120 +
            C20075 * C1125) *
               C50605 +
           (C20083 * C20770 + C20078 * C20772 + C20082 * C3547 +
            C20077 * C3551 + C20081 * C2508 + C20076 * C2511 + C20080 * C1113 +
            C20075 * C1121) *
               C1109) *
              C50760 * C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C459 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C460 +
           ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
             C20082 * C2702 + C20077 * C2705 + C20083 * C3701 +
             C20078 * C3705) *
                C1109 +
            (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
             C20082 * C2706 + C20077 * C2711 + C20083 * C3704 +
             C20078 * C3707) *
                C50605) *
               C50760 * C50626 * C461) *
              C1033 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C460 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C459 -
           ((C20083 * C20873 + C20078 * C20875 + C20082 * C3704 +
             C20077 * C3707 + C20081 * C2706 + C20076 * C2711 + C20080 * C1234 +
             C20075 * C1239) *
                C50605 +
            (C20083 * C20872 + C20078 * C20874 + C20082 * C3701 +
             C20077 * C3705 + C20081 * C2702 + C20076 * C2705 + C20080 * C1227 +
             C20075 * C1235) *
                C1109) *
               C50760 * C50626 * C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C5192 +
           ((C22223 + C22224) * C1035 + (C22225 + C22226) * C1030 -
            (C17705 + C17704) * C1036 - (C17707 + C17706) * C1031 +
            (C17708 + C17709) * C1037 + (C17710 + C17711) * C1032) *
               C5193 +
           (C22241 * C1035 + C22242 * C1030 - C22205 * C1036 - C22206 * C1031 +
            (C17717 + C17716) * C1037 + (C17719 + C17718) * C1032) *
               C5194) *
              C50626 * C50663 * C1033 +
          (((C17510 + C17511) * C1036 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C1030 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1035) +
            (C17512 + C17513) * C1031 - C17866 * C1037 - C17867 * C1032) *
               C5192 +
           ((C18251 + C18250) * C1036 -
            ((C22758 + C22759) * C1030 + (C22760 + C22761) * C1035) +
            (C18253 + C18252) * C1031 - (C18254 + C18255) * C1037 -
            (C18256 + C18257) * C1032) *
               C5193 +
           ((C22762 + C22763) * C1036 -
            ((C22764 + C22765) * C1030 + (C22766 + C22767) * C1035) +
            (C22768 + C22769) * C1031 -
            (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
             C17272 * C1231) *
                C1037 -
            (C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
             C17272 * C1237) *
                C1032) *
               C5194) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1109 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50605) *
               C5192 +
           ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C5193 +
           (C22241 * C1109 + C22242 * C50605) * C5194) *
              C50626 * C50663 * C1105 -
          (((C22764 + C22765) * C50605 + (C22766 + C22767) * C1109) * C5194 +
           ((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C5193 +
           ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                C50605 +
            (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                C1109) *
               C5192) *
              C50626 * C50663 * C1106 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C1109 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C50605) *
               C5192 +
           ((C17277 * C1576 + C17272 * C1584 + C17278 * C3272 +
             C50796 * C3275) *
                C1109 +
            (C17277 * C1583 + C17272 * C1588 + C17278 * C3276 +
             C50796 * C3281) *
                C50605) *
               C5193 +
           ((C17277 * C2702 + C17272 * C2705 + C17278 * C3701 +
             C50796 * C3705) *
                C1109 +
            (C17277 * C2706 + C17272 * C2711 + C17278 * C3704 +
             C50796 * C3707) *
                C50605) *
               C5194) *
              C50626 * C50663 * C1107 -
          (((C17278 * C20873 + C50796 * C20875 + C17277 * C3704 +
             C17272 * C3707) *
                C50605 +
            (C17278 * C20872 + C50796 * C20874 + C17277 * C3701 +
             C17272 * C3705) *
                C1109) *
               C5194 +
           ((C17278 * C4198 + C50796 * C4201 + C17277 * C3276 +
             C17272 * C3281) *
                C50605 +
            (C17278 * C4195 + C50796 * C4199 + C17277 * C3272 +
             C17272 * C3275) *
                C1109) *
               C5193 +
           ((C17278 * C2512 + C50796 * C2517 + C17277 * C1120 +
             C17272 * C1125) *
                C50605 +
            (C17278 * C2508 + C50796 * C2511 + C17277 * C1113 +
             C17272 * C1121) *
                C1109) *
               C5192) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C5192 +
            ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C5193 +
            C23176 * C5194) *
               C50626 * C459 -
           (((C22235 + C22236) * C50605 + (C22237 + C22238) * C1109) * C5194 +
            ((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C5193 +
            ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) * C5192) *
               C50626 * C460 +
           (C23176 * C5192 +
            ((C22238 + C22237) * C1109 + (C22236 + C22235) * C50605) * C5193 +
            ((C17277 * C5505 + C17272 * C5508 + C17278 * C6528 +
              C50796 * C6532) *
                 C1109 +
             (C17277 * C5509 + C17272 * C5514 + C17278 * C6531 +
              C50796 * C6534) *
                 C50605) *
                C5194) *
               C50626 * C461) *
              C1033 +
          ((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C5192 +
            ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) * C5193 +
            ((C23177 + C23178) * C1109 + (C23179 + C23180) * C50605) * C5194) *
               C50626 * C460 -
           (C23183 * C5194 +
            ((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C5193 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C5192) *
               C50626 * C459 -
           (((C17278 * C23160 + C50796 * C23162 + C17277 * C6531 +
              C17272 * C6534) *
                 C50605 +
             (C17278 * C23159 + C50796 * C23161 + C17277 * C6528 +
              C17272 * C6532) *
                 C1109) *
                C5194 +
            ((C23180 + C23179) * C50605 + (C23178 + C23177) * C1109) * C5193 +
            C23183 * C5192) *
               C50626 * C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C49720 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50874 -
            (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
             C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
                C49713 -
            (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
             C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
                C50610) *
               C50760 * C50626 * C50890 +
           ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
             C20082 * C1575 + C20077 * C1582 + C20083 * C3273 +
             C20078 * C3277) *
                C49713 -
            ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 +
              C20077 * C1588 + C20081 * C900 + C20076 * C909 + C20080 * C473 +
              C20075 * C492) *
                 C50874 +
             (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 +
              C20077 * C1584 + C20081 * C894 + C20076 * C899 + C20080 * C463 +
              C20075 * C474) *
                 C49720) +
            (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
             C20082 * C1581 + C20077 * C1587 + C20083 * C3278 +
             C20078 * C3282) *
                C50610) *
               C50760 * C50626 * C50727) *
              C1033 +
          (((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
             C20082 * C1112 + C20077 * C1119 + C20083 * C2509 +
             C20078 * C2513) *
                C49713 -
            ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 +
              C20077 * C1125 + C20081 * C306 + C20076 * C320 + C20080 * C296 +
              C20075 * C315) *
                 C50874 +
             (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 +
              C20077 * C1121 + C20081 * C290 + C20076 * C305 + C20080 * C286 +
              C20075 * C297) *
                 C49720) +
            (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
             C20082 * C1118 + C20077 * C1124 + C20083 * C2514 +
             C20078 * C2518) *
                C50610) *
               C50760 * C50626 * C50890 +
           ((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C49720 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50874 -
            (C20083 * C4194 + C20078 * C4197 + C20082 * C3273 + C20077 * C3277 +
             C20081 * C1575 + C20076 * C1582 + C20080 * C895 + C20075 * C901) *
                C49713 -
            (C20083 * C4196 + C20078 * C4200 + C20082 * C3278 + C20077 * C3282 +
             C20081 * C1581 + C20076 * C1587 + C20080 * C902 + C20075 * C910) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50874 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                C50760 * C17274 +
            ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
                C50760 * C17275 +
            (C17328 * C49720 + C17329 * C50874 - C17330 * C49713 -
             C17331 * C50610) *
                C50760 * C17276) *
               C50890 +
           (((C17704 + C17705) * C49713 -
             ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                  C50874 +
              (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                  C49720) +
             (C17706 + C17707) * C50610) *
                C50760 * C17274 +
            ((C17708 + C17709) * C49713 -
             ((C17707 + C17706) * C50874 + (C17705 + C17704) * C49720) +
             (C17710 + C17711) * C50610) *
                C50760 * C17275 +
            ((C18037 + C18036) * C49713 - (C18027 * C50874 + C18026 * C49720) +
             (C18039 + C18038) * C50610) *
                C50760 * C17276) *
               C50727) *
              C1033 +
          ((((C17510 + C17511) * C49713 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50874 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C49720) +
             (C17512 + C17513) * C50610) *
                C50760 * C17274 +
            ((C17514 + C17515) * C49713 -
             ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
             (C17516 + C17517) * C50610) *
                C50760 * C17275 +
            ((C17877 + C17876) * C49713 - (C17867 * C50874 + C17866 * C49720) +
             (C17879 + C17878) * C50610) *
                C50760 * C17276) *
               C50890 +
           (((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C49720 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50874 -
             (C18250 + C18251) * C49713 - (C18252 + C18253) * C50610) *
                C50760 * C17274 +
            ((C18251 + C18250) * C49720 + (C18253 + C18252) * C50874 -
             (C18254 + C18255) * C49713 - (C18256 + C18257) * C50610) *
                C50760 * C17275 +
            ((C18255 + C18254) * C49720 + (C18257 + C18256) * C50874 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C49713 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C50610) *
                C50760 * C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50874 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                C5192 +
            ((C22223 + C22224) * C49720 + (C22225 + C22226) * C50874 -
             (C17705 + C17704) * C49713 - (C17707 + C17706) * C50610) *
                C5193 +
            (C22241 * C49720 + C22242 * C50874 - C22205 * C49713 -
             C22206 * C50610) *
                C5194) *
               C50626 * C50890 +
           (((C17704 + C17705) * C49713 -
             ((C22226 + C22225) * C50874 + (C22224 + C22223) * C49720) +
             (C17706 + C17707) * C50610) *
                C5192 +
            ((C17713 + C17712) * C49713 -
             ((C22230 + C22229) * C50874 + (C22228 + C22227) * C49720) +
             (C17715 + C17714) * C50610) *
                C5193 +
            ((C22233 + C22234) * C49713 -
             ((C22235 + C22236) * C50874 + (C22237 + C22238) * C49720) +
             (C22239 + C22240) * C50610) *
                C5194) *
               C50626 * C50727) *
              C1033 +
          ((((C17510 + C17511) * C49713 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50874 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C49720) +
             (C17512 + C17513) * C50610) *
                C5192 +
            ((C18251 + C18250) * C49713 -
             ((C22758 + C22759) * C50874 + (C22760 + C22761) * C49720) +
             (C18253 + C18252) * C50610) *
                C5193 +
            ((C22762 + C22763) * C49713 - (C23174 * C50874 + C23175 * C49720) +
             (C22768 + C22769) * C50610) *
                C5194) *
               C50626 * C50890 +
           (((C22761 + C22760) * C49720 + (C22759 + C22758) * C50874 -
             (C18250 + C18251) * C49713 - (C18252 + C18253) * C50610) *
                C5192 +
            ((C22767 + C22766) * C49720 + (C22765 + C22764) * C50874 -
             (C22763 + C22762) * C49713 - (C22769 + C22768) * C50610) *
                C5193 +
            ((C23177 + C23178) * C49720 + (C23179 + C23180) * C50874 -
             (C17278 * C4592 + C50796 * C4598 + C17277 * C4593 +
              C17272 * C4599) *
                 C49713 -
             (C17278 * C4596 + C50796 * C4604 + C17277 * C4597 +
              C17272 * C4605) *
                 C50610) *
                C5194) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1109 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50605) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
               C17275 +
           (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
              C50663 * C1105 -
          ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
           ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
               C17275 +
           ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                C50605 +
            (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                C1109) *
               C50760 * C17274) *
              C50663 * C1106 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C1109 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C50605) *
               C50760 * C17274 +
           ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50760 *
               C17275 +
           ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) * C50760 *
               C17276) *
              C50663 * C1107 -
          (((C17278 * C2516 + C50796 * C2519 + C17277 * C1116 +
             C17272 * C1123) *
                C50605 +
            (C17278 * C2510 + C50796 * C2515 + C17277 * C1111 +
             C17272 * C1117) *
                C1109) *
               C50760 * C17276 +
           ((C17278 * C2514 + C50796 * C2518 + C17277 * C1118 +
             C17272 * C1124) *
                C50605 +
            (C17278 * C2509 + C50796 * C2513 + C17277 * C1112 +
             C17272 * C1119) *
                C1109) *
               C50760 * C17275 +
           ((C17278 * C2512 + C50796 * C2517 + C17277 * C1120 +
             C17272 * C1125) *
                C50605 +
            (C17278 * C2508 + C50796 * C2511 + C17277 * C1113 +
             C17272 * C1121) *
                C1109) *
               C50760 * C17274) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
            (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
            (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
               C50760 * C17275 +
           (C17328 * C1035 + C17329 * C1030 - C17330 * C1036 - C17331 * C1031 +
            (C17325 + C17324) * C1037 + (C17327 + C17326) * C1032) *
               C50760 * C17276) *
              C50663 * C1033 +
          (((C17510 + C17511) * C1036 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C1030 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1035) +
            (C17512 + C17513) * C1031 - C17866 * C1037 - C17867 * C1032) *
               C50760 * C17274 +
           ((C17514 + C17515) * C1036 -
            ((C17513 + C17512) * C1030 + (C17511 + C17510) * C1035) +
            (C17516 + C17517) * C1031 - (C17876 + C17877) * C1037 -
            (C17878 + C17879) * C1032) *
               C50760 * C17275 +
           ((C17877 + C17876) * C1036 - (C17867 * C1030 + C17866 * C1035) +
            (C17879 + C17878) * C1031 -
            (C17278 * C294 + C50796 * C313 + C17277 * C289 + C17272 * C303) *
                C1037 -
            (C17278 * C314 + C50796 * C324 + C17277 * C304 + C17272 * C319) *
                C1032) *
               C50760 * C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1035 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C1030 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C1036 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C1031 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C1037 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C1032) *
              C50760 * C50626 * C50663 * C1033 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C1036 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C1030 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1035) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C1031 -
           (C20083 * C2510 + C20078 * C2515 + C20082 * C1111 + C20077 * C1117 +
            C20081 * C292 + C20076 * C309 + C20080 * C287 + C20075 * C299) *
               C1037 -
           (C20083 * C2516 + C20078 * C2519 + C20082 * C1116 + C20077 * C1123 +
            C20081 * C310 + C20076 * C322 + C20080 * C300 + C20075 * C317) *
               C1032) *
              C50760 * C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1109 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50605) *
              C50760 * C50626 * C50663 * C1105 -
          ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
            C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
               C50605 +
           (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
            C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
               C1109) *
              C50760 * C50626 * C50663 * C1106 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C1109 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C50605) *
              C50760 * C50626 * C50663 * C1107 -
          ((C20083 * C20771 + C20078 * C20773 + C20082 * C3550 +
            C20077 * C3553 + C20081 * C2512 + C20076 * C2517 + C20080 * C1120 +
            C20075 * C1125) *
               C50605 +
           (C20083 * C20770 + C20078 * C20772 + C20082 * C3547 +
            C20077 * C3551 + C20081 * C2508 + C20076 * C2511 + C20080 * C1113 +
            C20075 * C1121) *
               C1109) *
              C50760 * C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C5192 +
           ((C22223 + C22224) * C1035 + (C22225 + C22226) * C1030 -
            (C17705 + C17704) * C1036 - (C17707 + C17706) * C1031 +
            (C17708 + C17709) * C1037 + (C17710 + C17711) * C1032) *
               C5193 +
           (C22241 * C1035 + C22242 * C1030 - C22205 * C1036 - C22206 * C1031 +
            (C17717 + C17716) * C1037 + (C17719 + C17718) * C1032) *
               C5194) *
              C50626 * C50663 * C1033 +
          (((C17510 + C17511) * C1036 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C1030 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1035) +
            (C17512 + C17513) * C1031 - C17866 * C1037 - C17867 * C1032) *
               C5192 +
           ((C18251 + C18250) * C1036 -
            ((C22758 + C22759) * C1030 + (C22760 + C22761) * C1035) +
            (C18253 + C18252) * C1031 - (C18254 + C18255) * C1037 -
            (C18256 + C18257) * C1032) *
               C5193 +
           ((C22762 + C22763) * C1036 -
            ((C22764 + C22765) * C1030 + (C22766 + C22767) * C1035) +
            (C22768 + C22769) * C1031 -
            (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
             C17272 * C1231) *
                C1037 -
            (C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
             C17272 * C1237) *
                C1032) *
               C5194) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1109 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50605) *
               C5192 +
           ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C5193 +
           (C22241 * C1109 + C22242 * C50605) * C5194) *
              C50626 * C50663 * C1105 -
          (((C22764 + C22765) * C50605 + (C22766 + C22767) * C1109) * C5194 +
           ((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C5193 +
           ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                C50605 +
            (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                C1109) *
               C5192) *
              C50626 * C50663 * C1106 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C1109 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C50605) *
               C5192 +
           ((C17277 * C1576 + C17272 * C1584 + C17278 * C3272 +
             C50796 * C3275) *
                C1109 +
            (C17277 * C1583 + C17272 * C1588 + C17278 * C3276 +
             C50796 * C3281) *
                C50605) *
               C5193 +
           ((C17277 * C2702 + C17272 * C2705 + C17278 * C3701 +
             C50796 * C3705) *
                C1109 +
            (C17277 * C2706 + C17272 * C2711 + C17278 * C3704 +
             C50796 * C3707) *
                C50605) *
               C5194) *
              C50626 * C50663 * C1107 -
          (((C17278 * C20873 + C50796 * C20875 + C17277 * C3704 +
             C17272 * C3707) *
                C50605 +
            (C17278 * C20872 + C50796 * C20874 + C17277 * C3701 +
             C17272 * C3705) *
                C1109) *
               C5194 +
           ((C17278 * C4198 + C50796 * C4201 + C17277 * C3276 +
             C17272 * C3281) *
                C50605 +
            (C17278 * C4195 + C50796 * C4199 + C17277 * C3272 +
             C17272 * C3275) *
                C1109) *
               C5193 +
           ((C17278 * C2512 + C50796 * C2517 + C17277 * C1120 +
             C17272 * C1125) *
                C50605 +
            (C17278 * C2508 + C50796 * C2511 + C17277 * C1113 +
             C17272 * C1121) *
                C1109) *
               C5192) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C49720 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50874 -
            (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
             C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
                C49713 -
            (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
             C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
                C50610) *
               C50760 * C50626 * C1687 +
           ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
             C20082 * C1575 + C20077 * C1582 + C20083 * C3273 +
             C20078 * C3277) *
                C49713 -
            ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 +
              C20077 * C1588 + C20081 * C900 + C20076 * C909 + C20080 * C473 +
              C20075 * C492) *
                 C50874 +
             (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 +
              C20077 * C1584 + C20081 * C894 + C20076 * C899 + C20080 * C463 +
              C20075 * C474) *
                 C49720) +
            (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
             C20082 * C1581 + C20077 * C1587 + C20083 * C3278 +
             C20078 * C3282) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50889 +
          (((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
             C20082 * C1112 + C20077 * C1119 + C20083 * C2509 +
             C20078 * C2513) *
                C49713 -
            ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 +
              C20077 * C1125 + C20081 * C306 + C20076 * C320 + C20080 * C296 +
              C20075 * C315) *
                 C50874 +
             (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 +
              C20077 * C1121 + C20081 * C290 + C20076 * C305 + C20080 * C286 +
              C20075 * C297) *
                 C49720) +
            (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
             C20082 * C1118 + C20077 * C1124 + C20083 * C2514 +
             C20078 * C2518) *
                C50610) *
               C50760 * C50626 * C1687 +
           ((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C49720 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50874 -
            (C20083 * C4194 + C20078 * C4197 + C20082 * C3273 + C20077 * C3277 +
             C20081 * C1575 + C20076 * C1582 + C20080 * C895 + C20075 * C901) *
                C49713 -
            (C20083 * C4196 + C20078 * C4200 + C20082 * C3278 + C20077 * C3282 +
             C20081 * C1581 + C20076 * C1587 + C20080 * C902 + C20075 * C910) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50874 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                C50760 * C17274 +
            ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
                C50760 * C17275 +
            (C17328 * C49720 + C17329 * C50874 - C17330 * C49713 -
             C17331 * C50610) *
                C50760 * C17276) *
               C1687 +
           (((C17704 + C17705) * C49713 -
             ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                  C50874 +
              (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                  C49720) +
             (C17706 + C17707) * C50610) *
                C50760 * C17274 +
            ((C17708 + C17709) * C49713 -
             ((C17707 + C17706) * C50874 + (C17705 + C17704) * C49720) +
             (C17710 + C17711) * C50610) *
                C50760 * C17275 +
            ((C18037 + C18036) * C49713 - (C18027 * C50874 + C18026 * C49720) +
             (C18039 + C18038) * C50610) *
                C50760 * C17276) *
               C50727) *
              C50889 +
          ((((C17510 + C17511) * C49713 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50874 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C49720) +
             (C17512 + C17513) * C50610) *
                C50760 * C17274 +
            ((C17514 + C17515) * C49713 -
             ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
             (C17516 + C17517) * C50610) *
                C50760 * C17275 +
            ((C17877 + C17876) * C49713 - (C17867 * C50874 + C17866 * C49720) +
             (C17879 + C17878) * C50610) *
                C50760 * C17276) *
               C1687 +
           (((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C49720 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50874 -
             (C18250 + C18251) * C49713 - (C18252 + C18253) * C50610) *
                C50760 * C17274 +
            ((C18251 + C18250) * C49720 + (C18253 + C18252) * C50874 -
             (C18254 + C18255) * C49713 - (C18256 + C18257) * C50610) *
                C50760 * C17275 +
            ((C18255 + C18254) * C49720 + (C18257 + C18256) * C50874 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C49713 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C50610) *
                C50760 * C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50874 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                C5192 +
            ((C22223 + C22224) * C49720 + (C22225 + C22226) * C50874 -
             (C17705 + C17704) * C49713 - (C17707 + C17706) * C50610) *
                C5193 +
            (C22241 * C49720 + C22242 * C50874 - C22205 * C49713 -
             C22206 * C50610) *
                C5194) *
               C50626 * C1687 +
           (((C17704 + C17705) * C49713 -
             ((C22226 + C22225) * C50874 + (C22224 + C22223) * C49720) +
             (C17706 + C17707) * C50610) *
                C5192 +
            ((C17713 + C17712) * C49713 -
             ((C22230 + C22229) * C50874 + (C22228 + C22227) * C49720) +
             (C17715 + C17714) * C50610) *
                C5193 +
            ((C22233 + C22234) * C49713 - (C24088 * C50874 + C24089 * C49720) +
             (C22239 + C22240) * C50610) *
                C5194) *
               C50626 * C50727) *
              C50889 +
          ((((C17510 + C17511) * C49713 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50874 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C49720) +
             (C17512 + C17513) * C50610) *
                C5192 +
            ((C18251 + C18250) * C49713 -
             ((C22758 + C22759) * C50874 + (C22760 + C22761) * C49720) +
             (C18253 + C18252) * C50610) *
                C5193 +
            ((C22762 + C22763) * C49713 - (C23174 * C50874 + C23175 * C49720) +
             (C22768 + C22769) * C50610) *
                C5194) *
               C50626 * C1687 +
           (((C22761 + C22760) * C49720 + (C22759 + C22758) * C50874 -
             (C18250 + C18251) * C49713 - (C18252 + C18253) * C50610) *
                C5192 +
            ((C22767 + C22766) * C49720 + (C22765 + C22764) * C50874 -
             (C22763 + C22762) * C49713 - (C22769 + C22768) * C50610) *
                C5193 +
            ((C23177 + C23178) * C49720 + (C23179 + C23180) * C50874 -
             (C17278 * C4592 + C50796 * C4598 + C17277 * C4593 +
              C17272 * C4599) *
                 C49713 -
             (C17278 * C4596 + C50796 * C4604 + C17277 * C4597 +
              C17272 * C4605) *
                 C50610) *
                C5194) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C50936 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C50937 +
           ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
             C20082 * C2702 + C20077 * C2705 + C20083 * C3701 +
             C20078 * C3705) *
                C1109 +
            (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
             C20082 * C2706 + C20077 * C2711 + C20083 * C3704 +
             C20078 * C3707) *
                C50605) *
               C50760 * C50626 * C2103) *
              C50889 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C50937 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C50936 -
           ((C20083 * C20873 + C20078 * C20875 + C20082 * C3704 +
             C20077 * C3707 + C20081 * C2706 + C20076 * C2711 + C20080 * C1234 +
             C20075 * C1239) *
                C50605 +
            (C20083 * C20872 + C20078 * C20874 + C20082 * C3701 +
             C20077 * C3705 + C20081 * C2702 + C20076 * C2705 + C20080 * C1227 +
             C20075 * C1235) *
                C1109) *
               C50760 * C50626 * C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C50936 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C50937 +
           (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                 C1109 +
             (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                 C50605) *
                C50760 * C17274 +
            ((C17713 + C17712) * C1109 + (C17715 + C17714) * C50605) * C50760 *
                C17275 +
            ((C17717 + C17716) * C1109 + (C17719 + C17718) * C50605) * C50760 *
                C17276) *
               C2103) *
              C50889 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C50937 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C50936 -
           (((C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
              C17272 * C1237) *
                 C50605 +
             (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
              C17272 * C1231) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C2708 + C50796 * C2712 + C17277 * C1232 +
              C17272 * C1238) *
                 C50605 +
             (C17278 * C2703 + C50796 * C2707 + C17277 * C1226 +
              C17272 * C1233) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C2706 + C50796 * C2711 + C17277 * C1234 +
              C17272 * C1239) *
                 C50605 +
             (C17278 * C2702 + C50796 * C2705 + C17277 * C1227 +
              C17272 * C1235) *
                 C1109) *
                C50760 * C17274) *
               C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C5192 +
            ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C5193 +
            C23176 * C5194) *
               C50626 * C50936 -
           (C24104 * C5194 +
            ((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C5193 +
            ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) * C5192) *
               C50626 * C50937 +
           (C23176 * C5192 +
            ((C22238 + C22237) * C1109 + (C22236 + C22235) * C50605) * C5193 +
            ((C24100 + C24101) * C1109 + (C24102 + C24103) * C50605) * C5194) *
               C50626 * C2103) *
              C50889 +
          ((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C5192 +
            ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) * C5193 +
            ((C23177 + C23178) * C1109 + (C23179 + C23180) * C50605) * C5194) *
               C50626 * C50937 -
           (C23183 * C5194 +
            ((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C5193 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C5192) *
               C50626 * C50936 -
           (((C17278 * C23160 + C50796 * C23162 + C17277 * C6531 +
              C17272 * C6534) *
                 C50605 +
             (C17278 * C23159 + C50796 * C23161 + C17277 * C6528 +
              C17272 * C6532) *
                 C1109) *
                C5194 +
            ((C23180 + C23179) * C50605 + (C23178 + C23177) * C1109) * C5193 +
            C23183 * C5192) *
               C50626 * C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17277 * C122 + C17272 * C129 + C17278 * C286 +
                 C50796 * C297) *
                    C1035 +
                (C17277 * C130 + C17272 * C143 + C17278 * C296 +
                 C50796 * C315) *
                    C1030 -
                (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
                C17328 * C1037 + C17329 * C1032) *
                   C50760 * C17274 +
               ((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
                (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
                (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
                   C50760 * C17275 +
               (C17328 * C1035 + C17329 * C1030 - C17330 * C1036 -
                C17331 * C1031 + (C17325 + C17324) * C1037 +
                (C17327 + C17326) * C1032) *
                   C50760 * C17276) *
                  C1687 +
              (((C17704 + C17705) * C1036 -
                ((C17278 * C900 + C50796 * C909 + C17277 * C473 +
                  C17272 * C492) *
                     C1030 +
                 (C17278 * C894 + C50796 * C899 + C17277 * C463 +
                  C17272 * C474) *
                     C1035) +
                (C17706 + C17707) * C1031 - C18026 * C1037 - C18027 * C1032) *
                   C50760 * C17274 +
               ((C17708 + C17709) * C1036 -
                ((C17707 + C17706) * C1030 + (C17705 + C17704) * C1035) +
                (C17710 + C17711) * C1031 - (C18036 + C18037) * C1037 -
                (C18038 + C18039) * C1032) *
                   C50760 * C17275 +
               ((C18037 + C18036) * C1036 - (C18027 * C1030 + C18026 * C1035) +
                (C18039 + C18038) * C1031 -
                (C17278 * C898 + C50796 * C907 + C17277 * C466 +
                 C17272 * C480) *
                    C1037 -
                (C17278 * C908 + C50796 * C913 + C17277 * C481 +
                 C17272 * C496) *
                    C1032) *
                   C50760 * C17276) *
                  C50727) *
             C50651 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C17277 * C122 + C17272 * C129 + C17278 * C286 +
                  C50796 * C297) *
                     C1109 +
                 (C17277 * C130 + C17272 * C143 + C17278 * C296 +
                  C50796 * C315) *
                     C50605) *
                    C50760 * C17274 +
                ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) *
                    C50760 * C17275 +
                (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
                   C1687 -
               ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
                ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) *
                    C50760 * C17275 +
                ((C17278 * C900 + C50796 * C909 + C17277 * C473 +
                  C17272 * C492) *
                     C50605 +
                 (C17278 * C894 + C50796 * C899 + C17277 * C463 +
                  C17272 * C474) *
                     C1109) *
                    C50760 * C17274) *
                   C50727) *
                  C280 +
              ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 +
                  C50796 * C1584) *
                     C1109 +
                 (C17277 * C900 + C17272 * C909 + C17278 * C1583 +
                  C50796 * C1588) *
                     C50605) *
                    C50760 * C17274 +
                ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) *
                    C50760 * C17275 +
                ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) *
                    C50760 * C17276) *
                   C50727 -
               ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
                ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) *
                    C50760 * C17275 +
                ((C17278 * C306 + C50796 * C320 + C17277 * C296 +
                  C17272 * C315) *
                     C50605 +
                 (C17278 * C290 + C50796 * C305 + C17277 * C286 +
                  C17272 * C297) *
                     C1109) *
                    C50760 * C17274) *
                   C1687) *
                  C281 +
              ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 +
                  C50796 * C1121) *
                     C1109 +
                 (C17277 * C306 + C17272 * C320 + C17278 * C1120 +
                  C50796 * C1125) *
                     C50605) *
                    C50760 * C17274 +
                ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) *
                    C50760 * C17275 +
                ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) *
                    C50760 * C17276) *
                   C1687 -
               (((C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
                  C17272 * C1586) *
                     C50605 +
                 (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
                  C17272 * C1580) *
                     C1109) *
                    C50760 * C17276 +
                ((C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
                  C17272 * C1587) *
                     C50605 +
                 (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
                  C17272 * C1582) *
                     C1109) *
                    C50760 * C17275 +
                ((C17278 * C3276 + C50796 * C3281 + C17277 * C1583 +
                  C17272 * C1588) *
                     C50605 +
                 (C17278 * C3272 + C50796 * C3275 + C17277 * C1576 +
                  C17272 * C1584) *
                     C1109) *
                    C50760 * C17274) *
                   C50727) *
                  C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1109 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50605) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
               C17275 +
           (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
              C1853 -
          ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
           ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
               C17275 +
           ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                C50605 +
            (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                C1109) *
               C50760 * C17274) *
              C1854 +
          (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                C1109 +
            (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                C50605) *
               C50760 * C17274 +
           ((C17713 + C17712) * C1109 + (C17715 + C17714) * C50605) * C50760 *
               C17275 +
           ((C17717 + C17716) * C1109 + (C17719 + C17718) * C50605) * C50760 *
               C17276) *
              C1855 -
          (((C17278 * C6101 + C50796 * C6102 + C17277 * C1863 +
             C17272 * C1870) *
                C50605 +
            (C17278 * C6099 + C50796 * C6100 + C17277 * C1858 +
             C17272 * C1864) *
                C1109) *
               C50760 * C17276 +
           ((C17278 * C4597 + C50796 * C4605 + C17277 * C1865 +
             C17272 * C1871) *
                C50605 +
            (C17278 * C4593 + C50796 * C4599 + C17277 * C1859 +
             C17272 * C1866) *
                C1109) *
               C50760 * C17275 +
           ((C17278 * C4601 + C50796 * C4607 + C17277 * C1867 +
             C17272 * C1872) *
                C50605 +
            (C17278 * C4595 + C50796 * C4603 + C17277 * C1860 +
             C17272 * C1868) *
                C1109) *
               C50760 * C17274) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1035 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C1030 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C1036 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C1031 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C1037 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C1032) *
              C50760 * C50626 * C1687 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C1036 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C1030 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1035) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C1031 -
           (C20083 * C3274 + C20078 * C3279 + C20082 * C1574 + C20077 * C1580 +
            C20081 * C896 + C20076 * C903 + C20080 * C464 + C20075 * C476) *
               C1037 -
           (C20083 * C3280 + C20078 * C3283 + C20082 * C1579 + C20077 * C1586 +
            C20081 * C904 + C20076 * C911 + C20080 * C477 + C20075 * C494) *
               C1032) *
              C50760 * C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C1687 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C50727) *
              C280 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C50727 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C1687) *
              C281 +
          (((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
             C20082 * C2508 + C20077 * C2511 + C20083 * C3547 +
             C20078 * C3551) *
                C1109 +
            (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
             C20082 * C2512 + C20077 * C2517 + C20083 * C3550 +
             C20078 * C3553) *
                C50605) *
               C50760 * C50626 * C1687 -
           ((C20083 * C21203 + C20078 * C21205 + C20082 * C4198 +
             C20077 * C4201 + C20081 * C3276 + C20076 * C3281 + C20080 * C1583 +
             C20075 * C1588) *
                C50605 +
            (C20083 * C21202 + C20078 * C21204 + C20082 * C4195 +
             C20077 * C4199 + C20081 * C3272 + C20076 * C3275 + C20080 * C1576 +
             C20075 * C1584) *
                C1109) *
               C50760 * C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1109 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50605) *
              C50760 * C50626 * C1853 -
          ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
            C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
               C50605 +
           (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
            C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
               C1109) *
              C50760 * C50626 * C1854 +
          ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
            C20082 * C2702 + C20077 * C2705 + C20083 * C3701 + C20078 * C3705) *
               C1109 +
           (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
            C20082 * C2706 + C20077 * C2711 + C20083 * C3704 + C20078 * C3707) *
               C50605) *
              C50760 * C50626 * C1855 -
          ((C20083 * C21469 + C20078 * C21471 + C20082 * C4600 +
            C20077 * C4606 + C20081 * C4601 + C20076 * C4607 + C20080 * C1867 +
            C20075 * C1872) *
               C50605 +
           (C20083 * C21468 + C20078 * C21470 + C20082 * C4594 +
            C20077 * C4602 + C20081 * C4595 + C20076 * C4603 + C20080 * C1860 +
            C20075 * C1868) *
               C1109) *
              C50760 * C50626 * C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C5192 +
           ((C22223 + C22224) * C1035 + (C22225 + C22226) * C1030 -
            (C17705 + C17704) * C1036 - (C17707 + C17706) * C1031 +
            (C17708 + C17709) * C1037 + (C17710 + C17711) * C1032) *
               C5193 +
           (C22241 * C1035 + C22242 * C1030 - C22205 * C1036 - C22206 * C1031 +
            (C17717 + C17716) * C1037 + (C17719 + C17718) * C1032) *
               C5194) *
              C50626 * C1687 +
          (((C17704 + C17705) * C1036 -
            ((C22226 + C22225) * C1030 + (C22224 + C22223) * C1035) +
            (C17706 + C17707) * C1031 - C18026 * C1037 - C18027 * C1032) *
               C5192 +
           ((C17713 + C17712) * C1036 -
            ((C22230 + C22229) * C1030 + (C22228 + C22227) * C1035) +
            (C17715 + C17714) * C1031 - (C17716 + C17717) * C1037 -
            (C17718 + C17719) * C1032) *
               C5193 +
           ((C22233 + C22234) * C1036 -
            ((C22235 + C22236) * C1030 + (C22237 + C22238) * C1035) +
            (C22239 + C22240) * C1031 -
            (C17278 * C6099 + C50796 * C6100 + C17277 * C1858 +
             C17272 * C1864) *
                C1037 -
            (C17278 * C6101 + C50796 * C6102 + C17277 * C1863 +
             C17272 * C1870) *
                C1032) *
               C5194) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C5192 +
            ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C5193 +
            C23176 * C5194) *
               C50626 * C1687 -
           (((C22235 + C22236) * C50605 + (C22237 + C22238) * C1109) * C5194 +
            ((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C5193 +
            ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) * C5192) *
               C50626 * C50727) *
              C280 +
          ((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C5192 +
            ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) * C5193 +
            ((C23177 + C23178) * C1109 + (C23179 + C23180) * C50605) * C5194) *
               C50626 * C50727 -
           (C23183 * C5194 +
            ((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C5193 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C5192) *
               C50626 * C1687) *
              C281 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C5192 +
            ((C23686 + C23687) * C1109 + (C23688 + C23689) * C50605) * C5193 +
            ((C23690 + C23691) * C1109 + (C23692 + C23693) * C50605) * C5194) *
               C50626 * C1687 -
           (((C17278 * C21469 + C50796 * C21471 + C17277 * C4600 +
              C17272 * C4606) *
                 C50605 +
             (C17278 * C21468 + C50796 * C21470 + C17277 * C4594 +
              C17272 * C4602) *
                 C1109) *
                C5194 +
            ((C23693 + C23692) * C50605 + (C23691 + C23690) * C1109) * C5193 +
            ((C23689 + C23688) * C50605 + (C23687 + C23686) * C1109) * C5192) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1109 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50605) *
               C5192 +
           ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C5193 +
           C23176 * C5194) *
              C50626 * C1853 -
          (C24104 * C5194 +
           ((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C5193 +
           ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) * C5192) *
              C50626 * C1854 +
          (C23176 * C5192 +
           ((C22238 + C22237) * C1109 + (C22236 + C22235) * C50605) * C5193 +
           ((C24100 + C24101) * C1109 + (C24102 + C24103) * C50605) * C5194) *
              C50626 * C1855 -
          (((C17278 * C24084 + C50796 * C24086 + C17277 * C7525 +
             C17272 * C7528) *
                C50605 +
            (C17278 * C24083 + C50796 * C24085 + C17277 * C7522 +
             C17272 * C7526) *
                C1109) *
               C5194 +
           ((C24103 + C24102) * C50605 + (C24101 + C24100) * C1109) * C5193 +
           C24104 * C5192) *
              C50626 * C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50874 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C50936 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C49713 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50874 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C49720) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C50610) *
              C50760 * C50626 * C50937 +
          ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
            C20082 * C2702 + C20077 * C2705 + C20083 * C3701 + C20078 * C3705) *
               C49720 +
           (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
            C20082 * C2706 + C20077 * C2711 + C20083 * C3704 + C20078 * C3707) *
               C50874 -
           (C20083 * C3700 + C20078 * C3703 + C20082 * C2703 + C20077 * C2707 +
            C20081 * C1226 + C20076 * C1233 + C20080 * C468 + C20075 * C484) *
               C49713 -
           (C20083 * C3702 + C20078 * C3706 + C20082 * C2708 + C20077 * C2712 +
            C20081 * C1232 + C20076 * C1238 + C20080 * C485 + C20075 * C498) *
               C50610) *
              C50760 * C50626 * C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50874 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C49720 + C17329 * C50874 - C17330 * C49713 -
            C17331 * C50610) *
               C50760 * C17276) *
              C50936 +
          (((C17704 + C17705) * C49713 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50874 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C49720) +
            (C17706 + C17707) * C50610) *
               C50760 * C17274 +
           ((C17708 + C17709) * C49713 -
            ((C17707 + C17706) * C50874 + (C17705 + C17704) * C49720) +
            (C17710 + C17711) * C50610) *
               C50760 * C17275 +
           ((C18037 + C18036) * C49713 - (C18027 * C50874 + C18026 * C49720) +
            (C18039 + C18038) * C50610) *
               C50760 * C17276) *
              C50937 +
          (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                C49720 +
            (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                C50874 -
            (C17712 + C17713) * C49713 - (C17714 + C17715) * C50610) *
               C50760 * C17274 +
           ((C17713 + C17712) * C49720 + (C17715 + C17714) * C50874 -
            (C17716 + C17717) * C49713 - (C17718 + C17719) * C50610) *
               C50760 * C17275 +
           ((C17717 + C17716) * C49720 + (C17719 + C17718) * C50874 -
            (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
                C49713 -
            (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
                C50610) *
               C50760 * C17276) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50874 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
               C5192 +
           ((C22223 + C22224) * C49720 + (C22225 + C22226) * C50874 -
            (C17705 + C17704) * C49713 - (C17707 + C17706) * C50610) *
               C5193 +
           C24451 * C5194) *
              C50626 * C50936 +
          (((C17704 + C17705) * C49713 -
            ((C22226 + C22225) * C50874 + (C22224 + C22223) * C49720) +
            (C17706 + C17707) * C50610) *
               C5192 +
           ((C17713 + C17712) * C49713 -
            ((C22230 + C22229) * C50874 + (C22228 + C22227) * C49720) +
            (C17715 + C17714) * C50610) *
               C5193 +
           ((C22233 + C22234) * C49713 - (C24088 * C50874 + C24089 * C49720) +
            (C22239 + C22240) * C50610) *
               C5194) *
              C50626 * C50937 +
          (C24451 * C5192 +
           ((C22238 + C22237) * C49720 + (C22236 + C22235) * C50874 -
            (C22234 + C22233) * C49713 - (C22240 + C22239) * C50610) *
               C5193 +
           ((C24100 + C24101) * C49720 + (C24102 + C24103) * C50874 -
            (C17278 * C6527 + C50796 * C6530 + C17277 * C5506 +
             C17272 * C5510) *
                C49713 -
            (C17278 * C6529 + C50796 * C6533 + C17277 * C5511 +
             C17272 * C5515) *
                C50610) *
               C5194) *
              C50626 * C2103) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C1687 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C280 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C50727 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C1687) *
              C281 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C50760 * C17274 +
            ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50760 *
                C17275 +
            ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) * C50760 *
                C17276) *
               C1687 -
           (((C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
              C17272 * C1586) *
                 C50605 +
             (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
              C17272 * C1580) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
              C17272 * C1587) *
                 C50605 +
             (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
              C17272 * C1582) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C3276 + C50796 * C3281 + C17277 * C1583 +
              C17272 * C1588) *
                 C50605 +
             (C17278 * C3272 + C50796 * C3275 + C17277 * C1576 +
              C17272 * C1584) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
            (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
            (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
               C50760 * C17275 +
           (C17328 * C1035 + C17329 * C1030 - C17330 * C1036 - C17331 * C1031 +
            (C17325 + C17324) * C1037 + (C17327 + C17326) * C1032) *
               C50760 * C17276) *
              C1687 +
          (((C17704 + C17705) * C1036 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C1030 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1035) +
            (C17706 + C17707) * C1031 - C18026 * C1037 - C18027 * C1032) *
               C50760 * C17274 +
           ((C17708 + C17709) * C1036 -
            ((C17707 + C17706) * C1030 + (C17705 + C17704) * C1035) +
            (C17710 + C17711) * C1031 - (C18036 + C18037) * C1037 -
            (C18038 + C18039) * C1032) *
               C50760 * C17275 +
           ((C18037 + C18036) * C1036 - (C18027 * C1030 + C18026 * C1035) +
            (C18039 + C18038) * C1031 -
            (C17278 * C898 + C50796 * C907 + C17277 * C466 + C17272 * C480) *
                C1037 -
            (C17278 * C908 + C50796 * C913 + C17277 * C481 + C17272 * C496) *
                C1032) *
               C50760 * C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1035 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C1030 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C1036 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C1031 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C1037 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C1032) *
              C50760 * C50626 * C1687 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C1036 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C1030 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1035) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C1031 -
           (C20083 * C3274 + C20078 * C3279 + C20082 * C1574 + C20077 * C1580 +
            C20081 * C896 + C20076 * C903 + C20080 * C464 + C20075 * C476) *
               C1037 -
           (C20083 * C3280 + C20078 * C3283 + C20082 * C1579 + C20077 * C1586 +
            C20081 * C904 + C20076 * C911 + C20080 * C477 + C20075 * C494) *
               C1032) *
              C50760 * C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C1687 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C50727) *
              C280 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C50727 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C1687) *
              C281 +
          (((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
             C20082 * C2508 + C20077 * C2511 + C20083 * C3547 +
             C20078 * C3551) *
                C1109 +
            (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
             C20082 * C2512 + C20077 * C2517 + C20083 * C3550 +
             C20078 * C3553) *
                C50605) *
               C50760 * C50626 * C1687 -
           ((C20083 * C21203 + C20078 * C21205 + C20082 * C4198 +
             C20077 * C4201 + C20081 * C3276 + C20076 * C3281 + C20080 * C1583 +
             C20075 * C1588) *
                C50605 +
            (C20083 * C21202 + C20078 * C21204 + C20082 * C4195 +
             C20077 * C4199 + C20081 * C3272 + C20076 * C3275 + C20080 * C1576 +
             C20075 * C1584) *
                C1109) *
               C50760 * C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C5192 +
           ((C22223 + C22224) * C1035 + (C22225 + C22226) * C1030 -
            (C17705 + C17704) * C1036 - (C17707 + C17706) * C1031 +
            (C17708 + C17709) * C1037 + (C17710 + C17711) * C1032) *
               C5193 +
           (C22241 * C1035 + C22242 * C1030 - C22205 * C1036 - C22206 * C1031 +
            (C17717 + C17716) * C1037 + (C17719 + C17718) * C1032) *
               C5194) *
              C50626 * C1687 +
          (((C17704 + C17705) * C1036 -
            ((C22226 + C22225) * C1030 + (C22224 + C22223) * C1035) +
            (C17706 + C17707) * C1031 - C18026 * C1037 - C18027 * C1032) *
               C5192 +
           ((C17713 + C17712) * C1036 -
            ((C22230 + C22229) * C1030 + (C22228 + C22227) * C1035) +
            (C17715 + C17714) * C1031 - (C17716 + C17717) * C1037 -
            (C17718 + C17719) * C1032) *
               C5193 +
           ((C22233 + C22234) * C1036 -
            ((C22235 + C22236) * C1030 + (C22237 + C22238) * C1035) +
            (C22239 + C22240) * C1031 -
            (C17278 * C6099 + C50796 * C6100 + C17277 * C1858 +
             C17272 * C1864) *
                C1037 -
            (C17278 * C6101 + C50796 * C6102 + C17277 * C1863 +
             C17272 * C1870) *
                C1032) *
               C5194) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C5192 +
            ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C5193 +
            C23176 * C5194) *
               C50626 * C1687 -
           (((C22235 + C22236) * C50605 + (C22237 + C22238) * C1109) * C5194 +
            ((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C5193 +
            ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) * C5192) *
               C50626 * C50727) *
              C280 +
          ((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C5192 +
            ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) * C5193 +
            ((C23177 + C23178) * C1109 + (C23179 + C23180) * C50605) * C5194) *
               C50626 * C50727 -
           (C23183 * C5194 +
            ((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C5193 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C5192) *
               C50626 * C1687) *
              C281 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C5192 +
            ((C23686 + C23687) * C1109 + (C23688 + C23689) * C50605) * C5193 +
            ((C23690 + C23691) * C1109 + (C23692 + C23693) * C50605) * C5194) *
               C50626 * C1687 -
           (((C17278 * C21469 + C50796 * C21471 + C17277 * C4600 +
              C17272 * C4606) *
                 C50605 +
             (C17278 * C21468 + C50796 * C21470 + C17277 * C4594 +
              C17272 * C4602) *
                 C1109) *
                C5194 +
            ((C23693 + C23692) * C50605 + (C23691 + C23690) * C1109) * C5193 +
            ((C23689 + C23688) * C50605 + (C23687 + C23686) * C1109) * C5192) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C641 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50930 -
             (C17312 + C17313) * C642 - (C17314 + C17315) * C50931 +
             C17328 * C643 + C17329 * C638) *
                C50903 +
            ((C22223 + C22224) * C641 + (C22225 + C22226) * C50930 -
             C27944 * C642 - C27945 * C50931 + (C17708 + C17709) * C643 +
             (C17710 + C17711) * C638) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C641 + (C17315 + C17314) * C50930 -
             (C17317 + C17316) * C642 - (C17319 + C17318) * C50931 +
             (C17321 + C17320) * C643 + (C17323 + C17322) * C638) *
                C50903 +
            (C27946 * C641 + C27947 * C50930 - C18026 * C642 - C18027 * C50931 +
             (C18037 + C18036) * C643 + (C18039 + C18038) * C638) *
                C50824) *
               C50631) *
              C50663 * C50889 +
          ((((C17510 + C17511) * C642 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50930 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C641) +
             (C17512 + C17513) * C50931 - C17866 * C643 - C17867 * C638) *
                C50903 +
            ((C18251 + C18250) * C642 -
             ((C22758 + C22759) * C50930 + (C22760 + C22761) * C641) +
             (C18253 + C18252) * C50931 - (C18254 + C18255) * C643 -
             (C18256 + C18257) * C638) *
                C50824) *
               C50881 +
           (((C17514 + C17515) * C642 -
             ((C17513 + C17512) * C50930 + (C17511 + C17510) * C641) +
             (C17516 + C17517) * C50931 - (C17876 + C17877) * C643 -
             (C17878 + C17879) * C638) *
                C50903 +
            ((C18255 + C18254) * C642 -
             ((C18252 + C18253) * C50930 + (C18250 + C18251) * C641) +
             (C18257 + C18256) * C50931 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C643 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C638) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                  C283 +
              (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                  C278 -
              (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
                 C50903 +
             ((C22223 + C22224) * C283 + (C22225 + C22226) * C278 -
              C27944 * C284 - C27945 * C50610) *
                 C50824) *
                C50881 +
            (((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
              (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
                 C50903 +
             (C27946 * C283 + C27947 * C278 - C18026 * C284 - C18027 * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           (((C27946 * C284 -
              ((C22226 + C22225) * C278 + (C22224 + C22223) * C283) +
              C27947 * C50610) *
                 C50903 +
             (C27948 * C284 -
              ((C22230 + C22229) * C278 + (C22228 + C22227) * C283) +
              C27949 * C50610) *
                 C50824) *
                C50881 +
            ((C28338 * C284 - (C27945 * C278 + C27944 * C283) +
              C28339 * C50610) *
                 C50903 +
             ((C17717 + C17716) * C284 - (C22206 * C278 + C22205 * C283) +
              (C17719 + C17718) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50889 +
          (((((C17510 + C17511) * C284 -
              ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                   C278 +
               (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                   C283) +
              (C17512 + C17513) * C50610) *
                 C50903 +
             (C28598 * C284 -
              ((C22758 + C22759) * C278 + (C22760 + C22761) * C283) +
              C28599 * C50610) *
                 C50824) *
                C50881 +
            (((C17514 + C17515) * C284 -
              ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
              (C17516 + C17517) * C50610) *
                 C50903 +
             ((C18255 + C18254) * C284 - (C28600 * C278 + C28601 * C283) +
              (C18257 + C18256) * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           ((((C22761 + C22760) * C283 + (C22759 + C22758) * C278 -
              C28601 * C284 - C28600 * C50610) *
                 C50903 +
             ((C22767 + C22766) * C283 + (C22765 + C22764) * C278 -
              (C22763 + C22762) * C284 - (C22769 + C22768) * C50610) *
                 C50824) *
                C50881 +
            ((C28598 * C283 + C28599 * C278 - (C18254 + C18255) * C284 -
              (C18256 + C18257) * C50610) *
                 C50903 +
             ((C22762 + C22763) * C283 + (C22768 + C22769) * C278 -
              (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
               C17272 * C1231) *
                  C284 -
              (C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
               C17272 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
                C50903 +
            ((C22223 + C22224) * C283 + (C22225 + C22226) * C278 -
             (C17705 + C17704) * C284 - (C17707 + C17706) * C50610) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
                C50903 +
            ((C17704 + C17705) * C283 + (C17706 + C17707) * C278 -
             C18026 * C284 - C18027 * C50610) *
                C50824) *
               C50631) *
              C50663 * C280 +
          ((((C17510 + C17511) * C284 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C278 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C283) +
             (C17512 + C17513) * C50610) *
                C50903 +
            ((C18251 + C18250) * C284 -
             ((C22758 + C22759) * C278 + (C22760 + C22761) * C283) +
             (C18253 + C18252) * C50610) *
                C50824) *
               C50881 +
           (((C17514 + C17515) * C284 -
             ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
             (C17516 + C17517) * C50610) *
                C50903 +
            ((C18255 + C18254) * C284 -
             ((C18252 + C18253) * C278 + (C18250 + C18251) * C283) +
             (C18257 + C18256) * C50610) *
                C50824) *
               C50631) *
              C50663 * C281 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C283 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C278 -
             (C17518 + C17519) * C284 - (C17520 + C17521) * C50610) *
                C50903 +
            ((C23686 + C23687) * C283 + (C23688 + C23689) * C278 -
             (C27746 + C27747) * C284 - (C27748 + C27749) * C50610) *
                C50824) *
               C50881 +
           (((C17519 + C17518) * C283 + (C17521 + C17520) * C278 -
             (C17522 + C17523) * C284 - (C17524 + C17525) * C50610) *
                C50903 +
            ((C27747 + C27746) * C283 + (C27749 + C27748) * C278 -
             (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
              C17272 * C1580) *
                 C284 -
             (C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
              C17272 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C118 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C106 -
            (C17312 + C17313) * C119 - (C17314 + C17315) * C107 +
            C17328 * C120 + C17329 * C108 - C17330 * C121 - C17331 * C109) *
               C50903 +
           ((C22223 + C22224) * C118 + (C22225 + C22226) * C106 -
            (C17705 + C17704) * C119 - (C17707 + C17706) * C107 +
            (C17708 + C17709) * C120 + (C17710 + C17711) * C108 -
            (C18036 + C18037) * C121 - (C18038 + C18039) * C109) *
               C50824) *
              C50881 +
          (((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
            (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
            (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
            (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
               C50903 +
           ((C17704 + C17705) * C118 + (C17706 + C17707) * C106 -
            C18026 * C119 - C18027 * C107 + (C18037 + C18036) * C120 +
            (C18039 + C18038) * C108 -
            (C17278 * C898 + C50796 * C907 + C17277 * C466 + C17272 * C480) *
                C121 -
            (C17278 * C908 + C50796 * C913 + C17277 * C481 + C17272 * C496) *
                C109) *
               C50824) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
                C50903 +
            ((C22223 + C22224) * C283 + (C22225 + C22226) * C278 -
             C27944 * C284 - C27945 * C50610) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
                C50903 +
            (C27946 * C283 + C27947 * C278 - C18026 * C284 - C18027 * C50610) *
                C50824) *
               C50631) *
              C459 +
          (((C27946 * C284 -
             ((C22226 + C22225) * C278 + (C22224 + C22223) * C283) +
             C27947 * C50610) *
                C50903 +
            (C27948 * C284 -
             ((C22230 + C22229) * C278 + (C22228 + C22227) * C283) +
             C27949 * C50610) *
                C50824) *
               C50881 +
           (((C17708 + C17709) * C284 - (C27945 * C278 + C27944 * C283) +
             (C17710 + C17711) * C50610) *
                C50903 +
            ((C17717 + C17716) * C284 - (C22206 * C278 + C22205 * C283) +
             (C17719 + C17718) * C50610) *
                C50824) *
               C50631) *
              C460 +
          ((C22247 * C50903 +
            ((C22238 + C22237) * C283 + (C22236 + C22235) * C278 -
             (C22234 + C22233) * C284 - (C22240 + C22239) * C50610) *
                C50824) *
               C50881 +
           ((C27948 * C283 + C27949 * C278 - (C17716 + C17717) * C284 -
             (C17718 + C17719) * C50610) *
                C50903 +
            ((C22233 + C22234) * C283 + (C22239 + C22240) * C278 -
             (C17278 * C6099 + C50796 * C6100 + C17277 * C1858 +
              C17272 * C1864) *
                 C284 -
             (C17278 * C6101 + C50796 * C6102 + C17277 * C1863 +
              C17272 * C1870) *
                 C50610) *
                C50824) *
               C50631) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C641 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50930 -
             (C17312 + C17313) * C642 - (C17314 + C17315) * C50931 +
             C17328 * C643 + C17329 * C638) *
                C50903 +
            ((C22223 + C22224) * C641 + (C22225 + C22226) * C50930 -
             C27944 * C642 - C27945 * C50931 + C28338 * C643 + C28339 * C638) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C641 + (C17315 + C17314) * C50930 -
             (C17317 + C17316) * C642 - (C17319 + C17318) * C50931 +
             (C17321 + C17320) * C643 + (C17323 + C17322) * C638) *
                C50903 +
            (C27946 * C641 + C27947 * C50930 - C18026 * C642 - C18027 * C50931 +
             (C18037 + C18036) * C643 + (C18039 + C18038) * C638) *
                C50824) *
               C50631) *
              C50890 +
          (((C27946 * C642 -
             ((C22226 + C22225) * C50930 + (C22224 + C22223) * C641) +
             C27947 * C50931 - C18026 * C643 - C18027 * C638) *
                C50903 +
            (C27948 * C642 -
             ((C22230 + C22229) * C50930 + (C22228 + C22227) * C641) +
             C27949 * C50931 - (C17716 + C17717) * C643 -
             (C17718 + C17719) * C638) *
                C50824) *
               C50881 +
           ((C28338 * C642 - (C27945 * C50930 + C27944 * C641) +
             C28339 * C50931 - (C18036 + C18037) * C643 -
             (C18038 + C18039) * C638) *
                C50903 +
            ((C17717 + C17716) * C642 - (C22206 * C50930 + C22205 * C641) +
             (C17719 + C17718) * C50931 -
             (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
                 C643 -
             (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
                 C638) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C118 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C106 -
            (C17312 + C17313) * C119 - (C17314 + C17315) * C107 +
            C17328 * C120 + C17329 * C108 - C17330 * C121 - C17331 * C109) *
               C50903 +
           ((C22223 + C22224) * C118 + (C22225 + C22226) * C106 -
            (C17705 + C17704) * C119 - (C17707 + C17706) * C107 +
            (C17708 + C17709) * C120 + (C17710 + C17711) * C108 -
            (C18036 + C18037) * C121 - (C18038 + C18039) * C109) *
               C50824) *
              C50881 +
          (((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
            (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
            (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
            (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
               C50903 +
           ((C17704 + C17705) * C118 + (C17706 + C17707) * C106 -
            C18026 * C119 - C18027 * C107 + (C18037 + C18036) * C120 +
            (C18039 + C18038) * C108 -
            (C17278 * C898 + C50796 * C907 + C17277 * C466 + C17272 * C480) *
                C121 -
            (C17278 * C908 + C50796 * C913 + C17277 * C481 + C17272 * C496) *
                C109) *
               C50824) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
                C50903 +
            ((C22223 + C22224) * C283 + (C22225 + C22226) * C278 -
             (C17705 + C17704) * C284 - (C17707 + C17706) * C50610) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
                C50903 +
            ((C17704 + C17705) * C283 + (C17706 + C17707) * C278 -
             C18026 * C284 - C18027 * C50610) *
                C50824) *
               C50631) *
              C50663 * C280 +
          ((((C17510 + C17511) * C284 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C278 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C283) +
             (C17512 + C17513) * C50610) *
                C50903 +
            ((C18251 + C18250) * C284 -
             ((C22758 + C22759) * C278 + (C22760 + C22761) * C283) +
             (C18253 + C18252) * C50610) *
                C50824) *
               C50881 +
           (((C17514 + C17515) * C284 -
             ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
             (C17516 + C17517) * C50610) *
                C50903 +
            ((C18255 + C18254) * C284 -
             ((C18252 + C18253) * C278 + (C18250 + C18251) * C283) +
             (C18257 + C18256) * C50610) *
                C50824) *
               C50631) *
              C50663 * C281 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C283 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C278 -
             (C17518 + C17519) * C284 - (C17520 + C17521) * C50610) *
                C50903 +
            ((C23686 + C23687) * C283 + (C23688 + C23689) * C278 -
             (C27746 + C27747) * C284 - (C27748 + C27749) * C50610) *
                C50824) *
               C50881 +
           (((C17519 + C17518) * C283 + (C17521 + C17520) * C278 -
             (C17522 + C17523) * C284 - (C17524 + C17525) * C50610) *
                C50903 +
            ((C27747 + C27746) * C283 + (C27749 + C27748) * C278 -
             (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
              C17272 * C1580) *
                 C284 -
             (C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
              C17272 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50874 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                C50903 +
            ((C22223 + C22224) * C49720 + (C22225 + C22226) * C50874 -
             C27944 * C49713 - C27945 * C50610) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
                C50903 +
            (C27946 * C49720 + C27947 * C50874 - C18026 * C49713 -
             C18027 * C50610) *
                C50824) *
               C50631) *
              C50663 * C50934 +
          ((((C17510 + C17511) * C49713 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50874 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C49720) +
             (C17512 + C17513) * C50610) *
                C50903 +
            (C28598 * C49713 -
             ((C22758 + C22759) * C50874 + (C22760 + C22761) * C49720) +
             C28599 * C50610) *
                C50824) *
               C50881 +
           (((C17514 + C17515) * C49713 -
             ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
             (C17516 + C17517) * C50610) *
                C50903 +
            ((C18255 + C18254) * C49713 - (C28600 * C50874 + C28601 * C49720) +
             (C18257 + C18256) * C50610) *
                C50824) *
               C50631) *
              C50663 * C50935 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C49720 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50874 -
             (C17518 + C17519) * C49713 - (C17520 + C17521) * C50610) *
                C50903 +
            ((C23686 + C23687) * C49720 + (C23688 + C23689) * C50874 -
             (C27746 + C27747) * C49713 - (C27748 + C27749) * C50610) *
                C50824) *
               C50881 +
           (((C17519 + C17518) * C49720 + (C17521 + C17520) * C50874 -
             (C17522 + C17523) * C49713 - (C17524 + C17525) * C50610) *
                C50903 +
            ((C27747 + C27746) * C49720 + (C27749 + C27748) * C50874 -
             (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
              C17272 * C1580) *
                 C49713 -
             (C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
              C17272 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                  C1109 +
              (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) *
                 C50824) *
                C50881 +
            (((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50903 +
             (C27946 * C1109 + C27947 * C50605) * C50824) *
                C50631) *
               C50890 -
           (((C22206 * C50605 + C22205 * C1109) * C50824 +
             (C27945 * C50605 + C27944 * C1109) * C50903) *
                C50631 +
            (((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C50824 +
             ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) *
                 C50903) *
                C50881) *
               C50727) *
              C50934 +
          (((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C50903 +
             ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) *
                 C50824) *
                C50881 +
            ((C28598 * C1109 + C28599 * C50605) * C50903 +
             ((C22762 + C22763) * C1109 + (C22768 + C22769) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C28600 * C50605 + C28601 * C1109) * C50824 +
             ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) *
                 C50903) *
                C50631 +
            (((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C50824 +
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50605 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C1109) *
                 C50903) *
                C50881) *
               C50890) *
              C50935 +
          (((((C17277 * C290 + C17272 * C305 + C17278 * C1113 +
               C50796 * C1121) *
                  C1109 +
              (C17277 * C306 + C17272 * C320 + C17278 * C1120 +
               C50796 * C1125) *
                  C50605) *
                 C50903 +
             ((C23686 + C23687) * C1109 + (C23688 + C23689) * C50605) *
                 C50824) *
                C50881 +
            (((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50903 +
             ((C27747 + C27746) * C1109 + (C27749 + C27748) * C50605) *
                 C50824) *
                C50631) *
               C50890 -
           ((((C17278 * C3702 + C50796 * C3706 + C17277 * C2708 +
               C17272 * C2712) *
                  C50605 +
              (C17278 * C3700 + C50796 * C3703 + C17277 * C2703 +
               C17272 * C2707) *
                  C1109) *
                 C50824 +
             ((C27748 + C27749) * C50605 + (C27746 + C27747) * C1109) *
                 C50903) *
                C50631 +
            (((C23693 + C23692) * C50605 + (C23691 + C23690) * C1109) * C50824 +
             ((C23689 + C23688) * C50605 + (C23687 + C23686) * C1109) *
                 C50903) *
                C50881) *
               C50727) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50903 +
            ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C50824) *
               C50881 +
           (((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50903 +
            (C27946 * C1109 + C27947 * C50605) * C50824) *
               C50631) *
              C50663 * C1105 -
          (((C28600 * C50605 + C28601 * C1109) * C50824 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50903) *
               C50631 +
           (((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C50824 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50903) *
               C50881) *
              C50663 * C1106 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C50903 +
            ((C23686 + C23687) * C1109 + (C23688 + C23689) * C50605) * C50824) *
               C50881 +
           (((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50903 +
            ((C27747 + C27746) * C1109 + (C27749 + C27748) * C50605) * C50824) *
               C50631) *
              C50663 * C1107 -
          ((((C17278 * C4196 + C50796 * C4200 + C17277 * C3278 +
              C17272 * C3282) *
                 C50605 +
             (C17278 * C4194 + C50796 * C4197 + C17277 * C3273 +
              C17272 * C3277) *
                 C1109) *
                C50824 +
            ((C17278 * C2514 + C50796 * C2518 + C17277 * C1118 +
              C17272 * C1124) *
                 C50605 +
             (C17278 * C2509 + C50796 * C2513 + C17277 * C1112 +
              C17272 * C1119) *
                 C1109) *
                C50903) *
               C50631 +
           (((C17278 * C4198 + C50796 * C4201 + C17277 * C3276 +
              C17272 * C3281) *
                 C50605 +
             (C17278 * C4195 + C50796 * C4199 + C17277 * C3272 +
              C17272 * C3275) *
                 C1109) *
                C50824 +
            ((C17278 * C2512 + C50796 * C2517 + C17277 * C1120 +
              C17272 * C1125) *
                 C50605 +
             (C17278 * C2508 + C50796 * C2511 + C17277 * C1113 +
              C17272 * C1121) *
                 C1109) *
                C50903) *
               C50881) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1035 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C1030 -
             (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
             C17328 * C1037 + C17329 * C1032) *
                C50903 +
            ((C22223 + C22224) * C1035 + (C22225 + C22226) * C1030 -
             C27944 * C1036 - C27945 * C1031 + C28338 * C1037 +
             C28339 * C1032) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
             (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
             (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
                C50903 +
            (C27946 * C1035 + C27947 * C1030 - C18026 * C1036 - C18027 * C1031 +
             (C18037 + C18036) * C1037 + (C18039 + C18038) * C1032) *
                C50824) *
               C50631) *
              C50663 * C1033 +
          ((((C17510 + C17511) * C1036 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C1030 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C1035) +
             (C17512 + C17513) * C1031 - C17866 * C1037 - C17867 * C1032) *
                C50903 +
            (C28598 * C1036 -
             ((C22758 + C22759) * C1030 + (C22760 + C22761) * C1035) +
             C28599 * C1031 - (C18254 + C18255) * C1037 -
             (C18256 + C18257) * C1032) *
                C50824) *
               C50881 +
           (((C17514 + C17515) * C1036 -
             ((C17513 + C17512) * C1030 + (C17511 + C17510) * C1035) +
             (C17516 + C17517) * C1031 - (C17876 + C17877) * C1037 -
             (C17878 + C17879) * C1032) *
                C50903 +
            ((C18255 + C18254) * C1036 - (C28600 * C1030 + C28601 * C1035) +
             (C18257 + C18256) * C1031 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C1037 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C1032) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                  C1109 +
              (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) *
                 C50824) *
                C50881 +
            (((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50903 +
             (C27946 * C1109 + C27947 * C50605) * C50824) *
                C50631) *
               C459 -
           (((C22206 * C50605 + C22205 * C1109) * C50824 +
             (C27945 * C50605 + C27944 * C1109) * C50903) *
                C50631 +
            (((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C50824 +
             ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) *
                 C50903) *
                C50881) *
               C460 +
           ((C23176 * C50903 +
             ((C22238 + C22237) * C1109 + (C22236 + C22235) * C50605) *
                 C50824) *
                C50881 +
            ((C27948 * C1109 + C27949 * C50605) * C50903 +
             ((C22233 + C22234) * C1109 + (C22239 + C22240) * C50605) *
                 C50824) *
                C50631) *
               C461) *
              C1033 +
          (((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C50903 +
             ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) *
                 C50824) *
                C50881 +
            ((C28598 * C1109 + C28599 * C50605) * C50903 +
             ((C22762 + C22763) * C1109 + (C22768 + C22769) * C50605) *
                 C50824) *
                C50631) *
               C460 -
           (((C28600 * C50605 + C28601 * C1109) * C50824 +
             ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) *
                 C50903) *
                C50631 +
            (((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C50824 +
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50605 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C1109) *
                 C50903) *
                C50881) *
               C459 -
           ((((C17278 * C4596 + C50796 * C4604 + C17277 * C4597 +
               C17272 * C4605) *
                  C50605 +
              (C17278 * C4592 + C50796 * C4598 + C17277 * C4593 +
               C17272 * C4599) *
                  C1109) *
                 C50824 +
             ((C22769 + C22768) * C50605 + (C22763 + C22762) * C1109) *
                 C50903) *
                C50631 +
            (((C23180 + C23179) * C50605 + (C23178 + C23177) * C1109) * C50824 +
             C23183 * C50903) *
                C50881) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                  C49720 +
              (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                  C50874 -
              (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                 C50903 +
             ((C22223 + C22224) * C49720 + (C22225 + C22226) * C50874 -
              C27944 * C49713 - C27945 * C50610) *
                 C50824) *
                C50881 +
            (((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
              (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
                 C50903 +
             (C27946 * C49720 + C27947 * C50874 - C18026 * C49713 -
              C18027 * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           (((C27946 * C49713 -
              ((C22226 + C22225) * C50874 + (C22224 + C22223) * C49720) +
              C27947 * C50610) *
                 C50903 +
             (C27948 * C49713 -
              ((C22230 + C22229) * C50874 + (C22228 + C22227) * C49720) +
              C27949 * C50610) *
                 C50824) *
                C50881 +
            ((C28338 * C49713 - (C27945 * C50874 + C27944 * C49720) +
              C28339 * C50610) *
                 C50903 +
             ((C17717 + C17716) * C49713 - (C22206 * C50874 + C22205 * C49720) +
              (C17719 + C17718) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C1033 +
          (((((C17510 + C17511) * C49713 -
              ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                   C50874 +
               (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                   C49720) +
              (C17512 + C17513) * C50610) *
                 C50903 +
             (C28598 * C49713 -
              ((C22758 + C22759) * C50874 + (C22760 + C22761) * C49720) +
              C28599 * C50610) *
                 C50824) *
                C50881 +
            (((C17514 + C17515) * C49713 -
              ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
              (C17516 + C17517) * C50610) *
                 C50903 +
             ((C18255 + C18254) * C49713 - (C28600 * C50874 + C28601 * C49720) +
              (C18257 + C18256) * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           ((((C22761 + C22760) * C49720 + (C22759 + C22758) * C50874 -
              C28601 * C49713 - C28600 * C50610) *
                 C50903 +
             ((C22767 + C22766) * C49720 + (C22765 + C22764) * C50874 -
              (C22763 + C22762) * C49713 - (C22769 + C22768) * C50610) *
                 C50824) *
                C50881 +
            ((C28598 * C49720 + C28599 * C50874 - (C18254 + C18255) * C49713 -
              (C18256 + C18257) * C50610) *
                 C50903 +
             ((C22762 + C22763) * C49720 + (C22768 + C22769) * C50874 -
              (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
               C17272 * C1231) *
                  C49713 -
              (C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
               C17272 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1035 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C1030 -
             (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
             C17328 * C1037 + C17329 * C1032) *
                C50903 +
            ((C22223 + C22224) * C1035 + (C22225 + C22226) * C1030 -
             C27944 * C1036 - C27945 * C1031 + C28338 * C1037 +
             C28339 * C1032) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
             (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
             (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
                C50903 +
            (C27946 * C1035 + C27947 * C1030 - C18026 * C1036 - C18027 * C1031 +
             (C18037 + C18036) * C1037 + (C18039 + C18038) * C1032) *
                C50824) *
               C50631) *
              C50663 * C1033 +
          ((((C17510 + C17511) * C1036 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C1030 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C1035) +
             (C17512 + C17513) * C1031 - C17866 * C1037 - C17867 * C1032) *
                C50903 +
            (C28598 * C1036 -
             ((C22758 + C22759) * C1030 + (C22760 + C22761) * C1035) +
             C28599 * C1031 - (C18254 + C18255) * C1037 -
             (C18256 + C18257) * C1032) *
                C50824) *
               C50881 +
           (((C17514 + C17515) * C1036 -
             ((C17513 + C17512) * C1030 + (C17511 + C17510) * C1035) +
             (C17516 + C17517) * C1031 - (C17876 + C17877) * C1037 -
             (C17878 + C17879) * C1032) *
                C50903 +
            ((C18255 + C18254) * C1036 - (C28600 * C1030 + C28601 * C1035) +
             (C18257 + C18256) * C1031 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C1037 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C1032) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50903 +
            ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C50824) *
               C50881 +
           (((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50903 +
            (C27946 * C1109 + C27947 * C50605) * C50824) *
               C50631) *
              C50663 * C1105 -
          (((C28600 * C50605 + C28601 * C1109) * C50824 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50903) *
               C50631 +
           (((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C50824 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50903) *
               C50881) *
              C50663 * C1106 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C50903 +
            ((C23686 + C23687) * C1109 + (C23688 + C23689) * C50605) * C50824) *
               C50881 +
           (((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50903 +
            ((C27747 + C27746) * C1109 + (C27749 + C27748) * C50605) * C50824) *
               C50631) *
              C50663 * C1107 -
          ((((C17278 * C4196 + C50796 * C4200 + C17277 * C3278 +
              C17272 * C3282) *
                 C50605 +
             (C17278 * C4194 + C50796 * C4197 + C17277 * C3273 +
              C17272 * C3277) *
                 C1109) *
                C50824 +
            ((C17278 * C2514 + C50796 * C2518 + C17277 * C1118 +
              C17272 * C1124) *
                 C50605 +
             (C17278 * C2509 + C50796 * C2513 + C17277 * C1112 +
              C17272 * C1119) *
                 C1109) *
                C50903) *
               C50631 +
           (((C17278 * C4198 + C50796 * C4201 + C17277 * C3276 +
              C17272 * C3281) *
                 C50605 +
             (C17278 * C4195 + C50796 * C4199 + C17277 * C3272 +
              C17272 * C3275) *
                 C1109) *
                C50824 +
            ((C17278 * C2512 + C50796 * C2517 + C17277 * C1120 +
              C17272 * C1125) *
                 C50605 +
             (C17278 * C2508 + C50796 * C2511 + C17277 * C1113 +
              C17272 * C1121) *
                 C1109) *
                C50903) *
               C50881) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                  C49720 +
              (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                  C50874 -
              (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                 C50903 +
             ((C22223 + C22224) * C49720 + (C22225 + C22226) * C50874 -
              C27944 * C49713 - C27945 * C50610) *
                 C50824) *
                C50881 +
            (((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
              (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
                 C50903 +
             (C27946 * C49720 + C27947 * C50874 - C18026 * C49713 -
              C18027 * C50610) *
                 C50824) *
                C50631) *
               C1687 +
           (((C27946 * C49713 -
              ((C22226 + C22225) * C50874 + (C22224 + C22223) * C49720) +
              C27947 * C50610) *
                 C50903 +
             (C27948 * C49713 -
              ((C22230 + C22229) * C50874 + (C22228 + C22227) * C49720) +
              C27949 * C50610) *
                 C50824) *
                C50881 +
            ((C28338 * C49713 - (C27945 * C50874 + C27944 * C49720) +
              C28339 * C50610) *
                 C50903 +
             ((C17717 + C17716) * C49713 - (C22206 * C50874 + C22205 * C49720) +
              (C17719 + C17718) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50889 +
          (((((C17510 + C17511) * C49713 -
              ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                   C50874 +
               (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                   C49720) +
              (C17512 + C17513) * C50610) *
                 C50903 +
             (C28598 * C49713 -
              ((C22758 + C22759) * C50874 + (C22760 + C22761) * C49720) +
              C28599 * C50610) *
                 C50824) *
                C50881 +
            (((C17514 + C17515) * C49713 -
              ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
              (C17516 + C17517) * C50610) *
                 C50903 +
             ((C18255 + C18254) * C49713 - (C28600 * C50874 + C28601 * C49720) +
              (C18257 + C18256) * C50610) *
                 C50824) *
                C50631) *
               C1687 +
           ((((C22761 + C22760) * C49720 + (C22759 + C22758) * C50874 -
              C28601 * C49713 - C28600 * C50610) *
                 C50903 +
             ((C22767 + C22766) * C49720 + (C22765 + C22764) * C50874 -
              (C22763 + C22762) * C49713 - (C22769 + C22768) * C50610) *
                 C50824) *
                C50881 +
            ((C28598 * C49720 + C28599 * C50874 - (C18254 + C18255) * C49713 -
              (C18256 + C18257) * C50610) *
                 C50903 +
             ((C22762 + C22763) * C49720 + (C22768 + C22769) * C50874 -
              (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
               C17272 * C1231) *
                  C49713 -
              (C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
               C17272 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                  C1109 +
              (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) *
                 C50824) *
                C50881 +
            (((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50903 +
             (C27946 * C1109 + C27947 * C50605) * C50824) *
                C50631) *
               C50936 -
           (((C22206 * C50605 + C22205 * C1109) * C50824 +
             (C27945 * C50605 + C27944 * C1109) * C50903) *
                C50631 +
            (((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C50824 +
             ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) *
                 C50903) *
                C50881) *
               C50937 +
           ((C23176 * C50903 +
             ((C22238 + C22237) * C1109 + (C22236 + C22235) * C50605) *
                 C50824) *
                C50881 +
            ((C27948 * C1109 + C27949 * C50605) * C50903 +
             ((C22233 + C22234) * C1109 + (C22239 + C22240) * C50605) *
                 C50824) *
                C50631) *
               C2103) *
              C50889 +
          (((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C50903 +
             ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) *
                 C50824) *
                C50881 +
            ((C28598 * C1109 + C28599 * C50605) * C50903 +
             ((C22762 + C22763) * C1109 + (C22768 + C22769) * C50605) *
                 C50824) *
                C50631) *
               C50937 -
           (((C28600 * C50605 + C28601 * C1109) * C50824 +
             ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) *
                 C50903) *
                C50631 +
            (((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C50824 +
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50605 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C1109) *
                 C50903) *
                C50881) *
               C50936 -
           ((((C17278 * C4596 + C50796 * C4604 + C17277 * C4597 +
               C17272 * C4605) *
                  C50605 +
              (C17278 * C4592 + C50796 * C4598 + C17277 * C4593 +
               C17272 * C4599) *
                  C1109) *
                 C50824 +
             ((C22769 + C22768) * C50605 + (C22763 + C22762) * C1109) *
                 C50903) *
                C50631 +
            (((C23180 + C23179) * C50605 + (C23178 + C23177) * C1109) * C50824 +
             C23183 * C50903) *
                C50881) *
               C2103) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                  C1109 +
              (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) *
                 C50824) *
                C50881 +
            (((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50903 +
             (C27946 * C1109 + C27947 * C50605) * C50824) *
                C50631) *
               C1687 -
           (((C22206 * C50605 + C22205 * C1109) * C50824 +
             (C27945 * C50605 + C27944 * C1109) * C50903) *
                C50631 +
            (((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C50824 +
             ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) *
                 C50903) *
                C50881) *
               C50727) *
              C280 +
          (((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C50903 +
             ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) *
                 C50824) *
                C50881 +
            ((C28598 * C1109 + C28599 * C50605) * C50903 +
             ((C22762 + C22763) * C1109 + (C22768 + C22769) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C28600 * C50605 + C28601 * C1109) * C50824 +
             ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) *
                 C50903) *
                C50631 +
            (((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C50824 +
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50605 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C1109) *
                 C50903) *
                C50881) *
               C1687) *
              C281 +
          (((((C17277 * C290 + C17272 * C305 + C17278 * C1113 +
               C50796 * C1121) *
                  C1109 +
              (C17277 * C306 + C17272 * C320 + C17278 * C1120 +
               C50796 * C1125) *
                  C50605) *
                 C50903 +
             ((C23686 + C23687) * C1109 + (C23688 + C23689) * C50605) *
                 C50824) *
                C50881 +
            (((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50903 +
             ((C27747 + C27746) * C1109 + (C27749 + C27748) * C50605) *
                 C50824) *
                C50631) *
               C1687 -
           ((((C17278 * C3702 + C50796 * C3706 + C17277 * C2708 +
               C17272 * C2712) *
                  C50605 +
              (C17278 * C3700 + C50796 * C3703 + C17277 * C2703 +
               C17272 * C2707) *
                  C1109) *
                 C50824 +
             ((C27748 + C27749) * C50605 + (C27746 + C27747) * C1109) *
                 C50903) *
                C50631 +
            (((C23693 + C23692) * C50605 + (C23691 + C23690) * C1109) * C50824 +
             ((C23689 + C23688) * C50605 + (C23687 + C23686) * C1109) *
                 C50903) *
                C50881) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1035 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C1030 -
             (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
             C17328 * C1037 + C17329 * C1032) *
                C50903 +
            ((C22223 + C22224) * C1035 + (C22225 + C22226) * C1030 -
             C27944 * C1036 - C27945 * C1031 + C28338 * C1037 +
             C28339 * C1032) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
             (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
             (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
                C50903 +
            (C27946 * C1035 + C27947 * C1030 - C18026 * C1036 - C18027 * C1031 +
             (C18037 + C18036) * C1037 + (C18039 + C18038) * C1032) *
                C50824) *
               C50631) *
              C1687 +
          (((C27946 * C1036 -
             ((C22226 + C22225) * C1030 + (C22224 + C22223) * C1035) +
             C27947 * C1031 - C18026 * C1037 - C18027 * C1032) *
                C50903 +
            (C27948 * C1036 -
             ((C22230 + C22229) * C1030 + (C22228 + C22227) * C1035) +
             C27949 * C1031 - (C17716 + C17717) * C1037 -
             (C17718 + C17719) * C1032) *
                C50824) *
               C50881 +
           ((C28338 * C1036 - (C27945 * C1030 + C27944 * C1035) +
             C28339 * C1031 - (C18036 + C18037) * C1037 -
             (C18038 + C18039) * C1032) *
                C50903 +
            ((C17717 + C17716) * C1036 - (C22206 * C1030 + C22205 * C1035) +
             (C17719 + C17718) * C1031 -
             (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
                 C1037 -
             (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
                 C1032) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50903 +
            ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) * C50824) *
               C50881 +
           (((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50903 +
            (C27946 * C1109 + C27947 * C50605) * C50824) *
               C50631) *
              C1853 -
          (((C22206 * C50605 + C22205 * C1109) * C50824 +
            (C27945 * C50605 + C27944 * C1109) * C50903) *
               C50631 +
           (((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C50824 +
            ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) * C50903) *
               C50881) *
              C1854 +
          ((C23176 * C50903 +
            ((C22238 + C22237) * C1109 + (C22236 + C22235) * C50605) * C50824) *
               C50881 +
           ((C27948 * C1109 + C27949 * C50605) * C50903 +
            ((C22233 + C22234) * C1109 + (C22239 + C22240) * C50605) * C50824) *
               C50631) *
              C1855 -
          ((((C17278 * C6529 + C50796 * C6533 + C17277 * C5511 +
              C17272 * C5515) *
                 C50605 +
             (C17278 * C6527 + C50796 * C6530 + C17277 * C5506 +
              C17272 * C5510) *
                 C1109) *
                C50824 +
            ((C22240 + C22239) * C50605 + (C22234 + C22233) * C1109) * C50903) *
               C50631 +
           (((C24103 + C24102) * C50605 + (C24101 + C24100) * C1109) * C50824 +
            C24104 * C50903) *
               C50881) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50874 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                C50903 +
            ((C22223 + C22224) * C49720 + (C22225 + C22226) * C50874 -
             C27944 * C49713 - C27945 * C50610) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
                C50903 +
            (C27946 * C49720 + C27947 * C50874 - C18026 * C49713 -
             C18027 * C50610) *
                C50824) *
               C50631) *
              C50936 +
          (((C27946 * C49713 -
             ((C22226 + C22225) * C50874 + (C22224 + C22223) * C49720) +
             C27947 * C50610) *
                C50903 +
            (C27948 * C49713 -
             ((C22230 + C22229) * C50874 + (C22228 + C22227) * C49720) +
             C27949 * C50610) *
                C50824) *
               C50881 +
           ((C28338 * C49713 - (C27945 * C50874 + C27944 * C49720) +
             C28339 * C50610) *
                C50903 +
            ((C17717 + C17716) * C49713 - (C22206 * C50874 + C22205 * C49720) +
             (C17719 + C17718) * C50610) *
                C50824) *
               C50631) *
              C50937 +
          ((C24451 * C50903 +
            ((C22238 + C22237) * C49720 + (C22236 + C22235) * C50874 -
             (C22234 + C22233) * C49713 - (C22240 + C22239) * C50610) *
                C50824) *
               C50881 +
           ((C27948 * C49720 + C27949 * C50874 - (C17716 + C17717) * C49713 -
             (C17718 + C17719) * C50610) *
                C50903 +
            ((C22233 + C22234) * C49720 + (C22239 + C22240) * C50874 -
             (C17278 * C6099 + C50796 * C6100 + C17277 * C1858 +
              C17272 * C1864) *
                 C49713 -
             (C17278 * C6101 + C50796 * C6102 + C17277 * C1863 +
              C17272 * C1870) *
                 C50610) *
                C50824) *
               C50631) *
              C2103) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1035 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C1030 -
             (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
             C17328 * C1037 + C17329 * C1032) *
                C50903 +
            ((C22223 + C22224) * C1035 + (C22225 + C22226) * C1030 -
             C27944 * C1036 - C27945 * C1031 + C28338 * C1037 +
             C28339 * C1032) *
                C50824) *
               C50881 +
           (((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
             (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
             (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
                C50903 +
            (C27946 * C1035 + C27947 * C1030 - C18026 * C1036 - C18027 * C1031 +
             (C18037 + C18036) * C1037 + (C18039 + C18038) * C1032) *
                C50824) *
               C50631) *
              C1687 +
          (((C27946 * C1036 -
             ((C22226 + C22225) * C1030 + (C22224 + C22223) * C1035) +
             C27947 * C1031 - C18026 * C1037 - C18027 * C1032) *
                C50903 +
            (C27948 * C1036 -
             ((C22230 + C22229) * C1030 + (C22228 + C22227) * C1035) +
             C27949 * C1031 - (C17716 + C17717) * C1037 -
             (C17718 + C17719) * C1032) *
                C50824) *
               C50881 +
           ((C28338 * C1036 - (C27945 * C1030 + C27944 * C1035) +
             C28339 * C1031 - (C18036 + C18037) * C1037 -
             (C18038 + C18039) * C1032) *
                C50903 +
            ((C17717 + C17716) * C1036 - (C22206 * C1030 + C22205 * C1035) +
             (C17719 + C17718) * C1031 -
             (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
                 C1037 -
             (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
                 C1032) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                  C1109 +
              (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                  C50605) *
                 C50903 +
             ((C22223 + C22224) * C1109 + (C22225 + C22226) * C50605) *
                 C50824) *
                C50881 +
            (((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50903 +
             (C27946 * C1109 + C27947 * C50605) * C50824) *
                C50631) *
               C1687 -
           (((C22206 * C50605 + C22205 * C1109) * C50824 +
             (C27945 * C50605 + C27944 * C1109) * C50903) *
                C50631 +
            (((C22230 + C22229) * C50605 + (C22228 + C22227) * C1109) * C50824 +
             ((C22226 + C22225) * C50605 + (C22224 + C22223) * C1109) *
                 C50903) *
                C50881) *
               C50727) *
              C280 +
          (((((C22761 + C22760) * C1109 + (C22759 + C22758) * C50605) * C50903 +
             ((C22767 + C22766) * C1109 + (C22765 + C22764) * C50605) *
                 C50824) *
                C50881 +
            ((C28598 * C1109 + C28599 * C50605) * C50903 +
             ((C22762 + C22763) * C1109 + (C22768 + C22769) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C28600 * C50605 + C28601 * C1109) * C50824 +
             ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) *
                 C50903) *
                C50631 +
            (((C22758 + C22759) * C50605 + (C22760 + C22761) * C1109) * C50824 +
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50605 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C1109) *
                 C50903) *
                C50881) *
               C1687) *
              C281 +
          (((((C17277 * C290 + C17272 * C305 + C17278 * C1113 +
               C50796 * C1121) *
                  C1109 +
              (C17277 * C306 + C17272 * C320 + C17278 * C1120 +
               C50796 * C1125) *
                  C50605) *
                 C50903 +
             ((C23686 + C23687) * C1109 + (C23688 + C23689) * C50605) *
                 C50824) *
                C50881 +
            (((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50903 +
             ((C27747 + C27746) * C1109 + (C27749 + C27748) * C50605) *
                 C50824) *
                C50631) *
               C1687 -
           ((((C17278 * C3702 + C50796 * C3706 + C17277 * C2708 +
               C17272 * C2712) *
                  C50605 +
              (C17278 * C3700 + C50796 * C3703 + C17277 * C2703 +
               C17272 * C2707) *
                  C1109) *
                 C50824 +
             ((C27748 + C27749) * C50605 + (C27746 + C27747) * C1109) *
                 C50903) *
                C50631 +
            (((C23693 + C23692) * C50605 + (C23691 + C23690) * C1109) * C50824 +
             ((C23689 + C23688) * C50605 + (C23687 + C23686) * C1109) *
                 C50903) *
                C50881) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C641 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50930 -
            (C17312 + C17313) * C642 - (C17314 + C17315) * C50931 +
            C17328 * C643 + C17329 * C638) *
               C50760 * C17274 +
           ((C17313 + C17312) * C641 + (C17315 + C17314) * C50930 -
            (C17317 + C17316) * C642 - (C17319 + C17318) * C50931 +
            (C17321 + C17320) * C643 + (C17323 + C17322) * C638) *
               C50760 * C17275 +
           (C17328 * C641 + C17329 * C50930 - C17330 * C642 - C17331 * C50931 +
            (C17325 + C17324) * C643 + (C17327 + C17326) * C638) *
               C50760 * C17276) *
              C50663 * C50889 +
          (((C17510 + C17511) * C642 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50930 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C641) +
            (C17512 + C17513) * C50931 - C17866 * C643 - C17867 * C638) *
               C50760 * C17274 +
           ((C17514 + C17515) * C642 -
            ((C17513 + C17512) * C50930 + (C17511 + C17510) * C641) +
            (C17516 + C17517) * C50931 - (C17876 + C17877) * C643 -
            (C17878 + C17879) * C638) *
               C50760 * C17275 +
           ((C17877 + C17876) * C642 - (C17867 * C50930 + C17866 * C641) +
            (C17879 + C17878) * C50931 -
            (C17278 * C294 + C50796 * C313 + C17277 * C289 + C17272 * C303) *
                C643 -
            (C17278 * C314 + C50796 * C324 + C17277 * C304 + C17272 * C319) *
                C638) *
               C50760 * C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C641 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50930 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C642 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50931 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C643 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C638) *
              C50760 * C50626 * C50663 * C50889 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C642 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50930 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C641) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C50931 -
           (C20083 * C2510 + C20078 * C2515 + C20082 * C1111 + C20077 * C1117 +
            C20081 * C292 + C20076 * C309 + C20080 * C287 + C20075 * C299) *
               C643 -
           (C20083 * C2516 + C20078 * C2519 + C20082 * C1116 + C20077 * C1123 +
            C20081 * C310 + C20076 * C322 + C20080 * C300 + C20075 * C317) *
               C638) *
              C50760 * C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C283 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C278 -
             (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
                C50760 * C17274 +
            ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
             (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
                C50760 * C17275 +
            (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C50610) *
                C50760 * C17276) *
               C50890 +
           (((C17704 + C17705) * C284 -
             ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                  C278 +
              (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                  C283) +
             (C17706 + C17707) * C50610) *
                C50760 * C17274 +
            ((C17708 + C17709) * C284 -
             ((C17707 + C17706) * C278 + (C17705 + C17704) * C283) +
             (C17710 + C17711) * C50610) *
                C50760 * C17275 +
            ((C18037 + C18036) * C284 - (C18027 * C278 + C18026 * C283) +
             (C18039 + C18038) * C50610) *
                C50760 * C17276) *
               C50727) *
              C50889 +
          ((((C17510 + C17511) * C284 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C278 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C283) +
             (C17512 + C17513) * C50610) *
                C50760 * C17274 +
            ((C17514 + C17515) * C284 -
             ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
             (C17516 + C17517) * C50610) *
                C50760 * C17275 +
            ((C17877 + C17876) * C284 - (C17867 * C278 + C17866 * C283) +
             (C17879 + C17878) * C50610) *
                C50760 * C17276) *
               C50890 +
           (((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C283 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C278 -
             (C18250 + C18251) * C284 - (C18252 + C18253) * C50610) *
                C50760 * C17274 +
            ((C18251 + C18250) * C283 + (C18253 + C18252) * C278 -
             (C18254 + C18255) * C284 - (C18256 + C18257) * C50610) *
                C50760 * C17275 +
            ((C18255 + C18254) * C283 + (C18257 + C18256) * C278 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C284 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C50610) *
                C50760 * C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C283 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C278 -
            (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
             C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
                C284 -
            (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
             C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
                C50610) *
               C50760 * C50626 * C50890 +
           ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
             C20082 * C1575 + C20077 * C1582 + C20083 * C3273 +
             C20078 * C3277) *
                C284 -
            ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 +
              C20077 * C1588 + C20081 * C900 + C20076 * C909 + C20080 * C473 +
              C20075 * C492) *
                 C278 +
             (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 +
              C20077 * C1584 + C20081 * C894 + C20076 * C899 + C20080 * C463 +
              C20075 * C474) *
                 C283) +
            (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
             C20082 * C1581 + C20077 * C1587 + C20083 * C3278 +
             C20078 * C3282) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50889 +
          (((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
             C20082 * C1112 + C20077 * C1119 + C20083 * C2509 +
             C20078 * C2513) *
                C284 -
            ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 +
              C20077 * C1125 + C20081 * C306 + C20076 * C320 + C20080 * C296 +
              C20075 * C315) *
                 C278 +
             (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 +
              C20077 * C1121 + C20081 * C290 + C20076 * C305 + C20080 * C286 +
              C20075 * C297) *
                 C283) +
            (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
             C20082 * C1118 + C20077 * C1124 + C20083 * C2514 +
             C20078 * C2518) *
                C50610) *
               C50760 * C50626 * C50890 +
           ((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C283 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C278 -
            (C20083 * C4194 + C20078 * C4197 + C20082 * C3273 + C20077 * C3277 +
             C20081 * C1575 + C20076 * C1582 + C20080 * C895 + C20075 * C901) *
                C284 -
            (C20083 * C4196 + C20078 * C4200 + C20082 * C3278 + C20077 * C3282 +
             C20081 * C1581 + C20076 * C1587 + C20080 * C902 + C20075 * C910) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C50610) *
               C50760 * C17276) *
              C50663 * C280 +
          (((C17510 + C17511) * C284 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C278 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C283) +
            (C17512 + C17513) * C50610) *
               C50760 * C17274 +
           ((C17514 + C17515) * C284 -
            ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
            (C17516 + C17517) * C50610) *
               C50760 * C17275 +
           ((C17277 * C288 + C17272 * C301 + C17278 * C293 + C50796 * C311) *
                C284 -
            ((C17517 + C17516) * C278 + (C17515 + C17514) * C283) +
            (C17277 * C302 + C17272 * C318 + C17278 * C312 + C50796 * C323) *
                C50610) *
               C50760 * C17276) *
              C50663 * C281 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C283 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C278 -
            (C17518 + C17519) * C284 - (C17520 + C17521) * C50610) *
               C50760 * C17274 +
           ((C17519 + C17518) * C283 + (C17521 + C17520) * C278 -
            (C17522 + C17523) * C284 - (C17524 + C17525) * C50610) *
               C50760 * C17275 +
           ((C17523 + C17522) * C283 + (C17525 + C17524) * C278 -
            (C17278 * C1110 + C50796 * C1115 + C17277 * C293 + C17272 * C311) *
                C284 -
            (C17278 * C1114 + C50796 * C1122 + C17277 * C312 + C17272 * C323) *
                C50610) *
               C50760 * C17276) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C50760 * C17274 +
          ((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
           (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
           (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
           (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
              C50760 * C17275 +
          (C17328 * C118 + C17329 * C106 - C17330 * C119 - C17331 * C107 +
           (C17325 + C17324) * C120 + (C17327 + C17326) * C108 -
           (C17278 * C644 + C50796 * C645 + C17277 * C127 + C17272 * C139) *
               C121 -
           (C17278 * C646 + C50796 * C647 + C17277 * C140 + C17272 * C148) *
               C109) *
              C50760 * C17276) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C50610) *
               C50760 * C17276) *
              C459 +
          (((C17704 + C17705) * C284 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C278 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C283) +
            (C17706 + C17707) * C50610) *
               C50760 * C17274 +
           ((C17708 + C17709) * C284 -
            ((C17707 + C17706) * C278 + (C17705 + C17704) * C283) +
            (C17710 + C17711) * C50610) *
               C50760 * C17275 +
           ((C17277 * C465 + C17272 * C478 + C17278 * C897 + C50796 * C905) *
                C284 -
            ((C17711 + C17710) * C278 + (C17709 + C17708) * C283) +
            (C17277 * C479 + C17272 * C495 + C17278 * C906 + C50796 * C912) *
                C50610) *
               C50760 * C17276) *
              C460 +
          (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                C283 +
            (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                C278 -
            (C17712 + C17713) * C284 - (C17714 + C17715) * C50610) *
               C50760 * C17274 +
           ((C17713 + C17712) * C283 + (C17715 + C17714) * C278 -
            (C17716 + C17717) * C284 - (C17718 + C17719) * C50610) *
               C50760 * C17275 +
           ((C17717 + C17716) * C283 + (C17719 + C17718) * C278 -
            (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
                C284 -
            (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
                C50610) *
               C50760 * C17276) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
           C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
              C118 +
          (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
           C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
              C106 -
          (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
           C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
              C119 -
          (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
           C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
              C107 +
          (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
           C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
              C120 +
          (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
           C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
              C108 -
          (C20083 * C1110 + C20078 * C1115 + C20082 * C293 + C20077 * C311 +
           C20081 * C288 + C20076 * C301 + C20080 * C125 + C20075 * C135) *
              C121 -
          (C20083 * C1114 + C20078 * C1122 + C20082 * C312 + C20077 * C323 +
           C20081 * C302 + C20076 * C318 + C20080 * C136 + C20075 * C146) *
              C109) *
         C50760 * C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C278 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C50663 * C280 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C284 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C278 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C283) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C50610) *
              C50760 * C50626 * C50663 * C281 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C283 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C278 -
           (C20083 * C3546 + C20078 * C3549 + C20082 * C2509 + C20077 * C2513 +
            C20081 * C1112 + C20076 * C1119 + C20080 * C291 + C20075 * C307) *
               C284 -
           (C20083 * C3548 + C20078 * C3552 + C20082 * C2514 + C20077 * C2518 +
            C20081 * C1118 + C20076 * C1124 + C20080 * C308 + C20075 * C321) *
               C50610) *
              C50760 * C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C278 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C459 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C284 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C278 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C283) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C50610) *
              C50760 * C50626 * C460 +
          ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
            C20082 * C2702 + C20077 * C2705 + C20083 * C3701 + C20078 * C3705) *
               C283 +
           (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
            C20082 * C2706 + C20077 * C2711 + C20083 * C3704 + C20078 * C3707) *
               C278 -
           (C20083 * C3700 + C20078 * C3703 + C20082 * C2703 + C20077 * C2707 +
            C20081 * C1226 + C20076 * C1233 + C20080 * C468 + C20075 * C484) *
               C284 -
           (C20083 * C3702 + C20078 * C3706 + C20082 * C2708 + C20077 * C2712 +
            C20081 * C1232 + C20076 * C1238 + C20080 * C485 + C20075 * C498) *
               C50610) *
              C50760 * C50626 * C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C641 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50930 -
            (C17312 + C17313) * C642 - (C17314 + C17315) * C50931 +
            C17328 * C643 + C17329 * C638) *
               C50760 * C17274 +
           ((C17313 + C17312) * C641 + (C17315 + C17314) * C50930 -
            (C17317 + C17316) * C642 - (C17319 + C17318) * C50931 +
            (C17321 + C17320) * C643 + (C17323 + C17322) * C638) *
               C50760 * C17275 +
           (C17328 * C641 + C17329 * C50930 - C17330 * C642 - C17331 * C50931 +
            (C17325 + C17324) * C643 + (C17327 + C17326) * C638) *
               C50760 * C17276) *
              C50890 +
          (((C17704 + C17705) * C642 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50930 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C641) +
            (C17706 + C17707) * C50931 - C18026 * C643 - C18027 * C638) *
               C50760 * C17274 +
           ((C17708 + C17709) * C642 -
            ((C17707 + C17706) * C50930 + (C17705 + C17704) * C641) +
            (C17710 + C17711) * C50931 - (C18036 + C18037) * C643 -
            (C18038 + C18039) * C638) *
               C50760 * C17275 +
           ((C18037 + C18036) * C642 - (C18027 * C50930 + C18026 * C641) +
            (C18039 + C18038) * C50931 -
            (C17278 * C898 + C50796 * C907 + C17277 * C466 + C17272 * C480) *
                C643 -
            (C17278 * C908 + C50796 * C913 + C17277 * C481 + C17272 * C496) *
                C638) *
               C50760 * C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C641 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50930 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C642 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50931 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C643 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C638) *
              C50760 * C50626 * C50890 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C642 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50930 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C641) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C50931 -
           (C20083 * C3274 + C20078 * C3279 + C20082 * C1574 + C20077 * C1580 +
            C20081 * C896 + C20076 * C903 + C20080 * C464 + C20075 * C476) *
               C643 -
           (C20083 * C3280 + C20078 * C3283 + C20082 * C1579 + C20077 * C1586 +
            C20081 * C904 + C20076 * C911 + C20080 * C477 + C20075 * C494) *
               C638) *
              C50760 * C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
               C118 +
           (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
               C106 -
           (C17312 + C17313) * C119 - (C17314 + C17315) * C107 + C17328 * C120 +
           C17329 * C108 - C17330 * C121 - C17331 * C109) *
              C50760 * C17274 +
          ((C17313 + C17312) * C118 + (C17315 + C17314) * C106 -
           (C17317 + C17316) * C119 - (C17319 + C17318) * C107 +
           (C17321 + C17320) * C120 + (C17323 + C17322) * C108 -
           (C17324 + C17325) * C121 - (C17326 + C17327) * C109) *
              C50760 * C17275 +
          (C17328 * C118 + C17329 * C106 - C17330 * C119 - C17331 * C107 +
           (C17325 + C17324) * C120 + (C17327 + C17326) * C108 -
           (C17278 * C644 + C50796 * C645 + C17277 * C127 + C17272 * C139) *
               C121 -
           (C17278 * C646 + C50796 * C647 + C17277 * C140 + C17272 * C148) *
               C109) *
              C50760 * C17276) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C283 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C278 -
            (C17312 + C17313) * C284 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C283 + (C17315 + C17314) * C278 -
            (C17317 + C17316) * C284 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C283 + C17329 * C278 - C17330 * C284 - C17331 * C50610) *
               C50760 * C17276) *
              C50663 * C280 +
          (((C17510 + C17511) * C284 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C278 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C283) +
            (C17512 + C17513) * C50610) *
               C50760 * C17274 +
           ((C17514 + C17515) * C284 -
            ((C17513 + C17512) * C278 + (C17511 + C17510) * C283) +
            (C17516 + C17517) * C50610) *
               C50760 * C17275 +
           ((C17277 * C288 + C17272 * C301 + C17278 * C293 + C50796 * C311) *
                C284 -
            ((C17517 + C17516) * C278 + (C17515 + C17514) * C283) +
            (C17277 * C302 + C17272 * C318 + C17278 * C312 + C50796 * C323) *
                C50610) *
               C50760 * C17276) *
              C50663 * C281 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C283 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C278 -
            (C17518 + C17519) * C284 - (C17520 + C17521) * C50610) *
               C50760 * C17274 +
           ((C17519 + C17518) * C283 + (C17521 + C17520) * C278 -
            (C17522 + C17523) * C284 - (C17524 + C17525) * C50610) *
               C50760 * C17275 +
           ((C17523 + C17522) * C283 + (C17525 + C17524) * C278 -
            (C17278 * C1110 + C50796 * C1115 + C17277 * C293 + C17272 * C311) *
                C284 -
            (C17278 * C1114 + C50796 * C1122 + C17277 * C312 + C17272 * C323) *
                C50610) *
               C50760 * C17276) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
           C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
              C118 +
          (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
           C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
              C106 -
          (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
           C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
              C119 -
          (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
           C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
              C107 +
          (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
           C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
              C120 +
          (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
           C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
              C108 -
          (C20083 * C1110 + C20078 * C1115 + C20082 * C293 + C20077 * C311 +
           C20081 * C288 + C20076 * C301 + C20080 * C125 + C20075 * C135) *
              C121 -
          (C20083 * C1114 + C20078 * C1122 + C20082 * C312 + C20077 * C323 +
           C20081 * C302 + C20076 * C318 + C20080 * C136 + C20075 * C146) *
              C109) *
         C50760 * C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C283 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C278 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C284 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C50663 * C280 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C284 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C278 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C283) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C50610) *
              C50760 * C50626 * C50663 * C281 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C283 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C278 -
           (C20083 * C3546 + C20078 * C3549 + C20082 * C2509 + C20077 * C2513 +
            C20081 * C1112 + C20076 * C1119 + C20080 * C291 + C20075 * C307) *
               C284 -
           (C20083 * C3548 + C20078 * C3552 + C20082 * C2514 + C20077 * C2518 +
            C20081 * C1118 + C20076 * C1124 + C20080 * C308 + C20075 * C321) *
               C50610) *
              C50760 * C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50874 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C49720 + C17329 * C50874 - C17330 * C49713 -
            C17331 * C50610) *
               C50760 * C17276) *
              C50663 * C50934 +
          (((C17510 + C17511) * C49713 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50874 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C49720) +
            (C17512 + C17513) * C50610) *
               C50760 * C17274 +
           ((C17514 + C17515) * C49713 -
            ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
            (C17516 + C17517) * C50610) *
               C50760 * C17275 +
           ((C17877 + C17876) * C49713 - (C17867 * C50874 + C17866 * C49720) +
            (C17879 + C17878) * C50610) *
               C50760 * C17276) *
              C50663 * C50935 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C49720 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C50874 -
            (C17518 + C17519) * C49713 - (C17520 + C17521) * C50610) *
               C50760 * C17274 +
           ((C17519 + C17518) * C49720 + (C17521 + C17520) * C50874 -
            (C17522 + C17523) * C49713 - (C17524 + C17525) * C50610) *
               C50760 * C17275 +
           ((C17523 + C17522) * C49720 + (C17525 + C17524) * C50874 -
            (C17278 * C1110 + C50796 * C1115 + C17277 * C293 + C17272 * C311) *
                C49713 -
            (C17278 * C1114 + C50796 * C1122 + C17277 * C312 + C17272 * C323) *
                C50610) *
               C50760 * C17276) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50874 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C50663 * C50934 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C49713 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50874 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C49720) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C50610) *
              C50760 * C50626 * C50663 * C50935 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C49720 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C50874 -
           (C20083 * C3546 + C20078 * C3549 + C20082 * C2509 + C20077 * C2513 +
            C20081 * C1112 + C20076 * C1119 + C20080 * C291 + C20075 * C307) *
               C49713 -
           (C20083 * C3548 + C20078 * C3552 + C20082 * C2514 + C20077 * C2518 +
            C20081 * C1118 + C20076 * C1124 + C20080 * C308 + C20075 * C321) *
               C50610) *
              C50760 * C50626 * C50663 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C50890 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C50934 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C50727 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C50890) *
              C50935 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C50760 * C17274 +
            ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50760 *
                C17275 +
            ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) * C50760 *
                C17276) *
               C50890 -
           (((C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
              C17272 * C1586) *
                 C50605 +
             (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
              C17272 * C1580) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
              C17272 * C1587) *
                 C50605 +
             (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
              C17272 * C1582) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C3276 + C50796 * C3281 + C17277 * C1583 +
              C17272 * C1588) *
                 C50605 +
             (C17278 * C3272 + C50796 * C3275 + C17277 * C1576 +
              C17272 * C1584) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C50890 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C50727) *
              C50934 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C50727 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C50890) *
              C50935 +
          (((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
             C20082 * C2508 + C20077 * C2511 + C20083 * C3547 +
             C20078 * C3551) *
                C1109 +
            (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
             C20082 * C2512 + C20077 * C2517 + C20083 * C3550 +
             C20078 * C3553) *
                C50605) *
               C50760 * C50626 * C50890 -
           ((C20083 * C21203 + C20078 * C21205 + C20082 * C4198 +
             C20077 * C4201 + C20081 * C3276 + C20076 * C3281 + C20080 * C1583 +
             C20075 * C1588) *
                C50605 +
            (C20083 * C21202 + C20078 * C21204 + C20082 * C4195 +
             C20077 * C4199 + C20081 * C3272 + C20076 * C3275 + C20080 * C1576 +
             C20075 * C1584) *
                C1109) *
               C50760 * C50626 * C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1109 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50605) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
               C17275 +
           (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
              C50663 * C1105 -
          ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
           ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
               C17275 +
           ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                C50605 +
            (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                C1109) *
               C50760 * C17274) *
              C50663 * C1106 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C1109 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C50605) *
               C50760 * C17274 +
           ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50760 *
               C17275 +
           ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) * C50760 *
               C17276) *
              C50663 * C1107 -
          (((C17278 * C2516 + C50796 * C2519 + C17277 * C1116 +
             C17272 * C1123) *
                C50605 +
            (C17278 * C2510 + C50796 * C2515 + C17277 * C1111 +
             C17272 * C1117) *
                C1109) *
               C50760 * C17276 +
           ((C17278 * C2514 + C50796 * C2518 + C17277 * C1118 +
             C17272 * C1124) *
                C50605 +
            (C17278 * C2509 + C50796 * C2513 + C17277 * C1112 +
             C17272 * C1119) *
                C1109) *
               C50760 * C17275 +
           ((C17278 * C2512 + C50796 * C2517 + C17277 * C1120 +
             C17272 * C1125) *
                C50605 +
            (C17278 * C2508 + C50796 * C2511 + C17277 * C1113 +
             C17272 * C1121) *
                C1109) *
               C50760 * C17274) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
            (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
            (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
               C50760 * C17275 +
           (C17328 * C1035 + C17329 * C1030 - C17330 * C1036 - C17331 * C1031 +
            (C17325 + C17324) * C1037 + (C17327 + C17326) * C1032) *
               C50760 * C17276) *
              C50663 * C1033 +
          (((C17510 + C17511) * C1036 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C1030 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1035) +
            (C17512 + C17513) * C1031 - C17866 * C1037 - C17867 * C1032) *
               C50760 * C17274 +
           ((C17514 + C17515) * C1036 -
            ((C17513 + C17512) * C1030 + (C17511 + C17510) * C1035) +
            (C17516 + C17517) * C1031 - (C17876 + C17877) * C1037 -
            (C17878 + C17879) * C1032) *
               C50760 * C17275 +
           ((C17877 + C17876) * C1036 - (C17867 * C1030 + C17866 * C1035) +
            (C17879 + C17878) * C1031 -
            (C17278 * C294 + C50796 * C313 + C17277 * C289 + C17272 * C303) *
                C1037 -
            (C17278 * C314 + C50796 * C324 + C17277 * C304 + C17272 * C319) *
                C1032) *
               C50760 * C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C459 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C460 +
           (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                 C1109 +
             (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                 C50605) *
                C50760 * C17274 +
            ((C17713 + C17712) * C1109 + (C17715 + C17714) * C50605) * C50760 *
                C17275 +
            ((C17717 + C17716) * C1109 + (C17719 + C17718) * C50605) * C50760 *
                C17276) *
               C461) *
              C1033 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C460 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C459 -
           (((C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
              C17272 * C1237) *
                 C50605 +
             (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
              C17272 * C1231) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C2708 + C50796 * C2712 + C17277 * C1232 +
              C17272 * C1238) *
                 C50605 +
             (C17278 * C2703 + C50796 * C2707 + C17277 * C1226 +
              C17272 * C1233) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C2706 + C50796 * C2711 + C17277 * C1234 +
              C17272 * C1239) *
                 C50605 +
             (C17278 * C2702 + C50796 * C2705 + C17277 * C1227 +
              C17272 * C1235) *
                 C1109) *
                C50760 * C17274) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1035 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C1030 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C1036 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C1031 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C1037 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C1032) *
              C50760 * C50626 * C50663 * C1033 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C1036 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C1030 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1035) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C1031 -
           (C20083 * C2510 + C20078 * C2515 + C20082 * C1111 + C20077 * C1117 +
            C20081 * C292 + C20076 * C309 + C20080 * C287 + C20075 * C299) *
               C1037 -
           (C20083 * C2516 + C20078 * C2519 + C20082 * C1116 + C20077 * C1123 +
            C20081 * C310 + C20076 * C322 + C20080 * C300 + C20075 * C317) *
               C1032) *
              C50760 * C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1109 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50605) *
              C50760 * C50626 * C50663 * C1105 -
          ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
            C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
               C50605 +
           (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
            C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
               C1109) *
              C50760 * C50626 * C50663 * C1106 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C1109 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C50605) *
              C50760 * C50626 * C50663 * C1107 -
          ((C20083 * C20771 + C20078 * C20773 + C20082 * C3550 +
            C20077 * C3553 + C20081 * C2512 + C20076 * C2517 + C20080 * C1120 +
            C20075 * C1125) *
               C50605 +
           (C20083 * C20770 + C20078 * C20772 + C20082 * C3547 +
            C20077 * C3551 + C20081 * C2508 + C20076 * C2511 + C20080 * C1113 +
            C20075 * C1121) *
               C1109) *
              C50760 * C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C459 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C460 +
           ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
             C20082 * C2702 + C20077 * C2705 + C20083 * C3701 +
             C20078 * C3705) *
                C1109 +
            (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
             C20082 * C2706 + C20077 * C2711 + C20083 * C3704 +
             C20078 * C3707) *
                C50605) *
               C50760 * C50626 * C461) *
              C1033 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C460 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C459 -
           ((C20083 * C20873 + C20078 * C20875 + C20082 * C3704 +
             C20077 * C3707 + C20081 * C2706 + C20076 * C2711 + C20080 * C1234 +
             C20075 * C1239) *
                C50605 +
            (C20083 * C20872 + C20078 * C20874 + C20082 * C3701 +
             C20077 * C3705 + C20081 * C2702 + C20076 * C2705 + C20080 * C1227 +
             C20075 * C1235) *
                C1109) *
               C50760 * C50626 * C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50874 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                C50760 * C17274 +
            ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
                C50760 * C17275 +
            (C17328 * C49720 + C17329 * C50874 - C17330 * C49713 -
             C17331 * C50610) *
                C50760 * C17276) *
               C50890 +
           (((C17704 + C17705) * C49713 -
             ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                  C50874 +
              (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                  C49720) +
             (C17706 + C17707) * C50610) *
                C50760 * C17274 +
            ((C17708 + C17709) * C49713 -
             ((C17707 + C17706) * C50874 + (C17705 + C17704) * C49720) +
             (C17710 + C17711) * C50610) *
                C50760 * C17275 +
            ((C18037 + C18036) * C49713 - (C18027 * C50874 + C18026 * C49720) +
             (C18039 + C18038) * C50610) *
                C50760 * C17276) *
               C50727) *
              C1033 +
          ((((C17510 + C17511) * C49713 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50874 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C49720) +
             (C17512 + C17513) * C50610) *
                C50760 * C17274 +
            ((C17514 + C17515) * C49713 -
             ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
             (C17516 + C17517) * C50610) *
                C50760 * C17275 +
            ((C17877 + C17876) * C49713 - (C17867 * C50874 + C17866 * C49720) +
             (C17879 + C17878) * C50610) *
                C50760 * C17276) *
               C50890 +
           (((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C49720 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50874 -
             (C18250 + C18251) * C49713 - (C18252 + C18253) * C50610) *
                C50760 * C17274 +
            ((C18251 + C18250) * C49720 + (C18253 + C18252) * C50874 -
             (C18254 + C18255) * C49713 - (C18256 + C18257) * C50610) *
                C50760 * C17275 +
            ((C18255 + C18254) * C49720 + (C18257 + C18256) * C50874 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C49713 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C50610) *
                C50760 * C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C49720 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50874 -
            (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
             C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
                C49713 -
            (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
             C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
                C50610) *
               C50760 * C50626 * C50890 +
           ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
             C20082 * C1575 + C20077 * C1582 + C20083 * C3273 +
             C20078 * C3277) *
                C49713 -
            ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 +
              C20077 * C1588 + C20081 * C900 + C20076 * C909 + C20080 * C473 +
              C20075 * C492) *
                 C50874 +
             (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 +
              C20077 * C1584 + C20081 * C894 + C20076 * C899 + C20080 * C463 +
              C20075 * C474) *
                 C49720) +
            (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
             C20082 * C1581 + C20077 * C1587 + C20083 * C3278 +
             C20078 * C3282) *
                C50610) *
               C50760 * C50626 * C50727) *
              C1033 +
          (((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
             C20082 * C1112 + C20077 * C1119 + C20083 * C2509 +
             C20078 * C2513) *
                C49713 -
            ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 +
              C20077 * C1125 + C20081 * C306 + C20076 * C320 + C20080 * C296 +
              C20075 * C315) *
                 C50874 +
             (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 +
              C20077 * C1121 + C20081 * C290 + C20076 * C305 + C20080 * C286 +
              C20075 * C297) *
                 C49720) +
            (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
             C20082 * C1118 + C20077 * C1124 + C20083 * C2514 +
             C20078 * C2518) *
                C50610) *
               C50760 * C50626 * C50890 +
           ((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C49720 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50874 -
            (C20083 * C4194 + C20078 * C4197 + C20082 * C3273 + C20077 * C3277 +
             C20081 * C1575 + C20076 * C1582 + C20080 * C895 + C20075 * C901) *
                C49713 -
            (C20083 * C4196 + C20078 * C4200 + C20082 * C3278 + C20077 * C3282 +
             C20081 * C1581 + C20076 * C1587 + C20080 * C902 + C20075 * C910) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
            (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
            (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
               C50760 * C17275 +
           (C17328 * C1035 + C17329 * C1030 - C17330 * C1036 - C17331 * C1031 +
            (C17325 + C17324) * C1037 + (C17327 + C17326) * C1032) *
               C50760 * C17276) *
              C50663 * C1033 +
          (((C17510 + C17511) * C1036 -
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C1030 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1035) +
            (C17512 + C17513) * C1031 - C17866 * C1037 - C17867 * C1032) *
               C50760 * C17274 +
           ((C17514 + C17515) * C1036 -
            ((C17513 + C17512) * C1030 + (C17511 + C17510) * C1035) +
            (C17516 + C17517) * C1031 - (C17876 + C17877) * C1037 -
            (C17878 + C17879) * C1032) *
               C50760 * C17275 +
           ((C17877 + C17876) * C1036 - (C17867 * C1030 + C17866 * C1035) +
            (C17879 + C17878) * C1031 -
            (C17278 * C294 + C50796 * C313 + C17277 * C289 + C17272 * C303) *
                C1037 -
            (C17278 * C314 + C50796 * C324 + C17277 * C304 + C17272 * C319) *
                C1032) *
               C50760 * C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1109 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50605) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
               C17275 +
           (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
              C50663 * C1105 -
          ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
           ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
               C17275 +
           ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                C50605 +
            (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                C1109) *
               C50760 * C17274) *
              C50663 * C1106 +
          (((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                C1109 +
            (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                C50605) *
               C50760 * C17274 +
           ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50760 *
               C17275 +
           ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) * C50760 *
               C17276) *
              C50663 * C1107 -
          (((C17278 * C2516 + C50796 * C2519 + C17277 * C1116 +
             C17272 * C1123) *
                C50605 +
            (C17278 * C2510 + C50796 * C2515 + C17277 * C1111 +
             C17272 * C1117) *
                C1109) *
               C50760 * C17276 +
           ((C17278 * C2514 + C50796 * C2518 + C17277 * C1118 +
             C17272 * C1124) *
                C50605 +
            (C17278 * C2509 + C50796 * C2513 + C17277 * C1112 +
             C17272 * C1119) *
                C1109) *
               C50760 * C17275 +
           ((C17278 * C2512 + C50796 * C2517 + C17277 * C1120 +
             C17272 * C1125) *
                C50605 +
            (C17278 * C2508 + C50796 * C2511 + C17277 * C1113 +
             C17272 * C1121) *
                C1109) *
               C50760 * C17274) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1035 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C1030 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C1036 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C1031 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C1037 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C1032) *
              C50760 * C50626 * C50663 * C1033 +
          ((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
            C20082 * C1112 + C20077 * C1119 + C20083 * C2509 + C20078 * C2513) *
               C1036 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C1030 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1035) +
           (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
            C20082 * C1118 + C20077 * C1124 + C20083 * C2514 + C20078 * C2518) *
               C1031 -
           (C20083 * C2510 + C20078 * C2515 + C20082 * C1111 + C20077 * C1117 +
            C20081 * C292 + C20076 * C309 + C20080 * C287 + C20075 * C299) *
               C1037 -
           (C20083 * C2516 + C20078 * C2519 + C20082 * C1116 + C20077 * C1123 +
            C20081 * C310 + C20076 * C322 + C20080 * C300 + C20075 * C317) *
               C1032) *
              C50760 * C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1109 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50605) *
              C50760 * C50626 * C50663 * C1105 -
          ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
            C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
               C50605 +
           (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
            C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
               C1109) *
              C50760 * C50626 * C50663 * C1106 +
          ((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
            C20082 * C2508 + C20077 * C2511 + C20083 * C3547 + C20078 * C3551) *
               C1109 +
           (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
            C20082 * C2512 + C20077 * C2517 + C20083 * C3550 + C20078 * C3553) *
               C50605) *
              C50760 * C50626 * C50663 * C1107 -
          ((C20083 * C20771 + C20078 * C20773 + C20082 * C3550 +
            C20077 * C3553 + C20081 * C2512 + C20076 * C2517 + C20080 * C1120 +
            C20075 * C1125) *
               C50605 +
           (C20083 * C20770 + C20078 * C20772 + C20082 * C3547 +
            C20077 * C3551 + C20081 * C2508 + C20076 * C2511 + C20080 * C1113 +
            C20075 * C1121) *
               C1109) *
              C50760 * C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C49720 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50874 -
             (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
                C50760 * C17274 +
            ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
             (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
                C50760 * C17275 +
            (C17328 * C49720 + C17329 * C50874 - C17330 * C49713 -
             C17331 * C50610) *
                C50760 * C17276) *
               C1687 +
           (((C17704 + C17705) * C49713 -
             ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                  C50874 +
              (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                  C49720) +
             (C17706 + C17707) * C50610) *
                C50760 * C17274 +
            ((C17708 + C17709) * C49713 -
             ((C17707 + C17706) * C50874 + (C17705 + C17704) * C49720) +
             (C17710 + C17711) * C50610) *
                C50760 * C17275 +
            ((C18037 + C18036) * C49713 - (C18027 * C50874 + C18026 * C49720) +
             (C18039 + C18038) * C50610) *
                C50760 * C17276) *
               C50727) *
              C50889 +
          ((((C17510 + C17511) * C49713 -
             ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                  C50874 +
              (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                  C49720) +
             (C17512 + C17513) * C50610) *
                C50760 * C17274 +
            ((C17514 + C17515) * C49713 -
             ((C17513 + C17512) * C50874 + (C17511 + C17510) * C49720) +
             (C17516 + C17517) * C50610) *
                C50760 * C17275 +
            ((C17877 + C17876) * C49713 - (C17867 * C50874 + C17866 * C49720) +
             (C17879 + C17878) * C50610) *
                C50760 * C17276) *
               C1687 +
           (((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C49720 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50874 -
             (C18250 + C18251) * C49713 - (C18252 + C18253) * C50610) *
                C50760 * C17274 +
            ((C18251 + C18250) * C49720 + (C18253 + C18252) * C50874 -
             (C18254 + C18255) * C49713 - (C18256 + C18257) * C50610) *
                C50760 * C17275 +
            ((C18255 + C18254) * C49720 + (C18257 + C18256) * C50874 -
             (C17278 * C1573 + C50796 * C1578 + C17277 * C897 + C17272 * C905) *
                 C49713 -
             (C17278 * C1577 + C50796 * C1585 + C17277 * C906 + C17272 * C912) *
                 C50610) *
                C50760 * C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C49720 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50874 -
            (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
             C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
                C49713 -
            (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
             C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
                C50610) *
               C50760 * C50626 * C1687 +
           ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
             C20082 * C1575 + C20077 * C1582 + C20083 * C3273 +
             C20078 * C3277) *
                C49713 -
            ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 +
              C20077 * C1588 + C20081 * C900 + C20076 * C909 + C20080 * C473 +
              C20075 * C492) *
                 C50874 +
             (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 +
              C20077 * C1584 + C20081 * C894 + C20076 * C899 + C20080 * C463 +
              C20075 * C474) *
                 C49720) +
            (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
             C20082 * C1581 + C20077 * C1587 + C20083 * C3278 +
             C20078 * C3282) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50889 +
          (((C20080 * C285 + C20075 * C295 + C20081 * C291 + C20076 * C307 +
             C20082 * C1112 + C20077 * C1119 + C20083 * C2509 +
             C20078 * C2513) *
                C49713 -
            ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 +
              C20077 * C1125 + C20081 * C306 + C20076 * C320 + C20080 * C296 +
              C20075 * C315) *
                 C50874 +
             (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 +
              C20077 * C1121 + C20081 * C290 + C20076 * C305 + C20080 * C286 +
              C20075 * C297) *
                 C49720) +
            (C20080 * C298 + C20075 * C316 + C20081 * C308 + C20076 * C321 +
             C20082 * C1118 + C20077 * C1124 + C20083 * C2514 +
             C20078 * C2518) *
                C50610) *
               C50760 * C50626 * C1687 +
           ((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C49720 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50874 -
            (C20083 * C4194 + C20078 * C4197 + C20082 * C3273 + C20077 * C3277 +
             C20081 * C1575 + C20076 * C1582 + C20080 * C895 + C20075 * C901) *
                C49713 -
            (C20083 * C4196 + C20078 * C4200 + C20082 * C3278 + C20077 * C3282 +
             C20081 * C1581 + C20076 * C1587 + C20080 * C902 + C20075 * C910) *
                C50610) *
               C50760 * C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C50936 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C50937 +
           (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                 C1109 +
             (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                 C50605) *
                C50760 * C17274 +
            ((C17713 + C17712) * C1109 + (C17715 + C17714) * C50605) * C50760 *
                C17275 +
            ((C17717 + C17716) * C1109 + (C17719 + C17718) * C50605) * C50760 *
                C17276) *
               C2103) *
              C50889 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C50937 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C50936 -
           (((C17278 * C2710 + C50796 * C2713 + C17277 * C1230 +
              C17272 * C1237) *
                 C50605 +
             (C17278 * C2704 + C50796 * C2709 + C17277 * C1225 +
              C17272 * C1231) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C2708 + C50796 * C2712 + C17277 * C1232 +
              C17272 * C1238) *
                 C50605 +
             (C17278 * C2703 + C50796 * C2707 + C17277 * C1226 +
              C17272 * C1233) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C2706 + C50796 * C2711 + C17277 * C1234 +
              C17272 * C1239) *
                 C50605 +
             (C17278 * C2702 + C50796 * C2705 + C17277 * C1227 +
              C17272 * C1235) *
                 C1109) *
                C50760 * C17274) *
               C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C50936 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C50937 +
           ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
             C20082 * C2702 + C20077 * C2705 + C20083 * C3701 +
             C20078 * C3705) *
                C1109 +
            (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
             C20082 * C2706 + C20077 * C2711 + C20083 * C3704 +
             C20078 * C3707) *
                C50605) *
               C50760 * C50626 * C2103) *
              C50889 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C50937 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C50936 -
           ((C20083 * C20873 + C20078 * C20875 + C20082 * C3704 +
             C20077 * C3707 + C20081 * C2706 + C20076 * C2711 + C20080 * C1234 +
             C20075 * C1239) *
                C50605 +
            (C20083 * C20872 + C20078 * C20874 + C20082 * C3701 +
             C20077 * C3705 + C20081 * C2702 + C20076 * C2705 + C20080 * C1227 +
             C20075 * C1235) *
                C1109) *
               C50760 * C50626 * C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C1687 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C280 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C50727 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C1687) *
              C281 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C50760 * C17274 +
            ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50760 *
                C17275 +
            ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) * C50760 *
                C17276) *
               C1687 -
           (((C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
              C17272 * C1586) *
                 C50605 +
             (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
              C17272 * C1580) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
              C17272 * C1587) *
                 C50605 +
             (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
              C17272 * C1582) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C3276 + C50796 * C3281 + C17277 * C1583 +
              C17272 * C1588) *
                 C50605 +
             (C17278 * C3272 + C50796 * C3275 + C17277 * C1576 +
              C17272 * C1584) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
            (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
            (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
               C50760 * C17275 +
           (C17328 * C1035 + C17329 * C1030 - C17330 * C1036 - C17331 * C1031 +
            (C17325 + C17324) * C1037 + (C17327 + C17326) * C1032) *
               C50760 * C17276) *
              C1687 +
          (((C17704 + C17705) * C1036 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C1030 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1035) +
            (C17706 + C17707) * C1031 - C18026 * C1037 - C18027 * C1032) *
               C50760 * C17274 +
           ((C17708 + C17709) * C1036 -
            ((C17707 + C17706) * C1030 + (C17705 + C17704) * C1035) +
            (C17710 + C17711) * C1031 - (C18036 + C18037) * C1037 -
            (C18038 + C18039) * C1032) *
               C50760 * C17275 +
           ((C18037 + C18036) * C1036 - (C18027 * C1030 + C18026 * C1035) +
            (C18039 + C18038) * C1031 -
            (C17278 * C898 + C50796 * C907 + C17277 * C466 + C17272 * C480) *
                C1037 -
            (C17278 * C908 + C50796 * C913 + C17277 * C481 + C17272 * C496) *
                C1032) *
               C50760 * C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1109 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50605) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
               C17275 +
           (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
              C1853 -
          ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
           ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
               C17275 +
           ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                C50605 +
            (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                C1109) *
               C50760 * C17274) *
              C1854 +
          (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                C1109 +
            (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                C50605) *
               C50760 * C17274 +
           ((C17713 + C17712) * C1109 + (C17715 + C17714) * C50605) * C50760 *
               C17275 +
           ((C17717 + C17716) * C1109 + (C17719 + C17718) * C50605) * C50760 *
               C17276) *
              C1855 -
          (((C17278 * C6101 + C50796 * C6102 + C17277 * C1863 +
             C17272 * C1870) *
                C50605 +
            (C17278 * C6099 + C50796 * C6100 + C17277 * C1858 +
             C17272 * C1864) *
                C1109) *
               C50760 * C17276 +
           ((C17278 * C4597 + C50796 * C4605 + C17277 * C1865 +
             C17272 * C1871) *
                C50605 +
            (C17278 * C4593 + C50796 * C4599 + C17277 * C1859 +
             C17272 * C1866) *
                C1109) *
               C50760 * C17275 +
           ((C17278 * C4601 + C50796 * C4607 + C17277 * C1867 +
             C17272 * C1872) *
                C50605 +
            (C17278 * C4595 + C50796 * C4603 + C17277 * C1860 +
             C17272 * C1868) *
                C1109) *
               C50760 * C17274) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1035 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C1030 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C1036 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C1031 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C1037 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C1032) *
              C50760 * C50626 * C1687 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C1036 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C1030 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1035) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C1031 -
           (C20083 * C3274 + C20078 * C3279 + C20082 * C1574 + C20077 * C1580 +
            C20081 * C896 + C20076 * C903 + C20080 * C464 + C20075 * C476) *
               C1037 -
           (C20083 * C3280 + C20078 * C3283 + C20082 * C1579 + C20077 * C1586 +
            C20081 * C904 + C20076 * C911 + C20080 * C477 + C20075 * C494) *
               C1032) *
              C50760 * C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C1687 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C50727) *
              C280 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C50727 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C1687) *
              C281 +
          (((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
             C20082 * C2508 + C20077 * C2511 + C20083 * C3547 +
             C20078 * C3551) *
                C1109 +
            (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
             C20082 * C2512 + C20077 * C2517 + C20083 * C3550 +
             C20078 * C3553) *
                C50605) *
               C50760 * C50626 * C1687 -
           ((C20083 * C21203 + C20078 * C21205 + C20082 * C4198 +
             C20077 * C4201 + C20081 * C3276 + C20076 * C3281 + C20080 * C1583 +
             C20075 * C1588) *
                C50605 +
            (C20083 * C21202 + C20078 * C21204 + C20082 * C4195 +
             C20077 * C4199 + C20081 * C3272 + C20076 * C3275 + C20080 * C1576 +
             C20075 * C1584) *
                C1109) *
               C50760 * C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1109 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50605) *
              C50760 * C50626 * C1853 -
          ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
            C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
               C50605 +
           (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
            C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
               C1109) *
              C50760 * C50626 * C1854 +
          ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
            C20082 * C2702 + C20077 * C2705 + C20083 * C3701 + C20078 * C3705) *
               C1109 +
           (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
            C20082 * C2706 + C20077 * C2711 + C20083 * C3704 + C20078 * C3707) *
               C50605) *
              C50760 * C50626 * C1855 -
          ((C20083 * C21469 + C20078 * C21471 + C20082 * C4600 +
            C20077 * C4606 + C20081 * C4601 + C20076 * C4607 + C20080 * C1867 +
            C20075 * C1872) *
               C50605 +
           (C20083 * C21468 + C20078 * C21470 + C20082 * C4594 +
            C20077 * C4602 + C20081 * C4595 + C20076 * C4603 + C20080 * C1860 +
            C20075 * C1868) *
               C1109) *
              C50760 * C50626 * C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C49720 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C50874 -
            (C17312 + C17313) * C49713 - (C17314 + C17315) * C50610) *
               C50760 * C17274 +
           ((C17313 + C17312) * C49720 + (C17315 + C17314) * C50874 -
            (C17317 + C17316) * C49713 - (C17319 + C17318) * C50610) *
               C50760 * C17275 +
           (C17328 * C49720 + C17329 * C50874 - C17330 * C49713 -
            C17331 * C50610) *
               C50760 * C17276) *
              C50936 +
          (((C17704 + C17705) * C49713 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50874 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C49720) +
            (C17706 + C17707) * C50610) *
               C50760 * C17274 +
           ((C17708 + C17709) * C49713 -
            ((C17707 + C17706) * C50874 + (C17705 + C17704) * C49720) +
            (C17710 + C17711) * C50610) *
               C50760 * C17275 +
           ((C18037 + C18036) * C49713 - (C18027 * C50874 + C18026 * C49720) +
            (C18039 + C18038) * C50610) *
               C50760 * C17276) *
              C50937 +
          (((C17277 * C467 + C17272 * C482 + C17278 * C1227 + C50796 * C1235) *
                C49720 +
            (C17277 * C483 + C17272 * C497 + C17278 * C1234 + C50796 * C1239) *
                C50874 -
            (C17712 + C17713) * C49713 - (C17714 + C17715) * C50610) *
               C50760 * C17274 +
           ((C17713 + C17712) * C49720 + (C17715 + C17714) * C50874 -
            (C17716 + C17717) * C49713 - (C17718 + C17719) * C50610) *
               C50760 * C17275 +
           ((C17717 + C17716) * C49720 + (C17719 + C17718) * C50874 -
            (C17278 * C1224 + C50796 * C1229 + C17277 * C470 + C17272 * C488) *
                C49713 -
            (C17278 * C1228 + C50796 * C1236 + C17277 * C489 + C17272 * C500) *
                C50610) *
               C50760 * C17276) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C49720 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C50874 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C49713 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C50610) *
              C50760 * C50626 * C50936 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C49713 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50874 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C49720) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C50610) *
              C50760 * C50626 * C50937 +
          ((C20080 * C467 + C20075 * C482 + C20081 * C1227 + C20076 * C1235 +
            C20082 * C2702 + C20077 * C2705 + C20083 * C3701 + C20078 * C3705) *
               C49720 +
           (C20080 * C483 + C20075 * C497 + C20081 * C1234 + C20076 * C1239 +
            C20082 * C2706 + C20077 * C2711 + C20083 * C3704 + C20078 * C3707) *
               C50874 -
           (C20083 * C3700 + C20078 * C3703 + C20082 * C2703 + C20077 * C2707 +
            C20081 * C1226 + C20076 * C1233 + C20080 * C468 + C20075 * C484) *
               C49713 -
           (C20083 * C3702 + C20078 * C3706 + C20082 * C2708 + C20077 * C2712 +
            C20081 * C1232 + C20076 * C1238 + C20080 * C485 + C20075 * C498) *
               C50610) *
              C50760 * C50626 * C2103) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                C1035 +
            (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                C1030 -
            (C17312 + C17313) * C1036 - (C17314 + C17315) * C1031 +
            C17328 * C1037 + C17329 * C1032) *
               C50760 * C17274 +
           ((C17313 + C17312) * C1035 + (C17315 + C17314) * C1030 -
            (C17317 + C17316) * C1036 - (C17319 + C17318) * C1031 +
            (C17321 + C17320) * C1037 + (C17323 + C17322) * C1032) *
               C50760 * C17275 +
           (C17328 * C1035 + C17329 * C1030 - C17330 * C1036 - C17331 * C1031 +
            (C17325 + C17324) * C1037 + (C17327 + C17326) * C1032) *
               C50760 * C17276) *
              C1687 +
          (((C17704 + C17705) * C1036 -
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C1030 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1035) +
            (C17706 + C17707) * C1031 - C18026 * C1037 - C18027 * C1032) *
               C50760 * C17274 +
           ((C17708 + C17709) * C1036 -
            ((C17707 + C17706) * C1030 + (C17705 + C17704) * C1035) +
            (C17710 + C17711) * C1031 - (C18036 + C18037) * C1037 -
            (C18038 + C18039) * C1032) *
               C50760 * C17275 +
           ((C18037 + C18036) * C1036 - (C18027 * C1030 + C18026 * C1035) +
            (C18039 + C18038) * C1031 -
            (C17278 * C898 + C50796 * C907 + C17277 * C466 + C17272 * C480) *
                C1037 -
            (C17278 * C908 + C50796 * C913 + C17277 * C481 + C17272 * C496) *
                C1032) *
               C50760 * C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C17277 * C122 + C17272 * C129 + C17278 * C286 + C50796 * C297) *
                 C1109 +
             (C17277 * C130 + C17272 * C143 + C17278 * C296 + C50796 * C315) *
                 C50605) *
                C50760 * C17274 +
            ((C17313 + C17312) * C1109 + (C17315 + C17314) * C50605) * C50760 *
                C17275 +
            (C17328 * C1109 + C17329 * C50605) * C50760 * C17276) *
               C1687 -
           ((C18027 * C50605 + C18026 * C1109) * C50760 * C17276 +
            ((C17707 + C17706) * C50605 + (C17705 + C17704) * C1109) * C50760 *
                C17275 +
            ((C17278 * C900 + C50796 * C909 + C17277 * C473 + C17272 * C492) *
                 C50605 +
             (C17278 * C894 + C50796 * C899 + C17277 * C463 + C17272 * C474) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C280 +
          ((((C17277 * C894 + C17272 * C899 + C17278 * C1576 + C50796 * C1584) *
                 C1109 +
             (C17277 * C900 + C17272 * C909 + C17278 * C1583 + C50796 * C1588) *
                 C50605) *
                C50760 * C17274 +
            ((C18251 + C18250) * C1109 + (C18253 + C18252) * C50605) * C50760 *
                C17275 +
            ((C18255 + C18254) * C1109 + (C18257 + C18256) * C50605) * C50760 *
                C17276) *
               C50727 -
           ((C17867 * C50605 + C17866 * C1109) * C50760 * C17276 +
            ((C17513 + C17512) * C50605 + (C17511 + C17510) * C1109) * C50760 *
                C17275 +
            ((C17278 * C306 + C50796 * C320 + C17277 * C296 + C17272 * C315) *
                 C50605 +
             (C17278 * C290 + C50796 * C305 + C17277 * C286 + C17272 * C297) *
                 C1109) *
                C50760 * C17274) *
               C1687) *
              C281 +
          ((((C17277 * C290 + C17272 * C305 + C17278 * C1113 + C50796 * C1121) *
                 C1109 +
             (C17277 * C306 + C17272 * C320 + C17278 * C1120 + C50796 * C1125) *
                 C50605) *
                C50760 * C17274 +
            ((C17519 + C17518) * C1109 + (C17521 + C17520) * C50605) * C50760 *
                C17275 +
            ((C17523 + C17522) * C1109 + (C17525 + C17524) * C50605) * C50760 *
                C17276) *
               C1687 -
           (((C17278 * C3280 + C50796 * C3283 + C17277 * C1579 +
              C17272 * C1586) *
                 C50605 +
             (C17278 * C3274 + C50796 * C3279 + C17277 * C1574 +
              C17272 * C1580) *
                 C1109) *
                C50760 * C17276 +
            ((C17278 * C3278 + C50796 * C3282 + C17277 * C1581 +
              C17272 * C1587) *
                 C50605 +
             (C17278 * C3273 + C50796 * C3277 + C17277 * C1575 +
              C17272 * C1582) *
                 C1109) *
                C50760 * C17275 +
            ((C17278 * C3276 + C50796 * C3281 + C17277 * C1583 +
              C17272 * C1588) *
                 C50605 +
             (C17278 * C3272 + C50796 * C3275 + C17277 * C1576 +
              C17272 * C1584) *
                 C1109) *
                C50760 * C17274) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
            C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
               C1035 +
           (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
            C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
               C1030 -
           (C20083 * C1112 + C20078 * C1119 + C20082 * C291 + C20077 * C307 +
            C20081 * C285 + C20076 * C295 + C20080 * C123 + C20075 * C131) *
               C1036 -
           (C20083 * C1118 + C20078 * C1124 + C20082 * C308 + C20077 * C321 +
            C20081 * C298 + C20076 * C316 + C20080 * C132 + C20075 * C144) *
               C1031 +
           (C20080 * C124 + C20075 * C133 + C20081 * C287 + C20076 * C299 +
            C20082 * C292 + C20077 * C309 + C20083 * C1111 + C20078 * C1117) *
               C1037 +
           (C20080 * C134 + C20075 * C145 + C20081 * C300 + C20076 * C317 +
            C20082 * C310 + C20077 * C322 + C20083 * C1116 + C20078 * C1123) *
               C1032) *
              C50760 * C50626 * C1687 +
          ((C20080 * C462 + C20075 * C472 + C20081 * C895 + C20076 * C901 +
            C20082 * C1575 + C20077 * C1582 + C20083 * C3273 + C20078 * C3277) *
               C1036 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C1030 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1035) +
           (C20080 * C475 + C20075 * C493 + C20081 * C902 + C20076 * C910 +
            C20082 * C1581 + C20077 * C1587 + C20083 * C3278 + C20078 * C3282) *
               C1031 -
           (C20083 * C3274 + C20078 * C3279 + C20082 * C1574 + C20077 * C1580 +
            C20081 * C896 + C20076 * C903 + C20080 * C464 + C20075 * C476) *
               C1037 -
           (C20083 * C3280 + C20078 * C3283 + C20082 * C1579 + C20077 * C1586 +
            C20081 * C904 + C20076 * C911 + C20080 * C477 + C20075 * C494) *
               C1032) *
              C50760 * C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20080 * C122 + C20075 * C129 + C20081 * C286 + C20076 * C297 +
             C20082 * C290 + C20077 * C305 + C20083 * C1113 + C20078 * C1121) *
                C1109 +
            (C20080 * C130 + C20075 * C143 + C20081 * C296 + C20076 * C315 +
             C20082 * C306 + C20077 * C320 + C20083 * C1120 + C20078 * C1125) *
                C50605) *
               C50760 * C50626 * C1687 -
           ((C20083 * C3276 + C20078 * C3281 + C20082 * C1583 + C20077 * C1588 +
             C20081 * C900 + C20076 * C909 + C20080 * C473 + C20075 * C492) *
                C50605 +
            (C20083 * C3272 + C20078 * C3275 + C20082 * C1576 + C20077 * C1584 +
             C20081 * C894 + C20076 * C899 + C20080 * C463 + C20075 * C474) *
                C1109) *
               C50760 * C50626 * C50727) *
              C280 +
          (((C20080 * C894 + C20075 * C899 + C20081 * C1576 + C20076 * C1584 +
             C20082 * C3272 + C20077 * C3275 + C20083 * C4195 +
             C20078 * C4199) *
                C1109 +
            (C20080 * C900 + C20075 * C909 + C20081 * C1583 + C20076 * C1588 +
             C20082 * C3276 + C20077 * C3281 + C20083 * C4198 +
             C20078 * C4201) *
                C50605) *
               C50760 * C50626 * C50727 -
           ((C20083 * C2512 + C20078 * C2517 + C20082 * C1120 + C20077 * C1125 +
             C20081 * C306 + C20076 * C320 + C20080 * C296 + C20075 * C315) *
                C50605 +
            (C20083 * C2508 + C20078 * C2511 + C20082 * C1113 + C20077 * C1121 +
             C20081 * C290 + C20076 * C305 + C20080 * C286 + C20075 * C297) *
                C1109) *
               C50760 * C50626 * C1687) *
              C281 +
          (((C20080 * C290 + C20075 * C305 + C20081 * C1113 + C20076 * C1121 +
             C20082 * C2508 + C20077 * C2511 + C20083 * C3547 +
             C20078 * C3551) *
                C1109 +
            (C20080 * C306 + C20075 * C320 + C20081 * C1120 + C20076 * C1125 +
             C20082 * C2512 + C20077 * C2517 + C20083 * C3550 +
             C20078 * C3553) *
                C50605) *
               C50760 * C50626 * C1687 -
           ((C20083 * C21203 + C20078 * C21205 + C20082 * C4198 +
             C20077 * C4201 + C20081 * C3276 + C20076 * C3281 + C20080 * C1583 +
             C20075 * C1588) *
                C50605 +
            (C20083 * C21202 + C20078 * C21204 + C20082 * C4195 +
             C20077 * C4199 + C20081 * C3272 + C20076 * C3275 + C20080 * C1576 +
             C20075 * C1584) *
                C1109) *
               C50760 * C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C641 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50930 -
             (C8179 + C8180) * C642 - (C8181 + C8182) * C50931 + C8195 * C643 +
             C8196 * C638) *
                C33763 +
            ((C14123 + C14124) * C641 + (C14125 + C14126) * C50930 -
             C14099 * C642 - C14100 * C50931 + C14523 * C643 + C14524 * C638) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C641 + (C8182 + C8181) * C50930 -
             (C8184 + C8183) * C642 - (C8186 + C8185) * C50931 +
             (C8188 + C8187) * C643 + (C8190 + C8189) * C638) *
                C33763 +
            (C14101 * C641 + C14102 * C50930 - C8893 * C642 - C8894 * C50931 +
             (C8904 + C8903) * C643 + (C8906 + C8905) * C638) *
                C50824) *
               C50631) *
              C50663 * C50889 +
          ((((C8377 + C8378) * C642 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50930 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C641) +
             (C8379 + C8380) * C50931 - C8733 * C643 - C8734 * C638) *
                C33763 +
            (C14783 * C642 -
             ((C14803 + C14804) * C50930 + (C14805 + C14806) * C641) +
             C14792 * C50931 - (C9121 + C9122) * C643 -
             (C9123 + C9124) * C638) *
                C50824) *
               C50881 +
           (((C8381 + C8382) * C642 -
             ((C8380 + C8379) * C50930 + (C8378 + C8377) * C641) +
             (C8383 + C8384) * C50931 - (C8743 + C8744) * C643 -
             (C8745 + C8746) * C638) *
                C33763 +
            ((C9122 + C9121) * C642 - (C14793 * C50930 + C14794 * C641) +
             (C9124 + C9123) * C50931 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C643 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C638) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C283 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C278 -
              (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                 C33763 +
             ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
              C14099 * C284 - C14100 * C50610) *
                 C50824) *
                C50881 +
            (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
              (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                 C33763 +
             (C14101 * C283 + C14102 * C278 - C8893 * C284 - C8894 * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           (((C14101 * C284 -
              ((C14126 + C14125) * C278 + (C14124 + C14123) * C283) +
              C14102 * C50610) *
                 C33763 +
             (C14103 * C284 -
              ((C14127 + C14128) * C278 + (C14129 + C14130) * C283) +
              C14112 * C50610) *
                 C50824) *
                C50881 +
            ((C14523 * C284 - (C14100 * C278 + C14099 * C283) +
              C14524 * C50610) *
                 C33763 +
             ((C8584 + C8583) * C284 - (C14113 * C278 + C14114 * C283) +
              (C8586 + C8585) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50889 +
          (((((C8377 + C8378) * C284 -
              ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                   C278 +
               (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                   C283) +
              (C8379 + C8380) * C50610) *
                 C33763 +
             (C14783 * C284 -
              ((C14803 + C14804) * C278 + (C14805 + C14806) * C283) +
              C14792 * C50610) *
                 C50824) *
                C50881 +
            (((C8381 + C8382) * C284 -
              ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
              (C8383 + C8384) * C50610) *
                 C33763 +
             ((C9122 + C9121) * C284 - (C14793 * C278 + C14794 * C283) +
              (C9124 + C9123) * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           ((((C14806 + C14805) * C283 + (C14804 + C14803) * C278 -
              C14794 * C284 - C14793 * C50610) *
                 C33763 +
             ((C15337 + C15338) * C283 + (C15339 + C15340) * C278 -
              (C14807 + C14808) * C284 - (C14809 + C14810) * C50610) *
                 C50824) *
                C50881 +
            ((C14783 * C283 + C14792 * C278 - (C9121 + C9122) * C284 -
              (C9123 + C9124) * C50610) *
                 C33763 +
             ((C14808 + C14807) * C283 + (C14810 + C14809) * C278 -
              (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 +
               C50902 * C1231) *
                  C284 -
              (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 +
               C50902 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C283 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                C33763 +
            ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
             C14099 * C284 - C14100 * C50610) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                C33763 +
            (C14101 * C283 + C14102 * C278 - C8893 * C284 - C8894 * C50610) *
                C50824) *
               C50631) *
              C50663 * C280 +
          ((((C8377 + C8378) * C284 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C278 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C283) +
             (C8379 + C8380) * C50610) *
                C33763 +
            (C14783 * C284 -
             ((C14803 + C14804) * C278 + (C14805 + C14806) * C283) +
             C14792 * C50610) *
                C50824) *
               C50881 +
           (((C8381 + C8382) * C284 -
             ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
             (C8383 + C8384) * C50610) *
                C33763 +
            ((C9122 + C9121) * C284 - (C14793 * C278 + C14794 * C283) +
             (C9124 + C9123) * C50610) *
                C50824) *
               C50631) *
              C50663 * C281 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C283 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C278 -
             (C8385 + C8386) * C284 - (C8387 + C8388) * C50610) *
                C33763 +
            ((C15995 + C15996) * C283 + (C15997 + C15998) * C278 -
             (C13893 + C13894) * C284 - (C13895 + C13896) * C50610) *
                C50824) *
               C50881 +
           (((C8386 + C8385) * C283 + (C8388 + C8387) * C278 -
             (C8389 + C8390) * C284 - (C8391 + C8392) * C50610) *
                C33763 +
            ((C13894 + C13893) * C283 + (C13896 + C13895) * C278 -
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C284 -
             (C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C118 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C106 -
            (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
            C8196 * C108 - C8197 * C121 - C8198 * C109) *
               C33763 +
           ((C14123 + C14124) * C118 + (C14125 + C14126) * C106 -
            C14099 * C119 - C14100 * C107 + C14523 * C120 + C14524 * C108 -
            (C8903 + C8904) * C121 - (C8905 + C8906) * C109) *
               C50824) *
              C50881 +
          (((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
            (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
            (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
            (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
               C33763 +
           (C14101 * C118 + C14102 * C106 - C8893 * C119 - C8894 * C107 +
            (C8904 + C8903) * C120 + (C8906 + C8905) * C108 -
            (C8145 * C898 + C50796 * C907 + C8144 * C466 + C50902 * C480) *
                C121 -
            (C8145 * C908 + C50796 * C913 + C8144 * C481 + C50902 * C496) *
                C109) *
               C50824) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C283 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                C33763 +
            ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
             C14099 * C284 - C14100 * C50610) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                C33763 +
            (C14101 * C283 + C14102 * C278 - C8893 * C284 - C8894 * C50610) *
                C50824) *
               C50631) *
              C459 +
          (((C14101 * C284 -
             ((C14126 + C14125) * C278 + (C14124 + C14123) * C283) +
             C14102 * C50610) *
                C33763 +
            (C14103 * C284 -
             ((C14127 + C14128) * C278 + (C14129 + C14130) * C283) +
             C14112 * C50610) *
                C50824) *
               C50881 +
           ((C14523 * C284 - (C14100 * C278 + C14099 * C283) +
             C14524 * C50610) *
                C33763 +
            ((C8584 + C8583) * C284 - (C14113 * C278 + C14114 * C283) +
             (C8586 + C8585) * C50610) *
                C50824) *
               C50631) *
              C460 +
          ((((C14130 + C14129) * C283 + (C14128 + C14127) * C278 -
             C14114 * C284 - C14113 * C50610) *
                C33763 +
            ((C16525 + C16526) * C283 + (C16527 + C16528) * C278 -
             (C14131 + C14132) * C284 - (C14133 + C14134) * C50610) *
                C50824) *
               C50881 +
           ((C14103 * C283 + C14112 * C278 - (C8583 + C8584) * C284 -
             (C8585 + C8586) * C50610) *
                C33763 +
            ((C14132 + C14131) * C283 + (C14134 + C14133) * C278 -
             (C8145 * C6099 + C50796 * C6100 + C8144 * C1858 + C50902 * C1864) *
                 C284 -
             (C8145 * C6101 + C50796 * C6102 + C8144 * C1863 + C50902 * C1870) *
                 C50610) *
                C50824) *
               C50631) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C641 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50930 -
             (C8179 + C8180) * C642 - (C8181 + C8182) * C50931 + C8195 * C643 +
             C8196 * C638) *
                C33763 +
            ((C14123 + C14124) * C641 + (C14125 + C14126) * C50930 -
             C14099 * C642 - C14100 * C50931 + C14523 * C643 + C14524 * C638) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C641 + (C8182 + C8181) * C50930 -
             (C8184 + C8183) * C642 - (C8186 + C8185) * C50931 +
             (C8188 + C8187) * C643 + (C8190 + C8189) * C638) *
                C33763 +
            (C14101 * C641 + C14102 * C50930 - C8893 * C642 - C8894 * C50931 +
             (C8904 + C8903) * C643 + (C8906 + C8905) * C638) *
                C50824) *
               C50631) *
              C50890 +
          (((C14101 * C642 -
             ((C14126 + C14125) * C50930 + (C14124 + C14123) * C641) +
             C14102 * C50931 - C8893 * C643 - C8894 * C638) *
                C33763 +
            (C14103 * C642 -
             ((C14127 + C14128) * C50930 + (C14129 + C14130) * C641) +
             C14112 * C50931 - (C8583 + C8584) * C643 -
             (C8585 + C8586) * C638) *
                C50824) *
               C50881 +
           ((C14523 * C642 - (C14100 * C50930 + C14099 * C641) +
             C14524 * C50931 - (C8903 + C8904) * C643 -
             (C8905 + C8906) * C638) *
                C33763 +
            ((C8584 + C8583) * C642 - (C14113 * C50930 + C14114 * C641) +
             (C8586 + C8585) * C50931 -
             (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
                 C643 -
             (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
                 C638) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C118 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C106 -
            (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
            C8196 * C108 - C8197 * C121 - C8198 * C109) *
               C33763 +
           ((C14123 + C14124) * C118 + (C14125 + C14126) * C106 -
            C14099 * C119 - C14100 * C107 + C14523 * C120 + C14524 * C108 -
            (C8903 + C8904) * C121 - (C8905 + C8906) * C109) *
               C50824) *
              C50881 +
          (((C8180 + C8179) * C118 + (C8182 + C8181) * C106 -
            (C8184 + C8183) * C119 - (C8186 + C8185) * C107 +
            (C8188 + C8187) * C120 + (C8190 + C8189) * C108 -
            (C8191 + C8192) * C121 - (C8193 + C8194) * C109) *
               C33763 +
           (C14101 * C118 + C14102 * C106 - C8893 * C119 - C8894 * C107 +
            (C8904 + C8903) * C120 + (C8906 + C8905) * C108 -
            (C8145 * C898 + C50796 * C907 + C8144 * C466 + C50902 * C480) *
                C121 -
            (C8145 * C908 + C50796 * C913 + C8144 * C481 + C50902 * C496) *
                C109) *
               C50824) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C283 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                C33763 +
            ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
             C14099 * C284 - C14100 * C50610) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C283 + (C8182 + C8181) * C278 -
             (C8184 + C8183) * C284 - (C8186 + C8185) * C50610) *
                C33763 +
            (C14101 * C283 + C14102 * C278 - C8893 * C284 - C8894 * C50610) *
                C50824) *
               C50631) *
              C50663 * C280 +
          ((((C8377 + C8378) * C284 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C278 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C283) +
             (C8379 + C8380) * C50610) *
                C33763 +
            (C14783 * C284 -
             ((C14803 + C14804) * C278 + (C14805 + C14806) * C283) +
             C14792 * C50610) *
                C50824) *
               C50881 +
           (((C8381 + C8382) * C284 -
             ((C8380 + C8379) * C278 + (C8378 + C8377) * C283) +
             (C8383 + C8384) * C50610) *
                C33763 +
            ((C9122 + C9121) * C284 - (C14793 * C278 + C14794 * C283) +
             (C9124 + C9123) * C50610) *
                C50824) *
               C50631) *
              C50663 * C281 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C283 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C278 -
             (C8385 + C8386) * C284 - (C8387 + C8388) * C50610) *
                C33763 +
            ((C15995 + C15996) * C283 + (C15997 + C15998) * C278 -
             (C13893 + C13894) * C284 - (C13895 + C13896) * C50610) *
                C50824) *
               C50881 +
           (((C8386 + C8385) * C283 + (C8388 + C8387) * C278 -
             (C8389 + C8390) * C284 - (C8391 + C8392) * C50610) *
                C33763 +
            ((C13894 + C13893) * C283 + (C13896 + C13895) * C278 -
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C284 -
             (C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C49720 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50874 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                C33763 +
            ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
             C14099 * C49713 - C14100 * C50610) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                C33763 +
            (C14101 * C49720 + C14102 * C50874 - C8893 * C49713 -
             C8894 * C50610) *
                C50824) *
               C50631) *
              C50663 * C50934 +
          ((((C8377 + C8378) * C49713 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50874 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C49720) +
             (C8379 + C8380) * C50610) *
                C33763 +
            (C14783 * C49713 -
             ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
             C14792 * C50610) *
                C50824) *
               C50881 +
           (((C8381 + C8382) * C49713 -
             ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
             (C8383 + C8384) * C50610) *
                C33763 +
            ((C9122 + C9121) * C49713 - (C14793 * C50874 + C14794 * C49720) +
             (C9124 + C9123) * C50610) *
                C50824) *
               C50631) *
              C50663 * C50935 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C49720 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50874 -
             (C8385 + C8386) * C49713 - (C8387 + C8388) * C50610) *
                C33763 +
            ((C15995 + C15996) * C49720 + (C15997 + C15998) * C50874 -
             (C13893 + C13894) * C49713 - (C13895 + C13896) * C50610) *
                C50824) *
               C50881 +
           (((C8386 + C8385) * C49720 + (C8388 + C8387) * C50874 -
             (C8389 + C8390) * C49713 - (C8391 + C8392) * C50610) *
                C33763 +
            ((C13894 + C13893) * C49720 + (C13896 + C13895) * C50874 -
             (C8145 * C3274 + C50796 * C3279 + C8144 * C1574 + C50902 * C1580) *
                 C49713 -
             (C8145 * C3280 + C50796 * C3283 + C8144 * C1579 + C50902 * C1586) *
                 C50610) *
                C50824) *
               C50631) *
              C50663 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C33763 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C50881 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C33763 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C50890 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C33763) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C33763) *
                C50881) *
               C50727) *
              C50934 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C33763 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C50881 +
            ((C14783 * C1109 + C14792 * C50605) * C33763 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C33763) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C33763) *
                C50881) *
               C50890) *
              C50935 +
          (((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                  C1109 +
              (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                  C50605) *
                 C33763 +
             ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) *
                 C50824) *
                C50881 +
            (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C33763 +
             ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) *
                 C50824) *
                C50631) *
               C50890 -
           ((((C8145 * C3702 + C50796 * C3706 + C8144 * C2708 +
               C50902 * C2712) *
                  C50605 +
              (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 +
               C50902 * C2707) *
                  C1109) *
                 C50824 +
             ((C13895 + C13896) * C50605 + (C13893 + C13894) * C1109) *
                 C33763) *
                C50631 +
            (((C8145 * C3704 + C50796 * C3707 + C8144 * C2706 +
               C50902 * C2711) *
                  C50605 +
              (C8145 * C3701 + C50796 * C3705 + C8144 * C2702 +
               C50902 * C2705) *
                  C1109) *
                 C50824 +
             ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) *
                 C33763) *
                C50881) *
               C50727) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C33763 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50824) *
               C50881 +
           (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C33763 +
            (C14101 * C1109 + C14102 * C50605) * C50824) *
               C50631) *
              C50663 * C1105 -
          (((C14793 * C50605 + C14794 * C1109) * C50824 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C33763) *
               C50631 +
           (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C33763) *
               C50881) *
              C50663 * C1106 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C33763 +
            ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) * C50824) *
               C50881 +
           (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C33763 +
            ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) * C50824) *
               C50631) *
              C50663 * C1107 -
          ((((C8145 * C4196 + C50796 * C4200 + C8144 * C3278 + C50902 * C3282) *
                 C50605 +
             (C8145 * C4194 + C50796 * C4197 + C8144 * C3273 + C50902 * C3277) *
                 C1109) *
                C50824 +
            ((C8145 * C2514 + C50796 * C2518 + C8144 * C1118 + C50902 * C1124) *
                 C50605 +
             (C8145 * C2509 + C50796 * C2513 + C8144 * C1112 + C50902 * C1119) *
                 C1109) *
                C33763) *
               C50631 +
           (((C8145 * C4198 + C50796 * C4201 + C8144 * C3276 + C50902 * C3281) *
                 C50605 +
             (C8145 * C4195 + C50796 * C4199 + C8144 * C3272 + C50902 * C3275) *
                 C1109) *
                C50824 +
            ((C8145 * C2512 + C50796 * C2517 + C8144 * C1120 + C50902 * C1125) *
                 C50605 +
             (C8145 * C2508 + C50796 * C2511 + C8144 * C1113 + C50902 * C1121) *
                 C1109) *
                C33763) *
               C50881) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1035 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C1030 -
             (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
             C8196 * C1032) *
                C33763 +
            ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
             C14099 * C1036 - C14100 * C1031 + C14523 * C1037 +
             C14524 * C1032) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
             (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
             (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
                C33763 +
            (C14101 * C1035 + C14102 * C1030 - C8893 * C1036 - C8894 * C1031 +
             (C8904 + C8903) * C1037 + (C8906 + C8905) * C1032) *
                C50824) *
               C50631) *
              C50663 * C1033 +
          ((((C8377 + C8378) * C1036 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C1030 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1035) +
             (C8379 + C8380) * C1031 - C8733 * C1037 - C8734 * C1032) *
                C33763 +
            (C14783 * C1036 -
             ((C14803 + C14804) * C1030 + (C14805 + C14806) * C1035) +
             C14792 * C1031 - (C9121 + C9122) * C1037 -
             (C9123 + C9124) * C1032) *
                C50824) *
               C50881 +
           (((C8381 + C8382) * C1036 -
             ((C8380 + C8379) * C1030 + (C8378 + C8377) * C1035) +
             (C8383 + C8384) * C1031 - (C8743 + C8744) * C1037 -
             (C8745 + C8746) * C1032) *
                C33763 +
            ((C9122 + C9121) * C1036 - (C14793 * C1030 + C14794 * C1035) +
             (C9124 + C9123) * C1031 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C1037 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C1032) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C33763 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C50881 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C33763 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C459 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C33763) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C33763) *
                C50881) *
               C460 +
           ((((C14130 + C14129) * C1109 + (C14128 + C14127) * C50605) * C33763 +
             ((C16525 + C16526) * C1109 + (C16527 + C16528) * C50605) *
                 C50824) *
                C50881 +
            ((C14103 * C1109 + C14112 * C50605) * C33763 +
             ((C14132 + C14131) * C1109 + (C14134 + C14133) * C50605) *
                 C50824) *
                C50631) *
               C461) *
              C1033 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C33763 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C50881 +
            ((C14783 * C1109 + C14792 * C50605) * C33763 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C460 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C33763) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C33763) *
                C50881) *
               C459 -
           ((((C8145 * C4596 + C50796 * C4604 + C8144 * C4597 +
               C50902 * C4605) *
                  C50605 +
              (C8145 * C4592 + C50796 * C4598 + C8144 * C4593 +
               C50902 * C4599) *
                  C1109) *
                 C50824 +
             ((C14809 + C14810) * C50605 + (C14807 + C14808) * C1109) *
                 C33763) *
                C50631 +
            (((C8145 * C4600 + C50796 * C4606 + C8144 * C4601 +
               C50902 * C4607) *
                  C50605 +
              (C8145 * C4594 + C50796 * C4602 + C8144 * C4595 +
               C50902 * C4603) *
                  C1109) *
                 C50824 +
             ((C15340 + C15339) * C50605 + (C15338 + C15337) * C1109) *
                 C33763) *
                C50881) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C49720 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50874 -
              (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                 C33763 +
             ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
              C14099 * C49713 - C14100 * C50610) *
                 C50824) *
                C50881 +
            (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
              (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                 C33763 +
             (C14101 * C49720 + C14102 * C50874 - C8893 * C49713 -
              C8894 * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           (((C14101 * C49713 -
              ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
              C14102 * C50610) *
                 C33763 +
             (C14103 * C49713 -
              ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
              C14112 * C50610) *
                 C50824) *
                C50881 +
            ((C14523 * C49713 - (C14100 * C50874 + C14099 * C49720) +
              C14524 * C50610) *
                 C33763 +
             ((C8584 + C8583) * C49713 - (C14113 * C50874 + C14114 * C49720) +
              (C8586 + C8585) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C1033 +
          (((((C8377 + C8378) * C49713 -
              ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                   C50874 +
               (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                   C49720) +
              (C8379 + C8380) * C50610) *
                 C33763 +
             (C14783 * C49713 -
              ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
              C14792 * C50610) *
                 C50824) *
                C50881 +
            (((C8381 + C8382) * C49713 -
              ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
              (C8383 + C8384) * C50610) *
                 C33763 +
             ((C9122 + C9121) * C49713 - (C14793 * C50874 + C14794 * C49720) +
              (C9124 + C9123) * C50610) *
                 C50824) *
                C50631) *
               C50890 +
           ((((C14806 + C14805) * C49720 + (C14804 + C14803) * C50874 -
              C14794 * C49713 - C14793 * C50610) *
                 C33763 +
             ((C15337 + C15338) * C49720 + (C15339 + C15340) * C50874 -
              (C14807 + C14808) * C49713 - (C14809 + C14810) * C50610) *
                 C50824) *
                C50881 +
            ((C14783 * C49720 + C14792 * C50874 - (C9121 + C9122) * C49713 -
              (C9123 + C9124) * C50610) *
                 C33763 +
             ((C14808 + C14807) * C49720 + (C14810 + C14809) * C50874 -
              (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 +
               C50902 * C1231) *
                  C49713 -
              (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 +
               C50902 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1035 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C1030 -
             (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
             C8196 * C1032) *
                C33763 +
            ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
             C14099 * C1036 - C14100 * C1031 + C14523 * C1037 +
             C14524 * C1032) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
             (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
             (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
                C33763 +
            (C14101 * C1035 + C14102 * C1030 - C8893 * C1036 - C8894 * C1031 +
             (C8904 + C8903) * C1037 + (C8906 + C8905) * C1032) *
                C50824) *
               C50631) *
              C50663 * C1033 +
          ((((C8377 + C8378) * C1036 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C1030 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1035) +
             (C8379 + C8380) * C1031 - C8733 * C1037 - C8734 * C1032) *
                C33763 +
            (C14783 * C1036 -
             ((C14803 + C14804) * C1030 + (C14805 + C14806) * C1035) +
             C14792 * C1031 - (C9121 + C9122) * C1037 -
             (C9123 + C9124) * C1032) *
                C50824) *
               C50881 +
           (((C8381 + C8382) * C1036 -
             ((C8380 + C8379) * C1030 + (C8378 + C8377) * C1035) +
             (C8383 + C8384) * C1031 - (C8743 + C8744) * C1037 -
             (C8745 + C8746) * C1032) *
                C33763 +
            ((C9122 + C9121) * C1036 - (C14793 * C1030 + C14794 * C1035) +
             (C9124 + C9123) * C1031 -
             (C8145 * C1573 + C50796 * C1578 + C8144 * C897 + C50902 * C905) *
                 C1037 -
             (C8145 * C1577 + C50796 * C1585 + C8144 * C906 + C50902 * C912) *
                 C1032) *
                C50824) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C33763 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50824) *
               C50881 +
           (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C33763 +
            (C14101 * C1109 + C14102 * C50605) * C50824) *
               C50631) *
              C50663 * C1105 -
          (((C14793 * C50605 + C14794 * C1109) * C50824 +
            ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C33763) *
               C50631 +
           (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C33763) *
               C50881) *
              C50663 * C1106 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C33763 +
            ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) * C50824) *
               C50881 +
           (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C33763 +
            ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) * C50824) *
               C50631) *
              C50663 * C1107 -
          ((((C8145 * C4196 + C50796 * C4200 + C8144 * C3278 + C50902 * C3282) *
                 C50605 +
             (C8145 * C4194 + C50796 * C4197 + C8144 * C3273 + C50902 * C3277) *
                 C1109) *
                C50824 +
            ((C8145 * C2514 + C50796 * C2518 + C8144 * C1118 + C50902 * C1124) *
                 C50605 +
             (C8145 * C2509 + C50796 * C2513 + C8144 * C1112 + C50902 * C1119) *
                 C1109) *
                C33763) *
               C50631 +
           (((C8145 * C4198 + C50796 * C4201 + C8144 * C3276 + C50902 * C3281) *
                 C50605 +
             (C8145 * C4195 + C50796 * C4199 + C8144 * C3272 + C50902 * C3275) *
                 C1109) *
                C50824 +
            ((C8145 * C2512 + C50796 * C2517 + C8144 * C1120 + C50902 * C1125) *
                 C50605 +
             (C8145 * C2508 + C50796 * C2511 + C8144 * C1113 + C50902 * C1121) *
                 C1109) *
                C33763) *
               C50881) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C49720 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50874 -
              (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                 C33763 +
             ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
              C14099 * C49713 - C14100 * C50610) *
                 C50824) *
                C50881 +
            (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
              (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                 C33763 +
             (C14101 * C49720 + C14102 * C50874 - C8893 * C49713 -
              C8894 * C50610) *
                 C50824) *
                C50631) *
               C1687 +
           (((C14101 * C49713 -
              ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
              C14102 * C50610) *
                 C33763 +
             (C14103 * C49713 -
              ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
              C14112 * C50610) *
                 C50824) *
                C50881 +
            ((C14523 * C49713 - (C14100 * C50874 + C14099 * C49720) +
              C14524 * C50610) *
                 C33763 +
             ((C8584 + C8583) * C49713 - (C14113 * C50874 + C14114 * C49720) +
              (C8586 + C8585) * C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50889 +
          (((((C8377 + C8378) * C49713 -
              ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                   C50874 +
               (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                   C49720) +
              (C8379 + C8380) * C50610) *
                 C33763 +
             (C14783 * C49713 -
              ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
              C14792 * C50610) *
                 C50824) *
                C50881 +
            (((C8381 + C8382) * C49713 -
              ((C8380 + C8379) * C50874 + (C8378 + C8377) * C49720) +
              (C8383 + C8384) * C50610) *
                 C33763 +
             ((C9122 + C9121) * C49713 - (C14793 * C50874 + C14794 * C49720) +
              (C9124 + C9123) * C50610) *
                 C50824) *
                C50631) *
               C1687 +
           ((((C14806 + C14805) * C49720 + (C14804 + C14803) * C50874 -
              C14794 * C49713 - C14793 * C50610) *
                 C33763 +
             ((C15337 + C15338) * C49720 + (C15339 + C15340) * C50874 -
              (C14807 + C14808) * C49713 - (C14809 + C14810) * C50610) *
                 C50824) *
                C50881 +
            ((C14783 * C49720 + C14792 * C50874 - (C9121 + C9122) * C49713 -
              (C9123 + C9124) * C50610) *
                 C33763 +
             ((C14808 + C14807) * C49720 + (C14810 + C14809) * C50874 -
              (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 +
               C50902 * C1231) *
                  C49713 -
              (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 +
               C50902 * C1237) *
                  C50610) *
                 C50824) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C33763 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C50881 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C33763 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C50936 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C33763) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C33763) *
                C50881) *
               C50937 +
           ((((C14130 + C14129) * C1109 + (C14128 + C14127) * C50605) * C33763 +
             ((C16525 + C16526) * C1109 + (C16527 + C16528) * C50605) *
                 C50824) *
                C50881 +
            ((C14103 * C1109 + C14112 * C50605) * C33763 +
             ((C14132 + C14131) * C1109 + (C14134 + C14133) * C50605) *
                 C50824) *
                C50631) *
               C2103) *
              C50889 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C33763 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C50881 +
            ((C14783 * C1109 + C14792 * C50605) * C33763 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C50937 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C33763) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C33763) *
                C50881) *
               C50936 -
           ((((C8145 * C4596 + C50796 * C4604 + C8144 * C4597 +
               C50902 * C4605) *
                  C50605 +
              (C8145 * C4592 + C50796 * C4598 + C8144 * C4593 +
               C50902 * C4599) *
                  C1109) *
                 C50824 +
             ((C14809 + C14810) * C50605 + (C14807 + C14808) * C1109) *
                 C33763) *
                C50631 +
            (((C8145 * C4600 + C50796 * C4606 + C8144 * C4601 +
               C50902 * C4607) *
                  C50605 +
              (C8145 * C4594 + C50796 * C4602 + C8144 * C4595 +
               C50902 * C4603) *
                  C1109) *
                 C50824 +
             ((C15340 + C15339) * C50605 + (C15338 + C15337) * C1109) *
                 C33763) *
                C50881) *
               C2103) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C33763 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C50881 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C33763 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C1687 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C33763) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C33763) *
                C50881) *
               C50727) *
              C280 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C33763 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C50881 +
            ((C14783 * C1109 + C14792 * C50605) * C33763 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C33763) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C33763) *
                C50881) *
               C1687) *
              C281 +
          (((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                  C1109 +
              (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                  C50605) *
                 C33763 +
             ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) *
                 C50824) *
                C50881 +
            (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C33763 +
             ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) *
                 C50824) *
                C50631) *
               C1687 -
           ((((C8145 * C3702 + C50796 * C3706 + C8144 * C2708 +
               C50902 * C2712) *
                  C50605 +
              (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 +
               C50902 * C2707) *
                  C1109) *
                 C50824 +
             ((C13895 + C13896) * C50605 + (C13893 + C13894) * C1109) *
                 C33763) *
                C50631 +
            (((C8145 * C3704 + C50796 * C3707 + C8144 * C2706 +
               C50902 * C2711) *
                  C50605 +
              (C8145 * C3701 + C50796 * C3705 + C8144 * C2702 +
               C50902 * C2705) *
                  C1109) *
                 C50824 +
             ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) *
                 C33763) *
                C50881) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1035 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C1030 -
             (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
             C8196 * C1032) *
                C33763 +
            ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
             C14099 * C1036 - C14100 * C1031 + C14523 * C1037 +
             C14524 * C1032) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
             (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
             (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
                C33763 +
            (C14101 * C1035 + C14102 * C1030 - C8893 * C1036 - C8894 * C1031 +
             (C8904 + C8903) * C1037 + (C8906 + C8905) * C1032) *
                C50824) *
               C50631) *
              C1687 +
          (((C14101 * C1036 -
             ((C14126 + C14125) * C1030 + (C14124 + C14123) * C1035) +
             C14102 * C1031 - C8893 * C1037 - C8894 * C1032) *
                C33763 +
            (C14103 * C1036 -
             ((C14127 + C14128) * C1030 + (C14129 + C14130) * C1035) +
             C14112 * C1031 - (C8583 + C8584) * C1037 -
             (C8585 + C8586) * C1032) *
                C50824) *
               C50881 +
           ((C14523 * C1036 - (C14100 * C1030 + C14099 * C1035) +
             C14524 * C1031 - (C8903 + C8904) * C1037 -
             (C8905 + C8906) * C1032) *
                C33763 +
            ((C8584 + C8583) * C1036 - (C14113 * C1030 + C14114 * C1035) +
             (C8586 + C8585) * C1031 -
             (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
                 C1037 -
             (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
                 C1032) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C33763 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50824) *
               C50881 +
           (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C33763 +
            (C14101 * C1109 + C14102 * C50605) * C50824) *
               C50631) *
              C1853 -
          (((C14113 * C50605 + C14114 * C1109) * C50824 +
            (C14100 * C50605 + C14099 * C1109) * C33763) *
               C50631 +
           (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
            ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) * C33763) *
               C50881) *
              C1854 +
          ((((C14130 + C14129) * C1109 + (C14128 + C14127) * C50605) * C33763 +
            ((C16525 + C16526) * C1109 + (C16527 + C16528) * C50605) * C50824) *
               C50881 +
           ((C14103 * C1109 + C14112 * C50605) * C33763 +
            ((C14132 + C14131) * C1109 + (C14134 + C14133) * C50605) * C50824) *
               C50631) *
              C1855 -
          ((((C8145 * C6529 + C50796 * C6533 + C8144 * C5511 + C50902 * C5515) *
                 C50605 +
             (C8145 * C6527 + C50796 * C6530 + C8144 * C5506 + C50902 * C5510) *
                 C1109) *
                C50824 +
            ((C14133 + C14134) * C50605 + (C14131 + C14132) * C1109) * C33763) *
               C50631 +
           (((C8145 * C6531 + C50796 * C6534 + C8144 * C5509 + C50902 * C5514) *
                 C50605 +
             (C8145 * C6528 + C50796 * C6532 + C8144 * C5505 + C50902 * C5508) *
                 C1109) *
                C50824 +
            ((C16528 + C16527) * C50605 + (C16526 + C16525) * C1109) * C33763) *
               C50881) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C49720 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50874 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                C33763 +
            ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
             C14099 * C49713 - C14100 * C50610) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C49720 + (C8182 + C8181) * C50874 -
             (C8184 + C8183) * C49713 - (C8186 + C8185) * C50610) *
                C33763 +
            (C14101 * C49720 + C14102 * C50874 - C8893 * C49713 -
             C8894 * C50610) *
                C50824) *
               C50631) *
              C50936 +
          (((C14101 * C49713 -
             ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
             C14102 * C50610) *
                C33763 +
            (C14103 * C49713 -
             ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
             C14112 * C50610) *
                C50824) *
               C50881 +
           ((C14523 * C49713 - (C14100 * C50874 + C14099 * C49720) +
             C14524 * C50610) *
                C33763 +
            ((C8584 + C8583) * C49713 - (C14113 * C50874 + C14114 * C49720) +
             (C8586 + C8585) * C50610) *
                C50824) *
               C50631) *
              C50937 +
          ((((C14130 + C14129) * C49720 + (C14128 + C14127) * C50874 -
             C14114 * C49713 - C14113 * C50610) *
                C33763 +
            ((C16525 + C16526) * C49720 + (C16527 + C16528) * C50874 -
             (C14131 + C14132) * C49713 - (C14133 + C14134) * C50610) *
                C50824) *
               C50881 +
           ((C14103 * C49720 + C14112 * C50874 - (C8583 + C8584) * C49713 -
             (C8585 + C8586) * C50610) *
                C33763 +
            ((C14132 + C14131) * C49720 + (C14134 + C14133) * C50874 -
             (C8145 * C6099 + C50796 * C6100 + C8144 * C1858 + C50902 * C1864) *
                 C49713 -
             (C8145 * C6101 + C50796 * C6102 + C8144 * C1863 + C50902 * C1870) *
                 C50610) *
                C50824) *
               C50631) *
              C2103) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1035 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C1030 -
             (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
             C8196 * C1032) *
                C33763 +
            ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
             C14099 * C1036 - C14100 * C1031 + C14523 * C1037 +
             C14524 * C1032) *
                C50824) *
               C50881 +
           (((C8180 + C8179) * C1035 + (C8182 + C8181) * C1030 -
             (C8184 + C8183) * C1036 - (C8186 + C8185) * C1031 +
             (C8188 + C8187) * C1037 + (C8190 + C8189) * C1032) *
                C33763 +
            (C14101 * C1035 + C14102 * C1030 - C8893 * C1036 - C8894 * C1031 +
             (C8904 + C8903) * C1037 + (C8906 + C8905) * C1032) *
                C50824) *
               C50631) *
              C1687 +
          (((C14101 * C1036 -
             ((C14126 + C14125) * C1030 + (C14124 + C14123) * C1035) +
             C14102 * C1031 - C8893 * C1037 - C8894 * C1032) *
                C33763 +
            (C14103 * C1036 -
             ((C14127 + C14128) * C1030 + (C14129 + C14130) * C1035) +
             C14112 * C1031 - (C8583 + C8584) * C1037 -
             (C8585 + C8586) * C1032) *
                C50824) *
               C50881 +
           ((C14523 * C1036 - (C14100 * C1030 + C14099 * C1035) +
             C14524 * C1031 - (C8903 + C8904) * C1037 -
             (C8905 + C8906) * C1032) *
                C33763 +
            ((C8584 + C8583) * C1036 - (C14113 * C1030 + C14114 * C1035) +
             (C8586 + C8585) * C1031 -
             (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
                 C1037 -
             (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
                 C1032) *
                C50824) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                  C1109 +
              (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                  C50605) *
                 C33763 +
             ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) *
                 C50824) *
                C50881 +
            (((C8180 + C8179) * C1109 + (C8182 + C8181) * C50605) * C33763 +
             (C14101 * C1109 + C14102 * C50605) * C50824) *
                C50631) *
               C1687 -
           (((C14113 * C50605 + C14114 * C1109) * C50824 +
             (C14100 * C50605 + C14099 * C1109) * C33763) *
                C50631 +
            (((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50824 +
             ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) *
                 C33763) *
                C50881) *
               C50727) *
              C280 +
          (((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C33763 +
             ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) *
                 C50824) *
                C50881 +
            ((C14783 * C1109 + C14792 * C50605) * C33763 +
             ((C14808 + C14807) * C1109 + (C14810 + C14809) * C50605) *
                 C50824) *
                C50631) *
               C50727 -
           (((C14793 * C50605 + C14794 * C1109) * C50824 +
             ((C8380 + C8379) * C50605 + (C8378 + C8377) * C1109) * C33763) *
                C50631 +
            (((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50824 +
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50605 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C1109) *
                 C33763) *
                C50881) *
               C1687) *
              C281 +
          (((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                  C1109 +
              (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                  C50605) *
                 C33763 +
             ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) *
                 C50824) *
                C50881 +
            (((C8386 + C8385) * C1109 + (C8388 + C8387) * C50605) * C33763 +
             ((C13894 + C13893) * C1109 + (C13896 + C13895) * C50605) *
                 C50824) *
                C50631) *
               C1687 -
           ((((C8145 * C3702 + C50796 * C3706 + C8144 * C2708 +
               C50902 * C2712) *
                  C50605 +
              (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 +
               C50902 * C2707) *
                  C1109) *
                 C50824 +
             ((C13895 + C13896) * C50605 + (C13893 + C13894) * C1109) *
                 C33763) *
                C50631 +
            (((C8145 * C3704 + C50796 * C3707 + C8144 * C2706 +
               C50902 * C2711) *
                  C50605 +
              (C8145 * C3701 + C50796 * C3705 + C8144 * C2702 +
               C50902 * C2705) *
                  C1109) *
                 C50824 +
             ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) *
                 C33763) *
                C50881) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C641 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50930 -
            (C8179 + C8180) * C642 - (C8181 + C8182) * C50931 + C8195 * C643 +
            C8196 * C638) *
               C50940 +
           ((C14123 + C14124) * C641 + (C14125 + C14126) * C50930 -
            C14099 * C642 - C14100 * C50931 + C14523 * C643 + C14524 * C638) *
               C50941 +
           (C47378 * C641 + C47379 * C50930 - C14114 * C642 - C14113 * C50931 +
            (C8584 + C8583) * C643 + (C8586 + C8585) * C638) *
               C44456) *
              C50626 * C50663 * C50889 +
          (((C8377 + C8378) * C642 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50930 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C641) +
            (C8379 + C8380) * C50931 - C8733 * C643 - C8734 * C638) *
               C50940 +
           (C14783 * C642 -
            ((C14803 + C14804) * C50930 + (C14805 + C14806) * C641) +
            C14792 * C50931 - (C9121 + C9122) * C643 - (C9123 + C9124) * C638) *
               C50941 +
           ((C14808 + C14807) * C642 -
            ((C15340 + C15339) * C50930 + (C15338 + C15337) * C641) +
            (C14810 + C14809) * C50931 -
            (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 + C50902 * C1231) *
                C643 -
            (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 + C50902 * C1237) *
                C638) *
               C44456) *
              C50626 * C50663 * C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C283 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C278 -
             (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
                C50940 +
            ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
             C14099 * C284 - C14100 * C50610) *
                C50941 +
            C47386 * C44456) *
               C50626 * C50890 +
           ((C14101 * C284 -
             ((C14126 + C14125) * C278 + (C14124 + C14123) * C283) +
             C14102 * C50610) *
                C50940 +
            (C14103 * C284 -
             ((C14127 + C14128) * C278 + (C14129 + C14130) * C283) +
             C14112 * C50610) *
                C50941 +
            ((C14132 + C14131) * C284 -
             ((C16528 + C16527) * C278 + (C16526 + C16525) * C283) +
             (C14134 + C14133) * C50610) *
                C44456) *
               C50626 * C50727) *
              C50889 +
          ((((C8377 + C8378) * C284 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C278 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C283) +
             (C8379 + C8380) * C50610) *
                C50940 +
            (C14783 * C284 -
             ((C14803 + C14804) * C278 + (C14805 + C14806) * C283) +
             C14792 * C50610) *
                C50941 +
            ((C14808 + C14807) * C284 -
             ((C15340 + C15339) * C278 + (C15338 + C15337) * C283) +
             (C14810 + C14809) * C50610) *
                C44456) *
               C50626 * C50890 +
           (((C14806 + C14805) * C283 + (C14804 + C14803) * C278 -
             C14794 * C284 - C14793 * C50610) *
                C50940 +
            ((C15337 + C15338) * C283 + (C15339 + C15340) * C278 -
             (C14807 + C14808) * C284 - (C14809 + C14810) * C50610) *
                C50941 +
            ((C8144 * C4595 + C50902 * C4603 + C8145 * C4594 + C50796 * C4602) *
                 C283 +
             (C8144 * C4601 + C50902 * C4607 + C8145 * C4600 + C50796 * C4606) *
                 C278 -
             (C8145 * C4592 + C50796 * C4598 + C8144 * C4593 + C50902 * C4599) *
                 C284 -
             (C8145 * C4596 + C50796 * C4604 + C8144 * C4597 + C50902 * C4605) *
                 C50610) *
                C44456) *
               C50626 * C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C283 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
               C50940 +
           ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
            C14099 * C284 - C14100 * C50610) *
               C50941 +
           ((C14130 + C14129) * C283 + (C14128 + C14127) * C278 -
            C14114 * C284 - C14113 * C50610) *
               C44456) *
              C50626 * C50663 * C280 +
          (((C8377 + C8378) * C284 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C278 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C283) +
            (C8379 + C8380) * C50610) *
               C50940 +
           (C14783 * C284 -
            ((C14803 + C14804) * C278 + (C14805 + C14806) * C283) +
            C14792 * C50610) *
               C50941 +
           ((C14808 + C14807) * C284 -
            ((C15340 + C15339) * C278 + (C15338 + C15337) * C283) +
            (C14810 + C14809) * C50610) *
               C44456) *
              C50626 * C50663 * C281 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C283 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C278 -
            (C8385 + C8386) * C284 - (C8387 + C8388) * C50610) *
               C50940 +
           ((C15995 + C15996) * C283 + (C15997 + C15998) * C278 -
            (C13893 + C13894) * C284 - (C13895 + C13896) * C50610) *
               C50941 +
           ((C8144 * C2702 + C50902 * C2705 + C8145 * C3701 + C50796 * C3705) *
                C283 +
            (C8144 * C2706 + C50902 * C2711 + C8145 * C3704 + C50796 * C3707) *
                C278 -
            (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 + C50902 * C2707) *
                C284 -
            (C8145 * C3702 + C50796 * C3706 + C8144 * C2708 + C50902 * C2712) *
                C50610) *
               C44456) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
               C118 +
           (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
               C106 -
           (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
           C8196 * C108 - C8197 * C121 - C8198 * C109) *
              C50940 +
          ((C14123 + C14124) * C118 + (C14125 + C14126) * C106 - C14099 * C119 -
           C14100 * C107 + C14523 * C120 + C14524 * C108 -
           (C8903 + C8904) * C121 - (C8905 + C8906) * C109) *
              C50941 +
          ((C14130 + C14129) * C118 + (C14128 + C14127) * C106 - C14114 * C119 -
           C14113 * C107 + (C8584 + C8583) * C120 + (C8586 + C8585) * C108 -
           (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
               C121 -
           (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
               C109) *
              C44456) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C283 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
               C50940 +
           ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
            C14099 * C284 - C14100 * C50610) *
               C50941 +
           C47386 * C44456) *
              C50626 * C459 +
          ((C14101 * C284 -
            ((C14126 + C14125) * C278 + (C14124 + C14123) * C283) +
            C14102 * C50610) *
               C50940 +
           (C14103 * C284 -
            ((C14127 + C14128) * C278 + (C14129 + C14130) * C283) +
            C14112 * C50610) *
               C50941 +
           ((C14132 + C14131) * C284 -
            ((C16528 + C16527) * C278 + (C16526 + C16525) * C283) +
            (C14134 + C14133) * C50610) *
               C44456) *
              C50626 * C460 +
          (C47386 * C50940 +
           ((C16525 + C16526) * C283 + (C16527 + C16528) * C278 -
            (C14131 + C14132) * C284 - (C14133 + C14134) * C50610) *
               C50941 +
           ((C8144 * C5505 + C50902 * C5508 + C8145 * C6528 + C50796 * C6532) *
                C283 +
            (C8144 * C5509 + C50902 * C5514 + C8145 * C6531 + C50796 * C6534) *
                C278 -
            (C8145 * C6527 + C50796 * C6530 + C8144 * C5506 + C50902 * C5510) *
                C284 -
            (C8145 * C6529 + C50796 * C6533 + C8144 * C5511 + C50902 * C5515) *
                C50610) *
               C44456) *
              C50626 * C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C641 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50930 -
            (C8179 + C8180) * C642 - (C8181 + C8182) * C50931 + C8195 * C643 +
            C8196 * C638) *
               C50940 +
           ((C14123 + C14124) * C641 + (C14125 + C14126) * C50930 -
            C14099 * C642 - C14100 * C50931 + C14523 * C643 + C14524 * C638) *
               C50941 +
           (C47378 * C641 + C47379 * C50930 - C14114 * C642 - C14113 * C50931 +
            (C8584 + C8583) * C643 + (C8586 + C8585) * C638) *
               C44456) *
              C50626 * C50890 +
          ((C14101 * C642 -
            ((C14126 + C14125) * C50930 + (C14124 + C14123) * C641) +
            C14102 * C50931 - C8893 * C643 - C8894 * C638) *
               C50940 +
           (C14103 * C642 -
            ((C14127 + C14128) * C50930 + (C14129 + C14130) * C641) +
            C14112 * C50931 - (C8583 + C8584) * C643 - (C8585 + C8586) * C638) *
               C50941 +
           ((C14132 + C14131) * C642 -
            ((C16528 + C16527) * C50930 + (C16526 + C16525) * C641) +
            (C14134 + C14133) * C50931 -
            (C8145 * C6099 + C50796 * C6100 + C8144 * C1858 + C50902 * C1864) *
                C643 -
            (C8145 * C6101 + C50796 * C6102 + C8144 * C1863 + C50902 * C1870) *
                C638) *
               C44456) *
              C50626 * C50727) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
               C118 +
           (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
               C106 -
           (C8179 + C8180) * C119 - (C8181 + C8182) * C107 + C8195 * C120 +
           C8196 * C108 - C8197 * C121 - C8198 * C109) *
              C50940 +
          ((C14123 + C14124) * C118 + (C14125 + C14126) * C106 - C14099 * C119 -
           C14100 * C107 + C14523 * C120 + C14524 * C108 -
           (C8903 + C8904) * C121 - (C8905 + C8906) * C109) *
              C50941 +
          ((C14130 + C14129) * C118 + (C14128 + C14127) * C106 - C14114 * C119 -
           C14113 * C107 + (C8584 + C8583) * C120 + (C8586 + C8585) * C108 -
           (C8145 * C1224 + C50796 * C1229 + C8144 * C470 + C50902 * C488) *
               C121 -
           (C8145 * C1228 + C50796 * C1236 + C8144 * C489 + C50902 * C500) *
               C109) *
              C44456) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C283 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C278 -
            (C8179 + C8180) * C284 - (C8181 + C8182) * C50610) *
               C50940 +
           ((C14123 + C14124) * C283 + (C14125 + C14126) * C278 -
            C14099 * C284 - C14100 * C50610) *
               C50941 +
           ((C14130 + C14129) * C283 + (C14128 + C14127) * C278 -
            C14114 * C284 - C14113 * C50610) *
               C44456) *
              C50626 * C50663 * C280 +
          (((C8377 + C8378) * C284 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C278 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C283) +
            (C8379 + C8380) * C50610) *
               C50940 +
           (C14783 * C284 -
            ((C14803 + C14804) * C278 + (C14805 + C14806) * C283) +
            C14792 * C50610) *
               C50941 +
           ((C14808 + C14807) * C284 -
            ((C15340 + C15339) * C278 + (C15338 + C15337) * C283) +
            (C14810 + C14809) * C50610) *
               C44456) *
              C50626 * C50663 * C281 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C283 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C278 -
            (C8385 + C8386) * C284 - (C8387 + C8388) * C50610) *
               C50940 +
           ((C15995 + C15996) * C283 + (C15997 + C15998) * C278 -
            (C13893 + C13894) * C284 - (C13895 + C13896) * C50610) *
               C50941 +
           ((C8144 * C2702 + C50902 * C2705 + C8145 * C3701 + C50796 * C3705) *
                C283 +
            (C8144 * C2706 + C50902 * C2711 + C8145 * C3704 + C50796 * C3707) *
                C278 -
            (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 + C50902 * C2707) *
                C284 -
            (C8145 * C3702 + C50796 * C3706 + C8144 * C2708 + C50902 * C2712) *
                C50610) *
               C44456) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C49720 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50874 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
               C50940 +
           ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
            C14099 * C49713 - C14100 * C50610) *
               C50941 +
           (C47378 * C49720 + C47379 * C50874 - C14114 * C49713 -
            C14113 * C50610) *
               C44456) *
              C50626 * C50663 * C50934 +
          (((C8377 + C8378) * C49713 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50874 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C49720) +
            (C8379 + C8380) * C50610) *
               C50940 +
           (C14783 * C49713 -
            ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
            C14792 * C50610) *
               C50941 +
           ((C14808 + C14807) * C49713 - (C48273 * C50874 + C48274 * C49720) +
            (C14810 + C14809) * C50610) *
               C44456) *
              C50626 * C50663 * C50935 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C49720 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C50874 -
            (C8385 + C8386) * C49713 - (C8387 + C8388) * C50610) *
               C50940 +
           ((C15995 + C15996) * C49720 + (C15997 + C15998) * C50874 -
            (C13893 + C13894) * C49713 - (C13895 + C13896) * C50610) *
               C50941 +
           ((C8144 * C2702 + C50902 * C2705 + C8145 * C3701 + C50796 * C3705) *
                C49720 +
            (C8144 * C2706 + C50902 * C2711 + C8145 * C3704 + C50796 * C3707) *
                C50874 -
            (C8145 * C3700 + C50796 * C3703 + C8144 * C2703 + C50902 * C2707) *
                C49713 -
            (C8145 * C3702 + C50796 * C3706 + C8144 * C2708 + C50902 * C2712) *
                C50610) *
               C44456) *
              C50626 * C50663 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50940 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50941 +
            C48275 * C44456) *
               C50626 * C50890 -
           (((C16528 + C16527) * C50605 + (C16526 + C16525) * C1109) * C44456 +
            ((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50941 +
            ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) * C50940) *
               C50626 * C50727) *
              C50934 +
          ((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50940 +
            ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) * C50941 +
            ((C48276 + C48277) * C1109 + (C48278 + C48279) * C50605) * C44456) *
               C50626 * C50727 -
           (C48282 * C44456 +
            ((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50941 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50940) *
               C50626 * C50890) *
              C50935 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C50940 +
            ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) * C50941 +
            ((C48777 + C48778) * C1109 + (C48779 + C48780) * C50605) * C44456) *
               C50626 * C50890 -
           (((C8145 * C21469 + C50796 * C21471 + C8144 * C4600 +
              C50902 * C4606) *
                 C50605 +
             (C8145 * C21468 + C50796 * C21470 + C8144 * C4594 +
              C50902 * C4602) *
                 C1109) *
                C44456 +
            ((C48780 + C48779) * C50605 + (C48778 + C48777) * C1109) * C50941 +
            ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) * C50940) *
               C50626 * C50727) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1109 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50605) *
               C50940 +
           ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50941 +
           (C47378 * C1109 + C47379 * C50605) * C44456) *
              C50626 * C50663 * C1105 -
          (((C15340 + C15339) * C50605 + (C15338 + C15337) * C1109) * C44456 +
           ((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50941 +
           ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                C50605 +
            (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                C1109) *
               C50940) *
              C50626 * C50663 * C1106 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C1109 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C50605) *
               C50940 +
           ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) * C50941 +
           ((C8144 * C2702 + C50902 * C2705 + C8145 * C3701 + C50796 * C3705) *
                C1109 +
            (C8144 * C2706 + C50902 * C2711 + C8145 * C3704 + C50796 * C3707) *
                C50605) *
               C44456) *
              C50626 * C50663 * C1107 -
          (((C8145 * C20873 + C50796 * C20875 + C8144 * C3704 +
             C50902 * C3707) *
                C50605 +
            (C8145 * C20872 + C50796 * C20874 + C8144 * C3701 +
             C50902 * C3705) *
                C1109) *
               C44456 +
           ((C8145 * C4198 + C50796 * C4201 + C8144 * C3276 + C50902 * C3281) *
                C50605 +
            (C8145 * C4195 + C50796 * C4199 + C8144 * C3272 + C50902 * C3275) *
                C1109) *
               C50941 +
           ((C8145 * C2512 + C50796 * C2517 + C8144 * C1120 + C50902 * C1125) *
                C50605 +
            (C8145 * C2508 + C50796 * C2511 + C8144 * C1113 + C50902 * C1121) *
                C1109) *
               C50940) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1035 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C1030 -
            (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
            C8196 * C1032) *
               C50940 +
           ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
            C14099 * C1036 - C14100 * C1031 + C14523 * C1037 + C14524 * C1032) *
               C50941 +
           (C47378 * C1035 + C47379 * C1030 - C14114 * C1036 - C14113 * C1031 +
            (C8584 + C8583) * C1037 + (C8586 + C8585) * C1032) *
               C44456) *
              C50626 * C50663 * C1033 +
          (((C8377 + C8378) * C1036 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C1030 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1035) +
            (C8379 + C8380) * C1031 - C8733 * C1037 - C8734 * C1032) *
               C50940 +
           (C14783 * C1036 -
            ((C14803 + C14804) * C1030 + (C14805 + C14806) * C1035) +
            C14792 * C1031 - (C9121 + C9122) * C1037 -
            (C9123 + C9124) * C1032) *
               C50941 +
           ((C14808 + C14807) * C1036 -
            ((C15340 + C15339) * C1030 + (C15338 + C15337) * C1035) +
            (C14810 + C14809) * C1031 -
            (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 + C50902 * C1231) *
                C1037 -
            (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 + C50902 * C1237) *
                C1032) *
               C44456) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50940 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50941 +
            C48275 * C44456) *
               C50626 * C459 -
           (((C16528 + C16527) * C50605 + (C16526 + C16525) * C1109) * C44456 +
            ((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50941 +
            ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) * C50940) *
               C50626 * C460 +
           (C48275 * C50940 +
            ((C16525 + C16526) * C1109 + (C16527 + C16528) * C50605) * C50941 +
            ((C8144 * C5505 + C50902 * C5508 + C8145 * C6528 + C50796 * C6532) *
                 C1109 +
             (C8144 * C5509 + C50902 * C5514 + C8145 * C6531 + C50796 * C6534) *
                 C50605) *
                C44456) *
               C50626 * C461) *
              C1033 +
          ((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50940 +
            ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) * C50941 +
            ((C48276 + C48277) * C1109 + (C48278 + C48279) * C50605) * C44456) *
               C50626 * C460 -
           (C48282 * C44456 +
            ((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50941 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50940) *
               C50626 * C459 -
           (((C8145 * C23160 + C50796 * C23162 + C8144 * C6531 +
              C50902 * C6534) *
                 C50605 +
             (C8145 * C23159 + C50796 * C23161 + C8144 * C6528 +
              C50902 * C6532) *
                 C1109) *
                C44456 +
            ((C48279 + C48278) * C50605 + (C48277 + C48276) * C1109) * C50941 +
            C48282 * C50940) *
               C50626 * C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C49720 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50874 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                C50940 +
            ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
             C14099 * C49713 - C14100 * C50610) *
                C50941 +
            (C47378 * C49720 + C47379 * C50874 - C14114 * C49713 -
             C14113 * C50610) *
                C44456) *
               C50626 * C50890 +
           ((C14101 * C49713 -
             ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
             C14102 * C50610) *
                C50940 +
            (C14103 * C49713 -
             ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
             C14112 * C50610) *
                C50941 +
            ((C14132 + C14131) * C49713 -
             ((C16528 + C16527) * C50874 + (C16526 + C16525) * C49720) +
             (C14134 + C14133) * C50610) *
                C44456) *
               C50626 * C50727) *
              C1033 +
          ((((C8377 + C8378) * C49713 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50874 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C49720) +
             (C8379 + C8380) * C50610) *
                C50940 +
            (C14783 * C49713 -
             ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
             C14792 * C50610) *
                C50941 +
            ((C14808 + C14807) * C49713 - (C48273 * C50874 + C48274 * C49720) +
             (C14810 + C14809) * C50610) *
                C44456) *
               C50626 * C50890 +
           (((C14806 + C14805) * C49720 + (C14804 + C14803) * C50874 -
             C14794 * C49713 - C14793 * C50610) *
                C50940 +
            ((C15337 + C15338) * C49720 + (C15339 + C15340) * C50874 -
             (C14807 + C14808) * C49713 - (C14809 + C14810) * C50610) *
                C50941 +
            ((C48276 + C48277) * C49720 + (C48278 + C48279) * C50874 -
             (C8145 * C4592 + C50796 * C4598 + C8144 * C4593 + C50902 * C4599) *
                 C49713 -
             (C8145 * C4596 + C50796 * C4604 + C8144 * C4597 + C50902 * C4605) *
                 C50610) *
                C44456) *
               C50626 * C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1035 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C1030 -
            (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
            C8196 * C1032) *
               C50940 +
           ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
            C14099 * C1036 - C14100 * C1031 + C14523 * C1037 + C14524 * C1032) *
               C50941 +
           (C47378 * C1035 + C47379 * C1030 - C14114 * C1036 - C14113 * C1031 +
            (C8584 + C8583) * C1037 + (C8586 + C8585) * C1032) *
               C44456) *
              C50626 * C50663 * C1033 +
          (((C8377 + C8378) * C1036 -
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C1030 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1035) +
            (C8379 + C8380) * C1031 - C8733 * C1037 - C8734 * C1032) *
               C50940 +
           (C14783 * C1036 -
            ((C14803 + C14804) * C1030 + (C14805 + C14806) * C1035) +
            C14792 * C1031 - (C9121 + C9122) * C1037 -
            (C9123 + C9124) * C1032) *
               C50941 +
           ((C14808 + C14807) * C1036 -
            ((C15340 + C15339) * C1030 + (C15338 + C15337) * C1035) +
            (C14810 + C14809) * C1031 -
            (C8145 * C2704 + C50796 * C2709 + C8144 * C1225 + C50902 * C1231) *
                C1037 -
            (C8145 * C2710 + C50796 * C2713 + C8144 * C1230 + C50902 * C1237) *
                C1032) *
               C44456) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1109 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50605) *
               C50940 +
           ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50941 +
           (C47378 * C1109 + C47379 * C50605) * C44456) *
              C50626 * C50663 * C1105 -
          (((C15340 + C15339) * C50605 + (C15338 + C15337) * C1109) * C44456 +
           ((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50941 +
           ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                C50605 +
            (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                C1109) *
               C50940) *
              C50626 * C50663 * C1106 +
          (((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                C1109 +
            (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                C50605) *
               C50940 +
           ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) * C50941 +
           ((C8144 * C2702 + C50902 * C2705 + C8145 * C3701 + C50796 * C3705) *
                C1109 +
            (C8144 * C2706 + C50902 * C2711 + C8145 * C3704 + C50796 * C3707) *
                C50605) *
               C44456) *
              C50626 * C50663 * C1107 -
          (((C8145 * C20873 + C50796 * C20875 + C8144 * C3704 +
             C50902 * C3707) *
                C50605 +
            (C8145 * C20872 + C50796 * C20874 + C8144 * C3701 +
             C50902 * C3705) *
                C1109) *
               C44456 +
           ((C8145 * C4198 + C50796 * C4201 + C8144 * C3276 + C50902 * C3281) *
                C50605 +
            (C8145 * C4195 + C50796 * C4199 + C8144 * C3272 + C50902 * C3275) *
                C1109) *
               C50941 +
           ((C8145 * C2512 + C50796 * C2517 + C8144 * C1120 + C50902 * C1125) *
                C50605 +
            (C8145 * C2508 + C50796 * C2511 + C8144 * C1113 + C50902 * C1121) *
                C1109) *
               C50940) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C49720 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50874 -
             (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
                C50940 +
            ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
             C14099 * C49713 - C14100 * C50610) *
                C50941 +
            (C47378 * C49720 + C47379 * C50874 - C14114 * C49713 -
             C14113 * C50610) *
                C44456) *
               C50626 * C1687 +
           ((C14101 * C49713 -
             ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
             C14102 * C50610) *
                C50940 +
            (C14103 * C49713 -
             ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
             C14112 * C50610) *
                C50941 +
            ((C14132 + C14131) * C49713 - (C49171 * C50874 + C49172 * C49720) +
             (C14134 + C14133) * C50610) *
                C44456) *
               C50626 * C50727) *
              C50889 +
          ((((C8377 + C8378) * C49713 -
             ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                  C50874 +
              (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                  C49720) +
             (C8379 + C8380) * C50610) *
                C50940 +
            (C14783 * C49713 -
             ((C14803 + C14804) * C50874 + (C14805 + C14806) * C49720) +
             C14792 * C50610) *
                C50941 +
            ((C14808 + C14807) * C49713 - (C48273 * C50874 + C48274 * C49720) +
             (C14810 + C14809) * C50610) *
                C44456) *
               C50626 * C1687 +
           (((C14806 + C14805) * C49720 + (C14804 + C14803) * C50874 -
             C14794 * C49713 - C14793 * C50610) *
                C50940 +
            ((C15337 + C15338) * C49720 + (C15339 + C15340) * C50874 -
             (C14807 + C14808) * C49713 - (C14809 + C14810) * C50610) *
                C50941 +
            ((C48276 + C48277) * C49720 + (C48278 + C48279) * C50874 -
             (C8145 * C4592 + C50796 * C4598 + C8144 * C4593 + C50902 * C4599) *
                 C49713 -
             (C8145 * C4596 + C50796 * C4604 + C8144 * C4597 + C50902 * C4605) *
                 C50610) *
                C44456) *
               C50626 * C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50940 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50941 +
            C48275 * C44456) *
               C50626 * C50936 -
           (C49187 * C44456 +
            ((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50941 +
            ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) * C50940) *
               C50626 * C50937 +
           (C48275 * C50940 +
            ((C16525 + C16526) * C1109 + (C16527 + C16528) * C50605) * C50941 +
            ((C49183 + C49184) * C1109 + (C49185 + C49186) * C50605) * C44456) *
               C50626 * C2103) *
              C50889 +
          ((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50940 +
            ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) * C50941 +
            ((C48276 + C48277) * C1109 + (C48278 + C48279) * C50605) * C44456) *
               C50626 * C50937 -
           (C48282 * C44456 +
            ((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50941 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50940) *
               C50626 * C50936 -
           (((C8145 * C23160 + C50796 * C23162 + C8144 * C6531 +
              C50902 * C6534) *
                 C50605 +
             (C8145 * C23159 + C50796 * C23161 + C8144 * C6528 +
              C50902 * C6532) *
                 C1109) *
                C44456 +
            ((C48279 + C48278) * C50605 + (C48277 + C48276) * C1109) * C50941 +
            C48282 * C50940) *
               C50626 * C2103) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50940 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50941 +
            C48275 * C44456) *
               C50626 * C1687 -
           (((C16528 + C16527) * C50605 + (C16526 + C16525) * C1109) * C44456 +
            ((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50941 +
            ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) * C50940) *
               C50626 * C50727) *
              C280 +
          ((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50940 +
            ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) * C50941 +
            ((C48276 + C48277) * C1109 + (C48278 + C48279) * C50605) * C44456) *
               C50626 * C50727 -
           (C48282 * C44456 +
            ((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50941 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50940) *
               C50626 * C1687) *
              C281 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C50940 +
            ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) * C50941 +
            ((C48777 + C48778) * C1109 + (C48779 + C48780) * C50605) * C44456) *
               C50626 * C1687 -
           (((C8145 * C21469 + C50796 * C21471 + C8144 * C4600 +
              C50902 * C4606) *
                 C50605 +
             (C8145 * C21468 + C50796 * C21470 + C8144 * C4594 +
              C50902 * C4602) *
                 C1109) *
                C44456 +
            ((C48780 + C48779) * C50605 + (C48778 + C48777) * C1109) * C50941 +
            ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) * C50940) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1035 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C1030 -
            (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
            C8196 * C1032) *
               C50940 +
           ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
            C14099 * C1036 - C14100 * C1031 + C14523 * C1037 + C14524 * C1032) *
               C50941 +
           (C47378 * C1035 + C47379 * C1030 - C14114 * C1036 - C14113 * C1031 +
            (C8584 + C8583) * C1037 + (C8586 + C8585) * C1032) *
               C44456) *
              C50626 * C1687 +
          ((C14101 * C1036 -
            ((C14126 + C14125) * C1030 + (C14124 + C14123) * C1035) +
            C14102 * C1031 - C8893 * C1037 - C8894 * C1032) *
               C50940 +
           (C14103 * C1036 -
            ((C14127 + C14128) * C1030 + (C14129 + C14130) * C1035) +
            C14112 * C1031 - (C8583 + C8584) * C1037 -
            (C8585 + C8586) * C1032) *
               C50941 +
           ((C14132 + C14131) * C1036 -
            ((C16528 + C16527) * C1030 + (C16526 + C16525) * C1035) +
            (C14134 + C14133) * C1031 -
            (C8145 * C6099 + C50796 * C6100 + C8144 * C1858 + C50902 * C1864) *
                C1037 -
            (C8145 * C6101 + C50796 * C6102 + C8144 * C1863 + C50902 * C1870) *
                C1032) *
               C44456) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1109 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50605) *
               C50940 +
           ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50941 +
           C48275 * C44456) *
              C50626 * C1853 -
          (C49187 * C44456 +
           ((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50941 +
           ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) * C50940) *
              C50626 * C1854 +
          (C48275 * C50940 +
           ((C16525 + C16526) * C1109 + (C16527 + C16528) * C50605) * C50941 +
           ((C49183 + C49184) * C1109 + (C49185 + C49186) * C50605) * C44456) *
              C50626 * C1855 -
          (((C8145 * C24084 + C50796 * C24086 + C8144 * C7525 +
             C50902 * C7528) *
                C50605 +
            (C8145 * C24083 + C50796 * C24085 + C8144 * C7522 +
             C50902 * C7526) *
                C1109) *
               C44456 +
           ((C49186 + C49185) * C50605 + (C49184 + C49183) * C1109) * C50941 +
           C49187 * C50940) *
              C50626 * C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C49720 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C50874 -
            (C8179 + C8180) * C49713 - (C8181 + C8182) * C50610) *
               C50940 +
           ((C14123 + C14124) * C49720 + (C14125 + C14126) * C50874 -
            C14099 * C49713 - C14100 * C50610) *
               C50941 +
           C49534 * C44456) *
              C50626 * C50936 +
          ((C14101 * C49713 -
            ((C14126 + C14125) * C50874 + (C14124 + C14123) * C49720) +
            C14102 * C50610) *
               C50940 +
           (C14103 * C49713 -
            ((C14127 + C14128) * C50874 + (C14129 + C14130) * C49720) +
            C14112 * C50610) *
               C50941 +
           ((C14132 + C14131) * C49713 - (C49171 * C50874 + C49172 * C49720) +
            (C14134 + C14133) * C50610) *
               C44456) *
              C50626 * C50937 +
          (C49534 * C50940 +
           ((C16525 + C16526) * C49720 + (C16527 + C16528) * C50874 -
            (C14131 + C14132) * C49713 - (C14133 + C14134) * C50610) *
               C50941 +
           ((C49183 + C49184) * C49720 + (C49185 + C49186) * C50874 -
            (C8145 * C6527 + C50796 * C6530 + C8144 * C5506 + C50902 * C5510) *
                C49713 -
            (C8145 * C6529 + C50796 * C6533 + C8144 * C5511 + C50902 * C5515) *
                C50610) *
               C44456) *
              C50626 * C2103) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                C1035 +
            (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                C1030 -
            (C8179 + C8180) * C1036 - (C8181 + C8182) * C1031 + C8195 * C1037 +
            C8196 * C1032) *
               C50940 +
           ((C14123 + C14124) * C1035 + (C14125 + C14126) * C1030 -
            C14099 * C1036 - C14100 * C1031 + C14523 * C1037 + C14524 * C1032) *
               C50941 +
           (C47378 * C1035 + C47379 * C1030 - C14114 * C1036 - C14113 * C1031 +
            (C8584 + C8583) * C1037 + (C8586 + C8585) * C1032) *
               C44456) *
              C50626 * C1687 +
          ((C14101 * C1036 -
            ((C14126 + C14125) * C1030 + (C14124 + C14123) * C1035) +
            C14102 * C1031 - C8893 * C1037 - C8894 * C1032) *
               C50940 +
           (C14103 * C1036 -
            ((C14127 + C14128) * C1030 + (C14129 + C14130) * C1035) +
            C14112 * C1031 - (C8583 + C8584) * C1037 -
            (C8585 + C8586) * C1032) *
               C50941 +
           ((C14132 + C14131) * C1036 -
            ((C16528 + C16527) * C1030 + (C16526 + C16525) * C1035) +
            (C14134 + C14133) * C1031 -
            (C8145 * C6099 + C50796 * C6100 + C8144 * C1858 + C50902 * C1864) *
                C1037 -
            (C8145 * C6101 + C50796 * C6102 + C8144 * C1863 + C50902 * C1870) *
                C1032) *
               C44456) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8144 * C122 + C50902 * C129 + C8145 * C286 + C50796 * C297) *
                 C1109 +
             (C8144 * C130 + C50902 * C143 + C8145 * C296 + C50796 * C315) *
                 C50605) *
                C50940 +
            ((C14123 + C14124) * C1109 + (C14125 + C14126) * C50605) * C50941 +
            C48275 * C44456) *
               C50626 * C1687 -
           (((C16528 + C16527) * C50605 + (C16526 + C16525) * C1109) * C44456 +
            ((C14127 + C14128) * C50605 + (C14129 + C14130) * C1109) * C50941 +
            ((C14126 + C14125) * C50605 + (C14124 + C14123) * C1109) * C50940) *
               C50626 * C50727) *
              C280 +
          ((((C14806 + C14805) * C1109 + (C14804 + C14803) * C50605) * C50940 +
            ((C15337 + C15338) * C1109 + (C15339 + C15340) * C50605) * C50941 +
            ((C48276 + C48277) * C1109 + (C48278 + C48279) * C50605) * C44456) *
               C50626 * C50727 -
           (C48282 * C44456 +
            ((C14803 + C14804) * C50605 + (C14805 + C14806) * C1109) * C50941 +
            ((C8145 * C306 + C50796 * C320 + C8144 * C296 + C50902 * C315) *
                 C50605 +
             (C8145 * C290 + C50796 * C305 + C8144 * C286 + C50902 * C297) *
                 C1109) *
                C50940) *
               C50626 * C1687) *
              C281 +
          ((((C8144 * C290 + C50902 * C305 + C8145 * C1113 + C50796 * C1121) *
                 C1109 +
             (C8144 * C306 + C50902 * C320 + C8145 * C1120 + C50796 * C1125) *
                 C50605) *
                C50940 +
            ((C15995 + C15996) * C1109 + (C15997 + C15998) * C50605) * C50941 +
            ((C48777 + C48778) * C1109 + (C48779 + C48780) * C50605) * C44456) *
               C50626 * C1687 -
           (((C8145 * C21469 + C50796 * C21471 + C8144 * C4600 +
              C50902 * C4606) *
                 C50605 +
             (C8145 * C21468 + C50796 * C21470 + C8144 * C4594 +
              C50902 * C4602) *
                 C1109) *
                C44456 +
            ((C48780 + C48779) * C50605 + (C48778 + C48777) * C1109) * C50941 +
            ((C15998 + C15997) * C50605 + (C15996 + C15995) * C1109) * C50940) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C641 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50930 -
            (C2345 + C2346 + C2347) * C642 - (C2348 + C2349 + C2350) * C50931 +
            (C2351 + C2352 + C2353) * C643 + (C2354 + C2355 + C2356) * C638) *
               C33763 +
           ((C36710 + C36711 + C36712) * C641 +
            (C36713 + C36714 + C36715) * C50930 -
            (C2741 + C2740 + C2739) * C642 - (C2744 + C2743 + C2742) * C50931 +
            (C3075 + C3074 + C3073) * C643 + (C3078 + C3077 + C3076) * C638) *
               C50824) *
              C50626 * C50663 * C50889 +
          (((C2545 + C2546 + C2547) * C642 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50930 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C641) +
            (C2548 + C2549 + C2550) * C50931 - (C2909 + C2910 + C2911) * C643 -
            (C2912 + C2913 + C2914) * C638) *
               C33763 +
           ((C3299 + C3298 + C3297) * C642 -
            ((C2307 * C3276 + C2302 * C3281 + C2306 * C1583 + C2301 * C1588 +
              C2305 * C900 + C2300 * C909) *
                 C50930 +
             (C2307 * C3272 + C2302 * C3275 + C2306 * C1576 + C2301 * C1584 +
              C2305 * C894 + C2300 * C899) *
                 C641) +
            (C3302 + C3301 + C3300) * C50931 -
            (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
             C2305 * C896 + C2300 * C903) *
                C643 -
            (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
             C2305 * C904 + C2300 * C911) *
                C638) *
               C50824) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C641 +
             (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
             C172 * C50931 + C173 * C643 + C174 * C638) *
                C33763 +
            (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C50824) *
               C17274 +
           ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
             C175 * C643 + C176 * C638) *
                C33763 +
            (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C50824) *
               C17275 +
           ((C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
             C177 * C643 + C178 * C638) *
                C33763 +
            (C11575 + C11576 - C11577 - C11578 + C11579 + C11580) * C50824) *
               C17276) *
              C50663 * C50889 +
          (((C350 * C642 -
             ((C117 * C296 + C50744 * C315) * C50930 +
              (C117 * C286 + C50744 * C297) * C641) +
             C351 * C50931 - C352 * C643 - C353 * C638) *
                C33763 +
            (C927 * C642 - (C6128 * C50930 + C6129 * C641) + C928 * C50931 -
             C929 * C643 - C930 * C638) *
                C50824) *
               C17274 +
           ((C352 * C642 - (C351 * C50930 + C350 * C641) + C353 * C50931 -
             C354 * C643 - C355 * C638) *
                C33763 +
            (C929 * C642 - (C928 * C50930 + C927 * C641) + C930 * C50931 -
             C931 * C643 - C932 * C638) *
                C50824) *
               C17275 +
           ((C354 * C642 - (C353 * C50930 + C352 * C641) + C355 * C50931 -
             C653 * C643 - C654 * C638) *
                C33763 +
            (C931 * C642 - (C930 * C50930 + C929 * C641) + C932 * C50931 -
             (C117 * C898 + C50744 * C907) * C643 -
             (C117 * C908 + C50744 * C913) * C638) *
                C50824) *
               C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C641 +
            (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
            C172 * C50931 + C173 * C643 + C174 * C638) *
               C39097 +
           (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C39098 +
           (C5888 + C5889 - C5890 - C5891 + C5892 + C5893) * C39099 +
           (C5561 * C641 + C5560 * C50930 - C5559 * C642 - C5562 * C50931 +
            C5563 * C643 + C5564 * C638) *
               C39100) *
              C50626 * C50663 * C50889 +
          ((C350 * C642 -
            ((C117 * C296 + C50744 * C315) * C50930 +
             (C117 * C286 + C50744 * C297) * C641) +
            C351 * C50931 - C352 * C643 - C353 * C638) *
               C39097 +
           (C927 * C642 - (C6128 * C50930 + C6129 * C641) + C928 * C50931 -
            C929 * C643 - C930 * C638) *
               C39098 +
           (C5354 * C642 - (C6130 * C50930 + C6131 * C641) + C5355 * C50931 -
            C5734 * C643 - C5735 * C638) *
               C39099 +
           (C6132 * C642 - (C6565 * C50930 + C6564 * C641) + C6133 * C50931 -
            (C117 * C6099 + C50744 * C6100) * C643 -
            (C117 * C6101 + C50744 * C6102) * C638) *
               C39100) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C283 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C278 -
             (C2345 + C2346 + C2347) * C284 -
             (C2348 + C2349 + C2350) * C50610) *
                C33763 +
            ((C36710 + C36711 + C36712) * C283 +
             (C36713 + C36714 + C36715) * C278 -
             (C2741 + C2740 + C2739) * C284 -
             (C2744 + C2743 + C2742) * C50610) *
                C50824) *
               C50626 * C50890 +
           (((C2739 + C2740 + C2741) * C284 -
             ((C36715 + C36714 + C36713) * C278 +
              (C36712 + C36711 + C36710) * C283) +
             (C2742 + C2743 + C2744) * C50610) *
                C33763 +
            ((C2747 + C2746 + C2745) * C284 -
             ((C36716 + C36717 + C36718) * C278 +
              (C36719 + C36720 + C36721) * C283) +
             (C2750 + C2749 + C2748) * C50610) *
                C50824) *
               C50626 * C50727) *
              C50889 +
          ((((C2545 + C2546 + C2547) * C284 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C278 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C283) +
             (C2548 + C2549 + C2550) * C50610) *
                C33763 +
            ((C3299 + C3298 + C3297) * C284 -
             ((C37220 + C37221 + C37222) * C278 +
              (C37223 + C37224 + C37225) * C283) +
             (C3302 + C3301 + C3300) * C50610) *
                C50824) *
               C50626 * C50890 +
           (((C37225 + C37224 + C37223) * C283 +
             (C37222 + C37221 + C37220) * C278 -
             (C3297 + C3298 + C3299) * C284 -
             (C3300 + C3301 + C3302) * C50610) *
                C33763 +
            ((C2305 * C1227 + C2300 * C1235 + C2306 * C2702 + C2301 * C2705 +
              C2307 * C3701 + C2302 * C3705) *
                 C283 +
             (C2305 * C1234 + C2300 * C1239 + C2306 * C2706 + C2301 * C2711 +
              C2307 * C3704 + C2302 * C3707) *
                 C278 -
             (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 + C2301 * C2707 +
              C2305 * C1226 + C2300 * C1233) *
                 C284 -
             (C2307 * C3702 + C2302 * C3706 + C2306 * C2708 + C2301 * C2712 +
              C2305 * C1232 + C2300 * C1238) *
                 C50610) *
                C50824) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C283 +
              (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
              C172 * C50610) *
                 C33763 +
             (C5567 + C5568 - C5522 - C5523) * C50824) *
                C17274 +
            ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) *
                 C33763 +
             (C5530 + C5531 - C5532 - C5533) * C50824) *
                C17275 +
            ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) *
                 C33763 +
             (C11275 + C11276 - C11277 - C11278) * C50824) *
                C17276) *
               C50890 +
           (((C5522 - (C5568 + C5567) + C5523) * C33763 +
             (C5528 - (C5570 + C5569) + C5529) * C50824) *
                C17274 +
            ((C5532 - (C5531 + C5530) + C5533) * C33763 +
             (C5536 - (C5535 + C5534) + C5537) * C50824) *
                C17275 +
            ((C11277 - (C11276 + C11275) + C11278) * C33763 +
             (C11279 - (C11280 + C11281) + C11282) * C50824) *
                C17276) *
               C50727) *
              C50889 +
          ((((C350 * C284 -
              ((C117 * C296 + C50744 * C315) * C278 +
               (C117 * C286 + C50744 * C297) * C283) +
              C351 * C50610) *
                 C33763 +
             (C6104 - (C6134 + C6135) + C6109) * C50824) *
                C17274 +
            ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                 C33763 +
             (C6116 - (C6117 + C6118) + C6119) * C50824) *
                C17275 +
            ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                 C33763 +
             (C11775 - (C11776 + C11777) + C11778) * C50824) *
                C17276) *
               C50890 +
           (((C6135 + C6134 - C6104 - C6109) * C33763 +
             (C6137 + C6136 - C6110 - C6115) * C50824) *
                C17274 +
            ((C6118 + C6117 - C6116 - C6119) * C33763 +
             (C6122 + C6121 - C6120 - C6123) * C50824) *
                C17275 +
            ((C11777 + C11776 - C11775 - C11778) * C33763 +
             (C5734 * C283 + C5735 * C278 -
              (C117 * C1224 + C50744 * C1229) * C284 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C39097 +
            (C5567 + C5568 - C5522 - C5523) * C39098 + C5583 * C39099 +
            C39304 * C39100) *
               C50626 * C50890 +
           ((C5522 - (C5568 + C5567) + C5523) * C39097 +
            (C5528 - (C5570 + C5569) + C5529) * C39098 +
            (C5572 - (C5573 + C5574) + C5575) * C39099 +
            (C39299 - (C39300 + C39301) + C39302) * C39100) *
               C50626 * C50727) *
              C50889 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C39097 +
            (C6104 - (C6134 + C6135) + C6109) * C39098 +
            (C6110 - (C6136 + C6137) + C6115) * C39099 +
            (C39637 - (C39638 + C39639) + C39640) * C39100) *
               C50626 * C50890 +
           ((C6135 + C6134 - C6104 - C6109) * C39097 +
            (C6137 + C6136 - C6110 - C6115) * C39098 +
            (C39639 + C39638 - C39637 - C39640) * C39099 +
            ((C117 * C6528 + C50744 * C6532) * C283 +
             (C117 * C6531 + C50744 * C6534) * C278 -
             (C117 * C6527 + C50744 * C6530) * C284 -
             (C117 * C6529 + C50744 * C6533) * C50610) *
                C39100) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50744 * C129) * C118 +
                (C117 * C130 + C50744 * C143) * C106 - C171 * C119 -
                C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
                C176 * C109) *
                   C33763 +
               (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
                C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
                   C50824) *
                  C17274 +
              ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
                C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                   C33763 +
               (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
                C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
                   C50824) *
                  C17275 +
              ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
                C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                   C33763 +
               (C529 * C118 + C530 * C106 - C531 * C119 - C532 * C107 +
                C763 * C120 + C764 * C108 -
                (C117 * C754 + C50744 * C755) * C121 -
                (C117 * C756 + C50744 * C757) * C109) *
                   C50824) *
                  C17276) *
             C50663 * C50651 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50744 * C129) * C283 +
                 (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
                 C172 * C50610) *
                    C33763 +
                (C5567 + C5568 - C5522 - C5523) * C50824) *
                   C17274 +
               ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) *
                    C33763 +
                (C5530 + C5531 - C5532 - C5533) * C50824) *
                   C17275 +
               ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) *
                    C33763 +
                (C11275 + C11276 - C11277 - C11278) * C50824) *
                   C17276) *
                  C50663 * C280 +
              (((C350 * C284 -
                 ((C117 * C296 + C50744 * C315) * C278 +
                  (C117 * C286 + C50744 * C297) * C283) +
                 C351 * C50610) *
                    C33763 +
                (C6104 - (C6134 + C6135) + C6109) * C50824) *
                   C17274 +
               ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                    C33763 +
                (C6116 - (C6117 + C6118) + C6119) * C50824) *
                   C17275 +
               ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                    C33763 +
                (C11775 - (C11776 + C11777) + C11778) * C50824) *
                   C17276) *
                  C50663 * C281 +
              ((((C117 * C290 + C50744 * C305) * C283 +
                 (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
                 C357 * C50610) *
                    C33763 +
                (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
                    C50824) *
                   C17274 +
               ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) *
                    C33763 +
                (C5356 * C283 + C5357 * C278 - C11127 * C284 -
                 C11128 * C50610) *
                    C50824) *
                   C17275 +
               ((C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) *
                    C33763 +
                (C11127 * C283 + C11128 * C278 -
                 (C117 * C1573 + C50744 * C1578) * C284 -
                 (C117 * C1577 + C50744 * C1585) * C50610) *
                    C50824) *
                   C17276) *
                  C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C33763 +
            (C5567 + C5568 - C5522 - C5523) * C50824) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C33763 +
            (C5530 + C5531 - C5532 - C5533) * C50824) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C33763 +
            (C11275 + C11276 - C11277 - C11278) * C50824) *
               C17276) *
              C459 +
          (((C5522 - (C5568 + C5567) + C5523) * C33763 +
            (C5528 - (C5570 + C5569) + C5529) * C50824) *
               C17274 +
           ((C5532 - (C5531 + C5530) + C5533) * C33763 +
            (C5536 - (C5535 + C5534) + C5537) * C50824) *
               C17275 +
           ((C11277 - (C11276 + C11275) + C11278) * C33763 +
            (C11279 - (C11280 + C11281) + C11282) * C50824) *
               C17276) *
              C460 +
          ((C5583 * C33763 + (C5574 + C5573 - C5572 - C5575) * C50824) *
               C17274 +
           (C5581 * C33763 + (C5578 + C5577 - C5576 - C5579) * C50824) *
               C17275 +
           ((C11281 + C11280 - C11279 - C11282) * C33763 +
            (C5563 * C283 + C5564 * C278 -
             (C117 * C1857 + C50744 * C1862) * C284 -
             (C117 * C1861 + C50744 * C1869) * C50610) *
                C50824) *
               C17276) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
            C2307 * C290 + C2302 * C305) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
            C2307 * C306 + C2302 * C320) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C33763 +
          ((C2305 * C463 + C2300 * C474 + C2306 * C894 + C2301 * C899 +
            C2307 * C1576 + C2302 * C1584) *
               C118 +
           (C2305 * C473 + C2300 * C492 + C2306 * C900 + C2301 * C909 +
            C2307 * C1583 + C2302 * C1588) *
               C106 -
           (C2741 + C2740 + C2739) * C119 - (C2744 + C2743 + C2742) * C107 +
           (C3075 + C3074 + C3073) * C120 + (C3078 + C3077 + C3076) * C108 -
           (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
            C2305 * C465 + C2300 * C478) *
               C121 -
           (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
            C2305 * C479 + C2300 * C495) *
               C109) *
              C50824) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C2305 * C463 + C2300 * C474 + C2306 * C894 + C2301 * C899 +
             C2307 * C1576 + C2302 * C1584) *
                C283 +
            (C2305 * C473 + C2300 * C492 + C2306 * C900 + C2301 * C909 +
             C2307 * C1583 + C2302 * C1588) *
                C278 -
            (C2741 + C2740 + C2739) * C284 - (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C50663 * C280 +
          (((C2545 + C2546 + C2547) * C284 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C278 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C283) +
            (C2548 + C2549 + C2550) * C50610) *
               C33763 +
           ((C3299 + C3298 + C3297) * C284 -
            ((C2307 * C3276 + C2302 * C3281 + C2306 * C1583 + C2301 * C1588 +
              C2305 * C900 + C2300 * C909) *
                 C278 +
             (C2307 * C3272 + C2302 * C3275 + C2306 * C1576 + C2301 * C1584 +
              C2305 * C894 + C2300 * C899) *
                 C283) +
            (C3302 + C3301 + C3300) * C50610) *
               C50824) *
              C50626 * C50663 * C281 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C283 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C278 -
            (C2551 + C2552 + C2553) * C284 - (C2554 + C2555 + C2556) * C50610) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C283 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C278 -
            (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
             C2305 * C1575 + C2300 * C1582) *
                C284 -
            (C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
             C2305 * C1581 + C2300 * C1587) *
                C50610) *
               C50824) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C36710 + C36711 + C36712) * C283 +
            (C36713 + C36714 + C36715) * C278 - (C2741 + C2740 + C2739) * C284 -
            (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C459 +
          (((C2739 + C2740 + C2741) * C284 -
            ((C36715 + C36714 + C36713) * C278 +
             (C36712 + C36711 + C36710) * C283) +
            (C2742 + C2743 + C2744) * C50610) *
               C33763 +
           ((C2747 + C2746 + C2745) * C284 -
            ((C36716 + C36717 + C36718) * C278 +
             (C36719 + C36720 + C36721) * C283) +
            (C2750 + C2749 + C2748) * C50610) *
               C50824) *
              C50626 * C460 +
          (((C36721 + C36720 + C36719) * C283 +
            (C36718 + C36717 + C36716) * C278 - (C2745 + C2746 + C2747) * C284 -
            (C2748 + C2749 + C2750) * C50610) *
               C33763 +
           ((C2305 * C1860 + C2300 * C1868 + C2306 * C4595 + C2301 * C4603 +
             C2307 * C4594 + C2302 * C4602) *
                C283 +
            (C2305 * C1867 + C2300 * C1872 + C2306 * C4601 + C2301 * C4607 +
             C2307 * C4600 + C2302 * C4606) *
                C278 -
            (C2307 * C4592 + C2302 * C4598 + C2306 * C4593 + C2301 * C4599 +
             C2305 * C1859 + C2300 * C1866) *
                C284 -
            (C2307 * C4596 + C2302 * C4604 + C2306 * C4597 + C2301 * C4605 +
             C2305 * C1865 + C2300 * C1871) *
                C50610) *
               C50824) *
              C50626 * C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C50744 * C129) * C118 +
           (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C39097 +
          (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
           C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
              C39098 +
          (C5556 * C118 + C5557 * C106 - C533 * C119 - C534 * C107 +
           C535 * C120 + C536 * C108 - C537 * C121 - C538 * C109) *
              C39099 +
          (C5561 * C118 + C5560 * C106 - C5559 * C119 - C5562 * C107 +
           C5563 * C120 + C5564 * C108 -
           (C117 * C1857 + C50744 * C1862) * C121 -
           (C117 * C1861 + C50744 * C1869) * C109) *
              C39100) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C283 +
            (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
            C172 * C50610) *
               C39097 +
           (C5567 + C5568 - C5522 - C5523) * C39098 + C5583 * C39099 +
           (C5574 + C5573 - C5572 - C5575) * C39100) *
              C50626 * C50663 * C280 +
          ((C350 * C284 -
            ((C117 * C296 + C50744 * C315) * C278 +
             (C117 * C286 + C50744 * C297) * C283) +
            C351 * C50610) *
               C39097 +
           (C6104 - (C6134 + C6135) + C6109) * C39098 +
           (C6110 - (C6136 + C6137) + C6115) * C39099 +
           (C6132 * C284 - (C6565 * C278 + C6564 * C283) + C6133 * C50610) *
               C39100) *
              C50626 * C50663 * C281 +
          (((C117 * C290 + C50744 * C305) * C283 +
            (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
            C357 * C50610) *
               C39097 +
           (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
               C39098 +
           (C7102 * C283 + C7103 * C278 - C5358 * C284 - C5359 * C50610) *
               C39099 +
           ((C117 * C4594 + C50744 * C4602) * C283 +
            (C117 * C4600 + C50744 * C4606) * C278 -
            (C117 * C4592 + C50744 * C4598) * C284 -
            (C117 * C4596 + C50744 * C4604) * C50610) *
               C39100) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C283 +
            (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
            C172 * C50610) *
               C39097 +
           (C5567 + C5568 - C5522 - C5523) * C39098 + C5583 * C39099 +
           C39304 * C39100) *
              C50626 * C459 +
          ((C5522 - (C5568 + C5567) + C5523) * C39097 +
           (C5528 - (C5570 + C5569) + C5529) * C39098 +
           (C5572 - (C5573 + C5574) + C5575) * C39099 +
           (C39299 - (C39300 + C39301) + C39302) * C39100) *
              C50626 * C460 +
          (C5583 * C39097 + C39304 * C39098 +
           (C39301 + C39300 - C39299 - C39302) * C39099 +
           ((C117 * C7522 + C50744 * C7526) * C283 +
            (C117 * C7525 + C50744 * C7528) * C278 -
            (C117 * C7521 + C50744 * C7524) * C284 -
            (C117 * C7523 + C50744 * C7527) * C50610) *
               C39100) *
              C50626 * C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C641 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50930 -
            (C2345 + C2346 + C2347) * C642 - (C2348 + C2349 + C2350) * C50931 +
            (C2351 + C2352 + C2353) * C643 + (C2354 + C2355 + C2356) * C638) *
               C33763 +
           ((C36710 + C36711 + C36712) * C641 +
            (C36713 + C36714 + C36715) * C50930 -
            (C2741 + C2740 + C2739) * C642 - (C2744 + C2743 + C2742) * C50931 +
            (C3075 + C3074 + C3073) * C643 + (C3078 + C3077 + C3076) * C638) *
               C50824) *
              C50626 * C50890 +
          (((C2739 + C2740 + C2741) * C642 -
            ((C36715 + C36714 + C36713) * C50930 +
             (C36712 + C36711 + C36710) * C641) +
            (C2742 + C2743 + C2744) * C50931 - (C3073 + C3074 + C3075) * C643 -
            (C3076 + C3077 + C3078) * C638) *
               C33763 +
           ((C2747 + C2746 + C2745) * C642 -
            ((C36716 + C36717 + C36718) * C50930 +
             (C36719 + C36720 + C36721) * C641) +
            (C2750 + C2749 + C2748) * C50931 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C643 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C638) *
               C50824) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C641 +
             (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
             C172 * C50931 + C173 * C643 + C174 * C638) *
                C33763 +
            (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C50824) *
               C17274 +
           ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
             C175 * C643 + C176 * C638) *
                C33763 +
            (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C50824) *
               C17275 +
           ((C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
             C177 * C643 + C178 * C638) *
                C33763 +
            (C11575 + C11576 - C11577 - C11578 + C11579 + C11580) * C50824) *
               C17276) *
              C50890 +
          (((C5884 - (C5883 + C5882) + C5885 - C5886 - C5887) * C33763 +
            (C5890 - (C5889 + C5888) + C5891 - C5892 - C5893) * C50824) *
               C17274 +
           ((C5896 - (C5895 + C5894) + C5897 - C5898 - C5899) * C33763 +
            (C5902 - (C5901 + C5900) + C5903 - C5904 - C5905) * C50824) *
               C17275 +
           ((C11577 - (C11576 + C11575) + C11578 - C11579 - C11580) * C33763 +
            (C537 * C642 - (C536 * C50930 + C535 * C641) + C538 * C50931 -
             (C117 * C471 + C50744 * C490) * C643 -
             (C117 * C491 + C50744 * C501) * C638) *
                C50824) *
               C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C641 +
            (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
            C172 * C50931 + C173 * C643 + C174 * C638) *
               C39097 +
           (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C39098 +
           (C5888 + C5889 - C5890 - C5891 + C5892 + C5893) * C39099 +
           (C39501 + C39502 - C39503 - C39504 + C39505 + C39506) * C39100) *
              C50626 * C50890 +
          ((C5884 - (C5883 + C5882) + C5885 - C5886 - C5887) * C39097 +
           (C5890 - (C5889 + C5888) + C5891 - C5892 - C5893) * C39098 +
           (C39503 - (C39502 + C39501) + C39504 - C39505 - C39506) * C39099 +
           (C5565 * C642 - (C7539 * C50930 + C7538 * C641) + C5566 * C50931 -
            (C117 * C5507 + C50744 * C5512) * C643 -
            (C117 * C5513 + C50744 * C5516) * C638) *
               C39100) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C33763 +
            (C5567 + C5568 - C5522 - C5523) * C50824) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C33763 +
            (C5530 + C5531 - C5532 - C5533) * C50824) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C33763 +
            (C11275 + C11276 - C11277 - C11278) * C50824) *
               C17276) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C33763 +
            (C6104 - (C6134 + C6135) + C6109) * C50824) *
               C17274 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C33763 +
            (C6116 - (C6117 + C6118) + C6119) * C50824) *
               C17275 +
           ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                C33763 +
            (C11775 - (C11776 + C11777) + C11778) * C50824) *
               C17276) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C33763 +
            (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
                C50824) *
               C17274 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C33763 +
            (C5356 * C283 + C5357 * C278 - C11127 * C284 - C11128 * C50610) *
                C50824) *
               C17275 +
           ((C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) * C33763 +
            (C11127 * C283 + C11128 * C278 -
             (C117 * C1573 + C50744 * C1578) * C284 -
             (C117 * C1577 + C50744 * C1585) * C50610) *
                C50824) *
               C17276) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C33763 +
           (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C50824) *
              C17274 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C33763 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C50824) *
              C17275 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C33763 +
           (C529 * C118 + C530 * C106 - C531 * C119 - C532 * C107 +
            C763 * C120 + C764 * C108 - (C117 * C754 + C50744 * C755) * C121 -
            (C117 * C756 + C50744 * C757) * C109) *
               C50824) *
              C17276) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
            C2307 * C290 + C2302 * C305) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
            C2307 * C306 + C2302 * C320) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C33763 +
          ((C2305 * C463 + C2300 * C474 + C2306 * C894 + C2301 * C899 +
            C2307 * C1576 + C2302 * C1584) *
               C118 +
           (C2305 * C473 + C2300 * C492 + C2306 * C900 + C2301 * C909 +
            C2307 * C1583 + C2302 * C1588) *
               C106 -
           (C2741 + C2740 + C2739) * C119 - (C2744 + C2743 + C2742) * C107 +
           (C3075 + C3074 + C3073) * C120 + (C3078 + C3077 + C3076) * C108 -
           (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
            C2305 * C465 + C2300 * C478) *
               C121 -
           (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
            C2305 * C479 + C2300 * C495) *
               C109) *
              C50824) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C2305 * C463 + C2300 * C474 + C2306 * C894 + C2301 * C899 +
             C2307 * C1576 + C2302 * C1584) *
                C283 +
            (C2305 * C473 + C2300 * C492 + C2306 * C900 + C2301 * C909 +
             C2307 * C1583 + C2302 * C1588) *
                C278 -
            (C2741 + C2740 + C2739) * C284 - (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C50663 * C280 +
          (((C2545 + C2546 + C2547) * C284 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C278 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C283) +
            (C2548 + C2549 + C2550) * C50610) *
               C33763 +
           ((C3299 + C3298 + C3297) * C284 -
            ((C2307 * C3276 + C2302 * C3281 + C2306 * C1583 + C2301 * C1588 +
              C2305 * C900 + C2300 * C909) *
                 C278 +
             (C2307 * C3272 + C2302 * C3275 + C2306 * C1576 + C2301 * C1584 +
              C2305 * C894 + C2300 * C899) *
                 C283) +
            (C3302 + C3301 + C3300) * C50610) *
               C50824) *
              C50626 * C50663 * C281 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C283 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C278 -
            (C2551 + C2552 + C2553) * C284 - (C2554 + C2555 + C2556) * C50610) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C283 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C278 -
            (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
             C2305 * C1575 + C2300 * C1582) *
                C284 -
            (C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
             C2305 * C1581 + C2300 * C1587) *
                C50610) *
               C50824) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50744 * C129) * C118 +
           (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C39097 +
          (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
           C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
              C39098 +
          (C5556 * C118 + C5557 * C106 - C533 * C119 - C534 * C107 +
           C535 * C120 + C536 * C108 - C537 * C121 - C538 * C109) *
              C39099 +
          (C5561 * C118 + C5560 * C106 - C5559 * C119 - C5562 * C107 +
           C5563 * C120 + C5564 * C108 -
           (C117 * C1857 + C50744 * C1862) * C121 -
           (C117 * C1861 + C50744 * C1869) * C109) *
              C39100) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C283 +
            (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
            C172 * C50610) *
               C39097 +
           (C5567 + C5568 - C5522 - C5523) * C39098 + C5583 * C39099 +
           (C5574 + C5573 - C5572 - C5575) * C39100) *
              C50626 * C50663 * C280 +
          ((C350 * C284 -
            ((C117 * C296 + C50744 * C315) * C278 +
             (C117 * C286 + C50744 * C297) * C283) +
            C351 * C50610) *
               C39097 +
           (C6104 - (C6134 + C6135) + C6109) * C39098 +
           (C6110 - (C6136 + C6137) + C6115) * C39099 +
           (C6132 * C284 - (C6565 * C278 + C6564 * C283) + C6133 * C50610) *
               C39100) *
              C50626 * C50663 * C281 +
          (((C117 * C290 + C50744 * C305) * C283 +
            (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
            C357 * C50610) *
               C39097 +
           (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
               C39098 +
           (C7102 * C283 + C7103 * C278 - C5358 * C284 - C5359 * C50610) *
               C39099 +
           ((C117 * C4594 + C50744 * C4602) * C283 +
            (C117 * C4600 + C50744 * C4606) * C278 -
            (C117 * C4592 + C50744 * C4598) * C284 -
            (C117 * C4596 + C50744 * C4604) * C50610) *
               C39100) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50874 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C36710 + C36711 + C36712) * C49720 +
            (C36713 + C36714 + C36715) * C50874 -
            (C2741 + C2740 + C2739) * C49713 -
            (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C50663 * C50934 +
          (((C2545 + C2546 + C2547) * C49713 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50874 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C49720) +
            (C2548 + C2549 + C2550) * C50610) *
               C33763 +
           ((C3299 + C3298 + C3297) * C49713 -
            ((C37220 + C37221 + C37222) * C50874 +
             (C37223 + C37224 + C37225) * C49720) +
            (C3302 + C3301 + C3300) * C50610) *
               C50824) *
              C50626 * C50663 * C50935 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C49720 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50874 -
            (C2551 + C2552 + C2553) * C49713 -
            (C2554 + C2555 + C2556) * C50610) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C49720 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C50874 -
            (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
             C2305 * C1575 + C2300 * C1582) *
                C49713 -
            (C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
             C2305 * C1581 + C2300 * C1587) *
                C50610) *
               C50824) *
              C50626 * C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C33763 +
            (C6910 + C6911 - C6912 - C6913) * C50824) *
               C17274 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C33763 +
            (C6918 + C6919 - C6920 - C6921) * C50824) *
               C17275 +
           ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C33763 +
            (C12517 + C12518 - C12519 - C12520) * C50824) *
               C17276) *
              C50663 * C50934 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C33763 +
            (C6926 - (C6927 + C6928) + C6929) * C50824) *
               C17274 +
           ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C33763 +
            (C6934 - (C6935 + C6936) + C6937) * C50824) *
               C17275 +
           ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                C33763 +
            (C12521 - (C12522 + C12523) + C12524) * C50824) *
               C17276) *
              C50663 * C50935 +
          ((((C117 * C290 + C50744 * C305) * C49720 +
             (C117 * C306 + C50744 * C320) * C50874 - C356 * C49713 -
             C357 * C50610) *
                C33763 +
            (C7100 * C49720 + C7101 * C50874 - C5356 * C49713 -
             C5357 * C50610) *
                C50824) *
               C17274 +
           ((C356 * C49720 + C357 * C50874 - C358 * C49713 - C359 * C50610) *
                C33763 +
            (C5356 * C49720 + C5357 * C50874 - C11127 * C49713 -
             C11128 * C50610) *
                C50824) *
               C17275 +
           ((C358 * C49720 + C359 * C50874 - C360 * C49713 - C361 * C50610) *
                C33763 +
            (C11127 * C49720 + C11128 * C50874 -
             (C117 * C1573 + C50744 * C1578) * C49713 -
             (C117 * C1577 + C50744 * C1585) * C50610) *
                C50824) *
               C17276) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C49720 +
            (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
            C172 * C50610) *
               C39097 +
           (C6910 + C6911 - C6912 - C6913) * C39098 + C7894 * C39099 +
           (C7886 + C7885 - C7884 - C7887) * C39100) *
              C50626 * C50663 * C50934 +
          ((C350 * C49713 -
            ((C117 * C296 + C50744 * C315) * C50874 +
             (C117 * C286 + C50744 * C297) * C49720) +
            C351 * C50610) *
               C39097 +
           (C6926 - (C6927 + C6928) + C6929) * C39098 +
           (C6930 - (C6931 + C6932) + C6933) * C39099 +
           (C6132 * C49713 - (C6565 * C50874 + C6564 * C49720) +
            C6133 * C50610) *
               C39100) *
              C50626 * C50663 * C50935 +
          (((C117 * C290 + C50744 * C305) * C49720 +
            (C117 * C306 + C50744 * C320) * C50874 - C356 * C49713 -
            C357 * C50610) *
               C39097 +
           (C7100 * C49720 + C7101 * C50874 - C5356 * C49713 - C5357 * C50610) *
               C39098 +
           (C7102 * C49720 + C7103 * C50874 - C5358 * C49713 - C5359 * C50610) *
               C39099 +
           ((C117 * C4594 + C50744 * C4602) * C49720 +
            (C117 * C4600 + C50744 * C4606) * C50874 -
            (C117 * C4592 + C50744 * C4598) * C49713 -
            (C117 * C4596 + C50744 * C4604) * C50610) *
               C39100) *
              C50626 * C50663 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C50890 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C50727) *
              C50934 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C50727 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C50890) *
              C50935 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C33763 +
            ((C38132 + C38133 + C38134) * C1109 +
             (C38135 + C38136 + C38137) * C50605) *
                C50824) *
               C50626 * C50890 -
           (((C2307 * C20873 + C2302 * C20875 + C2306 * C3704 + C2301 * C3707 +
              C2305 * C2706 + C2300 * C2711) *
                 C50605 +
             (C2307 * C20872 + C2302 * C20874 + C2306 * C3701 + C2301 * C3705 +
              C2305 * C2702 + C2300 * C2705) *
                 C1109) *
                C50824 +
            ((C38137 + C38136 + C38135) * C50605 +
             (C38134 + C38133 + C38132) * C1109) *
                C33763) *
               C50626 * C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C50890 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C50727) *
              C50934 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C50727 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C50890) *
              C50935 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C33763 +
             (C7104 + C7105) * C50824) *
                C17274 +
            ((C356 * C1109 + C357 * C50605) * C33763 +
             (C7096 + C7097) * C50824) *
                C17275 +
            ((C358 * C1109 + C359 * C50605) * C33763 +
             (C12671 + C12672) * C50824) *
                C17276) *
               C50890 -
           ((((C117 * C2710 + C50744 * C2713) * C50605 +
              (C117 * C2704 + C50744 * C2709) * C1109) *
                 C50824 +
             (C12672 + C12671) * C33763) *
                C17276 +
            ((C7099 + C7098) * C50824 + (C7097 + C7096) * C33763) * C17275 +
            ((C7107 + C7106) * C50824 + (C7105 + C7104) * C33763) * C17274) *
               C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C39097 +
            (C6536 + C6537) * C39098 + C6562 * C39099 + C39903 * C39100) *
               C50626 * C50890 -
           ((C7541 + C7540) * C39100 + C7531 * C39099 +
            (C6539 + C6538) * C39098 + (C6537 + C6536) * C39097) *
               C50626 * C50727) *
              C50934 +
          (((C6548 + C6549) * C39097 + (C6550 + C6551) * C39098 +
            (C6568 + C6569) * C39099 + (C39911 + C39912) * C39100) *
               C50626 * C50727 -
           (C39908 * C39100 + C6567 * C39099 + (C6549 + C6548) * C39098 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C39097) *
               C50626 * C50890) *
              C50935 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C39097 +
            (C7104 + C7105) * C39098 + (C7106 + C7107) * C39099 +
            (C40249 + C40250) * C39100) *
               C50626 * C50890 -
           (((C117 * C23160 + C50744 * C23162) * C50605 +
             (C117 * C23159 + C50744 * C23161) * C1109) *
                C39100 +
            (C40250 + C40249) * C39099 + (C7107 + C7106) * C39098 +
            (C7105 + C7104) * C39097) *
               C50626 * C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50744 * C129) * C1035 +
                 (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
                 C172 * C1031 + C173 * C1037 + C174 * C1032) *
                    C33763 +
                (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
                   C17274 +
               ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                 C175 * C1037 + C176 * C1032) *
                    C33763 +
                (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
                   C17275 +
               ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                 C177 * C1037 + C178 * C1032) *
                    C33763 +
                (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) *
                    C50824) *
                   C17276) *
                  C50663 * C1033 +
              (((C350 * C1036 -
                 ((C117 * C296 + C50744 * C315) * C1030 +
                  (C117 * C286 + C50744 * C297) * C1035) +
                 C351 * C1031 - C352 * C1037 - C353 * C1032) *
                    C33763 +
                (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
                 C929 * C1037 - C930 * C1032) *
                    C50824) *
                   C17274 +
               ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
                 C354 * C1037 - C355 * C1032) *
                    C33763 +
                (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
                 C931 * C1037 - C932 * C1032) *
                    C50824) *
                   C17275 +
               ((C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
                 C653 * C1037 - C654 * C1032) *
                    C33763 +
                (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
                 (C117 * C898 + C50744 * C907) * C1037 -
                 (C117 * C908 + C50744 * C913) * C1032) *
                    C50824) *
                   C17276) *
                  C50663 * C50701) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50744 * C129) * C1109 +
                 (C117 * C130 + C50744 * C143) * C50605) *
                    C33763 +
                (C6536 + C6537) * C50824) *
                   C17274 +
               ((C171 * C1109 + C172 * C50605) * C33763 +
                (C6540 + C6541) * C50824) *
                   C17275 +
               ((C173 * C1109 + C174 * C50605) * C33763 +
                (C12169 + C12170) * C50824) *
                   C17276) *
                  C50663 * C1105 -
              (((C12174 + C12173) * C50824 +
                (C353 * C50605 + C352 * C1109) * C33763) *
                   C17276 +
               ((C6557 + C6556) * C50824 +
                (C351 * C50605 + C350 * C1109) * C33763) *
                   C17275 +
               ((C6549 + C6548) * C50824 +
                ((C117 * C296 + C50744 * C315) * C50605 +
                 (C117 * C286 + C50744 * C297) * C1109) *
                    C33763) *
                   C17274) *
                  C50663 * C1106 +
              ((((C117 * C290 + C50744 * C305) * C1109 +
                 (C117 * C306 + C50744 * C320) * C50605) *
                    C33763 +
                (C7104 + C7105) * C50824) *
                   C17274 +
               ((C356 * C1109 + C357 * C50605) * C33763 +
                (C7096 + C7097) * C50824) *
                   C17275 +
               ((C358 * C1109 + C359 * C50605) * C33763 +
                (C12671 + C12672) * C50824) *
                   C17276) *
                  C50663 * C1107 -
              ((((C117 * C3280 + C50744 * C3283) * C50605 +
                 (C117 * C3274 + C50744 * C3279) * C1109) *
                    C50824 +
                ((C117 * C1116 + C50744 * C1123) * C50605 +
                 (C117 * C1111 + C50744 * C1117) * C1109) *
                    C33763) *
                   C17276 +
               (((C117 * C3278 + C50744 * C3282) * C50605 +
                 (C117 * C3273 + C50744 * C3277) * C1109) *
                    C50824 +
                ((C117 * C1118 + C50744 * C1124) * C50605 +
                 (C117 * C1112 + C50744 * C1119) * C1109) *
                    C33763) *
                   C17275 +
               (((C117 * C3276 + C50744 * C3281) * C50605 +
                 (C117 * C3272 + C50744 * C3275) * C1109) *
                    C50824 +
                ((C117 * C1120 + C50744 * C1125) * C50605 +
                 (C117 * C1113 + C50744 * C1121) * C1109) *
                    C33763) *
                   C17274) *
                  C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C459 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C460 +
           ((C6562 * C33763 + (C6547 + C6546) * C50824) * C17274 +
            (C6563 * C33763 + (C6545 + C6544) * C50824) * C17275 +
            ((C12172 + C12171) * C33763 + (C13069 + C13070) * C50824) *
                C17276) *
               C461) *
              C1033 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C460 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C459 -
           ((((C117 * C6101 + C50744 * C6102) * C50605 +
              (C117 * C6099 + C50744 * C6100) * C1109) *
                 C50824 +
             (C12176 + C12175) * C33763) *
                C17276 +
            ((C6561 + C6560) * C50824 + C6566 * C33763) * C17275 +
            ((C6569 + C6568) * C50824 + C6567 * C33763) * C17274) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1035 +
            (C36713 + C36714 + C36715) * C1030 -
            (C2741 + C2740 + C2739) * C1036 - (C2744 + C2743 + C2742) * C1031 +
            (C3075 + C3074 + C3073) * C1037 + (C3078 + C3077 + C3076) * C1032) *
               C50824) *
              C50626 * C50663 * C1033 +
          (((C2545 + C2546 + C2547) * C1036 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C1030 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1035) +
            (C2548 + C2549 + C2550) * C1031 - (C2909 + C2910 + C2911) * C1037 -
            (C2912 + C2913 + C2914) * C1032) *
               C33763 +
           ((C3299 + C3298 + C3297) * C1036 -
            ((C37220 + C37221 + C37222) * C1030 +
             (C37223 + C37224 + C37225) * C1035) +
            (C3302 + C3301 + C3300) * C1031 -
            (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
             C2305 * C896 + C2300 * C903) *
                C1037 -
            (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
             C2305 * C904 + C2300 * C911) *
                C1032) *
               C50824) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1109 +
            (C36713 + C36714 + C36715) * C50605) *
               C50824) *
              C50626 * C50663 * C1105 -
          (((C37220 + C37221 + C37222) * C50605 +
            (C37223 + C37224 + C37225) * C1109) *
               C50824 +
           ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
             C2305 * C296 + C2300 * C315) *
                C50605 +
            (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
             C2305 * C286 + C2300 * C297) *
                C1109) *
               C33763) *
              C50626 * C50663 * C1106 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C1109 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50605) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C1109 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C50605) *
               C50824) *
              C50626 * C50663 * C1107 -
          (((C2307 * C21203 + C2302 * C21205 + C2306 * C4198 + C2301 * C4201 +
             C2305 * C3276 + C2300 * C3281) *
                C50605 +
            (C2307 * C21202 + C2302 * C21204 + C2306 * C4195 + C2301 * C4199 +
             C2305 * C3272 + C2300 * C3275) *
                C1109) *
               C50824 +
           ((C2307 * C3550 + C2302 * C3553 + C2306 * C2512 + C2301 * C2517 +
             C2305 * C1120 + C2300 * C1125) *
                C50605 +
            (C2307 * C3547 + C2302 * C3551 + C2306 * C2508 + C2301 * C2511 +
             C2305 * C1113 + C2300 * C1121) *
                C1109) *
               C33763) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C459 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C460 +
           (((C36721 + C36720 + C36719) * C1109 +
             (C36718 + C36717 + C36716) * C50605) *
                C33763 +
            ((C2305 * C1860 + C2300 * C1868 + C2306 * C4595 + C2301 * C4603 +
              C2307 * C4594 + C2302 * C4602) *
                 C1109 +
             (C2305 * C1867 + C2300 * C1872 + C2306 * C4601 + C2301 * C4607 +
              C2307 * C4600 + C2302 * C4606) *
                 C50605) *
                C50824) *
               C50626 * C461) *
              C1033 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C460 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C459 -
           (((C2307 * C21469 + C2302 * C21471 + C2306 * C4600 + C2301 * C4606 +
              C2305 * C4601 + C2300 * C4607) *
                 C50605 +
             (C2307 * C21468 + C2302 * C21470 + C2306 * C4594 + C2301 * C4602 +
              C2305 * C4595 + C2300 * C4603) *
                 C1109) *
                C50824 +
            ((C37633 + C37632 + C37631) * C50605 +
             (C37630 + C37629 + C37628) * C1109) *
                C33763) *
               C50626 * C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C39097 +
           (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C39098 +
           (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C39099 +
           (C5561 * C1035 + C5560 * C1030 - C5559 * C1036 - C5562 * C1031 +
            C5563 * C1037 + C5564 * C1032) *
               C39100) *
              C50626 * C50663 * C1033 +
          ((C350 * C1036 -
            ((C117 * C296 + C50744 * C315) * C1030 +
             (C117 * C286 + C50744 * C297) * C1035) +
            C351 * C1031 - C352 * C1037 - C353 * C1032) *
               C39097 +
           (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
            C929 * C1037 - C930 * C1032) *
               C39098 +
           (C5354 * C1036 - (C6130 * C1030 + C6131 * C1035) + C5355 * C1031 -
            C5734 * C1037 - C5735 * C1032) *
               C39099 +
           (C6132 * C1036 - (C6565 * C1030 + C6564 * C1035) + C6133 * C1031 -
            (C117 * C6099 + C50744 * C6100) * C1037 -
            (C117 * C6101 + C50744 * C6102) * C1032) *
               C39100) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1109 +
            (C117 * C130 + C50744 * C143) * C50605) *
               C39097 +
           (C6536 + C6537) * C39098 + C6562 * C39099 +
           (C6547 + C6546) * C39100) *
              C50626 * C50663 * C1105 -
          ((C6569 + C6568) * C39100 + C6567 * C39099 +
           (C6549 + C6548) * C39098 +
           ((C117 * C296 + C50744 * C315) * C50605 +
            (C117 * C286 + C50744 * C297) * C1109) *
               C39097) *
              C50626 * C50663 * C1106 +
          (((C117 * C290 + C50744 * C305) * C1109 +
            (C117 * C306 + C50744 * C320) * C50605) *
               C39097 +
           (C7104 + C7105) * C39098 + (C7106 + C7107) * C39099 +
           ((C117 * C4594 + C50744 * C4602) * C1109 +
            (C117 * C4600 + C50744 * C4606) * C50605) *
               C39100) *
              C50626 * C50663 * C1107 -
          (((C117 * C21469 + C50744 * C21471) * C50605 +
            (C117 * C21468 + C50744 * C21470) * C1109) *
               C39100 +
           ((C117 * C3704 + C50744 * C3707) * C50605 +
            (C117 * C3701 + C50744 * C3705) * C1109) *
               C39099 +
           ((C117 * C3276 + C50744 * C3281) * C50605 +
            (C117 * C3272 + C50744 * C3275) * C1109) *
               C39098 +
           ((C117 * C1120 + C50744 * C1125) * C50605 +
            (C117 * C1113 + C50744 * C1121) * C1109) *
               C39097) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C39097 +
            (C6536 + C6537) * C39098 + C6562 * C39099 + C39903 * C39100) *
               C50626 * C459 -
           ((C7541 + C7540) * C39100 + C7531 * C39099 +
            (C6539 + C6538) * C39098 + (C6537 + C6536) * C39097) *
               C50626 * C460 +
           (C6562 * C39097 + C39903 * C39098 + (C7540 + C7541) * C39099 +
            ((C117 * C7522 + C50744 * C7526) * C1109 +
             (C117 * C7525 + C50744 * C7528) * C50605) *
                C39100) *
               C50626 * C461) *
              C1033 +
          (((C6548 + C6549) * C39097 + (C6550 + C6551) * C39098 +
            (C6568 + C6569) * C39099 + (C39911 + C39912) * C39100) *
               C50626 * C460 -
           (C39908 * C39100 + C6567 * C39099 + (C6549 + C6548) * C39098 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C39097) *
               C50626 * C459 -
           (((C117 * C24084 + C50744 * C24086) * C50605 +
             (C117 * C24083 + C50744 * C24085) * C1109) *
                C39100 +
            (C39912 + C39911) * C39099 + C39908 * C39098 + C6567 * C39097) *
               C50626 * C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50874 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50610) *
                C33763 +
            ((C36710 + C36711 + C36712) * C49720 +
             (C36713 + C36714 + C36715) * C50874 -
             (C2741 + C2740 + C2739) * C49713 -
             (C2744 + C2743 + C2742) * C50610) *
                C50824) *
               C50626 * C50890 +
           (((C2739 + C2740 + C2741) * C49713 -
             ((C36715 + C36714 + C36713) * C50874 +
              (C36712 + C36711 + C36710) * C49720) +
             (C2742 + C2743 + C2744) * C50610) *
                C33763 +
            ((C2747 + C2746 + C2745) * C49713 -
             ((C36716 + C36717 + C36718) * C50874 +
              (C36719 + C36720 + C36721) * C49720) +
             (C2750 + C2749 + C2748) * C50610) *
                C50824) *
               C50626 * C50727) *
              C1033 +
          ((((C2545 + C2546 + C2547) * C49713 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C50874 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C49720) +
             (C2548 + C2549 + C2550) * C50610) *
                C33763 +
            ((C3299 + C3298 + C3297) * C49713 -
             ((C37220 + C37221 + C37222) * C50874 +
              (C37223 + C37224 + C37225) * C49720) +
             (C3302 + C3301 + C3300) * C50610) *
                C50824) *
               C50626 * C50890 +
           (((C37225 + C37224 + C37223) * C49720 +
             (C37222 + C37221 + C37220) * C50874 -
             (C3297 + C3298 + C3299) * C49713 -
             (C3300 + C3301 + C3302) * C50610) *
                C33763 +
            ((C37628 + C37629 + C37630) * C49720 +
             (C37631 + C37632 + C37633) * C50874 -
             (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 + C2301 * C2707 +
              C2305 * C1226 + C2300 * C1233) *
                 C49713 -
             (C2307 * C3702 + C2302 * C3706 + C2306 * C2708 + C2301 * C2712 +
              C2305 * C1232 + C2300 * C1238) *
                 C50610) *
                C50824) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C33763 +
             (C6910 + C6911 - C6912 - C6913) * C50824) *
                C17274 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C33763 +
             (C6918 + C6919 - C6920 - C6921) * C50824) *
                C17275 +
            ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                 C33763 +
             (C12517 + C12518 - C12519 - C12520) * C50824) *
                C17276) *
               C50890 +
           (((C6912 - (C6911 + C6910) + C6913) * C33763 +
             (C6916 - (C6915 + C6914) + C6917) * C50824) *
                C17274 +
            ((C6920 - (C6919 + C6918) + C6921) * C33763 +
             (C6924 - (C6923 + C6922) + C6925) * C50824) *
                C17275 +
            ((C12519 - (C12518 + C12517) + C12520) * C33763 +
             (C13411 - (C13412 + C13413) + C13414) * C50824) *
                C17276) *
               C50727) *
              C1033 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C33763 +
             (C6926 - (C6927 + C6928) + C6929) * C50824) *
                C17274 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C33763 +
             (C6934 - (C6935 + C6936) + C6937) * C50824) *
                C17275 +
            ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                 C33763 +
             (C12521 - (C12522 + C12523) + C12524) * C50824) *
                C17276) *
               C50890 +
           (((C6928 + C6927 - C6926 - C6929) * C33763 +
             (C6932 + C6931 - C6930 - C6933) * C50824) *
                C17274 +
            ((C6936 + C6935 - C6934 - C6937) * C33763 +
             (C6940 + C6939 - C6938 - C6941) * C50824) *
                C17275 +
            ((C12523 + C12522 - C12521 - C12524) * C33763 +
             (C5734 * C49720 + C5735 * C50874 -
              (C117 * C1224 + C50744 * C1229) * C49713 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C39097 +
            (C6910 + C6911 - C6912 - C6913) * C39098 + C7894 * C39099 +
            (C7886 + C7885 - C7884 - C7887) * C39100) *
               C50626 * C50890 +
           ((C6912 - (C6911 + C6910) + C6913) * C39097 +
            (C6916 - (C6915 + C6914) + C6917) * C39098 +
            (C7884 - (C7885 + C7886) + C7887) * C39099 +
            (C5565 * C49713 - (C7539 * C50874 + C7538 * C49720) +
             C5566 * C50610) *
                C39100) *
               C50626 * C50727) *
              C1033 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C39097 +
            (C6926 - (C6927 + C6928) + C6929) * C39098 +
            (C6930 - (C6931 + C6932) + C6933) * C39099 +
            (C40141 - (C40142 + C40143) + C40144) * C39100) *
               C50626 * C50890 +
           ((C6928 + C6927 - C6926 - C6929) * C39097 +
            (C6932 + C6931 - C6930 - C6933) * C39098 +
            (C40143 + C40142 - C40141 - C40144) * C39099 +
            (C39909 * C49720 + C39910 * C50874 -
             (C117 * C6527 + C50744 * C6530) * C49713 -
             (C117 * C6529 + C50744 * C6533) * C50610) *
                C39100) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C33763 +
            (C6536 + C6537) * C50824) *
               C17274 +
           ((C171 * C1109 + C172 * C50605) * C33763 +
            (C6540 + C6541) * C50824) *
               C17275 +
           ((C173 * C1109 + C174 * C50605) * C33763 +
            (C12169 + C12170) * C50824) *
               C17276) *
              C50663 * C1105 -
          (((C12174 + C12173) * C50824 +
            (C353 * C50605 + C352 * C1109) * C33763) *
               C17276 +
           ((C6557 + C6556) * C50824 +
            (C351 * C50605 + C350 * C1109) * C33763) *
               C17275 +
           ((C6549 + C6548) * C50824 + ((C117 * C296 + C50744 * C315) * C50605 +
                                        (C117 * C286 + C50744 * C297) * C1109) *
                                           C33763) *
               C17274) *
              C50663 * C1106 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C33763 +
            (C7104 + C7105) * C50824) *
               C17274 +
           ((C356 * C1109 + C357 * C50605) * C33763 +
            (C7096 + C7097) * C50824) *
               C17275 +
           ((C358 * C1109 + C359 * C50605) * C33763 +
            (C12671 + C12672) * C50824) *
               C17276) *
              C50663 * C1107 -
          ((((C117 * C3280 + C50744 * C3283) * C50605 +
             (C117 * C3274 + C50744 * C3279) * C1109) *
                C50824 +
            ((C117 * C1116 + C50744 * C1123) * C50605 +
             (C117 * C1111 + C50744 * C1117) * C1109) *
                C33763) *
               C17276 +
           (((C117 * C3278 + C50744 * C3282) * C50605 +
             (C117 * C3273 + C50744 * C3277) * C1109) *
                C50824 +
            ((C117 * C1118 + C50744 * C1124) * C50605 +
             (C117 * C1112 + C50744 * C1119) * C1109) *
                C33763) *
               C17275 +
           (((C117 * C3276 + C50744 * C3281) * C50605 +
             (C117 * C3272 + C50744 * C3275) * C1109) *
                C50824 +
            ((C117 * C1120 + C50744 * C1125) * C50605 +
             (C117 * C1113 + C50744 * C1121) * C1109) *
                C33763) *
               C17274) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C33763 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C17274 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C33763 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C17275 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C33763 +
            (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) * C50824) *
               C17276) *
              C50663 * C1033 +
          (((C350 * C1036 -
             ((C117 * C296 + C50744 * C315) * C1030 +
              (C117 * C286 + C50744 * C297) * C1035) +
             C351 * C1031 - C352 * C1037 - C353 * C1032) *
                C33763 +
            (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C50824) *
               C17274 +
           ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
             C354 * C1037 - C355 * C1032) *
                C33763 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50824) *
               C17275 +
           ((C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
             C653 * C1037 - C654 * C1032) *
                C33763 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50744 * C907) * C1037 -
             (C117 * C908 + C50744 * C913) * C1032) *
                C50824) *
               C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1035 +
            (C36713 + C36714 + C36715) * C1030 -
            (C2741 + C2740 + C2739) * C1036 - (C2744 + C2743 + C2742) * C1031 +
            (C3075 + C3074 + C3073) * C1037 + (C3078 + C3077 + C3076) * C1032) *
               C50824) *
              C50626 * C50663 * C1033 +
          (((C2545 + C2546 + C2547) * C1036 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C1030 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1035) +
            (C2548 + C2549 + C2550) * C1031 - (C2909 + C2910 + C2911) * C1037 -
            (C2912 + C2913 + C2914) * C1032) *
               C33763 +
           ((C3299 + C3298 + C3297) * C1036 -
            ((C37220 + C37221 + C37222) * C1030 +
             (C37223 + C37224 + C37225) * C1035) +
            (C3302 + C3301 + C3300) * C1031 -
            (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
             C2305 * C896 + C2300 * C903) *
                C1037 -
            (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
             C2305 * C904 + C2300 * C911) *
                C1032) *
               C50824) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1109 +
            (C36713 + C36714 + C36715) * C50605) *
               C50824) *
              C50626 * C50663 * C1105 -
          (((C37220 + C37221 + C37222) * C50605 +
            (C37223 + C37224 + C37225) * C1109) *
               C50824 +
           ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
             C2305 * C296 + C2300 * C315) *
                C50605 +
            (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
             C2305 * C286 + C2300 * C297) *
                C1109) *
               C33763) *
              C50626 * C50663 * C1106 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C1109 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50605) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C1109 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C50605) *
               C50824) *
              C50626 * C50663 * C1107 -
          (((C2307 * C21203 + C2302 * C21205 + C2306 * C4198 + C2301 * C4201 +
             C2305 * C3276 + C2300 * C3281) *
                C50605 +
            (C2307 * C21202 + C2302 * C21204 + C2306 * C4195 + C2301 * C4199 +
             C2305 * C3272 + C2300 * C3275) *
                C1109) *
               C50824 +
           ((C2307 * C3550 + C2302 * C3553 + C2306 * C2512 + C2301 * C2517 +
             C2305 * C1120 + C2300 * C1125) *
                C50605 +
            (C2307 * C3547 + C2302 * C3551 + C2306 * C2508 + C2301 * C2511 +
             C2305 * C1113 + C2300 * C1121) *
                C1109) *
               C33763) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C39097 +
           (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C39098 +
           (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C39099 +
           (C5561 * C1035 + C5560 * C1030 - C5559 * C1036 - C5562 * C1031 +
            C5563 * C1037 + C5564 * C1032) *
               C39100) *
              C50626 * C50663 * C1033 +
          ((C350 * C1036 -
            ((C117 * C296 + C50744 * C315) * C1030 +
             (C117 * C286 + C50744 * C297) * C1035) +
            C351 * C1031 - C352 * C1037 - C353 * C1032) *
               C39097 +
           (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
            C929 * C1037 - C930 * C1032) *
               C39098 +
           (C5354 * C1036 - (C6130 * C1030 + C6131 * C1035) + C5355 * C1031 -
            C5734 * C1037 - C5735 * C1032) *
               C39099 +
           (C6132 * C1036 - (C6565 * C1030 + C6564 * C1035) + C6133 * C1031 -
            (C117 * C6099 + C50744 * C6100) * C1037 -
            (C117 * C6101 + C50744 * C6102) * C1032) *
               C39100) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1109 +
            (C117 * C130 + C50744 * C143) * C50605) *
               C39097 +
           (C6536 + C6537) * C39098 + C6562 * C39099 +
           (C6547 + C6546) * C39100) *
              C50626 * C50663 * C1105 -
          ((C6569 + C6568) * C39100 + C6567 * C39099 +
           (C6549 + C6548) * C39098 +
           ((C117 * C296 + C50744 * C315) * C50605 +
            (C117 * C286 + C50744 * C297) * C1109) *
               C39097) *
              C50626 * C50663 * C1106 +
          (((C117 * C290 + C50744 * C305) * C1109 +
            (C117 * C306 + C50744 * C320) * C50605) *
               C39097 +
           (C7104 + C7105) * C39098 + (C7106 + C7107) * C39099 +
           ((C117 * C4594 + C50744 * C4602) * C1109 +
            (C117 * C4600 + C50744 * C4606) * C50605) *
               C39100) *
              C50626 * C50663 * C1107 -
          (((C117 * C21469 + C50744 * C21471) * C50605 +
            (C117 * C21468 + C50744 * C21470) * C1109) *
               C39100 +
           ((C117 * C3704 + C50744 * C3707) * C50605 +
            (C117 * C3701 + C50744 * C3705) * C1109) *
               C39099 +
           ((C117 * C3276 + C50744 * C3281) * C50605 +
            (C117 * C3272 + C50744 * C3275) * C1109) *
               C39098 +
           ((C117 * C1120 + C50744 * C1125) * C50605 +
            (C117 * C1113 + C50744 * C1121) * C1109) *
               C39097) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50874 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50610) *
                C33763 +
            ((C36710 + C36711 + C36712) * C49720 +
             (C36713 + C36714 + C36715) * C50874 -
             (C2741 + C2740 + C2739) * C49713 -
             (C2744 + C2743 + C2742) * C50610) *
                C50824) *
               C50626 * C1687 +
           (((C2739 + C2740 + C2741) * C49713 -
             ((C36715 + C36714 + C36713) * C50874 +
              (C36712 + C36711 + C36710) * C49720) +
             (C2742 + C2743 + C2744) * C50610) *
                C33763 +
            ((C2747 + C2746 + C2745) * C49713 -
             ((C36716 + C36717 + C36718) * C50874 +
              (C36719 + C36720 + C36721) * C49720) +
             (C2750 + C2749 + C2748) * C50610) *
                C50824) *
               C50626 * C50727) *
              C50889 +
          ((((C2545 + C2546 + C2547) * C49713 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C50874 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C49720) +
             (C2548 + C2549 + C2550) * C50610) *
                C33763 +
            ((C3299 + C3298 + C3297) * C49713 -
             ((C37220 + C37221 + C37222) * C50874 +
              (C37223 + C37224 + C37225) * C49720) +
             (C3302 + C3301 + C3300) * C50610) *
                C50824) *
               C50626 * C1687 +
           (((C37225 + C37224 + C37223) * C49720 +
             (C37222 + C37221 + C37220) * C50874 -
             (C3297 + C3298 + C3299) * C49713 -
             (C3300 + C3301 + C3302) * C50610) *
                C33763 +
            ((C37628 + C37629 + C37630) * C49720 +
             (C37631 + C37632 + C37633) * C50874 -
             (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 + C2301 * C2707 +
              C2305 * C1226 + C2300 * C1233) *
                 C49713 -
             (C2307 * C3702 + C2302 * C3706 + C2306 * C2708 + C2301 * C2712 +
              C2305 * C1232 + C2300 * C1238) *
                 C50610) *
                C50824) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C33763 +
             (C6910 + C6911 - C6912 - C6913) * C50824) *
                C17274 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C33763 +
             (C6918 + C6919 - C6920 - C6921) * C50824) *
                C17275 +
            ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                 C33763 +
             (C12517 + C12518 - C12519 - C12520) * C50824) *
                C17276) *
               C1687 +
           (((C6912 - (C6911 + C6910) + C6913) * C33763 +
             (C6916 - (C6915 + C6914) + C6917) * C50824) *
                C17274 +
            ((C6920 - (C6919 + C6918) + C6921) * C33763 +
             (C6924 - (C6923 + C6922) + C6925) * C50824) *
                C17275 +
            ((C12519 - (C12518 + C12517) + C12520) * C33763 +
             (C13411 - (C13412 + C13413) + C13414) * C50824) *
                C17276) *
               C50727) *
              C50889 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C33763 +
             (C6926 - (C6927 + C6928) + C6929) * C50824) *
                C17274 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C33763 +
             (C6934 - (C6935 + C6936) + C6937) * C50824) *
                C17275 +
            ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                 C33763 +
             (C12521 - (C12522 + C12523) + C12524) * C50824) *
                C17276) *
               C1687 +
           (((C6928 + C6927 - C6926 - C6929) * C33763 +
             (C6932 + C6931 - C6930 - C6933) * C50824) *
                C17274 +
            ((C6936 + C6935 - C6934 - C6937) * C33763 +
             (C6940 + C6939 - C6938 - C6941) * C50824) *
                C17275 +
            ((C12523 + C12522 - C12521 - C12524) * C33763 +
             (C5734 * C49720 + C5735 * C50874 -
              (C117 * C1224 + C50744 * C1229) * C49713 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C39097 +
            (C6910 + C6911 - C6912 - C6913) * C39098 + C7894 * C39099 +
            (C7886 + C7885 - C7884 - C7887) * C39100) *
               C50626 * C1687 +
           ((C6912 - (C6911 + C6910) + C6913) * C39097 +
            (C6916 - (C6915 + C6914) + C6917) * C39098 +
            (C7884 - (C7885 + C7886) + C7887) * C39099 +
            (C5565 * C49713 - (C7539 * C50874 + C7538 * C49720) +
             C5566 * C50610) *
                C39100) *
               C50626 * C50727) *
              C50889 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C39097 +
            (C6926 - (C6927 + C6928) + C6929) * C39098 +
            (C6930 - (C6931 + C6932) + C6933) * C39099 +
            (C40141 - (C40142 + C40143) + C40144) * C39100) *
               C50626 * C1687 +
           ((C6928 + C6927 - C6926 - C6929) * C39097 +
            (C6932 + C6931 - C6930 - C6933) * C39098 +
            (C40143 + C40142 - C40141 - C40144) * C39099 +
            (C39909 * C49720 + C39910 * C50874 -
             (C117 * C6527 + C50744 * C6530) * C49713 -
             (C117 * C6529 + C50744 * C6533) * C50610) *
                C39100) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C50936 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C50937 +
           (((C36721 + C36720 + C36719) * C1109 +
             (C36718 + C36717 + C36716) * C50605) *
                C33763 +
            ((C38540 + C38541 + C38542) * C1109 +
             (C38543 + C38544 + C38545) * C50605) *
                C50824) *
               C50626 * C2103) *
              C50889 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C50937 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C50936 -
           (((C2307 * C21469 + C2302 * C21471 + C2306 * C4600 + C2301 * C4606 +
              C2305 * C4601 + C2300 * C4607) *
                 C50605 +
             (C2307 * C21468 + C2302 * C21470 + C2306 * C4594 + C2301 * C4602 +
              C2305 * C4595 + C2300 * C4603) *
                 C1109) *
                C50824 +
            ((C37633 + C37632 + C37631) * C50605 +
             (C37630 + C37629 + C37628) * C1109) *
                C33763) *
               C50626 * C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C50936 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C50937 +
           ((C6562 * C33763 + (C6547 + C6546) * C50824) * C17274 +
            (C6563 * C33763 + (C6545 + C6544) * C50824) * C17275 +
            ((C12172 + C12171) * C33763 + (C13069 + C13070) * C50824) *
                C17276) *
               C2103) *
              C50889 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C50937 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C50936 -
           ((((C117 * C6101 + C50744 * C6102) * C50605 +
              (C117 * C6099 + C50744 * C6100) * C1109) *
                 C50824 +
             (C12176 + C12175) * C33763) *
                C17276 +
            ((C6561 + C6560) * C50824 + C6566 * C33763) * C17275 +
            ((C6569 + C6568) * C50824 + C6567 * C33763) * C17274) *
               C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C39097 +
            (C6536 + C6537) * C39098 + C6562 * C39099 + C39903 * C39100) *
               C50626 * C50936 -
           (C40523 * C39100 + C7531 * C39099 + (C6539 + C6538) * C39098 +
            (C6537 + C6536) * C39097) *
               C50626 * C50937 +
           (C6562 * C39097 + C39903 * C39098 + (C7540 + C7541) * C39099 +
            (C40530 + C40531) * C39100) *
               C50626 * C2103) *
              C50889 +
          (((C6548 + C6549) * C39097 + (C6550 + C6551) * C39098 +
            (C6568 + C6569) * C39099 + (C39911 + C39912) * C39100) *
               C50626 * C50937 -
           (C39908 * C39100 + C6567 * C39099 + (C6549 + C6548) * C39098 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C39097) *
               C50626 * C50936 -
           (((C117 * C24084 + C50744 * C24086) * C50605 +
             (C117 * C24083 + C50744 * C24085) * C1109) *
                C39100 +
            (C39912 + C39911) * C39099 + C39908 * C39098 + C6567 * C39097) *
               C50626 * C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50744 * C129) * C1035 +
                 (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
                 C172 * C1031 + C173 * C1037 + C174 * C1032) *
                    C33763 +
                (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
                   C17274 +
               ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                 C175 * C1037 + C176 * C1032) *
                    C33763 +
                (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
                   C17275 +
               ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                 C177 * C1037 + C178 * C1032) *
                    C33763 +
                (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) *
                    C50824) *
                   C17276) *
                  C1687 +
              (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C33763 +
                (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C50824) *
                   C17274 +
               ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C33763 +
                (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C50824) *
                   C17275 +
               ((C12821 - (C12820 + C12819) + C12822 - C12823 - C12824) *
                    C33763 +
                (C537 * C1036 - (C536 * C1030 + C535 * C1035) + C538 * C1031 -
                 (C117 * C471 + C50744 * C490) * C1037 -
                 (C117 * C491 + C50744 * C501) * C1032) *
                    C50824) *
                   C17276) *
                  C50727) *
             C50651 +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C117 * C122 + C50744 * C129) * C1109 +
                  (C117 * C130 + C50744 * C143) * C50605) *
                     C33763 +
                 (C6536 + C6537) * C50824) *
                    C17274 +
                ((C171 * C1109 + C172 * C50605) * C33763 +
                 (C6540 + C6541) * C50824) *
                    C17275 +
                ((C173 * C1109 + C174 * C50605) * C33763 +
                 (C12169 + C12170) * C50824) *
                    C17276) *
                   C1687 -
               (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) *
                    C17276 +
                ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
                ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) *
                    C17274) *
                   C50727) *
                  C280 +
              ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
                ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
                ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                    C17276) *
                   C50727 -
               (((C12174 + C12173) * C50824 +
                 (C353 * C50605 + C352 * C1109) * C33763) *
                    C17276 +
                ((C6557 + C6556) * C50824 +
                 (C351 * C50605 + C350 * C1109) * C33763) *
                    C17275 +
                ((C6549 + C6548) * C50824 +
                 ((C117 * C296 + C50744 * C315) * C50605 +
                  (C117 * C286 + C50744 * C297) * C1109) *
                     C33763) *
                    C17274) *
                   C1687) *
                  C281 +
              (((((C117 * C290 + C50744 * C305) * C1109 +
                  (C117 * C306 + C50744 * C320) * C50605) *
                     C33763 +
                 (C7104 + C7105) * C50824) *
                    C17274 +
                ((C356 * C1109 + C357 * C50605) * C33763 +
                 (C7096 + C7097) * C50824) *
                    C17275 +
                ((C358 * C1109 + C359 * C50605) * C33763 +
                 (C12671 + C12672) * C50824) *
                    C17276) *
                   C1687 -
               ((((C117 * C2710 + C50744 * C2713) * C50605 +
                  (C117 * C2704 + C50744 * C2709) * C1109) *
                     C50824 +
                 (C12672 + C12671) * C33763) *
                    C17276 +
                ((C7099 + C7098) * C50824 + (C7097 + C7096) * C33763) * C17275 +
                ((C7107 + C7106) * C50824 + (C7105 + C7104) * C33763) *
                    C17274) *
                   C50727) *
                  C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C33763 +
            (C6536 + C6537) * C50824) *
               C17274 +
           ((C171 * C1109 + C172 * C50605) * C33763 +
            (C6540 + C6541) * C50824) *
               C17275 +
           ((C173 * C1109 + C174 * C50605) * C33763 +
            (C12169 + C12170) * C50824) *
               C17276) *
              C1853 -
          (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
           ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
           ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
              C1854 +
          ((C6562 * C33763 + (C6547 + C6546) * C50824) * C17274 +
           (C6563 * C33763 + (C6545 + C6544) * C50824) * C17275 +
           ((C12172 + C12171) * C33763 + (C13069 + C13070) * C50824) * C17276) *
              C1855 -
          ((((C117 * C5513 + C50744 * C5516) * C50605 +
             (C117 * C5507 + C50744 * C5512) * C1109) *
                C50824 +
            (C13070 + C13069) * C33763) *
               C17276 +
           ((C7537 + C7536) * C50824 + C7530 * C33763) * C17275 +
           ((C7541 + C7540) * C50824 + C7531 * C33763) * C17274) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1035 +
            (C36713 + C36714 + C36715) * C1030 -
            (C2741 + C2740 + C2739) * C1036 - (C2744 + C2743 + C2742) * C1031 +
            (C3075 + C3074 + C3073) * C1037 + (C3078 + C3077 + C3076) * C1032) *
               C50824) *
              C50626 * C1687 +
          (((C2739 + C2740 + C2741) * C1036 -
            ((C36715 + C36714 + C36713) * C1030 +
             (C36712 + C36711 + C36710) * C1035) +
            (C2742 + C2743 + C2744) * C1031 - (C3073 + C3074 + C3075) * C1037 -
            (C3076 + C3077 + C3078) * C1032) *
               C33763 +
           ((C2747 + C2746 + C2745) * C1036 -
            ((C36716 + C36717 + C36718) * C1030 +
             (C36719 + C36720 + C36721) * C1035) +
            (C2750 + C2749 + C2748) * C1031 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C1037 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C1032) *
               C50824) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C1687 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C50727) *
              C280 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C50727 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C1687) *
              C281 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C33763 +
            ((C38132 + C38133 + C38134) * C1109 +
             (C38135 + C38136 + C38137) * C50605) *
                C50824) *
               C50626 * C1687 -
           (((C2307 * C20873 + C2302 * C20875 + C2306 * C3704 + C2301 * C3707 +
              C2305 * C2706 + C2300 * C2711) *
                 C50605 +
             (C2307 * C20872 + C2302 * C20874 + C2306 * C3701 + C2301 * C3705 +
              C2305 * C2702 + C2300 * C2705) *
                 C1109) *
                C50824 +
            ((C38137 + C38136 + C38135) * C50605 +
             (C38134 + C38133 + C38132) * C1109) *
                C33763) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1109 +
            (C36713 + C36714 + C36715) * C50605) *
               C50824) *
              C50626 * C1853 -
          (((C36716 + C36717 + C36718) * C50605 +
            (C36719 + C36720 + C36721) * C1109) *
               C50824 +
           ((C36715 + C36714 + C36713) * C50605 +
            (C36712 + C36711 + C36710) * C1109) *
               C33763) *
              C50626 * C1854 +
          (((C36721 + C36720 + C36719) * C1109 +
            (C36718 + C36717 + C36716) * C50605) *
               C33763 +
           ((C38540 + C38541 + C38542) * C1109 +
            (C38543 + C38544 + C38545) * C50605) *
               C50824) *
              C50626 * C1855 -
          (((C2307 * C23160 + C2302 * C23162 + C2306 * C6531 + C2301 * C6534 +
             C2305 * C5509 + C2300 * C5514) *
                C50605 +
            (C2307 * C23159 + C2302 * C23161 + C2306 * C6528 + C2301 * C6532 +
             C2305 * C5505 + C2300 * C5508) *
                C1109) *
               C50824 +
           ((C38545 + C38544 + C38543) * C50605 +
            (C38542 + C38541 + C38540) * C1109) *
               C33763) *
              C50626 * C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C39097 +
           (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C39098 +
           (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C39099 +
           (C40349 + C40350 - C40351 - C40352 + C40353 + C40354) * C39100) *
              C50626 * C1687 +
          ((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C39097 +
           (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C39098 +
           (C40351 - (C40350 + C40349) + C40352 - C40353 - C40354) * C39099 +
           (C5565 * C1036 - (C7539 * C1030 + C7538 * C1035) + C5566 * C1031 -
            (C117 * C5507 + C50744 * C5512) * C1037 -
            (C117 * C5513 + C50744 * C5516) * C1032) *
               C39100) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C39097 +
            (C6536 + C6537) * C39098 + C6562 * C39099 + C39903 * C39100) *
               C50626 * C1687 -
           ((C7541 + C7540) * C39100 + C7531 * C39099 +
            (C6539 + C6538) * C39098 + (C6537 + C6536) * C39097) *
               C50626 * C50727) *
              C280 +
          (((C6548 + C6549) * C39097 + (C6550 + C6551) * C39098 +
            (C6568 + C6569) * C39099 + (C39911 + C39912) * C39100) *
               C50626 * C50727 -
           (C39908 * C39100 + C6567 * C39099 + (C6549 + C6548) * C39098 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C39097) *
               C50626 * C1687) *
              C281 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C39097 +
            (C7104 + C7105) * C39098 + (C7106 + C7107) * C39099 +
            (C40249 + C40250) * C39100) *
               C50626 * C1687 -
           (((C117 * C23160 + C50744 * C23162) * C50605 +
             (C117 * C23159 + C50744 * C23161) * C1109) *
                C39100 +
            (C40250 + C40249) * C39099 + (C7107 + C7106) * C39098 +
            (C7105 + C7104) * C39097) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1109 +
            (C117 * C130 + C50744 * C143) * C50605) *
               C39097 +
           (C6536 + C6537) * C39098 + C6562 * C39099 + C39903 * C39100) *
              C50626 * C1853 -
          (C40523 * C39100 + C7531 * C39099 + (C6539 + C6538) * C39098 +
           (C6537 + C6536) * C39097) *
              C50626 * C1854 +
          (C6562 * C39097 + C39903 * C39098 + (C7540 + C7541) * C39099 +
           (C40530 + C40531) * C39100) *
              C50626 * C1855 -
          (((C117 * C40519 + C50744 * C40521) * C50605 +
            (C117 * C40518 + C50744 * C40520) * C1109) *
               C39100 +
           (C40531 + C40530) * C39099 + C40523 * C39098 + C7531 * C39097) *
              C50626 * C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50874 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C36710 + C36711 + C36712) * C49720 +
            (C36713 + C36714 + C36715) * C50874 -
            (C2741 + C2740 + C2739) * C49713 -
            (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C50936 +
          (((C2739 + C2740 + C2741) * C49713 -
            ((C36715 + C36714 + C36713) * C50874 +
             (C36712 + C36711 + C36710) * C49720) +
            (C2742 + C2743 + C2744) * C50610) *
               C33763 +
           ((C2747 + C2746 + C2745) * C49713 -
            ((C36716 + C36717 + C36718) * C50874 +
             (C36719 + C36720 + C36721) * C49720) +
            (C2750 + C2749 + C2748) * C50610) *
               C50824) *
              C50626 * C50937 +
          (((C36721 + C36720 + C36719) * C49720 +
            (C36718 + C36717 + C36716) * C50874 -
            (C2745 + C2746 + C2747) * C49713 -
            (C2748 + C2749 + C2750) * C50610) *
               C33763 +
           ((C38540 + C38541 + C38542) * C49720 +
            (C38543 + C38544 + C38545) * C50874 -
            (C2307 * C4592 + C2302 * C4598 + C2306 * C4593 + C2301 * C4599 +
             C2305 * C1859 + C2300 * C1866) *
                C49713 -
            (C2307 * C4596 + C2302 * C4604 + C2306 * C4597 + C2301 * C4605 +
             C2305 * C1865 + C2300 * C1871) *
                C50610) *
               C50824) *
              C50626 * C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C33763 +
            (C6910 + C6911 - C6912 - C6913) * C50824) *
               C17274 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C33763 +
            (C6918 + C6919 - C6920 - C6921) * C50824) *
               C17275 +
           ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C33763 +
            (C12517 + C12518 - C12519 - C12520) * C50824) *
               C17276) *
              C50936 +
          (((C6912 - (C6911 + C6910) + C6913) * C33763 +
            (C6916 - (C6915 + C6914) + C6917) * C50824) *
               C17274 +
           ((C6920 - (C6919 + C6918) + C6921) * C33763 +
            (C6924 - (C6923 + C6922) + C6925) * C50824) *
               C17275 +
           ((C12519 - (C12518 + C12517) + C12520) * C33763 +
            (C13411 - (C13412 + C13413) + C13414) * C50824) *
               C17276) *
              C50937 +
          ((C7894 * C33763 + (C7886 + C7885 - C7884 - C7887) * C50824) *
               C17274 +
           (C7895 * C33763 + (C7890 + C7889 - C7888 - C7891) * C50824) *
               C17275 +
           ((C13413 + C13412 - C13411 - C13414) * C33763 +
            (C5563 * C49720 + C5564 * C50874 -
             (C117 * C1857 + C50744 * C1862) * C49713 -
             (C117 * C1861 + C50744 * C1869) * C50610) *
                C50824) *
               C17276) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C49720 +
            (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
            C172 * C50610) *
               C39097 +
           (C6910 + C6911 - C6912 - C6913) * C39098 + C7894 * C39099 +
           C40766 * C39100) *
              C50626 * C50936 +
          ((C6912 - (C6911 + C6910) + C6913) * C39097 +
           (C6916 - (C6915 + C6914) + C6917) * C39098 +
           (C7884 - (C7885 + C7886) + C7887) * C39099 +
           (C40761 - (C40762 + C40763) + C40764) * C39100) *
              C50626 * C50937 +
          (C7894 * C39097 + C40766 * C39098 +
           (C40763 + C40762 - C40761 - C40764) * C39099 +
           (C40528 * C49720 + C40529 * C50874 -
            (C117 * C7521 + C50744 * C7524) * C49713 -
            (C117 * C7523 + C50744 * C7527) * C50610) *
               C39100) *
              C50626 * C2103) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C1687 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C50727 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C33763 +
             (C7104 + C7105) * C50824) *
                C17274 +
            ((C356 * C1109 + C357 * C50605) * C33763 +
             (C7096 + C7097) * C50824) *
                C17275 +
            ((C358 * C1109 + C359 * C50605) * C33763 +
             (C12671 + C12672) * C50824) *
                C17276) *
               C1687 -
           ((((C117 * C2710 + C50744 * C2713) * C50605 +
              (C117 * C2704 + C50744 * C2709) * C1109) *
                 C50824 +
             (C12672 + C12671) * C33763) *
                C17276 +
            ((C7099 + C7098) * C50824 + (C7097 + C7096) * C33763) * C17275 +
            ((C7107 + C7106) * C50824 + (C7105 + C7104) * C33763) * C17274) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C33763 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C17274 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C33763 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C17275 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C33763 +
            (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) * C50824) *
               C17276) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C33763 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C50824) *
               C17274 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C33763 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C50824) *
               C17275 +
           ((C12821 - (C12820 + C12819) + C12822 - C12823 - C12824) * C33763 +
            (C537 * C1036 - (C536 * C1030 + C535 * C1035) + C538 * C1031 -
             (C117 * C471 + C50744 * C490) * C1037 -
             (C117 * C491 + C50744 * C501) * C1032) *
                C50824) *
               C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1035 +
            (C36713 + C36714 + C36715) * C1030 -
            (C2741 + C2740 + C2739) * C1036 - (C2744 + C2743 + C2742) * C1031 +
            (C3075 + C3074 + C3073) * C1037 + (C3078 + C3077 + C3076) * C1032) *
               C50824) *
              C50626 * C1687 +
          (((C2739 + C2740 + C2741) * C1036 -
            ((C36715 + C36714 + C36713) * C1030 +
             (C36712 + C36711 + C36710) * C1035) +
            (C2742 + C2743 + C2744) * C1031 - (C3073 + C3074 + C3075) * C1037 -
            (C3076 + C3077 + C3078) * C1032) *
               C33763 +
           ((C2747 + C2746 + C2745) * C1036 -
            ((C36716 + C36717 + C36718) * C1030 +
             (C36719 + C36720 + C36721) * C1035) +
            (C2750 + C2749 + C2748) * C1031 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C1037 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C1032) *
               C50824) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C1687 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C50727) *
              C280 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C50727 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C1687) *
              C281 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C33763 +
            ((C38132 + C38133 + C38134) * C1109 +
             (C38135 + C38136 + C38137) * C50605) *
                C50824) *
               C50626 * C1687 -
           (((C2307 * C20873 + C2302 * C20875 + C2306 * C3704 + C2301 * C3707 +
              C2305 * C2706 + C2300 * C2711) *
                 C50605 +
             (C2307 * C20872 + C2302 * C20874 + C2306 * C3701 + C2301 * C3705 +
              C2305 * C2702 + C2300 * C2705) *
                 C1109) *
                C50824 +
            ((C38137 + C38136 + C38135) * C50605 +
             (C38134 + C38133 + C38132) * C1109) *
                C33763) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C1035 +
            (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C39097 +
           (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C39098 +
           (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C39099 +
           (C40349 + C40350 - C40351 - C40352 + C40353 + C40354) * C39100) *
              C50626 * C1687 +
          ((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C39097 +
           (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C39098 +
           (C40351 - (C40350 + C40349) + C40352 - C40353 - C40354) * C39099 +
           (C5565 * C1036 - (C7539 * C1030 + C7538 * C1035) + C5566 * C1031 -
            (C117 * C5507 + C50744 * C5512) * C1037 -
            (C117 * C5513 + C50744 * C5516) * C1032) *
               C39100) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C39097 +
            (C6536 + C6537) * C39098 + C6562 * C39099 + C39903 * C39100) *
               C50626 * C1687 -
           ((C7541 + C7540) * C39100 + C7531 * C39099 +
            (C6539 + C6538) * C39098 + (C6537 + C6536) * C39097) *
               C50626 * C50727) *
              C280 +
          (((C6548 + C6549) * C39097 + (C6550 + C6551) * C39098 +
            (C6568 + C6569) * C39099 + (C39911 + C39912) * C39100) *
               C50626 * C50727 -
           (C39908 * C39100 + C6567 * C39099 + (C6549 + C6548) * C39098 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C39097) *
               C50626 * C1687) *
              C281 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C39097 +
            (C7104 + C7105) * C39098 + (C7106 + C7107) * C39099 +
            (C40249 + C40250) * C39100) *
               C50626 * C1687 -
           (((C117 * C23160 + C50744 * C23162) * C50605 +
             (C117 * C23159 + C50744 * C23161) * C1109) *
                C39100 +
            (C40250 + C40249) * C39099 + (C7107 + C7106) * C39098 +
            (C7105 + C7104) * C39097) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50744 * C129) * C641 +
                      (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
                      C172 * C50931 + C173 * C643 + C174 * C638) *
                         C50940 +
                     (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C50941 +
                     (C5888 + C5889 - C5890 - C5891 + C5892 + C5893) * C44456) *
                        C50881 +
                    ((C171 * C641 + C172 * C50930 - C173 * C642 -
                      C174 * C50931 + C175 * C643 + C176 * C638) *
                         C50940 +
                     (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C50941 +
                     (C5900 + C5901 - C5902 - C5903 + C5904 + C5905) * C44456) *
                        C50631) *
                       C50663 * C50889 +
                   (((C350 * C642 -
                      ((C117 * C296 + C50744 * C315) * C50930 +
                       (C117 * C286 + C50744 * C297) * C641) +
                      C351 * C50931 - C352 * C643 - C353 * C638) *
                         C50940 +
                     (C927 * C642 - (C6128 * C50930 + C6129 * C641) +
                      C928 * C50931 - C929 * C643 - C930 * C638) *
                         C50941 +
                     (C5354 * C642 - (C6130 * C50930 + C6131 * C641) +
                      C5355 * C50931 - C5734 * C643 - C5735 * C638) *
                         C44456) *
                        C50881 +
                    ((C352 * C642 - (C351 * C50930 + C350 * C641) +
                      C353 * C50931 - C354 * C643 - C355 * C638) *
                         C50940 +
                     (C929 * C642 - (C928 * C50930 + C927 * C641) +
                      C930 * C50931 - C931 * C643 - C932 * C638) *
                         C50941 +
                     (C5734 * C642 - (C5355 * C50930 + C5354 * C641) +
                      C5735 * C50931 - (C117 * C1224 + C50744 * C1229) * C643 -
                      (C117 * C1228 + C50744 * C1236) * C638) *
                         C44456) *
                        C50631) *
                       C50663 * C50701)) /
                 (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C283 +
              (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
              C172 * C50610) *
                 C50940 +
             (C5567 + C5568 - C5522 - C5523) * C50941 + C5583 * C44456) *
                C50881 +
            ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) *
                 C50940 +
             (C5530 + C5531 - C5532 - C5533) * C50941 + C5581 * C44456) *
                C50631) *
               C50890 +
           (((C5522 - (C5568 + C5567) + C5523) * C50940 +
             (C5528 - (C5570 + C5569) + C5529) * C50941 +
             (C5572 - (C5573 + C5574) + C5575) * C44456) *
                C50881 +
            ((C5532 - (C5531 + C5530) + C5533) * C50940 +
             (C5536 - (C5535 + C5534) + C5537) * C50941 +
             (C5576 - (C5577 + C5578) + C5579) * C44456) *
                C50631) *
               C50727) *
              C50889 +
          ((((C350 * C284 -
              ((C117 * C296 + C50744 * C315) * C278 +
               (C117 * C286 + C50744 * C297) * C283) +
              C351 * C50610) *
                 C50940 +
             (C6104 - (C6134 + C6135) + C6109) * C50941 +
             (C6110 - (C6136 + C6137) + C6115) * C44456) *
                C50881 +
            ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                 C50940 +
             (C6116 - (C6117 + C6118) + C6119) * C50941 +
             (C6120 - (C6121 + C6122) + C6123) * C44456) *
                C50631) *
               C50890 +
           (((C6135 + C6134 - C6104 - C6109) * C50940 +
             (C6137 + C6136 - C6110 - C6115) * C50941 +
             (C39639 + C39638 - C39637 - C39640) * C44456) *
                C50881 +
            ((C6118 + C6117 - C6116 - C6119) * C50940 +
             (C6122 + C6121 - C6120 - C6123) * C50941 +
             (C6132 * C283 + C6133 * C278 -
              (C117 * C6099 + C50744 * C6100) * C284 -
              (C117 * C6101 + C50744 * C6102) * C50610) *
                 C44456) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C50940 +
            (C5567 + C5568 - C5522 - C5523) * C50941 + C5583 * C44456) *
               C50881 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50940 +
            (C5530 + C5531 - C5532 - C5533) * C50941 + C5581 * C44456) *
               C50631) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C50940 +
            (C6104 - (C6134 + C6135) + C6109) * C50941 +
            (C6110 - (C6136 + C6137) + C6115) * C44456) *
               C50881 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C50940 +
            (C6116 - (C6117 + C6118) + C6119) * C50941 +
            (C6120 - (C6121 + C6122) + C6123) * C44456) *
               C50631) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C50940 +
            (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
                C50941 +
            (C7102 * C283 + C7103 * C278 - C5358 * C284 - C5359 * C50610) *
                C44456) *
               C50881 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C50940 +
            (C5356 * C283 + C5357 * C278 - C11127 * C284 - C11128 * C50610) *
                C50941 +
            (C5358 * C283 + C5359 * C278 -
             (C117 * C2704 + C50744 * C2709) * C284 -
             (C117 * C2710 + C50744 * C2713) * C50610) *
                C44456) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50940 +
           (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C50941 +
           (C5556 * C118 + C5557 * C106 - C533 * C119 - C534 * C107 +
            C535 * C120 + C536 * C108 - C537 * C121 - C538 * C109) *
               C44456) *
              C50881 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50940 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C50941 +
           (C533 * C118 + C534 * C106 - C535 * C119 - C536 * C107 +
            C537 * C120 + C538 * C108 - (C117 * C471 + C50744 * C490) * C121 -
            (C117 * C491 + C50744 * C501) * C109) *
               C44456) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C50940 +
            (C5567 + C5568 - C5522 - C5523) * C50941 + C5583 * C44456) *
               C50881 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50940 +
            (C5530 + C5531 - C5532 - C5533) * C50941 + C5581 * C44456) *
               C50631) *
              C459 +
          (((C5522 - (C5568 + C5567) + C5523) * C50940 +
            (C5528 - (C5570 + C5569) + C5529) * C50941 +
            (C5572 - (C5573 + C5574) + C5575) * C44456) *
               C50881 +
           ((C5532 - (C5531 + C5530) + C5533) * C50940 +
            (C5536 - (C5535 + C5534) + C5537) * C50941 +
            (C5576 - (C5577 + C5578) + C5579) * C44456) *
               C50631) *
              C460 +
          ((C5583 * C50940 + C39304 * C50941 +
            (C39301 + C39300 - C39299 - C39302) * C44456) *
               C50881 +
           (C5581 * C50940 + (C5578 + C5577 - C5576 - C5579) * C50941 +
            (C5565 * C283 + C5566 * C278 -
             (C117 * C5507 + C50744 * C5512) * C284 -
             (C117 * C5513 + C50744 * C5516) * C50610) *
                C44456) *
               C50631) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C641 +
             (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
             C172 * C50931 + C173 * C643 + C174 * C638) *
                C50940 +
            (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C50941 +
            (C5888 + C5889 - C5890 - C5891 + C5892 + C5893) * C44456) *
               C50881 +
           ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
             C175 * C643 + C176 * C638) *
                C50940 +
            (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C50941 +
            (C5900 + C5901 - C5902 - C5903 + C5904 + C5905) * C44456) *
               C50631) *
              C50890 +
          (((C5884 - (C5883 + C5882) + C5885 - C5886 - C5887) * C50940 +
            (C5890 - (C5889 + C5888) + C5891 - C5892 - C5893) * C50941 +
            (C39503 - (C39502 + C39501) + C39504 - C39505 - C39506) * C44456) *
               C50881 +
           ((C5896 - (C5895 + C5894) + C5897 - C5898 - C5899) * C50940 +
            (C5902 - (C5901 + C5900) + C5903 - C5904 - C5905) * C50941 +
            (C5563 * C642 - (C5562 * C50930 + C5559 * C641) + C5564 * C50931 -
             (C117 * C1857 + C50744 * C1862) * C643 -
             (C117 * C1861 + C50744 * C1869) * C638) *
                C44456) *
               C50631) *
              C50727) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50940 +
           (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C50941 +
           (C5556 * C118 + C5557 * C106 - C533 * C119 - C534 * C107 +
            C535 * C120 + C536 * C108 - C537 * C121 - C538 * C109) *
               C44456) *
              C50881 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50940 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C50941 +
           (C533 * C118 + C534 * C106 - C535 * C119 - C536 * C107 +
            C537 * C120 + C538 * C108 - (C117 * C471 + C50744 * C490) * C121 -
            (C117 * C491 + C50744 * C501) * C109) *
               C44456) *
              C50631) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C50940 +
            (C5567 + C5568 - C5522 - C5523) * C50941 + C5583 * C44456) *
               C50881 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C50940 +
            (C5530 + C5531 - C5532 - C5533) * C50941 + C5581 * C44456) *
               C50631) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C50940 +
            (C6104 - (C6134 + C6135) + C6109) * C50941 +
            (C6110 - (C6136 + C6137) + C6115) * C44456) *
               C50881 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C50940 +
            (C6116 - (C6117 + C6118) + C6119) * C50941 +
            (C6120 - (C6121 + C6122) + C6123) * C44456) *
               C50631) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C50940 +
            (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
                C50941 +
            (C7102 * C283 + C7103 * C278 - C5358 * C284 - C5359 * C50610) *
                C44456) *
               C50881 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C50940 +
            (C5356 * C283 + C5357 * C278 - C11127 * C284 - C11128 * C50610) *
                C50941 +
            (C5358 * C283 + C5359 * C278 -
             (C117 * C2704 + C50744 * C2709) * C284 -
             (C117 * C2710 + C50744 * C2713) * C50610) *
                C44456) *
               C50631) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C50940 +
            (C6910 + C6911 - C6912 - C6913) * C50941 + C7894 * C44456) *
               C50881 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C50940 +
            (C6918 + C6919 - C6920 - C6921) * C50941 + C7895 * C44456) *
               C50631) *
              C50663 * C50934 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C50940 +
            (C6926 - (C6927 + C6928) + C6929) * C50941 +
            (C6930 - (C6931 + C6932) + C6933) * C44456) *
               C50881 +
           ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C50940 +
            (C6934 - (C6935 + C6936) + C6937) * C50941 +
            (C6938 - (C6939 + C6940) + C6941) * C44456) *
               C50631) *
              C50663 * C50935 +
          ((((C117 * C290 + C50744 * C305) * C49720 +
             (C117 * C306 + C50744 * C320) * C50874 - C356 * C49713 -
             C357 * C50610) *
                C50940 +
            (C7100 * C49720 + C7101 * C50874 - C5356 * C49713 -
             C5357 * C50610) *
                C50941 +
            (C7102 * C49720 + C7103 * C50874 - C5358 * C49713 -
             C5359 * C50610) *
                C44456) *
               C50881 +
           ((C356 * C49720 + C357 * C50874 - C358 * C49713 - C359 * C50610) *
                C50940 +
            (C5356 * C49720 + C5357 * C50874 - C11127 * C49713 -
             C11128 * C50610) *
                C50941 +
            (C5358 * C49720 + C5359 * C50874 -
             (C117 * C2704 + C50744 * C2709) * C49713 -
             (C117 * C2710 + C50744 * C2713) * C50610) *
                C44456) *
               C50631) *
              C50663 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C117 * C122 + C50744 * C129) * C1109 +
                       (C117 * C130 + C50744 * C143) * C50605) *
                          C50940 +
                      (C6536 + C6537) * C50941 + C6562 * C44456) *
                         C50881 +
                     ((C171 * C1109 + C172 * C50605) * C50940 +
                      (C6540 + C6541) * C50941 + C6563 * C44456) *
                         C50631) *
                        C50890 -
                    ((C7530 * C44456 + (C6543 + C6542) * C50941 +
                      (C6541 + C6540) * C50940) *
                         C50631 +
                     (C7531 * C44456 + (C6539 + C6538) * C50941 +
                      (C6537 + C6536) * C50940) *
                         C50881) *
                        C50727) *
                       C50934 +
                   ((((C6548 + C6549) * C50940 + (C6550 + C6551) * C50941 +
                      (C6568 + C6569) * C44456) *
                         C50881 +
                     ((C6556 + C6557) * C50940 + (C6558 + C6559) * C50941 +
                      (C6560 + C6561) * C44456) *
                         C50631) *
                        C50727 -
                    ((C6566 * C44456 + (C6557 + C6556) * C50941 +
                      (C351 * C50605 + C350 * C1109) * C50940) *
                         C50631 +
                     (C6567 * C44456 + (C6549 + C6548) * C50941 +
                      ((C117 * C296 + C50744 * C315) * C50605 +
                       (C117 * C286 + C50744 * C297) * C1109) *
                          C50940) *
                         C50881) *
                        C50890) *
                       C50935 +
                   (((((C117 * C290 + C50744 * C305) * C1109 +
                       (C117 * C306 + C50744 * C320) * C50605) *
                          C50940 +
                      (C7104 + C7105) * C50941 + (C7106 + C7107) * C44456) *
                         C50881 +
                     ((C356 * C1109 + C357 * C50605) * C50940 +
                      (C7096 + C7097) * C50941 + (C7098 + C7099) * C44456) *
                         C50631) *
                        C50890 -
                    ((((C117 * C4596 + C50744 * C4604) * C50605 +
                       (C117 * C4592 + C50744 * C4598) * C1109) *
                          C44456 +
                      (C7099 + C7098) * C50941 + (C7097 + C7096) * C50940) *
                         C50631 +
                     ((C40250 + C40249) * C44456 + (C7107 + C7106) * C50941 +
                      (C7105 + C7104) * C50940) *
                         C50881) *
                        C50727) *
                       C1342)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50940 +
            (C6536 + C6537) * C50941 + C6562 * C44456) *
               C50881 +
           ((C171 * C1109 + C172 * C50605) * C50940 + (C6540 + C6541) * C50941 +
            C6563 * C44456) *
               C50631) *
              C50663 * C1105 -
          ((C6566 * C44456 + (C6557 + C6556) * C50941 +
            (C351 * C50605 + C350 * C1109) * C50940) *
               C50631 +
           (C6567 * C44456 + (C6549 + C6548) * C50941 +
            ((C117 * C296 + C50744 * C315) * C50605 +
             (C117 * C286 + C50744 * C297) * C1109) *
                C50940) *
               C50881) *
              C50663 * C1106 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C50940 +
            (C7104 + C7105) * C50941 + (C7106 + C7107) * C44456) *
               C50881 +
           ((C356 * C1109 + C357 * C50605) * C50940 + (C7096 + C7097) * C50941 +
            (C7098 + C7099) * C44456) *
               C50631) *
              C50663 * C1107 -
          ((((C117 * C3702 + C50744 * C3706) * C50605 +
             (C117 * C3700 + C50744 * C3703) * C1109) *
                C44456 +
            ((C117 * C3278 + C50744 * C3282) * C50605 +
             (C117 * C3273 + C50744 * C3277) * C1109) *
                C50941 +
            ((C117 * C1118 + C50744 * C1124) * C50605 +
             (C117 * C1112 + C50744 * C1119) * C1109) *
                C50940) *
               C50631 +
           (((C117 * C3704 + C50744 * C3707) * C50605 +
             (C117 * C3701 + C50744 * C3705) * C1109) *
                C44456 +
            ((C117 * C3276 + C50744 * C3281) * C50605 +
             (C117 * C3272 + C50744 * C3275) * C1109) *
                C50941 +
            ((C117 * C1120 + C50744 * C1125) * C50605 +
             (C117 * C1113 + C50744 * C1121) * C1109) *
                C50940) *
               C50881) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C50940 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50941 +
            (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C44456) *
               C50881 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50940 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50941 +
            (C7272 + C7273 - C7274 - C7275 + C7276 + C7277) * C44456) *
               C50631) *
              C50663 * C1033 +
          (((C350 * C1036 -
             ((C117 * C296 + C50744 * C315) * C1030 +
              (C117 * C286 + C50744 * C297) * C1035) +
             C351 * C1031 - C352 * C1037 - C353 * C1032) *
                C50940 +
            (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C50941 +
            (C5354 * C1036 - (C6130 * C1030 + C6131 * C1035) + C5355 * C1031 -
             C5734 * C1037 - C5735 * C1032) *
                C44456) *
               C50881 +
           ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
             C354 * C1037 - C355 * C1032) *
                C50940 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50941 +
            (C5734 * C1036 - (C5355 * C1030 + C5354 * C1035) + C5735 * C1031 -
             (C117 * C1224 + C50744 * C1229) * C1037 -
             (C117 * C1228 + C50744 * C1236) * C1032) *
                C44456) *
               C50631) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50940 +
             (C6536 + C6537) * C50941 + C6562 * C44456) *
                C50881 +
            ((C171 * C1109 + C172 * C50605) * C50940 +
             (C6540 + C6541) * C50941 + C6563 * C44456) *
                C50631) *
               C459 -
           ((C7530 * C44456 + (C6543 + C6542) * C50941 +
             (C6541 + C6540) * C50940) *
                C50631 +
            (C7531 * C44456 + (C6539 + C6538) * C50941 +
             (C6537 + C6536) * C50940) *
                C50881) *
               C460 +
           ((C6562 * C50940 + C39903 * C50941 + (C7540 + C7541) * C44456) *
                C50881 +
            (C6563 * C50940 + (C6545 + C6544) * C50941 +
             (C7536 + C7537) * C44456) *
                C50631) *
               C461) *
              C1033 +
          ((((C6548 + C6549) * C50940 + (C6550 + C6551) * C50941 +
             (C6568 + C6569) * C44456) *
                C50881 +
            ((C6556 + C6557) * C50940 + (C6558 + C6559) * C50941 +
             (C6560 + C6561) * C44456) *
                C50631) *
               C460 -
           ((C6566 * C44456 + (C6557 + C6556) * C50941 +
             (C351 * C50605 + C350 * C1109) * C50940) *
                C50631 +
            (C6567 * C44456 + (C6549 + C6548) * C50941 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50940) *
                C50881) *
               C459 -
           ((((C117 * C6529 + C50744 * C6533) * C50605 +
              (C117 * C6527 + C50744 * C6530) * C1109) *
                 C44456 +
             (C6561 + C6560) * C50941 + C6566 * C50940) *
                C50631 +
            ((C39912 + C39911) * C44456 + C39908 * C50941 + C6567 * C50940) *
                C50881) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C50940 +
             (C6910 + C6911 - C6912 - C6913) * C50941 + C7894 * C44456) *
                C50881 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C50940 +
             (C6918 + C6919 - C6920 - C6921) * C50941 + C7895 * C44456) *
                C50631) *
               C50890 +
           (((C6912 - (C6911 + C6910) + C6913) * C50940 +
             (C6916 - (C6915 + C6914) + C6917) * C50941 +
             (C7884 - (C7885 + C7886) + C7887) * C44456) *
                C50881 +
            ((C6920 - (C6919 + C6918) + C6921) * C50940 +
             (C6924 - (C6923 + C6922) + C6925) * C50941 +
             (C7888 - (C7889 + C7890) + C7891) * C44456) *
                C50631) *
               C50727) *
              C1033 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C50940 +
             (C6926 - (C6927 + C6928) + C6929) * C50941 +
             (C6930 - (C6931 + C6932) + C6933) * C44456) *
                C50881 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C50940 +
             (C6934 - (C6935 + C6936) + C6937) * C50941 +
             (C6938 - (C6939 + C6940) + C6941) * C44456) *
                C50631) *
               C50890 +
           (((C6928 + C6927 - C6926 - C6929) * C50940 +
             (C6932 + C6931 - C6930 - C6933) * C50941 +
             (C40143 + C40142 - C40141 - C40144) * C44456) *
                C50881 +
            ((C6936 + C6935 - C6934 - C6937) * C50940 +
             (C6940 + C6939 - C6938 - C6941) * C50941 +
             (C6132 * C49720 + C6133 * C50874 -
              (C117 * C6099 + C50744 * C6100) * C49713 -
              (C117 * C6101 + C50744 * C6102) * C50610) *
                 C44456) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50744 * C129) * C1035 +
                      (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
                      C172 * C1031 + C173 * C1037 + C174 * C1032) *
                         C50940 +
                     (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50941 +
                     (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C44456) *
                        C50881 +
                    ((C171 * C1035 + C172 * C1030 - C173 * C1036 -
                      C174 * C1031 + C175 * C1037 + C176 * C1032) *
                         C50940 +
                     (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50941 +
                     (C7272 + C7273 - C7274 - C7275 + C7276 + C7277) * C44456) *
                        C50631) *
                       C50663 * C1033 +
                   (((C350 * C1036 -
                      ((C117 * C296 + C50744 * C315) * C1030 +
                       (C117 * C286 + C50744 * C297) * C1035) +
                      C351 * C1031 - C352 * C1037 - C353 * C1032) *
                         C50940 +
                     (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) +
                      C928 * C1031 - C929 * C1037 - C930 * C1032) *
                         C50941 +
                     (C5354 * C1036 - (C6130 * C1030 + C6131 * C1035) +
                      C5355 * C1031 - C5734 * C1037 - C5735 * C1032) *
                         C44456) *
                        C50881 +
                    ((C352 * C1036 - (C351 * C1030 + C350 * C1035) +
                      C353 * C1031 - C354 * C1037 - C355 * C1032) *
                         C50940 +
                     (C929 * C1036 - (C928 * C1030 + C927 * C1035) +
                      C930 * C1031 - C931 * C1037 - C932 * C1032) *
                         C50941 +
                     (C5734 * C1036 - (C5355 * C1030 + C5354 * C1035) +
                      C5735 * C1031 - (C117 * C1224 + C50744 * C1229) * C1037 -
                      (C117 * C1228 + C50744 * C1236) * C1032) *
                         C44456) *
                        C50631) *
                       C50663 * C50701)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50744 * C129) * C1109 +
                      (C117 * C130 + C50744 * C143) * C50605) *
                         C50940 +
                     (C6536 + C6537) * C50941 + C6562 * C44456) *
                        C50881 +
                    ((C171 * C1109 + C172 * C50605) * C50940 +
                     (C6540 + C6541) * C50941 + C6563 * C44456) *
                        C50631) *
                       C50663 * C1105 -
                   ((C6566 * C44456 + (C6557 + C6556) * C50941 +
                     (C351 * C50605 + C350 * C1109) * C50940) *
                        C50631 +
                    (C6567 * C44456 + (C6549 + C6548) * C50941 +
                     ((C117 * C296 + C50744 * C315) * C50605 +
                      (C117 * C286 + C50744 * C297) * C1109) *
                         C50940) *
                        C50881) *
                       C50663 * C1106 +
                   ((((C117 * C290 + C50744 * C305) * C1109 +
                      (C117 * C306 + C50744 * C320) * C50605) *
                         C50940 +
                     (C7104 + C7105) * C50941 + (C7106 + C7107) * C44456) *
                        C50881 +
                    ((C356 * C1109 + C357 * C50605) * C50940 +
                     (C7096 + C7097) * C50941 + (C7098 + C7099) * C44456) *
                        C50631) *
                       C50663 * C1107 -
                   ((((C117 * C3702 + C50744 * C3706) * C50605 +
                      (C117 * C3700 + C50744 * C3703) * C1109) *
                         C44456 +
                     ((C117 * C3278 + C50744 * C3282) * C50605 +
                      (C117 * C3273 + C50744 * C3277) * C1109) *
                         C50941 +
                     ((C117 * C1118 + C50744 * C1124) * C50605 +
                      (C117 * C1112 + C50744 * C1119) * C1109) *
                         C50940) *
                        C50631 +
                    (((C117 * C3704 + C50744 * C3707) * C50605 +
                      (C117 * C3701 + C50744 * C3705) * C1109) *
                         C44456 +
                     ((C117 * C3276 + C50744 * C3281) * C50605 +
                      (C117 * C3272 + C50744 * C3275) * C1109) *
                         C50941 +
                     ((C117 * C1120 + C50744 * C1125) * C50605 +
                      (C117 * C1113 + C50744 * C1121) * C1109) *
                         C50940) *
                        C50881) *
                       C50663 * C1108)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C50940 +
             (C6910 + C6911 - C6912 - C6913) * C50941 + C7894 * C44456) *
                C50881 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C50940 +
             (C6918 + C6919 - C6920 - C6921) * C50941 + C7895 * C44456) *
                C50631) *
               C1687 +
           (((C6912 - (C6911 + C6910) + C6913) * C50940 +
             (C6916 - (C6915 + C6914) + C6917) * C50941 +
             (C7884 - (C7885 + C7886) + C7887) * C44456) *
                C50881 +
            ((C6920 - (C6919 + C6918) + C6921) * C50940 +
             (C6924 - (C6923 + C6922) + C6925) * C50941 +
             (C7888 - (C7889 + C7890) + C7891) * C44456) *
                C50631) *
               C50727) *
              C50889 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C50940 +
             (C6926 - (C6927 + C6928) + C6929) * C50941 +
             (C6930 - (C6931 + C6932) + C6933) * C44456) *
                C50881 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C50940 +
             (C6934 - (C6935 + C6936) + C6937) * C50941 +
             (C6938 - (C6939 + C6940) + C6941) * C44456) *
                C50631) *
               C1687 +
           (((C6928 + C6927 - C6926 - C6929) * C50940 +
             (C6932 + C6931 - C6930 - C6933) * C50941 +
             (C40143 + C40142 - C40141 - C40144) * C44456) *
                C50881 +
            ((C6936 + C6935 - C6934 - C6937) * C50940 +
             (C6940 + C6939 - C6938 - C6941) * C50941 +
             (C6132 * C49720 + C6133 * C50874 -
              (C117 * C6099 + C50744 * C6100) * C49713 -
              (C117 * C6101 + C50744 * C6102) * C50610) *
                 C44456) *
                C50631) *
               C50727) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50940 +
             (C6536 + C6537) * C50941 + C6562 * C44456) *
                C50881 +
            ((C171 * C1109 + C172 * C50605) * C50940 +
             (C6540 + C6541) * C50941 + C6563 * C44456) *
                C50631) *
               C50936 -
           ((C7530 * C44456 + (C6543 + C6542) * C50941 +
             (C6541 + C6540) * C50940) *
                C50631 +
            (C7531 * C44456 + (C6539 + C6538) * C50941 +
             (C6537 + C6536) * C50940) *
                C50881) *
               C50937 +
           ((C6562 * C50940 + C39903 * C50941 + (C7540 + C7541) * C44456) *
                C50881 +
            (C6563 * C50940 + (C6545 + C6544) * C50941 +
             (C7536 + C7537) * C44456) *
                C50631) *
               C2103) *
              C50889 +
          ((((C6548 + C6549) * C50940 + (C6550 + C6551) * C50941 +
             (C6568 + C6569) * C44456) *
                C50881 +
            ((C6556 + C6557) * C50940 + (C6558 + C6559) * C50941 +
             (C6560 + C6561) * C44456) *
                C50631) *
               C50937 -
           ((C6566 * C44456 + (C6557 + C6556) * C50941 +
             (C351 * C50605 + C350 * C1109) * C50940) *
                C50631 +
            (C6567 * C44456 + (C6549 + C6548) * C50941 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50940) *
                C50881) *
               C50936 -
           ((((C117 * C6529 + C50744 * C6533) * C50605 +
              (C117 * C6527 + C50744 * C6530) * C1109) *
                 C44456 +
             (C6561 + C6560) * C50941 + C6566 * C50940) *
                C50631 +
            ((C39912 + C39911) * C44456 + C39908 * C50941 + C6567 * C50940) *
                C50881) *
               C2103) *
              C50701)) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50940 +
             (C6536 + C6537) * C50941 + C6562 * C44456) *
                C50881 +
            ((C171 * C1109 + C172 * C50605) * C50940 +
             (C6540 + C6541) * C50941 + C6563 * C44456) *
                C50631) *
               C1687 -
           ((C7530 * C44456 + (C6543 + C6542) * C50941 +
             (C6541 + C6540) * C50940) *
                C50631 +
            (C7531 * C44456 + (C6539 + C6538) * C50941 +
             (C6537 + C6536) * C50940) *
                C50881) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C50940 + (C6550 + C6551) * C50941 +
             (C6568 + C6569) * C44456) *
                C50881 +
            ((C6556 + C6557) * C50940 + (C6558 + C6559) * C50941 +
             (C6560 + C6561) * C44456) *
                C50631) *
               C50727 -
           ((C6566 * C44456 + (C6557 + C6556) * C50941 +
             (C351 * C50605 + C350 * C1109) * C50940) *
                C50631 +
            (C6567 * C44456 + (C6549 + C6548) * C50941 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50940) *
                C50881) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C50940 +
             (C7104 + C7105) * C50941 + (C7106 + C7107) * C44456) *
                C50881 +
            ((C356 * C1109 + C357 * C50605) * C50940 +
             (C7096 + C7097) * C50941 + (C7098 + C7099) * C44456) *
                C50631) *
               C1687 -
           ((((C117 * C4596 + C50744 * C4604) * C50605 +
              (C117 * C4592 + C50744 * C4598) * C1109) *
                 C44456 +
             (C7099 + C7098) * C50941 + (C7097 + C7096) * C50940) *
                C50631 +
            ((C40250 + C40249) * C44456 + (C7107 + C7106) * C50941 +
             (C7105 + C7104) * C50940) *
                C50881) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C50940 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50941 +
            (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C44456) *
               C50881 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50940 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50941 +
            (C7272 + C7273 - C7274 - C7275 + C7276 + C7277) * C44456) *
               C50631) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C50940 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C50941 +
            (C40351 - (C40350 + C40349) + C40352 - C40353 - C40354) * C44456) *
               C50881 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C50940 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C50941 +
            (C5563 * C1036 - (C5562 * C1030 + C5559 * C1035) + C5564 * C1031 -
             (C117 * C1857 + C50744 * C1862) * C1037 -
             (C117 * C1861 + C50744 * C1869) * C1032) *
                C44456) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C50940 +
            (C6536 + C6537) * C50941 + C6562 * C44456) *
               C50881 +
           ((C171 * C1109 + C172 * C50605) * C50940 + (C6540 + C6541) * C50941 +
            C6563 * C44456) *
               C50631) *
              C1853 -
          ((C7530 * C44456 + (C6543 + C6542) * C50941 +
            (C6541 + C6540) * C50940) *
               C50631 +
           (C7531 * C44456 + (C6539 + C6538) * C50941 +
            (C6537 + C6536) * C50940) *
               C50881) *
              C1854 +
          ((C6562 * C50940 + C39903 * C50941 + (C7540 + C7541) * C44456) *
               C50881 +
           (C6563 * C50940 + (C6545 + C6544) * C50941 +
            (C7536 + C7537) * C44456) *
               C50631) *
              C1855 -
          ((((C117 * C7523 + C50744 * C7527) * C50605 +
             (C117 * C7521 + C50744 * C7524) * C1109) *
                C44456 +
            (C7537 + C7536) * C50941 + C7530 * C50940) *
               C50631 +
           ((C40531 + C40530) * C44456 + C40523 * C50941 + C7531 * C50940) *
               C50881) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C50940 +
            (C6910 + C6911 - C6912 - C6913) * C50941 + C7894 * C44456) *
               C50881 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C50940 +
            (C6918 + C6919 - C6920 - C6921) * C50941 + C7895 * C44456) *
               C50631) *
              C50936 +
          (((C6912 - (C6911 + C6910) + C6913) * C50940 +
            (C6916 - (C6915 + C6914) + C6917) * C50941 +
            (C7884 - (C7885 + C7886) + C7887) * C44456) *
               C50881 +
           ((C6920 - (C6919 + C6918) + C6921) * C50940 +
            (C6924 - (C6923 + C6922) + C6925) * C50941 +
            (C7888 - (C7889 + C7890) + C7891) * C44456) *
               C50631) *
              C50937 +
          ((C7894 * C50940 + C40766 * C50941 +
            (C40763 + C40762 - C40761 - C40764) * C44456) *
               C50881 +
           (C7895 * C50940 + (C7890 + C7889 - C7888 - C7891) * C50941 +
            (C5565 * C49720 + C5566 * C50874 -
             (C117 * C5507 + C50744 * C5512) * C49713 -
             (C117 * C5513 + C50744 * C5516) * C50610) *
                C44456) *
               C50631) *
              C2103) *
         C50651) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C50940 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50941 +
            (C7260 + C7261 - C7262 - C7263 + C7264 + C7265) * C44456) *
               C50881 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50940 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50941 +
            (C7272 + C7273 - C7274 - C7275 + C7276 + C7277) * C44456) *
               C50631) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C50940 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C50941 +
            (C40351 - (C40350 + C40349) + C40352 - C40353 - C40354) * C44456) *
               C50881 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C50940 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C50941 +
            (C5563 * C1036 - (C5562 * C1030 + C5559 * C1035) + C5564 * C1031 -
             (C117 * C1857 + C50744 * C1862) * C1037 -
             (C117 * C1861 + C50744 * C1869) * C1032) *
                C44456) *
               C50631) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C50940 +
             (C6536 + C6537) * C50941 + C6562 * C44456) *
                C50881 +
            ((C171 * C1109 + C172 * C50605) * C50940 +
             (C6540 + C6541) * C50941 + C6563 * C44456) *
                C50631) *
               C1687 -
           ((C7530 * C44456 + (C6543 + C6542) * C50941 +
             (C6541 + C6540) * C50940) *
                C50631 +
            (C7531 * C44456 + (C6539 + C6538) * C50941 +
             (C6537 + C6536) * C50940) *
                C50881) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C50940 + (C6550 + C6551) * C50941 +
             (C6568 + C6569) * C44456) *
                C50881 +
            ((C6556 + C6557) * C50940 + (C6558 + C6559) * C50941 +
             (C6560 + C6561) * C44456) *
                C50631) *
               C50727 -
           ((C6566 * C44456 + (C6557 + C6556) * C50941 +
             (C351 * C50605 + C350 * C1109) * C50940) *
                C50631 +
            (C6567 * C44456 + (C6549 + C6548) * C50941 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C50940) *
                C50881) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C50940 +
             (C7104 + C7105) * C50941 + (C7106 + C7107) * C44456) *
                C50881 +
            ((C356 * C1109 + C357 * C50605) * C50940 +
             (C7096 + C7097) * C50941 + (C7098 + C7099) * C44456) *
                C50631) *
               C1687 -
           ((((C117 * C4596 + C50744 * C4604) * C50605 +
              (C117 * C4592 + C50744 * C4598) * C1109) *
                 C44456 +
             (C7099 + C7098) * C50941 + (C7097 + C7096) * C50940) *
                C50631 +
            ((C40250 + C40249) * C44456 + (C7107 + C7106) * C50941 +
             (C7105 + C7104) * C50940) *
                C50881) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C641 +
             (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
             C172 * C50931 + C173 * C643 + C174 * C638) *
                C33763 +
            (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C50824) *
               C17274 +
           ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
             C175 * C643 + C176 * C638) *
                C33763 +
            (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C50824) *
               C17275 +
           ((C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
             C177 * C643 + C178 * C638) *
                C33763 +
            (C11575 + C11576 - C11577 - C11578 + C11579 + C11580) * C50824) *
               C17276) *
              C50663 * C50889 +
          (((C350 * C642 -
             ((C117 * C296 + C50744 * C315) * C50930 +
              (C117 * C286 + C50744 * C297) * C641) +
             C351 * C50931 - C352 * C643 - C353 * C638) *
                C33763 +
            (C927 * C642 - (C6128 * C50930 + C6129 * C641) + C928 * C50931 -
             C929 * C643 - C930 * C638) *
                C50824) *
               C17274 +
           ((C352 * C642 - (C351 * C50930 + C350 * C641) + C353 * C50931 -
             C354 * C643 - C355 * C638) *
                C33763 +
            (C929 * C642 - (C928 * C50930 + C927 * C641) + C930 * C50931 -
             C931 * C643 - C932 * C638) *
                C50824) *
               C17275 +
           ((C354 * C642 - (C353 * C50930 + C352 * C641) + C355 * C50931 -
             C653 * C643 - C654 * C638) *
                C33763 +
            (C931 * C642 - (C930 * C50930 + C929 * C641) + C932 * C50931 -
             (C117 * C898 + C50744 * C907) * C643 -
             (C117 * C908 + C50744 * C913) * C638) *
                C50824) *
               C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C641 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50930 -
            (C2345 + C2346 + C2347) * C642 - (C2348 + C2349 + C2350) * C50931 +
            (C2351 + C2352 + C2353) * C643 + (C2354 + C2355 + C2356) * C638) *
               C33763 +
           ((C36710 + C36711 + C36712) * C641 +
            (C36713 + C36714 + C36715) * C50930 -
            (C2741 + C2740 + C2739) * C642 - (C2744 + C2743 + C2742) * C50931 +
            (C3075 + C3074 + C3073) * C643 + (C3078 + C3077 + C3076) * C638) *
               C50824) *
              C50626 * C50663 * C50889 +
          (((C2545 + C2546 + C2547) * C642 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50930 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C641) +
            (C2548 + C2549 + C2550) * C50931 - (C2909 + C2910 + C2911) * C643 -
            (C2912 + C2913 + C2914) * C638) *
               C33763 +
           ((C3299 + C3298 + C3297) * C642 -
            ((C2307 * C3276 + C2302 * C3281 + C2306 * C1583 + C2301 * C1588 +
              C2305 * C900 + C2300 * C909) *
                 C50930 +
             (C2307 * C3272 + C2302 * C3275 + C2306 * C1576 + C2301 * C1584 +
              C2305 * C894 + C2300 * C899) *
                 C641) +
            (C3302 + C3301 + C3300) * C50931 -
            (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
             C2305 * C896 + C2300 * C903) *
                C643 -
            (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
             C2305 * C904 + C2300 * C911) *
                C638) *
               C50824) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C283 +
              (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
              C172 * C50610) *
                 C33763 +
             (C5567 + C5568 - C5522 - C5523) * C50824) *
                C17274 +
            ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) *
                 C33763 +
             (C5530 + C5531 - C5532 - C5533) * C50824) *
                C17275 +
            ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) *
                 C33763 +
             (C11275 + C11276 - C11277 - C11278) * C50824) *
                C17276) *
               C50890 +
           (((C5522 - (C5568 + C5567) + C5523) * C33763 +
             (C5528 - (C5570 + C5569) + C5529) * C50824) *
                C17274 +
            ((C5532 - (C5531 + C5530) + C5533) * C33763 +
             (C5536 - (C5535 + C5534) + C5537) * C50824) *
                C17275 +
            ((C11277 - (C11276 + C11275) + C11278) * C33763 +
             (C11279 - (C11280 + C11281) + C11282) * C50824) *
                C17276) *
               C50727) *
              C50889 +
          ((((C350 * C284 -
              ((C117 * C296 + C50744 * C315) * C278 +
               (C117 * C286 + C50744 * C297) * C283) +
              C351 * C50610) *
                 C33763 +
             (C6104 - (C6134 + C6135) + C6109) * C50824) *
                C17274 +
            ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                 C33763 +
             (C6116 - (C6117 + C6118) + C6119) * C50824) *
                C17275 +
            ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                 C33763 +
             (C11775 - (C11776 + C11777) + C11778) * C50824) *
                C17276) *
               C50890 +
           (((C6135 + C6134 - C6104 - C6109) * C33763 +
             (C6137 + C6136 - C6110 - C6115) * C50824) *
                C17274 +
            ((C6118 + C6117 - C6116 - C6119) * C33763 +
             (C6122 + C6121 - C6120 - C6123) * C50824) *
                C17275 +
            ((C11777 + C11776 - C11775 - C11778) * C33763 +
             (C5734 * C283 + C5735 * C278 -
              (C117 * C1224 + C50744 * C1229) * C284 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C283 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C278 -
             (C2345 + C2346 + C2347) * C284 -
             (C2348 + C2349 + C2350) * C50610) *
                C33763 +
            ((C36710 + C36711 + C36712) * C283 +
             (C36713 + C36714 + C36715) * C278 -
             (C2741 + C2740 + C2739) * C284 -
             (C2744 + C2743 + C2742) * C50610) *
                C50824) *
               C50626 * C50890 +
           (((C2739 + C2740 + C2741) * C284 -
             ((C36715 + C36714 + C36713) * C278 +
              (C36712 + C36711 + C36710) * C283) +
             (C2742 + C2743 + C2744) * C50610) *
                C33763 +
            ((C2747 + C2746 + C2745) * C284 -
             ((C36716 + C36717 + C36718) * C278 +
              (C36719 + C36720 + C36721) * C283) +
             (C2750 + C2749 + C2748) * C50610) *
                C50824) *
               C50626 * C50727) *
              C50889 +
          ((((C2545 + C2546 + C2547) * C284 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C278 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C283) +
             (C2548 + C2549 + C2550) * C50610) *
                C33763 +
            ((C3299 + C3298 + C3297) * C284 -
             ((C37220 + C37221 + C37222) * C278 +
              (C37223 + C37224 + C37225) * C283) +
             (C3302 + C3301 + C3300) * C50610) *
                C50824) *
               C50626 * C50890 +
           (((C37225 + C37224 + C37223) * C283 +
             (C37222 + C37221 + C37220) * C278 -
             (C3297 + C3298 + C3299) * C284 -
             (C3300 + C3301 + C3302) * C50610) *
                C33763 +
            ((C2305 * C1227 + C2300 * C1235 + C2306 * C2702 + C2301 * C2705 +
              C2307 * C3701 + C2302 * C3705) *
                 C283 +
             (C2305 * C1234 + C2300 * C1239 + C2306 * C2706 + C2301 * C2711 +
              C2307 * C3704 + C2302 * C3707) *
                 C278 -
             (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 + C2301 * C2707 +
              C2305 * C1226 + C2300 * C1233) *
                 C284 -
             (C2307 * C3702 + C2302 * C3706 + C2306 * C2708 + C2301 * C2712 +
              C2305 * C1232 + C2300 * C1238) *
                 C50610) *
                C50824) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C33763 +
            (C5567 + C5568 - C5522 - C5523) * C50824) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C33763 +
            (C5530 + C5531 - C5532 - C5533) * C50824) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C33763 +
            (C11275 + C11276 - C11277 - C11278) * C50824) *
               C17276) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C33763 +
            (C6104 - (C6134 + C6135) + C6109) * C50824) *
               C17274 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C33763 +
            (C6116 - (C6117 + C6118) + C6119) * C50824) *
               C17275 +
           ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                C33763 +
            (C11775 - (C11776 + C11777) + C11778) * C50824) *
               C17276) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C33763 +
            (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
                C50824) *
               C17274 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C33763 +
            (C5356 * C283 + C5357 * C278 - C11127 * C284 - C11128 * C50610) *
                C50824) *
               C17275 +
           ((C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) * C33763 +
            (C11127 * C283 + C11128 * C278 -
             (C117 * C1573 + C50744 * C1578) * C284 -
             (C117 * C1577 + C50744 * C1585) * C50610) *
                C50824) *
               C17276) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C33763 +
           (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C50824) *
              C17274 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C33763 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C50824) *
              C17275 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C33763 +
           (C529 * C118 + C530 * C106 - C531 * C119 - C532 * C107 +
            C763 * C120 + C764 * C108 - (C117 * C754 + C50744 * C755) * C121 -
            (C117 * C756 + C50744 * C757) * C109) *
               C50824) *
              C17276) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C33763 +
            (C5567 + C5568 - C5522 - C5523) * C50824) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C33763 +
            (C5530 + C5531 - C5532 - C5533) * C50824) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C33763 +
            (C11275 + C11276 - C11277 - C11278) * C50824) *
               C17276) *
              C459 +
          (((C5522 - (C5568 + C5567) + C5523) * C33763 +
            (C5528 - (C5570 + C5569) + C5529) * C50824) *
               C17274 +
           ((C5532 - (C5531 + C5530) + C5533) * C33763 +
            (C5536 - (C5535 + C5534) + C5537) * C50824) *
               C17275 +
           ((C11277 - (C11276 + C11275) + C11278) * C33763 +
            (C11279 - (C11280 + C11281) + C11282) * C50824) *
               C17276) *
              C460 +
          ((C5583 * C33763 + (C5574 + C5573 - C5572 - C5575) * C50824) *
               C17274 +
           (C5581 * C33763 + (C5578 + C5577 - C5576 - C5579) * C50824) *
               C17275 +
           ((C11281 + C11280 - C11279 - C11282) * C33763 +
            (C5563 * C283 + C5564 * C278 -
             (C117 * C1857 + C50744 * C1862) * C284 -
             (C117 * C1861 + C50744 * C1869) * C50610) *
                C50824) *
               C17276) *
              C461) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
            C2307 * C290 + C2302 * C305) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
            C2307 * C306 + C2302 * C320) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C33763 +
          ((C2305 * C463 + C2300 * C474 + C2306 * C894 + C2301 * C899 +
            C2307 * C1576 + C2302 * C1584) *
               C118 +
           (C2305 * C473 + C2300 * C492 + C2306 * C900 + C2301 * C909 +
            C2307 * C1583 + C2302 * C1588) *
               C106 -
           (C2741 + C2740 + C2739) * C119 - (C2744 + C2743 + C2742) * C107 +
           (C3075 + C3074 + C3073) * C120 + (C3078 + C3077 + C3076) * C108 -
           (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
            C2305 * C465 + C2300 * C478) *
               C121 -
           (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
            C2305 * C479 + C2300 * C495) *
               C109) *
              C50824) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C2305 * C463 + C2300 * C474 + C2306 * C894 + C2301 * C899 +
             C2307 * C1576 + C2302 * C1584) *
                C283 +
            (C2305 * C473 + C2300 * C492 + C2306 * C900 + C2301 * C909 +
             C2307 * C1583 + C2302 * C1588) *
                C278 -
            (C2741 + C2740 + C2739) * C284 - (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C50663 * C280 +
          (((C2545 + C2546 + C2547) * C284 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C278 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C283) +
            (C2548 + C2549 + C2550) * C50610) *
               C33763 +
           ((C3299 + C3298 + C3297) * C284 -
            ((C2307 * C3276 + C2302 * C3281 + C2306 * C1583 + C2301 * C1588 +
              C2305 * C900 + C2300 * C909) *
                 C278 +
             (C2307 * C3272 + C2302 * C3275 + C2306 * C1576 + C2301 * C1584 +
              C2305 * C894 + C2300 * C899) *
                 C283) +
            (C3302 + C3301 + C3300) * C50610) *
               C50824) *
              C50626 * C50663 * C281 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C283 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C278 -
            (C2551 + C2552 + C2553) * C284 - (C2554 + C2555 + C2556) * C50610) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C283 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C278 -
            (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
             C2305 * C1575 + C2300 * C1582) *
                C284 -
            (C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
             C2305 * C1581 + C2300 * C1587) *
                C50610) *
               C50824) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C36710 + C36711 + C36712) * C283 +
            (C36713 + C36714 + C36715) * C278 - (C2741 + C2740 + C2739) * C284 -
            (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C459 +
          (((C2739 + C2740 + C2741) * C284 -
            ((C36715 + C36714 + C36713) * C278 +
             (C36712 + C36711 + C36710) * C283) +
            (C2742 + C2743 + C2744) * C50610) *
               C33763 +
           ((C2747 + C2746 + C2745) * C284 -
            ((C36716 + C36717 + C36718) * C278 +
             (C36719 + C36720 + C36721) * C283) +
            (C2750 + C2749 + C2748) * C50610) *
               C50824) *
              C50626 * C460 +
          (((C36721 + C36720 + C36719) * C283 +
            (C36718 + C36717 + C36716) * C278 - (C2745 + C2746 + C2747) * C284 -
            (C2748 + C2749 + C2750) * C50610) *
               C33763 +
           ((C2305 * C1860 + C2300 * C1868 + C2306 * C4595 + C2301 * C4603 +
             C2307 * C4594 + C2302 * C4602) *
                C283 +
            (C2305 * C1867 + C2300 * C1872 + C2306 * C4601 + C2301 * C4607 +
             C2307 * C4600 + C2302 * C4606) *
                C278 -
            (C2307 * C4592 + C2302 * C4598 + C2306 * C4593 + C2301 * C4599 +
             C2305 * C1859 + C2300 * C1866) *
                C284 -
            (C2307 * C4596 + C2302 * C4604 + C2306 * C4597 + C2301 * C4605 +
             C2305 * C1865 + C2300 * C1871) *
                C50610) *
               C50824) *
              C50626 * C461) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C641 +
             (C117 * C130 + C50744 * C143) * C50930 - C171 * C642 -
             C172 * C50931 + C173 * C643 + C174 * C638) *
                C33763 +
            (C5882 + C5883 - C5884 - C5885 + C5886 + C5887) * C50824) *
               C17274 +
           ((C171 * C641 + C172 * C50930 - C173 * C642 - C174 * C50931 +
             C175 * C643 + C176 * C638) *
                C33763 +
            (C5894 + C5895 - C5896 - C5897 + C5898 + C5899) * C50824) *
               C17275 +
           ((C173 * C641 + C174 * C50930 - C175 * C642 - C176 * C50931 +
             C177 * C643 + C178 * C638) *
                C33763 +
            (C11575 + C11576 - C11577 - C11578 + C11579 + C11580) * C50824) *
               C17276) *
              C50890 +
          (((C5884 - (C5883 + C5882) + C5885 - C5886 - C5887) * C33763 +
            (C5890 - (C5889 + C5888) + C5891 - C5892 - C5893) * C50824) *
               C17274 +
           ((C5896 - (C5895 + C5894) + C5897 - C5898 - C5899) * C33763 +
            (C5902 - (C5901 + C5900) + C5903 - C5904 - C5905) * C50824) *
               C17275 +
           ((C11577 - (C11576 + C11575) + C11578 - C11579 - C11580) * C33763 +
            (C537 * C642 - (C536 * C50930 + C535 * C641) + C538 * C50931 -
             (C117 * C471 + C50744 * C490) * C643 -
             (C117 * C491 + C50744 * C501) * C638) *
                C50824) *
               C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C641 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50930 -
            (C2345 + C2346 + C2347) * C642 - (C2348 + C2349 + C2350) * C50931 +
            (C2351 + C2352 + C2353) * C643 + (C2354 + C2355 + C2356) * C638) *
               C33763 +
           ((C36710 + C36711 + C36712) * C641 +
            (C36713 + C36714 + C36715) * C50930 -
            (C2741 + C2740 + C2739) * C642 - (C2744 + C2743 + C2742) * C50931 +
            (C3075 + C3074 + C3073) * C643 + (C3078 + C3077 + C3076) * C638) *
               C50824) *
              C50626 * C50890 +
          (((C2739 + C2740 + C2741) * C642 -
            ((C36715 + C36714 + C36713) * C50930 +
             (C36712 + C36711 + C36710) * C641) +
            (C2742 + C2743 + C2744) * C50931 - (C3073 + C3074 + C3075) * C643 -
            (C3076 + C3077 + C3078) * C638) *
               C33763 +
           ((C2747 + C2746 + C2745) * C642 -
            ((C36716 + C36717 + C36718) * C50930 +
             (C36719 + C36720 + C36721) * C641) +
            (C2750 + C2749 + C2748) * C50931 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C643 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C638) *
               C50824) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50744 * C129) * C118 +
            (C117 * C130 + C50744 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C33763 +
           (C5554 * C118 + C5555 * C106 - C527 * C119 - C528 * C107 +
            C529 * C120 + C530 * C108 - C531 * C121 - C532 * C109) *
               C50824) *
              C17274 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C33763 +
           (C527 * C118 + C528 * C106 - C529 * C119 - C530 * C107 +
            C531 * C120 + C532 * C108 - C763 * C121 - C764 * C109) *
               C50824) *
              C17275 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C33763 +
           (C529 * C118 + C530 * C106 - C531 * C119 - C532 * C107 +
            C763 * C120 + C764 * C108 - (C117 * C754 + C50744 * C755) * C121 -
            (C117 * C756 + C50744 * C757) * C109) *
               C50824) *
              C17276) *
         C50663 * C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C283 +
             (C117 * C130 + C50744 * C143) * C278 - C171 * C284 -
             C172 * C50610) *
                C33763 +
            (C5567 + C5568 - C5522 - C5523) * C50824) *
               C17274 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50610) * C33763 +
            (C5530 + C5531 - C5532 - C5533) * C50824) *
               C17275 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50610) * C33763 +
            (C11275 + C11276 - C11277 - C11278) * C50824) *
               C17276) *
              C50663 * C280 +
          (((C350 * C284 -
             ((C117 * C296 + C50744 * C315) * C278 +
              (C117 * C286 + C50744 * C297) * C283) +
             C351 * C50610) *
                C33763 +
            (C6104 - (C6134 + C6135) + C6109) * C50824) *
               C17274 +
           ((C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50610) *
                C33763 +
            (C6116 - (C6117 + C6118) + C6119) * C50824) *
               C17275 +
           ((C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50610) *
                C33763 +
            (C11775 - (C11776 + C11777) + C11778) * C50824) *
               C17276) *
              C50663 * C281 +
          ((((C117 * C290 + C50744 * C305) * C283 +
             (C117 * C306 + C50744 * C320) * C278 - C356 * C284 -
             C357 * C50610) *
                C33763 +
            (C7100 * C283 + C7101 * C278 - C5356 * C284 - C5357 * C50610) *
                C50824) *
               C17274 +
           ((C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50610) * C33763 +
            (C5356 * C283 + C5357 * C278 - C11127 * C284 - C11128 * C50610) *
                C50824) *
               C17275 +
           ((C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50610) * C33763 +
            (C11127 * C283 + C11128 * C278 -
             (C117 * C1573 + C50744 * C1578) * C284 -
             (C117 * C1577 + C50744 * C1585) * C50610) *
                C50824) *
               C17276) *
              C50663 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
            C2307 * C290 + C2302 * C305) *
               C118 +
           (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
            C2307 * C306 + C2302 * C320) *
               C106 -
           (C2345 + C2346 + C2347) * C119 - (C2348 + C2349 + C2350) * C107 +
           (C2351 + C2352 + C2353) * C120 + (C2354 + C2355 + C2356) * C108 -
           (C2357 + C2358 + C2359) * C121 - (C2360 + C2361 + C2362) * C109) *
              C33763 +
          ((C2305 * C463 + C2300 * C474 + C2306 * C894 + C2301 * C899 +
            C2307 * C1576 + C2302 * C1584) *
               C118 +
           (C2305 * C473 + C2300 * C492 + C2306 * C900 + C2301 * C909 +
            C2307 * C1583 + C2302 * C1588) *
               C106 -
           (C2741 + C2740 + C2739) * C119 - (C2744 + C2743 + C2742) * C107 +
           (C3075 + C3074 + C3073) * C120 + (C3078 + C3077 + C3076) * C108 -
           (C2307 * C1573 + C2302 * C1578 + C2306 * C897 + C2301 * C905 +
            C2305 * C465 + C2300 * C478) *
               C121 -
           (C2307 * C1577 + C2302 * C1585 + C2306 * C906 + C2301 * C912 +
            C2305 * C479 + C2300 * C495) *
               C109) *
              C50824) *
         C50626 * C50663 * C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C283 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C278 -
            (C2345 + C2346 + C2347) * C284 - (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C2305 * C463 + C2300 * C474 + C2306 * C894 + C2301 * C899 +
             C2307 * C1576 + C2302 * C1584) *
                C283 +
            (C2305 * C473 + C2300 * C492 + C2306 * C900 + C2301 * C909 +
             C2307 * C1583 + C2302 * C1588) *
                C278 -
            (C2741 + C2740 + C2739) * C284 - (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C50663 * C280 +
          (((C2545 + C2546 + C2547) * C284 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C278 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C283) +
            (C2548 + C2549 + C2550) * C50610) *
               C33763 +
           ((C3299 + C3298 + C3297) * C284 -
            ((C2307 * C3276 + C2302 * C3281 + C2306 * C1583 + C2301 * C1588 +
              C2305 * C900 + C2300 * C909) *
                 C278 +
             (C2307 * C3272 + C2302 * C3275 + C2306 * C1576 + C2301 * C1584 +
              C2305 * C894 + C2300 * C899) *
                 C283) +
            (C3302 + C3301 + C3300) * C50610) *
               C50824) *
              C50626 * C50663 * C281 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C283 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C278 -
            (C2551 + C2552 + C2553) * C284 - (C2554 + C2555 + C2556) * C50610) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C283 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C278 -
            (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
             C2305 * C1575 + C2300 * C1582) *
                C284 -
            (C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
             C2305 * C1581 + C2300 * C1587) *
                C50610) *
               C50824) *
              C50626 * C50663 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C33763 +
            (C6910 + C6911 - C6912 - C6913) * C50824) *
               C17274 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C33763 +
            (C6918 + C6919 - C6920 - C6921) * C50824) *
               C17275 +
           ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C33763 +
            (C12517 + C12518 - C12519 - C12520) * C50824) *
               C17276) *
              C50663 * C50934 +
          (((C350 * C49713 -
             ((C117 * C296 + C50744 * C315) * C50874 +
              (C117 * C286 + C50744 * C297) * C49720) +
             C351 * C50610) *
                C33763 +
            (C6926 - (C6927 + C6928) + C6929) * C50824) *
               C17274 +
           ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                C33763 +
            (C6934 - (C6935 + C6936) + C6937) * C50824) *
               C17275 +
           ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                C33763 +
            (C12521 - (C12522 + C12523) + C12524) * C50824) *
               C17276) *
              C50663 * C50935 +
          ((((C117 * C290 + C50744 * C305) * C49720 +
             (C117 * C306 + C50744 * C320) * C50874 - C356 * C49713 -
             C357 * C50610) *
                C33763 +
            (C7100 * C49720 + C7101 * C50874 - C5356 * C49713 -
             C5357 * C50610) *
                C50824) *
               C17274 +
           ((C356 * C49720 + C357 * C50874 - C358 * C49713 - C359 * C50610) *
                C33763 +
            (C5356 * C49720 + C5357 * C50874 - C11127 * C49713 -
             C11128 * C50610) *
                C50824) *
               C17275 +
           ((C358 * C49720 + C359 * C50874 - C360 * C49713 - C361 * C50610) *
                C33763 +
            (C11127 * C49720 + C11128 * C50874 -
             (C117 * C1573 + C50744 * C1578) * C49713 -
             (C117 * C1577 + C50744 * C1585) * C50610) *
                C50824) *
               C17276) *
              C50663 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50874 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C36710 + C36711 + C36712) * C49720 +
            (C36713 + C36714 + C36715) * C50874 -
            (C2741 + C2740 + C2739) * C49713 -
            (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C50663 * C50934 +
          (((C2545 + C2546 + C2547) * C49713 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50874 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C49720) +
            (C2548 + C2549 + C2550) * C50610) *
               C33763 +
           ((C3299 + C3298 + C3297) * C49713 -
            ((C37220 + C37221 + C37222) * C50874 +
             (C37223 + C37224 + C37225) * C49720) +
            (C3302 + C3301 + C3300) * C50610) *
               C50824) *
              C50626 * C50663 * C50935 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C49720 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50874 -
            (C2551 + C2552 + C2553) * C49713 -
            (C2554 + C2555 + C2556) * C50610) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C49720 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C50874 -
            (C2307 * C4194 + C2302 * C4197 + C2306 * C3273 + C2301 * C3277 +
             C2305 * C1575 + C2300 * C1582) *
                C49713 -
            (C2307 * C4196 + C2302 * C4200 + C2306 * C3278 + C2301 * C3282 +
             C2305 * C1581 + C2300 * C1587) *
                C50610) *
               C50824) *
              C50626 * C50663 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C50890 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C50727) *
              C50934 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C50727 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C50890) *
              C50935 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C33763 +
             (C7104 + C7105) * C50824) *
                C17274 +
            ((C356 * C1109 + C357 * C50605) * C33763 +
             (C7096 + C7097) * C50824) *
                C17275 +
            ((C358 * C1109 + C359 * C50605) * C33763 +
             (C12671 + C12672) * C50824) *
                C17276) *
               C50890 -
           ((((C117 * C2710 + C50744 * C2713) * C50605 +
              (C117 * C2704 + C50744 * C2709) * C1109) *
                 C50824 +
             (C12672 + C12671) * C33763) *
                C17276 +
            ((C7099 + C7098) * C50824 + (C7097 + C7096) * C33763) * C17275 +
            ((C7107 + C7106) * C50824 + (C7105 + C7104) * C33763) * C17274) *
               C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C50890 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C50727) *
              C50934 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C50727 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C50890) *
              C50935 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C33763 +
            ((C38132 + C38133 + C38134) * C1109 +
             (C38135 + C38136 + C38137) * C50605) *
                C50824) *
               C50626 * C50890 -
           (((C2307 * C20873 + C2302 * C20875 + C2306 * C3704 + C2301 * C3707 +
              C2305 * C2706 + C2300 * C2711) *
                 C50605 +
             (C2307 * C20872 + C2302 * C20874 + C2306 * C3701 + C2301 * C3705 +
              C2305 * C2702 + C2300 * C2705) *
                 C1109) *
                C50824 +
            ((C38137 + C38136 + C38135) * C50605 +
             (C38134 + C38133 + C38132) * C1109) *
                C33763) *
               C50626 * C50727) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C33763 +
            (C6536 + C6537) * C50824) *
               C17274 +
           ((C171 * C1109 + C172 * C50605) * C33763 +
            (C6540 + C6541) * C50824) *
               C17275 +
           ((C173 * C1109 + C174 * C50605) * C33763 +
            (C12169 + C12170) * C50824) *
               C17276) *
              C50663 * C1105 -
          (((C12174 + C12173) * C50824 +
            (C353 * C50605 + C352 * C1109) * C33763) *
               C17276 +
           ((C6557 + C6556) * C50824 +
            (C351 * C50605 + C350 * C1109) * C33763) *
               C17275 +
           ((C6549 + C6548) * C50824 + ((C117 * C296 + C50744 * C315) * C50605 +
                                        (C117 * C286 + C50744 * C297) * C1109) *
                                           C33763) *
               C17274) *
              C50663 * C1106 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C33763 +
            (C7104 + C7105) * C50824) *
               C17274 +
           ((C356 * C1109 + C357 * C50605) * C33763 +
            (C7096 + C7097) * C50824) *
               C17275 +
           ((C358 * C1109 + C359 * C50605) * C33763 +
            (C12671 + C12672) * C50824) *
               C17276) *
              C50663 * C1107 -
          ((((C117 * C3280 + C50744 * C3283) * C50605 +
             (C117 * C3274 + C50744 * C3279) * C1109) *
                C50824 +
            ((C117 * C1116 + C50744 * C1123) * C50605 +
             (C117 * C1111 + C50744 * C1117) * C1109) *
                C33763) *
               C17276 +
           (((C117 * C3278 + C50744 * C3282) * C50605 +
             (C117 * C3273 + C50744 * C3277) * C1109) *
                C50824 +
            ((C117 * C1118 + C50744 * C1124) * C50605 +
             (C117 * C1112 + C50744 * C1119) * C1109) *
                C33763) *
               C17275 +
           (((C117 * C3276 + C50744 * C3281) * C50605 +
             (C117 * C3272 + C50744 * C3275) * C1109) *
                C50824 +
            ((C117 * C1120 + C50744 * C1125) * C50605 +
             (C117 * C1113 + C50744 * C1121) * C1109) *
                C33763) *
               C17274) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C33763 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C17274 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C33763 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C17275 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C33763 +
            (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) * C50824) *
               C17276) *
              C50663 * C1033 +
          (((C350 * C1036 -
             ((C117 * C296 + C50744 * C315) * C1030 +
              (C117 * C286 + C50744 * C297) * C1035) +
             C351 * C1031 - C352 * C1037 - C353 * C1032) *
                C33763 +
            (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C50824) *
               C17274 +
           ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
             C354 * C1037 - C355 * C1032) *
                C33763 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50824) *
               C17275 +
           ((C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
             C653 * C1037 - C654 * C1032) *
                C33763 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50744 * C907) * C1037 -
             (C117 * C908 + C50744 * C913) * C1032) *
                C50824) *
               C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C459 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C460 +
           ((C6562 * C33763 + (C6547 + C6546) * C50824) * C17274 +
            (C6563 * C33763 + (C6545 + C6544) * C50824) * C17275 +
            ((C12172 + C12171) * C33763 + (C13069 + C13070) * C50824) *
                C17276) *
               C461) *
              C1033 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C460 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C459 -
           ((((C117 * C6101 + C50744 * C6102) * C50605 +
              (C117 * C6099 + C50744 * C6100) * C1109) *
                 C50824 +
             (C12176 + C12175) * C33763) *
                C17276 +
            ((C6561 + C6560) * C50824 + C6566 * C33763) * C17275 +
            ((C6569 + C6568) * C50824 + C6567 * C33763) * C17274) *
               C461) *
              C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1035 +
            (C36713 + C36714 + C36715) * C1030 -
            (C2741 + C2740 + C2739) * C1036 - (C2744 + C2743 + C2742) * C1031 +
            (C3075 + C3074 + C3073) * C1037 + (C3078 + C3077 + C3076) * C1032) *
               C50824) *
              C50626 * C50663 * C1033 +
          (((C2545 + C2546 + C2547) * C1036 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C1030 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1035) +
            (C2548 + C2549 + C2550) * C1031 - (C2909 + C2910 + C2911) * C1037 -
            (C2912 + C2913 + C2914) * C1032) *
               C33763 +
           ((C3299 + C3298 + C3297) * C1036 -
            ((C37220 + C37221 + C37222) * C1030 +
             (C37223 + C37224 + C37225) * C1035) +
            (C3302 + C3301 + C3300) * C1031 -
            (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
             C2305 * C896 + C2300 * C903) *
                C1037 -
            (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
             C2305 * C904 + C2300 * C911) *
                C1032) *
               C50824) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1109 +
            (C36713 + C36714 + C36715) * C50605) *
               C50824) *
              C50626 * C50663 * C1105 -
          (((C37220 + C37221 + C37222) * C50605 +
            (C37223 + C37224 + C37225) * C1109) *
               C50824 +
           ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
             C2305 * C296 + C2300 * C315) *
                C50605 +
            (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
             C2305 * C286 + C2300 * C297) *
                C1109) *
               C33763) *
              C50626 * C50663 * C1106 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C1109 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50605) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C1109 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C50605) *
               C50824) *
              C50626 * C50663 * C1107 -
          (((C2307 * C21203 + C2302 * C21205 + C2306 * C4198 + C2301 * C4201 +
             C2305 * C3276 + C2300 * C3281) *
                C50605 +
            (C2307 * C21202 + C2302 * C21204 + C2306 * C4195 + C2301 * C4199 +
             C2305 * C3272 + C2300 * C3275) *
                C1109) *
               C50824 +
           ((C2307 * C3550 + C2302 * C3553 + C2306 * C2512 + C2301 * C2517 +
             C2305 * C1120 + C2300 * C1125) *
                C50605 +
            (C2307 * C3547 + C2302 * C3551 + C2306 * C2508 + C2301 * C2511 +
             C2305 * C1113 + C2300 * C1121) *
                C1109) *
               C33763) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C459 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C460 +
           (((C36721 + C36720 + C36719) * C1109 +
             (C36718 + C36717 + C36716) * C50605) *
                C33763 +
            ((C2305 * C1860 + C2300 * C1868 + C2306 * C4595 + C2301 * C4603 +
              C2307 * C4594 + C2302 * C4602) *
                 C1109 +
             (C2305 * C1867 + C2300 * C1872 + C2306 * C4601 + C2301 * C4607 +
              C2307 * C4600 + C2302 * C4606) *
                 C50605) *
                C50824) *
               C50626 * C461) *
              C1033 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C460 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C459 -
           (((C2307 * C21469 + C2302 * C21471 + C2306 * C4600 + C2301 * C4606 +
              C2305 * C4601 + C2300 * C4607) *
                 C50605 +
             (C2307 * C21468 + C2302 * C21470 + C2306 * C4594 + C2301 * C4602 +
              C2305 * C4595 + C2300 * C4603) *
                 C1109) *
                C50824 +
            ((C37633 + C37632 + C37631) * C50605 +
             (C37630 + C37629 + C37628) * C1109) *
                C33763) *
               C50626 * C461) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C33763 +
             (C6910 + C6911 - C6912 - C6913) * C50824) *
                C17274 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C33763 +
             (C6918 + C6919 - C6920 - C6921) * C50824) *
                C17275 +
            ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                 C33763 +
             (C12517 + C12518 - C12519 - C12520) * C50824) *
                C17276) *
               C50890 +
           (((C6912 - (C6911 + C6910) + C6913) * C33763 +
             (C6916 - (C6915 + C6914) + C6917) * C50824) *
                C17274 +
            ((C6920 - (C6919 + C6918) + C6921) * C33763 +
             (C6924 - (C6923 + C6922) + C6925) * C50824) *
                C17275 +
            ((C12519 - (C12518 + C12517) + C12520) * C33763 +
             (C13411 - (C13412 + C13413) + C13414) * C50824) *
                C17276) *
               C50727) *
              C1033 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C33763 +
             (C6926 - (C6927 + C6928) + C6929) * C50824) *
                C17274 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C33763 +
             (C6934 - (C6935 + C6936) + C6937) * C50824) *
                C17275 +
            ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                 C33763 +
             (C12521 - (C12522 + C12523) + C12524) * C50824) *
                C17276) *
               C50890 +
           (((C6928 + C6927 - C6926 - C6929) * C33763 +
             (C6932 + C6931 - C6930 - C6933) * C50824) *
                C17274 +
            ((C6936 + C6935 - C6934 - C6937) * C33763 +
             (C6940 + C6939 - C6938 - C6941) * C50824) *
                C17275 +
            ((C12523 + C12522 - C12521 - C12524) * C33763 +
             (C5734 * C49720 + C5735 * C50874 -
              (C117 * C1224 + C50744 * C1229) * C49713 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50874 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50610) *
                C33763 +
            ((C36710 + C36711 + C36712) * C49720 +
             (C36713 + C36714 + C36715) * C50874 -
             (C2741 + C2740 + C2739) * C49713 -
             (C2744 + C2743 + C2742) * C50610) *
                C50824) *
               C50626 * C50890 +
           (((C2739 + C2740 + C2741) * C49713 -
             ((C36715 + C36714 + C36713) * C50874 +
              (C36712 + C36711 + C36710) * C49720) +
             (C2742 + C2743 + C2744) * C50610) *
                C33763 +
            ((C2747 + C2746 + C2745) * C49713 -
             ((C36716 + C36717 + C36718) * C50874 +
              (C36719 + C36720 + C36721) * C49720) +
             (C2750 + C2749 + C2748) * C50610) *
                C50824) *
               C50626 * C50727) *
              C1033 +
          ((((C2545 + C2546 + C2547) * C49713 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C50874 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C49720) +
             (C2548 + C2549 + C2550) * C50610) *
                C33763 +
            ((C3299 + C3298 + C3297) * C49713 -
             ((C37220 + C37221 + C37222) * C50874 +
              (C37223 + C37224 + C37225) * C49720) +
             (C3302 + C3301 + C3300) * C50610) *
                C50824) *
               C50626 * C50890 +
           (((C37225 + C37224 + C37223) * C49720 +
             (C37222 + C37221 + C37220) * C50874 -
             (C3297 + C3298 + C3299) * C49713 -
             (C3300 + C3301 + C3302) * C50610) *
                C33763 +
            ((C37628 + C37629 + C37630) * C49720 +
             (C37631 + C37632 + C37633) * C50874 -
             (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 + C2301 * C2707 +
              C2305 * C1226 + C2300 * C1233) *
                 C49713 -
             (C2307 * C3702 + C2302 * C3706 + C2306 * C2708 + C2301 * C2712 +
              C2305 * C1232 + C2300 * C1238) *
                 C50610) *
                C50824) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C33763 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C17274 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C33763 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C17275 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C33763 +
            (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) * C50824) *
               C17276) *
              C50663 * C1033 +
          (((C350 * C1036 -
             ((C117 * C296 + C50744 * C315) * C1030 +
              (C117 * C286 + C50744 * C297) * C1035) +
             C351 * C1031 - C352 * C1037 - C353 * C1032) *
                C33763 +
            (C927 * C1036 - (C6128 * C1030 + C6129 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C50824) *
               C17274 +
           ((C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
             C354 * C1037 - C355 * C1032) *
                C33763 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50824) *
               C17275 +
           ((C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
             C653 * C1037 - C654 * C1032) *
                C33763 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50744 * C907) * C1037 -
             (C117 * C908 + C50744 * C913) * C1032) *
                C50824) *
               C17276) *
              C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C33763 +
            (C6536 + C6537) * C50824) *
               C17274 +
           ((C171 * C1109 + C172 * C50605) * C33763 +
            (C6540 + C6541) * C50824) *
               C17275 +
           ((C173 * C1109 + C174 * C50605) * C33763 +
            (C12169 + C12170) * C50824) *
               C17276) *
              C50663 * C1105 -
          (((C12174 + C12173) * C50824 +
            (C353 * C50605 + C352 * C1109) * C33763) *
               C17276 +
           ((C6557 + C6556) * C50824 +
            (C351 * C50605 + C350 * C1109) * C33763) *
               C17275 +
           ((C6549 + C6548) * C50824 + ((C117 * C296 + C50744 * C315) * C50605 +
                                        (C117 * C286 + C50744 * C297) * C1109) *
                                           C33763) *
               C17274) *
              C50663 * C1106 +
          ((((C117 * C290 + C50744 * C305) * C1109 +
             (C117 * C306 + C50744 * C320) * C50605) *
                C33763 +
            (C7104 + C7105) * C50824) *
               C17274 +
           ((C356 * C1109 + C357 * C50605) * C33763 +
            (C7096 + C7097) * C50824) *
               C17275 +
           ((C358 * C1109 + C359 * C50605) * C33763 +
            (C12671 + C12672) * C50824) *
               C17276) *
              C50663 * C1107 -
          ((((C117 * C3280 + C50744 * C3283) * C50605 +
             (C117 * C3274 + C50744 * C3279) * C1109) *
                C50824 +
            ((C117 * C1116 + C50744 * C1123) * C50605 +
             (C117 * C1111 + C50744 * C1117) * C1109) *
                C33763) *
               C17276 +
           (((C117 * C3278 + C50744 * C3282) * C50605 +
             (C117 * C3273 + C50744 * C3277) * C1109) *
                C50824 +
            ((C117 * C1118 + C50744 * C1124) * C50605 +
             (C117 * C1112 + C50744 * C1119) * C1109) *
                C33763) *
               C17275 +
           (((C117 * C3276 + C50744 * C3281) * C50605 +
             (C117 * C3272 + C50744 * C3275) * C1109) *
                C50824 +
            ((C117 * C1120 + C50744 * C1125) * C50605 +
             (C117 * C1113 + C50744 * C1121) * C1109) *
                C33763) *
               C17274) *
              C50663 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1035 +
            (C36713 + C36714 + C36715) * C1030 -
            (C2741 + C2740 + C2739) * C1036 - (C2744 + C2743 + C2742) * C1031 +
            (C3075 + C3074 + C3073) * C1037 + (C3078 + C3077 + C3076) * C1032) *
               C50824) *
              C50626 * C50663 * C1033 +
          (((C2545 + C2546 + C2547) * C1036 -
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C1030 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1035) +
            (C2548 + C2549 + C2550) * C1031 - (C2909 + C2910 + C2911) * C1037 -
            (C2912 + C2913 + C2914) * C1032) *
               C33763 +
           ((C3299 + C3298 + C3297) * C1036 -
            ((C37220 + C37221 + C37222) * C1030 +
             (C37223 + C37224 + C37225) * C1035) +
            (C3302 + C3301 + C3300) * C1031 -
            (C2307 * C3274 + C2302 * C3279 + C2306 * C1574 + C2301 * C1580 +
             C2305 * C896 + C2300 * C903) *
                C1037 -
            (C2307 * C3280 + C2302 * C3283 + C2306 * C1579 + C2301 * C1586 +
             C2305 * C904 + C2300 * C911) *
                C1032) *
               C50824) *
              C50626 * C50663 * C50701)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1109 +
            (C36713 + C36714 + C36715) * C50605) *
               C50824) *
              C50626 * C50663 * C1105 -
          (((C37220 + C37221 + C37222) * C50605 +
            (C37223 + C37224 + C37225) * C1109) *
               C50824 +
           ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
             C2305 * C296 + C2300 * C315) *
                C50605 +
            (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
             C2305 * C286 + C2300 * C297) *
                C1109) *
               C33763) *
              C50626 * C50663 * C1106 +
          (((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
             C2307 * C2508 + C2302 * C2511) *
                C1109 +
            (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
             C2307 * C2512 + C2302 * C2517) *
                C50605) *
               C33763 +
           ((C2305 * C1576 + C2300 * C1584 + C2306 * C3272 + C2301 * C3275 +
             C2307 * C4195 + C2302 * C4199) *
                C1109 +
            (C2305 * C1583 + C2300 * C1588 + C2306 * C3276 + C2301 * C3281 +
             C2307 * C4198 + C2302 * C4201) *
                C50605) *
               C50824) *
              C50626 * C50663 * C1107 -
          (((C2307 * C21203 + C2302 * C21205 + C2306 * C4198 + C2301 * C4201 +
             C2305 * C3276 + C2300 * C3281) *
                C50605 +
            (C2307 * C21202 + C2302 * C21204 + C2306 * C4195 + C2301 * C4199 +
             C2305 * C3272 + C2300 * C3275) *
                C1109) *
               C50824 +
           ((C2307 * C3550 + C2302 * C3553 + C2306 * C2512 + C2301 * C2517 +
             C2305 * C1120 + C2300 * C1125) *
                C50605 +
            (C2307 * C3547 + C2302 * C3551 + C2306 * C2508 + C2301 * C2511 +
             C2305 * C1113 + C2300 * C1121) *
                C1109) *
               C33763) *
              C50626 * C50663 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C49720 +
              (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
              C172 * C50610) *
                 C33763 +
             (C6910 + C6911 - C6912 - C6913) * C50824) *
                C17274 +
            ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                 C33763 +
             (C6918 + C6919 - C6920 - C6921) * C50824) *
                C17275 +
            ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                 C33763 +
             (C12517 + C12518 - C12519 - C12520) * C50824) *
                C17276) *
               C1687 +
           (((C6912 - (C6911 + C6910) + C6913) * C33763 +
             (C6916 - (C6915 + C6914) + C6917) * C50824) *
                C17274 +
            ((C6920 - (C6919 + C6918) + C6921) * C33763 +
             (C6924 - (C6923 + C6922) + C6925) * C50824) *
                C17275 +
            ((C12519 - (C12518 + C12517) + C12520) * C33763 +
             (C13411 - (C13412 + C13413) + C13414) * C50824) *
                C17276) *
               C50727) *
              C50889 +
          ((((C350 * C49713 -
              ((C117 * C296 + C50744 * C315) * C50874 +
               (C117 * C286 + C50744 * C297) * C49720) +
              C351 * C50610) *
                 C33763 +
             (C6926 - (C6927 + C6928) + C6929) * C50824) *
                C17274 +
            ((C352 * C49713 - (C351 * C50874 + C350 * C49720) + C353 * C50610) *
                 C33763 +
             (C6934 - (C6935 + C6936) + C6937) * C50824) *
                C17275 +
            ((C354 * C49713 - (C353 * C50874 + C352 * C49720) + C355 * C50610) *
                 C33763 +
             (C12521 - (C12522 + C12523) + C12524) * C50824) *
                C17276) *
               C1687 +
           (((C6928 + C6927 - C6926 - C6929) * C33763 +
             (C6932 + C6931 - C6930 - C6933) * C50824) *
                C17274 +
            ((C6936 + C6935 - C6934 - C6937) * C33763 +
             (C6940 + C6939 - C6938 - C6941) * C50824) *
                C17275 +
            ((C12523 + C12522 - C12521 - C12524) * C33763 +
             (C5734 * C49720 + C5735 * C50874 -
              (C117 * C1224 + C50744 * C1229) * C49713 -
              (C117 * C1228 + C50744 * C1236) * C50610) *
                 C50824) *
                C17276) *
               C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C49720 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50874 -
             (C2345 + C2346 + C2347) * C49713 -
             (C2348 + C2349 + C2350) * C50610) *
                C33763 +
            ((C36710 + C36711 + C36712) * C49720 +
             (C36713 + C36714 + C36715) * C50874 -
             (C2741 + C2740 + C2739) * C49713 -
             (C2744 + C2743 + C2742) * C50610) *
                C50824) *
               C50626 * C1687 +
           (((C2739 + C2740 + C2741) * C49713 -
             ((C36715 + C36714 + C36713) * C50874 +
              (C36712 + C36711 + C36710) * C49720) +
             (C2742 + C2743 + C2744) * C50610) *
                C33763 +
            ((C2747 + C2746 + C2745) * C49713 -
             ((C36716 + C36717 + C36718) * C50874 +
              (C36719 + C36720 + C36721) * C49720) +
             (C2750 + C2749 + C2748) * C50610) *
                C50824) *
               C50626 * C50727) *
              C50889 +
          ((((C2545 + C2546 + C2547) * C49713 -
             ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
               C2305 * C296 + C2300 * C315) *
                  C50874 +
              (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
               C2305 * C286 + C2300 * C297) *
                  C49720) +
             (C2548 + C2549 + C2550) * C50610) *
                C33763 +
            ((C3299 + C3298 + C3297) * C49713 -
             ((C37220 + C37221 + C37222) * C50874 +
              (C37223 + C37224 + C37225) * C49720) +
             (C3302 + C3301 + C3300) * C50610) *
                C50824) *
               C50626 * C1687 +
           (((C37225 + C37224 + C37223) * C49720 +
             (C37222 + C37221 + C37220) * C50874 -
             (C3297 + C3298 + C3299) * C49713 -
             (C3300 + C3301 + C3302) * C50610) *
                C33763 +
            ((C37628 + C37629 + C37630) * C49720 +
             (C37631 + C37632 + C37633) * C50874 -
             (C2307 * C3700 + C2302 * C3703 + C2306 * C2703 + C2301 * C2707 +
              C2305 * C1226 + C2300 * C1233) *
                 C49713 -
             (C2307 * C3702 + C2302 * C3706 + C2306 * C2708 + C2301 * C2712 +
              C2305 * C1232 + C2300 * C1238) *
                 C50610) *
                C50824) *
               C50626 * C50727) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C50936 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C50937 +
           ((C6562 * C33763 + (C6547 + C6546) * C50824) * C17274 +
            (C6563 * C33763 + (C6545 + C6544) * C50824) * C17275 +
            ((C12172 + C12171) * C33763 + (C13069 + C13070) * C50824) *
                C17276) *
               C2103) *
              C50889 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C50937 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C50936 -
           ((((C117 * C6101 + C50744 * C6102) * C50605 +
              (C117 * C6099 + C50744 * C6100) * C1109) *
                 C50824 +
             (C12176 + C12175) * C33763) *
                C17276 +
            ((C6561 + C6560) * C50824 + C6566 * C33763) * C17275 +
            ((C6569 + C6568) * C50824 + C6567 * C33763) * C17274) *
               C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C50936 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C50937 +
           (((C36721 + C36720 + C36719) * C1109 +
             (C36718 + C36717 + C36716) * C50605) *
                C33763 +
            ((C38540 + C38541 + C38542) * C1109 +
             (C38543 + C38544 + C38545) * C50605) *
                C50824) *
               C50626 * C2103) *
              C50889 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C50937 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C50936 -
           (((C2307 * C21469 + C2302 * C21471 + C2306 * C4600 + C2301 * C4606 +
              C2305 * C4601 + C2300 * C4607) *
                 C50605 +
             (C2307 * C21468 + C2302 * C21470 + C2306 * C4594 + C2301 * C4602 +
              C2305 * C4595 + C2300 * C4603) *
                 C1109) *
                C50824 +
            ((C37633 + C37632 + C37631) * C50605 +
             (C37630 + C37629 + C37628) * C1109) *
                C33763) *
               C50626 * C2103) *
              C50701)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C1687 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C50727 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C33763 +
             (C7104 + C7105) * C50824) *
                C17274 +
            ((C356 * C1109 + C357 * C50605) * C33763 +
             (C7096 + C7097) * C50824) *
                C17275 +
            ((C358 * C1109 + C359 * C50605) * C33763 +
             (C12671 + C12672) * C50824) *
                C17276) *
               C1687 -
           ((((C117 * C2710 + C50744 * C2713) * C50605 +
              (C117 * C2704 + C50744 * C2709) * C1109) *
                 C50824 +
             (C12672 + C12671) * C33763) *
                C17276 +
            ((C7099 + C7098) * C50824 + (C7097 + C7096) * C33763) * C17275 +
            ((C7107 + C7106) * C50824 + (C7105 + C7104) * C33763) * C17274) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C33763 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C17274 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C33763 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C17275 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C33763 +
            (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) * C50824) *
               C17276) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C33763 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C50824) *
               C17274 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C33763 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C50824) *
               C17275 +
           ((C12821 - (C12820 + C12819) + C12822 - C12823 - C12824) * C33763 +
            (C537 * C1036 - (C536 * C1030 + C535 * C1035) + C538 * C1031 -
             (C117 * C471 + C50744 * C490) * C1037 -
             (C117 * C491 + C50744 * C501) * C1032) *
                C50824) *
               C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1109 +
             (C117 * C130 + C50744 * C143) * C50605) *
                C33763 +
            (C6536 + C6537) * C50824) *
               C17274 +
           ((C171 * C1109 + C172 * C50605) * C33763 +
            (C6540 + C6541) * C50824) *
               C17275 +
           ((C173 * C1109 + C174 * C50605) * C33763 +
            (C12169 + C12170) * C50824) *
               C17276) *
              C1853 -
          (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
           ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
           ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
              C1854 +
          ((C6562 * C33763 + (C6547 + C6546) * C50824) * C17274 +
           (C6563 * C33763 + (C6545 + C6544) * C50824) * C17275 +
           ((C12172 + C12171) * C33763 + (C13069 + C13070) * C50824) * C17276) *
              C1855 -
          ((((C117 * C5513 + C50744 * C5516) * C50605 +
             (C117 * C5507 + C50744 * C5512) * C1109) *
                C50824 +
            (C13070 + C13069) * C33763) *
               C17276 +
           ((C7537 + C7536) * C50824 + C7530 * C33763) * C17275 +
           ((C7541 + C7540) * C50824 + C7531 * C33763) * C17274) *
              C1856) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1035 +
            (C36713 + C36714 + C36715) * C1030 -
            (C2741 + C2740 + C2739) * C1036 - (C2744 + C2743 + C2742) * C1031 +
            (C3075 + C3074 + C3073) * C1037 + (C3078 + C3077 + C3076) * C1032) *
               C50824) *
              C50626 * C1687 +
          (((C2739 + C2740 + C2741) * C1036 -
            ((C36715 + C36714 + C36713) * C1030 +
             (C36712 + C36711 + C36710) * C1035) +
            (C2742 + C2743 + C2744) * C1031 - (C3073 + C3074 + C3075) * C1037 -
            (C3076 + C3077 + C3078) * C1032) *
               C33763 +
           ((C2747 + C2746 + C2745) * C1036 -
            ((C36716 + C36717 + C36718) * C1030 +
             (C36719 + C36720 + C36721) * C1035) +
            (C2750 + C2749 + C2748) * C1031 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C1037 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C1032) *
               C50824) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C1687 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C50727) *
              C280 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C50727 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C1687) *
              C281 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C33763 +
            ((C38132 + C38133 + C38134) * C1109 +
             (C38135 + C38136 + C38137) * C50605) *
                C50824) *
               C50626 * C1687 -
           (((C2307 * C20873 + C2302 * C20875 + C2306 * C3704 + C2301 * C3707 +
              C2305 * C2706 + C2300 * C2711) *
                 C50605 +
             (C2307 * C20872 + C2302 * C20874 + C2306 * C3701 + C2301 * C3705 +
              C2305 * C2702 + C2300 * C2705) *
                 C1109) *
                C50824 +
            ((C38137 + C38136 + C38135) * C50605 +
             (C38134 + C38133 + C38132) * C1109) *
                C33763) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1109 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50605) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1109 +
            (C36713 + C36714 + C36715) * C50605) *
               C50824) *
              C50626 * C1853 -
          (((C36716 + C36717 + C36718) * C50605 +
            (C36719 + C36720 + C36721) * C1109) *
               C50824 +
           ((C36715 + C36714 + C36713) * C50605 +
            (C36712 + C36711 + C36710) * C1109) *
               C33763) *
              C50626 * C1854 +
          (((C36721 + C36720 + C36719) * C1109 +
            (C36718 + C36717 + C36716) * C50605) *
               C33763 +
           ((C38540 + C38541 + C38542) * C1109 +
            (C38543 + C38544 + C38545) * C50605) *
               C50824) *
              C50626 * C1855 -
          (((C2307 * C23160 + C2302 * C23162 + C2306 * C6531 + C2301 * C6534 +
             C2305 * C5509 + C2300 * C5514) *
                C50605 +
            (C2307 * C23159 + C2302 * C23161 + C2306 * C6528 + C2301 * C6532 +
             C2305 * C5505 + C2300 * C5508) *
                C1109) *
               C50824 +
           ((C38545 + C38544 + C38543) * C50605 +
            (C38542 + C38541 + C38540) * C1109) *
               C33763) *
              C50626 * C1856) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C49720 +
             (C117 * C130 + C50744 * C143) * C50874 - C171 * C49713 -
             C172 * C50610) *
                C33763 +
            (C6910 + C6911 - C6912 - C6913) * C50824) *
               C17274 +
           ((C171 * C49720 + C172 * C50874 - C173 * C49713 - C174 * C50610) *
                C33763 +
            (C6918 + C6919 - C6920 - C6921) * C50824) *
               C17275 +
           ((C173 * C49720 + C174 * C50874 - C175 * C49713 - C176 * C50610) *
                C33763 +
            (C12517 + C12518 - C12519 - C12520) * C50824) *
               C17276) *
              C50936 +
          (((C6912 - (C6911 + C6910) + C6913) * C33763 +
            (C6916 - (C6915 + C6914) + C6917) * C50824) *
               C17274 +
           ((C6920 - (C6919 + C6918) + C6921) * C33763 +
            (C6924 - (C6923 + C6922) + C6925) * C50824) *
               C17275 +
           ((C12519 - (C12518 + C12517) + C12520) * C33763 +
            (C13411 - (C13412 + C13413) + C13414) * C50824) *
               C17276) *
              C50937 +
          ((C7894 * C33763 + (C7886 + C7885 - C7884 - C7887) * C50824) *
               C17274 +
           (C7895 * C33763 + (C7890 + C7889 - C7888 - C7891) * C50824) *
               C17275 +
           ((C13413 + C13412 - C13411 - C13414) * C33763 +
            (C5563 * C49720 + C5564 * C50874 -
             (C117 * C1857 + C50744 * C1862) * C49713 -
             (C117 * C1861 + C50744 * C1869) * C50610) *
                C50824) *
               C17276) *
              C2103) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C49720 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C50874 -
            (C2345 + C2346 + C2347) * C49713 -
            (C2348 + C2349 + C2350) * C50610) *
               C33763 +
           ((C36710 + C36711 + C36712) * C49720 +
            (C36713 + C36714 + C36715) * C50874 -
            (C2741 + C2740 + C2739) * C49713 -
            (C2744 + C2743 + C2742) * C50610) *
               C50824) *
              C50626 * C50936 +
          (((C2739 + C2740 + C2741) * C49713 -
            ((C36715 + C36714 + C36713) * C50874 +
             (C36712 + C36711 + C36710) * C49720) +
            (C2742 + C2743 + C2744) * C50610) *
               C33763 +
           ((C2747 + C2746 + C2745) * C49713 -
            ((C36716 + C36717 + C36718) * C50874 +
             (C36719 + C36720 + C36721) * C49720) +
            (C2750 + C2749 + C2748) * C50610) *
               C50824) *
              C50626 * C50937 +
          (((C36721 + C36720 + C36719) * C49720 +
            (C36718 + C36717 + C36716) * C50874 -
            (C2745 + C2746 + C2747) * C49713 -
            (C2748 + C2749 + C2750) * C50610) *
               C33763 +
           ((C38540 + C38541 + C38542) * C49720 +
            (C38543 + C38544 + C38545) * C50874 -
            (C2307 * C4592 + C2302 * C4598 + C2306 * C4593 + C2301 * C4599 +
             C2305 * C1859 + C2300 * C1866) *
                C49713 -
            (C2307 * C4596 + C2302 * C4604 + C2306 * C4597 + C2301 * C4605 +
             C2305 * C1865 + C2300 * C1871) *
                C50610) *
               C50824) *
              C50626 * C2103) *
         C50651) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50744 * C129) * C1035 +
             (C117 * C130 + C50744 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C33763 +
            (C7254 + C7255 - C7256 - C7257 + C7258 + C7259) * C50824) *
               C17274 +
           ((C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C33763 +
            (C7266 + C7267 - C7268 - C7269 + C7270 + C7271) * C50824) *
               C17275 +
           ((C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C33763 +
            (C12819 + C12820 - C12821 - C12822 + C12823 + C12824) * C50824) *
               C17276) *
              C1687 +
          (((C7256 - (C7255 + C7254) + C7257 - C7258 - C7259) * C33763 +
            (C7262 - (C7261 + C7260) + C7263 - C7264 - C7265) * C50824) *
               C17274 +
           ((C7268 - (C7267 + C7266) + C7269 - C7270 - C7271) * C33763 +
            (C7274 - (C7273 + C7272) + C7275 - C7276 - C7277) * C50824) *
               C17275 +
           ((C12821 - (C12820 + C12819) + C12822 - C12823 - C12824) * C33763 +
            (C537 * C1036 - (C536 * C1030 + C535 * C1035) + C538 * C1031 -
             (C117 * C471 + C50744 * C490) * C1037 -
             (C117 * C491 + C50744 * C501) * C1032) *
                C50824) *
               C17276) *
              C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50744 * C129) * C1109 +
              (C117 * C130 + C50744 * C143) * C50605) *
                 C33763 +
             (C6536 + C6537) * C50824) *
                C17274 +
            ((C171 * C1109 + C172 * C50605) * C33763 +
             (C6540 + C6541) * C50824) *
                C17275 +
            ((C173 * C1109 + C174 * C50605) * C33763 +
             (C12169 + C12170) * C50824) *
                C17276) *
               C1687 -
           (((C12171 + C12172) * C50824 + (C12170 + C12169) * C33763) * C17276 +
            ((C6543 + C6542) * C50824 + (C6541 + C6540) * C33763) * C17275 +
            ((C6539 + C6538) * C50824 + (C6537 + C6536) * C33763) * C17274) *
               C50727) *
              C280 +
          ((((C6548 + C6549) * C33763 + (C6550 + C6551) * C50824) * C17274 +
            ((C6556 + C6557) * C33763 + (C6558 + C6559) * C50824) * C17275 +
            ((C12173 + C12174) * C33763 + (C12175 + C12176) * C50824) *
                C17276) *
               C50727 -
           (((C12174 + C12173) * C50824 +
             (C353 * C50605 + C352 * C1109) * C33763) *
                C17276 +
            ((C6557 + C6556) * C50824 +
             (C351 * C50605 + C350 * C1109) * C33763) *
                C17275 +
            ((C6549 + C6548) * C50824 +
             ((C117 * C296 + C50744 * C315) * C50605 +
              (C117 * C286 + C50744 * C297) * C1109) *
                 C33763) *
                C17274) *
               C1687) *
              C281 +
          (((((C117 * C290 + C50744 * C305) * C1109 +
              (C117 * C306 + C50744 * C320) * C50605) *
                 C33763 +
             (C7104 + C7105) * C50824) *
                C17274 +
            ((C356 * C1109 + C357 * C50605) * C33763 +
             (C7096 + C7097) * C50824) *
                C17275 +
            ((C358 * C1109 + C359 * C50605) * C33763 +
             (C12671 + C12672) * C50824) *
                C17276) *
               C1687 -
           ((((C117 * C2710 + C50744 * C2713) * C50605 +
              (C117 * C2704 + C50744 * C2709) * C1109) *
                 C50824 +
             (C12672 + C12671) * C33763) *
                C17276 +
            ((C7099 + C7098) * C50824 + (C7097 + C7096) * C33763) * C17275 +
            ((C7107 + C7106) * C50824 + (C7105 + C7104) * C33763) * C17274) *
               C50727) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
             C2307 * C290 + C2302 * C305) *
                C1035 +
            (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
             C2307 * C306 + C2302 * C320) *
                C1030 -
            (C2345 + C2346 + C2347) * C1036 - (C2348 + C2349 + C2350) * C1031 +
            (C2351 + C2352 + C2353) * C1037 + (C2354 + C2355 + C2356) * C1032) *
               C33763 +
           ((C36710 + C36711 + C36712) * C1035 +
            (C36713 + C36714 + C36715) * C1030 -
            (C2741 + C2740 + C2739) * C1036 - (C2744 + C2743 + C2742) * C1031 +
            (C3075 + C3074 + C3073) * C1037 + (C3078 + C3077 + C3076) * C1032) *
               C50824) *
              C50626 * C1687 +
          (((C2739 + C2740 + C2741) * C1036 -
            ((C36715 + C36714 + C36713) * C1030 +
             (C36712 + C36711 + C36710) * C1035) +
            (C2742 + C2743 + C2744) * C1031 - (C3073 + C3074 + C3075) * C1037 -
            (C3076 + C3077 + C3078) * C1032) *
               C33763 +
           ((C2747 + C2746 + C2745) * C1036 -
            ((C36716 + C36717 + C36718) * C1030 +
             (C36719 + C36720 + C36721) * C1035) +
            (C2750 + C2749 + C2748) * C1031 -
            (C2307 * C2704 + C2302 * C2709 + C2306 * C1225 + C2301 * C1231 +
             C2305 * C469 + C2300 * C486) *
                C1037 -
            (C2307 * C2710 + C2302 * C2713 + C2306 * C1230 + C2301 * C1237 +
             C2305 * C487 + C2300 * C499) *
                C1032) *
               C50824) *
              C50626 * C50727) *
         C50651) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C2300 * C129 + C2306 * C286 + C2301 * C297 +
              C2307 * C290 + C2302 * C305) *
                 C1109 +
             (C2305 * C130 + C2300 * C143 + C2306 * C296 + C2301 * C315 +
              C2307 * C306 + C2302 * C320) *
                 C50605) *
                C33763 +
            ((C36710 + C36711 + C36712) * C1109 +
             (C36713 + C36714 + C36715) * C50605) *
                C50824) *
               C50626 * C1687 -
           (((C36716 + C36717 + C36718) * C50605 +
             (C36719 + C36720 + C36721) * C1109) *
                C50824 +
            ((C36715 + C36714 + C36713) * C50605 +
             (C36712 + C36711 + C36710) * C1109) *
                C33763) *
               C50626 * C50727) *
              C280 +
          ((((C37225 + C37224 + C37223) * C1109 +
             (C37222 + C37221 + C37220) * C50605) *
                C33763 +
            ((C37628 + C37629 + C37630) * C1109 +
             (C37631 + C37632 + C37633) * C50605) *
                C50824) *
               C50626 * C50727 -
           (((C37220 + C37221 + C37222) * C50605 +
             (C37223 + C37224 + C37225) * C1109) *
                C50824 +
            ((C2307 * C1120 + C2302 * C1125 + C2306 * C306 + C2301 * C320 +
              C2305 * C296 + C2300 * C315) *
                 C50605 +
             (C2307 * C1113 + C2302 * C1121 + C2306 * C290 + C2301 * C305 +
              C2305 * C286 + C2300 * C297) *
                 C1109) *
                C33763) *
               C50626 * C1687) *
              C281 +
          ((((C2305 * C290 + C2300 * C305 + C2306 * C1113 + C2301 * C1121 +
              C2307 * C2508 + C2302 * C2511) *
                 C1109 +
             (C2305 * C306 + C2300 * C320 + C2306 * C1120 + C2301 * C1125 +
              C2307 * C2512 + C2302 * C2517) *
                 C50605) *
                C33763 +
            ((C38132 + C38133 + C38134) * C1109 +
             (C38135 + C38136 + C38137) * C50605) *
                C50824) *
               C50626 * C1687 -
           (((C2307 * C20873 + C2302 * C20875 + C2306 * C3704 + C2301 * C3707 +
              C2305 * C2706 + C2300 * C2711) *
                 C50605 +
             (C2307 * C20872 + C2302 * C20874 + C2306 * C3701 + C2301 * C3705 +
              C2305 * C2702 + C2300 * C2705) *
                 C1109) *
                C50824 +
            ((C38137 + C38136 + C38135) * C50605 +
             (C38134 + C38133 + C38132) * C1109) *
                C33763) *
               C50626 * C50727) *
              C282)) /
            (p * q * std::sqrt(p + q));
}
