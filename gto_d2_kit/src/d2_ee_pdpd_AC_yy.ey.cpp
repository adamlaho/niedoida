/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AC_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_13_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49937 = ce * de;
    const double C49936 = ce + de;
    const double C49935 = 0 * de;
    const double C49934 = yC - yD;
    const double C49965 = 0 * ce;
    const double C49960 = 0 * de;
    const double C50003 = ae * be;
    const double C50002 = ae + be;
    const double C50001 = 0 * be;
    const double C50000 = yA - yB;
    const double C50031 = 0 * ae;
    const double C50026 = 0 * be;
    const double C50062 = p + q;
    const double C50061 = p * q;
    const double C50070 = ae * ce;
    const double C50069 = yP - yQ;
    const double C50067 = bs[3];
    const double C50076 = bs[4];
    const double C50074 = xP - xQ;
    const double C50085 = bs[5];
    const double C50094 = bs[6];
    const double C50109 = bs[7];
    const double C50127 = bs[2];
    const double C50232 = zP - zQ;
    const double C119 = bs[0];
    const double C50965 = xA - xB;
    const double C50984 = xC - xD;
    const double C51020 = zC - zD;
    const double C51117 = zA - zB;
    const double C49938 = std::pow(C49936, 2);
    const double C49961 = 2 * C49936;
    const double C49939 = C49937 * C49934;
    const double C49962 = C49934 * C49935;
    const double C51005 = std::pow(C49934, 2);
    const double C51057 = C49934 * de;
    const double C51056 = C49934 * ce;
    const double C49970 = C49965 / C49936;
    const double C50004 = std::pow(C50002, 2);
    const double C50027 = 2 * C50002;
    const double C50078 = C49936 * C50002;
    const double C50005 = C50003 * C50000;
    const double C50028 = C50000 * C50001;
    const double C51102 = std::pow(C50000, 2);
    const double C51154 = C50000 * be;
    const double C51153 = C50000 * ae;
    const double C50036 = C50031 / C50002;
    const double C50063 = 2 * C50061;
    const double C50072 = std::pow(C50069, 2);
    const double C50131 = C50069 * ae;
    const double C50129 = C50069 * ce;
    const double C50087 = std::pow(C50074, 2);
    const double C50272 = std::pow(C50232, 2);
    const double C50968 = C50965 * be;
    const double C50967 = C50965 * ae;
    const double C50966 = std::pow(C50965, 2);
    const double C50987 = C50984 * de;
    const double C50986 = C50984 * ce;
    const double C50985 = std::pow(C50984, 2);
    const double C51021 = std::pow(C51020, 2);
    const double C51085 = C51020 * de;
    const double C51084 = C51020 * ce;
    const double C51118 = std::pow(C51117, 2);
    const double C51182 = C51117 * be;
    const double C51181 = C51117 * ae;
    const double C49940 = 2 * C49938;
    const double C51247 = 4 * C49938;
    const double C50995 = std::pow(C49961, -1);
    const double C51249 = std::pow(C49961, -2);
    const double C49967 = C49962 / C49936;
    const double C51006 = C51005 * C49937;
    const double C50006 = 2 * C50004;
    const double C51240 = 4 * C50004;
    const double C50976 = std::pow(C50027, -1);
    const double C51262 = std::pow(C50027, -2);
    const double C50033 = C50028 / C50002;
    const double C51103 = C51102 * C50003;
    const double C50065 = C50063 / C50062;
    const double C140 =
        (-((std::pow(yP - yQ, 2) * bs[2] * std::pow(C50063 / C50062, 2) -
            (bs[1] * C50063) / C50062) *
           ae * ce) /
         C49936) /
        C50002;
    const double C120 = -(C50074 * bs[1] * C50063) / C50062;
    const double C301 = -(C50069 * bs[1] * C50063) / C50062;
    const double C500 = -(C50232 * bs[1] * C50063) / C50062;
    const double C50079 = C50072 * C50076;
    const double C50088 = C50072 * C50085;
    const double C50097 = C50072 * C50094;
    const double C50113 = C50072 * C50109;
    const double C50133 = C50067 * C50131;
    const double C50140 = C50076 * C50131;
    const double C50149 = C50085 * C50131;
    const double C50164 = C50094 * C50131;
    const double C50193 = C50109 * C50131;
    const double C126 = (-(bs[1] * C50131 * C50063) / C50062) / C50002;
    const double C50132 = C50067 * C50129;
    const double C50138 = C50076 * C50129;
    const double C50147 = C50085 * C50129;
    const double C50160 = C50094 * C50129;
    const double C50187 = C50109 * C50129;
    const double C127 = (bs[1] * C50129 * C50063) / (C50062 * C49936);
    const double C50969 = C50966 * C50003;
    const double C50988 = C50985 * C49937;
    const double C51022 = C51021 * C49937;
    const double C51119 = C51118 * C50003;
    const double C49964 = C49935 / C49940;
    const double C49968 = C49960 / C49940;
    const double C49971 = 0 - C49967;
    const double C51007 = C51006 / C49936;
    const double C50030 = C50001 / C50006;
    const double C50034 = C50026 / C50006;
    const double C50037 = 0 - C50033;
    const double C51104 = C51103 / C50002;
    const double C50068 = -C50065;
    const double C50077 = std::pow(C50065, 4);
    const double C50095 = std::pow(C50065, 6);
    const double C50126 = std::pow(C50065, 2);
    const double C141 =
        (-((xP - xQ) *
           (bs[2] * std::pow(C50065, 2) +
            std::pow(yP - yQ, 2) * bs[3] * std::pow(-C50065, 3)) *
           ae * ce) /
         C49936) /
        C50002;
    const double C50970 = C50969 / C50002;
    const double C50989 = C50988 / C49936;
    const double C51023 = C51022 / C49936;
    const double C51120 = C51119 / C50002;
    const double C49974 = C49971 * ce;
    const double C51008 = -C51007;
    const double C50040 = C50037 * ae;
    const double C51105 = -C51104;
    const double C50071 = std::pow(C50068, 3);
    const double C50086 = std::pow(C50068, 5);
    const double C50110 = std::pow(C50068, 7);
    const double C50080 = C50079 * C50077;
    const double C50084 = C50076 * C50077;
    const double C50142 = C50077 * C50140;
    const double C50141 = C50077 * C50138;
    const double C50098 = C50097 * C50095;
    const double C50108 = C50094 * C50095;
    const double C50170 = C50095 * C50164;
    const double C50166 = C50095 * C50160;
    const double C50130 = C50127 * C50126;
    const double C128 = (C50074 * C50126 * C50127 * C50131) / C50002;
    const double C129 = -(C50074 * C50126 * C50127 * C50129) / C49936;
    const double C311 = (C50069 * C50126 * C50127 * C50131) / C50002 -
                        (ae * bs[1] * C50063) / (C50062 * C50002);
    const double C312 = (ce * bs[1] * C50063) / (C50062 * C49936) -
                        (C50069 * C50126 * C50127 * C50129) / C49936;
    const double C514 = -(C50232 * C50126 * C50127 * C50129) / C49936;
    const double C515 = (C50232 * C50126 * C50127 * C50131) / C50002;
    const double C50971 = -C50970;
    const double C50990 = -C50989;
    const double C51024 = -C51023;
    const double C51121 = -C51120;
    const double C49976 = C49974 / C49936;
    const double C51009 = std::exp(C51008);
    const double C50042 = C50040 / C50002;
    const double C51106 = std::exp(C51105);
    const double C50075 = C50067 * C50071;
    const double C50135 = C50071 * C50133;
    const double C50134 = C50071 * C50132;
    const double C142 =
        (-((C50067 * C50071 + C50072 * bs[4] * std::pow(C50065, 4)) * C50070 *
           std::pow(xP - xQ, 2)) /
         C49936) /
            C50002 -
        ((bs[2] * std::pow(C50065, 2) + C50072 * C50067 * C50071) * C50070) /
            (C49936 * C50002);
    const double C331 =
        (-(C50126 * C50127 * C50069 * ae * ce) / C49936) / C50002 -
        (ae * C50126 * C50127 * C50069 * ce) / C50078 -
        (C50069 * (C50127 * C50126 + C50072 * C50067 * C50071) * C50070) /
            C50078;
    const double C50089 = C50088 * C50086;
    const double C50093 = C50085 * C50086;
    const double C50152 = C50086 * C50149;
    const double C50150 = C50086 * C50147;
    const double C50115 = C50113 * C50110;
    const double C50200 = C50110 * C50193;
    const double C50196 = C50110 * C50187;
    const double C50148 = C50084 * C50087;
    const double C50161 = C50074 * C50084;
    const double C50293 = C50084 * ae;
    const double C50291 = C50084 * C50072;
    const double C50290 = C50069 * C50084;
    const double C50289 = C50084 * ce;
    const double C50940 = C50084 * C50272;
    const double C50951 = C50232 * C50084;
    const double C50144 = C50074 * C50142;
    const double C50241 = C50069 * C50142;
    const double C50285 = C50142 * ce;
    const double C50143 = C50074 * C50141;
    const double C50238 = C50069 * C50141;
    const double C50286 = ae * C50141;
    const double C50190 = C50108 * C50087;
    const double C50439 = C50074 * C50108;
    const double C50561 = C50108 * ae;
    const double C50555 = C50108 * C50072;
    const double C50554 = C50069 * C50108;
    const double C50553 = C50108 * ce;
    const double C50174 = C50170 * C50087;
    const double C50192 = C50074 * C50170;
    const double C50389 = C50069 * C50170;
    const double C50547 = C50170 * ce;
    const double C50620 = C50170 * C50272;
    const double C50642 = C50232 * C50170;
    const double C50172 = C50166 * C50087;
    const double C50186 = C50074 * C50166;
    const double C50383 = C50069 * C50166;
    const double C50548 = ae * C50166;
    const double C50621 = C50166 * C50272;
    const double C50643 = C50232 * C50166;
    const double C530 =
        (-((zP - zQ) * (C50130 + C50072 * C50067 * C50071) * C50070) / C49936) /
        C50002;
    const double C121 = C50130 * C50087 - (bs[1] * C50063) / C50062;
    const double C302 = C50130 * C50072 - (bs[1] * C50063) / C50062;
    const double C303 = C50069 * C50074 * C50130;
    const double C496 = C50232 * C50074 * C50130;
    const double C501 = C50130 * C50272 - (bs[1] * C50063) / C50062;
    const double C969 = C50232 * C50069 * C50130;
    const double C50972 = std::exp(C50971);
    const double C50991 = std::exp(C50990);
    const double C51025 = std::exp(C51024);
    const double C51122 = std::exp(C51121);
    const double C49978 = C49976 - C49968;
    const double C49941 = C49939 * C51009;
    const double C118 = -(2 * ce * de * (yC - yD) * C51009) / (ce + de);
    const double C51058 = C51009 * C51056;
    const double C51061 = C50995 * C51009;
    const double C51253 = C51009 * C51057;
    const double C51248 = C51009 / C49961;
    const double C295 = C51249 * C51009;
    const double C50044 = C50042 - C50034;
    const double C151 = C51106 * C141;
    const double C149 = C51106 * C128;
    const double C5675 = C51106 * C515;
    const double C50007 = C50005 * C51106;
    const double C117 = -(2 * ae * be * (yA - yB) * C51106) / (ae + be);
    const double C51155 = C51106 * C51153;
    const double C51158 = C50976 * C51106;
    const double C51266 = C51106 * C51154;
    const double C51261 = C51106 / C50027;
    const double C2446 = C51262 * C51106;
    const double C50081 = C50075 + C50080;
    const double C50139 = C50074 * C50075;
    const double C50242 = C50075 * ae;
    const double C50240 = C50069 * C50075;
    const double C50239 = C50075 * ce;
    const double C122 =
        2 * C50074 * C50130 + C50074 * (C50130 + C50075 * C50087);
    const double C305 = C50069 * (C50130 + C50075 * C50087);
    const double C497 = C50232 * (C50130 + C50075 * C50087);
    const double C1223 =
        2 * C50069 * C50130 + C50069 * (C50130 + C50075 * C50072);
    const double C1717 = C50232 * (C50130 + C50075 * C50072);
    const double C2004 =
        2 * C50232 * C50130 + C50232 * (C50130 + C50075 * C50272);
    const double C5661 =
        3 * (C50130 + C50075 * C50272) +
        C50232 * (2 * C50232 * C50075 + C50232 * (C50075 + C50084 * C50272));
    const double C130 = (C50126 * C50127 * C50131 + C50135 * C50087) / C50002;
    const double C132 =
        (2 * C50074 * C50135 + C50074 * (C50135 + C50142 * C50087)) / C50002;
    const double C313 =
        (C50126 * C50127 * C50131 + C50069 * (C50069 * C50135 + C50130 * ae) +
         C50069 * C50130 * ae) /
        C50002;
    const double C315 =
        (C50069 * C50074 * C50135 + C50074 * C50130 * ae) / C50002;
    const double C319 = (C50069 * (C50135 + C50142 * C50087) +
                         (C50130 + C50075 * C50087) * ae) /
                        C50002;
    const double C506 = (C50232 * C50074 * C50135) / C50002;
    const double C508 = (C50232 * (C50135 + C50142 * C50087)) / C50002;
    const double C516 = (C50126 * C50127 * C50131 + C50135 * C50272) / C50002;
    const double C974 = (C50232 * (C50069 * C50135 + C50130 * ae)) / C50002;
    const double C2012 =
        (2 * C50232 * C50135 + C50232 * (C50135 + C50142 * C50272)) / C50002;
    const double C131 = -(C50134 * C50087 + C50126 * C50127 * C50129) / C49936;
    const double C133 = (-2 * C50074 * C50134) / C49936 -
                        (C50074 * (C50141 * C50087 + C50134)) / C49936;
    const double C314 = -(C50069 * (C50069 * C50134 + C50130 * ce) +
                          C50126 * C50127 * C50129 + C50069 * C50130 * ce) /
                        C49936;
    const double C316 =
        -(C50069 * C50074 * C50134 + C50074 * C50130 * ce) / C49936;
    const double C320 = -(C50069 * (C50141 * C50087 + C50134) +
                          (C50130 + C50075 * C50087) * ce) /
                        C49936;
    const double C507 = -(C50232 * C50074 * C50134) / C49936;
    const double C509 = -(C50232 * (C50141 * C50087 + C50134)) / C49936;
    const double C517 = -(C50134 * C50272 + C50126 * C50127 * C50129) / C49936;
    const double C975 = -(C50232 * (C50069 * C50134 + C50130 * ce)) / C49936;
    const double C2011 = (-2 * C50232 * C50134) / C49936 -
                         (C50232 * (C50141 * C50272 + C50134)) / C49936;
    const double C155 = C51106 * C142;
    const double C50090 = C50084 + C50089;
    const double C50099 = C50093 + C50098;
    const double C50162 = C50093 * C50087;
    const double C50189 = C50074 * C50093;
    const double C50390 = C50093 * ae;
    const double C50386 = C50093 * C50072;
    const double C50385 = C50069 * C50093;
    const double C50384 = C50093 * ce;
    const double C50952 = C50093 * C50272;
    const double C50154 = C50152 * C50087;
    const double C50163 = C50074 * C50152;
    const double C50292 = C50069 * C50152;
    const double C50379 = C50152 * ce;
    const double C50502 = C50232 * C50152;
    const double C50833 = C50152 * C50272;
    const double C5664 =
        (3 * (C50135 + C50142 * C50272) +
         C50232 * (2 * C50232 * C50142 + C50232 * (C50142 + C50152 * C50272))) /
        C50002;
    const double C50153 = C50150 * C50087;
    const double C50159 = C50074 * C50150;
    const double C50288 = C50069 * C50150;
    const double C50380 = ae * C50150;
    const double C50503 = C50232 * C50150;
    const double C50830 = C50150 * C50272;
    const double C5665 =
        (-3 * (C50141 * C50272 + C50134)) / C49936 +
        C50232 * ((-2 * C50232 * C50141) / C49936 -
                  (C50232 * (C50150 * C50272 + C50141)) / C49936);
    const double C50116 = C50108 + C50115;
    const double C50204 = C50200 * C50087;
    const double C50442 = C50074 * C50200;
    const double C50560 = C50069 * C50200;
    const double C50202 = C50196 * C50087;
    const double C50438 = C50074 * C50196;
    const double C50552 = C50069 * C50196;
    const double C50151 = C50075 + C50148;
    const double C50167 = 2 * C50161;
    const double C50251 = C50161 * ae;
    const double C50249 = C50069 * C50161;
    const double C50248 = C50161 * ce;
    const double C50299 = C50075 + C50291;
    const double C50301 = C50290 * ae;
    const double C50298 = C50290 * ce;
    const double C50387 = 2 * C50290;
    const double C50941 = C50075 + C50940;
    const double C50953 = 2 * C50951;
    const double C518 = (C50074 * C50135 + C50144 * C50272) / C50002;
    const double C50294 = C50285 / C49936;
    const double C519 = -(C50143 * C50272 + C50074 * C50134) / C49936;
    const double C50295 = C50286 / C50078;
    const double C50198 = C50093 + C50190;
    const double C50454 = C50439 * ae;
    const double C50452 = C50439 * C50072;
    const double C50451 = C50069 * C50439;
    const double C50450 = C50439 * ce;
    const double C50573 = C50093 + C50555;
    const double C50575 = C50554 * ae;
    const double C50572 = C50554 * ce;
    const double C50177 = C50152 + C50174;
    const double C50199 = 2 * C50192;
    const double C50320 = C50069 * C50192;
    const double C50434 = C50192 * ce;
    const double C50516 = C50232 * C50192;
    const double C50827 = C50192 * C50272;
    const double C50566 = C50547 / C49936;
    const double C50623 = C50152 + C50620;
    const double C50647 = C50642 * ce;
    const double C50175 = C50172 + C50150;
    const double C50195 = -2 * C50186;
    const double C50316 = C50069 * C50186;
    const double C50435 = ae * C50186;
    const double C50517 = C50232 * C50186;
    const double C50824 = C50186 * C50272;
    const double C50567 = C50548 / C50078;
    const double C50624 = C50621 + C50150;
    const double C50648 = ae * C50643;
    const double C5677 = C51106 * C530;
    const double C50973 = C50972 * C50967;
    const double C50977 = C50976 * C50972;
    const double C51237 = C50972 * C50968;
    const double C51234 = C50972 / C50027;
    const double C17452 = C51262 * C50972;
    const double C50992 = C50991 * C50986;
    const double C50996 = C50995 * C50991;
    const double C51244 = C50991 * C50987;
    const double C51241 = C50991 / C49961;
    const double C1121 = C51249 * C50991;
    const double C51086 = C51025 * C51084;
    const double C51089 = C50995 * C51025;
    const double C51257 = C51025 * C51085;
    const double C51250 = C51025 / C49961;
    const double C495 = C51249 * C51025;
    const double C51183 = C51122 * C51181;
    const double C51186 = C50976 * C51122;
    const double C51270 = C51122 * C51182;
    const double C51263 = C51122 / C50027;
    const double C5338 = C51262 * C51122;
    const double C49966 = C49941 / C49938;
    const double C49963 = 2 * C49941;
    const double C300 = ((0 * ce) / C49936 - C49941 / C49938) / (2 * C49936) +
                        (0 * ce) / C49936;
    const double C687 =
        ((C51009 - (C49934 * 2 * C49941) / C49936) * ce) / C49936 -
        C49935 / C49940;
    const double C688 = (0 * ce) / C49936 - C49941 / C49938;
    const double C1122 =
        (-C49935 / C49936) / (2 * C49936) -
        ((C51009 - (C49934 * 2 * C49941) / C49936) * de) / C49936;
    const double C1123 =
        (-(2 * C49941) / C49936) / (2 * C49936) - (0 * de) / C49936;
    const double C51255 = C51058 / C49940;
    const double C51254 = C51058 * C51057;
    const double C51251 = C51058 / C49936;
    const double C294 = (2 * C50995 * C51058) / C49936;
    const double C299 =
        (((C51009 - (C49934 * 2 * C49941) / C49936) * ce) / C49936 -
         C49935 / C49940) /
            (2 * C49936) +
        ((C49934 * ((0 * ce) / C49936 - C49941 / C49938) + C51061) * ce) /
            C49936;
    const double C51256 = C51061 * C51057;
    const double C1217 = C51061 / C51247;
    const double C1453 = C51061 / C49961;
    const double C51280 = C51253 / C49936;
    const double C293 = (C51009 * std::pow(C51056, 2)) / C49938 + C51248;
    const double C50032 = C50007 / C50004;
    const double C50029 = 2 * C50007;
    const double C2451 = ((0 * ae) / C50002 - C50007 / C50004) / (2 * C50002) +
                         (0 * ae) / C50002;
    const double C8257 =
        ((C51106 - (C50000 * 2 * C50007) / C50002) * ae) / C50002 -
        C50001 / C50006;
    const double C8258 = (0 * ae) / C50002 - C50007 / C50004;
    const double C17453 =
        (-C50001 / C50002) / (2 * C50002) -
        ((C51106 - (C50000 * 2 * C50007) / C50002) * be) / C50002;
    const double C17454 =
        (-(2 * C50007) / C50002) / (2 * C50002) - (0 * be) / C50002;
    const double C152 = C117 * C121;
    const double C150 = C117 * C129;
    const double C148 = C117 * C120;
    const double C344 = C117 * C303;
    const double C537 = C117 * C496;
    const double C5678 = C117 * C501;
    const double C5676 = C117 * C514;
    const double C5674 = C117 * C500;
    const double C6238 = C117 * C969;
    const double C51268 = C51155 / C50006;
    const double C51267 = C51155 * C51154;
    const double C51264 = C51155 / C50002;
    const double C2445 = (2 * C50976 * C51155) / C50002;
    const double C2450 =
        (((C51106 - (C50000 * 2 * C50007) / C50002) * ae) / C50002 -
         C50001 / C50006) /
            (2 * C50002) +
        ((C50000 * ((0 * ae) / C50002 - C50007 / C50004) + C51158) * ae) /
            C50002;
    const double C51269 = C51158 * C51154;
    const double C20282 = C51158 / C51240;
    const double C24901 = C51158 / C50027;
    const double C51286 = C51266 / C50002;
    const double C2444 = (C51106 * std::pow(C51153, 2)) / C50004 + C51261;
    const double C50082 = C50081 * C50070;
    const double C317 =
        (C50074 * C50135 + C50069 * (C50069 * C50144 + C50139 * ae) +
         C50069 * C50139 * ae) /
        C50002;
    const double C318 = -(C50069 * (C50069 * C50143 + C50139 * ce) +
                          C50074 * C50134 + C50069 * C50139 * ce) /
                        C49936;
    const double C976 = (C50232 * (C50069 * C50144 + C50139 * ae)) / C50002;
    const double C977 = -(C50232 * (C50069 * C50143 + C50139 * ce)) / C49936;
    const double C304 = C50074 * C50130 + C50139 * C50072;
    const double C502 = C50074 * C50130 + C50139 * C50272;
    const double C970 = C50232 * C50069 * C50139;
    const double C1224 =
        2 * C50069 * C50139 + C50069 * (C50139 + C50161 * C50072);
    const double C1718 = C50232 * (C50139 + C50161 * C50072);
    const double C2003 =
        2 * C50232 * C50139 + C50232 * (C50139 + C50161 * C50272);
    const double C50244 = C50241 + C50242;
    const double C1337 = C50069 * C50130 + C50240 * C50272;
    const double C4739 =
        2 * C50232 * C50240 + C50232 * (C50240 + C50290 * C50272);
    const double C50243 = C50238 + C50239;
    const double C156 = C117 * C122;
    const double C354 = C117 * C305;
    const double C541 = C117 * C497;
    const double C7223 = C117 * C1717;
    const double C5697 = C117 * C2004;
    const double C7654 = C117 * C5661;
    const double C153 = C51106 * C130;
    const double C157 = C51106 * C132;
    const double C345 = C51106 * C315;
    const double C8263 = C51158 * C315;
    const double C17459 = C51158 * C315;
    const double C355 = C51106 * C319;
    const double C8271 = C51158 * C319;
    const double C17467 = C51158 * C319;
    const double C538 = C51106 * C506;
    const double C542 = C51106 * C508;
    const double C5679 = C51106 * C516;
    const double C6239 = C51106 * C974;
    const double C14227 = C51158 * C974;
    const double C22396 = C51158 * C974;
    const double C5698 = C51106 * C2012;
    const double C154 = C117 * C131;
    const double C158 = C117 * C133;
    const double C346 = C117 * C316;
    const double C356 = C117 * C320;
    const double C539 = C117 * C507;
    const double C543 = C117 * C509;
    const double C5680 = C117 * C517;
    const double C6240 = C117 * C975;
    const double C5695 = C117 * C2011;
    const double C50091 = C50090 * C50070;
    const double C50100 = C50099 * C50070;
    const double C50168 = C50084 + C50162;
    const double C50197 = 2 * C50189;
    const double C50321 = C50189 * ae;
    const double C50319 = C50189 * C50072;
    const double C50318 = C50069 * C50189;
    const double C50317 = C50189 * ce;
    const double C50937 = C50189 * C50272;
    const double C5662 =
        3 * (C50139 + C50161 * C50272) +
        C50232 * (2 * C50232 * C50161 + C50232 * (C50161 + C50189 * C50272));
    const double C50400 = C50389 + C50390;
    const double C50399 = C50084 + C50386;
    const double C50401 = C50385 * ae;
    const double C50398 = C50385 * ce;
    const double C50556 = 2 * C50385;
    const double C50948 = C50385 * C50272;
    const double C6675 =
        3 * (C50240 + C50290 * C50272) +
        C50232 * (2 * C50232 * C50290 + C50232 * (C50290 + C50385 * C50272));
    const double C50397 = C50383 + C50384;
    const double C50954 = C50084 + C50952;
    const double C50156 = C50142 + C50154;
    const double C50169 = 2 * C50163;
    const double C50250 = C50069 * C50163;
    const double C50313 = C50163 * ce;
    const double C2010 =
        (2 * C50232 * C50144 + C50232 * (C50144 + C50163 * C50272)) / C50002;
    const double C5666 =
        (3 * (C50144 + C50163 * C50272) +
         C50232 * (2 * C50232 * C50163 + C50232 * (C50163 + C50192 * C50272))) /
        C50002;
    const double C50300 = C50292 + C50293;
    const double C50393 = C50379 / C49936;
    const double C50505 = C50502 * ce;
    const double C50858 = 2 * C50502;
    const double C50834 = C50142 + C50833;
    const double C7655 = C51106 * C5664;
    const double C50155 = C50153 + C50141;
    const double C50165 = -2 * C50159;
    const double C50247 = C50069 * C50159;
    const double C50314 = ae * C50159;
    const double C2009 = (-2 * C50232 * C50143) / C49936 -
                         (C50232 * (C50159 * C50272 + C50143)) / C49936;
    const double C5667 =
        (-3 * (C50159 * C50272 + C50143)) / C49936 +
        C50232 * ((-2 * C50232 * C50159) / C49936 -
                  (C50232 * (C50186 * C50272 + C50159)) / C49936);
    const double C50297 = C50288 + C50289;
    const double C50394 = C50380 / C50078;
    const double C50506 = ae * C50503;
    const double C50852 = -2 * C50503;
    const double C50831 = C50830 + C50141;
    const double C7656 = C117 * C5665;
    const double C50117 = C50116 * C50070;
    const double C50207 = C50170 + C50204;
    const double C50453 = C50069 * C50442;
    const double C50574 = C50560 + C50561;
    const double C50205 = C50202 + C50166;
    const double C50449 = C50069 * C50438;
    const double C50571 = C50552 + C50553;
    const double C123 = 3 * (C50130 + C50075 * C50087) +
                        C50074 * (2 * C50139 + C50074 * C50151);
    const double C306 = C50130 + C50075 * C50087 + C50151 * C50072;
    const double C307 = C50069 * (2 * C50139 + C50074 * C50151);
    const double C498 = C50232 * (2 * C50139 + C50074 * C50151);
    const double C503 = C50130 + C50075 * C50087 + C50151 * C50272;
    const double C971 = C50232 * C50069 * C50151;
    const double C1338 = C50069 * C50139 + C50249 * C50272;
    const double C2652 = 3 * (C50130 + C50075 * C50072) +
                         C50069 * (2 * C50240 + C50069 * C50299);
    const double C2846 = C50130 + C50075 * C50072 + C50299 * C50272;
    const double C3416 = C50232 * (2 * C50240 + C50069 * C50299);
    const double C7645 =
        4 * (2 * C50232 * C50075 + C50232 * C50941) +
        C50232 * (3 * C50941 + C50232 * (2 * C50232 * C50084 +
                                         C50232 * (C50084 + C50093 * C50272)));
    const double C550 = C51106 * C518;
    const double C50302 = -C50294;
    const double C551 = C117 * C519;
    const double C50203 = C50074 * C50198;
    const double C50349 = C50198 * ae;
    const double C50347 = C50198 * C50072;
    const double C50346 = C50069 * C50198;
    const double C50345 = C50198 * ce;
    const double C50460 = C50189 + C50452;
    const double C50462 = C50451 * ae;
    const double C50459 = C50451 * ce;
    const double C50583 = C50573 * ae;
    const double C50581 = C50069 * C50573;
    const double C50580 = C50573 * ce;
    const double C50179 = C50074 * C50177;
    const double C50191 = 3 * C50177;
    const double C50258 = C50069 * C50177;
    const double C50341 = C50177 * ce;
    const double C50445 = C50434 / C49936;
    const double C50519 = C50516 * ce;
    const double C50828 = C50163 + C50827;
    const double C50578 = -C50566;
    const double C50626 = C50623 * ce;
    const double C50859 = C50232 * C50623;
    const double C50652 = C50647 / C49936;
    const double C50178 = C50074 * C50175;
    const double C50185 = -3 * C50175;
    const double C50255 = C50069 * C50175;
    const double C50342 = ae * C50175;
    const double C50201 = C50195 / C49936;
    const double C50446 = C50435 / C50078;
    const double C50520 = ae * C50517;
    const double C50825 = C50824 + C50159;
    const double C50627 = ae * C50624;
    const double C50853 = C50232 * C50624;
    const double C50653 = C50648 / C50078;
    const double C51238 = C50973 / C50006;
    const double C51236 = C50973 / C50002;
    const double C51235 = C50973 * C50968;
    const double C17451 = (2 * C50976 * C50973) / C50002;
    const double C51239 = C50977 * C50968;
    const double C111 = C50977 / C51240;
    const double C8256 = C50977 / C50027;
    const double C51275 = C51237 / C50002;
    const double C17450 = (C50972 * std::pow(C50967, 2)) / C50004 + C51234;
    const double C51245 = C50992 / C49940;
    const double C51243 = C50992 / C49936;
    const double C51242 = C50992 * C50987;
    const double C1120 = (2 * C50995 * C50992) / C49936;
    const double C51246 = C50996 * C50987;
    const double C115 = C50996 / C51247;
    const double C686 = C50996 / C49961;
    const double C51278 = C51244 / C49936;
    const double C1119 = (C50991 * std::pow(C50986, 2)) / C49938 + C51241;
    const double C51259 = C51086 / C49940;
    const double C51258 = C51086 * C51085;
    const double C51252 = C51086 / C49936;
    const double C494 = (2 * C50995 * C51086) / C49936;
    const double C51260 = C51089 * C51085;
    const double C2000 = C51089 / C51247;
    const double C2247 = C51089 / C49961;
    const double C51283 = C51257 / C49936;
    const double C493 = (C51025 * std::pow(C51084, 2)) / C49938 + C51250;
    const double C51272 = C51183 / C50006;
    const double C51271 = C51183 * C51182;
    const double C51265 = C51183 / C50002;
    const double C5337 = (2 * C50976 * C51183) / C50002;
    const double C51273 = C51186 * C51182;
    const double C39359 = C51186 / C51240;
    const double C44702 = C51186 / C50027;
    const double C51289 = C51270 / C50002;
    const double C5336 = (C51122 * std::pow(C51181, 2)) / C50004 + C51263;
    const double C49973 = C49970 - C49966;
    const double C49969 = C49934 * C49963;
    const double C51281 = C51254 / C49938;
    const double C298 =
        (((0 - (C49934 * C49935) / C49936) * ce) / C49936 - (0 * de) / C49940) /
            (2 * C49936) +
        ((C49934 * (((C51009 - (C49934 * 2 * C49941) / C49936) * ce) / C49936 -
                    C49935 / C49940) +
          C51251) *
         ce) /
            C49936 +
        (0 * ce) / C49936 - C49941 / C49938;
    const double C51282 = C51256 / C49936;
    const double C1117 = -C51280;
    const double C50039 = C50036 - C50032;
    const double C50035 = C50000 * C50029;
    const double C36949 = C2451 * C1717;
    const double C8282 = C8257 * C122;
    const double C8278 = C8257 * C133;
    const double C8272 = C8257 * C131;
    const double C8268 = C8257 * C121;
    const double C8264 = C8257 * C129;
    const double C8260 = C8257 * C120;
    const double C8488 = C8257 * C320;
    const double C8484 = C8257 * C305;
    const double C8472 = C8257 * C316;
    const double C8468 = C8257 * C303;
    const double C8680 = C8257 * C519;
    const double C8672 = C8257 * C509;
    const double C8668 = C8257 * C497;
    const double C8664 = C8257 * C507;
    const double C8660 = C8257 * C496;
    const double C14246 = C8257 * C501;
    const double C14242 = C8257 * C517;
    const double C14228 = C8257 * C514;
    const double C14224 = C8257 * C500;
    const double C14937 = C8257 * C975;
    const double C14933 = C8257 * C969;
    const double C16163 = C8257 * C1717;
    const double C16697 = C8257 * C2011;
    const double C16693 = C8257 * C2004;
    const double C49420 = C8257 * C5665;
    const double C49416 = C8257 * C5661;
    const double C8274 = C8258 * C320;
    const double C8270 = C8258 * C305;
    const double C8266 = C8258 * C316;
    const double C8262 = C8258 * C303;
    const double C14230 = C8258 * C975;
    const double C14226 = C8258 * C969;
    const double C14931 = C8258 * C1717;
    const double C17478 = C17453 * C122;
    const double C17474 = C17453 * C133;
    const double C17468 = C17453 * C131;
    const double C17464 = C17453 * C121;
    const double C17460 = C17453 * C129;
    const double C17456 = C17453 * C120;
    const double C17684 = C17453 * C320;
    const double C17680 = C17453 * C305;
    const double C17668 = C17453 * C316;
    const double C17664 = C17453 * C303;
    const double C17876 = C17453 * C519;
    const double C17868 = C17453 * C509;
    const double C17864 = C17453 * C497;
    const double C17860 = C17453 * C507;
    const double C17856 = C17453 * C496;
    const double C22425 = C17453 * C2004;
    const double C22421 = C17453 * C2011;
    const double C22405 = C17453 * C517;
    const double C22401 = C17453 * C501;
    const double C22397 = C17453 * C514;
    const double C22393 = C17453 * C500;
    const double C22943 = C17453 * C975;
    const double C22939 = C17453 * C969;
    const double C23874 = C17453 * C1717;
    const double C24298 = C17453 * C5665;
    const double C24294 = C17453 * C5661;
    const double C17470 = C17454 * C320;
    const double C17466 = C17454 * C305;
    const double C17462 = C17454 * C316;
    const double C17458 = C17454 * C303;
    const double C22399 = C17454 * C975;
    const double C22395 = C17454 * C969;
    const double C22937 = C17454 * C1717;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C5704 = C5676 + C5677;
    const double C5703 = C5674 + C5675;
    const double C51287 = C51267 / C50004;
    const double C8283 = C51264 * C132;
    const double C8273 = C51264 * C142;
    const double C8269 = C51264 * C130;
    const double C8265 = C51264 * C141;
    const double C8261 = C51264 * C128;
    const double C8485 = C51264 * C319;
    const double C8469 = C51264 * C315;
    const double C8677 = C51264 * C518;
    const double C8669 = C51264 * C508;
    const double C8661 = C51264 * C506;
    const double C14247 = C51264 * C516;
    const double C14229 = C51264 * C530;
    const double C14225 = C51264 * C515;
    const double C14934 = C51264 * C974;
    const double C16694 = C51264 * C2012;
    const double C49417 = C51264 * C5664;
    const double C2449 =
        (((0 - (C50000 * C50001) / C50002) * ae) / C50002 - (0 * be) / C50006) /
            (2 * C50002) +
        ((C50000 * (((C51106 - (C50000 * 2 * C50007) / C50002) * ae) / C50002 -
                    C50001 / C50006) +
          C51264) *
         ae) /
            C50002 +
        (0 * ae) / C50002 - C50007 / C50004;
    const double C2474 = C2445 * C319;
    const double C2456 = C2445 * C315;
    const double C36948 = C2445 * C974;
    const double C2473 = C2450 * C305;
    const double C2467 = C2450 * C320;
    const double C2461 = C2450 * C316;
    const double C2455 = C2450 * C303;
    const double C36953 = C2450 * C975;
    const double C36947 = C2450 * C969;
    const double C37469 = C2450 * C1717;
    const double C51288 = C51269 / C50002;
    const double C17448 = -C51286;
    const double C2478 = C2444 * C132;
    const double C2476 = C2444 * C130;
    const double C2470 = C2444 * C142;
    const double C2460 = C2444 * C141;
    const double C2454 = C2444 * C128;
    const double C2670 = C2444 * C315;
    const double C2872 = C2444 * C518;
    const double C2860 = C2444 * C506;
    const double C3042 = C2444 * C319;
    const double C3206 = C2444 * C508;
    const double C36968 = C2444 * C516;
    const double C36952 = C2444 * C530;
    const double C36946 = C2444 * C515;
    const double C37472 = C2444 * C974;
    const double C38788 = C2444 * C2012;
    const double C143 =
        (-2 * C50074 * C50082) / C50078 +
        C50074 * ((-((C50076 * C50077 + C50072 * bs[5] * std::pow(C50068, 5)) *
                     C50070 * std::pow(C50074, 2)) /
                   C49936) /
                      C50002 -
                  C50082 / C50078);
    const double C332 =
        (-(ae * (C50069 * C50134 + C50130 * ce)) / C49936) / C50002 -
        ((C50130 + C50072 * C50067 * C50071) * C50070) / C50078 -
        ((C50069 * C50135 + C50130 * ae) * ce) / C50078 +
        C50069 * ((-(C50135 * ce) / C49936) / C50002 - (ae * C50134) / C50078 -
                  (C50069 * C50082) / C50078);
    const double C333 = (-(C50074 * C50135 * ce) / C49936) / C50002 -
                        (ae * C50074 * C50134) / C50078 -
                        (C50069 * C50074 * C50082) / C50078;
    const double C526 = (-((zP - zQ) * C50074 * C50082) / C49936) / C50002;
    const double C531 = (-(C50082 * std::pow(zP - zQ, 2)) / C49936) / C50002 -
                        ((C50130 + C50072 * C50067 * C50071) * C50070) / C50078;
    const double C984 = (-(C50232 * C50135 * ce) / C49936) / C50002 -
                        (ae * C50232 * C50134) / C50078 -
                        (C50069 * C50232 * C50082) / C50078;
    const double C349 = C51106 * C317;
    const double C2458 = C2446 * C317;
    const double C2678 = C2444 * C317;
    const double C2668 = C2445 * C317;
    const double C8475 = C51264 * C317;
    const double C8467 = C51158 * C317;
    const double C17663 = C51158 * C317;
    const double C24913 = C24901 * C317;
    const double C350 = C117 * C318;
    const double C2463 = C2451 * C318;
    const double C2673 = C2450 * C318;
    const double C8478 = C8257 * C318;
    const double C8470 = C8258 * C318;
    const double C17674 = C17453 * C318;
    const double C17666 = C17454 * C318;
    const double C991 = C51106 * C976;
    const double C2862 = C2445 * C976;
    const double C3430 = C2444 * C976;
    const double C8663 = C51158 * C976;
    const double C9235 = C51264 * C976;
    const double C17859 = C51158 * C976;
    const double C994 = C117 * C977;
    const double C2867 = C2450 * C977;
    const double C8666 = C8258 * C977;
    const double C9238 = C8257 * C977;
    const double C17862 = C17454 * C977;
    const double C18434 = C17453 * C977;
    const double C348 = C117 * C304;
    const double C2457 = C2451 * C304;
    const double C2667 = C2450 * C304;
    const double C8474 = C8257 * C304;
    const double C8466 = C8258 * C304;
    const double C17670 = C17453 * C304;
    const double C17662 = C17454 * C304;
    const double C549 = C117 * C502;
    const double C8676 = C8257 * C502;
    const double C17872 = C17453 * C502;
    const double C990 = C117 * C970;
    const double C2861 = C2450 * C970;
    const double C8662 = C8258 * C970;
    const double C9234 = C8257 * C970;
    const double C17858 = C17454 * C970;
    const double C18430 = C17453 * C970;
    const double C2679 = C2450 * C1224;
    const double C2665 = C2451 * C1224;
    const double C8476 = C8258 * C1224;
    const double C17672 = C17454 * C1224;
    const double C2863 = C2451 * C1718;
    const double C3431 = C2450 * C1718;
    const double C5490 = C117 * C1718;
    const double C9236 = C8258 * C1718;
    const double C14018 = C8257 * C1718;
    const double C18432 = C17454 * C1718;
    const double C27942 = C17453 * C1718;
    const double C5687 = C117 * C2003;
    const double C14248 = C8257 * C2003;
    const double C22411 = C17453 * C2003;
    const double C1227 = (2 * (C50069 * C50135 + C50130 * ae) +
                          C50069 * (C50135 + C50069 * C50244 + C50240 * ae) +
                          (C50130 + C50075 * C50072) * ae) /
                         C50002;
    const double C1341 =
        (C50069 * C50135 + C50130 * ae + C50244 * C50272) / C50002;
    const double C1721 =
        (C50232 * (C50135 + C50069 * C50244 + C50240 * ae)) / C50002;
    const double C6244 = C117 * C1337;
    const double C14244 = C8258 * C1337;
    const double C15491 = C8257 * C1337;
    const double C22403 = C17454 * C1337;
    const double C22947 = C17453 * C1337;
    const double C36965 = C2450 * C1337;
    const double C6693 = C117 * C4739;
    const double C16695 = C8258 * C4739;
    const double C22423 = C17454 * C4739;
    const double C23371 = C17453 * C4739;
    const double C38789 = C2450 * C4739;
    const double C48509 = C8257 * C4739;
    const double C1228 =
        (-2 * (C50069 * C50134 + C50130 * ce)) / C49936 -
        (C50069 * (C50069 * C50243 + C50134 + C50240 * ce)) / C49936 -
        ((C50130 + C50075 * C50072) * ce) / C49936;
    const double C1342 =
        -(C50243 * C50272 + C50069 * C50134 + C50130 * ce) / C49936;
    const double C1722 =
        -(C50232 * (C50069 * C50243 + C50134 + C50240 * ce)) / C49936;
    const double C170 = C152 + C153;
    const double C172 = C156 + C157;
    const double C372 = C344 + C345;
    const double C376 = C354 + C355;
    const double C561 = C537 + C538;
    const double C563 = C541 + C542;
    const double C5705 = C5678 + C5679;
    const double C6258 = C6238 + C6239;
    const double C5712 = C5697 + C5698;
    const double C171 = C154 + C155;
    const double C50096 = C50091 / C50078;
    const double C50246 = C50074 * C50091;
    const double C50287 = C50069 * C50091;
    const double C50371 = C50232 * C50091;
    const double C144 =
        3 * ((-(C50091 * C50087) / C49936) / C50002 - C50082 / C50078) +
        C50074 *
            ((-2 * C50074 * C50091) / C50078 +
             C50074 *
                 ((-((C50085 * C50086 + C50072 * bs[6] * std::pow(C50065, 6)) *
                     C50070 * C50087) /
                   C49936) /
                      C50002 -
                  C50091 / C50078));
    const double C334 =
        (-(ae * (C50069 * C50143 + C50139 * ce)) / C49936) / C50002 -
        (C50074 * C50082) / C50078 -
        ((C50069 * C50144 + C50139 * ae) * ce) / C50078 +
        C50069 * ((-(C50144 * ce) / C49936) / C50002 - (ae * C50143) / C50078 -
                  (C50069 * C50074 * C50091) / C50078);
    const double C335 =
        (-((C50135 + C50142 * C50087) * ce) / C49936) / C50002 -
        (ae * (C50141 * C50087 + C50134)) / C50078 +
        C50069 * ((-(C50091 * C50087) / C49936) / C50002 - C50082 / C50078);
    const double C527 =
        (zP - zQ) * ((-(C50091 * C50087) / C49936) / C50002 - C50082 / C50078);
    const double C532 =
        (-(C50074 * C50091 * std::pow(zP - zQ, 2)) / C49936) / C50002 -
        (C50074 * C50082) / C50078;
    const double C985 = (-(C50232 * C50144 * ce) / C49936) / C50002 -
                        (ae * C50232 * C50143) / C50078 -
                        (C50069 * C50232 * C50074 * C50091) / C50078;
    const double C1235 =
        2 * ((-(C50135 * ce) / C49936) / C50002 - (ae * C50134) / C50078 -
             (C50069 * C50082) / C50078) -
        (ae * (C50069 * C50243 + C50134 + C50240 * ce)) / C50078 -
        ((C50135 + C50069 * C50244 + C50240 * ae) * ce) / C50078 +
        C50069 *
            ((-(ae * C50243) / C49936) / C50002 - C50082 / C50078 -
             (C50244 * ce) / C50078 +
             C50069 * ((-(C50142 * ce) / C49936) / C50002 -
                       (ae * C50141) / C50078 - (C50069 * C50091) / C50078));
    const double C1349 =
        (-((C50135 + C50142 * C50272) * ce) / C49936) / C50002 -
        (ae * (C50141 * C50272 + C50134)) / C50078 +
        C50069 * ((-(C50091 * C50272) / C49936) / C50002 - C50082 / C50078);
    const double C1729 = (-(ae * C50232 * C50243) / C49936) / C50002 -
                         (C50232 * C50082) / C50078 -
                         (C50232 * C50244 * ce) / C50078 +
                         C50069 * ((-(C50232 * C50142 * ce) / C49936) / C50002 -
                                   (ae * C50232 * C50141) / C50078 -
                                   (C50069 * C50232 * C50091) / C50078);
    const double C2016 =
        (-2 * C50232 * C50082) / C50078 +
        C50232 * ((-(C50091 * C50272) / C49936) / C50002 - C50082 / C50078);
    const double C50101 = C50100 * C50087;
    const double C50111 = C50100 / C50078;
    const double C50107 = C50074 * C50100;
    const double C50381 = C50069 * C50100;
    const double C50490 = C50100 * C50272;
    const double C50504 = C50232 * C50100;
    const double C50173 = C50074 * C50168;
    const double C50188 = 3 * C50168;
    const double C50259 = C50168 * ae;
    const double C50257 = C50069 * C50168;
    const double C50256 = C50168 * ce;
    const double C1225 =
        2 * C50069 * C50151 + C50069 * (C50151 + C50168 * C50072);
    const double C1719 = C50232 * (C50151 + C50168 * C50072);
    const double C2002 =
        2 * C50232 * C50151 + C50232 * (C50151 + C50168 * C50272);
    const double C5663 =
        3 * (C50151 + C50168 * C50272) +
        C50232 * (2 * C50232 * C50168 + C50232 * (C50168 + C50198 * C50272));
    const double C50328 = C50320 + C50321;
    const double C50327 = C50161 + C50319;
    const double C50329 = C50318 * ae;
    const double C50326 = C50318 * ce;
    const double C50440 = 2 * C50318;
    const double C4737 =
        2 * C50232 * C50249 + C50232 * (C50249 + C50318 * C50272);
    const double C6676 =
        3 * (C50249 + C50318 * C50272) +
        C50232 * (2 * C50232 * C50318 + C50232 * (C50318 + C50451 * C50272));
    const double C50325 = C50316 + C50317;
    const double C50938 = C50161 + C50937;
    const double C5699 = C117 * C5662;
    const double C50407 = C50069 * C50400;
    const double C50559 = 2 * C50400;
    const double C50546 = C50400 * ce;
    const double C50641 = C50232 * C50400;
    const double C50849 = C50400 * C50272;
    const double C50408 = C50399 * ae;
    const double C50406 = C50069 * C50399;
    const double C50405 = C50399 * ce;
    const double C50557 = 3 * C50399;
    const double C4738 =
        2 * C50232 * C50299 + C50232 * (C50299 + C50399 * C50272);
    const double C23362 =
        3 * (C50299 + C50399 * C50272) +
        C50232 * (2 * C50232 * C50399 + C50232 * (C50399 + C50573 * C50272));
    const double C50949 = C50290 + C50948;
    const double C24296 = C17454 * C6675;
    const double C40147 = C117 * C6675;
    const double C49418 = C8258 * C6675;
    const double C50404 = C50069 * C50397;
    const double C50551 = -2 * C50397;
    const double C50545 = ae * C50397;
    const double C50639 = C50232 * C50397;
    const double C50846 = C50397 * C50272;
    const double C50955 = C50232 * C50954;
    const double C135 = (3 * (C50135 + C50142 * C50087) +
                         C50074 * (2 * C50144 + C50074 * C50156)) /
                        C50002;
    const double C321 =
        (C50135 + C50142 * C50087 + C50069 * (C50069 * C50156 + C50151 * ae) +
         C50069 * C50151 * ae) /
        C50002;
    const double C323 = (C50069 * (2 * C50144 + C50074 * C50156) +
                         (2 * C50139 + C50074 * C50151) * ae) /
                        C50002;
    const double C510 = (C50232 * (2 * C50144 + C50074 * C50156)) / C50002;
    const double C520 = (C50135 + C50142 * C50087 + C50156 * C50272) / C50002;
    const double C978 = (C50232 * (C50069 * C50156 + C50151 * ae)) / C50002;
    const double C2008 =
        (2 * C50232 * C50156 + C50232 * (C50156 + C50177 * C50272)) / C50002;
    const double C50253 = C50250 + C50251;
    const double C50322 = C50313 / C49936;
    const double C5688 = C51106 * C2010;
    const double C14249 = C51264 * C2010;
    const double C5700 = C51106 * C5666;
    const double C50304 = C50069 * C50300;
    const double C50388 = 2 * C50300;
    const double C50378 = C50300 * ce;
    const double C4747 =
        (2 * C50232 * C50244 + C50232 * (C50244 + C50300 * C50272)) / C50002;
    const double C6677 =
        (3 * (C50244 + C50300 * C50272) +
         C50232 * (2 * C50232 * C50300 + C50232 * (C50300 + C50400 * C50272))) /
        C50002;
    const double C50403 = -C50393;
    const double C50508 = C50505 / C49936;
    const double C7649 =
        (4 * (2 * C50232 * C50142 + C50232 * C50834) +
         C50232 * (3 * C50834 + C50232 * (2 * C50502 + C50232 * C50623))) /
        C50002;
    const double C7658 = C7654 + C7655;
    const double C134 =
        (-3 * (C50141 * C50087 + C50134)) / C49936 +
        C50074 * ((-2 * C50143) / C49936 - (C50074 * C50155) / C49936);
    const double C322 = -(C50069 * (C50069 * C50155 + C50151 * ce) +
                          C50141 * C50087 + C50134 + C50069 * C50151 * ce) /
                        C49936;
    const double C324 =
        C50069 * ((-2 * C50143) / C49936 - (C50074 * C50155) / C49936) -
        ((2 * C50139 + C50074 * C50151) * ce) / C49936;
    const double C511 =
        C50232 * ((-2 * C50143) / C49936 - (C50074 * C50155) / C49936);
    const double C521 = -(C50155 * C50272 + C50141 * C50087 + C50134) / C49936;
    const double C979 = -(C50232 * (C50069 * C50155 + C50151 * ce)) / C49936;
    const double C2007 = (-2 * C50232 * C50155) / C49936 -
                         (C50232 * (C50175 * C50272 + C50155)) / C49936;
    const double C50171 = C50165 / C49936;
    const double C50252 = C50247 + C50248;
    const double C50323 = C50314 / C50078;
    const double C5689 = C117 * C2009;
    const double C14252 = C8257 * C2009;
    const double C22415 = C17453 * C2009;
    const double C5701 = C117 * C5667;
    const double C50303 = C50069 * C50297;
    const double C50382 = -2 * C50297;
    const double C50377 = ae * C50297;
    const double C4745 = (-2 * C50232 * C50243) / C49936 -
                         (C50232 * (C50297 * C50272 + C50243)) / C49936;
    const double C6678 =
        (-3 * (C50297 * C50272 + C50243)) / C49936 +
        C50232 * ((-2 * C50232 * C50297) / C49936 -
                  (C50232 * (C50397 * C50272 + C50297)) / C49936);
    const double C50509 = C50506 / C50078;
    const double C50854 = C50852 / C49936;
    const double C7648 =
        4 * ((-2 * C50232 * C50141) / C49936 - (C50232 * C50831) / C49936) +
        C50232 *
            ((-3 * C50831) / C49936 +
             C50232 * ((-2 * C50503) / C49936 - (C50232 * C50624) / C49936));
    const double C50118 = C50117 * C50087;
    const double C50436 = C50074 * C50117;
    const double C50549 = C50069 * C50117;
    const double C50622 = C50117 * C50272;
    const double C50644 = C50232 * C50117;
    const double C50210 = C50074 * C50207;
    const double C50348 = C50069 * C50207;
    const double C5669 =
        (3 * (C50156 + C50177 * C50272) +
         C50232 * (2 * C50232 * C50177 + C50232 * (C50177 + C50207 * C50272))) /
        C50002;
    const double C50461 = C50453 + C50454;
    const double C50582 = C50069 * C50574;
    const double C50208 = C50074 * C50205;
    const double C50344 = C50069 * C50205;
    const double C5668 =
        (-3 * (C50175 * C50272 + C50155)) / C49936 +
        C50232 * ((-2 * C50232 * C50175) / C49936 -
                  (C50232 * (C50205 * C50272 + C50175)) / C49936);
    const double C50458 = C50449 + C50450;
    const double C50579 = C50069 * C50571;
    const double C162 = C117 * C123;
    const double C8284 = C8257 * C123;
    const double C17480 = C17453 * C123;
    const double C358 = C117 * C306;
    const double C2471 = C2451 * C306;
    const double C3043 = C2450 * C306;
    const double C8490 = C8257 * C306;
    const double C8482 = C8258 * C306;
    const double C17686 = C17453 * C306;
    const double C17678 = C17454 * C306;
    const double C364 = C117 * C307;
    const double C2479 = C2450 * C307;
    const double C8280 = C8258 * C307;
    const double C8858 = C8257 * C307;
    const double C17476 = C17454 * C307;
    const double C18054 = C17453 * C307;
    const double C545 = C117 * C498;
    const double C9022 = C8257 * C498;
    const double C18218 = C17453 * C498;
    const double C553 = C117 * C503;
    const double C8684 = C8257 * C503;
    const double C17880 = C17453 * C503;
    const double C996 = C117 * C971;
    const double C3207 = C2450 * C971;
    const double C8670 = C8258 * C971;
    const double C9242 = C8257 * C971;
    const double C17866 = C17454 * C971;
    const double C18438 = C17453 * C971;
    const double C2873 = C2450 * C1338;
    const double C5496 = C117 * C1338;
    const double C8678 = C8258 * C1338;
    const double C14947 = C8257 * C1338;
    const double C17874 = C17454 * C1338;
    const double C22953 = C17453 * C1338;
    const double C7231 = C117 * C2846;
    const double C15493 = C8258 * C2846;
    const double C22945 = C17454 * C2846;
    const double C23882 = C17453 * C2846;
    const double C36963 = C2451 * C2846;
    const double C37877 = C2450 * C2846;
    const double C49012 = C8257 * C2846;
    const double C16165 = C8258 * C3416;
    const double C23876 = C17454 * C3416;
    const double C37467 = C2451 * C3416;
    const double C38381 = C2450 * C3416;
    const double C40770 = C117 * C7645;
    const double C50305 = C50302 / C50002;
    const double C50206 = C50197 + C50203;
    const double C50354 = C50168 + C50347;
    const double C50356 = C50346 * ae;
    const double C50353 = C50346 * ce;
    const double C50469 = C50460 * ae;
    const double C50467 = C50069 * C50460;
    const double C50466 = C50460 * ce;
    const double C50589 = C50556 + C50581;
    const double C50588 = C50580 / C49936;
    const double C50181 = C50169 + C50179;
    const double C50350 = C50341 / C49936;
    const double C50456 = -C50445;
    const double C50522 = C50519 / C49936;
    const double C7647 =
        (4 * (2 * C50232 * C50163 + C50232 * C50828) +
         C50232 *
             (3 * C50828 +
              C50232 * (2 * C50516 + C50232 * (C50192 + C50442 * C50272)))) /
        C50002;
    const double C50586 = C50578 / C50002;
    const double C50629 = C50626 / C49936;
    const double C50860 = C50858 + C50859;
    const double C50656 = -C50652;
    const double C50180 = C50178 / C49936;
    const double C50194 = C50185 / C49936;
    const double C50351 = C50342 / C50078;
    const double C50523 = C50520 / C50078;
    const double C7646 =
        4 * ((-2 * C50232 * C50159) / C49936 - (C50232 * C50825) / C49936) +
        C50232 * ((-3 * C50825) / C49936 +
                  C50232 * ((-2 * C50517) / C49936 -
                            (C50232 * (C50438 * C50272 + C50186)) / C49936));
    const double C50630 = C50627 / C50078;
    const double C50855 = C50853 / C49936;
    const double C51274 = C51235 / C50004;
    const double C51276 = C51239 / C50002;
    const double C2447 = -C51275;
    const double C51277 = C51242 / C49938;
    const double C51279 = C51246 / C49936;
    const double C296 = -C51278;
    const double C51284 = C51258 / C49938;
    const double C51285 = C51260 / C49936;
    const double C1831 = -C51283;
    const double C51290 = C51271 / C50004;
    const double C51291 = C51273 / C50002;
    const double C34007 = -C51289;
    const double C1222 =
        (C49973 / C49961 - (0 * de) / C49936) / C49961 + (0 * ce) / C49936;
    const double C1458 = C49973 / C49961 - (0 * de) / C49936;
    const double C49972 = C49969 / C49936;
    const double C51296 = C51248 - C51281;
    const double C51297 = C51255 - C51282;
    const double C20287 =
        (C50039 / C50027 - (0 * be) / C50002) / C50027 + (0 * ae) / C50002;
    const double C24906 = C50039 / C50027 - (0 * be) / C50002;
    const double C50038 = C50035 / C50002;
    const double C8297 = C8270 + C8271;
    const double C8293 = C8262 + C8263;
    const double C14257 = C14226 + C14227;
    const double C17493 = C17466 + C17467;
    const double C17489 = C17458 + C17459;
    const double C22428 = C22395 + C22396;
    const double C179 = C169 * C51009;
    const double C343 = C169 * C293;
    const double C695 = C169 * C51251;
    const double C1126 = C169 * C1117;
    const double C178 = C168 * C118;
    const double C342 = C168 * C298;
    const double C694 = C168 * C687;
    const double C1125 = C168 * C1122;
    const double C5716 = C5704 * C51009;
    const double C6237 = C5704 * C51251;
    const double C6685 = C5704 * C1117;
    const double C7536 = C5704 * C293;
    const double C5715 = C5703 * C118;
    const double C6236 = C5703 * C687;
    const double C6684 = C5703 * C1122;
    const double C7535 = C5703 * C298;
    const double C51300 = C51261 - C51287;
    const double C8303 = C8282 + C8283;
    const double C8298 = C8272 + C8273;
    const double C8296 = C8268 + C8269;
    const double C8294 = C8264 + C8265;
    const double C8292 = C8260 + C8261;
    const double C8507 = C8484 + C8485;
    const double C8499 = C8468 + C8469;
    const double C8696 = C8668 + C8669;
    const double C8692 = C8660 + C8661;
    const double C14271 = C14246 + C14247;
    const double C14258 = C14228 + C14229;
    const double C14256 = C14224 + C14225;
    const double C14956 = C14933 + C14934;
    const double C16701 = C16693 + C16694;
    const double C49426 = C49416 + C49417;
    const double C2483 = C2449 * C133;
    const double C2477 = C2449 * C122;
    const double C2475 = C2449 * C121;
    const double C2469 = C2449 * C131;
    const double C2459 = C2449 * C129;
    const double C2453 = C2449 * C120;
    const double C2683 = C2449 * C318;
    const double C2677 = C2449 * C304;
    const double C2675 = C2449 * C316;
    const double C2669 = C2449 * C303;
    const double C2877 = C2449 * C519;
    const double C2871 = C2449 * C502;
    const double C2865 = C2449 * C507;
    const double C2859 = C2449 * C496;
    const double C3047 = C2449 * C320;
    const double C3041 = C2449 * C305;
    const double C3211 = C2449 * C509;
    const double C3205 = C2449 * C497;
    const double C3435 = C2449 * C977;
    const double C3429 = C2449 * C970;
    const double C36967 = C2449 * C501;
    const double C36961 = C2449 * C517;
    const double C36951 = C2449 * C514;
    const double C36945 = C2449 * C500;
    const double C37477 = C2449 * C975;
    const double C37471 = C2449 * C969;
    const double C37875 = C2449 * C1337;
    const double C38379 = C2449 * C1717;
    const double C38793 = C2449 * C2011;
    const double C38787 = C2449 * C2004;
    const double C2499 = C2473 + C2474;
    const double C2490 = C2455 + C2456;
    const double C36970 = C36947 + C36948;
    const double C51301 = C51268 - C51288;
    const double C17479 = C17448 * C132;
    const double C17469 = C17448 * C142;
    const double C17465 = C17448 * C130;
    const double C17461 = C17448 * C141;
    const double C17457 = C17448 * C128;
    const double C17681 = C17448 * C319;
    const double C17671 = C17448 * C317;
    const double C17665 = C17448 * C315;
    const double C17873 = C17448 * C518;
    const double C17865 = C17448 * C508;
    const double C17857 = C17448 * C506;
    const double C18431 = C17448 * C976;
    const double C22426 = C17448 * C2012;
    const double C22412 = C17448 * C2010;
    const double C22402 = C17448 * C516;
    const double C22398 = C17448 * C530;
    const double C22394 = C17448 * C515;
    const double C22940 = C17448 * C974;
    const double C24295 = C17448 * C5664;
    const double C159 = C51106 * C143;
    const double C2484 = C2444 * C143;
    const double C8279 = C51264 * C143;
    const double C17475 = C17448 * C143;
    const double C347 = C51106 * C333;
    const double C2462 = C2445 * C333;
    const double C2676 = C2444 * C333;
    const double C8267 = C51158 * C333;
    const double C8473 = C51264 * C333;
    const double C17463 = C51158 * C333;
    const double C17669 = C17448 * C333;
    const double C540 = C51106 * C526;
    const double C2866 = C2444 * C526;
    const double C8665 = C51264 * C526;
    const double C17861 = C17448 * C526;
    const double C5681 = C51106 * C531;
    const double C14243 = C51264 * C531;
    const double C22406 = C17448 * C531;
    const double C36962 = C2444 * C531;
    const double C6241 = C51106 * C984;
    const double C14231 = C51158 * C984;
    const double C14938 = C51264 * C984;
    const double C22400 = C51158 * C984;
    const double C22944 = C17448 * C984;
    const double C36954 = C2445 * C984;
    const double C37478 = C2444 * C984;
    const double C374 = C348 + C349;
    const double C2491 = C2457 + C2458;
    const double C2690 = C2667 + C2668;
    const double C8502 = C8474 + C8475;
    const double C8498 = C8466 + C8467;
    const double C17694 = C17662 + C17663;
    const double C567 = C549 + C550;
    const double C8700 = C8676 + C8677;
    const double C1008 = C990 + C991;
    const double C2884 = C2861 + C2862;
    const double C8693 = C8662 + C8663;
    const double C9250 = C9234 + C9235;
    const double C17889 = C17858 + C17859;
    const double C6245 = C51106 * C1341;
    const double C14245 = C51158 * C1341;
    const double C15492 = C51264 * C1341;
    const double C22404 = C51158 * C1341;
    const double C22948 = C17448 * C1341;
    const double C36966 = C2445 * C1341;
    const double C37876 = C2444 * C1341;
    const double C7224 = C51106 * C1721;
    const double C14932 = C51158 * C1721;
    const double C16164 = C51264 * C1721;
    const double C22938 = C51158 * C1721;
    const double C23875 = C17448 * C1721;
    const double C31569 = C24901 * C1721;
    const double C36950 = C2446 * C1721;
    const double C37470 = C2445 * C1721;
    const double C38380 = C2444 * C1721;
    const double C6246 = C117 * C1342;
    const double C14240 = C8258 * C1342;
    const double C15495 = C8257 * C1342;
    const double C22407 = C17454 * C1342;
    const double C22951 = C17453 * C1342;
    const double C36959 = C2450 * C1342;
    const double C37881 = C2449 * C1342;
    const double C7225 = C117 * C1722;
    const double C14935 = C8258 * C1722;
    const double C16167 = C8257 * C1722;
    const double C22941 = C17454 * C1722;
    const double C23878 = C17453 * C1722;
    const double C36955 = C2451 * C1722;
    const double C37475 = C2450 * C1722;
    const double C38385 = C2449 * C1722;
    const double C180 = C170 * C118;
    const double C352 = C170 * C298;
    const double C698 = C170 * C687;
    const double C1129 = C170 * C1122;
    const double C182 = C172 * C118;
    const double C362 = C172 * C298;
    const double C702 = C172 * C687;
    const double C1133 = C172 * C1122;
    const double C384 = C372 * C299;
    const double C696 = C372 * C688;
    const double C1127 = C372 * C1123;
    const double C388 = C376 * C299;
    const double C700 = C376 * C688;
    const double C1131 = C376 * C1123;
    const double C573 = C561 * C118;
    const double C993 = C561 * C687;
    const double C1610 = C561 * C1122;
    const double C5486 = C561 * C298;
    const double C575 = C563 * C118;
    const double C999 = C563 * C687;
    const double C1614 = C563 * C1122;
    const double C11270 = C563 * C298;
    const double C5717 = C5705 * C118;
    const double C6242 = C5705 * C687;
    const double C6688 = C5705 * C1122;
    const double C7541 = C5705 * C298;
    const double C6268 = C6258 * C688;
    const double C6686 = C6258 * C1123;
    const double C7537 = C6258 * C299;
    const double C5724 = C5712 * C118;
    const double C6696 = C5712 * C1122;
    const double C8151 = C5712 * C687;
    const double C40693 = C5712 * C298;
    const double C181 = C171 * C51009;
    const double C353 = C171 * C293;
    const double C699 = C171 * C51251;
    const double C1130 = C171 * C1117;
    const double C2855 =
        (-(C50091 * C50272) / C49936) / C50002 - C50082 / C50078 -
        (ae * (C50297 * C50272 + C50243)) / C50078 -
        ((C50244 + C50300 * C50272) * ce) / C50078 +
        C50069 * ((-((C50142 + C50152 * C50272) * ce) / C49936) / C50002 -
                  (ae * (C50150 * C50272 + C50141)) / C50078 +
                  C50069 * ((-(C50100 * C50272) / C49936) / C50002 - C50096));
    const double C50296 = C50287 / C50078;
    const double C161 = C51106 * C144;
    const double C8289 = C51264 * C144;
    const double C17485 = C17448 * C144;
    const double C351 = C51106 * C334;
    const double C2464 = C2446 * C334;
    const double C2684 = C2444 * C334;
    const double C2674 = C2445 * C334;
    const double C8479 = C51264 * C334;
    const double C8471 = C51158 * C334;
    const double C17675 = C17448 * C334;
    const double C17667 = C51158 * C334;
    const double C24919 = C24901 * C334;
    const double C357 = C51106 * C335;
    const double C2468 = C2445 * C335;
    const double C3048 = C2444 * C335;
    const double C8275 = C51158 * C335;
    const double C8489 = C51264 * C335;
    const double C17471 = C51158 * C335;
    const double C17685 = C17448 * C335;
    const double C544 = C51106 * C527;
    const double C3212 = C2444 * C527;
    const double C8673 = C51264 * C527;
    const double C17869 = C17448 * C527;
    const double C552 = C51106 * C532;
    const double C2878 = C2444 * C532;
    const double C8681 = C51264 * C532;
    const double C17877 = C17448 * C532;
    const double C995 = C51106 * C985;
    const double C2868 = C2445 * C985;
    const double C3436 = C2444 * C985;
    const double C8667 = C51158 * C985;
    const double C9239 = C51264 * C985;
    const double C17863 = C51158 * C985;
    const double C18435 = C17448 * C985;
    const double C6247 = C51106 * C1349;
    const double C14241 = C51158 * C1349;
    const double C15496 = C51264 * C1349;
    const double C22408 = C51158 * C1349;
    const double C22952 = C17448 * C1349;
    const double C36960 = C2445 * C1349;
    const double C37882 = C2444 * C1349;
    const double C7226 = C51106 * C1729;
    const double C14936 = C51158 * C1729;
    const double C16168 = C51264 * C1729;
    const double C22942 = C51158 * C1729;
    const double C23879 = C17448 * C1729;
    const double C31575 = C24901 * C1729;
    const double C36956 = C2446 * C1729;
    const double C37476 = C2445 * C1729;
    const double C38386 = C2444 * C1729;
    const double C5696 = C51106 * C2016;
    const double C16698 = C51264 * C2016;
    const double C22422 = C17448 * C2016;
    const double C38794 = C2444 * C2016;
    const double C50102 = C50101 / C49936;
    const double C50112 = -2 * C50107;
    const double C50315 = C50069 * C50107;
    const double C50373 = C50232 * C50107;
    const double C50432 = C50107 / C50078;
    const double C1350 =
        (-((C50144 + C50163 * C50272) * ce) / C49936) / C50002 -
        (ae * (C50159 * C50272 + C50143)) / C50078 +
        C50069 * ((-(C50107 * C50272) / C49936) / C50002 - C50246 / C50078);
    const double C2015 =
        (-2 * C50232 * C50246) / C50078 +
        C50232 * ((-(C50107 * C50272) / C49936) / C50002 - C50246 / C50078);
    const double C50395 = C50381 / C50078;
    const double C50491 = C50490 / C49936;
    const double C50507 = C50069 * C50504;
    const double C50640 = C50504 / C50078;
    const double C50666 = -2 * C50504;
    const double C50176 = C50167 + C50173;
    const double C50261 = C50258 + C50259;
    const double C1339 = C50069 * C50151 + C50257 * C50272;
    const double C6231 =
        2 * C50232 * C50257 + C50232 * (C50257 + C50346 * C50272);
    const double C50260 = C50255 + C50256;
    const double C3045 = C2451 * C1225;
    const double C8492 = C8258 * C1225;
    const double C17688 = C17454 * C1225;
    const double C3209 = C2451 * C1719;
    const double C9244 = C8258 * C1719;
    const double C11274 = C117 * C1719;
    const double C18440 = C17454 * C1719;
    const double C5691 = C117 * C2002;
    const double C50332 = C50069 * C50328;
    const double C50441 = 2 * C50328;
    const double C50433 = C50328 * ce;
    const double C2653 = 3 * (C50139 + C50161 * C50072) +
                         C50069 * (2 * C50249 + C50069 * C50327);
    const double C2847 = C50139 + C50161 * C50072 + C50327 * C50272;
    const double C3417 = C50232 * (2 * C50249 + C50069 * C50327);
    const double C4736 =
        2 * C50232 * C50327 + C50232 * (C50327 + C50460 * C50272);
    const double C6252 = C117 * C4737;
    const double C14250 = C8258 * C4737;
    const double C22413 = C17454 * C4737;
    const double C50331 = C50069 * C50325;
    const double C50437 = -2 * C50325;
    const double C50431 = ae * C50325;
    const double C7644 =
        4 * (2 * C50232 * C50161 + C50232 * C50938) +
        C50232 * (3 * C50938 + C50232 * (2 * C50232 * C50189 +
                                         C50232 * (C50189 + C50439 * C50272)));
    const double C50414 = C50152 + C50407;
    const double C50565 = C50546 / C50078;
    const double C50646 = C50641 * ce;
    const double C50850 = C50300 + C50849;
    const double C50413 = C50387 + C50406;
    const double C50412 = C50405 / C49936;
    const double C23373 = C17454 * C4738;
    const double C38791 = C2451 * C4738;
    const double C40489 = C117 * C4738;
    const double C48511 = C8258 * C4738;
    const double C24287 =
        4 * (2 * C50232 * C50290 + C50232 * C50949) +
        C50232 * (3 * C50949 + C50232 * (2 * C50232 * C50385 +
                                         C50232 * (C50385 + C50554 * C50272)));
    const double C50411 = C50404 + C50150;
    const double C50570 = C50551 / C49936;
    const double C50564 = C50545 / C49936;
    const double C50645 = ae * C50639;
    const double C50847 = C50846 + C50297;
    const double C50956 = C50953 + C50955;
    const double C163 = C51106 * C135;
    const double C8285 = C51264 * C135;
    const double C17481 = C17448 * C135;
    const double C359 = C51106 * C321;
    const double C2472 = C2446 * C321;
    const double C3044 = C2445 * C321;
    const double C8491 = C51264 * C321;
    const double C8483 = C51158 * C321;
    const double C17687 = C17448 * C321;
    const double C17679 = C51158 * C321;
    const double C24927 = C24901 * C321;
    const double C365 = C51106 * C323;
    const double C2480 = C2445 * C323;
    const double C8281 = C51158 * C323;
    const double C8859 = C51264 * C323;
    const double C17477 = C51158 * C323;
    const double C18055 = C17448 * C323;
    const double C546 = C51106 * C510;
    const double C9023 = C51264 * C510;
    const double C18219 = C17448 * C510;
    const double C554 = C51106 * C520;
    const double C8685 = C51264 * C520;
    const double C17881 = C17448 * C520;
    const double C997 = C51106 * C978;
    const double C3208 = C2445 * C978;
    const double C8671 = C51158 * C978;
    const double C9243 = C51264 * C978;
    const double C17867 = C51158 * C978;
    const double C18439 = C17448 * C978;
    const double C5692 = C51106 * C2008;
    const double C1229 = (2 * (C50069 * C50144 + C50139 * ae) +
                          C50069 * (C50144 + C50069 * C50253 + C50249 * ae) +
                          (C50139 + C50161 * C50072) * ae) /
                         C50002;
    const double C1343 =
        (C50069 * C50144 + C50139 * ae + C50253 * C50272) / C50002;
    const double C1723 =
        (C50232 * (C50144 + C50069 * C50253 + C50249 * ae)) / C50002;
    const double C4743 =
        (2 * C50232 * C50253 + C50232 * (C50253 + C50328 * C50272)) / C50002;
    const double C50330 = -C50322;
    const double C5707 = C5687 + C5688;
    const double C14272 = C14248 + C14249;
    const double C5713 = C5699 + C5700;
    const double C50307 = C50142 + C50304;
    const double C50392 = C50378 / C50078;
    const double C6694 = C51106 * C4747;
    const double C16696 = C51158 * C4747;
    const double C22424 = C51158 * C4747;
    const double C23372 = C17448 * C4747;
    const double C38790 = C2445 * C4747;
    const double C48510 = C51264 * C4747;
    const double C24297 = C51158 * C6677;
    const double C40148 = C51106 * C6677;
    const double C49419 = C51158 * C6677;
    const double C50410 = C50403 / C50002;
    const double C50511 = -C50508;
    const double C40771 = C51106 * C7649;
    const double C7660 = C7658 * C118;
    const double C40150 = C7658 * C1122;
    const double C41107 = C7658 * C687;
    const double C160 = C117 * C134;
    const double C8288 = C8257 * C134;
    const double C17484 = C17453 * C134;
    const double C360 = C117 * C322;
    const double C2465 = C2451 * C322;
    const double C3049 = C2450 * C322;
    const double C8494 = C8257 * C322;
    const double C8486 = C8258 * C322;
    const double C17690 = C17453 * C322;
    const double C17682 = C17454 * C322;
    const double C366 = C117 * C324;
    const double C2485 = C2450 * C324;
    const double C8276 = C8258 * C324;
    const double C8862 = C8257 * C324;
    const double C17472 = C17454 * C324;
    const double C18058 = C17453 * C324;
    const double C547 = C117 * C511;
    const double C9026 = C8257 * C511;
    const double C18222 = C17453 * C511;
    const double C555 = C117 * C521;
    const double C8688 = C8257 * C521;
    const double C17884 = C17453 * C521;
    const double C1000 = C117 * C979;
    const double C3213 = C2450 * C979;
    const double C8674 = C8258 * C979;
    const double C9246 = C8257 * C979;
    const double C17870 = C17454 * C979;
    const double C18442 = C17453 * C979;
    const double C5693 = C117 * C2007;
    const double C1236 =
        2 * ((-(C50144 * ce) / C49936) / C50002 - (ae * C50143) / C50078 -
             (C50069 * C50246) / C50078) -
        (ae * (C50069 * C50252 + C50143 + C50249 * ce)) / C50078 -
        ((C50144 + C50069 * C50253 + C50249 * ae) * ce) / C50078 +
        C50069 *
            ((-(ae * C50252) / C49936) / C50002 - C50246 / C50078 -
             (C50253 * ce) / C50078 +
             C50069 * ((-(C50163 * ce) / C49936) / C50002 -
                       (ae * C50159) / C50078 - (C50069 * C50107) / C50078));
    const double C1730 = (-(ae * C50232 * C50252) / C49936) / C50002 -
                         (C50232 * C50246) / C50078 -
                         (C50232 * C50253 * ce) / C50078 +
                         C50069 * ((-(C50232 * C50163 * ce) / C49936) / C50002 -
                                   (ae * C50232 * C50159) / C50078 -
                                   (C50069 * C50232 * C50107) / C50078);
    const double C2856 =
        (-(C50107 * C50272) / C49936) / C50002 - C50246 / C50078 -
        (ae * (C50325 * C50272 + C50252)) / C50078 -
        ((C50253 + C50328 * C50272) * ce) / C50078 +
        C50069 * ((-((C50163 + C50192 * C50272) * ce) / C49936) / C50002 -
                  (ae * (C50186 * C50272 + C50159)) / C50078 +
                  C50069 * ((-(C50074 * C50117 * C50272) / C49936) / C50002 -
                            C50107 / C50078));
    const double C1230 =
        (-2 * (C50069 * C50143 + C50139 * ce)) / C49936 -
        (C50069 * (C50069 * C50252 + C50143 + C50249 * ce)) / C49936 -
        ((C50139 + C50161 * C50072) * ce) / C49936;
    const double C1344 =
        -(C50252 * C50272 + C50069 * C50143 + C50139 * ce) / C49936;
    const double C1724 =
        -(C50232 * (C50069 * C50252 + C50143 + C50249 * ce)) / C49936;
    const double C4741 = (-2 * C50232 * C50252) / C49936 -
                         (C50232 * (C50325 * C50272 + C50252)) / C49936;
    const double C50306 = C50303 + C50141;
    const double C50396 = C50382 / C49936;
    const double C50391 = C50377 / C49936;
    const double C6697 = C117 * C4745;
    const double C16699 = C8258 * C4745;
    const double C22419 = C17454 * C4745;
    const double C23375 = C17453 * C4745;
    const double C38795 = C2450 * C4745;
    const double C48513 = C8257 * C4745;
    const double C24300 = C17454 * C6678;
    const double C40151 = C117 * C6678;
    const double C49422 = C8258 * C6678;
    const double C40772 = C117 * C7648;
    const double C50119 = C50118 / C49936;
    const double C50447 = C50069 * C50436;
    const double C50496 = C50436 * C50272;
    const double C50518 = C50232 * C50436;
    const double C50568 = C50549 / C50078;
    const double C50625 = C50622 / C49936;
    const double C50649 = C50069 * C50644;
    const double C50213 = C50199 + C50210;
    const double C50355 = C50348 + C50349;
    const double C50468 = C50069 * C50461;
    const double C6679 =
        (3 * (C50253 + C50328 * C50272) +
         C50232 * (2 * C50232 * C50328 + C50232 * (C50328 + C50461 * C50272))) /
        C50002;
    const double C50590 = C50170 + C50582;
    const double C50211 = C50208 / C49936;
    const double C50352 = C50344 + C50345;
    const double C50465 = C50069 * C50458;
    const double C6680 =
        (-3 * (C50325 * C50272 + C50252)) / C49936 +
        C50232 * ((-2 * C50232 * C50325) / C49936 -
                  (C50232 * (C50458 * C50272 + C50325)) / C49936);
    const double C50587 = C50579 + C50166;
    const double C50308 = C50305 - C50295;
    const double C50209 = C50074 * C50206;
    const double C50267 = C50206 * ae;
    const double C50265 = C50069 * C50206;
    const double C50264 = C50206 * ce;
    const double C2654 = 3 * (C50151 + C50168 * C50072) +
                         C50069 * (2 * C50257 + C50069 * C50354);
    const double C2848 = C50151 + C50168 * C50072 + C50354 * C50272;
    const double C3418 = C50232 * (2 * C50257 + C50069 * C50354);
    const double C50474 = C50440 + C50467;
    const double C50473 = C50466 / C49936;
    const double C50597 = C50589 * ae;
    const double C50595 = C50069 * C50589;
    const double C50594 = C50589 * ce;
    const double C136 = (4 * (2 * C50144 + C50074 * C50156) +
                         C50074 * (3 * C50156 + C50074 * C50181)) /
                        C50002;
    const double C512 = (C50232 * (3 * C50156 + C50074 * C50181)) / C50002;
    const double C522 =
        (2 * C50144 + C50074 * C50156 + C50181 * C50272) / C50002;
    const double C50357 = -C50350;
    const double C50464 = C50456 / C50002;
    const double C50525 = -C50522;
    const double C50592 = C50586 - C50567;
    const double C50632 = -C50629;
    const double C40766 =
        (5 * (3 * C50834 + C50232 * C50860) +
         C50232 * (4 * C50860 +
                   C50232 * (3 * C50623 +
                             C50232 * (2 * C50642 +
                                       C50232 * (C50170 + C50200 * C50272))))) /
        C50002;
    const double C50658 = C50656 / C50002;
    const double C50182 = C50171 - C50180;
    const double C50856 = C50854 - C50855;
    const double C51292 = C51234 - C51274;
    const double C51293 = C51238 - C51276;
    const double C51294 = C51241 - C51277;
    const double C51295 = C51245 - C51279;
    const double C51298 = C51250 - C51284;
    const double C51299 = C51259 - C51285;
    const double C51302 = C51263 - C51290;
    const double C51303 = C51272 - C51291;
    const double C49975 = C51009 - C49972;
    const double C1467 = C171 * C51296;
    const double C1461 = C169 * C51296;
    const double C7220 = C5704 * C51296;
    const double C1214 =
        (C51296 * C51056) / C49936 + (C51251 - C51280) / C49961;
    const double C1215 =
        (C51297 * C51056) / C49936 + (2 * C51061 + C51296) / C49961;
    const double C1216 = (C51056 * C51061) / C49940 + C51297 / C49961;
    const double C24926 = C24906 * C306;
    const double C24920 = C24906 * C322;
    const double C24918 = C24906 * C318;
    const double C24912 = C24906 * C304;
    const double C25108 = C24906 * C1224;
    const double C25294 = C24906 * C1718;
    const double C25476 = C24906 * C1225;
    const double C25640 = C24906 * C1719;
    const double C31582 = C24906 * C2846;
    const double C31574 = C24906 * C1722;
    const double C31568 = C24906 * C1717;
    const double C32086 = C24906 * C3416;
    const double C33410 = C24906 * C4738;
    const double C50041 = C51106 - C50038;
    const double C24939 = C51300 * C143;
    const double C24933 = C51300 * C132;
    const double C24931 = C51300 * C130;
    const double C24925 = C51300 * C142;
    const double C24915 = C51300 * C141;
    const double C24909 = C51300 * C128;
    const double C25127 = C51300 * C334;
    const double C25121 = C51300 * C317;
    const double C25119 = C51300 * C333;
    const double C25113 = C51300 * C315;
    const double C25309 = C51300 * C532;
    const double C25303 = C51300 * C518;
    const double C25297 = C51300 * C526;
    const double C25291 = C51300 * C506;
    const double C25479 = C51300 * C335;
    const double C25473 = C51300 * C319;
    const double C25643 = C51300 * C527;
    const double C25637 = C51300 * C508;
    const double C25855 = C51300 * C985;
    const double C25849 = C51300 * C976;
    const double C31587 = C51300 * C516;
    const double C31581 = C51300 * C531;
    const double C31571 = C51300 * C530;
    const double C31565 = C51300 * C515;
    const double C32097 = C51300 * C984;
    const double C32091 = C51300 * C974;
    const double C32501 = C51300 * C1349;
    const double C32495 = C51300 * C1341;
    const double C33005 = C51300 * C1729;
    const double C32999 = C51300 * C1721;
    const double C33413 = C51300 * C2016;
    const double C33407 = C51300 * C2012;
    const double C20279 =
        (C51300 * C51153) / C50002 + (C51264 - C51286) / C50027;
    const double C8308 = C8296 + C8297;
    const double C2501 = C2477 + C2478;
    const double C2500 = C2475 + C2476;
    const double C2497 = C2469 + C2470;
    const double C2492 = C2459 + C2460;
    const double C2489 = C2453 + C2454;
    const double C2695 = C2677 + C2678;
    const double C2691 = C2669 + C2670;
    const double C2889 = C2871 + C2872;
    const double C2883 = C2859 + C2860;
    const double C3053 = C3041 + C3042;
    const double C3217 = C3205 + C3206;
    const double C3441 = C3429 + C3430;
    const double C36980 = C36967 + C36968;
    const double C36972 = C36951 + C36952;
    const double C36969 = C36945 + C36946;
    const double C37481 = C37471 + C37472;
    const double C38799 = C38787 + C38788;
    const double C24935 = C51301 * C323;
    const double C24929 = C51301 * C319;
    const double C24923 = C51301 * C335;
    const double C24917 = C51301 * C333;
    const double C24911 = C51301 * C315;
    const double C25117 = C51301 * C334;
    const double C25111 = C51301 * C317;
    const double C25299 = C51301 * C985;
    const double C25293 = C51301 * C976;
    const double C25475 = C51301 * C321;
    const double C25639 = C51301 * C978;
    const double C31585 = C51301 * C1341;
    const double C31579 = C51301 * C1349;
    const double C31573 = C51301 * C984;
    const double C31567 = C51301 * C974;
    const double C32095 = C51301 * C1729;
    const double C32089 = C51301 * C1721;
    const double C33409 = C51301 * C4747;
    const double C20280 =
        (C51301 * C51153) / C50002 + (2 * C51158 + C51300) / C50027;
    const double C20281 = (C51153 * C51158) / C50006 + C51301 / C50027;
    const double C17499 = C17478 + C17479;
    const double C17494 = C17468 + C17469;
    const double C17492 = C17464 + C17465;
    const double C17490 = C17460 + C17461;
    const double C17488 = C17456 + C17457;
    const double C17703 = C17680 + C17681;
    const double C17698 = C17670 + C17671;
    const double C17695 = C17664 + C17665;
    const double C17896 = C17872 + C17873;
    const double C17892 = C17864 + C17865;
    const double C17888 = C17856 + C17857;
    const double C18446 = C18430 + C18431;
    const double C22444 = C22425 + C22426;
    const double C22437 = C22411 + C22412;
    const double C22431 = C22401 + C22402;
    const double C22429 = C22397 + C22398;
    const double C22427 = C22393 + C22394;
    const double C22962 = C22939 + C22940;
    const double C24304 = C24294 + C24295;
    const double C173 = C158 + C159;
    const double C2504 = C2483 + C2484;
    const double C8301 = C8278 + C8279;
    const double C17497 = C17474 + C17475;
    const double C373 = C346 + C347;
    const double C2493 = C2461 + C2462;
    const double C2694 = C2675 + C2676;
    const double C8295 = C8266 + C8267;
    const double C8501 = C8472 + C8473;
    const double C17491 = C17462 + C17463;
    const double C17697 = C17668 + C17669;
    const double C562 = C539 + C540;
    const double C2886 = C2865 + C2866;
    const double C8694 = C8664 + C8665;
    const double C17890 = C17860 + C17861;
    const double C5706 = C5680 + C5681;
    const double C14269 = C14242 + C14243;
    const double C22433 = C22405 + C22406;
    const double C36977 = C36961 + C36962;
    const double C6259 = C6240 + C6241;
    const double C14259 = C14230 + C14231;
    const double C14958 = C14937 + C14938;
    const double C22430 = C22399 + C22400;
    const double C22964 = C22943 + C22944;
    const double C36973 = C36953 + C36954;
    const double C37484 = C37477 + C37478;
    const double C386 = C374 * C300;
    const double C1464 = C374 * C1458;
    const double C579 = C567 * C118;
    const double C5494 = C567 * C298;
    const double C5876 = C567 * C687;
    const double C6424 = C567 * C1122;
    const double C1014 = C1008 * C688;
    const double C1608 = C1008 * C1123;
    const double C5488 = C1008 * C299;
    const double C14235 = C8693 + C8692;
    const double C14232 = C8692 + C8693;
    const double C6260 = C6244 + C6245;
    const double C14270 = C14244 + C14245;
    const double C15499 = C15491 + C15492;
    const double C22432 = C22403 + C22404;
    const double C22966 = C22947 + C22948;
    const double C36979 = C36965 + C36966;
    const double C37887 = C37875 + C37876;
    const double C7235 = C7223 + C7224;
    const double C14955 = C14931 + C14932;
    const double C16171 = C16163 + C16164;
    const double C22961 = C22937 + C22938;
    const double C23890 = C23874 + C23875;
    const double C36971 = C36949 + C36950;
    const double C37480 = C37469 + C37470;
    const double C38391 = C38379 + C38380;
    const double C188 = C180 + C181;
    const double C712 = C698 + C699;
    const double C1141 = C1129 + C1130;
    const double C7234 = C51106 * C2855;
    const double C15498 = C51158 * C2855;
    const double C22950 = C51158 * C2855;
    const double C23887 = C17448 * C2855;
    const double C31577 = C24901 * C2855;
    const double C32503 = C51301 * C2855;
    const double C36958 = C2446 * C2855;
    const double C37884 = C2445 * C2855;
    const double C49017 = C51264 * C2855;
    const double C375 = C350 + C351;
    const double C2494 = C2463 + C2464;
    const double C2698 = C2683 + C2684;
    const double C2693 = C2673 + C2674;
    const double C8504 = C8478 + C8479;
    const double C8500 = C8470 + C8471;
    const double C17700 = C17674 + C17675;
    const double C17696 = C17666 + C17667;
    const double C377 = C356 + C357;
    const double C2496 = C2467 + C2468;
    const double C3056 = C3047 + C3048;
    const double C8299 = C8274 + C8275;
    const double C8509 = C8488 + C8489;
    const double C17495 = C17470 + C17471;
    const double C17705 = C17684 + C17685;
    const double C564 = C543 + C544;
    const double C3220 = C3211 + C3212;
    const double C8698 = C8672 + C8673;
    const double C17894 = C17868 + C17869;
    const double C568 = C551 + C552;
    const double C2892 = C2877 + C2878;
    const double C8702 = C8680 + C8681;
    const double C17898 = C17876 + C17877;
    const double C1009 = C994 + C995;
    const double C2887 = C2867 + C2868;
    const double C3444 = C3435 + C3436;
    const double C8695 = C8666 + C8667;
    const double C9252 = C9238 + C9239;
    const double C17891 = C17862 + C17863;
    const double C18448 = C18434 + C18435;
    const double C6261 = C6246 + C6247;
    const double C14268 = C14240 + C14241;
    const double C15501 = C15495 + C15496;
    const double C22434 = C22407 + C22408;
    const double C22968 = C22951 + C22952;
    const double C36976 = C36959 + C36960;
    const double C37890 = C37881 + C37882;
    const double C7236 = C7225 + C7226;
    const double C14957 = C14935 + C14936;
    const double C16173 = C16167 + C16168;
    const double C22963 = C22941 + C22942;
    const double C23892 = C23878 + C23879;
    const double C36974 = C36955 + C36956;
    const double C37483 = C37475 + C37476;
    const double C38394 = C38385 + C38386;
    const double C5711 = C5695 + C5696;
    const double C16703 = C16697 + C16698;
    const double C22442 = C22421 + C22422;
    const double C38802 = C38793 + C38794;
    const double C50103 = -C50102;
    const double C50114 = C50112 / C50078;
    const double C50324 = C50315 / C50078;
    const double C2880 = C2445 * C1350;
    const double C5499 = C51106 * C1350;
    const double C8683 = C51158 * C1350;
    const double C14952 = C51264 * C1350;
    const double C17879 = C51158 * C1350;
    const double C22958 = C17448 * C1350;
    const double C25311 = C51301 * C1350;
    const double C5690 = C51106 * C2015;
    const double C14253 = C51264 * C2015;
    const double C22416 = C17448 * C2015;
    const double C50492 = -C50491;
    const double C50510 = C50507 / C50078;
    const double C50668 = C50666 / C50078;
    const double C325 =
        (2 * C50144 + C50074 * C50156 +
         C50069 * (C50069 * C50181 + C50176 * ae) + C50069 * C50176 * ae) /
        C50002;
    const double C327 = (C50069 * (3 * C50156 + C50074 * C50181) +
                         (3 * C50151 + C50074 * C50176) * ae) /
                        C50002;
    const double C980 = (C50232 * (C50069 * C50181 + C50176 * ae)) / C50002;
    const double C124 = 4 * (2 * C50139 + C50074 * C50151) +
                        C50074 * (3 * C50151 + C50074 * C50176);
    const double C308 = 2 * C50139 + C50074 * C50151 + C50176 * C50072;
    const double C309 = C50069 * (3 * C50151 + C50074 * C50176);
    const double C499 = C50232 * (3 * C50151 + C50074 * C50176);
    const double C504 = 2 * C50139 + C50074 * C50151 + C50176 * C50272;
    const double C972 = C50232 * C50069 * C50176;
    const double C1226 =
        2 * C50069 * C50176 + C50069 * (C50176 + C50206 * C50072);
    const double C1720 = C50232 * (C50176 + C50206 * C50072);
    const double C2001 =
        2 * C50232 * C50176 + C50232 * (C50176 + C50206 * C50272);
    const double C1231 = (2 * (C50069 * C50156 + C50151 * ae) +
                          C50069 * (C50156 + C50069 * C50261 + C50257 * ae) +
                          (C50151 + C50168 * C50072) * ae) /
                         C50002;
    const double C1345 =
        (C50069 * C50156 + C50151 * ae + C50261 * C50272) / C50002;
    const double C1725 =
        (C50232 * (C50156 + C50069 * C50261 + C50257 * ae)) / C50002;
    const double C5880 = C117 * C1339;
    const double C8686 = C8258 * C1339;
    const double C17882 = C17454 * C1339;
    const double C1232 =
        (-2 * (C50069 * C50155 + C50151 * ce)) / C49936 -
        (C50069 * (C50069 * C50260 + C50155 + C50257 * ce)) / C49936 -
        ((C50151 + C50168 * C50072) * ce) / C49936;
    const double C1346 =
        -(C50260 * C50272 + C50069 * C50155 + C50151 * ce) / C49936;
    const double C1726 =
        -(C50232 * (C50069 * C50260 + C50155 + C50257 * ce)) / C49936;
    const double C50335 = C50163 + C50332;
    const double C50444 = C50433 / C50078;
    const double C2681 = C2451 * C2653;
    const double C25124 = C24906 * C2653;
    const double C2875 = C2451 * C2847;
    const double C5500 = C117 * C2847;
    const double C14949 = C8258 * C2847;
    const double C22955 = C17454 * C2847;
    const double C25306 = C24906 * C2847;
    const double C3433 = C2451 * C3417;
    const double C14020 = C8258 * C3417;
    const double C25852 = C24906 * C3417;
    const double C27944 = C17454 * C3417;
    const double C50334 = C50331 + C50159;
    const double C50448 = C50437 / C49936;
    const double C50443 = C50431 / C49936;
    const double C50418 = C50414 + C50401;
    const double C50651 = C50646 / C50078;
    const double C24289 =
        (4 * (2 * C50232 * C50300 + C50232 * C50850) +
         C50232 *
             (3 * C50850 +
              C50232 * (2 * C50641 + C50232 * (C50400 + C50574 * C50272)))) /
        C50002;
    const double C3690 = 4 * (2 * C50240 + C50069 * C50299) +
                         C50069 * (3 * C50299 + C50069 * C50413);
    const double C3844 = 2 * C50240 + C50069 * C50299 + C50413 * C50272;
    const double C4338 = C50232 * (3 * C50299 + C50069 * C50413);
    const double C21672 =
        2 * C50232 * C50413 + C50232 * (C50413 + C50589 * C50272);
    const double C50417 = C50411 + C50398;
    const double C50577 = -C50564;
    const double C50650 = C50645 / C49936;
    const double C24288 =
        4 * ((-2 * C50232 * C50297) / C49936 - (C50232 * C50847) / C49936) +
        C50232 * ((-3 * C50847) / C49936 +
                  C50232 * ((-2 * C50639) / C49936 -
                            (C50232 * (C50571 * C50272 + C50397)) / C49936));
    const double C40764 =
        5 * (3 * C50941 + C50232 * C50956) +
        C50232 * (4 * C50956 +
                  C50232 * (3 * C50954 +
                            C50232 * (2 * C50232 * C50093 +
                                      C50232 * (C50093 + C50108 * C50272))));
    const double C175 = C162 + C163;
    const double C8304 = C8284 + C8285;
    const double C17500 = C17480 + C17481;
    const double C378 = C358 + C359;
    const double C2498 = C2471 + C2472;
    const double C3054 = C3043 + C3044;
    const double C8510 = C8490 + C8491;
    const double C8506 = C8482 + C8483;
    const double C17706 = C17686 + C17687;
    const double C17702 = C17678 + C17679;
    const double C380 = C364 + C365;
    const double C2502 = C2479 + C2480;
    const double C8302 = C8280 + C8281;
    const double C8869 = C8858 + C8859;
    const double C17498 = C17476 + C17477;
    const double C18065 = C18054 + C18055;
    const double C565 = C545 + C546;
    const double C9032 = C9022 + C9023;
    const double C18228 = C18218 + C18219;
    const double C569 = C553 + C554;
    const double C8704 = C8684 + C8685;
    const double C17900 = C17880 + C17881;
    const double C1010 = C996 + C997;
    const double C3218 = C3207 + C3208;
    const double C8697 = C8670 + C8671;
    const double C9254 = C9242 + C9243;
    const double C17893 = C17866 + C17867;
    const double C18450 = C18438 + C18439;
    const double C5709 = C5691 + C5692;
    const double C2680 = C2445 * C1229;
    const double C2666 = C2446 * C1229;
    const double C8477 = C51158 * C1229;
    const double C17673 = C51158 * C1229;
    const double C25123 = C51301 * C1229;
    const double C25109 = C24901 * C1229;
    const double C2874 = C2445 * C1343;
    const double C5497 = C51106 * C1343;
    const double C8679 = C51158 * C1343;
    const double C14948 = C51264 * C1343;
    const double C17875 = C51158 * C1343;
    const double C22954 = C17448 * C1343;
    const double C25305 = C51301 * C1343;
    const double C2864 = C2446 * C1723;
    const double C3432 = C2445 * C1723;
    const double C5491 = C51106 * C1723;
    const double C9237 = C51158 * C1723;
    const double C14019 = C51264 * C1723;
    const double C18433 = C51158 * C1723;
    const double C25295 = C24901 * C1723;
    const double C25851 = C51301 * C1723;
    const double C27943 = C17448 * C1723;
    const double C6253 = C51106 * C4743;
    const double C14251 = C51158 * C4743;
    const double C22414 = C51158 * C4743;
    const double C50333 = C50330 / C50002;
    const double C5719 = C5707 * C118;
    const double C6255 = C5707 * C687;
    const double C6701 = C5707 * C1122;
    const double C5725 = C5713 * C118;
    const double C50310 = C50307 + C50301;
    const double C6705 = C6693 + C6694;
    const double C16702 = C16695 + C16696;
    const double C22443 = C22423 + C22424;
    const double C23382 = C23371 + C23372;
    const double C38800 = C38789 + C38790;
    const double C48520 = C48509 + C48510;
    const double C24305 = C24296 + C24297;
    const double C40154 = C40147 + C40148;
    const double C49427 = C49418 + C49419;
    const double C50416 = C50410 - C50394;
    const double C50512 = C50511 / C50002;
    const double C40774 = C40770 + C40771;
    const double C174 = C160 + C161;
    const double C8306 = C8288 + C8289;
    const double C17502 = C17484 + C17485;
    const double C2686 = C2445 * C1236;
    const double C2672 = C2446 * C1236;
    const double C8481 = C51158 * C1236;
    const double C17677 = C51158 * C1236;
    const double C25129 = C51301 * C1236;
    const double C25115 = C24901 * C1236;
    const double C2870 = C2446 * C1730;
    const double C3438 = C2445 * C1730;
    const double C5493 = C51106 * C1730;
    const double C9241 = C51158 * C1730;
    const double C14023 = C51264 * C1730;
    const double C18437 = C51158 * C1730;
    const double C25301 = C24901 * C1730;
    const double C25857 = C51301 * C1730;
    const double C27947 = C17448 * C1730;
    const double C2882 = C2446 * C2856;
    const double C5503 = C51106 * C2856;
    const double C14954 = C51158 * C2856;
    const double C22960 = C51158 * C2856;
    const double C25313 = C24901 * C2856;
    const double C2685 = C2450 * C1230;
    const double C2671 = C2451 * C1230;
    const double C8480 = C8258 * C1230;
    const double C17676 = C17454 * C1230;
    const double C25114 = C24906 * C1230;
    const double C2879 = C2450 * C1344;
    const double C5498 = C117 * C1344;
    const double C8682 = C8258 * C1344;
    const double C14951 = C8257 * C1344;
    const double C17878 = C17454 * C1344;
    const double C22957 = C17453 * C1344;
    const double C2869 = C2451 * C1724;
    const double C3437 = C2450 * C1724;
    const double C5492 = C117 * C1724;
    const double C9240 = C8258 * C1724;
    const double C14022 = C8257 * C1724;
    const double C18436 = C17454 * C1724;
    const double C25300 = C24906 * C1724;
    const double C27946 = C17453 * C1724;
    const double C6256 = C117 * C4741;
    const double C14254 = C8258 * C4741;
    const double C22417 = C17454 * C4741;
    const double C50309 = C50306 + C50298;
    const double C50402 = -C50391;
    const double C50120 = -C50119;
    const double C50457 = C50447 / C50078;
    const double C50497 = C50496 / C49936;
    const double C50521 = C50069 * C50518;
    const double C50628 = -C50625;
    const double C50654 = C50649 / C50078;
    const double C50215 = C50074 * C50213;
    const double C50266 = C50069 * C50213;
    const double C2006 =
        (2 * C50232 * C50181 + C50232 * (C50181 + C50213 * C50272)) / C50002;
    const double C50359 = C50069 * C50355;
    const double C6232 =
        (2 * C50232 * C50261 + C50232 * (C50261 + C50355 * C50272)) / C50002;
    const double C50475 = C50192 + C50468;
    const double C50596 = C50590 + C50575;
    const double C50214 = C50201 - C50211;
    const double C50358 = C50069 * C50352;
    const double C6233 = (-2 * C50232 * C50260) / C49936 -
                         (C50232 * (C50352 * C50272 + C50260)) / C49936;
    const double C50472 = C50465 + C50186;
    const double C50593 = C50587 + C50572;
    const double C50311 = C50308 - C50296;
    const double C50212 = C50188 + C50209;
    const double C1340 = C50069 * C50176 + C50265 * C50272;
    const double C50268 = C50264 / C49936;
    const double C3691 = 4 * (2 * C50249 + C50069 * C50327) +
                         C50069 * (3 * C50327 + C50069 * C50474);
    const double C3845 = 2 * C50249 + C50069 * C50327 + C50474 * C50272;
    const double C4339 = C50232 * (3 * C50327 + C50069 * C50474);
    const double C50602 = C50557 + C50595;
    const double C50601 = C50594 / C49936;
    const double C165 = C51106 * C136;
    const double C829 = C51106 * C512;
    const double C558 = C51106 * C522;
    const double C50360 = C50357 / C50002;
    const double C50471 = C50464 - C50446;
    const double C50526 = C50525 / C50002;
    const double C50599 = C50592 - C50568;
    const double C50634 = C50632 / C50002;
    const double C50660 = C50658 - C50653;
    const double C137 =
        4 * ((-2 * C50143) / C49936 - (C50074 * C50155) / C49936) +
        C50074 * ((-3 * C50155) / C49936 + C50074 * C50182);
    const double C326 = (-2 * C50143) / C49936 - (C50074 * C50155) / C49936 +
                        C50069 * (C50069 * C50182 - (C50176 * ce) / C49936) -
                        (C50069 * C50176 * ce) / C49936;
    const double C328 = C50069 * ((-3 * C50155) / C49936 + C50074 * C50182) -
                        ((3 * C50151 + C50074 * C50176) * ce) / C49936;
    const double C513 = C50232 * ((-3 * C50155) / C49936 + C50074 * C50182);
    const double C523 =
        (-2 * C50143) / C49936 - (C50074 * C50155) / C49936 + C50182 * C50272;
    const double C981 = C50232 * (C50069 * C50182 - (C50176 * ce) / C49936);
    const double C40765 =
        5 * ((-3 * C50831) / C49936 + C50232 * C50856) +
        C50232 * (4 * C50856 +
                  C50232 * ((-3 * C50624) / C49936 +
                            C50232 * ((-2 * C50643) / C49936 -
                                      (C50232 * (C50196 * C50272 + C50166)) /
                                          C49936)));
    const double C108 = (C51292 * C50967) / C50002 + (C51236 - C51275) / C50027;
    const double C109 =
        (C51293 * C50967) / C50002 + (2 * C50977 + C51292) / C50027;
    const double C110 = (C50967 * C50977) / C50006 + C51293 / C50027;
    const double C112 = (C51294 * C50986) / C49936 + (C51243 - C51278) / C49961;
    const double C113 =
        (C51295 * C50986) / C49936 + (2 * C50996 + C51294) / C49961;
    const double C114 = (C50986 * C50996) / C49940 + C51295 / C49961;
    const double C1997 =
        (C51298 * C51084) / C49936 + (C51252 - C51283) / C49961;
    const double C1998 =
        (C51299 * C51084) / C49936 + (2 * C51089 + C51298) / C49961;
    const double C1999 = (C51084 * C51089) / C49940 + C51299 / C49961;
    const double C39356 =
        (C51302 * C51181) / C50002 + (C51265 - C51289) / C50027;
    const double C39357 =
        (C51303 * C51181) / C50002 + (2 * C51186 + C51302) / C50027;
    const double C39358 = (C51181 * C51186) / C50006 + C51303 / C50027;
    const double C49977 = C49975 * ce;
    const double C24953 = C24926 + C24927;
    const double C24949 = C24918 + C24919;
    const double C24946 = C24912 + C24913;
    const double C31593 = C31574 + C31575;
    const double C31590 = C31568 + C31569;
    const double C50043 = C50041 * ae;
    const double C8312 = C8308 * C118;
    const double C8854 = C8308 * C687;
    const double C9404 = C8308 * C1122;
    const double C17504 = C17492 + C17493;
    const double C28151 = C17889 + C17888;
    const double C28148 = C17888 + C17889;
    const double C183 = C173 * C51009;
    const double C363 = C173 * C293;
    const double C703 = C173 * C51251;
    const double C1134 = C173 * C1117;
    const double C1473 = C173 * C51296;
    const double C385 = C373 * C294;
    const double C697 = C373 * C51061;
    const double C1128 = C373 * C51061;
    const double C1463 = C373 * C51297;
    const double C574 = C562 * C51009;
    const double C992 = C562 * C51251;
    const double C1609 = C562 * C1117;
    const double C5487 = C562 * C293;
    const double C6859 = C562 * C51296;
    const double C5718 = C5706 * C51009;
    const double C6243 = C5706 * C51251;
    const double C6689 = C5706 * C1117;
    const double C7228 = C5706 * C51296;
    const double C7542 = C5706 * C293;
    const double C6269 = C6259 * C51061;
    const double C6687 = C6259 * C51061;
    const double C7222 = C6259 * C51297;
    const double C7538 = C6259 * C294;
    const double C14263 = C14235 * C118;
    const double C14945 = C14235 * C687;
    const double C15961 = C14235 * C1122;
    const double C14260 = C14232 * C118;
    const double C14939 = C14232 * C687;
    const double C15955 = C14232 * C1122;
    const double C6270 = C6260 * C688;
    const double C6690 = C6260 * C1123;
    const double C7543 = C6260 * C299;
    const double C47624 = C14271 + C14270;
    const double C22445 = C22431 + C22432;
    const double C7239 = C7235 * C1458;
    const double C7539 = C7235 * C300;
    const double C192 = C188 * C51122;
    const double C11118 = C188 * C51265;
    const double C34010 = C188 * C34007;
    const double C716 = C712 - C700;
    const double C1143 = C1141 - C1131;
    const double C387 = C375 * C295;
    const double C1465 = C375 * C1453;
    const double C389 = C377 * C294;
    const double C701 = C377 * C51061;
    const double C1132 = C377 * C51061;
    const double C1469 = C377 * C51297;
    const double C8309 = C8298 + C8299;
    const double C17505 = C17494 + C17495;
    const double C576 = C564 * C51009;
    const double C998 = C564 * C51251;
    const double C1613 = C564 * C1117;
    const double C11271 = C564 * C293;
    const double C12470 = C564 * C51296;
    const double C580 = C568 * C51009;
    const double C5495 = C568 * C293;
    const double C5877 = C568 * C51251;
    const double C6425 = C568 * C1117;
    const double C6865 = C568 * C51296;
    const double C1015 = C1009 * C51061;
    const double C1611 = C1009 * C51061;
    const double C5489 = C1009 * C294;
    const double C6861 = C1009 * C51297;
    const double C14234 = C8695 + C8694;
    const double C14233 = C8694 + C8695;
    const double C28150 = C17891 + C17890;
    const double C28149 = C17890 + C17891;
    const double C6271 = C6261 * C51061;
    const double C6691 = C6261 * C51061;
    const double C7230 = C6261 * C51297;
    const double C7544 = C6261 * C294;
    const double C47625 = C14269 + C14268;
    const double C22446 = C22433 + C22434;
    const double C7240 = C7236 * C1453;
    const double C7540 = C7236 * C295;
    const double C5723 = C5711 * C51009;
    const double C6695 = C5711 * C1117;
    const double C8150 = C5711 * C51251;
    const double C40486 = C5711 * C51296;
    const double C40694 = C5711 * C293;
    const double C50104 = C50103 / C50002;
    const double C5708 = C5689 + C5690;
    const double C14274 = C14252 + C14253;
    const double C22439 = C22415 + C22416;
    const double C50493 = C50492 / C50002;
    const double C369 = C51106 * C325;
    const double C2482 = C2446 * C325;
    const double C8861 = C51158 * C325;
    const double C18057 = C51158 * C325;
    const double C24937 = C24901 * C325;
    const double C707 = C51106 * C327;
    const double C8287 = C51158 * C327;
    const double C17483 = C51158 * C327;
    const double C1003 = C51106 * C980;
    const double C9025 = C51158 * C980;
    const double C18221 = C51158 * C980;
    const double C164 = C117 * C124;
    const double C368 = C117 * C308;
    const double C2481 = C2451 * C308;
    const double C8860 = C8258 * C308;
    const double C18056 = C17454 * C308;
    const double C24936 = C24906 * C308;
    const double C706 = C117 * C309;
    const double C8286 = C8258 * C309;
    const double C17482 = C17454 * C309;
    const double C828 = C117 * C499;
    const double C557 = C117 * C504;
    const double C1002 = C117 * C972;
    const double C9024 = C8258 * C972;
    const double C18220 = C17454 * C972;
    const double C3046 = C2446 * C1231;
    const double C8493 = C51158 * C1231;
    const double C17689 = C51158 * C1231;
    const double C25477 = C24901 * C1231;
    const double C5881 = C51106 * C1345;
    const double C8687 = C51158 * C1345;
    const double C17883 = C51158 * C1345;
    const double C3210 = C2446 * C1725;
    const double C9245 = C51158 * C1725;
    const double C11275 = C51106 * C1725;
    const double C18441 = C51158 * C1725;
    const double C25641 = C24901 * C1725;
    const double C3051 = C2451 * C1232;
    const double C8496 = C8258 * C1232;
    const double C17692 = C17454 * C1232;
    const double C25482 = C24906 * C1232;
    const double C5884 = C117 * C1346;
    const double C8690 = C8258 * C1346;
    const double C17886 = C17454 * C1346;
    const double C3215 = C2451 * C1726;
    const double C9248 = C8258 * C1726;
    const double C11276 = C117 * C1726;
    const double C18444 = C17454 * C1726;
    const double C25646 = C24906 * C1726;
    const double C50338 = C50335 + C50329;
    const double C50337 = C50334 + C50326;
    const double C50455 = -C50443;
    const double C50422 = C50069 * C50418;
    const double C50558 = 3 * C50418;
    const double C50544 = C50418 * ce;
    const double C23884 = C17454 * C3844;
    const double C32498 = C24906 * C3844;
    const double C37879 = C2451 * C3844;
    const double C49014 = C8258 * C3844;
    const double C33002 = C24906 * C4338;
    const double C38383 = C2451 * C4338;
    const double C50421 = C50069 * C50417;
    const double C50550 = -3 * C50417;
    const double C50543 = ae * C50417;
    const double C50585 = C50577 / C50002;
    const double C50655 = -C50650;
    const double C185 = C175 * C118;
    const double C709 = C175 * C687;
    const double C1139 = C175 * C1122;
    const double C390 = C378 * C300;
    const double C1470 = C378 * C1458;
    const double C8856 = C8506 + C8507;
    const double C18052 = C17702 + C17703;
    const double C392 = C380 * C299;
    const double C704 = C380 * C688;
    const double C1135 = C380 * C1123;
    const double C8311 = C8302 + C8303;
    const double C17507 = C17498 + C17499;
    const double C577 = C565 * C118;
    const double C1005 = C565 * C687;
    const double C1618 = C565 * C1122;
    const double C581 = C569 * C118;
    const double C5883 = C569 * C687;
    const double C6430 = C569 * C1122;
    const double C1016 = C1010 * C688;
    const double C1612 = C1010 * C1123;
    const double C11272 = C1010 * C299;
    const double C9031 = C8697 + C8696;
    const double C14668 = C8696 + C8697;
    const double C18227 = C17893 + C17892;
    const double C28551 = C17892 + C17893;
    const double C5721 = C5709 * C118;
    const double C2696 = C2679 + C2680;
    const double C2689 = C2665 + C2666;
    const double C8503 = C8476 + C8477;
    const double C17699 = C17672 + C17673;
    const double C25132 = C25108 + C25109;
    const double C2890 = C2873 + C2874;
    const double C5506 = C5496 + C5497;
    const double C8701 = C8678 + C8679;
    const double C14965 = C14947 + C14948;
    const double C17897 = C17874 + C17875;
    const double C22969 = C22953 + C22954;
    const double C2885 = C2863 + C2864;
    const double C3442 = C3431 + C3432;
    const double C5504 = C5490 + C5491;
    const double C9251 = C9236 + C9237;
    const double C14026 = C14018 + C14019;
    const double C18447 = C18432 + C18433;
    const double C25316 = C25294 + C25295;
    const double C27950 = C27942 + C27943;
    const double C6266 = C6252 + C6253;
    const double C14273 = C14250 + C14251;
    const double C22438 = C22413 + C22414;
    const double C50336 = C50333 - C50323;
    const double C2655 =
        (3 * (C50135 + C50069 * C50244 + C50240 * ae) +
         C50069 * (2 * C50244 + C50069 * C50310 + C50299 * ae) +
         (2 * C50240 + C50069 * C50299) * ae) /
        C50002;
    const double C2849 =
        (C50135 + C50069 * C50244 + C50240 * ae + C50310 * C50272) / C50002;
    const double C3419 =
        (C50232 * (2 * C50244 + C50069 * C50310 + C50299 * ae)) / C50002;
    const double C4746 =
        (2 * C50232 * C50310 + C50232 * (C50310 + C50418 * C50272)) / C50002;
    const double C6709 = C6705 * C1123;
    const double C8149 = C6705 * C688;
    const double C40695 = C6705 * C299;
    const double C49415 = C16702 + C16701;
    const double C24293 = C22443 + C22444;
    const double C40157 = C40154 * C1123;
    const double C41105 = C40154 * C688;
    const double C50420 = C50416 - C50395;
    const double C50513 = C50512 - C50509;
    const double C40776 = C40774 * C118;
    const double C184 = C174 * C51009;
    const double C708 = C174 * C51251;
    const double C1138 = C174 * C1117;
    const double C2699 = C2685 + C2686;
    const double C2692 = C2671 + C2672;
    const double C8505 = C8480 + C8481;
    const double C17701 = C17676 + C17677;
    const double C25135 = C25114 + C25115;
    const double C2893 = C2879 + C2880;
    const double C5507 = C5498 + C5499;
    const double C8703 = C8682 + C8683;
    const double C14967 = C14951 + C14952;
    const double C17899 = C17878 + C17879;
    const double C22971 = C22957 + C22958;
    const double C2888 = C2869 + C2870;
    const double C3445 = C3437 + C3438;
    const double C5505 = C5492 + C5493;
    const double C9253 = C9240 + C9241;
    const double C14028 = C14022 + C14023;
    const double C18449 = C18436 + C18437;
    const double C25319 = C25300 + C25301;
    const double C27952 = C27946 + C27947;
    const double C3425 =
        2 * ((-(C50232 * C50142 * ce) / C49936) / C50002 -
             (ae * C50232 * C50141) / C50078 - (C50069 * C50371) / C50078) -
        (ae * C50232 * C50309) / C50078 - (C50232 * C50310 * ce) / C50078 +
        C50069 * ((-(ae * C50232 * C50297) / C49936) / C50002 -
                  C50371 / C50078 - (C50232 * C50300 * ce) / C50078 +
                  C50069 * ((-(C50232 * C50152 * ce) / C49936) / C50002 -
                            (ae * C50232 * C50150) / C50078 -
                            (C50069 * C50232 * C50100) / C50078));
    const double C2656 =
        (-3 * (C50069 * C50243 + C50134 + C50240 * ce)) / C49936 +
        C50069 * ((-2 * C50243) / C49936 - (C50069 * C50309) / C49936 -
                  (C50299 * ce) / C49936) -
        ((2 * C50240 + C50069 * C50299) * ce) / C49936;
    const double C2850 =
        -(C50309 * C50272 + C50069 * C50243 + C50134 + C50240 * ce) / C49936;
    const double C3420 =
        C50232 * ((-2 * C50243) / C49936 - (C50069 * C50309) / C49936 -
                  (C50299 * ce) / C49936);
    const double C4744 = (-2 * C50232 * C50309) / C49936 -
                         (C50232 * (C50417 * C50272 + C50309)) / C49936;
    const double C50409 = C50402 / C50002;
    const double C50121 = C50120 / C50002;
    const double C50498 = -C50497;
    const double C50524 = C50521 / C50078;
    const double C50631 = C50628 / C50002;
    const double C50217 = C50191 + C50215;
    const double C50269 = C50266 + C50267;
    const double C50362 = C50177 + C50359;
    const double C50479 = C50475 + C50462;
    const double C50603 = C50069 * C50596;
    const double C23363 =
        (3 * (C50310 + C50418 * C50272) +
         C50232 * (2 * C50232 * C50418 + C50232 * (C50418 + C50596 * C50272))) /
        C50002;
    const double C50216 = C50074 * C50214;
    const double C50263 = C50069 * C50214;
    const double C2005 =
        2 * C50232 * C50182 + C50232 * (C50182 + C50214 * C50272);
    const double C50361 = C50358 + C50175;
    const double C50478 = C50472 + C50459;
    const double C50600 = C50069 * C50593;
    const double C23364 =
        (-3 * (C50417 * C50272 + C50309)) / C49936 +
        C50232 * ((-2 * C50232 * C50417) / C49936 -
                  (C50232 * (C50593 * C50272 + C50417)) / C49936);
    const double C2661 =
        3 * ((-(ae * C50243) / C49936) / C50002 - C50082 / C50078 -
             (C50244 * ce) / C50078 + C50069 * C50311) +
        (((-2 * C50243) / C49936 - (C50069 * C50309) / C49936 -
          (C50299 * ce) / C49936) *
         ae) /
            C50002 -
        ((2 * C50244 + C50069 * C50310 + C50299 * ae) * ce) / C50078 +
        C50069 * (2 * C50311 - (ae * C50309) / C50078 - (C50310 * ce) / C50078 +
                  C50069 * ((-(ae * C50297) / C49936) / C50002 - C50096 -
                            (C50300 * ce) / C50078 +
                            C50069 * ((-(C50152 * ce) / C49936) / C50002 -
                                      (ae * C50150) / C50078 -
                                      (C50069 * C50100) / C50078)));
    const double C125 = 5 * (3 * C50151 + C50074 * C50176) +
                        C50074 * (4 * C50176 + C50074 * C50212);
    const double C310 = 3 * C50151 + C50074 * C50176 + C50212 * C50072;
    const double C505 = 3 * C50151 + C50074 * C50176 + C50212 * C50272;
    const double C689 = C50069 * (4 * C50176 + C50074 * C50212);
    const double C823 = C50232 * (4 * C50176 + C50074 * C50212);
    const double C973 = C50232 * C50069 * C50212;
    const double C20974 = 5 * (3 * C50299 + C50069 * C50413) +
                          C50069 * (4 * C50413 + C50069 * C50602);
    const double C21076 = 3 * C50299 + C50069 * C50413 + C50602 * C50272;
    const double C21406 = C50232 * (4 * C50413 + C50069 * C50602);
    const double C50363 = C50360 - C50351;
    const double C50477 = C50471 - C50457;
    const double C50527 = C50526 - C50523;
    const double C50604 = C50069 * C50599;
    const double C50636 = C50634 - C50630;
    const double C50662 = C50660 - C50654;
    const double C166 = C117 * C137;
    const double C370 = C117 * C326;
    const double C2487 = C2451 * C326;
    const double C8864 = C8258 * C326;
    const double C18060 = C17454 * C326;
    const double C24942 = C24906 * C326;
    const double C710 = C117 * C328;
    const double C8290 = C8258 * C328;
    const double C17486 = C17454 * C328;
    const double C830 = C117 * C513;
    const double C559 = C117 * C523;
    const double C1006 = C117 * C981;
    const double C9028 = C8258 * C981;
    const double C18224 = C17454 * C981;
    const double C49979 = C49977 / C49936;
    const double C50045 = C50043 / C50002;
    const double C17508 = C17504 * C118;
    const double C18050 = C17504 * C687;
    const double C18600 = C17504 * C1122;
    const double C28157 = C28151 * C118;
    const double C28820 = C28151 * C687;
    const double C29808 = C28151 * C1122;
    const double C28154 = C28148 * C118;
    const double C28814 = C28148 * C687;
    const double C29802 = C28148 * C1122;
    const double C191 = C183 + C182;
    const double C189 = C182 + C183;
    const double C713 = C702 + C703;
    const double C1142 = C1133 + C1134;
    const double C5686 = C574 + C573;
    const double C5682 = C573 + C574;
    const double C6250 = C992 + C993;
    const double C6248 = C993 + C992;
    const double C7065 = C1609 + C1610;
    const double C7064 = C1610 + C1609;
    const double C5727 = C5717 + C5718;
    const double C8148 = C6242 + C6243;
    const double C6703 = C6688 + C6689;
    const double C47626 = C47624 * C118;
    const double C48505 = C47624 * C1122;
    const double C49917 = C47624 * C687;
    const double C22448 = C22445 * C118;
    const double C23367 = C22445 * C1122;
    const double C24795 = C22445 * C687;
    const double C720 = C716 - C701;
    const double C1145 = C1143 - C1132;
    const double C8313 = C8309 * C51009;
    const double C8855 = C8309 * C51251;
    const double C9405 = C8309 * C1117;
    const double C17509 = C17505 * C51009;
    const double C18051 = C17505 * C51251;
    const double C18601 = C17505 * C1117;
    const double C833 = C576 + C575;
    const double C6036 = C575 + C576;
    const double C11575 = C999 + C998;
    const double C11924 = C998 + C999;
    const double C12074 = C1614 + C1613;
    const double C12669 = C1613 + C1614;
    const double C5685 = C580 + C579;
    const double C5683 = C579 + C580;
    const double C6251 = C5877 + C5876;
    const double C6249 = C5876 + C5877;
    const double C6692 = C6424 + C6425;
    const double C7066 = C6425 + C6424;
    const double C14262 = C14234 * C51009;
    const double C14944 = C14234 * C51251;
    const double C15960 = C14234 * C1117;
    const double C14261 = C14233 * C51009;
    const double C14940 = C14233 * C51251;
    const double C15956 = C14233 * C1117;
    const double C28156 = C28150 * C51009;
    const double C28819 = C28150 * C51251;
    const double C29807 = C28150 * C1117;
    const double C28155 = C28149 * C51009;
    const double C28815 = C28149 * C51251;
    const double C29803 = C28149 * C1117;
    const double C47627 = C47625 * C51009;
    const double C48506 = C47625 * C1117;
    const double C49918 = C47625 * C51251;
    const double C22449 = C22446 * C51009;
    const double C23368 = C22446 * C1117;
    const double C24796 = C22446 * C51251;
    const double C7653 = C5723 + C5724;
    const double C39557 = C5724 + C5723;
    const double C40146 = C6696 + C6695;
    const double C41104 = C8151 + C8150;
    const double C50105 = C50104 - C50096;
    const double C5720 = C5708 * C51009;
    const double C6254 = C5708 * C51251;
    const double C6700 = C5708 * C1117;
    const double C50494 = C50493 - C50096;
    const double C176 = C164 + C165;
    const double C382 = C368 + C369;
    const double C2503 = C2481 + C2482;
    const double C8870 = C8860 + C8861;
    const double C18066 = C18056 + C18057;
    const double C24958 = C24936 + C24937;
    const double C714 = C706 + C707;
    const double C8305 = C8286 + C8287;
    const double C17501 = C17482 + C17483;
    const double C834 = C828 + C829;
    const double C571 = C557 + C558;
    const double C1012 = C1002 + C1003;
    const double C9033 = C9024 + C9025;
    const double C18229 = C18220 + C18221;
    const double C3055 = C3045 + C3046;
    const double C8511 = C8492 + C8493;
    const double C17707 = C17688 + C17689;
    const double C25486 = C25476 + C25477;
    const double C5886 = C5880 + C5881;
    const double C8705 = C8686 + C8687;
    const double C17901 = C17882 + C17883;
    const double C3219 = C3209 + C3210;
    const double C9255 = C9244 + C9245;
    const double C11278 = C11274 + C11275;
    const double C18451 = C18440 + C18441;
    const double C25650 = C25640 + C25641;
    const double C2657 =
        (3 * (C50144 + C50069 * C50253 + C50249 * ae) +
         C50069 * (2 * C50253 + C50069 * C50338 + C50327 * ae) +
         (2 * C50249 + C50069 * C50327) * ae) /
        C50002;
    const double C2851 =
        (C50144 + C50069 * C50253 + C50249 * ae + C50338 * C50272) / C50002;
    const double C3421 =
        (C50232 * (2 * C50253 + C50069 * C50338 + C50327 * ae)) / C50002;
    const double C3426 =
        2 * ((-(C50232 * C50163 * ce) / C49936) / C50002 -
             (ae * C50232 * C50159) / C50078 - (C50069 * C50373) / C50078) -
        (ae * C50232 * C50337) / C50078 - (C50232 * C50338 * ce) / C50078 +
        C50069 * ((-(ae * C50232 * C50325) / C49936) / C50002 -
                  C50373 / C50078 - (C50232 * C50328 * ce) / C50078 +
                  C50069 * ((-(C50232 * C50192 * ce) / C49936) / C50002 -
                            (ae * C50232 * C50186) / C50078 -
                            (C50069 * C50232 * C50074 * C50117) / C50078));
    const double C2658 =
        (-3 * (C50069 * C50252 + C50143 + C50249 * ce)) / C49936 +
        C50069 * ((-2 * C50252) / C49936 - (C50069 * C50337) / C49936 -
                  (C50327 * ce) / C49936) -
        ((2 * C50249 + C50069 * C50327) * ce) / C49936;
    const double C2852 =
        -(C50337 * C50272 + C50069 * C50252 + C50143 + C50249 * ce) / C49936;
    const double C3422 =
        C50232 * ((-2 * C50252) / C49936 - (C50069 * C50337) / C49936 -
                  (C50327 * ce) / C49936);
    const double C50463 = C50455 / C50002;
    const double C50425 = C50388 + C50422;
    const double C50563 = C50544 / C50078;
    const double C50424 = C50421 / C49936;
    const double C50569 = C50550 / C49936;
    const double C50562 = C50543 / C50078;
    const double C50591 = C50585 - C50111;
    const double C50657 = C50655 / C50002;
    const double C8867 = C8856 * C688;
    const double C9406 = C8856 * C1123;
    const double C18063 = C18052 * C688;
    const double C18602 = C18052 * C1123;
    const double C8315 = C8311 * C118;
    const double C17511 = C17507 * C118;
    const double C9037 = C9031 * C118;
    const double C14670 = C14668 * C118;
    const double C18233 = C18227 * C118;
    const double C28553 = C28551 * C118;
    const double C5512 = C5506 * C299;
    const double C5878 = C5506 * C688;
    const double C6426 = C5506 * C1123;
    const double C14239 = C8701 + C8700;
    const double C14236 = C8700 + C8701;
    const double C22410 = C17897 + C17896;
    const double C28152 = C17896 + C17897;
    const double C5510 = C5504 * C300;
    const double C6862 = C5504 * C1458;
    const double C14943 = C9250 + C9251;
    const double C14941 = C9251 + C9250;
    const double C28818 = C18446 + C18447;
    const double C28816 = C18447 + C18446;
    const double C6276 = C6266 * C688;
    const double C6699 = C6266 * C1123;
    const double C50339 = C50336 - C50324;
    const double C7232 = C51106 * C2849;
    const double C15494 = C51158 * C2849;
    const double C22946 = C51158 * C2849;
    const double C23883 = C17448 * C2849;
    const double C31583 = C24901 * C2849;
    const double C32497 = C51301 * C2849;
    const double C36964 = C2446 * C2849;
    const double C37878 = C2445 * C2849;
    const double C49013 = C51264 * C2849;
    const double C16166 = C51158 * C3419;
    const double C23877 = C51158 * C3419;
    const double C32087 = C24901 * C3419;
    const double C33001 = C51301 * C3419;
    const double C37468 = C2446 * C3419;
    const double C38382 = C2445 * C3419;
    const double C23374 = C51158 * C4746;
    const double C33411 = C24901 * C4746;
    const double C38792 = C2446 * C4746;
    const double C40490 = C51106 * C4746;
    const double C48512 = C51158 * C4746;
    const double C49425 = C49415 * C118;
    const double C24303 = C24293 * C118;
    const double C50423 = C50069 * C50420;
    const double C50542 = 2 * C50420;
    const double C50514 = C50513 - C50510;
    const double C190 = C184 + C185;
    const double C5513 = C5507 * C294;
    const double C5879 = C5507 * C51061;
    const double C6427 = C5507 * C51061;
    const double C6867 = C5507 * C51297;
    const double C14238 = C8703 + C8702;
    const double C14237 = C8702 + C8703;
    const double C22409 = C17899 + C17898;
    const double C28153 = C17898 + C17899;
    const double C5511 = C5505 * C295;
    const double C6863 = C5505 * C1453;
    const double C14946 = C9252 + C9253;
    const double C14942 = C9253 + C9252;
    const double C28821 = C18448 + C18449;
    const double C28817 = C18449 + C18448;
    const double C16170 = C51158 * C3425;
    const double C23881 = C51158 * C3425;
    const double C32093 = C24901 * C3425;
    const double C33007 = C51301 * C3425;
    const double C37474 = C2446 * C3425;
    const double C38388 = C2445 * C3425;
    const double C7233 = C117 * C2850;
    const double C15497 = C8258 * C2850;
    const double C22949 = C17454 * C2850;
    const double C23886 = C17453 * C2850;
    const double C31576 = C24906 * C2850;
    const double C36957 = C2451 * C2850;
    const double C37883 = C2450 * C2850;
    const double C49016 = C8257 * C2850;
    const double C16169 = C8258 * C3420;
    const double C23880 = C17454 * C3420;
    const double C32092 = C24906 * C3420;
    const double C37473 = C2451 * C3420;
    const double C38387 = C2450 * C3420;
    const double C23377 = C17454 * C4744;
    const double C33416 = C24906 * C4744;
    const double C38797 = C2451 * C4744;
    const double C40491 = C117 * C4744;
    const double C48515 = C8258 * C4744;
    const double C50415 = C50409 - C50096;
    const double C50122 = C50121 - C50111;
    const double C50499 = C50498 / C50002;
    const double C50633 = C50631 - C50111;
    const double C139 = (5 * (3 * C50156 + C50074 * C50181) +
                         C50074 * (4 * C50181 + C50074 * C50217)) /
                        C50002;
    const double C329 =
        (3 * C50156 + C50074 * C50181 +
         C50069 * (C50069 * C50217 + C50212 * ae) + C50069 * C50212 * ae) /
        C50002;
    const double C525 =
        (3 * C50156 + C50074 * C50181 + C50217 * C50272) / C50002;
    const double C690 = (C50069 * (4 * C50181 + C50074 * C50217) +
                         (4 * C50176 + C50074 * C50212) * ae) /
                        C50002;
    const double C825 = (C50232 * (4 * C50181 + C50074 * C50217)) / C50002;
    const double C982 = (C50232 * (C50069 * C50217 + C50212 * ae)) / C50002;
    const double C1233 = (2 * (C50069 * C50181 + C50176 * ae) +
                          C50069 * (C50181 + C50069 * C50269 + C50265 * ae) +
                          (C50176 + C50206 * C50072) * ae) /
                         C50002;
    const double C1347 =
        (C50069 * C50181 + C50176 * ae + C50269 * C50272) / C50002;
    const double C1727 =
        (C50232 * (C50181 + C50069 * C50269 + C50265 * ae)) / C50002;
    const double C50365 = C50362 + C50356;
    const double C50482 = C50069 * C50479;
    const double C4742 =
        (2 * C50232 * C50338 + C50232 * (C50338 + C50479 * C50272)) / C50002;
    const double C50606 = C50559 + C50603;
    const double C50218 = C50194 + C50216;
    const double C50270 = C50263 - C50268;
    const double C50364 = C50361 + C50353;
    const double C50481 = C50069 * C50478;
    const double C4740 = (-2 * C50232 * C50337) / C49936 -
                         (C50232 * (C50478 * C50272 + C50337)) / C49936;
    const double C50605 = C50600 / C49936;
    const double C50480 = C50069 * C50477;
    const double C50528 = C50527 - C50524;
    const double C50663 = C50069 * C50662;
    const double C49980 = C49979 - C49964;
    const double C50046 = C50045 - C50030;
    const double C195 = C191 * C51122;
    const double C11121 = C191 * C51265;
    const double C34013 = C191 * C34007;
    const double C193 = C189 * C51122;
    const double C717 = C713 - C704;
    const double C1144 = C1142 - C1135;
    const double C6264 = C1014 - C6250;
    const double C6262 = C6248 - C1014;
    const double C7068 = C1608 - C7065;
    const double C7067 = C7064 - C1608;
    const double C8153 = C8148 - C6270;
    const double C6707 = C6703 - C6690;
    const double C722 = C720 * C51122;
    const double C11574 = C720 * C51265;
    const double C34454 = C720 * C34007;
    const double C1147 = C1145 * C51122;
    const double C12073 = C1145 * C51265;
    const double C34946 = C1145 * C34007;
    const double C8316 = C8312 + C8313;
    const double C8866 = C8854 + C8855;
    const double C9408 = C9404 + C9405;
    const double C17512 = C17508 + C17509;
    const double C18062 = C18050 + C18051;
    const double C18604 = C18600 + C18601;
    const double C837 = C833 * C51122;
    const double C11728 = C833 * C51265;
    const double C34604 = C833 * C34007;
    const double C11119 = C6036 * C51186;
    const double C34011 = C6036 * C51186;
    const double C11576 = C11575 - C1016;
    const double C11925 = C1016 - C11924;
    const double C12075 = C12074 - C1612;
    const double C12670 = C1612 - C12669;
    const double C14277 = C14262 + C14263;
    const double C14963 = C14944 + C14945;
    const double C15964 = C15960 + C15961;
    const double C14276 = C14260 + C14261;
    const double C14959 = C14939 + C14940;
    const double C15963 = C15955 + C15956;
    const double C28161 = C28156 + C28157;
    const double C28826 = C28819 + C28820;
    const double C29811 = C29807 + C29808;
    const double C28160 = C28154 + C28155;
    const double C28822 = C28814 + C28815;
    const double C29810 = C29802 + C29803;
    const double C47628 = C47626 + C47627;
    const double C48517 = C48505 + C48506;
    const double C49921 = C49917 + C49918;
    const double C22450 = C22448 + C22449;
    const double C23379 = C23367 + C23368;
    const double C24799 = C24795 + C24796;
    const double C40153 = C40146 - C6709;
    const double C41109 = C41104 - C8149;
    const double C145 =
        4 * ((-2 * C50074 * C50091) / C50078 + C50074 * C50105) +
        C50074 *
            (3 * C50105 +
             C50074 * ((-2 * C50074 * C50100) / C50078 +
                       C50074 * ((-((C50094 * C50095 +
                                     C50072 * bs[7] * std::pow(C50068, 7)) *
                                    C50070 * C50087) /
                                  C49936) /
                                     C50002 -
                                 C50100 / C50078)));
    const double C336 = (-(C50091 * C50087) / C49936) / C50002 -
                        C50082 / C50078 -
                        (ae * (C50069 * C50155 + C50151 * ce)) / C50078 -
                        ((C50069 * C50156 + C50151 * ae) * ce) / C50078 +
                        C50069 * ((-(C50156 * ce) / C49936) / C50002 -
                                  (ae * C50155) / C50078 + C50069 * C50105);
    const double C337 =
        (((-2 * C50143) / C49936 - (C50074 * C50155) / C49936) * ae) / C50002 -
        ((2 * C50144 + C50074 * C50156) * ce) / C50078 +
        C50069 * ((-2 * C50074 * C50091) / C50078 + C50074 * C50105);
    const double C528 =
        (zP - zQ) * ((-2 * C50074 * C50091) / C50078 + C50074 * C50105);
    const double C533 = (-(C50091 * C50087) / C49936) / C50002 -
                        C50082 / C50078 + C50105 * std::pow(zP - zQ, 2);
    const double C986 = (-(C50232 * C50156 * ce) / C49936) / C50002 -
                        (ae * C50232 * C50155) / C50078 +
                        C50069 * C50232 * C50105;
    const double C5729 = C5720 + C5719;
    const double C5728 = C5719 + C5720;
    const double C3850 =
        2 * ((-((C50142 + C50152 * C50272) * ce) / C49936) / C50002 -
             (ae * (C50150 * C50272 + C50141)) / C50078 + C50069 * C50494) -
        (ae * (C50417 * C50272 + C50309)) / C50078 -
        ((C50310 + C50418 * C50272) * ce) / C50078 +
        C50069 *
            (C50494 - (ae * (C50397 * C50272 + C50297)) / C50078 -
             ((C50300 + C50400 * C50272) * ce) / C50078 +
             C50069 *
                 ((-((C50152 + C50170 * C50272) * ce) / C49936) / C50002 -
                  (ae * (C50166 * C50272 + C50150)) / C50078 +
                  C50069 * ((-(C50117 * C50272) / C49936) / C50002 - C50111)));
    const double C4750 =
        (-2 * C50371) / C50078 + C50232 * C50494 +
        (((-2 * C50232 * C50297) / C49936 -
          (C50232 * (C50397 * C50272 + C50297)) / C49936) *
         ae) /
            C50002 -
        ((2 * C50232 * C50300 + C50232 * (C50300 + C50400 * C50272)) * ce) /
            C50078 +
        C50069 * ((((-2 * C50503) / C49936 -
                    (C50232 * (C50166 * C50272 + C50150)) / C49936) *
                   ae) /
                      C50002 -
                  ((2 * C50502 + C50232 * (C50152 + C50170 * C50272)) * ce) /
                      C50078 +
                  C50069 * ((-2 * C50504) / C50078 +
                            C50232 * ((-(C50117 * C50272) / C49936) / C50002 -
                                      C50111)));
    const double C4751 =
        (((-2 * C50232 * C50141) / C49936 -
          (C50232 * (C50150 * C50272 + C50141)) / C49936) *
         ae) /
            C50002 -
        ((2 * C50232 * C50142 + C50232 * (C50142 + C50152 * C50272)) * ce) /
            C50078 +
        C50069 * ((-2 * C50371) / C50078 + C50232 * C50494);
    const double C5670 =
        3 * ((-(C50091 * C50272) / C49936) / C50002 - C50082 / C50078) +
        C50232 * ((-2 * C50371) / C50078 + C50232 * C50494);
    const double C6681 =
        (((-3 * (C50150 * C50272 + C50141)) / C49936 +
          C50232 * ((-2 * C50503) / C49936 -
                    (C50232 * (C50166 * C50272 + C50150)) / C49936)) *
         ae) /
            C50002 -
        ((3 * (C50142 + C50152 * C50272) +
          C50232 * (2 * C50502 + C50232 * (C50152 + C50170 * C50272))) *
         ce) /
            C50078 +
        C50069 * (3 * C50494 +
                  C50232 * ((-2 * C50504) / C50078 +
                            C50232 * ((-(C50117 * C50272) / C49936) / C50002 -
                                      C50111)));
    const double C7651 =
        4 * ((-2 * C50371) / C50078 + C50232 * C50494) +
        C50232 * (3 * C50494 +
                  C50232 * ((-2 * C50504) / C50078 +
                            C50232 * ((-(C50117 * C50272) / C49936) / C50002 -
                                      C50111)));
    const double C186 = C176 * C118;
    const double C394 = C382 * C300;
    const double C1476 = C382 * C1458;
    const double C718 = C714 * C688;
    const double C1137 = C714 * C1123;
    const double C838 = C834 * C118;
    const double C583 = C571 * C118;
    const double C1018 = C1012 * C688;
    const double C1616 = C1012 * C1123;
    const double C5888 = C5886 * C688;
    const double C6428 = C5886 * C1123;
    const double C11280 = C11278 * C300;
    const double C12473 = C11278 * C1458;
    const double C2682 = C2446 * C2657;
    const double C25125 = C24901 * C2657;
    const double C2876 = C2446 * C2851;
    const double C5501 = C51106 * C2851;
    const double C14950 = C51158 * C2851;
    const double C22956 = C51158 * C2851;
    const double C25307 = C24901 * C2851;
    const double C3434 = C2446 * C3421;
    const double C14021 = C51158 * C3421;
    const double C25853 = C24901 * C3421;
    const double C27945 = C51158 * C3421;
    const double C3440 = C2446 * C3426;
    const double C14025 = C51158 * C3426;
    const double C25859 = C24901 * C3426;
    const double C27949 = C51158 * C3426;
    const double C2687 = C2451 * C2658;
    const double C25130 = C24906 * C2658;
    const double C2881 = C2451 * C2852;
    const double C5502 = C117 * C2852;
    const double C14953 = C8258 * C2852;
    const double C22959 = C17454 * C2852;
    const double C25312 = C24906 * C2852;
    const double C3439 = C2451 * C3422;
    const double C14024 = C8258 * C3422;
    const double C25858 = C24906 * C3422;
    const double C27948 = C17454 * C3422;
    const double C50470 = C50463 - C50432;
    const double C50428 = C50425 + C50408;
    const double C50427 = C50396 - C50424;
    const double C50598 = C50591 - C50565;
    const double C50659 = C50657 - C50640;
    const double C6265 = C5878 - C6251;
    const double C6263 = C6249 - C5878;
    const double C6704 = C6692 - C6426;
    const double C7069 = C6426 - C7066;
    const double C14267 = C14239 * C118;
    const double C14264 = C14236 * C118;
    const double C22436 = C22410 * C118;
    const double C28158 = C28152 * C118;
    const double C14962 = C14943 * C688;
    const double C15959 = C14943 * C1123;
    const double C14960 = C14941 * C688;
    const double C15957 = C14941 * C1123;
    const double C28825 = C28818 * C688;
    const double C29806 = C28818 * C1123;
    const double C28823 = C28816 * C688;
    const double C29804 = C28816 * C1123;
    const double C2662 =
        3 * ((-(ae * C50252) / C49936) / C50002 - C50246 / C50078 -
             (C50253 * ce) / C50078 + C50069 * C50339) +
        (((-2 * C50252) / C49936 - (C50069 * C50337) / C49936 -
          (C50327 * ce) / C49936) *
         ae) /
            C50002 -
        ((2 * C50253 + C50069 * C50338 + C50327 * ae) * ce) / C50078 +
        C50069 * (2 * C50339 - (ae * C50337) / C50078 - (C50338 * ce) / C50078 +
                  C50069 * ((-(ae * C50325) / C49936) / C50002 -
                            C50107 / C50078 - (C50328 * ce) / C50078 +
                            C50069 * ((-(C50192 * ce) / C49936) / C50002 -
                                      (ae * C50186) / C50078 -
                                      (C50069 * C50074 * C50117) / C50078)));
    const double C7237 = C7231 + C7232;
    const double C15500 = C15493 + C15494;
    const double C22965 = C22945 + C22946;
    const double C23894 = C23882 + C23883;
    const double C31597 = C31582 + C31583;
    const double C36978 = C36963 + C36964;
    const double C37888 = C37877 + C37878;
    const double C49020 = C49012 + C49013;
    const double C16172 = C16165 + C16166;
    const double C23891 = C23876 + C23877;
    const double C32098 = C32086 + C32087;
    const double C37479 = C37467 + C37468;
    const double C38392 = C38381 + C38382;
    const double C23383 = C23373 + C23374;
    const double C33420 = C33410 + C33411;
    const double C38801 = C38791 + C38792;
    const double C40493 = C40489 + C40490;
    const double C48521 = C48511 + C48512;
    const double C50576 = C50542 - C50562;
    const double C194 = C190 * C51122;
    const double C14266 = C14238 * C51009;
    const double C14265 = C14237 * C51009;
    const double C22435 = C22409 * C51009;
    const double C28159 = C28153 * C51009;
    const double C14964 = C14946 * C51061;
    const double C15962 = C14946 * C51061;
    const double C14961 = C14942 * C51061;
    const double C15958 = C14942 * C51061;
    const double C28827 = C28821 * C51061;
    const double C29809 = C28821 * C51061;
    const double C28824 = C28817 * C51061;
    const double C29805 = C28817 * C51061;
    const double C7238 = C7233 + C7234;
    const double C15502 = C15497 + C15498;
    const double C22967 = C22949 + C22950;
    const double C23896 = C23886 + C23887;
    const double C31594 = C31576 + C31577;
    const double C36975 = C36957 + C36958;
    const double C37891 = C37883 + C37884;
    const double C49022 = C49016 + C49017;
    const double C16174 = C16169 + C16170;
    const double C23893 = C23880 + C23881;
    const double C32101 = C32092 + C32093;
    const double C37482 = C37473 + C37474;
    const double C38395 = C38387 + C38388;
    const double C50419 = C50415 - C50392;
    const double C50123 = C50074 * C50122;
    const double C50343 = C50069 * C50122;
    const double C50375 = C50232 * C50122;
    const double C1237 =
        2 * ((-(C50156 * ce) / C49936) / C50002 - (ae * C50155) / C50078 +
             C50069 * C50105) -
        (ae * (C50069 * C50260 + C50155 + C50257 * ce)) / C50078 -
        ((C50156 + C50069 * C50261 + C50257 * ae) * ce) / C50078 +
        C50069 * (C50105 - (ae * C50260) / C50078 - (C50261 * ce) / C50078 +
                  C50069 * ((-(C50177 * ce) / C49936) / C50002 -
                            (ae * C50175) / C50078 + C50069 * C50122));
    const double C1351 =
        (-((C50156 + C50177 * C50272) * ce) / C49936) / C50002 -
        (ae * (C50175 * C50272 + C50155)) / C50078 +
        C50069 * (C50105 + C50122 * C50272);
    const double C1731 =
        C50232 * C50105 - (ae * C50232 * C50260) / C50078 -
        (C50232 * C50261 * ce) / C50078 +
        C50069 * ((-(C50232 * C50177 * ce) / C49936) / C50002 -
                  (ae * C50232 * C50175) / C50078 + C50069 * C50232 * C50122);
    const double C2014 =
        2 * C50232 * C50105 + C50232 * (C50105 + C50122 * C50272);
    const double C2857 =
        C50105 + C50122 * C50272 - (ae * (C50352 * C50272 + C50260)) / C50078 -
        ((C50261 + C50355 * C50272) * ce) / C50078 +
        C50069 *
            ((-((C50177 + C50207 * C50272) * ce) / C49936) / C50002 -
             (ae * (C50205 * C50272 + C50175)) / C50078 +
             C50069 *
                 (C50122 +
                  ((-((C50109 * C50110 + C50072 * bs[8] * std::pow(C50065, 8)) *
                      C50070 * C50087) /
                    C49936) /
                       C50002 -
                   C50117 / C50078) *
                      C50272));
    const double C50500 = C50499 - C50432;
    const double C50635 = C50069 * C50633;
    const double C50667 = C50232 * C50633;
    const double C2659 =
        (3 * (C50156 + C50069 * C50261 + C50257 * ae) +
         C50069 * (2 * C50261 + C50069 * C50365 + C50354 * ae) +
         (2 * C50257 + C50069 * C50354) * ae) /
        C50002;
    const double C2854 =
        (C50156 + C50069 * C50261 + C50257 * ae + C50365 * C50272) / C50002;
    const double C3423 =
        (C50232 * (2 * C50261 + C50069 * C50365 + C50354 * ae)) / C50002;
    const double C50485 = C50441 + C50482;
    const double C50609 = C50606 + C50583;
    const double C988 =
        (C50232 * C50218 * ae) / C50002 - (C50232 * C50217 * ce) / C50078 +
        C50069 * C50232 *
            (3 * C50122 +
             C50074 * ((-2 * C50074 * C50117) / C50078 +
                       C50074 * ((-((C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50087) /
                                  C49936) /
                                     C50002 -
                                 C50117 / C50078)));
    const double C138 = 5 * ((-3 * C50155) / C49936 + C50074 * C50182) +
                        C50074 * (4 * C50182 + C50074 * C50218);
    const double C330 = (-3 * C50155) / C49936 + C50074 * C50182 +
                        C50069 * (C50069 * C50218 - (C50212 * ce) / C49936) -
                        (C50069 * C50212 * ce) / C49936;
    const double C524 =
        (-3 * C50155) / C49936 + C50074 * C50182 + C50218 * C50272;
    const double C691 = C50069 * (4 * C50182 + C50074 * C50218) -
                        ((4 * C50176 + C50074 * C50212) * ce) / C49936;
    const double C824 = C50232 * (4 * C50182 + C50074 * C50218);
    const double C983 = C50232 * (C50069 * C50218 - (C50212 * ce) / C49936);
    const double C1234 =
        2 * (C50069 * C50182 - (C50176 * ce) / C49936) +
        C50069 * (C50182 + C50069 * C50270 - (C50265 * ce) / C49936) -
        ((C50176 + C50206 * C50072) * ce) / C49936;
    const double C1348 =
        C50069 * C50182 - (C50176 * ce) / C49936 + C50270 * C50272;
    const double C1728 =
        C50232 * (C50182 + C50069 * C50270 - (C50265 * ce) / C49936);
    const double C2660 =
        (-3 * (C50069 * C50260 + C50155 + C50257 * ce)) / C49936 +
        C50069 * ((-2 * C50260) / C49936 - (C50069 * C50364) / C49936 -
                  (C50354 * ce) / C49936) -
        ((2 * C50257 + C50069 * C50354) * ce) / C49936;
    const double C2853 =
        -(C50364 * C50272 + C50069 * C50260 + C50155 + C50257 * ce) / C49936;
    const double C3424 =
        C50232 * ((-2 * C50260) / C49936 - (C50069 * C50364) / C49936 -
                  (C50354 * ce) / C49936);
    const double C50484 = C50481 / C49936;
    const double C50608 = C50570 - C50605;
    const double C1219 =
        ((((0 - (C49934 * C49960) / C49936) * ce) / C49936 - (0 * de) / C49940 +
          C49935 / C49936) /
             C49961 -
         ((C49934 * C49978 + 0) * de) / C49936) /
            C49961 +
        ((C49934 * (C49978 / C49961 -
                    ((C49934 * C49980 + C51251) * de) / C49936 + C49973) +
          C51296) *
         ce) /
            C49936 +
        C49980 / C49961 - ((C49934 * C49973 + C51061) * de) / C49936;
    const double C1220 =
        (C49978 / C49961 - ((C49934 * C49980 + C51251) * de) / C49936 +
         C49973) /
            C49961 +
        ((C49934 *
              (C49980 / C49961 - ((C49934 * C49973 + C51061) * de) / C49936) +
          C51297) *
         ce) /
            C49936 +
        2 * (C49973 / C49961 - (0 * de) / C49936);
    const double C1221 =
        (C49980 / C49961 - ((C49934 * C49973 + C51061) * de) / C49936) /
            C49961 +
        ((C49934 * (C49973 / C49961 - (0 * de) / C49936) + C1453) * ce) /
            C49936;
    const double C1456 =
        C49978 / C49961 - ((C49934 * C49980 + C51251) * de) / C49936 + C49973;
    const double C1457 =
        C49980 / C49961 - ((C49934 * C49973 + C51061) * de) / C49936;
    const double C20284 =
        ((((0 - (C50000 * C50026) / C50002) * ae) / C50002 - (0 * be) / C50006 +
          C50001 / C50002) /
             C50027 -
         ((C50000 * C50044 + 0) * be) / C50002) /
            C50027 +
        ((C50000 * (C50044 / C50027 -
                    ((C50000 * C50046 + C51264) * be) / C50002 + C50039) +
          C51300) *
         ae) /
            C50002 +
        C50046 / C50027 - ((C50000 * C50039 + C51158) * be) / C50002;
    const double C20285 =
        (C50044 / C50027 - ((C50000 * C50046 + C51264) * be) / C50002 +
         C50039) /
            C50027 +
        ((C50000 *
              (C50046 / C50027 - ((C50000 * C50039 + C51158) * be) / C50002) +
          C51301) *
         ae) /
            C50002 +
        2 * (C50039 / C50027 - (0 * be) / C50002);
    const double C20286 =
        (C50046 / C50027 - ((C50000 * C50039 + C51158) * be) / C50002) /
            C50027 +
        ((C50000 * (C50039 / C50027 - (0 * be) / C50002) + C24901) * ae) /
            C50002;
    const double C24904 =
        C50044 / C50027 - ((C50000 * C50046 + C51264) * be) / C50002 + C50039;
    const double C24905 =
        C50046 / C50027 - ((C50000 * C50039 + C51158) * be) / C50002;
    const double C6274 = C6264 + C1015;
    const double C6272 = C6262 - C1015;
    const double C7071 = C7068 + C1611;
    const double C7070 = C7067 - C1611;
    const double C8154 = C8153 - C6271;
    const double C6711 = C6707 - C6691;
    const double C8318 = C8316 * C51122;
    const double C8873 = C8866 - C8867;
    const double C9409 = C9408 - C9406;
    const double C17514 = C17512 * C51122;
    const double C18069 = C18062 - C18063;
    const double C18605 = C18604 - C18602;
    const double C11122 = C11118 + C11119;
    const double C34014 = C34010 + C34011;
    const double C167 = C51106 * C145;
    const double C361 = C51106 * C336;
    const double C2466 = C2446 * C336;
    const double C3050 = C2445 * C336;
    const double C8495 = C51264 * C336;
    const double C8487 = C51158 * C336;
    const double C17691 = C17448 * C336;
    const double C17683 = C51158 * C336;
    const double C24921 = C24901 * C336;
    const double C25481 = C51301 * C336;
    const double C367 = C51106 * C337;
    const double C2486 = C2445 * C337;
    const double C8277 = C51158 * C337;
    const double C8863 = C51264 * C337;
    const double C17473 = C51158 * C337;
    const double C18059 = C17448 * C337;
    const double C24941 = C51301 * C337;
    const double C548 = C51106 * C528;
    const double C9027 = C51264 * C528;
    const double C18223 = C17448 * C528;
    const double C556 = C51106 * C533;
    const double C8689 = C51264 * C533;
    const double C17885 = C17448 * C533;
    const double C1001 = C51106 * C986;
    const double C3214 = C2445 * C986;
    const double C8675 = C51158 * C986;
    const double C9247 = C51264 * C986;
    const double C17871 = C51158 * C986;
    const double C18443 = C17448 * C986;
    const double C25645 = C51301 * C986;
    const double C23889 = C51158 * C3850;
    const double C32505 = C24901 * C3850;
    const double C37886 = C2446 * C3850;
    const double C49019 = C51158 * C3850;
    const double C23378 = C51158 * C4750;
    const double C33417 = C24901 * C4750;
    const double C38798 = C2446 * C4750;
    const double C40492 = C51106 * C4750;
    const double C48516 = C51158 * C4750;
    const double C6698 = C51106 * C4751;
    const double C16700 = C51158 * C4751;
    const double C22420 = C51158 * C4751;
    const double C23376 = C17448 * C4751;
    const double C33415 = C51301 * C4751;
    const double C38796 = C2445 * C4751;
    const double C48514 = C51264 * C4751;
    const double C7657 = C51106 * C5670;
    const double C24299 = C17448 * C5670;
    const double C49421 = C51264 * C5670;
    const double C24301 = C51158 * C6681;
    const double C40152 = C51106 * C6681;
    const double C49423 = C51158 * C6681;
    const double C40773 = C51106 * C7651;
    const double C2697 = C2681 + C2682;
    const double C25140 = C25124 + C25125;
    const double C2891 = C2875 + C2876;
    const double C5508 = C5500 + C5501;
    const double C14966 = C14949 + C14950;
    const double C22970 = C22955 + C22956;
    const double C25322 = C25306 + C25307;
    const double C3443 = C3433 + C3434;
    const double C14027 = C14020 + C14021;
    const double C25862 = C25852 + C25853;
    const double C27951 = C27944 + C27945;
    const double C2894 = C2881 + C2882;
    const double C5509 = C5502 + C5503;
    const double C14968 = C14953 + C14954;
    const double C22972 = C22959 + C22960;
    const double C25325 = C25312 + C25313;
    const double C3446 = C3439 + C3440;
    const double C14029 = C14024 + C14025;
    const double C25865 = C25858 + C25859;
    const double C27953 = C27948 + C27949;
    const double C50476 = C50470 - C50444;
    const double C3692 =
        (4 * (2 * C50244 + C50069 * C50310 + C50299 * ae) +
         C50069 * (3 * C50310 + C50069 * C50428 + C50413 * ae) +
         (3 * C50299 + C50069 * C50413) * ae) /
        C50002;
    const double C3846 =
        (2 * C50244 + C50069 * C50310 + C50299 * ae + C50428 * C50272) / C50002;
    const double C4340 =
        (C50232 * (3 * C50310 + C50069 * C50428 + C50413 * ae)) / C50002;
    const double C50429 = C50427 - C50412;
    const double C50607 = C50598 + C50604;
    const double C50661 = C50659 - C50651;
    const double C6275 = C6265 + C5879;
    const double C6273 = C6263 - C5879;
    const double C6708 = C6704 - C6427;
    const double C7072 = C7069 + C6427;
    const double C14970 = C14962 - C14963;
    const double C15966 = C15959 - C15964;
    const double C14969 = C14959 - C14960;
    const double C15965 = C15963 - C15957;
    const double C28829 = C28825 - C28826;
    const double C29813 = C29806 - C29811;
    const double C28828 = C28822 - C28823;
    const double C29812 = C29810 - C29804;
    const double C2688 = C2446 * C2662;
    const double C25131 = C24901 * C2662;
    const double C7241 = C7237 * C1458;
    const double C7545 = C7237 * C300;
    const double C48507 = C15500 + C15499;
    const double C23369 = C22965 + C22966;
    const double C40495 = C40493 * C1458;
    const double C40697 = C40493 * C300;
    const double C50584 = C50576 - C50563;
    const double C14279 = C14266 + C14267;
    const double C14278 = C14264 + C14265;
    const double C22447 = C22435 + C22436;
    const double C28162 = C28158 + C28159;
    const double C7242 = C7238 * C1453;
    const double C7546 = C7238 * C295;
    const double C48508 = C15502 + C15501;
    const double C23370 = C22967 + C22968;
    const double C50426 = C50419 + C50423;
    const double C50124 = C50114 + C50123;
    const double C50366 = C50363 + C50343;
    const double C3427 =
        2 * ((-(C50232 * C50177 * ce) / C49936) / C50002 -
             (ae * C50232 * C50175) / C50078 + C50069 * C50375) -
        (ae * C50232 * C50364) / C50078 - (C50232 * C50365 * ce) / C50078 +
        C50069 * (C50375 - (ae * C50232 * C50352) / C50078 -
                  (C50232 * C50355 * ce) / C50078 +
                  C50069 * ((-(C50232 * C50207 * ce) / C49936) / C50002 -
                            (ae * C50232 * C50205) / C50078 +
                            C50069 * C50232 *
                                ((-((C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50087) /
                                  C49936) /
                                     C50002 -
                                 C50117 / C50078)));
    const double C5672 =
        3 * (C50105 + C50122 * C50272) +
        C50232 *
            (2 * C50375 +
             C50232 *
                 (C50122 +
                  ((-((C50109 * C50110 + C50072 * bs[8] * std::pow(C50065, 8)) *
                      C50070 * C50087) /
                    C49936) /
                       C50002 -
                   C50117 / C50078) *
                      C50272));
    const double C6234 =
        (((-2 * C50232 * C50175) / C49936 -
          (C50232 * (C50205 * C50272 + C50175)) / C49936) *
         ae) /
            C50002 -
        ((2 * C50232 * C50177 + C50232 * (C50177 + C50207 * C50272)) * ce) /
            C50078 +
        C50069 *
            (2 * C50375 +
             C50232 *
                 (C50122 +
                  ((-((C50109 * C50110 + C50072 * bs[8] * std::pow(C50065, 8)) *
                      C50070 * C50087) /
                    C49936) /
                       C50002 -
                   C50117 / C50078) *
                      C50272));
    const double C3052 = C2446 * C1237;
    const double C8497 = C51158 * C1237;
    const double C17693 = C51158 * C1237;
    const double C25483 = C24901 * C1237;
    const double C5885 = C51106 * C1351;
    const double C8691 = C51158 * C1351;
    const double C17887 = C51158 * C1351;
    const double C3216 = C2446 * C1731;
    const double C9249 = C51158 * C1731;
    const double C11277 = C51106 * C1731;
    const double C18445 = C51158 * C1731;
    const double C25647 = C24901 * C1731;
    const double C5694 = C51106 * C2014;
    const double C3851 =
        2 * ((-((C50163 + C50192 * C50272) * ce) / C49936) / C50002 -
             (ae * (C50186 * C50272 + C50159)) / C50078 + C50069 * C50500) -
        (ae * (C50478 * C50272 + C50337)) / C50078 -
        ((C50338 + C50479 * C50272) * ce) / C50078 +
        C50069 *
            (C50500 - (ae * (C50458 * C50272 + C50325)) / C50078 -
             ((C50328 + C50461 * C50272) * ce) / C50078 +
             C50069 * ((-((C50192 + C50442 * C50272) * ce) / C49936) / C50002 -
                       (ae * (C50438 * C50272 + C50186)) / C50078 +
                       C50069 * ((-(C50074 *
                                    (C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50272) /
                                  C49936) /
                                     C50002 -
                                 C50436 / C50078)));
    const double C4748 =
        (-2 * C50373) / C50078 + C50232 * C50500 +
        (((-2 * C50232 * C50325) / C49936 -
          (C50232 * (C50458 * C50272 + C50325)) / C49936) *
         ae) /
            C50002 -
        ((2 * C50232 * C50328 + C50232 * (C50328 + C50461 * C50272)) * ce) /
            C50078 +
        C50069 *
            ((((-2 * C50517) / C49936 -
               (C50232 * (C50438 * C50272 + C50186)) / C49936) *
              ae) /
                 C50002 -
             ((2 * C50516 + C50232 * (C50192 + C50442 * C50272)) * ce) /
                 C50078 +
             C50069 * ((-2 * C50518) / C50078 +
                       C50232 * ((-(C50074 *
                                    (C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50272) /
                                  C49936) /
                                     C50002 -
                                 C50436 / C50078)));
    const double C4749 =
        (((-2 * C50232 * C50159) / C49936 -
          (C50232 * (C50186 * C50272 + C50159)) / C49936) *
         ae) /
            C50002 -
        ((2 * C50232 * C50163 + C50232 * (C50163 + C50192 * C50272)) * ce) /
            C50078 +
        C50069 * ((-2 * C50373) / C50078 + C50232 * C50500);
    const double C5671 =
        3 * ((-(C50107 * C50272) / C49936) / C50002 - C50246 / C50078) +
        C50232 * ((-2 * C50373) / C50078 + C50232 * C50500);
    const double C6682 =
        (((-3 * (C50186 * C50272 + C50159)) / C49936 +
          C50232 * ((-2 * C50517) / C49936 -
                    (C50232 * (C50438 * C50272 + C50186)) / C49936)) *
         ae) /
            C50002 -
        ((3 * (C50163 + C50192 * C50272) +
          C50232 * (2 * C50516 + C50232 * (C50192 + C50442 * C50272))) *
         ce) /
            C50078 +
        C50069 *
            (3 * C50500 +
             C50232 * ((-2 * C50518) / C50078 +
                       C50232 * ((-(C50074 *
                                    (C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50272) /
                                  C49936) /
                                     C50002 -
                                 C50436 / C50078)));
    const double C7650 =
        4 * ((-2 * C50373) / C50078 + C50232 * C50500) +
        C50232 *
            (3 * C50500 +
             C50232 * ((-2 * C50518) / C50078 +
                       C50232 * ((-(C50074 *
                                    (C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50272) /
                                  C49936) /
                                     C50002 -
                                 C50436 / C50078)));
    const double C50637 = C50636 + C50635;
    const double C50669 = C50668 + C50667;
    const double C50487 = C50485 + C50469;
    const double C50612 = C50069 * C50609;
    const double C21674 =
        (2 * C50232 * C50428 + C50232 * (C50428 + C50609 * C50272)) / C50002;
    const double C50486 = C50448 - C50484;
    const double C50611 = C50608 - C50588;
    const double C1472 = C172 * C1456;
    const double C1466 = C170 * C1456;
    const double C1460 = C168 * C1456;
    const double C6864 = C567 * C1456;
    const double C6858 = C561 * C1456;
    const double C7227 = C5705 * C1456;
    const double C7219 = C5703 * C1456;
    const double C12469 = C563 * C1456;
    const double C40485 = C5712 * C1456;
    const double C1474 = C380 * C1457;
    const double C1468 = C376 * C1457;
    const double C1462 = C372 * C1457;
    const double C6866 = C5506 * C1457;
    const double C6860 = C1008 * C1457;
    const double C7229 = C6260 * C1457;
    const double C7221 = C6258 * C1457;
    const double C12471 = C1010 * C1457;
    const double C40487 = C6705 * C1457;
    const double C24938 = C24904 * C133;
    const double C24932 = C24904 * C122;
    const double C24930 = C24904 * C121;
    const double C24924 = C24904 * C131;
    const double C24914 = C24904 * C129;
    const double C24908 = C24904 * C120;
    const double C25126 = C24904 * C318;
    const double C25120 = C24904 * C304;
    const double C25118 = C24904 * C316;
    const double C25112 = C24904 * C303;
    const double C25308 = C24904 * C519;
    const double C25302 = C24904 * C502;
    const double C25296 = C24904 * C507;
    const double C25290 = C24904 * C496;
    const double C25478 = C24904 * C320;
    const double C25472 = C24904 * C305;
    const double C25642 = C24904 * C509;
    const double C25636 = C24904 * C497;
    const double C25854 = C24904 * C977;
    const double C25848 = C24904 * C970;
    const double C31586 = C24904 * C501;
    const double C31580 = C24904 * C517;
    const double C31570 = C24904 * C514;
    const double C31564 = C24904 * C500;
    const double C32096 = C24904 * C975;
    const double C32090 = C24904 * C969;
    const double C32500 = C24904 * C1342;
    const double C32494 = C24904 * C1337;
    const double C33004 = C24904 * C1722;
    const double C32998 = C24904 * C1717;
    const double C33412 = C24904 * C2011;
    const double C33406 = C24904 * C2004;
    const double C24940 = C24905 * C324;
    const double C24934 = C24905 * C307;
    const double C24928 = C24905 * C305;
    const double C24922 = C24905 * C320;
    const double C24916 = C24905 * C316;
    const double C24910 = C24905 * C303;
    const double C25128 = C24905 * C1230;
    const double C25122 = C24905 * C1224;
    const double C25116 = C24905 * C318;
    const double C25110 = C24905 * C304;
    const double C25310 = C24905 * C1344;
    const double C25304 = C24905 * C1338;
    const double C25298 = C24905 * C977;
    const double C25292 = C24905 * C970;
    const double C25480 = C24905 * C322;
    const double C25474 = C24905 * C306;
    const double C25644 = C24905 * C979;
    const double C25638 = C24905 * C971;
    const double C25856 = C24905 * C1724;
    const double C25850 = C24905 * C1718;
    const double C31584 = C24905 * C1337;
    const double C31578 = C24905 * C1342;
    const double C31572 = C24905 * C975;
    const double C31566 = C24905 * C969;
    const double C32094 = C24905 * C1722;
    const double C32088 = C24905 * C1717;
    const double C32502 = C24905 * C2850;
    const double C32496 = C24905 * C2846;
    const double C33006 = C24905 * C3420;
    const double C33000 = C24905 * C3416;
    const double C33414 = C24905 * C4745;
    const double C33408 = C24905 * C4739;
    const double C177 = C166 + C167;
    const double C379 = C360 + C361;
    const double C2495 = C2465 + C2466;
    const double C3057 = C3049 + C3050;
    const double C8512 = C8494 + C8495;
    const double C8508 = C8486 + C8487;
    const double C17708 = C17690 + C17691;
    const double C17704 = C17682 + C17683;
    const double C24950 = C24920 + C24921;
    const double C381 = C366 + C367;
    const double C2505 = C2485 + C2486;
    const double C8300 = C8276 + C8277;
    const double C8871 = C8862 + C8863;
    const double C17496 = C17472 + C17473;
    const double C18067 = C18058 + C18059;
    const double C566 = C547 + C548;
    const double C9034 = C9026 + C9027;
    const double C18230 = C18222 + C18223;
    const double C570 = C555 + C556;
    const double C8706 = C8688 + C8689;
    const double C17902 = C17884 + C17885;
    const double C1011 = C1000 + C1001;
    const double C3221 = C3213 + C3214;
    const double C8699 = C8674 + C8675;
    const double C9256 = C9246 + C9247;
    const double C17895 = C17870 + C17871;
    const double C18452 = C18442 + C18443;
    const double C23385 = C23377 + C23378;
    const double C33423 = C33416 + C33417;
    const double C38804 = C38797 + C38798;
    const double C40494 = C40491 + C40492;
    const double C48523 = C48515 + C48516;
    const double C6706 = C6697 + C6698;
    const double C16704 = C16699 + C16700;
    const double C22441 = C22419 + C22420;
    const double C23384 = C23375 + C23376;
    const double C38803 = C38795 + C38796;
    const double C48522 = C48513 + C48514;
    const double C7659 = C7656 + C7657;
    const double C24306 = C24298 + C24299;
    const double C49428 = C49420 + C49421;
    const double C24307 = C24300 + C24301;
    const double C40155 = C40151 + C40152;
    const double C49429 = C49422 + C49423;
    const double C40775 = C40772 + C40773;
    const double C5514 = C5508 * C300;
    const double C6868 = C5508 * C1458;
    const double C5515 = C5509 * C295;
    const double C6869 = C5509 * C1453;
    const double C50483 = C50476 + C50480;
    const double C23885 = C51158 * C3846;
    const double C32499 = C24901 * C3846;
    const double C37880 = C2446 * C3846;
    const double C49015 = C51158 * C3846;
    const double C33003 = C24901 * C4340;
    const double C38384 = C2446 * C4340;
    const double C4344 =
        3 * ((-(ae * C50232 * C50297) / C49936) / C50002 - C50371 / C50078 -
             (C50232 * C50300 * ce) / C50078 + C50069 * C50514) +
        (C50232 * C50429 * ae) / C50002 - (C50232 * C50428 * ce) / C50078 +
        C50069 *
            (2 * C50514 - (ae * C50232 * C50417) / C50078 -
             (C50232 * C50418 * ce) / C50078 +
             C50069 * ((-(ae * C50232 * C50397) / C49936) / C50002 -
                       C50504 / C50078 - (C50232 * C50400 * ce) / C50078 +
                       C50069 * ((-(C50232 * C50170 * ce) / C49936) / C50002 -
                                 (ae * C50232 * C50166) / C50078 -
                                 (C50069 * C50232 * C50117) / C50078)));
    const double C3693 =
        4 * ((-2 * C50243) / C49936 - (C50069 * C50309) / C49936 -
             (C50299 * ce) / C49936) +
        C50069 * ((-3 * C50309) / C49936 + C50069 * C50429 -
                  (C50413 * ce) / C49936) -
        ((3 * C50299 + C50069 * C50413) * ce) / C49936;
    const double C3847 = (-2 * C50243) / C49936 - (C50069 * C50309) / C49936 -
                         (C50299 * ce) / C49936 + C50429 * C50272;
    const double C4341 = C50232 * ((-3 * C50309) / C49936 + C50069 * C50429 -
                                   (C50413 * ce) / C49936);
    const double C50610 = C50069 * C50607;
    const double C50664 = C50661 + C50663;
    const double C14972 = C14970 + C14964;
    const double C15968 = C15966 + C15962;
    const double C14971 = C14969 - C14961;
    const double C15967 = C15965 - C15958;
    const double C28831 = C28829 + C28827;
    const double C29815 = C29813 + C29809;
    const double C28830 = C28828 - C28824;
    const double C29814 = C29812 - C29805;
    const double C2700 = C2687 + C2688;
    const double C25143 = C25130 + C25131;
    const double C48518 = C48507 * C1123;
    const double C49919 = C48507 * C688;
    const double C23380 = C23369 * C1123;
    const double C24797 = C23369 * C688;
    const double C48519 = C48508 * C51061;
    const double C49920 = C48508 * C51061;
    const double C23381 = C23370 * C51061;
    const double C24798 = C23370 * C51061;
    const double C3696 =
        4 * (2 * C50311 - (ae * C50309) / C50078 - (C50310 * ce) / C50078 +
             C50069 * C50426) +
        (((-3 * C50309) / C49936 + C50069 * C50429 - (C50413 * ce) / C49936) *
         ae) /
            C50002 -
        ((3 * C50310 + C50069 * C50428 + C50413 * ae) * ce) / C50078 +
        C50069 *
            (3 * C50426 + (C50429 * ae) / C50002 - (C50428 * ce) / C50078 +
             C50069 *
                 (2 * C50420 - (ae * C50417) / C50078 - (C50418 * ce) / C50078 +
                  C50069 * ((-(ae * C50397) / C49936) / C50002 - C50111 -
                            (C50400 * ce) / C50078 +
                            C50069 * ((-(C50170 * ce) / C49936) / C50002 -
                                      (ae * C50166) / C50078 -
                                      (C50069 * C50117) / C50078))));
    const double C146 =
        5 * (3 * C50105 + C50074 * C50124) +
        C50074 * (4 * C50124 +
                  C50074 * (3 * C50122 +
                            C50074 * ((-2 * C50074 * C50117) / C50078 +
                                      C50074 * ((-((C50109 * C50110 +
                                                    C50072 * bs[8] *
                                                        std::pow(C50065, 8)) *
                                                   C50070 * C50087) /
                                                 C49936) /
                                                    C50002 -
                                                C50117 / C50078))));
    const double C338 =
        (-2 * C50074 * C50091) / C50078 + C50074 * C50105 +
        ((C50069 * C50182 - (C50176 * ce) / C49936) * ae) / C50002 -
        ((C50069 * C50181 + C50176 * ae) * ce) / C50078 +
        C50069 *
            ((C50182 * ae) / C50002 - (C50181 * ce) / C50078 + C50069 * C50124);
    const double C339 =
        (((-3 * C50155) / C49936 + C50074 * C50182) * ae) / C50002 -
        ((3 * C50156 + C50074 * C50181) * ce) / C50078 +
        C50069 * (3 * C50105 + C50074 * C50124);
    const double C340 =
        3 * C50105 + C50074 * C50124 +
        ((C50069 * C50218 - (C50212 * ce) / C49936) * ae) / C50002 -
        ((C50069 * C50217 + C50212 * ae) * ce) / C50078 +
        C50069 * ((C50218 * ae) / C50002 - (C50217 * ce) / C50078 +
                  C50069 * (3 * C50122 +
                            C50074 * ((-2 * C50074 * C50117) / C50078 +
                                      C50074 * ((-((C50109 * C50110 +
                                                    C50072 * bs[8] *
                                                        std::pow(C50065, 8)) *
                                                   C50070 * C50087) /
                                                 C49936) /
                                                    C50002 -
                                                C50117 / C50078))));
    const double C529 = (zP - zQ) * (3 * C50105 + C50074 * C50124);
    const double C534 = (-2 * C50074 * C50091) / C50078 + C50074 * C50105 +
                        C50124 * std::pow(zP - zQ, 2);
    const double C535 =
        3 * C50105 + C50074 * C50124 +
        (3 * C50122 +
         C50074 *
             ((-2 * C50074 * C50117) / C50078 +
              C50074 *
                  ((-((C50109 * C50110 + C50072 * bs[8] * std::pow(C50065, 8)) *
                      C50070 * C50087) /
                    C49936) /
                       C50002 -
                   C50117 / C50078))) *
            std::pow(zP - zQ, 2);
    const double C692 =
        ((4 * C50182 + C50074 * C50218) * ae) / C50002 -
        ((4 * C50181 + C50074 * C50217) * ce) / C50078 +
        C50069 * (4 * C50124 +
                  C50074 * (3 * C50122 +
                            C50074 * ((-2 * C50074 * C50117) / C50078 +
                                      C50074 * ((-((C50109 * C50110 +
                                                    C50072 * bs[8] *
                                                        std::pow(C50065, 8)) *
                                                   C50070 * C50087) /
                                                 C49936) /
                                                    C50002 -
                                                C50117 / C50078))));
    const double C826 =
        (zP - zQ) *
        (4 * C50124 +
         C50074 *
             (3 * C50122 +
              C50074 * ((-2 * C50074 * C50117) / C50078 +
                        C50074 * ((-((C50109 * C50110 +
                                      C50072 * bs[8] * std::pow(C50065, 8)) *
                                     C50070 * C50087) /
                                   C49936) /
                                      C50002 -
                                  C50117 / C50078))));
    const double C987 = (C50232 * C50182 * ae) / C50002 -
                        (C50232 * C50181 * ce) / C50078 +
                        C50069 * C50232 * C50124;
    const double C1238 =
        2 * ((C50182 * ae) / C50002 - (C50181 * ce) / C50078 +
             C50069 * C50124) +
        ((C50182 + C50069 * C50270 - (C50265 * ce) / C49936) * ae) / C50002 -
        ((C50181 + C50069 * C50269 + C50265 * ae) * ce) / C50078 +
        C50069 * (C50124 + (C50270 * ae) / C50002 - (C50269 * ce) / C50078 +
                  C50069 * ((C50214 * ae) / C50002 - (C50213 * ce) / C50078 +
                            C50069 * ((-2 * C50074 * C50117) / C50078 +
                                      C50074 * ((-((C50109 * C50110 +
                                                    C50072 * bs[8] *
                                                        std::pow(C50065, 8)) *
                                                   C50070 * C50087) /
                                                 C49936) /
                                                    C50002 -
                                                C50117 / C50078))));
    const double C1352 =
        ((C50182 + C50214 * C50272) * ae) / C50002 -
        ((C50181 + C50213 * C50272) * ce) / C50078 +
        C50069 *
            (C50124 +
             ((-2 * C50074 * C50117) / C50078 +
              C50074 *
                  ((-((C50109 * C50110 + C50072 * bs[8] * std::pow(C50065, 8)) *
                      C50070 * C50087) /
                    C49936) /
                       C50002 -
                   C50117 / C50078)) *
                 C50272);
    const double C1732 =
        C50232 * C50124 + (C50232 * C50270 * ae) / C50002 -
        (C50232 * C50269 * ce) / C50078 +
        C50069 *
            ((C50232 * C50214 * ae) / C50002 - (C50232 * C50213 * ce) / C50078 +
             C50069 * C50232 *
                 ((-2 * C50074 * C50117) / C50078 +
                  C50074 * ((-((C50109 * C50110 +
                                C50072 * bs[8] * std::pow(C50065, 8)) *
                               C50070 * C50087) /
                             C49936) /
                                C50002 -
                            C50117 / C50078)));
    const double C2013 =
        2 * C50232 * C50124 +
        C50232 *
            (C50124 +
             ((-2 * C50074 * C50117) / C50078 +
              C50074 *
                  ((-((C50109 * C50110 + C50072 * bs[8] * std::pow(C50065, 8)) *
                      C50070 * C50087) /
                    C49936) /
                       C50002 -
                   C50117 / C50078)) *
                 C50272);
    const double C2663 =
        3 * (C50105 - (ae * C50260) / C50078 - (C50261 * ce) / C50078 +
             C50069 * C50366) +
        (((-2 * C50260) / C49936 - (C50069 * C50364) / C49936 -
          (C50354 * ce) / C49936) *
         ae) /
            C50002 -
        ((2 * C50261 + C50069 * C50365 + C50354 * ae) * ce) / C50078 +
        C50069 *
            (2 * C50366 - (ae * C50364) / C50078 - (C50365 * ce) / C50078 +
             C50069 *
                 (C50122 - (ae * C50352) / C50078 - (C50355 * ce) / C50078 +
                  C50069 *
                      ((-(C50207 * ce) / C49936) / C50002 -
                       (ae * C50205) / C50078 +
                       C50069 * ((-((C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50087) /
                                  C49936) /
                                     C50002 -
                                 C50117 / C50078))));
    const double C3058 = C3051 + C3052;
    const double C8513 = C8496 + C8497;
    const double C17709 = C17692 + C17693;
    const double C25489 = C25482 + C25483;
    const double C5887 = C5884 + C5885;
    const double C8707 = C8690 + C8691;
    const double C17903 = C17886 + C17887;
    const double C3222 = C3215 + C3216;
    const double C9257 = C9248 + C9249;
    const double C11279 = C11276 + C11277;
    const double C18453 = C18444 + C18445;
    const double C25653 = C25646 + C25647;
    const double C5710 = C5693 + C5694;
    const double C6257 = C51106 * C4749;
    const double C14255 = C51158 * C4749;
    const double C22418 = C51158 * C4749;
    const double C5702 = C51106 * C5671;
    const double C21675 =
        2 * ((((-2 * C50503) / C49936 - (C50232 * C50624) / C49936) * ae) /
                 C50002 -
             ((2 * C50502 + C50232 * C50623) * ce) / C50078 + C50069 * C50669) +
        (((-2 * C50232 * C50417) / C49936 -
          (C50232 * (C50593 * C50272 + C50417)) / C49936) *
         ae) /
            C50002 -
        ((2 * C50232 * C50418 + C50232 * (C50418 + C50596 * C50272)) * ce) /
            C50078 +
        C50069 *
            (C50669 +
             (((-2 * C50639) / C49936 -
               (C50232 * (C50571 * C50272 + C50397)) / C49936) *
              ae) /
                 C50002 -
             ((2 * C50641 + C50232 * (C50400 + C50574 * C50272)) * ce) /
                 C50078 +
             C50069 *
                 ((((-2 * C50643) / C49936 -
                    (C50232 * (C50196 * C50272 + C50166)) / C49936) *
                   ae) /
                      C50002 -
                  ((2 * C50642 + C50232 * (C50170 + C50200 * C50272)) * ce) /
                      C50078 +
                  C50069 *
                      ((-2 * C50644) / C50078 +
                       C50232 * ((-((C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50272) /
                                  C49936) /
                                     C50002 -
                                 C50117 / C50078))));
    const double C23365 =
        3 * C50494 + C50232 * C50669 +
        (((-3 * (C50397 * C50272 + C50297)) / C49936 +
          C50232 * ((-2 * C50639) / C49936 -
                    (C50232 * (C50571 * C50272 + C50397)) / C49936)) *
         ae) /
            C50002 -
        ((3 * (C50300 + C50400 * C50272) +
          C50232 * (2 * C50641 + C50232 * (C50400 + C50574 * C50272))) *
         ce) /
            C50078 +
        C50069 *
            ((((-3 * C50624) / C49936 +
               C50232 * ((-2 * C50643) / C49936 -
                         (C50232 * (C50196 * C50272 + C50166)) / C49936)) *
              ae) /
                 C50002 -
             ((3 * C50623 +
               C50232 * (2 * C50642 + C50232 * (C50170 + C50200 * C50272))) *
              ce) /
                 C50078 +
             C50069 *
                 (3 * C50633 +
                  C50232 *
                      ((-2 * C50644) / C50078 +
                       C50232 * ((-((C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50272) /
                                  C49936) /
                                     C50002 -
                                 C50117 / C50078))));
    const double C24290 =
        ((4 * ((-2 * C50503) / C49936 - (C50232 * C50624) / C49936) +
          C50232 *
              ((-3 * C50624) / C49936 +
               C50232 * ((-2 * C50643) / C49936 -
                         (C50232 * (C50196 * C50272 + C50166)) / C49936))) *
         ae) /
            C50002 -
        ((4 * (2 * C50502 + C50232 * C50623) +
          C50232 *
              (3 * C50623 +
               C50232 * (2 * C50642 + C50232 * (C50170 + C50200 * C50272)))) *
         ce) /
            C50078 +
        C50069 * (4 * C50669 +
                  C50232 * (3 * C50633 +
                            C50232 * ((-2 * C50644) / C50078 +
                                      C50232 * ((-((C50109 * C50110 +
                                                    C50072 * bs[8] *
                                                        std::pow(C50065, 8)) *
                                                   C50070 * C50272) /
                                                 C49936) /
                                                    C50002 -
                                                C50117 / C50078))));
    const double C40767 =
        5 * (3 * C50494 + C50232 * C50669) +
        C50232 * (4 * C50669 +
                  C50232 * (3 * C50633 +
                            C50232 * ((-2 * C50644) / C50078 +
                                      C50232 * ((-((C50109 * C50110 +
                                                    C50072 * bs[8] *
                                                        std::pow(C50065, 8)) *
                                                   C50070 * C50272) /
                                                 C49936) /
                                                    C50002 -
                                                C50117 / C50078))));
    const double C3694 =
        (4 * (2 * C50253 + C50069 * C50338 + C50327 * ae) +
         C50069 * (3 * C50338 + C50069 * C50487 + C50474 * ae) +
         (3 * C50327 + C50069 * C50474) * ae) /
        C50002;
    const double C3848 =
        (2 * C50253 + C50069 * C50338 + C50327 * ae + C50487 * C50272) / C50002;
    const double C4342 =
        (C50232 * (3 * C50338 + C50069 * C50487 + C50474 * ae)) / C50002;
    const double C50615 = C50558 + C50612;
    const double C50488 = C50486 - C50473;
    const double C50614 = C50069 * C50611;
    const double C21079 =
        3 * (C50494 - (ae * (C50397 * C50272 + C50297)) / C50078 -
             ((C50300 + C50400 * C50272) * ce) / C50078 + C50069 * C50637) +
        ((C50429 + C50611 * C50272) * ae) / C50002 -
        ((C50428 + C50609 * C50272) * ce) / C50078 +
        C50069 *
            (2 * C50637 - (ae * (C50593 * C50272 + C50417)) / C50078 -
             ((C50418 + C50596 * C50272) * ce) / C50078 +
             C50069 *
                 (C50633 - (ae * (C50571 * C50272 + C50397)) / C50078 -
                  ((C50400 + C50574 * C50272) * ce) / C50078 +
                  C50069 *
                      ((-((C50170 + C50200 * C50272) * ce) / C49936) / C50002 -
                       (ae * (C50196 * C50272 + C50166)) / C50078 +
                       C50069 * ((-((C50109 * C50110 +
                                     C50072 * bs[8] * std::pow(C50065, 8)) *
                                    C50070 * C50272) /
                                  C49936) /
                                     C50002 -
                                 C50117 / C50078))));
    const double C21673 =
        2 * C50232 * C50429 + C50232 * (C50429 + C50611 * C50272);
    const double C24959 = C24938 + C24939;
    const double C24956 = C24932 + C24933;
    const double C24955 = C24930 + C24931;
    const double C24952 = C24924 + C24925;
    const double C24947 = C24914 + C24915;
    const double C24944 = C24908 + C24909;
    const double C25141 = C25126 + C25127;
    const double C25138 = C25120 + C25121;
    const double C25137 = C25118 + C25119;
    const double C25134 = C25112 + C25113;
    const double C25323 = C25308 + C25309;
    const double C25320 = C25302 + C25303;
    const double C25317 = C25296 + C25297;
    const double C25314 = C25290 + C25291;
    const double C25487 = C25478 + C25479;
    const double C25484 = C25472 + C25473;
    const double C25651 = C25642 + C25643;
    const double C25648 = C25636 + C25637;
    const double C25863 = C25854 + C25855;
    const double C25860 = C25848 + C25849;
    const double C31599 = C31586 + C31587;
    const double C31596 = C31580 + C31581;
    const double C31591 = C31570 + C31571;
    const double C31588 = C31564 + C31565;
    const double C32103 = C32096 + C32097;
    const double C32100 = C32090 + C32091;
    const double C32509 = C32500 + C32501;
    const double C32506 = C32494 + C32495;
    const double C33013 = C33004 + C33005;
    const double C33010 = C32998 + C32999;
    const double C33421 = C33412 + C33413;
    const double C33418 = C33406 + C33407;
    const double C24960 = C24940 + C24941;
    const double C24957 = C24934 + C24935;
    const double C24954 = C24928 + C24929;
    const double C24951 = C24922 + C24923;
    const double C24948 = C24916 + C24917;
    const double C24945 = C24910 + C24911;
    const double C25142 = C25128 + C25129;
    const double C25139 = C25122 + C25123;
    const double C25136 = C25116 + C25117;
    const double C25133 = C25110 + C25111;
    const double C25324 = C25310 + C25311;
    const double C25321 = C25304 + C25305;
    const double C25318 = C25298 + C25299;
    const double C25315 = C25292 + C25293;
    const double C25488 = C25480 + C25481;
    const double C25485 = C25474 + C25475;
    const double C25652 = C25644 + C25645;
    const double C25649 = C25638 + C25639;
    const double C25864 = C25856 + C25857;
    const double C25861 = C25850 + C25851;
    const double C31598 = C31584 + C31585;
    const double C31595 = C31578 + C31579;
    const double C31592 = C31572 + C31573;
    const double C31589 = C31566 + C31567;
    const double C32102 = C32094 + C32095;
    const double C32099 = C32088 + C32089;
    const double C32510 = C32502 + C32503;
    const double C32507 = C32496 + C32497;
    const double C33014 = C33006 + C33007;
    const double C33011 = C33000 + C33001;
    const double C33422 = C33414 + C33415;
    const double C33419 = C33408 + C33409;
    const double C187 = C177 * C51009;
    const double C391 = C379 * C295;
    const double C1471 = C379 * C1453;
    const double C8857 = C8508 + C8509;
    const double C18053 = C17704 + C17705;
    const double C393 = C381 * C294;
    const double C705 = C381 * C51061;
    const double C1136 = C381 * C51061;
    const double C1475 = C381 * C51297;
    const double C8310 = C8300 + C8301;
    const double C17506 = C17496 + C17497;
    const double C578 = C566 * C51009;
    const double C1004 = C566 * C51251;
    const double C1617 = C566 * C1117;
    const double C582 = C570 * C51009;
    const double C5882 = C570 * C51251;
    const double C6429 = C570 * C1117;
    const double C1017 = C1011 * C51061;
    const double C1615 = C1011 * C51061;
    const double C11273 = C1011 * C294;
    const double C12472 = C1011 * C51297;
    const double C9030 = C8699 + C8698;
    const double C14669 = C8698 + C8699;
    const double C18226 = C17895 + C17894;
    const double C28552 = C17894 + C17895;
    const double C40496 = C40494 * C1453;
    const double C40698 = C40494 * C295;
    const double C6710 = C6706 * C51061;
    const double C8152 = C6706 * C51061;
    const double C40488 = C6706 * C51297;
    const double C40696 = C6706 * C294;
    const double C49414 = C16704 + C16703;
    const double C24292 = C22441 + C22442;
    const double C7661 = C7659 * C51009;
    const double C40149 = C7659 * C1117;
    const double C41106 = C7659 * C51251;
    const double C40158 = C40155 * C51061;
    const double C41108 = C40155 * C51061;
    const double C40777 = C40775 * C51009;
    const double C23895 = C23884 + C23885;
    const double C32508 = C32498 + C32499;
    const double C37889 = C37879 + C37880;
    const double C49021 = C49014 + C49015;
    const double C33012 = C33002 + C33003;
    const double C38393 = C38383 + C38384;
    const double C33009 = C24901 * C4344;
    const double C38390 = C2446 * C4344;
    const double C23888 = C17454 * C3847;
    const double C32504 = C24906 * C3847;
    const double C37885 = C2451 * C3847;
    const double C49018 = C8258 * C3847;
    const double C33008 = C24906 * C4341;
    const double C38389 = C2451 * C4341;
    const double C50613 = C50584 + C50610;
    const double C48524 = C48517 - C48518;
    const double C49922 = C49921 - C49919;
    const double C23386 = C23379 - C23380;
    const double C24800 = C24799 - C24797;
    const double C371 = C51106 * C338;
    const double C2488 = C2446 * C338;
    const double C8865 = C51158 * C338;
    const double C18061 = C51158 * C338;
    const double C24943 = C24901 * C338;
    const double C711 = C51106 * C339;
    const double C8291 = C51158 * C339;
    const double C17487 = C51158 * C339;
    const double C831 = C51106 * C529;
    const double C560 = C51106 * C534;
    const double C1007 = C51106 * C987;
    const double C9029 = C51158 * C987;
    const double C18225 = C51158 * C987;
    const double C5889 = C5887 * C51061;
    const double C6431 = C5887 * C51061;
    const double C11281 = C11279 * C295;
    const double C12474 = C11279 * C1453;
    const double C5722 = C5710 * C51009;
    const double C6267 = C6256 + C6257;
    const double C14275 = C14254 + C14255;
    const double C22440 = C22417 + C22418;
    const double C5714 = C5701 + C5702;
    const double C50617 = C50615 + C50597;
    const double C3697 =
        4 * (2 * C50339 - (ae * C50337) / C50078 - (C50338 * ce) / C50078 +
             C50069 * C50483) +
        (((-3 * C50337) / C49936 + C50069 * C50488 - (C50474 * ce) / C49936) *
         ae) /
            C50002 -
        ((3 * C50338 + C50069 * C50487 + C50474 * ae) * ce) / C50078 +
        C50069 *
            (3 * C50483 + (C50488 * ae) / C50002 - (C50487 * ce) / C50078 +
             C50069 *
                 (2 * C50477 - (ae * C50478) / C50078 - (C50479 * ce) / C50078 +
                  C50069 * ((-(ae * C50458) / C49936) / C50002 -
                            C50436 / C50078 - (C50461 * ce) / C50078 +
                            C50069 * ((-(C50442 * ce) / C49936) / C50002 -
                                      (ae * C50438) / C50078 -
                                      (C50069 * C50074 *
                                       (C50109 * C50110 +
                                        C50072 * bs[8] * std::pow(C50065, 8)) *
                                       C50070) /
                                          C50078))));
    const double C4345 =
        3 * ((-(ae * C50232 * C50325) / C49936) / C50002 - C50373 / C50078 -
             (C50232 * C50328 * ce) / C50078 + C50069 * C50528) +
        (C50232 * C50488 * ae) / C50002 - (C50232 * C50487 * ce) / C50078 +
        C50069 *
            (2 * C50528 - (ae * C50232 * C50478) / C50078 -
             (C50232 * C50479 * ce) / C50078 +
             C50069 * ((-(ae * C50232 * C50458) / C49936) / C50002 -
                       C50518 / C50078 - (C50232 * C50461 * ce) / C50078 +
                       C50069 * ((-(C50232 * C50442 * ce) / C49936) / C50002 -
                                 (ae * C50232 * C50438) / C50078 -
                                 (C50069 * C50232 * C50074 *
                                  (C50109 * C50110 +
                                   C50072 * bs[8] * std::pow(C50065, 8)) *
                                  C50070) /
                                     C50078)));
    const double C3695 =
        4 * ((-2 * C50252) / C49936 - (C50069 * C50337) / C49936 -
             (C50327 * ce) / C49936) +
        C50069 * ((-3 * C50337) / C49936 + C50069 * C50488 -
                  (C50474 * ce) / C49936) -
        ((3 * C50327 + C50069 * C50474) * ce) / C49936;
    const double C3849 = (-2 * C50252) / C49936 - (C50069 * C50337) / C49936 -
                         (C50327 * ce) / C49936 + C50488 * C50272;
    const double C4343 = C50232 * ((-3 * C50337) / C49936 + C50069 * C50488 -
                                   (C50474 * ce) / C49936);
    const double C50616 = C50569 + C50614;
    const double C8868 = C8857 * C51061;
    const double C9407 = C8857 * C51061;
    const double C18064 = C18053 * C51061;
    const double C18603 = C18053 * C51061;
    const double C721 = C717 - C705;
    const double C1146 = C1144 - C1136;
    const double C8314 = C8310 * C51009;
    const double C17510 = C17506 * C51009;
    const double C832 = C578 + C577;
    const double C11726 = C577 + C578;
    const double C5684 = C582 + C581;
    const double C6037 = C581 + C582;
    const double C11577 = C11576 - C1017;
    const double C11926 = C11925 + C1017;
    const double C12076 = C12075 - C1615;
    const double C12671 = C12670 + C1615;
    const double C9036 = C9030 * C51009;
    const double C14671 = C14669 * C51009;
    const double C18232 = C18226 * C51009;
    const double C28554 = C28552 * C51009;
    const double C40156 = C40153 - C6710;
    const double C41110 = C41109 - C8152;
    const double C49424 = C49414 * C51009;
    const double C24302 = C24292 * C51009;
    const double C40769 = C7661 + C7660;
    const double C23897 = C23888 + C23889;
    const double C32511 = C32504 + C32505;
    const double C37892 = C37885 + C37886;
    const double C49023 = C49018 + C49019;
    const double C33015 = C33008 + C33009;
    const double C38396 = C38389 + C38390;
    const double C48525 = C48524 - C48519;
    const double C49923 = C49922 - C49920;
    const double C23387 = C23386 - C23381;
    const double C24801 = C24800 - C24798;
    const double C383 = C370 + C371;
    const double C2506 = C2487 + C2488;
    const double C8872 = C8864 + C8865;
    const double C18068 = C18060 + C18061;
    const double C24961 = C24942 + C24943;
    const double C715 = C710 + C711;
    const double C8307 = C8290 + C8291;
    const double C17503 = C17486 + C17487;
    const double C835 = C830 + C831;
    const double C572 = C559 + C560;
    const double C1013 = C1006 + C1007;
    const double C9035 = C9028 + C9029;
    const double C18231 = C18224 + C18225;
    const double C6277 = C6267 * C51061;
    const double C6702 = C6267 * C51061;
    const double C5726 = C5714 * C51009;
    const double C20975 =
        (5 * (3 * C50310 + C50069 * C50428 + C50413 * ae) +
         C50069 * (4 * C50428 + C50069 * C50617 + C50602 * ae) +
         (4 * C50413 + C50069 * C50602) * ae) /
        C50002;
    const double C21077 =
        (3 * C50310 + C50069 * C50428 + C50413 * ae + C50617 * C50272) / C50002;
    const double C21407 =
        (C50232 * (4 * C50428 + C50069 * C50617 + C50602 * ae)) / C50002;
    const double C50618 = C50616 - C50601;
    const double C8874 = C8873 - C8868;
    const double C9410 = C9409 - C9407;
    const double C18070 = C18069 - C18064;
    const double C18606 = C18605 - C18603;
    const double C723 = C721 * C51122;
    const double C1148 = C1146 * C51122;
    const double C8317 = C8314 + C8315;
    const double C17513 = C17510 + C17511;
    const double C836 = C832 * C51122;
    const double C11120 = C832 * C51186;
    const double C34012 = C832 * C51186;
    const double C11727 = C5684 * C51186;
    const double C34603 = C5684 * C51186;
    const double C11578 = C11577 * C51186;
    const double C34455 = C11577 * C51186;
    const double C12077 = C12076 * C51186;
    const double C34947 = C12076 * C51186;
    const double C9038 = C9036 + C9037;
    const double C14672 = C14670 + C14671;
    const double C18234 = C18232 + C18233;
    const double C28555 = C28553 + C28554;
    const double C49430 = C49424 + C49425;
    const double C24308 = C24302 + C24303;
    const double C395 = C383 * C295;
    const double C1477 = C383 * C1453;
    const double C719 = C715 * C51061;
    const double C1140 = C715 * C51061;
    const double C839 = C835 * C51009;
    const double C584 = C572 * C51009;
    const double C1019 = C1013 * C51061;
    const double C1619 = C1013 * C51061;
    const double C20977 =
        5 * (3 * C50426 + (C50429 * ae) / C50002 - (C50428 * ce) / C50078 +
             C50069 * C50613) +
        ((4 * C50429 + C50069 * C50618 - (C50602 * ce) / C49936) * ae) /
            C50002 -
        ((4 * C50428 + C50069 * C50617 + C50602 * ae) * ce) / C50078 +
        C50069 *
            (4 * C50613 + (C50618 * ae) / C50002 - (C50617 * ce) / C50078 +
             C50069 *
                 (3 * C50607 + (C50611 * ae) / C50002 - (C50609 * ce) / C50078 +
                  C50069 *
                      (2 * C50599 - (ae * C50593) / C50078 -
                       (C50596 * ce) / C50078 +
                       C50069 *
                           ((-(ae * C50571) / C49936) / C50002 -
                            C50117 / C50078 - (C50574 * ce) / C50078 +
                            C50069 * ((-(C50200 * ce) / C49936) / C50002 -
                                      (ae * C50196) / C50078 -
                                      (C50069 *
                                       (C50109 * C50110 +
                                        C50072 * bs[8] * std::pow(C50065, 8)) *
                                       C50070) /
                                          C50078)))));
    const double C21409 =
        4 * (2 * C50514 - (ae * C50232 * C50417) / C50078 -
             (C50232 * C50418 * ce) / C50078 + C50069 * C50664) +
        (C50232 * C50618 * ae) / C50002 - (C50232 * C50617 * ce) / C50078 +
        C50069 *
            (3 * C50664 + (C50232 * C50611 * ae) / C50002 -
             (C50232 * C50609 * ce) / C50078 +
             C50069 *
                 (2 * C50662 - (ae * C50232 * C50593) / C50078 -
                  (C50232 * C50596 * ce) / C50078 +
                  C50069 *
                      ((-(ae * C50232 * C50571) / C49936) / C50002 -
                       C50644 / C50078 - (C50232 * C50574 * ce) / C50078 +
                       C50069 * ((-(C50232 * C50200 * ce) / C49936) / C50002 -
                                 (ae * C50232 * C50196) / C50078 -
                                 (C50069 * C50232 *
                                  (C50109 * C50110 +
                                   C50072 * bs[8] * std::pow(C50065, 8)) *
                                  C50070) /
                                     C50078))));
    const double C20976 =
        5 * ((-3 * C50309) / C49936 + C50069 * C50429 -
             (C50413 * ce) / C49936) +
        C50069 * (4 * C50429 + C50069 * C50618 - (C50602 * ce) / C49936) -
        ((4 * C50413 + C50069 * C50602) * ce) / C49936;
    const double C21078 = (-3 * C50309) / C49936 + C50069 * C50429 -
                          (C50413 * ce) / C49936 + C50618 * C50272;
    const double C21408 =
        C50232 * (4 * C50429 + C50069 * C50618 - (C50602 * ce) / C49936);
    const double C8875 = C8874 * C51122;
    const double C9411 = C9410 * C51122;
    const double C18071 = C18070 * C51122;
    const double C18607 = C18606 * C51122;
    const double C8319 = C8317 * C51122;
    const double C17515 = C17513 * C51122;
    const double C11123 = C11120 + C11121;
    const double C34015 = C34012 + C34013;
    const double C11729 = C11727 + C11728;
    const double C34605 = C34603 + C34604;
    const double C11579 = C11574 + C11578;
    const double C34456 = C34454 + C34455;
    const double C12078 = C12073 + C12077;
    const double C34948 = C34946 + C34947;
    const double C9039 = C9038 * C51122;
    const double C18235 = C18234 * C51122;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C687 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51251 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C688 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51122 * C51292 +
           ((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
            (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
               C51122 * C51293 +
           C8875 * C8256) *
              C51294 +
          (((C8499 + C8498) * C688 -
            ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
            (C8501 + C8500) * C51061) *
               C51122 * C51292 +
           ((C8507 + C8506) * C688 -
            ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
            (C8509 + C8508) * C51061) *
               C51122 * C51293 +
           ((C8869 + C8870) * C688 - (C8310 * C51251 + C8311 * C687) +
            (C8871 + C8872) * C51061) *
               C51122 * C8256) *
              C51295 +
          (C8875 * C51292 +
           ((C8303 + C8302) * C687 + (C8301 + C8300) * C51251 -
            (C8870 + C8869) * C688 - (C8872 + C8871) * C51061) *
               C51122 * C51293 +
           ((C8304 + C8305) * C687 + (C8306 + C8307) * C51251 -
            (C8258 * C310 + C51158 * C329 + C8257 * C309 + C51264 * C327) *
                C688 -
            (C8258 * C330 + C51158 * C340 + C8257 * C328 + C51264 * C339) *
                C51061) *
               C51122 * C8256) *
              C686) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C687 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51251 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C688 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51122 * C51292 +
            ((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
             (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                C51122 * C51293 +
            C8875 * C8256) *
               C296 +
           (((C8499 + C8498) * C688 -
             ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
             (C8501 + C8500) * C51061) *
                C51122 * C51292 +
            ((C8507 + C8506) * C688 -
             ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
             (C8509 + C8508) * C51061) *
                C51122 * C51293 +
            ((C8869 + C8870) * C688 - (C8310 * C51251 + C8311 * C687) +
             (C8871 + C8872) * C51061) *
                C51122 * C8256) *
               C50996) *
              C51252 +
          ((((C8257 * C969 + C51264 * C974 + C8258 * C1717 + C51158 * C1721) *
                 C688 -
             ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                  C51251 +
              (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                  C687) +
             (C8257 * C975 + C51264 * C984 + C8258 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C51292 +
            ((C9250 + C9251) * C688 -
             ((C8695 + C8694) * C51251 + (C8693 + C8692) * C687) +
             (C9252 + C9253) * C51061) *
                C51122 * C51293 +
            ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
             (C9256 + C9257) * C51061) *
                C51122 * C8256) *
               C296 +
           (((C8692 + C8693) * C687 + (C8694 + C8695) * C51251 -
             (C9251 + C9250) * C688 - (C9253 + C9252) * C51061) *
                C51122 * C51292 +
            ((C8696 + C8697) * C687 + (C8698 + C8699) * C51251 -
             (C9255 + C9254) * C688 - (C9257 + C9256) * C51061) *
                C51122 * C51293 +
            ((C9032 + C9033) * C687 + (C9034 + C9035) * C51251 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C688 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51122 * C8256) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C298 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C293 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C299 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C294 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C300 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C51292 +
           ((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
            (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
            (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
               C51122 * C51293 +
           (C8308 * C298 + C8309 * C293 - (C8506 + C8507) * C299 -
            (C8508 + C8509) * C294 + (C8510 + C8511) * C300 +
            (C8512 + C8513) * C295) *
               C51122 * C8256) *
              C296 +
          (((C8499 + C8498) * C299 -
            ((C8295 + C8294) * C293 + (C8293 + C8292) * C298) +
            (C8501 + C8500) * C294 - (C8503 + C8502) * C300 -
            (C8505 + C8504) * C295) *
               C51122 * C51292 +
           ((C8507 + C8506) * C299 -
            ((C8299 + C8298) * C293 + (C8297 + C8296) * C298) +
            (C8509 + C8508) * C294 - (C8511 + C8510) * C300 -
            (C8513 + C8512) * C295) *
               C51122 * C51293 +
           ((C8257 * C307 + C51264 * C323 + C8258 * C308 + C51158 * C325) *
                C299 -
            (C8310 * C293 + C8311 * C298) +
            (C8257 * C324 + C51264 * C337 + C8258 * C326 + C51158 * C338) *
                C294 -
            (C8258 * C1226 + C51158 * C1233 + C8257 * C308 + C51264 * C325) *
                C300 -
            (C8258 * C1234 + C51158 * C1238 + C8257 * C326 + C51264 * C338) *
                C295) *
               C51122 * C8256) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C118 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51009) *
               C51122 * C51292 +
           ((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51122 *
               C51293 +
           C8318 * C8256) *
              C112 -
          (C8319 * C8256 +
           ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51122 *
               C51293 +
           ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51122 *
               C51292) *
              C113 +
          (C8318 * C51292 +
           ((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51122 *
               C51293 +
           ((C8304 + C8305) * C118 + (C8306 + C8307) * C51009) * C51122 *
               C8256) *
              C114 -
          (((C8258 * C691 + C51158 * C692 + C8257 * C137 + C51264 * C145) *
                C51009 +
            (C8258 * C689 + C51158 * C690 + C8257 * C124 + C51264 * C136) *
                C118) *
               C51122 * C8256 +
           ((C8307 + C8306) * C51009 + (C8305 + C8304) * C118) * C51122 *
               C51293 +
           C8319 * C51292) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C51292 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51122 *
                C51293 +
            C8318 * C8256) *
               C296 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51122 *
                C51293 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51122 *
                C51292) *
               C50996) *
              C493 +
          ((((C8692 + C8693) * C118 + (C8694 + C8695) * C51009) * C51122 *
                C51292 +
            ((C8696 + C8697) * C118 + (C8698 + C8699) * C51009) * C51122 *
                C51293 +
            ((C8257 * C498 + C51264 * C510 + C8258 * C972 + C51158 * C980) *
                 C118 +
             (C8257 * C511 + C51264 * C528 + C8258 * C981 + C51158 * C987) *
                 C51009) *
                C51122 * C8256) *
               C50996 -
           (((C8699 + C8698) * C51009 + (C8697 + C8696) * C118) * C51122 *
                C8256 +
            ((C8695 + C8694) * C51009 + (C8693 + C8692) * C118) * C51122 *
                C51293 +
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C51009 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C118) *
                C51122 * C51292) *
               C296) *
              C494 +
          ((((C8257 * C501 + C51264 * C516 + C8258 * C1337 + C51158 * C1341) *
                 C118 +
             (C8257 * C517 + C51264 * C531 + C8258 * C1342 + C51158 * C1349) *
                 C51009) *
                C51122 * C51292 +
            ((C8700 + C8701) * C118 + (C8702 + C8703) * C51009) * C51122 *
                C51293 +
            ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51122 *
                C8256) *
               C296 -
           (((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                 C51009 +
             (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                 C118) *
                C51122 * C8256 +
            ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51122 *
                C51293 +
            ((C8703 + C8702) * C51009 + (C8701 + C8700) * C118) * C51122 *
                C51292) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C51292 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51122 *
                C51293 +
            C8318 * C8256) *
               C51294 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51122 *
                C51293 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51122 *
                C51292) *
               C51295 +
           (C8318 * C51292 +
            ((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51122 *
                C51293 +
            ((C8304 + C8305) * C118 + (C8306 + C8307) * C51009) * C51122 *
                C8256) *
               C686) *
              C51252 +
          ((((C8692 + C8693) * C118 + (C8694 + C8695) * C51009) * C51122 *
                C51292 +
            ((C8696 + C8697) * C118 + (C8698 + C8699) * C51009) * C51122 *
                C51293 +
            ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51122 *
                C8256) *
               C51295 -
           (C9039 * C8256 +
            ((C8695 + C8694) * C51009 + (C8693 + C8692) * C118) * C51122 *
                C51293 +
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C51009 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C118) *
                C51122 * C51292) *
               C51294 -
           (((C8258 * C983 + C51158 * C988 + C8257 * C513 + C51264 * C529) *
                 C51009 +
             (C8258 * C973 + C51158 * C982 + C8257 * C499 + C51264 * C512) *
                 C118) *
                C51122 * C8256 +
            ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51122 *
                C51293 +
            C9039 * C51292) *
               C686) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C118 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51009) *
               C51122 * C51292 +
           ((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51122 *
               C51293 +
           C8318 * C8256) *
              C112 -
          (C8319 * C8256 +
           ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51122 *
               C51293 +
           ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51122 *
               C51292) *
              C113 +
          (C8318 * C51292 +
           ((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51122 *
               C51293 +
           ((C8304 + C8305) * C118 + (C8306 + C8307) * C51009) * C51122 *
               C8256) *
              C114 -
          (((C8258 * C691 + C51158 * C692 + C8257 * C137 + C51264 * C145) *
                C51009 +
            (C8258 * C689 + C51158 * C690 + C8257 * C124 + C51264 * C136) *
                C118) *
               C51122 * C8256 +
           ((C8307 + C8306) * C51009 + (C8305 + C8304) * C118) * C51122 *
               C51293 +
           C8319 * C51292) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C298 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C293 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C299 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C294 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C300 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C51292 +
           ((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
            (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
            (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
               C51122 * C51293 +
           (C8308 * C298 + C8309 * C293 - (C8506 + C8507) * C299 -
            (C8508 + C8509) * C294 + (C8510 + C8511) * C300 +
            (C8512 + C8513) * C295) *
               C51122 * C8256) *
              C296 +
          (((C8499 + C8498) * C299 -
            ((C8295 + C8294) * C293 + (C8293 + C8292) * C298) +
            (C8501 + C8500) * C294 - (C8503 + C8502) * C300 -
            (C8505 + C8504) * C295) *
               C51122 * C51292 +
           ((C8507 + C8506) * C299 -
            ((C8299 + C8298) * C293 + (C8297 + C8296) * C298) +
            (C8509 + C8508) * C294 - (C8511 + C8510) * C300 -
            (C8513 + C8512) * C295) *
               C51122 * C51293 +
           ((C8257 * C307 + C51264 * C323 + C8258 * C308 + C51158 * C325) *
                C299 -
            (C8310 * C293 + C8311 * C298) +
            (C8257 * C324 + C51264 * C337 + C8258 * C326 + C51158 * C338) *
                C294 -
            (C8258 * C1226 + C51158 * C1233 + C8257 * C308 + C51264 * C325) *
                C300 -
            (C8258 * C1234 + C51158 * C1238 + C8257 * C326 + C51264 * C338) *
                C295) *
               C51122 * C8256) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1456 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51296 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1457 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51297 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C1458 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C1453) *
               C51122 * C51292 +
           ((C8292 + C8293) * C1456 + (C8294 + C8295) * C51296 -
            (C8498 + C8499) * C1457 - (C8500 + C8501) * C51297 +
            (C8502 + C8503) * C1458 + (C8504 + C8505) * C1453) *
               C51122 * C51293 +
           (C8308 * C1456 + C8309 * C51296 - C8856 * C1457 - C8857 * C51297 +
            (C8510 + C8511) * C1458 + (C8512 + C8513) * C1453) *
               C51122 * C8256) *
              C51243 +
          (((C8499 + C8498) * C1457 -
            ((C8295 + C8294) * C51296 + (C8293 + C8292) * C1456) +
            (C8501 + C8500) * C51297 - (C8503 + C8502) * C1458 -
            (C8505 + C8504) * C1453) *
               C51122 * C51292 +
           ((C8507 + C8506) * C1457 -
            ((C8299 + C8298) * C51296 + (C8297 + C8296) * C1456) +
            (C8509 + C8508) * C51297 - (C8511 + C8510) * C1458 -
            (C8513 + C8512) * C1453) *
               C51122 * C51293 +
           ((C8869 + C8870) * C1457 - (C8310 * C51296 + C8311 * C1456) +
            (C8871 + C8872) * C51297 -
            (C8258 * C1226 + C51158 * C1233 + C8257 * C308 + C51264 * C325) *
                C1458 -
            (C8258 * C1234 + C51158 * C1238 + C8257 * C326 + C51264 * C338) *
                C1453) *
               C51122 * C8256) *
              C50996) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1456 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51296 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1457 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51297 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C1458 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C1453) *
               C51122 * C51292 +
           ((C8292 + C8293) * C1456 + (C8294 + C8295) * C51296 -
            (C8498 + C8499) * C1457 - (C8500 + C8501) * C51297 +
            (C8502 + C8503) * C1458 + (C8504 + C8505) * C1453) *
               C51122 * C51293 +
           (C8308 * C1456 + C8309 * C51296 - C8856 * C1457 - C8857 * C51297 +
            (C8510 + C8511) * C1458 + (C8512 + C8513) * C1453) *
               C51122 * C8256) *
              C50991 * C51252 +
          (((C8257 * C969 + C51264 * C974 + C8258 * C1717 + C51158 * C1721) *
                C1457 -
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C51296 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C1456) +
            (C8257 * C975 + C51264 * C984 + C8258 * C1722 + C51158 * C1729) *
                C51297 -
            (C8258 * C3416 + C51158 * C3419 + C8257 * C1717 + C51264 * C1721) *
                C1458 -
            (C8258 * C3420 + C51158 * C3425 + C8257 * C1722 + C51264 * C1729) *
                C1453) *
               C51122 * C51292 +
           ((C9250 + C9251) * C1457 -
            ((C8695 + C8694) * C51296 + (C8693 + C8692) * C1456) +
            (C9252 + C9253) * C51297 -
            (C8258 * C3417 + C51158 * C3421 + C8257 * C1718 + C51264 * C1723) *
                C1458 -
            (C8258 * C3422 + C51158 * C3426 + C8257 * C1724 + C51264 * C1730) *
                C1453) *
               C51122 * C51293 +
           ((C9254 + C9255) * C1457 - (C9030 * C51296 + C9031 * C1456) +
            (C9256 + C9257) * C51297 -
            (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                C1458 -
            (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                C1453) *
               C51122 * C8256) *
              C50991 * C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
               C1219 +
           (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
               C1214 -
           (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
               C1220 -
           (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
               C1215 +
           (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
               C1221 +
           (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
               C1216 -
           (C8258 * C2652 + C51158 * C2655 + C8257 * C1223 + C51264 * C1227) *
               C1222 -
           (C8258 * C2656 + C51158 * C2661 + C8257 * C1228 + C51264 * C1235) *
               C1217) *
              C51122 * C51292 +
          ((C8292 + C8293) * C1219 + (C8294 + C8295) * C1214 -
           (C8498 + C8499) * C1220 - (C8500 + C8501) * C1215 +
           (C8502 + C8503) * C1221 + (C8504 + C8505) * C1216 -
           (C8258 * C2653 + C51158 * C2657 + C8257 * C1224 + C51264 * C1229) *
               C1222 -
           (C8258 * C2658 + C51158 * C2662 + C8257 * C1230 + C51264 * C1236) *
               C1217) *
              C51122 * C51293 +
          (C8308 * C1219 + C8309 * C1214 - C8856 * C1220 - C8857 * C1215 +
           (C8510 + C8511) * C1221 + (C8512 + C8513) * C1216 -
           (C8258 * C2654 + C51158 * C2659 + C8257 * C1225 + C51264 * C1231) *
               C1222 -
           (C8258 * C2660 + C51158 * C2663 + C8257 * C1232 + C51264 * C1237) *
               C1217) *
              C51122 * C8256) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1122 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1117 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1123 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51122 * C51292 +
           ((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
            (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
               C51122 * C51293 +
           C9411 * C8256) *
              C1119 +
          (((C8499 + C8498) * C1123 -
            ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
            (C8501 + C8500) * C51061) *
               C51122 * C51292 +
           ((C8507 + C8506) * C1123 -
            ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
            (C8509 + C8508) * C51061) *
               C51122 * C51293 +
           ((C8869 + C8870) * C1123 - (C8310 * C1117 + C8311 * C1122) +
            (C8871 + C8872) * C51061) *
               C51122 * C8256) *
              C1120 +
          (C9411 * C51292 +
           ((C8303 + C8302) * C1122 + (C8301 + C8300) * C1117 -
            (C8870 + C8869) * C1123 - (C8872 + C8871) * C51061) *
               C51122 * C51293 +
           ((C8304 + C8305) * C1122 + (C8306 + C8307) * C1117 -
            (C8258 * C310 + C51158 * C329 + C8257 * C309 + C51264 * C327) *
                C1123 -
            (C8258 * C330 + C51158 * C340 + C8257 * C328 + C51264 * C339) *
                C51061) *
               C51122 * C8256) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1122 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1117 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1123 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51122 * C51292 +
           ((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
            (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
               C51122 * C51293 +
           C9411 * C8256) *
              C50991 * C493 +
          (((C8257 * C969 + C51264 * C974 + C8258 * C1717 + C51158 * C1721) *
                C1123 -
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C1117 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C1122) +
            (C8257 * C975 + C51264 * C984 + C8258 * C1722 + C51158 * C1729) *
                C51061) *
               C51122 * C51292 +
           ((C9250 + C9251) * C1123 -
            ((C8695 + C8694) * C1117 + (C8693 + C8692) * C1122) +
            (C9252 + C9253) * C51061) *
               C51122 * C51293 +
           ((C9254 + C9255) * C1123 - (C9030 * C1117 + C9031 * C1122) +
            (C9256 + C9257) * C51061) *
               C51122 * C8256) *
              C50991 * C494 +
          (((C8257 * C501 + C51264 * C516 + C8258 * C1337 + C51158 * C1341) *
                C1122 +
            (C8257 * C517 + C51264 * C531 + C8258 * C1342 + C51158 * C1349) *
                C1117 -
            (C8258 * C2846 + C51158 * C2849 + C8257 * C1337 + C51264 * C1341) *
                C1123 -
            (C8258 * C2850 + C51158 * C2855 + C8257 * C1342 + C51264 * C1349) *
                C51061) *
               C51122 * C51292 +
           ((C8700 + C8701) * C1122 + (C8702 + C8703) * C1117 -
            (C8258 * C2847 + C51158 * C2851 + C8257 * C1338 + C51264 * C1343) *
                C1123 -
            (C8258 * C2852 + C51158 * C2856 + C8257 * C1344 + C51264 * C1350) *
                C51061) *
               C51122 * C51293 +
           ((C8704 + C8705) * C1122 + (C8706 + C8707) * C1117 -
            (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 + C51264 * C1345) *
                C1123 -
            (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 + C51264 * C1351) *
                C51061) *
               C51122 * C8256) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1122 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C1117 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1123 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51122 * C51292 +
            ((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
             (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                C51122 * C51293 +
            C9411 * C8256) *
               C51243 +
           (((C8499 + C8498) * C1123 -
             ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
             (C8501 + C8500) * C51061) *
                C51122 * C51292 +
            ((C8507 + C8506) * C1123 -
             ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
             (C8509 + C8508) * C51061) *
                C51122 * C51293 +
            ((C8869 + C8870) * C1123 - (C8310 * C1117 + C8311 * C1122) +
             (C8871 + C8872) * C51061) *
                C51122 * C8256) *
               C50996) *
              C51252 +
          ((((C8257 * C969 + C51264 * C974 + C8258 * C1717 + C51158 * C1721) *
                 C1123 -
             ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                  C1117 +
              (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                  C1122) +
             (C8257 * C975 + C51264 * C984 + C8258 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C51292 +
            ((C9250 + C9251) * C1123 -
             ((C8695 + C8694) * C1117 + (C8693 + C8692) * C1122) +
             (C9252 + C9253) * C51061) *
                C51122 * C51293 +
            ((C9254 + C9255) * C1123 - (C9030 * C1117 + C9031 * C1122) +
             (C9256 + C9257) * C51061) *
                C51122 * C8256) *
               C51243 +
           (((C8692 + C8693) * C1122 + (C8694 + C8695) * C1117 -
             (C9251 + C9250) * C1123 - (C9253 + C9252) * C51061) *
                C51122 * C51292 +
            ((C8696 + C8697) * C1122 + (C8698 + C8699) * C1117 -
             (C9255 + C9254) * C1123 - (C9257 + C9256) * C51061) *
                C51122 * C51293 +
            ((C9032 + C9033) * C1122 + (C9034 + C9035) * C1117 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C1123 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51122 * C8256) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1122 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1117 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1123 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51122 * C51292 +
           ((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
            (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
               C51122 * C51293 +
           C9411 * C8256) *
              C1119 +
          (((C8499 + C8498) * C1123 -
            ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
            (C8501 + C8500) * C51061) *
               C51122 * C51292 +
           ((C8507 + C8506) * C1123 -
            ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
            (C8509 + C8508) * C51061) *
               C51122 * C51293 +
           ((C8869 + C8870) * C1123 - (C8310 * C1117 + C8311 * C1122) +
            (C8871 + C8872) * C51061) *
               C51122 * C8256) *
              C1120 +
          (C9411 * C51292 +
           ((C8303 + C8302) * C1122 + (C8301 + C8300) * C1117 -
            (C8870 + C8869) * C1123 - (C8872 + C8871) * C51061) *
               C51122 * C51293 +
           ((C8304 + C8305) * C1122 + (C8306 + C8307) * C1117 -
            (C8258 * C310 + C51158 * C329 + C8257 * C309 + C51264 * C327) *
                C1123 -
            (C8258 * C330 + C51158 * C340 + C8257 * C328 + C51264 * C339) *
                C51061) *
               C51122 * C8256) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
               C1219 +
           (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
               C1214 -
           (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
               C1220 -
           (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
               C1215 +
           (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
               C1221 +
           (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
               C1216 -
           (C8258 * C2652 + C51158 * C2655 + C8257 * C1223 + C51264 * C1227) *
               C1222 -
           (C8258 * C2656 + C51158 * C2661 + C8257 * C1228 + C51264 * C1235) *
               C1217) *
              C51122 * C51292 +
          ((C8292 + C8293) * C1219 + (C8294 + C8295) * C1214 -
           (C8498 + C8499) * C1220 - (C8500 + C8501) * C1215 +
           (C8502 + C8503) * C1221 + (C8504 + C8505) * C1216 -
           (C8258 * C2653 + C51158 * C2657 + C8257 * C1224 + C51264 * C1229) *
               C1222 -
           (C8258 * C2658 + C51158 * C2662 + C8257 * C1230 + C51264 * C1236) *
               C1217) *
              C51122 * C51293 +
          (C8308 * C1219 + C8309 * C1214 - C8856 * C1220 - C8857 * C1215 +
           (C8510 + C8511) * C1221 + (C8512 + C8513) * C1216 -
           (C8258 * C2654 + C51158 * C2659 + C8257 * C1225 + C51264 * C1231) *
               C1222 -
           (C8258 * C2660 + C51158 * C2663 + C8257 * C1232 + C51264 * C1237) *
               C1217) *
              C51122 * C8256) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C687 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51251 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C688 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51122 * C51292 +
            ((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
             (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                C51122 * C51293 +
            C8875 * C8256) *
               C51243 +
           (((C8499 + C8498) * C688 -
             ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
             (C8501 + C8500) * C51061) *
                C51122 * C51292 +
            ((C8507 + C8506) * C688 -
             ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
             (C8509 + C8508) * C51061) *
                C51122 * C51293 +
            ((C8869 + C8870) * C688 - (C8310 * C51251 + C8311 * C687) +
             (C8871 + C8872) * C51061) *
                C51122 * C8256) *
               C50996) *
              C1831 +
          ((((C8257 * C969 + C51264 * C974 + C8258 * C1717 + C51158 * C1721) *
                 C688 -
             ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                  C51251 +
              (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                  C687) +
             (C8257 * C975 + C51264 * C984 + C8258 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C51292 +
            ((C9250 + C9251) * C688 -
             ((C8695 + C8694) * C51251 + (C8693 + C8692) * C687) +
             (C9252 + C9253) * C51061) *
                C51122 * C51293 +
            ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
             (C9256 + C9257) * C51061) *
                C51122 * C8256) *
               C51243 +
           (((C8692 + C8693) * C687 + (C8694 + C8695) * C51251 -
             (C9251 + C9250) * C688 - (C9253 + C9252) * C51061) *
                C51122 * C51292 +
            ((C8696 + C8697) * C687 + (C8698 + C8699) * C51251 -
             (C9255 + C9254) * C688 - (C9257 + C9256) * C51061) *
                C51122 * C51293 +
            ((C9032 + C9033) * C687 + (C9034 + C9035) * C51251 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C688 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51122 * C8256) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C687 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51251 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C688 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51122 * C51292 +
           ((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
            (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
               C51122 * C51293 +
           C8875 * C8256) *
              C50991 * C51298 +
          (((C8257 * C969 + C51264 * C974 + C8258 * C1717 + C51158 * C1721) *
                C688 -
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C51251 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C687) +
            (C8257 * C975 + C51264 * C984 + C8258 * C1722 + C51158 * C1729) *
                C51061) *
               C51122 * C51292 +
           ((C9250 + C9251) * C688 -
            ((C8695 + C8694) * C51251 + (C8693 + C8692) * C687) +
            (C9252 + C9253) * C51061) *
               C51122 * C51293 +
           ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
            (C9256 + C9257) * C51061) *
               C51122 * C8256) *
              C50991 * C51299 +
          (((C8257 * C501 + C51264 * C516 + C8258 * C1337 + C51158 * C1341) *
                C687 +
            (C8257 * C517 + C51264 * C531 + C8258 * C1342 + C51158 * C1349) *
                C51251 -
            (C8258 * C2846 + C51158 * C2849 + C8257 * C1337 + C51264 * C1341) *
                C688 -
            (C8258 * C2850 + C51158 * C2855 + C8257 * C1342 + C51264 * C1349) *
                C51061) *
               C51122 * C51292 +
           ((C8700 + C8701) * C687 + (C8702 + C8703) * C51251 -
            (C8258 * C2847 + C51158 * C2851 + C8257 * C1338 + C51264 * C1343) *
                C688 -
            (C8258 * C2852 + C51158 * C2856 + C8257 * C1344 + C51264 * C1350) *
                C51061) *
               C51122 * C51293 +
           ((C8704 + C8705) * C687 + (C8706 + C8707) * C51251 -
            (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 + C51264 * C1345) *
                C688 -
            (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 + C51264 * C1351) *
                C51061) *
               C51122 * C8256) *
              C50991 * C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C298 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C293 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C299 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C294 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C300 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C51292 +
           ((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
            (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
            (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
               C51122 * C51293 +
           (C8308 * C298 + C8309 * C293 - C8856 * C299 - C8857 * C294 +
            (C8510 + C8511) * C300 + (C8512 + C8513) * C295) *
               C51122 * C8256) *
              C50991 * C1831 +
          (((C8257 * C969 + C51264 * C974 + C8258 * C1717 + C51158 * C1721) *
                C299 -
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C293 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C298) +
            (C8257 * C975 + C51264 * C984 + C8258 * C1722 + C51158 * C1729) *
                C294 -
            (C8258 * C3416 + C51158 * C3419 + C8257 * C1717 + C51264 * C1721) *
                C300 -
            (C8258 * C3420 + C51158 * C3425 + C8257 * C1722 + C51264 * C1729) *
                C295) *
               C51122 * C51292 +
           ((C9250 + C9251) * C299 -
            ((C8695 + C8694) * C293 + (C8693 + C8692) * C298) +
            (C9252 + C9253) * C294 -
            (C8258 * C3417 + C51158 * C3421 + C8257 * C1718 + C51264 * C1723) *
                C300 -
            (C8258 * C3422 + C51158 * C3426 + C8257 * C1724 + C51264 * C1730) *
                C295) *
               C51122 * C51293 +
           ((C9254 + C9255) * C299 - (C9030 * C293 + C9031 * C298) +
            (C9256 + C9257) * C294 -
            (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                C300 -
            (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                C295) *
               C51122 * C8256) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C51292 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51122 *
                C51293 +
            C8318 * C8256) *
               C1119 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51122 *
                C51293 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51122 *
                C51292) *
               C1120 +
           (C8318 * C51292 +
            ((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51122 *
                C51293 +
            ((C8304 + C8305) * C118 + (C8306 + C8307) * C51009) * C51122 *
                C8256) *
               C1121) *
              C1831 +
          ((((C8692 + C8693) * C118 + (C8694 + C8695) * C51009) * C51122 *
                C51292 +
            ((C8696 + C8697) * C118 + (C8698 + C8699) * C51009) * C51122 *
                C51293 +
            ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51122 *
                C8256) *
               C1120 -
           (C9039 * C8256 +
            ((C8695 + C8694) * C51009 + (C8693 + C8692) * C118) * C51122 *
                C51293 +
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C51009 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C118) *
                C51122 * C51292) *
               C1119 -
           (((C8258 * C983 + C51158 * C988 + C8257 * C513 + C51264 * C529) *
                 C51009 +
             (C8258 * C973 + C51158 * C982 + C8257 * C499 + C51264 * C512) *
                 C118) *
                C51122 * C8256 +
            ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51122 *
                C51293 +
            C9039 * C51292) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C118 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51009) *
               C51122 * C51292 +
           ((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51122 *
               C51293 +
           C8318 * C8256) *
              C50991 * C1997 -
          (C9039 * C8256 +
           ((C8695 + C8694) * C51009 + (C8693 + C8692) * C118) * C51122 *
               C51293 +
           ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                C51009 +
            (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                C118) *
               C51122 * C51292) *
              C50991 * C1998 +
          (((C8257 * C501 + C51264 * C516 + C8258 * C1337 + C51158 * C1341) *
                C118 +
            (C8257 * C517 + C51264 * C531 + C8258 * C1342 + C51158 * C1349) *
                C51009) *
               C51122 * C51292 +
           ((C8700 + C8701) * C118 + (C8702 + C8703) * C51009) * C51122 *
               C51293 +
           ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51122 *
               C8256) *
              C50991 * C1999 -
          (((C8258 * C6233 + C51158 * C6234 + C8257 * C2007 + C51264 * C2014) *
                C51009 +
            (C8258 * C6231 + C51158 * C6232 + C8257 * C2002 + C51264 * C2008) *
                C118) *
               C51122 * C8256 +
           ((C8258 * C4741 + C51158 * C4749 + C8257 * C2009 + C51264 * C2015) *
                C51009 +
            (C8258 * C4737 + C51158 * C4743 + C8257 * C2003 + C51264 * C2010) *
                C118) *
               C51122 * C51293 +
           ((C8258 * C4745 + C51158 * C4751 + C8257 * C2011 + C51264 * C2016) *
                C51009 +
            (C8258 * C4739 + C51158 * C4747 + C8257 * C2004 + C51264 * C2012) *
                C118) *
               C51122 * C51292) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C51292 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51122 *
                C51293 +
            C8318 * C8256) *
               C51243 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51122 *
                C51293 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51122 *
                C51292) *
               C50996) *
              C51298 +
          ((((C8692 + C8693) * C118 + (C8694 + C8695) * C51009) * C51122 *
                C51292 +
            ((C8696 + C8697) * C118 + (C8698 + C8699) * C51009) * C51122 *
                C51293 +
            ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51122 *
                C8256) *
               C50996 -
           (C9039 * C8256 +
            ((C8695 + C8694) * C51009 + (C8693 + C8692) * C118) * C51122 *
                C51293 +
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C51009 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C118) *
                C51122 * C51292) *
               C51243) *
              C51299 +
          ((((C8257 * C501 + C51264 * C516 + C8258 * C1337 + C51158 * C1341) *
                 C118 +
             (C8257 * C517 + C51264 * C531 + C8258 * C1342 + C51158 * C1349) *
                 C51009) *
                C51122 * C51292 +
            ((C8700 + C8701) * C118 + (C8702 + C8703) * C51009) * C51122 *
                C51293 +
            ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51122 *
                C8256) *
               C51243 -
           (((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                 C51009 +
             (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                 C118) *
                C51122 * C8256 +
            ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51122 *
                C51293 +
            ((C8703 + C8702) * C51009 + (C8701 + C8700) * C118) * C51122 *
                C51292) *
               C50996) *
              C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C51292 +
            ((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51122 *
                C51293 +
            C8318 * C8256) *
               C1119 -
           (C8319 * C8256 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51122 *
                C51293 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51122 *
                C51292) *
               C1120 +
           (C8318 * C51292 +
            ((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51122 *
                C51293 +
            ((C8304 + C8305) * C118 + (C8306 + C8307) * C51009) * C51122 *
                C8256) *
               C1121) *
              C1831 +
          ((((C8692 + C8693) * C118 + (C8694 + C8695) * C51009) * C51122 *
                C51292 +
            ((C8696 + C8697) * C118 + (C8698 + C8699) * C51009) * C51122 *
                C51293 +
            ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51122 *
                C8256) *
               C1120 -
           (C9039 * C8256 +
            ((C8695 + C8694) * C51009 + (C8693 + C8692) * C118) * C51122 *
                C51293 +
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C51009 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C118) *
                C51122 * C51292) *
               C1119 -
           (((C8258 * C983 + C51158 * C988 + C8257 * C513 + C51264 * C529) *
                 C51009 +
             (C8258 * C973 + C51158 * C982 + C8257 * C499 + C51264 * C512) *
                 C118) *
                C51122 * C8256 +
            ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51122 *
                C51293 +
            C9039 * C51292) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C298 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C293 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C299 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C294 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C300 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C51292 +
           ((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
            (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
            (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
               C51122 * C51293 +
           (C8308 * C298 + C8309 * C293 - C8856 * C299 - C8857 * C294 +
            (C8510 + C8511) * C300 + (C8512 + C8513) * C295) *
               C51122 * C8256) *
              C50991 * C1831 +
          (((C8257 * C969 + C51264 * C974 + C8258 * C1717 + C51158 * C1721) *
                C299 -
            ((C8258 * C975 + C51158 * C984 + C8257 * C514 + C51264 * C530) *
                 C293 +
             (C8258 * C969 + C51158 * C974 + C8257 * C500 + C51264 * C515) *
                 C298) +
            (C8257 * C975 + C51264 * C984 + C8258 * C1722 + C51158 * C1729) *
                C294 -
            (C8258 * C3416 + C51158 * C3419 + C8257 * C1717 + C51264 * C1721) *
                C300 -
            (C8258 * C3420 + C51158 * C3425 + C8257 * C1722 + C51264 * C1729) *
                C295) *
               C51122 * C51292 +
           ((C9250 + C9251) * C299 -
            ((C8695 + C8694) * C293 + (C8693 + C8692) * C298) +
            (C9252 + C9253) * C294 -
            (C8258 * C3417 + C51158 * C3421 + C8257 * C1718 + C51264 * C1723) *
                C300 -
            (C8258 * C3422 + C51158 * C3426 + C8257 * C1724 + C51264 * C1730) *
                C295) *
               C51122 * C51293 +
           ((C9254 + C9255) * C299 - (C9030 * C293 + C9031 * C298) +
            (C9256 + C9257) * C294 -
            (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                C300 -
            (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                C295) *
               C51122 * C8256) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C687 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51251 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C688 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51265 +
            ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
             (C8258 * C1717 + C51158 * C1721 + C8257 * C969 + C51264 * C974) *
                 C688 -
             (C8258 * C1722 + C51158 * C1729 + C8257 * C975 + C51264 * C984) *
                 C51061) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
             (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                C51265 +
            (C14232 * C687 + C14233 * C51251 - (C9251 + C9250) * C688 -
             (C9253 + C9252) * C51061) *
                C51186) *
               C50977) *
              C51294 +
          ((((C8499 + C8498) * C688 -
             ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
             (C8501 + C8500) * C51061) *
                C51265 +
            ((C9250 + C9251) * C688 - (C14234 * C51251 + C14235 * C687) +
             (C9252 + C9253) * C51061) *
                C51186) *
               C2447 +
           (((C8507 + C8506) * C688 -
             ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
             (C8509 + C8508) * C51061) *
                C51265 +
            ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
             (C9256 + C9257) * C51061) *
                C51186) *
               C50977) *
              C51295 +
          ((C8874 * C51265 +
            ((C8696 + C8697) * C687 + (C8698 + C8699) * C51251 -
             (C9255 + C9254) * C688 - (C9257 + C9256) * C51061) *
                C51186) *
               C2447 +
           (((C8303 + C8302) * C687 + (C8301 + C8300) * C51251 -
             (C8870 + C8869) * C688 - (C8872 + C8871) * C51061) *
                C51265 +
            ((C9032 + C9033) * C687 + (C9034 + C9035) * C51251 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C688 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C686) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C687 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51251 -
              (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                  C688 -
              (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                  C51061) *
                 C51265 +
             ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
              (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                 C51186) *
                C2447 +
            (((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
              (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                 C51265 +
             C14971 * C51186) *
                C50977) *
               C296 +
           ((((C8499 + C8498) * C688 -
              ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
              (C8501 + C8500) * C51061) *
                 C51265 +
             C14972 * C51186) *
                C2447 +
            (((C8507 + C8506) * C688 -
              ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
              (C8509 + C8508) * C51061) *
                 C51265 +
             ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
              (C9256 + C9257) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51252 +
          (((((C14956 + C14955) * C688 -
              ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
              (C14958 + C14957) * C51061) *
                 C51265 +
             ((C8257 * C1337 + C51264 * C1341 + C8258 * C2846 +
               C51158 * C2849) *
                  C688 -
              ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
              (C8257 * C1342 + C51264 * C1349 + C8258 * C2850 +
               C51158 * C2855) *
                  C51061) *
                 C51186) *
                C2447 +
            (C14972 * C51265 +
             ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
              (C14967 + C14968) * C51061) *
                 C51186) *
                C50977) *
               C296 +
           ((C14971 * C51265 +
             (C14236 * C687 + C14237 * C51251 - (C14966 + C14965) * C688 -
              (C14968 + C14967) * C51061) *
                 C51186) *
                C2447 +
            ((C14668 * C687 + C14669 * C51251 - (C9255 + C9254) * C688 -
              (C9257 + C9256) * C51061) *
                 C51265 +
             ((C8704 + C8705) * C687 + (C8706 + C8707) * C51251 -
              (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 +
               C51264 * C1345) *
                  C688 -
              (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 +
               C51264 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C298 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C293 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C299 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C294 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C300 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C295) *
                C51265 +
            ((C8257 * C500 + C51264 * C515 + C8258 * C969 + C51158 * C974) *
                 C298 +
             (C8257 * C514 + C51264 * C530 + C8258 * C975 + C51158 * C984) *
                 C293 -
             (C8258 * C1717 + C51158 * C1721 + C8257 * C969 + C51264 * C974) *
                 C299 -
             (C8258 * C1722 + C51158 * C1729 + C8257 * C975 + C51264 * C984) *
                 C294 +
             (C8257 * C1717 + C51264 * C1721 + C8258 * C3416 + C51158 * C3419) *
                 C300 +
             (C8257 * C1722 + C51264 * C1729 + C8258 * C3420 + C51158 * C3425) *
                 C295) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
             (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
             (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
                C51265 +
            ((C8692 + C8693) * C298 + (C8694 + C8695) * C293 -
             (C9251 + C9250) * C299 - (C9253 + C9252) * C294 +
             (C14026 + C14027) * C300 + (C14028 + C14029) * C295) *
                C51186) *
               C50977) *
              C296 +
          ((((C8499 + C8498) * C299 -
             ((C8295 + C8294) * C293 + (C8293 + C8292) * C298) +
             (C8501 + C8500) * C294 - (C8503 + C8502) * C300 -
             (C8505 + C8504) * C295) *
                C51265 +
            ((C9250 + C9251) * C299 -
             ((C8695 + C8694) * C293 + (C8693 + C8692) * C298) +
             (C9252 + C9253) * C294 - (C14027 + C14026) * C300 -
             (C14029 + C14028) * C295) *
                C51186) *
               C2447 +
           (((C8507 + C8506) * C299 -
             ((C8299 + C8298) * C293 + (C8297 + C8296) * C298) +
             (C8509 + C8508) * C294 - (C8511 + C8510) * C300 -
             (C8513 + C8512) * C295) *
                C51265 +
            ((C9254 + C9255) * C299 - (C9030 * C293 + C9031 * C298) +
             (C9256 + C9257) * C294 -
             (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                 C300 -
             (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                 C295) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51265 +
            ((C8257 * C500 + C51264 * C515 + C8258 * C969 + C51158 * C974) *
                 C118 +
             (C8257 * C514 + C51264 * C530 + C8258 * C975 + C51158 * C984) *
                 C51009) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51265 +
            ((C8692 + C8693) * C118 + (C8694 + C8695) * C51009) * C51186) *
               C50977) *
              C112 -
          ((C9038 * C51186 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51265) *
               C50977 +
           (((C8695 + C8694) * C51009 + (C8693 + C8692) * C118) * C51186 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51265) *
               C2447) *
              C113 +
          ((C8316 * C51265 +
            ((C8696 + C8697) * C118 + (C8698 + C8699) * C51009) * C51186) *
               C2447 +
           (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51265 +
            ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
               C50977) *
              C114 -
          ((((C8258 * C983 + C51158 * C988 + C8257 * C513 + C51264 * C529) *
                 C51009 +
             (C8258 * C973 + C51158 * C982 + C8257 * C499 + C51264 * C512) *
                 C118) *
                C51186 +
            ((C8307 + C8306) * C51009 + (C8305 + C8304) * C118) * C51265) *
               C50977 +
           (((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51186 +
            C8317 * C51265) *
               C2447) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51265 +
             C14276 * C51186) *
                C50977) *
               C296 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51265) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51265) *
                C2447) *
               C50996) *
              C493 +
          (((C14276 * C51265 + C14278 * C51186) * C2447 +
            (((C8696 + C8697) * C118 + (C8698 + C8699) * C51009) * C51265 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C50996 -
           ((C14279 * C51186 + C14277 * C51265) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51265) *
                C2447) *
               C296) *
              C494 +
          (((((C14271 + C14270) * C118 + (C14269 + C14268) * C51009) * C51265 +
             ((C8257 * C2004 + C51264 * C2012 + C8258 * C4739 +
               C51158 * C4747) *
                  C118 +
              (C8257 * C2011 + C51264 * C2016 + C8258 * C4745 +
               C51158 * C4751) *
                  C51009) *
                 C51186) *
                C2447 +
            (C14278 * C51265 +
             ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C51186) *
                C50977) *
               C296 -
           ((((C8258 * C6233 + C51158 * C6234 + C8257 * C2007 +
               C51264 * C2014) *
                  C51009 +
              (C8258 * C6231 + C51158 * C6232 + C8257 * C2002 +
               C51264 * C2008) *
                  C118) *
                 C51186 +
             ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51265) *
                C50977 +
            (((C14275 + C14274) * C51009 + (C14273 + C14272) * C118) * C51186 +
             C14279 * C51265) *
                C2447) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51265 +
             C14276 * C51186) *
                C50977) *
               C51294 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51265) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51265) *
                C2447) *
               C51295 +
           ((C8316 * C51265 + C14672 * C51186) * C2447 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51265 +
             ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
                C50977) *
               C686) *
              C51252 +
          (((C14276 * C51265 + C14278 * C51186) * C2447 +
            (C14672 * C51265 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C51295 -
           ((C14279 * C51186 + C14277 * C51265) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51265) *
                C2447) *
               C51294 -
           ((((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                  C51009 +
              (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                  C118) *
                 C51186 +
             ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51265) *
                C50977 +
            (((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51186 +
             C9038 * C51265) *
                C2447) *
               C686) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51265 +
            ((C8257 * C500 + C51264 * C515 + C8258 * C969 + C51158 * C974) *
                 C118 +
             (C8257 * C514 + C51264 * C530 + C8258 * C975 + C51158 * C984) *
                 C51009) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51265 +
            ((C8692 + C8693) * C118 + (C8694 + C8695) * C51009) * C51186) *
               C50977) *
              C112 -
          ((C9038 * C51186 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51265) *
               C50977 +
           (((C8695 + C8694) * C51009 + (C8693 + C8692) * C118) * C51186 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51265) *
               C2447) *
              C113 +
          ((C8316 * C51265 +
            ((C8696 + C8697) * C118 + (C8698 + C8699) * C51009) * C51186) *
               C2447 +
           (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51265 +
            ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
               C50977) *
              C114 -
          ((((C8258 * C983 + C51158 * C988 + C8257 * C513 + C51264 * C529) *
                 C51009 +
             (C8258 * C973 + C51158 * C982 + C8257 * C499 + C51264 * C512) *
                 C118) *
                C51186 +
            ((C8307 + C8306) * C51009 + (C8305 + C8304) * C118) * C51265) *
               C50977 +
           (((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51186 +
            C8317 * C51265) *
               C2447) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C298 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C293 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C299 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C294 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C300 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C295) *
                C51265 +
            ((C8257 * C500 + C51264 * C515 + C8258 * C969 + C51158 * C974) *
                 C298 +
             (C8257 * C514 + C51264 * C530 + C8258 * C975 + C51158 * C984) *
                 C293 -
             (C8258 * C1717 + C51158 * C1721 + C8257 * C969 + C51264 * C974) *
                 C299 -
             (C8258 * C1722 + C51158 * C1729 + C8257 * C975 + C51264 * C984) *
                 C294 +
             (C8257 * C1717 + C51264 * C1721 + C8258 * C3416 + C51158 * C3419) *
                 C300 +
             (C8257 * C1722 + C51264 * C1729 + C8258 * C3420 + C51158 * C3425) *
                 C295) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
             (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
             (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
                C51265 +
            ((C8692 + C8693) * C298 + (C8694 + C8695) * C293 -
             (C9251 + C9250) * C299 - (C9253 + C9252) * C294 +
             (C14026 + C14027) * C300 + (C14028 + C14029) * C295) *
                C51186) *
               C50977) *
              C296 +
          ((((C8499 + C8498) * C299 -
             ((C8295 + C8294) * C293 + (C8293 + C8292) * C298) +
             (C8501 + C8500) * C294 - (C8503 + C8502) * C300 -
             (C8505 + C8504) * C295) *
                C51265 +
            ((C9250 + C9251) * C299 -
             ((C8695 + C8694) * C293 + (C8693 + C8692) * C298) +
             (C9252 + C9253) * C294 - (C14027 + C14026) * C300 -
             (C14029 + C14028) * C295) *
                C51186) *
               C2447 +
           (((C8507 + C8506) * C299 -
             ((C8299 + C8298) * C293 + (C8297 + C8296) * C298) +
             (C8509 + C8508) * C294 - (C8511 + C8510) * C300 -
             (C8513 + C8512) * C295) *
                C51265 +
            ((C9254 + C9255) * C299 - (C9030 * C293 + C9031 * C298) +
             (C9256 + C9257) * C294 -
             (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                 C300 -
             (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                 C295) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1456 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51296 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1457 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51297 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C1458 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C1453) *
                C51265 +
            ((C14256 + C14257) * C1456 + (C14258 + C14259) * C51296 -
             (C14955 + C14956) * C1457 - (C14957 + C14958) * C51297 +
             (C8257 * C1717 + C51264 * C1721 + C8258 * C3416 + C51158 * C3419) *
                 C1458 +
             (C8257 * C1722 + C51264 * C1729 + C8258 * C3420 + C51158 * C3425) *
                 C1453) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C1456 + (C8294 + C8295) * C51296 -
             (C8498 + C8499) * C1457 - (C8500 + C8501) * C51297 +
             (C8502 + C8503) * C1458 + (C8504 + C8505) * C1453) *
                C51265 +
            (C14232 * C1456 + C14233 * C51296 - C14941 * C1457 -
             C14942 * C51297 + (C14026 + C14027) * C1458 +
             (C14028 + C14029) * C1453) *
                C51186) *
               C50977) *
              C51243 +
          ((((C8499 + C8498) * C1457 -
             ((C8295 + C8294) * C51296 + (C8293 + C8292) * C1456) +
             (C8501 + C8500) * C51297 - (C8503 + C8502) * C1458 -
             (C8505 + C8504) * C1453) *
                C51265 +
            (C14943 * C1457 - (C14234 * C51296 + C14235 * C1456) +
             C14946 * C51297 - (C14027 + C14026) * C1458 -
             (C14029 + C14028) * C1453) *
                C51186) *
               C2447 +
           (((C8507 + C8506) * C1457 -
             ((C8299 + C8298) * C51296 + (C8297 + C8296) * C1456) +
             (C8509 + C8508) * C51297 - (C8511 + C8510) * C1458 -
             (C8513 + C8512) * C1453) *
                C51265 +
            ((C9254 + C9255) * C1457 - (C9030 * C51296 + C9031 * C1456) +
             (C9256 + C9257) * C51297 -
             (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                 C1458 -
             (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                 C1453) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1456 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51296 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1457 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51297 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C1458 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C1453) *
                C51265 +
            ((C14256 + C14257) * C1456 + (C14258 + C14259) * C51296 -
             (C14955 + C14956) * C1457 - (C14957 + C14958) * C51297 +
             (C16171 + C16172) * C1458 + (C16173 + C16174) * C1453) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C1456 + (C8294 + C8295) * C51296 -
             (C8498 + C8499) * C1457 - (C8500 + C8501) * C51297 +
             (C8502 + C8503) * C1458 + (C8504 + C8505) * C1453) *
                C51265 +
            (C14232 * C1456 + C14233 * C51296 - C14941 * C1457 -
             C14942 * C51297 + (C14026 + C14027) * C1458 +
             (C14028 + C14029) * C1453) *
                C51186) *
               C50977) *
              C50991 * C51252 +
          ((((C14956 + C14955) * C1457 -
             ((C14259 + C14258) * C51296 + (C14257 + C14256) * C1456) +
             (C14958 + C14957) * C51297 - (C16172 + C16171) * C1458 -
             (C16174 + C16173) * C1453) *
                C51265 +
            ((C15499 + C15500) * C1457 -
             ((C14268 + C14269) * C51296 + (C14270 + C14271) * C1456) +
             (C15501 + C15502) * C51297 -
             (C8258 * C3844 + C51158 * C3846 + C8257 * C2846 + C51264 * C2849) *
                 C1458 -
             (C8258 * C3847 + C51158 * C3850 + C8257 * C2850 + C51264 * C2855) *
                 C1453) *
                C51186) *
               C2447 +
           ((C14943 * C1457 - (C14234 * C51296 + C14235 * C1456) +
             C14946 * C51297 - (C14027 + C14026) * C1458 -
             (C14029 + C14028) * C1453) *
                C51265 +
            ((C14965 + C14966) * C1457 - (C14238 * C51296 + C14239 * C1456) +
             (C14967 + C14968) * C51297 -
             (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                 C1458 -
             (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                 C1453) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1219 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1214 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1220 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C1215 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C1221 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C1216 -
            (C8258 * C2652 + C51158 * C2655 + C8257 * C1223 + C51264 * C1227) *
                C1222 -
            (C8258 * C2656 + C51158 * C2661 + C8257 * C1228 + C51264 * C1235) *
                C1217) *
               C51265 +
           ((C14256 + C14257) * C1219 + (C14258 + C14259) * C1214 -
            (C14955 + C14956) * C1220 - (C14957 + C14958) * C1215 +
            (C8257 * C1717 + C51264 * C1721 + C8258 * C3416 + C51158 * C3419) *
                C1221 +
            (C8257 * C1722 + C51264 * C1729 + C8258 * C3420 + C51158 * C3425) *
                C1216 -
            (C8258 * C4338 + C51158 * C4340 + C8257 * C3416 + C51264 * C3419) *
                C1222 -
            (C8258 * C4341 + C51158 * C4344 + C8257 * C3420 + C51264 * C3425) *
                C1217) *
               C51186) *
              C2447 +
          (((C8292 + C8293) * C1219 + (C8294 + C8295) * C1214 -
            (C8498 + C8499) * C1220 - (C8500 + C8501) * C1215 +
            (C8502 + C8503) * C1221 + (C8504 + C8505) * C1216 -
            (C8258 * C2653 + C51158 * C2657 + C8257 * C1224 + C51264 * C1229) *
                C1222 -
            (C8258 * C2658 + C51158 * C2662 + C8257 * C1230 + C51264 * C1236) *
                C1217) *
               C51265 +
           (C14232 * C1219 + C14233 * C1214 - C14941 * C1220 - C14942 * C1215 +
            (C14026 + C14027) * C1221 + (C14028 + C14029) * C1216 -
            (C8258 * C4339 + C51158 * C4342 + C8257 * C3417 + C51264 * C3421) *
                C1222 -
            (C8258 * C4343 + C51158 * C4345 + C8257 * C3422 + C51264 * C3426) *
                C1217) *
               C51186) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1122 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C1117 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1123 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51265 +
            ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
             (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
             (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                C51265 +
            (C14232 * C1122 + C14233 * C1117 - C14941 * C1123 -
             C14942 * C51061) *
                C51186) *
               C50977) *
              C1119 +
          ((((C8499 + C8498) * C1123 -
             ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
             (C8501 + C8500) * C51061) *
                C51265 +
            (C14943 * C1123 - (C14234 * C1117 + C14235 * C1122) +
             C14946 * C51061) *
                C51186) *
               C2447 +
           (((C8507 + C8506) * C1123 -
             ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
             (C8509 + C8508) * C51061) *
                C51265 +
            ((C9254 + C9255) * C1123 - (C9030 * C1117 + C9031 * C1122) +
             (C9256 + C9257) * C51061) *
                C51186) *
               C50977) *
              C1120 +
          ((C9410 * C51265 +
            (C14668 * C1122 + C14669 * C1117 - (C9255 + C9254) * C1123 -
             (C9257 + C9256) * C51061) *
                C51186) *
               C2447 +
           (((C8303 + C8302) * C1122 + (C8301 + C8300) * C1117 -
             (C8870 + C8869) * C1123 - (C8872 + C8871) * C51061) *
                C51265 +
            ((C9032 + C9033) * C1122 + (C9034 + C9035) * C1117 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C1123 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1122 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C1117 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1123 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51265 +
            ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
             (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
             (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                C51265 +
            (C14232 * C1122 + C14233 * C1117 - C14941 * C1123 -
             C14942 * C51061) *
                C51186) *
               C50977) *
              C50991 * C493 +
          ((((C14956 + C14955) * C1123 -
             ((C14259 + C14258) * C1117 + (C14257 + C14256) * C1122) +
             (C14958 + C14957) * C51061) *
                C51265 +
            ((C15499 + C15500) * C1123 -
             ((C14268 + C14269) * C1117 + (C14270 + C14271) * C1122) +
             (C15501 + C15502) * C51061) *
                C51186) *
               C2447 +
           ((C14943 * C1123 - (C14234 * C1117 + C14235 * C1122) +
             C14946 * C51061) *
                C51265 +
            ((C14965 + C14966) * C1123 - (C14238 * C1117 + C14239 * C1122) +
             (C14967 + C14968) * C51061) *
                C51186) *
               C50977) *
              C50991 * C494 +
          ((((C14271 + C14270) * C1122 + (C14269 + C14268) * C1117 -
             (C15500 + C15499) * C1123 - (C15502 + C15501) * C51061) *
                C51265 +
            ((C8257 * C2004 + C51264 * C2012 + C8258 * C4739 + C51158 * C4747) *
                 C1122 +
             (C8257 * C2011 + C51264 * C2016 + C8258 * C4745 + C51158 * C4751) *
                 C1117 -
             (C8258 * C4738 + C51158 * C4746 + C8257 * C4739 + C51264 * C4747) *
                 C1123 -
             (C8258 * C4744 + C51158 * C4750 + C8257 * C4745 + C51264 * C4751) *
                 C51061) *
                C51186) *
               C2447 +
           ((C14236 * C1122 + C14237 * C1117 - (C14966 + C14965) * C1123 -
             (C14968 + C14967) * C51061) *
                C51265 +
            ((C14272 + C14273) * C1122 + (C14274 + C14275) * C1117 -
             (C8258 * C4736 + C51158 * C4742 + C8257 * C4737 + C51264 * C4743) *
                 C1123 -
             (C8258 * C4740 + C51158 * C4748 + C8257 * C4741 + C51264 * C4749) *
                 C51061) *
                C51186) *
               C50977) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C1122 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C1117 -
              (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                  C1123 -
              (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                  C51061) *
                 C51265 +
             ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
              (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                 C51186) *
                C2447 +
            (((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
              (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                 C51265 +
             C15967 * C51186) *
                C50977) *
               C51243 +
           ((((C8499 + C8498) * C1123 -
              ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
              (C8501 + C8500) * C51061) *
                 C51265 +
             C15968 * C51186) *
                C2447 +
            (((C8507 + C8506) * C1123 -
              ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
              (C8509 + C8508) * C51061) *
                 C51265 +
             ((C9254 + C9255) * C1123 - (C9030 * C1117 + C9031 * C1122) +
              (C9256 + C9257) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51252 +
          (((((C14956 + C14955) * C1123 -
              ((C14259 + C14258) * C1117 + (C14257 + C14256) * C1122) +
              (C14958 + C14957) * C51061) *
                 C51265 +
             ((C15499 + C15500) * C1123 -
              ((C14268 + C14269) * C1117 + (C14270 + C14271) * C1122) +
              (C15501 + C15502) * C51061) *
                 C51186) *
                C2447 +
            (C15968 * C51265 +
             ((C14965 + C14966) * C1123 - (C14238 * C1117 + C14239 * C1122) +
              (C14967 + C14968) * C51061) *
                 C51186) *
                C50977) *
               C51243 +
           ((C15967 * C51265 +
             (C14236 * C1122 + C14237 * C1117 - (C14966 + C14965) * C1123 -
              (C14968 + C14967) * C51061) *
                 C51186) *
                C2447 +
            ((C14668 * C1122 + C14669 * C1117 - (C9255 + C9254) * C1123 -
              (C9257 + C9256) * C51061) *
                 C51265 +
             ((C8704 + C8705) * C1122 + (C8706 + C8707) * C1117 -
              (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 +
               C51264 * C1345) *
                  C1123 -
              (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 +
               C51264 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1122 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C1117 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1123 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51265 +
            ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
             (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
             (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                C51265 +
            (C14232 * C1122 + C14233 * C1117 - C14941 * C1123 -
             C14942 * C51061) *
                C51186) *
               C50977) *
              C1119 +
          ((((C8499 + C8498) * C1123 -
             ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
             (C8501 + C8500) * C51061) *
                C51265 +
            (C14943 * C1123 - (C14234 * C1117 + C14235 * C1122) +
             C14946 * C51061) *
                C51186) *
               C2447 +
           (((C8507 + C8506) * C1123 -
             ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
             (C8509 + C8508) * C51061) *
                C51265 +
            ((C9254 + C9255) * C1123 - (C9030 * C1117 + C9031 * C1122) +
             (C9256 + C9257) * C51061) *
                C51186) *
               C50977) *
              C1120 +
          ((C9410 * C51265 +
            (C14668 * C1122 + C14669 * C1117 - (C9255 + C9254) * C1123 -
             (C9257 + C9256) * C51061) *
                C51186) *
               C2447 +
           (((C8303 + C8302) * C1122 + (C8301 + C8300) * C1117 -
             (C8870 + C8869) * C1123 - (C8872 + C8871) * C51061) *
                C51265 +
            ((C9032 + C9033) * C1122 + (C9034 + C9035) * C1117 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C1123 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1219 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1214 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1220 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C1215 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C1221 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C1216 -
            (C8258 * C2652 + C51158 * C2655 + C8257 * C1223 + C51264 * C1227) *
                C1222 -
            (C8258 * C2656 + C51158 * C2661 + C8257 * C1228 + C51264 * C1235) *
                C1217) *
               C51265 +
           ((C14256 + C14257) * C1219 + (C14258 + C14259) * C1214 -
            (C14955 + C14956) * C1220 - (C14957 + C14958) * C1215 +
            (C8257 * C1717 + C51264 * C1721 + C8258 * C3416 + C51158 * C3419) *
                C1221 +
            (C8257 * C1722 + C51264 * C1729 + C8258 * C3420 + C51158 * C3425) *
                C1216 -
            (C8258 * C4338 + C51158 * C4340 + C8257 * C3416 + C51264 * C3419) *
                C1222 -
            (C8258 * C4341 + C51158 * C4344 + C8257 * C3420 + C51264 * C3425) *
                C1217) *
               C51186) *
              C2447 +
          (((C8292 + C8293) * C1219 + (C8294 + C8295) * C1214 -
            (C8498 + C8499) * C1220 - (C8500 + C8501) * C1215 +
            (C8502 + C8503) * C1221 + (C8504 + C8505) * C1216 -
            (C8258 * C2653 + C51158 * C2657 + C8257 * C1224 + C51264 * C1229) *
                C1222 -
            (C8258 * C2658 + C51158 * C2662 + C8257 * C1230 + C51264 * C1236) *
                C1217) *
               C51265 +
           (C14232 * C1219 + C14233 * C1214 - C14941 * C1220 - C14942 * C1215 +
            (C14026 + C14027) * C1221 + (C14028 + C14029) * C1216 -
            (C8258 * C4339 + C51158 * C4342 + C8257 * C3417 + C51264 * C3421) *
                C1222 -
            (C8258 * C4343 + C51158 * C4345 + C8257 * C3422 + C51264 * C3426) *
                C1217) *
               C51186) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C687 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51251 -
              (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                  C688 -
              (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                  C51061) *
                 C51265 +
             ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
              (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                 C51186) *
                C2447 +
            (((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
              (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                 C51265 +
             C14971 * C51186) *
                C50977) *
               C51243 +
           ((((C8499 + C8498) * C688 -
              ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
              (C8501 + C8500) * C51061) *
                 C51265 +
             C14972 * C51186) *
                C2447 +
            (((C8507 + C8506) * C688 -
              ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
              (C8509 + C8508) * C51061) *
                 C51265 +
             ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
              (C9256 + C9257) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C1831 +
          (((((C14956 + C14955) * C688 -
              ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
              (C14958 + C14957) * C51061) *
                 C51265 +
             ((C15499 + C15500) * C688 -
              ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
              (C15501 + C15502) * C51061) *
                 C51186) *
                C2447 +
            (C14972 * C51265 +
             ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
              (C14967 + C14968) * C51061) *
                 C51186) *
                C50977) *
               C51243 +
           ((C14971 * C51265 +
             (C14236 * C687 + C14237 * C51251 - (C14966 + C14965) * C688 -
              (C14968 + C14967) * C51061) *
                 C51186) *
                C2447 +
            ((C14668 * C687 + C14669 * C51251 - (C9255 + C9254) * C688 -
              (C9257 + C9256) * C51061) *
                 C51265 +
             ((C8704 + C8705) * C687 + (C8706 + C8707) * C51251 -
              (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 +
               C51264 * C1345) *
                  C688 -
              (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 +
               C51264 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C687 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51251 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C688 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51265 +
            ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
             (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
             (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                C51265 +
            C14971 * C51186) *
               C50977) *
              C50991 * C51298 +
          ((((C14956 + C14955) * C688 -
             ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
             (C14958 + C14957) * C51061) *
                C51265 +
            ((C15499 + C15500) * C688 -
             ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
             (C15501 + C15502) * C51061) *
                C51186) *
               C2447 +
           (C14972 * C51265 +
            ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
             (C14967 + C14968) * C51061) *
                C51186) *
               C50977) *
              C50991 * C51299 +
          ((((C14271 + C14270) * C687 + (C14269 + C14268) * C51251 -
             (C15500 + C15499) * C688 - (C15502 + C15501) * C51061) *
                C51265 +
            ((C16701 + C16702) * C687 + (C16703 + C16704) * C51251 -
             (C8258 * C4738 + C51158 * C4746 + C8257 * C4739 + C51264 * C4747) *
                 C688 -
             (C8258 * C4744 + C51158 * C4750 + C8257 * C4745 + C51264 * C4751) *
                 C51061) *
                C51186) *
               C2447 +
           ((C14236 * C687 + C14237 * C51251 - (C14966 + C14965) * C688 -
             (C14968 + C14967) * C51061) *
                C51265 +
            ((C14272 + C14273) * C687 + (C14274 + C14275) * C51251 -
             (C8258 * C4736 + C51158 * C4742 + C8257 * C4737 + C51264 * C4743) *
                 C688 -
             (C8258 * C4740 + C51158 * C4748 + C8257 * C4741 + C51264 * C4749) *
                 C51061) *
                C51186) *
               C50977) *
              C50991 * C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C298 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C293 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C299 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C294 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C300 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C295) *
                C51265 +
            ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
             (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
             (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
             (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
             (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
                C51265 +
            (C14232 * C298 + C14233 * C293 - C14941 * C299 - C14942 * C294 +
             (C14026 + C14027) * C300 + (C14028 + C14029) * C295) *
                C51186) *
               C50977) *
              C50991 * C1831 +
          ((((C14956 + C14955) * C299 -
             ((C14259 + C14258) * C293 + (C14257 + C14256) * C298) +
             (C14958 + C14957) * C294 - (C16172 + C16171) * C300 -
             (C16174 + C16173) * C295) *
                C51265 +
            ((C15499 + C15500) * C299 -
             ((C14268 + C14269) * C293 + (C14270 + C14271) * C298) +
             (C15501 + C15502) * C294 -
             (C8258 * C3844 + C51158 * C3846 + C8257 * C2846 + C51264 * C2849) *
                 C300 -
             (C8258 * C3847 + C51158 * C3850 + C8257 * C2850 + C51264 * C2855) *
                 C295) *
                C51186) *
               C2447 +
           ((C14943 * C299 - (C14234 * C293 + C14235 * C298) + C14946 * C294 -
             (C14027 + C14026) * C300 - (C14029 + C14028) * C295) *
                C51265 +
            ((C14965 + C14966) * C299 - (C14238 * C293 + C14239 * C298) +
             (C14967 + C14968) * C294 -
             (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                 C300 -
             (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                 C295) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51265 +
             C14276 * C51186) *
                C50977) *
               C1119 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51265) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51265) *
                C2447) *
               C1120 +
           ((C8316 * C51265 + C14672 * C51186) * C2447 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51265 +
             ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
                C50977) *
               C1121) *
              C1831 +
          (((C14276 * C51265 + C14278 * C51186) * C2447 +
            (C14672 * C51265 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C1120 -
           ((C14279 * C51186 + C14277 * C51265) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51265) *
                C2447) *
               C1119 -
           ((((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                  C51009 +
              (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                  C118) *
                 C51186 +
             ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51265) *
                C50977 +
            (((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51186 +
             C9038 * C51265) *
                C2447) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51265 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
               C2447 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51265 +
            C14276 * C51186) *
               C50977) *
              C50991 * C1997 -
          ((C14279 * C51186 + C14277 * C51265) * C50977 +
           (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
            ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51265) *
               C2447) *
              C50991 * C1998 +
          ((((C14271 + C14270) * C118 + (C14269 + C14268) * C51009) * C51265 +
            ((C16701 + C16702) * C118 + (C16703 + C16704) * C51009) * C51186) *
               C2447 +
           (C14278 * C51265 +
            ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C51186) *
               C50977) *
              C50991 * C1999 -
          ((((C8258 * C6680 + C51158 * C6682 + C8257 * C5667 + C51264 * C5671) *
                 C51009 +
             (C8258 * C6676 + C51158 * C6679 + C8257 * C5662 + C51264 * C5666) *
                 C118) *
                C51186 +
            ((C14275 + C14274) * C51009 + (C14273 + C14272) * C118) * C51265) *
               C50977 +
           (((C8258 * C6678 + C51158 * C6681 + C8257 * C5665 + C51264 * C5670) *
                 C51009 +
             (C8258 * C6675 + C51158 * C6677 + C8257 * C5661 + C51264 * C5664) *
                 C118) *
                C51186 +
            ((C16704 + C16703) * C51009 + (C16702 + C16701) * C118) * C51265) *
               C2447) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51265 +
             C14276 * C51186) *
                C50977) *
               C51243 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51265) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51265) *
                C2447) *
               C50996) *
              C51298 +
          (((C14276 * C51265 + C14278 * C51186) * C2447 +
            (C14672 * C51265 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C50996 -
           ((C14279 * C51186 + C14277 * C51265) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51265) *
                C2447) *
               C51243) *
              C51299 +
          (((((C14271 + C14270) * C118 + (C14269 + C14268) * C51009) * C51265 +
             ((C16701 + C16702) * C118 + (C16703 + C16704) * C51009) * C51186) *
                C2447 +
            (C14278 * C51265 +
             ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C51186) *
                C50977) *
               C51243 -
           ((((C8258 * C6233 + C51158 * C6234 + C8257 * C2007 +
               C51264 * C2014) *
                  C51009 +
              (C8258 * C6231 + C51158 * C6232 + C8257 * C2002 +
               C51264 * C2008) *
                  C118) *
                 C51186 +
             ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51265) *
                C50977 +
            (((C14275 + C14274) * C51009 + (C14273 + C14272) * C118) * C51186 +
             C14279 * C51265) *
                C2447) *
               C50996) *
              C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C2447 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C51265 +
             C14276 * C51186) *
                C50977) *
               C1119 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C51265) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51265) *
                C2447) *
               C1120 +
           ((C8316 * C51265 + C14672 * C51186) * C2447 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C51265 +
             ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
                C50977) *
               C1121) *
              C1831 +
          (((C14276 * C51265 + C14278 * C51186) * C2447 +
            (C14672 * C51265 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C1120 -
           ((C14279 * C51186 + C14277 * C51265) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51265) *
                C2447) *
               C1119 -
           ((((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                  C51009 +
              (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                  C118) *
                 C51186 +
             ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51265) *
                C50977 +
            (((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51186 +
             C9038 * C51265) *
                C2447) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C298 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C293 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C299 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C294 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C300 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C295) *
                C51265 +
            ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
             (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
             (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
                C51186) *
               C2447 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
             (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
             (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
                C51265 +
            (C14232 * C298 + C14233 * C293 - C14941 * C299 - C14942 * C294 +
             (C14026 + C14027) * C300 + (C14028 + C14029) * C295) *
                C51186) *
               C50977) *
              C50991 * C1831 +
          ((((C14956 + C14955) * C299 -
             ((C14259 + C14258) * C293 + (C14257 + C14256) * C298) +
             (C14958 + C14957) * C294 - (C16172 + C16171) * C300 -
             (C16174 + C16173) * C295) *
                C51265 +
            ((C15499 + C15500) * C299 -
             ((C14268 + C14269) * C293 + (C14270 + C14271) * C298) +
             (C15501 + C15502) * C294 -
             (C8258 * C3844 + C51158 * C3846 + C8257 * C2846 + C51264 * C2849) *
                 C300 -
             (C8258 * C3847 + C51158 * C3850 + C8257 * C2850 + C51264 * C2855) *
                 C295) *
                C51186) *
               C2447 +
           ((C14943 * C299 - (C14234 * C293 + C14235 * C298) + C14946 * C294 -
             (C14027 + C14026) * C300 - (C14029 + C14028) * C295) *
                C51265 +
            ((C14965 + C14966) * C299 - (C14238 * C293 + C14239 * C298) +
             (C14967 + C14968) * C294 -
             (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                 C300 -
             (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                 C295) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C687 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51251 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C688 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C687 + (C2492 + C2493 + C2494) * C51251 -
            (C2689 + C2690 + C2691) * C688 - (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C51294 +
          (((C2691 + C2690 + C2689) * C688 -
            ((C2494 + C2493 + C2492) * C51251 +
             (C2491 + C2490 + C2489) * C687) +
            (C2694 + C2693 + C2692) * C51061) *
               C51122 * C2447 +
           ((C3053 + C3054 + C3055) * C688 -
            ((C2495 + C2496 + C2497) * C51251 +
             (C2498 + C2499 + C2500) * C687) +
            (C3056 + C3057 + C3058) * C51061) *
               C51122 * C50977) *
              C51295 +
          (((C2500 + C2499 + C2498) * C687 + (C2497 + C2496 + C2495) * C51251 -
            (C3055 + C3054 + C3053) * C688 - (C3058 + C3057 + C3056) * C51061) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C687 + (C2504 + C2505 + C2506) * C51251 -
            (C2451 * C1226 + C2446 * C1233 + C2450 * C308 + C2445 * C325 +
             C2449 * C307 + C2444 * C323) *
                C688 -
            (C2451 * C1234 + C2446 * C1238 + C2450 * C326 + C2445 * C338 +
             C2449 * C324 + C2444 * C337) *
                C51061) *
               C51122 * C50977) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C687 +
            (C117 * C127 + C51106 * C140) * C51251 -
            (C117 * C301 + C51106 * C311) * C688 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C694 + C695 - C696 - C697) * C51122 * C109 + C722 * C110 +
           C723 * C111) *
              C51294 +
          ((C696 - (C695 + C694) + C697) * C51122 * C108 +
           (C700 - (C699 + C698) + C701) * C51122 * C109 +
           (C704 - (C703 + C702) + C705) * C51122 * C110 +
           (C718 - (C708 + C709) + C719) * C51122 * C111) *
              C51295 +
          (C722 * C108 + C723 * C109 +
           (C709 + C708 - C718 - C719) * C51122 * C110 +
           (C176 * C687 + C177 * C51251 - (C117 * C689 + C51106 * C690) * C688 -
            (C117 * C691 + C51106 * C692) * C51061) *
               C51122 * C111) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C5336 +
            (C5703 * C687 + C5704 * C51251 -
             (C117 * C969 + C51106 * C974) * C688 -
             (C117 * C975 + C51106 * C984) * C51061) *
                C5337 +
            (C5705 * C687 + C5706 * C51251 -
             (C117 * C1337 + C51106 * C1341) * C688 -
             (C117 * C1342 + C51106 * C1349) * C51061) *
                C5338) *
               C2447 +
           ((C694 + C695 - C696 - C697) * C5336 +
            (C993 + C992 - C1014 - C1015) * C5337 +
            (C5876 + C5877 - C5878 - C5879) * C5338) *
               C50977) *
              C51294 +
          (((C696 - (C695 + C694) + C697) * C5336 +
            (C1014 - (C992 + C993) + C1015) * C5337 +
            (C5878 - (C5877 + C5876) + C5879) * C5338) *
               C2447 +
           ((C700 - (C699 + C698) + C701) * C5336 +
            (C1016 - (C998 + C999) + C1017) * C5337 +
            (C5888 - (C5882 + C5883) + C5889) * C5338) *
               C50977) *
              C51295 +
          ((C720 * C5336 + (C999 + C998 - C1016 - C1017) * C5337 +
            (C5883 + C5882 - C5888 - C5889) * C5338) *
               C2447 +
           (C721 * C5336 + (C1005 + C1004 - C1018 - C1019) * C5337 +
            (C571 * C687 + C572 * C51251 -
             (C117 * C1340 + C51106 * C1347) * C688 -
             (C117 * C1348 + C51106 * C1352) * C51061) *
                C5338) *
               C50977) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C687 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51251 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C688 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C687 + (C2492 + C2493 + C2494) * C51251 -
             (C2689 + C2690 + C2691) * C688 -
             (C2692 + C2693 + C2694) * C51061) *
                C51122 * C50977) *
               C296 +
           (((C2691 + C2690 + C2689) * C688 -
             ((C2494 + C2493 + C2492) * C51251 +
              (C2491 + C2490 + C2489) * C687) +
             (C2694 + C2693 + C2692) * C51061) *
                C51122 * C2447 +
            ((C3053 + C3054 + C3055) * C688 -
             ((C2495 + C2496 + C2497) * C51251 +
              (C2498 + C2499 + C2500) * C687) +
             (C3056 + C3057 + C3058) * C51061) *
                C51122 * C50977) *
               C50996) *
              C51252 +
          ((((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
              C2451 * C3416 + C2446 * C3419) *
                 C688 -
             ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
               C2449 * C514 + C2444 * C530) *
                  C51251 +
              (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
               C2449 * C500 + C2444 * C515) *
                  C687) +
             (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
              C2451 * C3420 + C2446 * C3425) *
                 C51061) *
                C51122 * C2447 +
            ((C3441 + C3442 + C3443) * C688 -
             ((C2888 + C2887 + C2886) * C51251 +
              (C2885 + C2884 + C2883) * C687) +
             (C3444 + C3445 + C3446) * C51061) *
                C51122 * C50977) *
               C296 +
           (((C2883 + C2884 + C2885) * C687 + (C2886 + C2887 + C2888) * C51251 -
             (C3443 + C3442 + C3441) * C688 -
             (C3446 + C3445 + C3444) * C51061) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C687 + (C3220 + C3221 + C3222) * C51251 -
             (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
              C2449 * C971 + C2444 * C978) *
                 C688 -
             (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
              C2449 * C979 + C2444 * C986) *
                 C51061) *
                C51122 * C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51122 * C108 +
            (C694 + C695 - C696 - C697) * C51122 * C109 + C722 * C110 +
            C723 * C111) *
               C296 +
           ((C696 - (C695 + C694) + C697) * C51122 * C108 +
            (C700 - (C699 + C698) + C701) * C51122 * C109 +
            (C704 - (C703 + C702) + C705) * C51122 * C110 +
            (C718 - (C708 + C709) + C719) * C51122 * C111) *
               C50996) *
              C51252 +
          ((((C117 * C969 + C51106 * C974) * C688 -
             ((C117 * C514 + C51106 * C530) * C51251 +
              (C117 * C500 + C51106 * C515) * C687) +
             (C117 * C975 + C51106 * C984) * C51061) *
                C51122 * C108 +
            (C1014 - (C992 + C993) + C1015) * C51122 * C109 +
            (C1016 - (C998 + C999) + C1017) * C51122 * C110 +
            (C1018 - (C1004 + C1005) + C1019) * C51122 * C111) *
               C296 +
           ((C993 + C992 - C1014 - C1015) * C51122 * C108 +
            (C999 + C998 - C1016 - C1017) * C51122 * C109 +
            (C1005 + C1004 - C1018 - C1019) * C51122 * C110 +
            (C834 * C687 + C835 * C51251 -
             (C117 * C973 + C51106 * C982) * C688 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51122 * C111) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C5336 +
             (C6236 + C6237 - C6268 - C6269) * C5337 +
             (C6242 + C6243 - C6270 - C6271) * C5338) *
                C2447 +
            ((C694 + C695 - C696 - C697) * C5336 + C6272 * C5337 +
             C6273 * C5338) *
                C50977) *
               C296 +
           (((C696 - (C695 + C694) + C697) * C5336 + C6274 * C5337 +
             C6275 * C5338) *
                C2447 +
            ((C700 - (C699 + C698) + C701) * C5336 +
             (C1016 - (C998 + C999) + C1017) * C5337 +
             (C5888 - (C5882 + C5883) + C5889) * C5338) *
                C50977) *
               C50996) *
              C51252 +
          ((((C6268 - (C6237 + C6236) + C6269) * C5336 +
             (C6270 - (C6243 + C6242) + C6271) * C5337 +
             ((C117 * C4739 + C51106 * C4747) * C688 -
              (C5711 * C51251 + C5712 * C687) +
              (C117 * C4745 + C51106 * C4751) * C51061) *
                 C5338) *
                C2447 +
            (C6274 * C5336 + C6275 * C5337 +
             (C6276 - (C6254 + C6255) + C6277) * C5338) *
                C50977) *
               C296 +
           ((C6272 * C5336 + C6273 * C5337 +
             (C6255 + C6254 - C6276 - C6277) * C5338) *
                C2447 +
            ((C999 + C998 - C1016 - C1017) * C5336 +
             (C5883 + C5882 - C5888 - C5889) * C5337 +
             (C5709 * C687 + C5710 * C51251 -
              (C117 * C6231 + C51106 * C6232) * C688 -
              (C117 * C6233 + C51106 * C6234) * C51061) *
                 C5338) *
                C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51106 * C126) * C118 +
                (C117 * C127 + C51106 * C140) * C51009) *
                   C51122 * C108 +
               (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
                  C112 -
              (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
               (C179 + C178) * C51122 * C108) *
                  C113 +
              (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
               (C186 + C187) * C51122 * C111) *
                  C114 -
              (((C117 * C138 + C51106 * C146) * C51009 +
                (C117 * C125 + C51106 * C139) * C118) *
                   C51122 * C111 +
               (C187 + C186) * C51122 * C110 + C194 * C109 + C195 * C108) *
                  C115) *
             C51025 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51106 * C126) * C298 +
                (C117 * C127 + C51106 * C140) * C293 -
                (C117 * C301 + C51106 * C311) * C299 -
                (C117 * C312 + C51106 * C331) * C294 +
                (C117 * C302 + C51106 * C313) * C300 +
                (C117 * C314 + C51106 * C332) * C295) *
                   C51122 * C108 +
               (C342 + C343 - C384 - C385 + C386 + C387) * C51122 * C109 +
               (C352 + C353 - C388 - C389 + C390 + C391) * C51122 * C110 +
               (C362 + C363 - C392 - C393 + C394 + C395) * C51122 * C111) *
                  C296 +
              ((C384 - (C343 + C342) + C385 - C386 - C387) * C51122 * C108 +
               (C388 - (C353 + C352) + C389 - C390 - C391) * C51122 * C109 +
               (C392 - (C363 + C362) + C393 - C394 - C395) * C51122 * C110 +
               ((C117 * C309 + C51106 * C327) * C299 -
                (C174 * C293 + C175 * C298) +
                (C117 * C328 + C51106 * C339) * C294 -
                (C117 * C310 + C51106 * C329) * C300 -
                (C117 * C330 + C51106 * C340) * C295) *
                   C51122 * C111) *
                  C50996) *
             C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C296 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C50996) *
              C493 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 +
            ((C117 * C499 + C51106 * C512) * C118 +
             (C117 * C513 + C51106 * C529) * C51009) *
                C51122 * C111) *
               C50996 -
           ((C578 + C577) * C51122 * C111 + (C576 + C575) * C51122 * C110 +
            (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C296) *
              C494 +
          ((((C117 * C501 + C51106 * C516) * C118 +
             (C117 * C517 + C51106 * C531) * C51009) *
                C51122 * C108 +
            (C579 + C580) * C51122 * C109 + (C581 + C582) * C51122 * C110 +
            (C583 + C584) * C51122 * C111) *
               C296 -
           (((C117 * C524 + C51106 * C535) * C51009 +
             (C117 * C505 + C51106 * C525) * C118) *
                C51122 * C111 +
            (C584 + C583) * C51122 * C110 + (C582 + C581) * C51122 * C109 +
            (C580 + C579) * C51122 * C108) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51009) *
               C51122 * C50977) *
              C112 -
          (((C2495 + C2496 + C2497) * C51009 + (C2498 + C2499 + C2500) * C118) *
               C51122 * C50977 +
           ((C2494 + C2493 + C2492) * C51009 + (C2491 + C2490 + C2489) * C118) *
               C51122 * C2447) *
              C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51009) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C118 + (C2504 + C2505 + C2506) * C51009) *
               C51122 * C50977) *
              C114 -
          (((C2451 * C330 + C2446 * C340 + C2450 * C328 + C2445 * C339 +
             C2449 * C134 + C2444 * C144) *
                C51009 +
            (C2451 * C310 + C2446 * C329 + C2450 * C309 + C2445 * C327 +
             C2449 * C123 + C2444 * C135) *
                C118) *
               C51122 * C50977 +
           ((C2506 + C2505 + C2504) * C51009 + (C2503 + C2502 + C2501) * C118) *
               C51122 * C2447) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C293 -
            (C2689 + C2690 + C2691) * C299 - (C2692 + C2693 + C2694) * C294 +
            (C2695 + C2696 + C2697) * C300 + (C2698 + C2699 + C2700) * C295) *
               C51122 * C50977) *
              C296 +
          (((C2691 + C2690 + C2689) * C299 -
            ((C2494 + C2493 + C2492) * C293 + (C2491 + C2490 + C2489) * C298) +
            (C2694 + C2693 + C2692) * C294 - (C2697 + C2696 + C2695) * C300 -
            (C2700 + C2699 + C2698) * C295) *
               C51122 * C2447 +
           ((C2449 * C305 + C2444 * C319 + C2450 * C306 + C2445 * C321 +
             C2451 * C1225 + C2446 * C1231) *
                C299 -
            ((C2495 + C2496 + C2497) * C293 + (C2498 + C2499 + C2500) * C298) +
            (C2449 * C320 + C2444 * C335 + C2450 * C322 + C2445 * C336 +
             C2451 * C1232 + C2446 * C1237) *
                C294 -
            (C2451 * C2654 + C2446 * C2659 + C2450 * C1225 + C2445 * C1231 +
             C2449 * C306 + C2444 * C321) *
                C300 -
            (C2451 * C2660 + C2446 * C2663 + C2450 * C1232 + C2445 * C1237 +
             C2449 * C322 + C2444 * C336) *
                C295) *
               C51122 * C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C296 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C50996) *
              C493 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C2449 * C497 + C2444 * C508 + C2450 * C971 + C2445 * C978 +
              C2451 * C1719 + C2446 * C1725) *
                 C118 +
             (C2449 * C509 + C2444 * C527 + C2450 * C979 + C2445 * C986 +
              C2451 * C1726 + C2446 * C1731) *
                 C51009) *
                C51122 * C50977) *
               C50996 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C296) *
              C494 +
          ((((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
              C2451 * C2846 + C2446 * C2849) *
                 C118 +
             (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
              C2451 * C2850 + C2446 * C2855) *
                 C51009) *
                C51122 * C2447 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51122 * C50977) *
               C296 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51122 * C50977 +
            ((C2894 + C2893 + C2892) * C51009 +
             (C2891 + C2890 + C2889) * C118) *
                C51122 * C2447) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C5336 +
            ((C117 * C500 + C51106 * C515) * C118 +
             (C117 * C514 + C51106 * C530) * C51009) *
                C5337 +
            ((C117 * C501 + C51106 * C516) * C118 +
             (C117 * C517 + C51106 * C531) * C51009) *
                C5338) *
               C2447 +
           ((C178 + C179) * C5336 + (C573 + C574) * C5337 +
            (C579 + C580) * C5338) *
               C50977) *
              C112 -
          (((C582 + C581) * C5338 + C833 * C5337 + (C181 + C180) * C5336) *
               C50977 +
           ((C580 + C579) * C5338 + (C574 + C573) * C5337 +
            (C179 + C178) * C5336) *
               C2447) *
              C113 +
          ((C188 * C5336 + (C575 + C576) * C5337 + (C581 + C582) * C5338) *
               C2447 +
           (C189 * C5336 + (C577 + C578) * C5337 + (C583 + C584) * C5338) *
               C50977) *
              C114 -
          ((((C117 * C524 + C51106 * C535) * C51009 +
             (C117 * C505 + C51106 * C525) * C118) *
                C5338 +
            (C839 + C838) * C5337 + C190 * C5336) *
               C50977 +
           ((C584 + C583) * C5338 + C832 * C5337 + C191 * C5336) * C2447) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C5336 +
            ((C117 * C500 + C51106 * C515) * C298 +
             (C117 * C514 + C51106 * C530) * C293 -
             (C117 * C969 + C51106 * C974) * C299 -
             (C117 * C975 + C51106 * C984) * C294 +
             (C117 * C1717 + C51106 * C1721) * C300 +
             (C117 * C1722 + C51106 * C1729) * C295) *
                C5337 +
            ((C117 * C501 + C51106 * C516) * C298 +
             (C117 * C517 + C51106 * C531) * C293 -
             (C117 * C1337 + C51106 * C1341) * C299 -
             (C117 * C1342 + C51106 * C1349) * C294 +
             (C117 * C2846 + C51106 * C2849) * C300 +
             (C117 * C2850 + C51106 * C2855) * C295) *
                C5338) *
               C2447 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C5336 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C5337 +
            (C5494 + C5495 - C5512 - C5513 + C5514 + C5515) * C5338) *
               C50977) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C5336 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C5337 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C5338) *
               C2447 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C5336 +
            (C1010 * C299 - (C564 * C293 + C563 * C298) + C1011 * C294 -
             (C117 * C1719 + C51106 * C1725) * C300 -
             (C117 * C1726 + C51106 * C1731) * C295) *
                C5337 +
            ((C117 * C1339 + C51106 * C1345) * C299 -
             (C570 * C293 + C569 * C298) +
             (C117 * C1346 + C51106 * C1351) * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C5338) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C5336 +
             (C5715 + C5716) * C5337 + C5727 * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5682 * C5337 + C5683 * C5338) * C50977) *
               C296 -
           ((C5684 * C5338 + C833 * C5337 + (C181 + C180) * C5336) * C50977 +
            (C5685 * C5338 + C5686 * C5337 + (C179 + C178) * C5336) * C2447) *
               C50996) *
              C493 +
          (((C5682 * C5336 + C5683 * C5337 + C5728 * C5338) * C2447 +
            ((C575 + C576) * C5336 + (C581 + C582) * C5337 +
             (C5721 + C5722) * C5338) *
                C50977) *
               C50996 -
           ((C5729 * C5338 + C5685 * C5337 + C5686 * C5336) * C50977 +
            ((C5723 + C5724) * C5338 + (C5718 + C5717) * C5337 +
             (C5716 + C5715) * C5336) *
                C2447) *
               C296) *
              C494 +
          (((C5727 * C5336 + (C5724 + C5723) * C5337 +
             ((C117 * C5661 + C51106 * C5664) * C118 +
              (C117 * C5665 + C51106 * C5670) * C51009) *
                 C5338) *
                C2447 +
            (C5683 * C5336 + C5728 * C5337 + (C5725 + C5726) * C5338) *
                C50977) *
               C296 -
           ((((C117 * C5668 + C51106 * C5672) * C51009 +
              (C117 * C5663 + C51106 * C5669) * C118) *
                 C5338 +
             (C5722 + C5721) * C5337 + C5684 * C5336) *
                C50977 +
            ((C5726 + C5725) * C5338 + C5729 * C5337 + C5685 * C5336) * C2447) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C51294 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C51295 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C51122 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51009) *
                C51122 * C50977) *
               C686) *
              C51252 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51122 * C50977) *
               C51295 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C51294 -
           (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
              C2449 * C511 + C2444 * C528) *
                 C51009 +
             (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
              C2449 * C498 + C2444 * C510) *
                 C118) *
                C51122 * C50977 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C51122 * C2447) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C51294 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C51295 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
            (C186 + C187) * C51122 * C111) *
               C686) *
              C51252 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 + (C838 + C839) * C51122 * C111) *
               C51295 -
           (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C51294 -
           (((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51122 * C111 +
            (C839 + C838) * C51122 * C110 + C836 * C109 + C837 * C108) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C5336 +
             (C5715 + C5716) * C5337 + C5727 * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5682 * C5337 + C5683 * C5338) * C50977) *
               C51294 -
           ((C5684 * C5338 + C833 * C5337 + (C181 + C180) * C5336) * C50977 +
            (C5685 * C5338 + C5686 * C5337 + (C179 + C178) * C5336) * C2447) *
               C51295 +
           ((C188 * C5336 + C6036 * C5337 + C6037 * C5338) * C2447 +
            (C189 * C5336 + (C577 + C578) * C5337 + (C583 + C584) * C5338) *
                C50977) *
               C686) *
              C51252 +
          (((C5682 * C5336 + C5683 * C5337 + C5728 * C5338) * C2447 +
            (C6036 * C5336 + C6037 * C5337 + (C5721 + C5722) * C5338) *
                C50977) *
               C51295 -
           ((C5729 * C5338 + C5685 * C5337 + C5686 * C5336) * C50977 +
            ((C5723 + C5724) * C5338 + (C5718 + C5717) * C5337 +
             (C5716 + C5715) * C5336) *
                C2447) *
               C51294 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C5338 +
             (C584 + C583) * C5337 + C832 * C5336) *
                C50977 +
            ((C5722 + C5721) * C5338 + C5684 * C5337 + C833 * C5336) * C2447) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C51122 * C108 +
           (C342 + C343 - C384 - C385 + C386 + C387) * C51122 * C109 +
           (C352 + C353 - C388 - C389 + C390 + C391) * C51122 * C110 +
           (C362 + C363 - C392 - C393 + C394 + C395) * C51122 * C111) *
              C296 +
          ((C384 - (C343 + C342) + C385 - C386 - C387) * C51122 * C108 +
           (C388 - (C353 + C352) + C389 - C390 - C391) * C51122 * C109 +
           (C392 - (C363 + C362) + C393 - C394 - C395) * C51122 * C110 +
           ((C117 * C309 + C51106 * C327) * C299 - (C174 * C293 + C175 * C298) +
            (C117 * C328 + C51106 * C339) * C294 -
            (C117 * C310 + C51106 * C329) * C300 -
            (C117 * C330 + C51106 * C340) * C295) *
               C51122 * C111) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C118 +
            (C117 * C127 + C51106 * C140) * C51009) *
               C51122 * C108 +
           (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
              C112 -
          (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
           (C179 + C178) * C51122 * C108) *
              C113 +
          (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
           (C186 + C187) * C51122 * C111) *
              C114 -
          (((C117 * C138 + C51106 * C146) * C51009 +
            (C117 * C125 + C51106 * C139) * C118) *
               C51122 * C111 +
           (C187 + C186) * C51122 * C110 + C194 * C109 + C195 * C108) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51009) *
               C51122 * C50977) *
              C112 -
          (((C2495 + C2496 + C2497) * C51009 + (C2498 + C2499 + C2500) * C118) *
               C51122 * C50977 +
           ((C2494 + C2493 + C2492) * C51009 + (C2491 + C2490 + C2489) * C118) *
               C51122 * C2447) *
              C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51009) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C118 + (C2504 + C2505 + C2506) * C51009) *
               C51122 * C50977) *
              C114 -
          (((C2451 * C330 + C2446 * C340 + C2450 * C328 + C2445 * C339 +
             C2449 * C134 + C2444 * C144) *
                C51009 +
            (C2451 * C310 + C2446 * C329 + C2450 * C309 + C2445 * C327 +
             C2449 * C123 + C2444 * C135) *
                C118) *
               C51122 * C50977 +
           ((C2506 + C2505 + C2504) * C51009 + (C2503 + C2502 + C2501) * C118) *
               C51122 * C2447) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C293 -
            (C2689 + C2690 + C2691) * C299 - (C2692 + C2693 + C2694) * C294 +
            (C2695 + C2696 + C2697) * C300 + (C2698 + C2699 + C2700) * C295) *
               C51122 * C50977) *
              C296 +
          (((C2691 + C2690 + C2689) * C299 -
            ((C2494 + C2493 + C2492) * C293 + (C2491 + C2490 + C2489) * C298) +
            (C2694 + C2693 + C2692) * C294 - (C2697 + C2696 + C2695) * C300 -
            (C2700 + C2699 + C2698) * C295) *
               C51122 * C2447 +
           ((C2449 * C305 + C2444 * C319 + C2450 * C306 + C2445 * C321 +
             C2451 * C1225 + C2446 * C1231) *
                C299 -
            ((C2495 + C2496 + C2497) * C293 + (C2498 + C2499 + C2500) * C298) +
            (C2449 * C320 + C2444 * C335 + C2450 * C322 + C2445 * C336 +
             C2451 * C1232 + C2446 * C1237) *
                C294 -
            (C2451 * C2654 + C2446 * C2659 + C2450 * C1225 + C2445 * C1231 +
             C2449 * C306 + C2444 * C321) *
                C300 -
            (C2451 * C2660 + C2446 * C2663 + C2450 * C1232 + C2445 * C1237 +
             C2449 * C322 + C2444 * C336) *
                C295) *
               C51122 * C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C5336 +
            ((C117 * C500 + C51106 * C515) * C118 +
             (C117 * C514 + C51106 * C530) * C51009) *
                C5337 +
            ((C117 * C501 + C51106 * C516) * C118 +
             (C117 * C517 + C51106 * C531) * C51009) *
                C5338) *
               C2447 +
           ((C178 + C179) * C5336 + (C573 + C574) * C5337 +
            (C579 + C580) * C5338) *
               C50977) *
              C112 -
          (((C582 + C581) * C5338 + C833 * C5337 + (C181 + C180) * C5336) *
               C50977 +
           ((C580 + C579) * C5338 + (C574 + C573) * C5337 +
            (C179 + C178) * C5336) *
               C2447) *
              C113 +
          ((C188 * C5336 + (C575 + C576) * C5337 + (C581 + C582) * C5338) *
               C2447 +
           (C189 * C5336 + (C577 + C578) * C5337 + (C583 + C584) * C5338) *
               C50977) *
              C114 -
          ((((C117 * C524 + C51106 * C535) * C51009 +
             (C117 * C505 + C51106 * C525) * C118) *
                C5338 +
            (C839 + C838) * C5337 + C190 * C5336) *
               C50977 +
           ((C584 + C583) * C5338 + C832 * C5337 + C191 * C5336) * C2447) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C5336 +
            ((C117 * C500 + C51106 * C515) * C298 +
             (C117 * C514 + C51106 * C530) * C293 -
             (C117 * C969 + C51106 * C974) * C299 -
             (C117 * C975 + C51106 * C984) * C294 +
             (C117 * C1717 + C51106 * C1721) * C300 +
             (C117 * C1722 + C51106 * C1729) * C295) *
                C5337 +
            ((C117 * C501 + C51106 * C516) * C298 +
             (C117 * C517 + C51106 * C531) * C293 -
             (C117 * C1337 + C51106 * C1341) * C299 -
             (C117 * C1342 + C51106 * C1349) * C294 +
             (C117 * C2846 + C51106 * C2849) * C300 +
             (C117 * C2850 + C51106 * C2855) * C295) *
                C5338) *
               C2447 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C5336 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C5337 +
            (C5494 + C5495 - C5512 - C5513 + C5514 + C5515) * C5338) *
               C50977) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C5336 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C5337 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C5338) *
               C2447 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C5336 +
            (C1010 * C299 - (C564 * C293 + C563 * C298) + C1011 * C294 -
             (C117 * C1719 + C51106 * C1725) * C300 -
             (C117 * C1726 + C51106 * C1731) * C295) *
                C5337 +
            ((C117 * C1339 + C51106 * C1345) * C299 -
             (C570 * C293 + C569 * C298) +
             (C117 * C1346 + C51106 * C1351) * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C5338) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1456 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51296 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1457 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51297 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C1458 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C1453) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1456 + (C2492 + C2493 + C2494) * C51296 -
            (C2689 + C2690 + C2691) * C1457 - (C2692 + C2693 + C2694) * C51297 +
            (C2695 + C2696 + C2697) * C1458 + (C2698 + C2699 + C2700) * C1453) *
               C51122 * C50977) *
              C51243 +
          (((C2691 + C2690 + C2689) * C1457 -
            ((C2494 + C2493 + C2492) * C51296 +
             (C2491 + C2490 + C2489) * C1456) +
            (C2694 + C2693 + C2692) * C51297 - (C2697 + C2696 + C2695) * C1458 -
            (C2700 + C2699 + C2698) * C1453) *
               C51122 * C2447 +
           ((C3053 + C3054 + C3055) * C1457 -
            ((C2495 + C2496 + C2497) * C51296 +
             (C2498 + C2499 + C2500) * C1456) +
            (C3056 + C3057 + C3058) * C51297 -
            (C2451 * C2654 + C2446 * C2659 + C2450 * C1225 + C2445 * C1231 +
             C2449 * C306 + C2444 * C321) *
                C1458 -
            (C2451 * C2660 + C2446 * C2663 + C2450 * C1232 + C2445 * C1237 +
             C2449 * C322 + C2444 * C336) *
                C1453) *
               C51122 * C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1456 +
            (C117 * C127 + C51106 * C140) * C51296 -
            (C117 * C301 + C51106 * C311) * C1457 -
            (C117 * C312 + C51106 * C331) * C51297 +
            (C117 * C302 + C51106 * C313) * C1458 +
            (C117 * C314 + C51106 * C332) * C1453) *
               C51122 * C108 +
           (C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C51122 * C109 +
           (C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C51122 * C110 +
           (C1472 + C1473 - C1474 - C1475 + C1476 + C1477) * C51122 * C111) *
              C51243 +
          ((C1462 - (C1461 + C1460) + C1463 - C1464 - C1465) * C51122 * C108 +
           (C1468 - (C1467 + C1466) + C1469 - C1470 - C1471) * C51122 * C109 +
           (C1474 - (C1473 + C1472) + C1475 - C1476 - C1477) * C51122 * C110 +
           (C714 * C1457 - (C174 * C51296 + C175 * C1456) + C715 * C51297 -
            (C117 * C310 + C51106 * C329) * C1458 -
            (C117 * C330 + C51106 * C340) * C1453) *
               C51122 * C111) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C5336 +
            (C5703 * C1456 + C5704 * C51296 - C6258 * C1457 - C6259 * C51297 +
             (C117 * C1717 + C51106 * C1721) * C1458 +
             (C117 * C1722 + C51106 * C1729) * C1453) *
                C5337 +
            (C5705 * C1456 + C5706 * C51296 - C6260 * C1457 - C6261 * C51297 +
             (C117 * C2846 + C51106 * C2849) * C1458 +
             (C117 * C2850 + C51106 * C2855) * C1453) *
                C5338) *
               C2447 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C5336 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C5337 +
            (C6864 + C6865 - C6866 - C6867 + C6868 + C6869) * C5338) *
               C50977) *
              C51243 +
          (((C1462 - (C1461 + C1460) + C1463 - C1464 - C1465) * C5336 +
            (C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C5337 +
            (C6866 - (C6865 + C6864) + C6867 - C6868 - C6869) * C5338) *
               C2447 +
           ((C1468 - (C1467 + C1466) + C1469 - C1470 - C1471) * C5336 +
            (C1010 * C1457 - (C564 * C51296 + C563 * C1456) + C1011 * C51297 -
             (C117 * C1719 + C51106 * C1725) * C1458 -
             (C117 * C1726 + C51106 * C1731) * C1453) *
                C5337 +
            (C5886 * C1457 - (C570 * C51296 + C569 * C1456) + C5887 * C51297 -
             (C117 * C2848 + C51106 * C2854) * C1458 -
             (C117 * C2853 + C51106 * C2857) * C1453) *
                C5338) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1456 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51296 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1457 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51297 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C1458 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C1453) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1456 + (C2492 + C2493 + C2494) * C51296 -
            (C2689 + C2690 + C2691) * C1457 - (C2692 + C2693 + C2694) * C51297 +
            (C2695 + C2696 + C2697) * C1458 + (C2698 + C2699 + C2700) * C1453) *
               C51122 * C50977) *
              C50991 * C51252 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C1457 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51296 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C1456) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C51297 -
            (C2451 * C4338 + C2446 * C4340 + C2450 * C3416 + C2445 * C3419 +
             C2449 * C1717 + C2444 * C1721) *
                C1458 -
            (C2451 * C4341 + C2446 * C4344 + C2450 * C3420 + C2445 * C3425 +
             C2449 * C1722 + C2444 * C1729) *
                C1453) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C1457 -
            ((C2888 + C2887 + C2886) * C51296 +
             (C2885 + C2884 + C2883) * C1456) +
            (C3444 + C3445 + C3446) * C51297 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C1458 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C1453) *
               C51122 * C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1456 +
            (C117 * C127 + C51106 * C140) * C51296 -
            (C117 * C301 + C51106 * C311) * C1457 -
            (C117 * C312 + C51106 * C331) * C51297 +
            (C117 * C302 + C51106 * C313) * C1458 +
            (C117 * C314 + C51106 * C332) * C1453) *
               C51122 * C108 +
           (C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C51122 * C109 +
           (C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C51122 * C110 +
           (C1472 + C1473 - C1474 - C1475 + C1476 + C1477) * C51122 * C111) *
              C50991 * C51252 +
          (((C117 * C969 + C51106 * C974) * C1457 -
            ((C117 * C514 + C51106 * C530) * C51296 +
             (C117 * C500 + C51106 * C515) * C1456) +
            (C117 * C975 + C51106 * C984) * C51297 -
            (C117 * C1717 + C51106 * C1721) * C1458 -
            (C117 * C1722 + C51106 * C1729) * C1453) *
               C51122 * C108 +
           (C1008 * C1457 - (C562 * C51296 + C561 * C1456) + C1009 * C51297 -
            (C117 * C1718 + C51106 * C1723) * C1458 -
            (C117 * C1724 + C51106 * C1730) * C1453) *
               C51122 * C109 +
           (C1010 * C1457 - (C564 * C51296 + C563 * C1456) + C1011 * C51297 -
            (C117 * C1719 + C51106 * C1725) * C1458 -
            (C117 * C1726 + C51106 * C1731) * C1453) *
               C51122 * C110 +
           (C1012 * C1457 - (C566 * C51296 + C565 * C1456) + C1013 * C51297 -
            (C117 * C1720 + C51106 * C1727) * C1458 -
            (C117 * C1728 + C51106 * C1732) * C1453) *
               C51122 * C111) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C5336 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C5337 +
            (C7227 + C7228 - C7229 - C7230 + C7241 + C7242) * C5338) *
               C2447 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C5336 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C5337 +
            (C6864 + C6865 - C6866 - C6867 + C6868 + C6869) * C5338) *
               C50977) *
              C50991 * C51252 +
          (((C7221 - (C7220 + C7219) + C7222 - C7239 - C7240) * C5336 +
            (C7229 - (C7228 + C7227) + C7230 - C7241 - C7242) * C5337 +
            (C6705 * C1457 - (C5711 * C51296 + C5712 * C1456) + C6706 * C51297 -
             (C117 * C4738 + C51106 * C4746) * C1458 -
             (C117 * C4744 + C51106 * C4750) * C1453) *
                C5338) *
               C2447 +
           ((C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C5336 +
            (C6866 - (C6865 + C6864) + C6867 - C6868 - C6869) * C5337 +
            (C6266 * C1457 - (C5708 * C51296 + C5707 * C1456) + C6267 * C51297 -
             (C117 * C4736 + C51106 * C4742) * C1458 -
             (C117 * C4740 + C51106 * C4748) * C1453) *
                C5338) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51106 * C126) * C1122 +
                (C117 * C127 + C51106 * C140) * C1117 -
                (C117 * C301 + C51106 * C311) * C1123 -
                (C117 * C312 + C51106 * C331) * C51061) *
                   C51122 * C108 +
               (C1125 + C1126 - C1127 - C1128) * C51122 * C109 + C1147 * C110 +
               C1148 * C111) *
                  C1119 +
              ((C1127 - (C1126 + C1125) + C1128) * C51122 * C108 +
               (C1131 - (C1130 + C1129) + C1132) * C51122 * C109 +
               (C1135 - (C1134 + C1133) + C1136) * C51122 * C110 +
               (C1137 - (C1138 + C1139) + C1140) * C51122 * C111) *
                  C1120 +
              (C1147 * C108 + C1148 * C109 +
               (C1139 + C1138 - C1137 - C1140) * C51122 * C110 +
               (C176 * C1122 + C177 * C1117 -
                (C117 * C689 + C51106 * C690) * C1123 -
                (C117 * C691 + C51106 * C692) * C51061) *
                   C51122 * C111) *
                  C1121) *
             C51025 +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C119 + C51106 * C126) * C1219 +
               (C117 * C127 + C51106 * C140) * C1214 -
               (C117 * C301 + C51106 * C311) * C1220 -
               (C117 * C312 + C51106 * C331) * C1215 +
               (C117 * C302 + C51106 * C313) * C1221 +
               (C117 * C314 + C51106 * C332) * C1216 -
               (C117 * C1223 + C51106 * C1227) * C1222 -
               (C117 * C1228 + C51106 * C1235) * C1217) *
                  C51122 * C108 +
              (C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
               C374 * C1221 + C375 * C1216 -
               (C117 * C1224 + C51106 * C1229) * C1222 -
               (C117 * C1230 + C51106 * C1236) * C1217) *
                  C51122 * C109 +
              (C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
               C378 * C1221 + C379 * C1216 -
               (C117 * C1225 + C51106 * C1231) * C1222 -
               (C117 * C1232 + C51106 * C1237) * C1217) *
                  C51122 * C110 +
              (C172 * C1219 + C173 * C1214 - C380 * C1220 - C381 * C1215 +
               C382 * C1221 + C383 * C1216 -
               (C117 * C1226 + C51106 * C1233) * C1222 -
               (C117 * C1234 + C51106 * C1238) * C1217) *
                  C51122 * C111) *
             C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1122 +
            (C117 * C127 + C51106 * C140) * C1117 -
            (C117 * C301 + C51106 * C311) * C1123 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C1125 + C1126 - C1127 - C1128) * C51122 * C109 + C1147 * C110 +
           C1148 * C111) *
              C50991 * C493 +
          (((C117 * C969 + C51106 * C974) * C1123 -
            ((C117 * C514 + C51106 * C530) * C1117 +
             (C117 * C500 + C51106 * C515) * C1122) +
            (C117 * C975 + C51106 * C984) * C51061) *
               C51122 * C108 +
           (C1008 * C1123 - (C562 * C1117 + C561 * C1122) + C1009 * C51061) *
               C51122 * C109 +
           (C1010 * C1123 - (C564 * C1117 + C563 * C1122) + C1011 * C51061) *
               C51122 * C110 +
           (C1012 * C1123 - (C566 * C1117 + C565 * C1122) + C1013 * C51061) *
               C51122 * C111) *
              C50991 * C494 +
          (((C117 * C501 + C51106 * C516) * C1122 +
            (C117 * C517 + C51106 * C531) * C1117 -
            (C117 * C1337 + C51106 * C1341) * C1123 -
            (C117 * C1342 + C51106 * C1349) * C51061) *
               C51122 * C108 +
           (C567 * C1122 + C568 * C1117 -
            (C117 * C1338 + C51106 * C1343) * C1123 -
            (C117 * C1344 + C51106 * C1350) * C51061) *
               C51122 * C109 +
           (C569 * C1122 + C570 * C1117 -
            (C117 * C1339 + C51106 * C1345) * C1123 -
            (C117 * C1346 + C51106 * C1351) * C51061) *
               C51122 * C110 +
           (C571 * C1122 + C572 * C1117 -
            (C117 * C1340 + C51106 * C1347) * C1123 -
            (C117 * C1348 + C51106 * C1352) * C51061) *
               C51122 * C111) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1122 + (C2492 + C2493 + C2494) * C1117 -
            (C2689 + C2690 + C2691) * C1123 -
            (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C1119 +
          (((C2691 + C2690 + C2689) * C1123 -
            ((C2494 + C2493 + C2492) * C1117 +
             (C2491 + C2490 + C2489) * C1122) +
            (C2694 + C2693 + C2692) * C51061) *
               C51122 * C2447 +
           ((C3053 + C3054 + C3055) * C1123 -
            ((C2495 + C2496 + C2497) * C1117 +
             (C2498 + C2499 + C2500) * C1122) +
            (C3056 + C3057 + C3058) * C51061) *
               C51122 * C50977) *
              C1120 +
          (((C2500 + C2499 + C2498) * C1122 + (C2497 + C2496 + C2495) * C1117 -
            (C3055 + C3054 + C3053) * C1123 -
            (C3058 + C3057 + C3056) * C51061) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C1122 + (C2504 + C2505 + C2506) * C1117 -
            (C2451 * C1226 + C2446 * C1233 + C2450 * C308 + C2445 * C325 +
             C2449 * C307 + C2444 * C323) *
                C1123 -
            (C2451 * C1234 + C2446 * C1238 + C2450 * C326 + C2445 * C338 +
             C2449 * C324 + C2444 * C337) *
                C51061) *
               C51122 * C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
            C2451 * C302 + C2446 * C313) *
               C1219 +
           (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
            C2451 * C314 + C2446 * C332) *
               C1214 -
           (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
            C2449 * C301 + C2444 * C311) *
               C1220 -
           (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
            C2449 * C312 + C2444 * C331) *
               C1215 +
           (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
            C2451 * C2652 + C2446 * C2655) *
               C1221 +
           (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
            C2451 * C2656 + C2446 * C2661) *
               C1216 -
           (C2451 * C3690 + C2446 * C3692 + C2450 * C2652 + C2445 * C2655 +
            C2449 * C1223 + C2444 * C1227) *
               C1222 -
           (C2451 * C3693 + C2446 * C3696 + C2450 * C2656 + C2445 * C2661 +
            C2449 * C1228 + C2444 * C1235) *
               C1217) *
              C51122 * C2447 +
          ((C2489 + C2490 + C2491) * C1219 + (C2492 + C2493 + C2494) * C1214 -
           (C2689 + C2690 + C2691) * C1220 - (C2692 + C2693 + C2694) * C1215 +
           (C2695 + C2696 + C2697) * C1221 + (C2698 + C2699 + C2700) * C1216 -
           (C2451 * C3691 + C2446 * C3694 + C2450 * C2653 + C2445 * C2657 +
            C2449 * C1224 + C2444 * C1229) *
               C1222 -
           (C2451 * C3695 + C2446 * C3697 + C2450 * C2658 + C2445 * C2662 +
            C2449 * C1230 + C2444 * C1236) *
               C1217) *
              C51122 * C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1122 + (C2492 + C2493 + C2494) * C1117 -
            (C2689 + C2690 + C2691) * C1123 -
            (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C50991 * C493 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C1123 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C1117 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C1122) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C51061) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C1123 -
            ((C2888 + C2887 + C2886) * C1117 +
             (C2885 + C2884 + C2883) * C1122) +
            (C3444 + C3445 + C3446) * C51061) *
               C51122 * C50977) *
              C50991 * C494 +
          (((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
             C2451 * C2846 + C2446 * C2849) *
                C1122 +
            (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
             C2451 * C2850 + C2446 * C2855) *
                C1117 -
            (C2451 * C3844 + C2446 * C3846 + C2450 * C2846 + C2445 * C2849 +
             C2449 * C1337 + C2444 * C1341) *
                C1123 -
            (C2451 * C3847 + C2446 * C3850 + C2450 * C2850 + C2445 * C2855 +
             C2449 * C1342 + C2444 * C1349) *
                C51061) *
               C51122 * C2447 +
           ((C2889 + C2890 + C2891) * C1122 + (C2892 + C2893 + C2894) * C1117 -
            (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
             C2449 * C1338 + C2444 * C1343) *
                C1123 -
            (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
             C2449 * C1344 + C2444 * C1350) *
                C51061) *
               C51122 * C50977) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C5336 +
            (C5703 * C1122 + C5704 * C1117 - C6258 * C1123 - C6259 * C51061) *
                C5337 +
            (C5705 * C1122 + C5706 * C1117 - C6260 * C1123 - C6261 * C51061) *
                C5338) *
               C2447 +
           ((C1125 + C1126 - C1127 - C1128) * C5336 +
            (C1610 + C1609 - C1608 - C1611) * C5337 +
            (C6424 + C6425 - C6426 - C6427) * C5338) *
               C50977) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C5336 +
            (C1608 - (C1609 + C1610) + C1611) * C5337 +
            (C6426 - (C6425 + C6424) + C6427) * C5338) *
               C2447 +
           ((C1131 - (C1130 + C1129) + C1132) * C5336 +
            (C1612 - (C1613 + C1614) + C1615) * C5337 +
            (C6428 - (C6429 + C6430) + C6431) * C5338) *
               C50977) *
              C1120 +
          ((C1145 * C5336 + (C1614 + C1613 - C1612 - C1615) * C5337 +
            (C6430 + C6429 - C6428 - C6431) * C5338) *
               C2447 +
           (C1146 * C5336 + (C1618 + C1617 - C1616 - C1619) * C5337 +
            (C571 * C1122 + C572 * C1117 -
             (C117 * C1340 + C51106 * C1347) * C1123 -
             (C117 * C1348 + C51106 * C1352) * C51061) *
                C5338) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C5336 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            (C117 * C1717 + C51106 * C1721) * C1221 +
            (C117 * C1722 + C51106 * C1729) * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C5337 +
           (C5705 * C1219 + C5706 * C1214 - C6260 * C1220 - C6261 * C1215 +
            (C117 * C2846 + C51106 * C2849) * C1221 +
            (C117 * C2850 + C51106 * C2855) * C1216 -
            (C117 * C3844 + C51106 * C3846) * C1222 -
            (C117 * C3847 + C51106 * C3850) * C1217) *
               C5338) *
              C2447 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C5336 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C5337 +
           (C567 * C1219 + C568 * C1214 - C5506 * C1220 - C5507 * C1215 +
            C5508 * C1221 + C5509 * C1216 -
            (C117 * C3845 + C51106 * C3848) * C1222 -
            (C117 * C3849 + C51106 * C3851) * C1217) *
               C5338) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C5336 +
            (C6684 + C6685 - C6686 - C6687) * C5337 + C6711 * C5338) *
               C2447 +
           ((C1125 + C1126 - C1127 - C1128) * C5336 +
            (C1610 + C1609 - C1608 - C1611) * C5337 + C6708 * C5338) *
               C50977) *
              C50991 * C493 +
          (((C6686 - (C6685 + C6684) + C6687) * C5336 +
            (C6690 - (C6689 + C6688) + C6691) * C5337 +
            (C6709 - (C6695 + C6696) + C6710) * C5338) *
               C2447 +
           ((C1608 - (C1609 + C1610) + C1611) * C5336 +
            (C6426 - (C6425 + C6424) + C6427) * C5337 +
            (C6699 - (C6700 + C6701) + C6702) * C5338) *
               C50977) *
              C50991 * C494 +
          ((C6711 * C5336 + (C6696 + C6695 - C6709 - C6710) * C5337 +
            ((C117 * C5661 + C51106 * C5664) * C1122 +
             (C117 * C5665 + C51106 * C5670) * C1117 -
             (C117 * C6675 + C51106 * C6677) * C1123 -
             (C117 * C6678 + C51106 * C6681) * C51061) *
                C5338) *
               C2447 +
           (C6708 * C5336 + (C6701 + C6700 - C6699 - C6702) * C5337 +
            (C5713 * C1122 + C5714 * C1117 -
             (C117 * C6676 + C51106 * C6679) * C1123 -
             (C117 * C6680 + C51106 * C6682) * C51061) *
                C5338) *
               C50977) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C1122 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C1117 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C1123 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C1122 + (C2492 + C2493 + C2494) * C1117 -
             (C2689 + C2690 + C2691) * C1123 -
             (C2692 + C2693 + C2694) * C51061) *
                C51122 * C50977) *
               C51243 +
           (((C2691 + C2690 + C2689) * C1123 -
             ((C2494 + C2493 + C2492) * C1117 +
              (C2491 + C2490 + C2489) * C1122) +
             (C2694 + C2693 + C2692) * C51061) *
                C51122 * C2447 +
            ((C3053 + C3054 + C3055) * C1123 -
             ((C2495 + C2496 + C2497) * C1117 +
              (C2498 + C2499 + C2500) * C1122) +
             (C3056 + C3057 + C3058) * C51061) *
                C51122 * C50977) *
               C50996) *
              C51252 +
          ((((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
              C2451 * C3416 + C2446 * C3419) *
                 C1123 -
             ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
               C2449 * C514 + C2444 * C530) *
                  C1117 +
              (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
               C2449 * C500 + C2444 * C515) *
                  C1122) +
             (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
              C2451 * C3420 + C2446 * C3425) *
                 C51061) *
                C51122 * C2447 +
            ((C3441 + C3442 + C3443) * C1123 -
             ((C2888 + C2887 + C2886) * C1117 +
              (C2885 + C2884 + C2883) * C1122) +
             (C3444 + C3445 + C3446) * C51061) *
                C51122 * C50977) *
               C51243 +
           (((C2883 + C2884 + C2885) * C1122 + (C2886 + C2887 + C2888) * C1117 -
             (C3443 + C3442 + C3441) * C1123 -
             (C3446 + C3445 + C3444) * C51061) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C1122 + (C3220 + C3221 + C3222) * C1117 -
             (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
              C2449 * C971 + C2444 * C978) *
                 C1123 -
             (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
              C2449 * C979 + C2444 * C986) *
                 C51061) *
                C51122 * C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51122 * C108 +
            (C1125 + C1126 - C1127 - C1128) * C51122 * C109 + C1147 * C110 +
            C1148 * C111) *
               C51243 +
           ((C1127 - (C1126 + C1125) + C1128) * C51122 * C108 +
            (C1131 - (C1130 + C1129) + C1132) * C51122 * C109 +
            (C1135 - (C1134 + C1133) + C1136) * C51122 * C110 +
            (C1137 - (C1138 + C1139) + C1140) * C51122 * C111) *
               C50996) *
              C51252 +
          ((((C117 * C969 + C51106 * C974) * C1123 -
             ((C117 * C514 + C51106 * C530) * C1117 +
              (C117 * C500 + C51106 * C515) * C1122) +
             (C117 * C975 + C51106 * C984) * C51061) *
                C51122 * C108 +
            (C1608 - (C1609 + C1610) + C1611) * C51122 * C109 +
            (C1612 - (C1613 + C1614) + C1615) * C51122 * C110 +
            (C1616 - (C1617 + C1618) + C1619) * C51122 * C111) *
               C51243 +
           ((C1610 + C1609 - C1608 - C1611) * C51122 * C108 +
            (C1614 + C1613 - C1612 - C1615) * C51122 * C109 +
            (C1618 + C1617 - C1616 - C1619) * C51122 * C110 +
            (C834 * C1122 + C835 * C1117 -
             (C117 * C973 + C51106 * C982) * C1123 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51122 * C111) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C1122 +
              (C117 * C127 + C51106 * C140) * C1117 -
              (C117 * C301 + C51106 * C311) * C1123 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C5336 +
             (C6684 + C6685 - C6686 - C6687) * C5337 + C6711 * C5338) *
                C2447 +
            ((C1125 + C1126 - C1127 - C1128) * C5336 + C7070 * C5337 +
             C6708 * C5338) *
                C50977) *
               C51243 +
           (((C1127 - (C1126 + C1125) + C1128) * C5336 + C7071 * C5337 +
             C7072 * C5338) *
                C2447 +
            ((C1131 - (C1130 + C1129) + C1132) * C5336 +
             (C1612 - (C1613 + C1614) + C1615) * C5337 +
             (C6428 - (C6429 + C6430) + C6431) * C5338) *
                C50977) *
               C50996) *
              C51252 +
          ((((C6686 - (C6685 + C6684) + C6687) * C5336 +
             (C6690 - (C6689 + C6688) + C6691) * C5337 +
             (C6709 - (C6695 + C6696) + C6710) * C5338) *
                C2447 +
            (C7071 * C5336 + C7072 * C5337 +
             (C6699 - (C6700 + C6701) + C6702) * C5338) *
                C50977) *
               C51243 +
           ((C7070 * C5336 + C6708 * C5337 +
             (C6701 + C6700 - C6699 - C6702) * C5338) *
                C2447 +
            ((C1614 + C1613 - C1612 - C1615) * C5336 +
             (C6430 + C6429 - C6428 - C6431) * C5337 +
             (C5709 * C1122 + C5710 * C1117 -
              (C117 * C6231 + C51106 * C6232) * C1123 -
              (C117 * C6233 + C51106 * C6234) * C51061) *
                 C5338) *
                C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C51106 * C126) * C1219 +
           (C117 * C127 + C51106 * C140) * C1214 -
           (C117 * C301 + C51106 * C311) * C1220 -
           (C117 * C312 + C51106 * C331) * C1215 +
           (C117 * C302 + C51106 * C313) * C1221 +
           (C117 * C314 + C51106 * C332) * C1216 -
           (C117 * C1223 + C51106 * C1227) * C1222 -
           (C117 * C1228 + C51106 * C1235) * C1217) *
              C51122 * C108 +
          (C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
           C374 * C1221 + C375 * C1216 -
           (C117 * C1224 + C51106 * C1229) * C1222 -
           (C117 * C1230 + C51106 * C1236) * C1217) *
              C51122 * C109 +
          (C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
           C378 * C1221 + C379 * C1216 -
           (C117 * C1225 + C51106 * C1231) * C1222 -
           (C117 * C1232 + C51106 * C1237) * C1217) *
              C51122 * C110 +
          (C172 * C1219 + C173 * C1214 - C380 * C1220 - C381 * C1215 +
           C382 * C1221 + C383 * C1216 -
           (C117 * C1226 + C51106 * C1233) * C1222 -
           (C117 * C1234 + C51106 * C1238) * C1217) *
              C51122 * C111) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1122 +
            (C117 * C127 + C51106 * C140) * C1117 -
            (C117 * C301 + C51106 * C311) * C1123 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C1125 + C1126 - C1127 - C1128) * C51122 * C109 + C1147 * C110 +
           C1148 * C111) *
              C1119 +
          ((C1127 - (C1126 + C1125) + C1128) * C51122 * C108 +
           (C1131 - (C1130 + C1129) + C1132) * C51122 * C109 +
           (C1135 - (C1134 + C1133) + C1136) * C51122 * C110 +
           (C1137 - (C1138 + C1139) + C1140) * C51122 * C111) *
              C1120 +
          (C1147 * C108 + C1148 * C109 +
           (C1139 + C1138 - C1137 - C1140) * C51122 * C110 +
           (C176 * C1122 + C177 * C1117 -
            (C117 * C689 + C51106 * C690) * C1123 -
            (C117 * C691 + C51106 * C692) * C51061) *
               C51122 * C111) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1122 + (C2492 + C2493 + C2494) * C1117 -
            (C2689 + C2690 + C2691) * C1123 -
            (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C1119 +
          (((C2691 + C2690 + C2689) * C1123 -
            ((C2494 + C2493 + C2492) * C1117 +
             (C2491 + C2490 + C2489) * C1122) +
            (C2694 + C2693 + C2692) * C51061) *
               C51122 * C2447 +
           ((C3053 + C3054 + C3055) * C1123 -
            ((C2495 + C2496 + C2497) * C1117 +
             (C2498 + C2499 + C2500) * C1122) +
            (C3056 + C3057 + C3058) * C51061) *
               C51122 * C50977) *
              C1120 +
          (((C2500 + C2499 + C2498) * C1122 + (C2497 + C2496 + C2495) * C1117 -
            (C3055 + C3054 + C3053) * C1123 -
            (C3058 + C3057 + C3056) * C51061) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C1122 + (C2504 + C2505 + C2506) * C1117 -
            (C2451 * C1226 + C2446 * C1233 + C2450 * C308 + C2445 * C325 +
             C2449 * C307 + C2444 * C323) *
                C1123 -
            (C2451 * C1234 + C2446 * C1238 + C2450 * C326 + C2445 * C338 +
             C2449 * C324 + C2444 * C337) *
                C51061) *
               C51122 * C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
            C2451 * C302 + C2446 * C313) *
               C1219 +
           (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
            C2451 * C314 + C2446 * C332) *
               C1214 -
           (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
            C2449 * C301 + C2444 * C311) *
               C1220 -
           (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
            C2449 * C312 + C2444 * C331) *
               C1215 +
           (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
            C2451 * C2652 + C2446 * C2655) *
               C1221 +
           (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
            C2451 * C2656 + C2446 * C2661) *
               C1216 -
           (C2451 * C3690 + C2446 * C3692 + C2450 * C2652 + C2445 * C2655 +
            C2449 * C1223 + C2444 * C1227) *
               C1222 -
           (C2451 * C3693 + C2446 * C3696 + C2450 * C2656 + C2445 * C2661 +
            C2449 * C1228 + C2444 * C1235) *
               C1217) *
              C51122 * C2447 +
          ((C2489 + C2490 + C2491) * C1219 + (C2492 + C2493 + C2494) * C1214 -
           (C2689 + C2690 + C2691) * C1220 - (C2692 + C2693 + C2694) * C1215 +
           (C2695 + C2696 + C2697) * C1221 + (C2698 + C2699 + C2700) * C1216 -
           (C2451 * C3691 + C2446 * C3694 + C2450 * C2653 + C2445 * C2657 +
            C2449 * C1224 + C2444 * C1229) *
               C1222 -
           (C2451 * C3695 + C2446 * C3697 + C2450 * C2658 + C2445 * C2662 +
            C2449 * C1230 + C2444 * C1236) *
               C1217) *
              C51122 * C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C5336 +
            (C5703 * C1122 + C5704 * C1117 - C6258 * C1123 - C6259 * C51061) *
                C5337 +
            (C5705 * C1122 + C5706 * C1117 - C6260 * C1123 - C6261 * C51061) *
                C5338) *
               C2447 +
           ((C1125 + C1126 - C1127 - C1128) * C5336 +
            (C1610 + C1609 - C1608 - C1611) * C5337 +
            (C6424 + C6425 - C6426 - C6427) * C5338) *
               C50977) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C5336 +
            (C1608 - (C1609 + C1610) + C1611) * C5337 +
            (C6426 - (C6425 + C6424) + C6427) * C5338) *
               C2447 +
           ((C1131 - (C1130 + C1129) + C1132) * C5336 +
            (C1612 - (C1613 + C1614) + C1615) * C5337 +
            (C6428 - (C6429 + C6430) + C6431) * C5338) *
               C50977) *
              C1120 +
          ((C1145 * C5336 + (C1614 + C1613 - C1612 - C1615) * C5337 +
            (C6430 + C6429 - C6428 - C6431) * C5338) *
               C2447 +
           (C1146 * C5336 + (C1618 + C1617 - C1616 - C1619) * C5337 +
            (C571 * C1122 + C572 * C1117 -
             (C117 * C1340 + C51106 * C1347) * C1123 -
             (C117 * C1348 + C51106 * C1352) * C51061) *
                C5338) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C5336 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            (C117 * C1717 + C51106 * C1721) * C1221 +
            (C117 * C1722 + C51106 * C1729) * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C5337 +
           (C5705 * C1219 + C5706 * C1214 - C6260 * C1220 - C6261 * C1215 +
            (C117 * C2846 + C51106 * C2849) * C1221 +
            (C117 * C2850 + C51106 * C2855) * C1216 -
            (C117 * C3844 + C51106 * C3846) * C1222 -
            (C117 * C3847 + C51106 * C3850) * C1217) *
               C5338) *
              C2447 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C5336 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C5337 +
           (C567 * C1219 + C568 * C1214 - C5506 * C1220 - C5507 * C1215 +
            C5508 * C1221 + C5509 * C1216 -
            (C117 * C3845 + C51106 * C3848) * C1222 -
            (C117 * C3849 + C51106 * C3851) * C1217) *
               C5338) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C687 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51251 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C688 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C687 + (C2492 + C2493 + C2494) * C51251 -
             (C2689 + C2690 + C2691) * C688 -
             (C2692 + C2693 + C2694) * C51061) *
                C51122 * C50977) *
               C51243 +
           (((C2691 + C2690 + C2689) * C688 -
             ((C2494 + C2493 + C2492) * C51251 +
              (C2491 + C2490 + C2489) * C687) +
             (C2694 + C2693 + C2692) * C51061) *
                C51122 * C2447 +
            ((C3053 + C3054 + C3055) * C688 -
             ((C2495 + C2496 + C2497) * C51251 +
              (C2498 + C2499 + C2500) * C687) +
             (C3056 + C3057 + C3058) * C51061) *
                C51122 * C50977) *
               C50996) *
              C1831 +
          ((((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
              C2451 * C3416 + C2446 * C3419) *
                 C688 -
             ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
               C2449 * C514 + C2444 * C530) *
                  C51251 +
              (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
               C2449 * C500 + C2444 * C515) *
                  C687) +
             (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
              C2451 * C3420 + C2446 * C3425) *
                 C51061) *
                C51122 * C2447 +
            ((C3441 + C3442 + C3443) * C688 -
             ((C2888 + C2887 + C2886) * C51251 +
              (C2885 + C2884 + C2883) * C687) +
             (C3444 + C3445 + C3446) * C51061) *
                C51122 * C50977) *
               C51243 +
           (((C2883 + C2884 + C2885) * C687 + (C2886 + C2887 + C2888) * C51251 -
             (C3443 + C3442 + C3441) * C688 -
             (C3446 + C3445 + C3444) * C51061) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C687 + (C3220 + C3221 + C3222) * C51251 -
             (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
              C2449 * C971 + C2444 * C978) *
                 C688 -
             (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
              C2449 * C979 + C2444 * C986) *
                 C51061) *
                C51122 * C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51122 * C108 +
            (C694 + C695 - C696 - C697) * C51122 * C109 + C722 * C110 +
            C723 * C111) *
               C51243 +
           ((C696 - (C695 + C694) + C697) * C51122 * C108 +
            (C700 - (C699 + C698) + C701) * C51122 * C109 +
            (C704 - (C703 + C702) + C705) * C51122 * C110 +
            (C718 - (C708 + C709) + C719) * C51122 * C111) *
               C50996) *
              C1831 +
          ((((C117 * C969 + C51106 * C974) * C688 -
             ((C117 * C514 + C51106 * C530) * C51251 +
              (C117 * C500 + C51106 * C515) * C687) +
             (C117 * C975 + C51106 * C984) * C51061) *
                C51122 * C108 +
            (C1014 - (C992 + C993) + C1015) * C51122 * C109 +
            (C1016 - (C998 + C999) + C1017) * C51122 * C110 +
            (C1018 - (C1004 + C1005) + C1019) * C51122 * C111) *
               C51243 +
           ((C993 + C992 - C1014 - C1015) * C51122 * C108 +
            (C999 + C998 - C1016 - C1017) * C51122 * C109 +
            (C1005 + C1004 - C1018 - C1019) * C51122 * C110 +
            (C834 * C687 + C835 * C51251 -
             (C117 * C973 + C51106 * C982) * C688 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51122 * C111) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C5336 +
             (C6236 + C6237 - C6268 - C6269) * C5337 +
             (C6242 + C6243 - C6270 - C6271) * C5338) *
                C2447 +
            ((C694 + C695 - C696 - C697) * C5336 + C6272 * C5337 +
             C6273 * C5338) *
                C50977) *
               C51243 +
           (((C696 - (C695 + C694) + C697) * C5336 + C6274 * C5337 +
             C6275 * C5338) *
                C2447 +
            ((C700 - (C699 + C698) + C701) * C5336 +
             (C1016 - (C998 + C999) + C1017) * C5337 +
             (C5888 - (C5882 + C5883) + C5889) * C5338) *
                C50977) *
               C50996) *
              C1831 +
          ((((C6268 - (C6237 + C6236) + C6269) * C5336 +
             (C6270 - (C6243 + C6242) + C6271) * C5337 +
             (C6705 * C688 - (C5711 * C51251 + C5712 * C687) + C6706 * C51061) *
                 C5338) *
                C2447 +
            (C6274 * C5336 + C6275 * C5337 +
             (C6276 - (C6254 + C6255) + C6277) * C5338) *
                C50977) *
               C51243 +
           ((C6272 * C5336 + C6273 * C5337 +
             (C6255 + C6254 - C6276 - C6277) * C5338) *
                C2447 +
            ((C999 + C998 - C1016 - C1017) * C5336 +
             (C5883 + C5882 - C5888 - C5889) * C5337 +
             (C5709 * C687 + C5710 * C51251 -
              (C117 * C6231 + C51106 * C6232) * C688 -
              (C117 * C6233 + C51106 * C6234) * C51061) *
                 C5338) *
                C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C687 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51251 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C688 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C687 + (C2492 + C2493 + C2494) * C51251 -
            (C2689 + C2690 + C2691) * C688 - (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C50991 * C51298 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C688 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51251 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C687) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C51061) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C688 -
            ((C2888 + C2887 + C2886) * C51251 +
             (C2885 + C2884 + C2883) * C687) +
            (C3444 + C3445 + C3446) * C51061) *
               C51122 * C50977) *
              C50991 * C51299 +
          (((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
             C2451 * C2846 + C2446 * C2849) *
                C687 +
            (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
             C2451 * C2850 + C2446 * C2855) *
                C51251 -
            (C2451 * C3844 + C2446 * C3846 + C2450 * C2846 + C2445 * C2849 +
             C2449 * C1337 + C2444 * C1341) *
                C688 -
            (C2451 * C3847 + C2446 * C3850 + C2450 * C2850 + C2445 * C2855 +
             C2449 * C1342 + C2444 * C1349) *
                C51061) *
               C51122 * C2447 +
           ((C2889 + C2890 + C2891) * C687 + (C2892 + C2893 + C2894) * C51251 -
            (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
             C2449 * C1338 + C2444 * C1343) *
                C688 -
            (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
             C2449 * C1344 + C2444 * C1350) *
                C51061) *
               C51122 * C50977) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C687 +
            (C117 * C127 + C51106 * C140) * C51251 -
            (C117 * C301 + C51106 * C311) * C688 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C694 + C695 - C696 - C697) * C51122 * C109 + C722 * C110 +
           C723 * C111) *
              C50991 * C51298 +
          (((C117 * C969 + C51106 * C974) * C688 -
            ((C117 * C514 + C51106 * C530) * C51251 +
             (C117 * C500 + C51106 * C515) * C687) +
            (C117 * C975 + C51106 * C984) * C51061) *
               C51122 * C108 +
           (C1014 - (C992 + C993) + C1015) * C51122 * C109 +
           (C1016 - (C998 + C999) + C1017) * C51122 * C110 +
           (C1018 - (C1004 + C1005) + C1019) * C51122 * C111) *
              C50991 * C51299 +
          (((C117 * C501 + C51106 * C516) * C687 +
            (C117 * C517 + C51106 * C531) * C51251 -
            (C117 * C1337 + C51106 * C1341) * C688 -
            (C117 * C1342 + C51106 * C1349) * C51061) *
               C51122 * C108 +
           (C567 * C687 + C568 * C51251 -
            (C117 * C1338 + C51106 * C1343) * C688 -
            (C117 * C1344 + C51106 * C1350) * C51061) *
               C51122 * C109 +
           (C569 * C687 + C570 * C51251 -
            (C117 * C1339 + C51106 * C1345) * C688 -
            (C117 * C1346 + C51106 * C1351) * C51061) *
               C51122 * C110 +
           (C571 * C687 + C572 * C51251 -
            (C117 * C1340 + C51106 * C1347) * C688 -
            (C117 * C1348 + C51106 * C1352) * C51061) *
               C51122 * C111) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C5336 +
            (C6236 + C6237 - C6268 - C6269) * C5337 + C8154 * C5338) *
               C2447 +
           ((C694 + C695 - C696 - C697) * C5336 + C6272 * C5337 +
            C6273 * C5338) *
               C50977) *
              C50991 * C51298 +
          (((C6268 - (C6237 + C6236) + C6269) * C5336 +
            (C6270 - (C6243 + C6242) + C6271) * C5337 +
            (C8149 - (C8150 + C8151) + C8152) * C5338) *
               C2447 +
           (C6274 * C5336 + C6275 * C5337 +
            (C6276 - (C6254 + C6255) + C6277) * C5338) *
               C50977) *
              C50991 * C51299 +
          ((C8154 * C5336 + (C8151 + C8150 - C8149 - C8152) * C5337 +
            (C7658 * C687 + C7659 * C51251 -
             (C117 * C6675 + C51106 * C6677) * C688 -
             (C117 * C6678 + C51106 * C6681) * C51061) *
                C5338) *
               C2447 +
           (C6273 * C5336 + (C6255 + C6254 - C6276 - C6277) * C5337 +
            (C5713 * C687 + C5714 * C51251 -
             (C117 * C6676 + C51106 * C6679) * C688 -
             (C117 * C6680 + C51106 * C6682) * C51061) *
                C5338) *
               C50977) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51106 * C126) * C118 +
                 (C117 * C127 + C51106 * C140) * C51009) *
                    C51122 * C108 +
                (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
                   C1119 -
               (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
                (C179 + C178) * C51122 * C108) *
                   C1120 +
               (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
                (C186 + C187) * C51122 * C111) *
                   C1121) *
                  C1831 +
              (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
                (C577 + C578) * C51122 * C110 + (C838 + C839) * C51122 * C111) *
                   C1120 -
               (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
                ((C117 * C514 + C51106 * C530) * C51009 +
                 (C117 * C500 + C51106 * C515) * C118) *
                    C51122 * C108) *
                   C1119 -
               (((C117 * C824 + C51106 * C826) * C51009 +
                 (C117 * C823 + C51106 * C825) * C118) *
                    C51122 * C111 +
                (C839 + C838) * C51122 * C110 + C836 * C109 + C837 * C108) *
                   C1121) *
                  C51089) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51106 * C126) * C298 +
                (C117 * C127 + C51106 * C140) * C293 -
                (C117 * C301 + C51106 * C311) * C299 -
                (C117 * C312 + C51106 * C331) * C294 +
                (C117 * C302 + C51106 * C313) * C300 +
                (C117 * C314 + C51106 * C332) * C295) *
                   C51122 * C108 +
               (C342 + C343 - C384 - C385 + C386 + C387) * C51122 * C109 +
               (C352 + C353 - C388 - C389 + C390 + C391) * C51122 * C110 +
               (C362 + C363 - C392 - C393 + C394 + C395) * C51122 * C111) *
                  C50991 * C1831 +
              (((C117 * C969 + C51106 * C974) * C299 -
                ((C117 * C514 + C51106 * C530) * C293 +
                 (C117 * C500 + C51106 * C515) * C298) +
                (C117 * C975 + C51106 * C984) * C294 -
                (C117 * C1717 + C51106 * C1721) * C300 -
                (C117 * C1722 + C51106 * C1729) * C295) *
                   C51122 * C108 +
               (C1008 * C299 - (C562 * C293 + C561 * C298) + C1009 * C294 -
                (C117 * C1718 + C51106 * C1723) * C300 -
                (C117 * C1724 + C51106 * C1730) * C295) *
                   C51122 * C109 +
               (C1010 * C299 - (C564 * C293 + C563 * C298) + C1011 * C294 -
                (C117 * C1719 + C51106 * C1725) * C300 -
                (C117 * C1726 + C51106 * C1731) * C295) *
                   C51122 * C110 +
               (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
                (C117 * C1720 + C51106 * C1727) * C300 -
                (C117 * C1728 + C51106 * C1732) * C295) *
                   C51122 * C111) *
                  C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C118 +
            (C117 * C127 + C51106 * C140) * C51009) *
               C51122 * C108 +
           (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
              C50991 * C1997 -
          (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
           ((C117 * C514 + C51106 * C530) * C51009 +
            (C117 * C500 + C51106 * C515) * C118) *
               C51122 * C108) *
              C50991 * C1998 +
          (((C117 * C501 + C51106 * C516) * C118 +
            (C117 * C517 + C51106 * C531) * C51009) *
               C51122 * C108 +
           (C579 + C580) * C51122 * C109 + (C581 + C582) * C51122 * C110 +
           (C583 + C584) * C51122 * C111) *
              C50991 * C1999 -
          (((C117 * C2005 + C51106 * C2013) * C51009 +
            (C117 * C2001 + C51106 * C2006) * C118) *
               C51122 * C111 +
           ((C117 * C2007 + C51106 * C2014) * C51009 +
            (C117 * C2002 + C51106 * C2008) * C118) *
               C51122 * C110 +
           ((C117 * C2009 + C51106 * C2015) * C51009 +
            (C117 * C2003 + C51106 * C2010) * C118) *
               C51122 * C109 +
           ((C117 * C2011 + C51106 * C2016) * C51009 +
            (C117 * C2004 + C51106 * C2012) * C118) *
               C51122 * C108) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C1119 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C1120 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C51122 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51009) *
                C51122 * C50977) *
               C1121) *
              C1831 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51122 * C50977) *
               C1120 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C1119 -
           (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
              C2449 * C511 + C2444 * C528) *
                 C51009 +
             (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
              C2449 * C498 + C2444 * C510) *
                 C118) *
                C51122 * C50977 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C51122 * C2447) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C293 -
            (C2689 + C2690 + C2691) * C299 - (C2692 + C2693 + C2694) * C294 +
            (C2695 + C2696 + C2697) * C300 + (C2698 + C2699 + C2700) * C295) *
               C51122 * C50977) *
              C50991 * C1831 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C299 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C293 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C298) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C294 -
            (C2451 * C4338 + C2446 * C4340 + C2450 * C3416 + C2445 * C3419 +
             C2449 * C1717 + C2444 * C1721) *
                C300 -
            (C2451 * C4341 + C2446 * C4344 + C2450 * C3420 + C2445 * C3425 +
             C2449 * C1722 + C2444 * C1729) *
                C295) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C299 -
            ((C2888 + C2887 + C2886) * C293 + (C2885 + C2884 + C2883) * C298) +
            (C3444 + C3445 + C3446) * C294 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C300 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C295) *
               C51122 * C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51009) *
               C51122 * C50977) *
              C50991 * C1997 -
          (((C2888 + C2887 + C2886) * C51009 + (C2885 + C2884 + C2883) * C118) *
               C51122 * C50977 +
           ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
             C2449 * C514 + C2444 * C530) *
                C51009 +
            (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
             C2449 * C500 + C2444 * C515) *
                C118) *
               C51122 * C2447) *
              C50991 * C1998 +
          (((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
             C2451 * C2846 + C2446 * C2849) *
                C118 +
            (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
             C2451 * C2850 + C2446 * C2855) *
                C51009) *
               C51122 * C2447 +
           ((C2889 + C2890 + C2891) * C118 + (C2892 + C2893 + C2894) * C51009) *
               C51122 * C50977) *
              C50991 * C1999 -
          (((C2451 * C4740 + C2446 * C4748 + C2450 * C4741 + C2445 * C4749 +
             C2449 * C2009 + C2444 * C2015) *
                C51009 +
            (C2451 * C4736 + C2446 * C4742 + C2450 * C4737 + C2445 * C4743 +
             C2449 * C2003 + C2444 * C2010) *
                C118) *
               C51122 * C50977 +
           ((C2451 * C4744 + C2446 * C4750 + C2450 * C4745 + C2445 * C4751 +
             C2449 * C2011 + C2444 * C2016) *
                C51009 +
            (C2451 * C4738 + C2446 * C4746 + C2450 * C4739 + C2445 * C4747 +
             C2449 * C2004 + C2444 * C2012) *
                C118) *
               C51122 * C2447) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C5336 +
             (C5715 + C5716) * C5337 + C5727 * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5682 * C5337 + C5683 * C5338) * C50977) *
               C1119 -
           ((C5684 * C5338 + C833 * C5337 + (C181 + C180) * C5336) * C50977 +
            (C5685 * C5338 + C5686 * C5337 + (C179 + C178) * C5336) * C2447) *
               C1120 +
           ((C188 * C5336 + C6036 * C5337 + C6037 * C5338) * C2447 +
            (C189 * C5336 + (C577 + C578) * C5337 + (C583 + C584) * C5338) *
                C50977) *
               C1121) *
              C1831 +
          (((C5682 * C5336 + C5683 * C5337 + C5728 * C5338) * C2447 +
            (C6036 * C5336 + C6037 * C5337 + (C5721 + C5722) * C5338) *
                C50977) *
               C1120 -
           ((C5729 * C5338 + C5685 * C5337 + C5686 * C5336) * C50977 +
            ((C5723 + C5724) * C5338 + (C5718 + C5717) * C5337 +
             (C5716 + C5715) * C5336) *
                C2447) *
               C1119 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C5338 +
             (C584 + C583) * C5337 + C832 * C5336) *
                C50977 +
            ((C5722 + C5721) * C5338 + C5684 * C5337 + C833 * C5336) * C2447) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C5336 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C5337 +
            (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C5338) *
               C2447 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C5336 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C5337 +
            (C5494 + C5495 - C5512 - C5513 + C5514 + C5515) * C5338) *
               C50977) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C5336 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C5337 +
            (C6705 * C299 - (C5711 * C293 + C5712 * C298) + C6706 * C294 -
             (C117 * C4738 + C51106 * C4746) * C300 -
             (C117 * C4744 + C51106 * C4750) * C295) *
                C5338) *
               C2447 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C5336 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C5337 +
            (C6266 * C299 - (C5708 * C293 + C5707 * C298) + C6267 * C294 -
             (C117 * C4736 + C51106 * C4742) * C300 -
             (C117 * C4740 + C51106 * C4748) * C295) *
                C5338) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C5336 +
            (C5715 + C5716) * C5337 + C5727 * C5338) *
               C2447 +
           ((C178 + C179) * C5336 + C5682 * C5337 + C5683 * C5338) * C50977) *
              C50991 * C1997 -
          ((C5729 * C5338 + C5685 * C5337 + C5686 * C5336) * C50977 +
           (C7653 * C5338 + (C5718 + C5717) * C5337 + (C5716 + C5715) * C5336) *
               C2447) *
              C50991 * C1998 +
          ((C5727 * C5336 + (C5724 + C5723) * C5337 + (C7660 + C7661) * C5338) *
               C2447 +
           (C5683 * C5336 + C5728 * C5337 + (C5725 + C5726) * C5338) * C50977) *
              C50991 * C1999 -
          ((((C117 * C7646 + C51106 * C7650) * C51009 +
             (C117 * C7644 + C51106 * C7647) * C118) *
                C5338 +
            (C5726 + C5725) * C5337 + C5729 * C5336) *
               C50977 +
           (((C117 * C7648 + C51106 * C7651) * C51009 +
             (C117 * C7645 + C51106 * C7649) * C118) *
                C5338 +
            (C7661 + C7660) * C5337 + C7653 * C5336) *
               C2447) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C51243 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C50996) *
              C51298 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51122 * C50977) *
               C50996 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C51243) *
              C51299 +
          ((((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
              C2451 * C2846 + C2446 * C2849) *
                 C118 +
             (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
              C2451 * C2850 + C2446 * C2855) *
                 C51009) *
                C51122 * C2447 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51122 * C50977) *
               C51243 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51122 * C50977 +
            ((C2894 + C2893 + C2892) * C51009 +
             (C2891 + C2890 + C2889) * C118) *
                C51122 * C2447) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C51243 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C50996) *
              C51298 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 + (C838 + C839) * C51122 * C111) *
               C50996 -
           (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C51243) *
              C51299 +
          ((((C117 * C501 + C51106 * C516) * C118 +
             (C117 * C517 + C51106 * C531) * C51009) *
                C51122 * C108 +
            (C579 + C580) * C51122 * C109 + (C581 + C582) * C51122 * C110 +
            (C583 + C584) * C51122 * C111) *
               C51243 -
           (((C117 * C524 + C51106 * C535) * C51009 +
             (C117 * C505 + C51106 * C525) * C118) *
                C51122 * C111 +
            (C584 + C583) * C51122 * C110 + (C582 + C581) * C51122 * C109 +
            (C580 + C579) * C51122 * C108) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C5336 +
             (C5715 + C5716) * C5337 + C5727 * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5682 * C5337 + C5683 * C5338) * C50977) *
               C51243 -
           ((C5684 * C5338 + C833 * C5337 + (C181 + C180) * C5336) * C50977 +
            (C5685 * C5338 + C5686 * C5337 + (C179 + C178) * C5336) * C2447) *
               C50996) *
              C51298 +
          (((C5682 * C5336 + C5683 * C5337 + C5728 * C5338) * C2447 +
            (C6036 * C5336 + C6037 * C5337 + (C5721 + C5722) * C5338) *
                C50977) *
               C50996 -
           ((C5729 * C5338 + C5685 * C5337 + C5686 * C5336) * C50977 +
            (C7653 * C5338 + (C5718 + C5717) * C5337 +
             (C5716 + C5715) * C5336) *
                C2447) *
               C51243) *
              C51299 +
          (((C5727 * C5336 + (C5724 + C5723) * C5337 +
             (C7660 + C7661) * C5338) *
                C2447 +
            (C5683 * C5336 + C5728 * C5337 + (C5725 + C5726) * C5338) *
                C50977) *
               C51243 -
           ((((C117 * C5668 + C51106 * C5672) * C51009 +
              (C117 * C5663 + C51106 * C5669) * C118) *
                 C5338 +
             (C5722 + C5721) * C5337 + C5684 * C5336) *
                C50977 +
            ((C5726 + C5725) * C5338 + C5729 * C5337 + C5685 * C5336) * C2447) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C51122 * C108 +
           (C342 + C343 - C384 - C385 + C386 + C387) * C51122 * C109 +
           (C352 + C353 - C388 - C389 + C390 + C391) * C51122 * C110 +
           (C362 + C363 - C392 - C393 + C394 + C395) * C51122 * C111) *
              C50991 * C1831 +
          (((C117 * C969 + C51106 * C974) * C299 -
            ((C117 * C514 + C51106 * C530) * C293 +
             (C117 * C500 + C51106 * C515) * C298) +
            (C117 * C975 + C51106 * C984) * C294 -
            (C117 * C1717 + C51106 * C1721) * C300 -
            (C117 * C1722 + C51106 * C1729) * C295) *
               C51122 * C108 +
           (C1008 * C299 - (C562 * C293 + C561 * C298) + C1009 * C294 -
            (C117 * C1718 + C51106 * C1723) * C300 -
            (C117 * C1724 + C51106 * C1730) * C295) *
               C51122 * C109 +
           (C1010 * C299 - (C564 * C293 + C563 * C298) + C1011 * C294 -
            (C117 * C1719 + C51106 * C1725) * C300 -
            (C117 * C1726 + C51106 * C1731) * C295) *
               C51122 * C110 +
           (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
            (C117 * C1720 + C51106 * C1727) * C300 -
            (C117 * C1728 + C51106 * C1732) * C295) *
               C51122 * C111) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C1119 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C1120 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
            (C186 + C187) * C51122 * C111) *
               C1121) *
              C1831 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 + (C838 + C839) * C51122 * C111) *
               C1120 -
           (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C1119 -
           (((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51122 * C111 +
            (C839 + C838) * C51122 * C110 + C836 * C109 + C837 * C108) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C1119 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C1120 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C51122 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51009) *
                C51122 * C50977) *
               C1121) *
              C1831 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51122 * C50977) *
               C1120 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C1119 -
           (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
              C2449 * C511 + C2444 * C528) *
                 C51009 +
             (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
              C2449 * C498 + C2444 * C510) *
                 C118) *
                C51122 * C50977 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C51122 * C2447) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C293 -
            (C2689 + C2690 + C2691) * C299 - (C2692 + C2693 + C2694) * C294 +
            (C2695 + C2696 + C2697) * C300 + (C2698 + C2699 + C2700) * C295) *
               C51122 * C50977) *
              C50991 * C1831 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C299 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C293 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C298) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C294 -
            (C2451 * C4338 + C2446 * C4340 + C2450 * C3416 + C2445 * C3419 +
             C2449 * C1717 + C2444 * C1721) *
                C300 -
            (C2451 * C4341 + C2446 * C4344 + C2450 * C3420 + C2445 * C3425 +
             C2449 * C1722 + C2444 * C1729) *
                C295) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C299 -
            ((C2888 + C2887 + C2886) * C293 + (C2885 + C2884 + C2883) * C298) +
            (C3444 + C3445 + C3446) * C294 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C300 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C295) *
               C51122 * C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C5336 +
             (C5715 + C5716) * C5337 + C5727 * C5338) *
                C2447 +
            ((C178 + C179) * C5336 + C5682 * C5337 + C5683 * C5338) * C50977) *
               C1119 -
           ((C5684 * C5338 + C833 * C5337 + (C181 + C180) * C5336) * C50977 +
            (C5685 * C5338 + C5686 * C5337 + (C179 + C178) * C5336) * C2447) *
               C1120 +
           ((C188 * C5336 + C6036 * C5337 + C6037 * C5338) * C2447 +
            (C189 * C5336 + (C577 + C578) * C5337 + (C583 + C584) * C5338) *
                C50977) *
               C1121) *
              C1831 +
          (((C5682 * C5336 + C5683 * C5337 + C5728 * C5338) * C2447 +
            (C6036 * C5336 + C6037 * C5337 + (C5721 + C5722) * C5338) *
                C50977) *
               C1120 -
           ((C5729 * C5338 + C5685 * C5337 + C5686 * C5336) * C50977 +
            ((C5723 + C5724) * C5338 + (C5718 + C5717) * C5337 +
             (C5716 + C5715) * C5336) *
                C2447) *
               C1119 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C5338 +
             (C584 + C583) * C5337 + C832 * C5336) *
                C50977 +
            ((C5722 + C5721) * C5338 + C5684 * C5337 + C833 * C5336) * C2447) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C5336 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C5337 +
            (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C5338) *
               C2447 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C5336 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C5337 +
            (C5494 + C5495 - C5512 - C5513 + C5514 + C5515) * C5338) *
               C50977) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C5336 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C5337 +
            (C6705 * C299 - (C5711 * C293 + C5712 * C298) + C6706 * C294 -
             (C117 * C4738 + C51106 * C4746) * C300 -
             (C117 * C4744 + C51106 * C4750) * C295) *
                C5338) *
               C2447 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C5336 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C5337 +
            (C6266 * C299 - (C5708 * C293 + C5707 * C298) + C6267 * C294 -
             (C117 * C4736 + C51106 * C4742) * C300 -
             (C117 * C4740 + C51106 * C4748) * C295) *
                C5338) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51265 +
            (C6236 + C6237 - C6268 - C6269) * C51186) *
               C51292 +
           ((C694 + C695 - C696 - C697) * C51265 + C6272 * C51186) * C51293 +
           C11579 * C8256) *
              C51294 +
          (((C696 - (C695 + C694) + C697) * C51265 + C6274 * C51186) * C51292 +
           ((C700 - (C699 + C698) + C701) * C51265 +
            (C1016 - (C998 + C999) + C1017) * C51186) *
               C51293 +
           ((C704 - (C703 + C702) + C705) * C51265 +
            (C1018 - (C1004 + C1005) + C1019) * C51186) *
               C8256) *
              C51295 +
          (C11579 * C51292 +
           (C721 * C51265 + (C1005 + C1004 - C1018 - C1019) * C51186) * C51293 +
           ((C709 + C708 - C718 - C719) * C51265 +
            (C834 * C687 + C835 * C51251 -
             (C117 * C973 + C51106 * C982) * C688 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51186) *
               C8256) *
              C686) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C51265 +
             (C6236 + C6237 - C6268 - C6269) * C51186) *
                C51292 +
            ((C694 + C695 - C696 - C697) * C51265 + C6272 * C51186) * C51293 +
            C11579 * C8256) *
               C296 +
           (((C696 - (C695 + C694) + C697) * C51265 + C6274 * C51186) * C51292 +
            ((C700 - (C699 + C698) + C701) * C51265 + C11926 * C51186) *
                C51293 +
            ((C704 - (C703 + C702) + C705) * C51265 +
             (C1018 - (C1004 + C1005) + C1019) * C51186) *
                C8256) *
               C50996) *
              C51252 +
          ((((C6268 - (C6237 + C6236) + C6269) * C51265 +
             (C6270 - (C6243 + C6242) + C6271) * C51186) *
                C51292 +
            (C6274 * C51265 + C6275 * C51186) * C51293 +
            (C11926 * C51265 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
                C8256) *
               C296 +
           ((C6272 * C51265 + C6273 * C51186) * C51292 +
            (C11577 * C51265 + (C5883 + C5882 - C5888 - C5889) * C51186) *
                C51293 +
            ((C1005 + C1004 - C1018 - C1019) * C51265 +
             (C571 * C687 + C572 * C51251 -
              (C117 * C1340 + C51106 * C1347) * C688 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C8256) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C51265 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C51292 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C51265 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C51293 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C51265 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C8256) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C51265 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51186) *
               C51292 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C51265 +
            (C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51186) *
               C51293 +
           ((C392 - (C363 + C362) + C393 - C394 - C395) * C51265 +
            (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
             (C117 * C1720 + C51106 * C1727) * C300 -
             (C117 * C1728 + C51106 * C1732) * C295) *
                C51186) *
               C8256) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51265 +
            (C5715 + C5716) * C51186) *
               C51292 +
           ((C178 + C179) * C51265 + C5682 * C51186) * C51293 +
           C11122 * C8256) *
              C112 -
          (C11123 * C8256 + (C833 * C51186 + (C181 + C180) * C51265) * C51293 +
           (C5686 * C51186 + (C179 + C178) * C51265) * C51292) *
              C113 +
          (C11122 * C51292 + (C189 * C51265 + (C577 + C578) * C51186) * C51293 +
           ((C185 + C184) * C51265 + (C838 + C839) * C51186) * C8256) *
              C114 -
          ((((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51186 +
            (C187 + C186) * C51265) *
               C8256 +
           ((C839 + C838) * C51186 + C190 * C51265) * C51293 +
           C11123 * C51292) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51265 +
             (C5715 + C5716) * C51186) *
                C51292 +
            ((C178 + C179) * C51265 + C5682 * C51186) * C51293 +
            C11122 * C8256) *
               C296 -
           (C11123 * C8256 + (C833 * C51186 + (C181 + C180) * C51265) * C51293 +
            (C5686 * C51186 + (C179 + C178) * C51265) * C51292) *
               C50996) *
              C493 +
          (((C5682 * C51265 + C5683 * C51186) * C51292 +
            (C6036 * C51265 + C6037 * C51186) * C51293 +
            ((C577 + C578) * C51265 + (C583 + C584) * C51186) * C8256) *
               C50996 -
           ((C5684 * C51186 + C833 * C51265) * C8256 +
            (C5685 * C51186 + C5686 * C51265) * C51293 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C51265) * C51292) *
               C296) *
              C494 +
          (((C5727 * C51265 + (C5724 + C5723) * C51186) * C51292 +
            (C5683 * C51265 + C5728 * C51186) * C51293 +
            (C6037 * C51265 + (C5721 + C5722) * C51186) * C8256) *
               C296 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C51186 +
             (C584 + C583) * C51265) *
                C8256 +
            ((C5722 + C5721) * C51186 + C5684 * C51265) * C51293 +
            (C5729 * C51186 + C5685 * C51265) * C51292) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51265 +
             (C5715 + C5716) * C51186) *
                C51292 +
            ((C178 + C179) * C51265 + C5682 * C51186) * C51293 +
            C11122 * C8256) *
               C51294 -
           (C11123 * C8256 + (C833 * C51186 + (C181 + C180) * C51265) * C51293 +
            (C5686 * C51186 + (C179 + C178) * C51265) * C51292) *
               C51295 +
           (C11122 * C51292 + (C189 * C51265 + C11726 * C51186) * C51293 +
            ((C185 + C184) * C51265 + (C838 + C839) * C51186) * C8256) *
               C686) *
              C51252 +
          (((C5682 * C51265 + C5683 * C51186) * C51292 +
            (C6036 * C51265 + C6037 * C51186) * C51293 +
            (C11726 * C51265 + (C583 + C584) * C51186) * C8256) *
               C51295 -
           (C11729 * C8256 + (C5685 * C51186 + C5686 * C51265) * C51293 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C51265) * C51292) *
               C51294 -
           ((((C117 * C524 + C51106 * C535) * C51009 +
              (C117 * C505 + C51106 * C525) * C118) *
                 C51186 +
             (C839 + C838) * C51265) *
                C8256 +
            ((C584 + C583) * C51186 + C832 * C51265) * C51293 +
            C11729 * C51292) *
               C686) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51265 +
            (C5715 + C5716) * C51186) *
               C51292 +
           ((C178 + C179) * C51265 + C5682 * C51186) * C51293 +
           C11122 * C8256) *
              C112 -
          (C11123 * C8256 + (C833 * C51186 + (C181 + C180) * C51265) * C51293 +
           (C5686 * C51186 + (C179 + C178) * C51265) * C51292) *
              C113 +
          (C11122 * C51292 + (C189 * C51265 + (C577 + C578) * C51186) * C51293 +
           ((C185 + C184) * C51265 + (C838 + C839) * C51186) * C8256) *
              C114 -
          ((((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51186 +
            (C187 + C186) * C51265) *
               C8256 +
           ((C839 + C838) * C51186 + C190 * C51265) * C51293 +
           C11123 * C51292) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C51265 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C51292 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C51265 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C51293 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C51265 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C8256) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C51265 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51186) *
               C51292 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C51265 +
            (C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51186) *
               C51293 +
           ((C392 - (C363 + C362) + C393 - C394 - C395) * C51265 +
            (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
             (C117 * C1720 + C51106 * C1727) * C300 -
             (C117 * C1728 + C51106 * C1732) * C295) *
                C51186) *
               C8256) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C51265 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C51186) *
               C51292 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C51265 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C51186) *
               C51293 +
           ((C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C51265 +
            (C12469 + C12470 - C12471 - C12472 + C12473 + C12474) * C51186) *
               C8256) *
              C51243 +
          (((C1462 - (C1461 + C1460) + C1463 - C1464 - C1465) * C51265 +
            (C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C51186) *
               C51292 +
           ((C1468 - (C1467 + C1466) + C1469 - C1470 - C1471) * C51265 +
            (C12471 - (C12470 + C12469) + C12472 - C12473 - C12474) * C51186) *
               C51293 +
           ((C1474 - (C1473 + C1472) + C1475 - C1476 - C1477) * C51265 +
            (C1012 * C1457 - (C566 * C51296 + C565 * C1456) + C1013 * C51297 -
             (C117 * C1720 + C51106 * C1727) * C1458 -
             (C117 * C1728 + C51106 * C1732) * C1453) *
                C51186) *
               C8256) *
              C50996) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C51265 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C51186) *
               C51292 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C51265 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C51186) *
               C51293 +
           ((C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C51265 +
            (C12469 + C12470 - C12471 - C12472 + C12473 + C12474) * C51186) *
               C8256) *
              C50991 * C51252 +
          (((C7221 - (C7220 + C7219) + C7222 - C7239 - C7240) * C51265 +
            (C7229 - (C7228 + C7227) + C7230 - C7241 - C7242) * C51186) *
               C51292 +
           ((C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C51265 +
            (C6866 - (C6865 + C6864) + C6867 - C6868 - C6869) * C51186) *
               C51293 +
           ((C12471 - (C12470 + C12469) + C12472 - C12473 - C12474) * C51265 +
            (C5886 * C1457 - (C570 * C51296 + C569 * C1456) + C5887 * C51297 -
             (C117 * C2848 + C51106 * C2854) * C1458 -
             (C117 * C2853 + C51106 * C2857) * C1453) *
                C51186) *
               C8256) *
              C50991 * C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C51265 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            C7235 * C1221 + C7236 * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C51186) *
              C51292 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C51265 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C51186) *
              C51293 +
          ((C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
            C378 * C1221 + C379 * C1216 -
            (C117 * C1225 + C51106 * C1231) * C1222 -
            (C117 * C1232 + C51106 * C1237) * C1217) *
               C51265 +
           (C563 * C1219 + C564 * C1214 - C1010 * C1220 - C1011 * C1215 +
            C11278 * C1221 + C11279 * C1216 -
            (C117 * C3418 + C51106 * C3423) * C1222 -
            (C117 * C3424 + C51106 * C3427) * C1217) *
               C51186) *
              C8256) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51265 +
            (C6684 + C6685 - C6686 - C6687) * C51186) *
               C51292 +
           ((C1125 + C1126 - C1127 - C1128) * C51265 + C7070 * C51186) *
               C51293 +
           C12078 * C8256) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C51265 + C7071 * C51186) *
               C51292 +
           ((C1131 - (C1130 + C1129) + C1132) * C51265 +
            (C1612 - (C1613 + C1614) + C1615) * C51186) *
               C51293 +
           ((C1135 - (C1134 + C1133) + C1136) * C51265 +
            (C1616 - (C1617 + C1618) + C1619) * C51186) *
               C8256) *
              C1120 +
          (C12078 * C51292 +
           (C1146 * C51265 + (C1618 + C1617 - C1616 - C1619) * C51186) *
               C51293 +
           ((C1139 + C1138 - C1137 - C1140) * C51265 +
            (C834 * C1122 + C835 * C1117 -
             (C117 * C973 + C51106 * C982) * C1123 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51186) *
               C8256) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51265 +
            (C6684 + C6685 - C6686 - C6687) * C51186) *
               C51292 +
           ((C1125 + C1126 - C1127 - C1128) * C51265 + C7070 * C51186) *
               C51293 +
           C12078 * C8256) *
              C50991 * C493 +
          (((C6686 - (C6685 + C6684) + C6687) * C51265 +
            (C6690 - (C6689 + C6688) + C6691) * C51186) *
               C51292 +
           (C7071 * C51265 + C7072 * C51186) * C51293 +
           ((C1612 - (C1613 + C1614) + C1615) * C51265 +
            (C6428 - (C6429 + C6430) + C6431) * C51186) *
               C8256) *
              C50991 * C494 +
          ((C6711 * C51265 + (C6696 + C6695 - C6709 - C6710) * C51186) *
               C51292 +
           (C6708 * C51265 + (C6701 + C6700 - C6699 - C6702) * C51186) *
               C51293 +
           ((C6430 + C6429 - C6428 - C6431) * C51265 +
            (C5709 * C1122 + C5710 * C1117 -
             (C117 * C6231 + C51106 * C6232) * C1123 -
             (C117 * C6233 + C51106 * C6234) * C51061) *
                C51186) *
               C8256) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C1122 +
              (C117 * C127 + C51106 * C140) * C1117 -
              (C117 * C301 + C51106 * C311) * C1123 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C51265 +
             (C6684 + C6685 - C6686 - C6687) * C51186) *
                C51292 +
            ((C1125 + C1126 - C1127 - C1128) * C51265 + C7070 * C51186) *
                C51293 +
            C12078 * C8256) *
               C51243 +
           (((C1127 - (C1126 + C1125) + C1128) * C51265 + C7071 * C51186) *
                C51292 +
            ((C1131 - (C1130 + C1129) + C1132) * C51265 + C12671 * C51186) *
                C51293 +
            ((C1135 - (C1134 + C1133) + C1136) * C51265 +
             (C1616 - (C1617 + C1618) + C1619) * C51186) *
                C8256) *
               C50996) *
              C51252 +
          ((((C6686 - (C6685 + C6684) + C6687) * C51265 +
             (C6690 - (C6689 + C6688) + C6691) * C51186) *
                C51292 +
            (C7071 * C51265 + C7072 * C51186) * C51293 +
            (C12671 * C51265 + (C6428 - (C6429 + C6430) + C6431) * C51186) *
                C8256) *
               C51243 +
           ((C7070 * C51265 + C6708 * C51186) * C51292 +
            (C12076 * C51265 + (C6430 + C6429 - C6428 - C6431) * C51186) *
                C51293 +
            ((C1618 + C1617 - C1616 - C1619) * C51265 +
             (C571 * C1122 + C572 * C1117 -
              (C117 * C1340 + C51106 * C1347) * C1123 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C8256) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51265 +
            (C6684 + C6685 - C6686 - C6687) * C51186) *
               C51292 +
           ((C1125 + C1126 - C1127 - C1128) * C51265 + C7070 * C51186) *
               C51293 +
           C12078 * C8256) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C51265 + C7071 * C51186) *
               C51292 +
           ((C1131 - (C1130 + C1129) + C1132) * C51265 +
            (C1612 - (C1613 + C1614) + C1615) * C51186) *
               C51293 +
           ((C1135 - (C1134 + C1133) + C1136) * C51265 +
            (C1616 - (C1617 + C1618) + C1619) * C51186) *
               C8256) *
              C1120 +
          (C12078 * C51292 +
           (C1146 * C51265 + (C1618 + C1617 - C1616 - C1619) * C51186) *
               C51293 +
           ((C1139 + C1138 - C1137 - C1140) * C51265 +
            (C834 * C1122 + C835 * C1117 -
             (C117 * C973 + C51106 * C982) * C1123 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51186) *
               C8256) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C51265 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            C7235 * C1221 + C7236 * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C51186) *
              C51292 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C51265 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C51186) *
              C51293 +
          ((C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
            C378 * C1221 + C379 * C1216 -
            (C117 * C1225 + C51106 * C1231) * C1222 -
            (C117 * C1232 + C51106 * C1237) * C1217) *
               C51265 +
           (C563 * C1219 + C564 * C1214 - C1010 * C1220 - C1011 * C1215 +
            C11278 * C1221 + C11279 * C1216 -
            (C117 * C3418 + C51106 * C3423) * C1222 -
            (C117 * C3424 + C51106 * C3427) * C1217) *
               C51186) *
              C8256) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C51265 +
             (C6236 + C6237 - C6268 - C6269) * C51186) *
                C51292 +
            ((C694 + C695 - C696 - C697) * C51265 + C6272 * C51186) * C51293 +
            C11579 * C8256) *
               C51243 +
           (((C696 - (C695 + C694) + C697) * C51265 + C6274 * C51186) * C51292 +
            ((C700 - (C699 + C698) + C701) * C51265 + C11926 * C51186) *
                C51293 +
            ((C704 - (C703 + C702) + C705) * C51265 +
             (C1018 - (C1004 + C1005) + C1019) * C51186) *
                C8256) *
               C50996) *
              C1831 +
          ((((C6268 - (C6237 + C6236) + C6269) * C51265 +
             (C6270 - (C6243 + C6242) + C6271) * C51186) *
                C51292 +
            (C6274 * C51265 + C6275 * C51186) * C51293 +
            (C11926 * C51265 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
                C8256) *
               C51243 +
           ((C6272 * C51265 + C6273 * C51186) * C51292 +
            (C11577 * C51265 + (C5883 + C5882 - C5888 - C5889) * C51186) *
                C51293 +
            ((C1005 + C1004 - C1018 - C1019) * C51265 +
             (C571 * C687 + C572 * C51251 -
              (C117 * C1340 + C51106 * C1347) * C688 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C8256) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51265 +
            (C6236 + C6237 - C6268 - C6269) * C51186) *
               C51292 +
           ((C694 + C695 - C696 - C697) * C51265 + C6272 * C51186) * C51293 +
           C11579 * C8256) *
              C50991 * C51298 +
          (((C6268 - (C6237 + C6236) + C6269) * C51265 +
            (C6270 - (C6243 + C6242) + C6271) * C51186) *
               C51292 +
           (C6274 * C51265 + C6275 * C51186) * C51293 +
           (C11926 * C51265 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
               C8256) *
              C50991 * C51299 +
          ((C8154 * C51265 + (C8151 + C8150 - C8149 - C8152) * C51186) *
               C51292 +
           (C6273 * C51265 + (C6255 + C6254 - C6276 - C6277) * C51186) *
               C51293 +
           ((C5883 + C5882 - C5888 - C5889) * C51265 +
            (C5709 * C687 + C5710 * C51251 -
             (C117 * C6231 + C51106 * C6232) * C688 -
             (C117 * C6233 + C51106 * C6234) * C51061) *
                C51186) *
               C8256) *
              C50991 * C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C51265 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C51292 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C51265 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C51293 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C51265 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C8256) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C51265 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C51186) *
               C51292 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51265 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C51186) *
               C51293 +
           ((C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51265 +
            (C5886 * C299 - (C570 * C293 + C569 * C298) + C5887 * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C51186) *
               C8256) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51265 +
             (C5715 + C5716) * C51186) *
                C51292 +
            ((C178 + C179) * C51265 + C5682 * C51186) * C51293 +
            C11122 * C8256) *
               C1119 -
           (C11123 * C8256 + (C833 * C51186 + (C181 + C180) * C51265) * C51293 +
            (C5686 * C51186 + (C179 + C178) * C51265) * C51292) *
               C1120 +
           (C11122 * C51292 + (C189 * C51265 + C11726 * C51186) * C51293 +
            ((C185 + C184) * C51265 + (C838 + C839) * C51186) * C8256) *
               C1121) *
              C1831 +
          (((C5682 * C51265 + C5683 * C51186) * C51292 +
            (C6036 * C51265 + C6037 * C51186) * C51293 +
            (C11726 * C51265 + (C583 + C584) * C51186) * C8256) *
               C1120 -
           (C11729 * C8256 + (C5685 * C51186 + C5686 * C51265) * C51293 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C51265) * C51292) *
               C1119 -
           ((((C117 * C524 + C51106 * C535) * C51009 +
              (C117 * C505 + C51106 * C525) * C118) *
                 C51186 +
             (C839 + C838) * C51265) *
                C8256 +
            ((C584 + C583) * C51186 + C832 * C51265) * C51293 +
            C11729 * C51292) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51265 +
            (C5715 + C5716) * C51186) *
               C51292 +
           ((C178 + C179) * C51265 + C5682 * C51186) * C51293 +
           C11122 * C8256) *
              C50991 * C1997 -
          (C11729 * C8256 + (C5685 * C51186 + C5686 * C51265) * C51293 +
           ((C5718 + C5717) * C51186 + (C5716 + C5715) * C51265) * C51292) *
              C50991 * C1998 +
          ((C5727 * C51265 + (C5724 + C5723) * C51186) * C51292 +
           (C5683 * C51265 + C5728 * C51186) * C51293 +
           (C6037 * C51265 + (C5721 + C5722) * C51186) * C8256) *
              C50991 * C1999 -
          ((((C117 * C5668 + C51106 * C5672) * C51009 +
             (C117 * C5663 + C51106 * C5669) * C118) *
                C51186 +
            (C5722 + C5721) * C51265) *
               C8256 +
           ((C5726 + C5725) * C51186 + C5729 * C51265) * C51293 +
           ((C7661 + C7660) * C51186 + C7653 * C51265) * C51292) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51265 +
             (C5715 + C5716) * C51186) *
                C51292 +
            ((C178 + C179) * C51265 + C5682 * C51186) * C51293 +
            C11122 * C8256) *
               C51243 -
           (C11123 * C8256 + (C833 * C51186 + (C181 + C180) * C51265) * C51293 +
            (C5686 * C51186 + (C179 + C178) * C51265) * C51292) *
               C50996) *
              C51298 +
          (((C5682 * C51265 + C5683 * C51186) * C51292 +
            (C6036 * C51265 + C6037 * C51186) * C51293 +
            (C11726 * C51265 + (C583 + C584) * C51186) * C8256) *
               C50996 -
           (C11729 * C8256 + (C5685 * C51186 + C5686 * C51265) * C51293 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C51265) * C51292) *
               C51243) *
              C51299 +
          (((C5727 * C51265 + (C5724 + C5723) * C51186) * C51292 +
            (C5683 * C51265 + C5728 * C51186) * C51293 +
            (C6037 * C51265 + (C5721 + C5722) * C51186) * C8256) *
               C51243 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C51186 +
             (C584 + C583) * C51265) *
                C8256 +
            ((C5722 + C5721) * C51186 + C5684 * C51265) * C51293 +
            (C5729 * C51186 + C5685 * C51265) * C51292) *
               C50996) *
              C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51265 +
             (C5715 + C5716) * C51186) *
                C51292 +
            ((C178 + C179) * C51265 + C5682 * C51186) * C51293 +
            C11122 * C8256) *
               C1119 -
           (C11123 * C8256 + (C833 * C51186 + (C181 + C180) * C51265) * C51293 +
            (C5686 * C51186 + (C179 + C178) * C51265) * C51292) *
               C1120 +
           (C11122 * C51292 + (C189 * C51265 + C11726 * C51186) * C51293 +
            ((C185 + C184) * C51265 + (C838 + C839) * C51186) * C8256) *
               C1121) *
              C1831 +
          (((C5682 * C51265 + C5683 * C51186) * C51292 +
            (C6036 * C51265 + C6037 * C51186) * C51293 +
            (C11726 * C51265 + (C583 + C584) * C51186) * C8256) *
               C1120 -
           (C11729 * C8256 + (C5685 * C51186 + C5686 * C51265) * C51293 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C51265) * C51292) *
               C1119 -
           ((((C117 * C524 + C51106 * C535) * C51009 +
              (C117 * C505 + C51106 * C525) * C118) *
                 C51186 +
             (C839 + C838) * C51265) *
                C8256 +
            ((C584 + C583) * C51186 + C832 * C51265) * C51293 +
            C11729 * C51292) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C51265 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C51292 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C51265 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C51293 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C51265 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C8256) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C51265 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C51186) *
               C51292 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51265 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C51186) *
               C51293 +
           ((C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51265 +
            (C5886 * C299 - (C570 * C293 + C569 * C298) + C5887 * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C51186) *
               C8256) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C687 +
            (C117 * C127 + C51106 * C140) * C51251 -
            (C117 * C301 + C51106 * C311) * C688 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C694 + C695 - C696 - C697) * C51122 * C109 + C722 * C110 +
           C723 * C111) *
              C51294 +
          ((C696 - (C695 + C694) + C697) * C51122 * C108 +
           (C700 - (C699 + C698) + C701) * C51122 * C109 +
           (C704 - (C703 + C702) + C705) * C51122 * C110 +
           (C718 - (C708 + C709) + C719) * C51122 * C111) *
              C51295 +
          (C722 * C108 + C723 * C109 +
           (C709 + C708 - C718 - C719) * C51122 * C110 +
           (C176 * C687 + C177 * C51251 - (C117 * C689 + C51106 * C690) * C688 -
            (C117 * C691 + C51106 * C692) * C51061) *
               C51122 * C111) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C687 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51251 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C688 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C687 + (C2492 + C2493 + C2494) * C51251 -
            (C2689 + C2690 + C2691) * C688 - (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C51294 +
          (((C2691 + C2690 + C2689) * C688 -
            ((C2494 + C2493 + C2492) * C51251 +
             (C2491 + C2490 + C2489) * C687) +
            (C2694 + C2693 + C2692) * C51061) *
               C51122 * C2447 +
           ((C3053 + C3054 + C3055) * C688 -
            ((C2495 + C2496 + C2497) * C51251 +
             (C2498 + C2499 + C2500) * C687) +
            (C3056 + C3057 + C3058) * C51061) *
               C51122 * C50977) *
              C51295 +
          (((C2500 + C2499 + C2498) * C687 + (C2497 + C2496 + C2495) * C51251 -
            (C3055 + C3054 + C3053) * C688 - (C3058 + C3057 + C3056) * C51061) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C687 + (C2504 + C2505 + C2506) * C51251 -
            (C2451 * C1226 + C2446 * C1233 + C2450 * C308 + C2445 * C325 +
             C2449 * C307 + C2444 * C323) *
                C688 -
            (C2451 * C1234 + C2446 * C1238 + C2450 * C326 + C2445 * C338 +
             C2449 * C324 + C2444 * C337) *
                C51061) *
               C51122 * C50977) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51122 * C108 +
            (C694 + C695 - C696 - C697) * C51122 * C109 + C722 * C110 +
            C723 * C111) *
               C296 +
           ((C696 - (C695 + C694) + C697) * C51122 * C108 +
            (C700 - (C699 + C698) + C701) * C51122 * C109 +
            (C704 - (C703 + C702) + C705) * C51122 * C110 +
            (C718 - (C708 + C709) + C719) * C51122 * C111) *
               C50996) *
              C51252 +
          ((((C117 * C969 + C51106 * C974) * C688 -
             ((C117 * C514 + C51106 * C530) * C51251 +
              (C117 * C500 + C51106 * C515) * C687) +
             (C117 * C975 + C51106 * C984) * C51061) *
                C51122 * C108 +
            (C1014 - (C992 + C993) + C1015) * C51122 * C109 +
            (C1016 - (C998 + C999) + C1017) * C51122 * C110 +
            (C1018 - (C1004 + C1005) + C1019) * C51122 * C111) *
               C296 +
           ((C993 + C992 - C1014 - C1015) * C51122 * C108 +
            (C999 + C998 - C1016 - C1017) * C51122 * C109 +
            (C1005 + C1004 - C1018 - C1019) * C51122 * C110 +
            (C834 * C687 + C835 * C51251 -
             (C117 * C973 + C51106 * C982) * C688 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51122 * C111) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C687 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51251 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C688 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C687 + (C2492 + C2493 + C2494) * C51251 -
             (C2689 + C2690 + C2691) * C688 -
             (C2692 + C2693 + C2694) * C51061) *
                C51122 * C50977) *
               C296 +
           (((C2691 + C2690 + C2689) * C688 -
             ((C2494 + C2493 + C2492) * C51251 +
              (C2491 + C2490 + C2489) * C687) +
             (C2694 + C2693 + C2692) * C51061) *
                C51122 * C2447 +
            ((C3053 + C3054 + C3055) * C688 -
             ((C2495 + C2496 + C2497) * C51251 +
              (C2498 + C2499 + C2500) * C687) +
             (C3056 + C3057 + C3058) * C51061) *
                C51122 * C50977) *
               C50996) *
              C51252 +
          ((((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
              C2451 * C3416 + C2446 * C3419) *
                 C688 -
             ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
               C2449 * C514 + C2444 * C530) *
                  C51251 +
              (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
               C2449 * C500 + C2444 * C515) *
                  C687) +
             (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
              C2451 * C3420 + C2446 * C3425) *
                 C51061) *
                C51122 * C2447 +
            ((C3441 + C3442 + C3443) * C688 -
             ((C2888 + C2887 + C2886) * C51251 +
              (C2885 + C2884 + C2883) * C687) +
             (C3444 + C3445 + C3446) * C51061) *
                C51122 * C50977) *
               C296 +
           (((C2883 + C2884 + C2885) * C687 + (C2886 + C2887 + C2888) * C51251 -
             (C3443 + C3442 + C3441) * C688 -
             (C3446 + C3445 + C3444) * C51061) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C687 + (C3220 + C3221 + C3222) * C51251 -
             (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
              C2449 * C971 + C2444 * C978) *
                 C688 -
             (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
              C2449 * C979 + C2444 * C986) *
                 C51061) *
                C51122 * C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C51122 * C108 +
           (C342 + C343 - C384 - C385 + C386 + C387) * C51122 * C109 +
           (C352 + C353 - C388 - C389 + C390 + C391) * C51122 * C110 +
           (C362 + C363 - C392 - C393 + C394 + C395) * C51122 * C111) *
              C296 +
          ((C384 - (C343 + C342) + C385 - C386 - C387) * C51122 * C108 +
           (C388 - (C353 + C352) + C389 - C390 - C391) * C51122 * C109 +
           (C392 - (C363 + C362) + C393 - C394 - C395) * C51122 * C110 +
           ((C117 * C309 + C51106 * C327) * C299 - (C174 * C293 + C175 * C298) +
            (C117 * C328 + C51106 * C339) * C294 -
            (C117 * C310 + C51106 * C329) * C300 -
            (C117 * C330 + C51106 * C340) * C295) *
               C51122 * C111) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C118 +
            (C117 * C127 + C51106 * C140) * C51009) *
               C51122 * C108 +
           (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
              C112 -
          (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
           (C179 + C178) * C51122 * C108) *
              C113 +
          (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
           (C186 + C187) * C51122 * C111) *
              C114 -
          (((C117 * C138 + C51106 * C146) * C51009 +
            (C117 * C125 + C51106 * C139) * C118) *
               C51122 * C111 +
           (C187 + C186) * C51122 * C110 + C194 * C109 + C195 * C108) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C296 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C50996) *
              C493 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 +
            ((C117 * C499 + C51106 * C512) * C118 +
             (C117 * C513 + C51106 * C529) * C51009) *
                C51122 * C111) *
               C50996 -
           ((C578 + C577) * C51122 * C111 + (C576 + C575) * C51122 * C110 +
            (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C296) *
              C494 +
          ((((C117 * C501 + C51106 * C516) * C118 +
             (C117 * C517 + C51106 * C531) * C51009) *
                C51122 * C108 +
            (C579 + C580) * C51122 * C109 + (C581 + C582) * C51122 * C110 +
            (C583 + C584) * C51122 * C111) *
               C296 -
           (((C117 * C524 + C51106 * C535) * C51009 +
             (C117 * C505 + C51106 * C525) * C118) *
                C51122 * C111 +
            (C584 + C583) * C51122 * C110 + (C582 + C581) * C51122 * C109 +
            (C580 + C579) * C51122 * C108) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51009) *
               C51122 * C50977) *
              C112 -
          (((C2495 + C2496 + C2497) * C51009 + (C2498 + C2499 + C2500) * C118) *
               C51122 * C50977 +
           ((C2494 + C2493 + C2492) * C51009 + (C2491 + C2490 + C2489) * C118) *
               C51122 * C2447) *
              C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51009) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C118 + (C2504 + C2505 + C2506) * C51009) *
               C51122 * C50977) *
              C114 -
          (((C2451 * C330 + C2446 * C340 + C2450 * C328 + C2445 * C339 +
             C2449 * C134 + C2444 * C144) *
                C51009 +
            (C2451 * C310 + C2446 * C329 + C2450 * C309 + C2445 * C327 +
             C2449 * C123 + C2444 * C135) *
                C118) *
               C51122 * C50977 +
           ((C2506 + C2505 + C2504) * C51009 + (C2503 + C2502 + C2501) * C118) *
               C51122 * C2447) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C293 -
            (C2689 + C2690 + C2691) * C299 - (C2692 + C2693 + C2694) * C294 +
            (C2695 + C2696 + C2697) * C300 + (C2698 + C2699 + C2700) * C295) *
               C51122 * C50977) *
              C296 +
          (((C2691 + C2690 + C2689) * C299 -
            ((C2494 + C2493 + C2492) * C293 + (C2491 + C2490 + C2489) * C298) +
            (C2694 + C2693 + C2692) * C294 - (C2697 + C2696 + C2695) * C300 -
            (C2700 + C2699 + C2698) * C295) *
               C51122 * C2447 +
           ((C2449 * C305 + C2444 * C319 + C2450 * C306 + C2445 * C321 +
             C2451 * C1225 + C2446 * C1231) *
                C299 -
            ((C2495 + C2496 + C2497) * C293 + (C2498 + C2499 + C2500) * C298) +
            (C2449 * C320 + C2444 * C335 + C2450 * C322 + C2445 * C336 +
             C2451 * C1232 + C2446 * C1237) *
                C294 -
            (C2451 * C2654 + C2446 * C2659 + C2450 * C1225 + C2445 * C1231 +
             C2449 * C306 + C2444 * C321) *
                C300 -
            (C2451 * C2660 + C2446 * C2663 + C2450 * C1232 + C2445 * C1237 +
             C2449 * C322 + C2444 * C336) *
                C295) *
               C51122 * C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C296 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C50996) *
              C493 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C2449 * C497 + C2444 * C508 + C2450 * C971 + C2445 * C978 +
              C2451 * C1719 + C2446 * C1725) *
                 C118 +
             (C2449 * C509 + C2444 * C527 + C2450 * C979 + C2445 * C986 +
              C2451 * C1726 + C2446 * C1731) *
                 C51009) *
                C51122 * C50977) *
               C50996 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C296) *
              C494 +
          ((((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
              C2451 * C2846 + C2446 * C2849) *
                 C118 +
             (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
              C2451 * C2850 + C2446 * C2855) *
                 C51009) *
                C51122 * C2447 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51122 * C50977) *
               C296 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51122 * C50977 +
            ((C2894 + C2893 + C2892) * C51009 +
             (C2891 + C2890 + C2889) * C118) *
                C51122 * C2447) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C51294 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C51295 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
            (C186 + C187) * C51122 * C111) *
               C686) *
              C51252 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 + (C838 + C839) * C51122 * C111) *
               C51295 -
           (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C51294 -
           (((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51122 * C111 +
            (C839 + C838) * C51122 * C110 + C836 * C109 + C837 * C108) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C51294 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C51295 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C51122 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51009) *
                C51122 * C50977) *
               C686) *
              C51252 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51122 * C50977) *
               C51295 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C51294 -
           (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
              C2449 * C511 + C2444 * C528) *
                 C51009 +
             (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
              C2449 * C498 + C2444 * C510) *
                 C118) *
                C51122 * C50977 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C51122 * C2447) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C118 +
            (C117 * C127 + C51106 * C140) * C51009) *
               C51122 * C108 +
           (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
              C112 -
          (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
           (C179 + C178) * C51122 * C108) *
              C113 +
          (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
           (C186 + C187) * C51122 * C111) *
              C114 -
          (((C117 * C138 + C51106 * C146) * C51009 +
            (C117 * C125 + C51106 * C139) * C118) *
               C51122 * C111 +
           (C187 + C186) * C51122 * C110 + C194 * C109 + C195 * C108) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C51122 * C108 +
           (C342 + C343 - C384 - C385 + C386 + C387) * C51122 * C109 +
           (C352 + C353 - C388 - C389 + C390 + C391) * C51122 * C110 +
           (C362 + C363 - C392 - C393 + C394 + C395) * C51122 * C111) *
              C296 +
          ((C384 - (C343 + C342) + C385 - C386 - C387) * C51122 * C108 +
           (C388 - (C353 + C352) + C389 - C390 - C391) * C51122 * C109 +
           (C392 - (C363 + C362) + C393 - C394 - C395) * C51122 * C110 +
           ((C117 * C309 + C51106 * C327) * C299 - (C174 * C293 + C175 * C298) +
            (C117 * C328 + C51106 * C339) * C294 -
            (C117 * C310 + C51106 * C329) * C300 -
            (C117 * C330 + C51106 * C340) * C295) *
               C51122 * C111) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51009) *
               C51122 * C50977) *
              C112 -
          (((C2495 + C2496 + C2497) * C51009 + (C2498 + C2499 + C2500) * C118) *
               C51122 * C50977 +
           ((C2494 + C2493 + C2492) * C51009 + (C2491 + C2490 + C2489) * C118) *
               C51122 * C2447) *
              C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51009) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C118 + (C2504 + C2505 + C2506) * C51009) *
               C51122 * C50977) *
              C114 -
          (((C2451 * C330 + C2446 * C340 + C2450 * C328 + C2445 * C339 +
             C2449 * C134 + C2444 * C144) *
                C51009 +
            (C2451 * C310 + C2446 * C329 + C2450 * C309 + C2445 * C327 +
             C2449 * C123 + C2444 * C135) *
                C118) *
               C51122 * C50977 +
           ((C2506 + C2505 + C2504) * C51009 + (C2503 + C2502 + C2501) * C118) *
               C51122 * C2447) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C293 -
            (C2689 + C2690 + C2691) * C299 - (C2692 + C2693 + C2694) * C294 +
            (C2695 + C2696 + C2697) * C300 + (C2698 + C2699 + C2700) * C295) *
               C51122 * C50977) *
              C296 +
          (((C2691 + C2690 + C2689) * C299 -
            ((C2494 + C2493 + C2492) * C293 + (C2491 + C2490 + C2489) * C298) +
            (C2694 + C2693 + C2692) * C294 - (C2697 + C2696 + C2695) * C300 -
            (C2700 + C2699 + C2698) * C295) *
               C51122 * C2447 +
           ((C2449 * C305 + C2444 * C319 + C2450 * C306 + C2445 * C321 +
             C2451 * C1225 + C2446 * C1231) *
                C299 -
            ((C2495 + C2496 + C2497) * C293 + (C2498 + C2499 + C2500) * C298) +
            (C2449 * C320 + C2444 * C335 + C2450 * C322 + C2445 * C336 +
             C2451 * C1232 + C2446 * C1237) *
                C294 -
            (C2451 * C2654 + C2446 * C2659 + C2450 * C1225 + C2445 * C1231 +
             C2449 * C306 + C2444 * C321) *
                C300 -
            (C2451 * C2660 + C2446 * C2663 + C2450 * C1232 + C2445 * C1237 +
             C2449 * C322 + C2444 * C336) *
                C295) *
               C51122 * C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1456 +
            (C117 * C127 + C51106 * C140) * C51296 -
            (C117 * C301 + C51106 * C311) * C1457 -
            (C117 * C312 + C51106 * C331) * C51297 +
            (C117 * C302 + C51106 * C313) * C1458 +
            (C117 * C314 + C51106 * C332) * C1453) *
               C51122 * C108 +
           (C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C51122 * C109 +
           (C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C51122 * C110 +
           (C1472 + C1473 - C1474 - C1475 + C1476 + C1477) * C51122 * C111) *
              C51243 +
          ((C1462 - (C1461 + C1460) + C1463 - C1464 - C1465) * C51122 * C108 +
           (C1468 - (C1467 + C1466) + C1469 - C1470 - C1471) * C51122 * C109 +
           (C1474 - (C1473 + C1472) + C1475 - C1476 - C1477) * C51122 * C110 +
           (C714 * C1457 - (C174 * C51296 + C175 * C1456) + C715 * C51297 -
            (C117 * C310 + C51106 * C329) * C1458 -
            (C117 * C330 + C51106 * C340) * C1453) *
               C51122 * C111) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1456 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51296 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1457 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51297 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C1458 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C1453) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1456 + (C2492 + C2493 + C2494) * C51296 -
            (C2689 + C2690 + C2691) * C1457 - (C2692 + C2693 + C2694) * C51297 +
            (C2695 + C2696 + C2697) * C1458 + (C2698 + C2699 + C2700) * C1453) *
               C51122 * C50977) *
              C51243 +
          (((C2691 + C2690 + C2689) * C1457 -
            ((C2494 + C2493 + C2492) * C51296 +
             (C2491 + C2490 + C2489) * C1456) +
            (C2694 + C2693 + C2692) * C51297 - (C2697 + C2696 + C2695) * C1458 -
            (C2700 + C2699 + C2698) * C1453) *
               C51122 * C2447 +
           ((C3053 + C3054 + C3055) * C1457 -
            ((C2495 + C2496 + C2497) * C51296 +
             (C2498 + C2499 + C2500) * C1456) +
            (C3056 + C3057 + C3058) * C51297 -
            (C2451 * C2654 + C2446 * C2659 + C2450 * C1225 + C2445 * C1231 +
             C2449 * C306 + C2444 * C321) *
                C1458 -
            (C2451 * C2660 + C2446 * C2663 + C2450 * C1232 + C2445 * C1237 +
             C2449 * C322 + C2444 * C336) *
                C1453) *
               C51122 * C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1456 +
            (C117 * C127 + C51106 * C140) * C51296 -
            (C117 * C301 + C51106 * C311) * C1457 -
            (C117 * C312 + C51106 * C331) * C51297 +
            (C117 * C302 + C51106 * C313) * C1458 +
            (C117 * C314 + C51106 * C332) * C1453) *
               C51122 * C108 +
           (C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C51122 * C109 +
           (C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C51122 * C110 +
           (C1472 + C1473 - C1474 - C1475 + C1476 + C1477) * C51122 * C111) *
              C50991 * C51252 +
          (((C117 * C969 + C51106 * C974) * C1457 -
            ((C117 * C514 + C51106 * C530) * C51296 +
             (C117 * C500 + C51106 * C515) * C1456) +
            (C117 * C975 + C51106 * C984) * C51297 -
            (C117 * C1717 + C51106 * C1721) * C1458 -
            (C117 * C1722 + C51106 * C1729) * C1453) *
               C51122 * C108 +
           (C1008 * C1457 - (C562 * C51296 + C561 * C1456) + C1009 * C51297 -
            (C117 * C1718 + C51106 * C1723) * C1458 -
            (C117 * C1724 + C51106 * C1730) * C1453) *
               C51122 * C109 +
           (C1010 * C1457 - (C564 * C51296 + C563 * C1456) + C1011 * C51297 -
            (C117 * C1719 + C51106 * C1725) * C1458 -
            (C117 * C1726 + C51106 * C1731) * C1453) *
               C51122 * C110 +
           (C1012 * C1457 - (C566 * C51296 + C565 * C1456) + C1013 * C51297 -
            (C117 * C1720 + C51106 * C1727) * C1458 -
            (C117 * C1728 + C51106 * C1732) * C1453) *
               C51122 * C111) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1456 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51296 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1457 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51297 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C1458 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C1453) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1456 + (C2492 + C2493 + C2494) * C51296 -
            (C2689 + C2690 + C2691) * C1457 - (C2692 + C2693 + C2694) * C51297 +
            (C2695 + C2696 + C2697) * C1458 + (C2698 + C2699 + C2700) * C1453) *
               C51122 * C50977) *
              C50991 * C51252 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C1457 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51296 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C1456) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C51297 -
            (C2451 * C4338 + C2446 * C4340 + C2450 * C3416 + C2445 * C3419 +
             C2449 * C1717 + C2444 * C1721) *
                C1458 -
            (C2451 * C4341 + C2446 * C4344 + C2450 * C3420 + C2445 * C3425 +
             C2449 * C1722 + C2444 * C1729) *
                C1453) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C1457 -
            ((C2888 + C2887 + C2886) * C51296 +
             (C2885 + C2884 + C2883) * C1456) +
            (C3444 + C3445 + C3446) * C51297 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C1458 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C1453) *
               C51122 * C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C51106 * C126) * C1219 +
           (C117 * C127 + C51106 * C140) * C1214 -
           (C117 * C301 + C51106 * C311) * C1220 -
           (C117 * C312 + C51106 * C331) * C1215 +
           (C117 * C302 + C51106 * C313) * C1221 +
           (C117 * C314 + C51106 * C332) * C1216 -
           (C117 * C1223 + C51106 * C1227) * C1222 -
           (C117 * C1228 + C51106 * C1235) * C1217) *
              C51122 * C108 +
          (C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
           C374 * C1221 + C375 * C1216 -
           (C117 * C1224 + C51106 * C1229) * C1222 -
           (C117 * C1230 + C51106 * C1236) * C1217) *
              C51122 * C109 +
          (C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
           C378 * C1221 + C379 * C1216 -
           (C117 * C1225 + C51106 * C1231) * C1222 -
           (C117 * C1232 + C51106 * C1237) * C1217) *
              C51122 * C110 +
          (C172 * C1219 + C173 * C1214 - C380 * C1220 - C381 * C1215 +
           C382 * C1221 + C383 * C1216 -
           (C117 * C1226 + C51106 * C1233) * C1222 -
           (C117 * C1234 + C51106 * C1238) * C1217) *
              C51122 * C111) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1122 +
            (C117 * C127 + C51106 * C140) * C1117 -
            (C117 * C301 + C51106 * C311) * C1123 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C1125 + C1126 - C1127 - C1128) * C51122 * C109 + C1147 * C110 +
           C1148 * C111) *
              C1119 +
          ((C1127 - (C1126 + C1125) + C1128) * C51122 * C108 +
           (C1131 - (C1130 + C1129) + C1132) * C51122 * C109 +
           (C1135 - (C1134 + C1133) + C1136) * C51122 * C110 +
           (C1137 - (C1138 + C1139) + C1140) * C51122 * C111) *
              C1120 +
          (C1147 * C108 + C1148 * C109 +
           (C1139 + C1138 - C1137 - C1140) * C51122 * C110 +
           (C176 * C1122 + C177 * C1117 -
            (C117 * C689 + C51106 * C690) * C1123 -
            (C117 * C691 + C51106 * C692) * C51061) *
               C51122 * C111) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1122 +
            (C117 * C127 + C51106 * C140) * C1117 -
            (C117 * C301 + C51106 * C311) * C1123 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C1125 + C1126 - C1127 - C1128) * C51122 * C109 + C1147 * C110 +
           C1148 * C111) *
              C50991 * C493 +
          (((C117 * C969 + C51106 * C974) * C1123 -
            ((C117 * C514 + C51106 * C530) * C1117 +
             (C117 * C500 + C51106 * C515) * C1122) +
            (C117 * C975 + C51106 * C984) * C51061) *
               C51122 * C108 +
           (C1008 * C1123 - (C562 * C1117 + C561 * C1122) + C1009 * C51061) *
               C51122 * C109 +
           (C1010 * C1123 - (C564 * C1117 + C563 * C1122) + C1011 * C51061) *
               C51122 * C110 +
           (C1012 * C1123 - (C566 * C1117 + C565 * C1122) + C1013 * C51061) *
               C51122 * C111) *
              C50991 * C494 +
          (((C117 * C501 + C51106 * C516) * C1122 +
            (C117 * C517 + C51106 * C531) * C1117 -
            (C117 * C1337 + C51106 * C1341) * C1123 -
            (C117 * C1342 + C51106 * C1349) * C51061) *
               C51122 * C108 +
           (C567 * C1122 + C568 * C1117 -
            (C117 * C1338 + C51106 * C1343) * C1123 -
            (C117 * C1344 + C51106 * C1350) * C51061) *
               C51122 * C109 +
           (C569 * C1122 + C570 * C1117 -
            (C117 * C1339 + C51106 * C1345) * C1123 -
            (C117 * C1346 + C51106 * C1351) * C51061) *
               C51122 * C110 +
           (C571 * C1122 + C572 * C1117 -
            (C117 * C1340 + C51106 * C1347) * C1123 -
            (C117 * C1348 + C51106 * C1352) * C51061) *
               C51122 * C111) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1122 + (C2492 + C2493 + C2494) * C1117 -
            (C2689 + C2690 + C2691) * C1123 -
            (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C1119 +
          (((C2691 + C2690 + C2689) * C1123 -
            ((C2494 + C2493 + C2492) * C1117 +
             (C2491 + C2490 + C2489) * C1122) +
            (C2694 + C2693 + C2692) * C51061) *
               C51122 * C2447 +
           ((C3053 + C3054 + C3055) * C1123 -
            ((C2495 + C2496 + C2497) * C1117 +
             (C2498 + C2499 + C2500) * C1122) +
            (C3056 + C3057 + C3058) * C51061) *
               C51122 * C50977) *
              C1120 +
          (((C2500 + C2499 + C2498) * C1122 + (C2497 + C2496 + C2495) * C1117 -
            (C3055 + C3054 + C3053) * C1123 -
            (C3058 + C3057 + C3056) * C51061) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C1122 + (C2504 + C2505 + C2506) * C1117 -
            (C2451 * C1226 + C2446 * C1233 + C2450 * C308 + C2445 * C325 +
             C2449 * C307 + C2444 * C323) *
                C1123 -
            (C2451 * C1234 + C2446 * C1238 + C2450 * C326 + C2445 * C338 +
             C2449 * C324 + C2444 * C337) *
                C51061) *
               C51122 * C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
            C2451 * C302 + C2446 * C313) *
               C1219 +
           (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
            C2451 * C314 + C2446 * C332) *
               C1214 -
           (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
            C2449 * C301 + C2444 * C311) *
               C1220 -
           (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
            C2449 * C312 + C2444 * C331) *
               C1215 +
           (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
            C2451 * C2652 + C2446 * C2655) *
               C1221 +
           (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
            C2451 * C2656 + C2446 * C2661) *
               C1216 -
           (C2451 * C3690 + C2446 * C3692 + C2450 * C2652 + C2445 * C2655 +
            C2449 * C1223 + C2444 * C1227) *
               C1222 -
           (C2451 * C3693 + C2446 * C3696 + C2450 * C2656 + C2445 * C2661 +
            C2449 * C1228 + C2444 * C1235) *
               C1217) *
              C51122 * C2447 +
          ((C2489 + C2490 + C2491) * C1219 + (C2492 + C2493 + C2494) * C1214 -
           (C2689 + C2690 + C2691) * C1220 - (C2692 + C2693 + C2694) * C1215 +
           (C2695 + C2696 + C2697) * C1221 + (C2698 + C2699 + C2700) * C1216 -
           (C2451 * C3691 + C2446 * C3694 + C2450 * C2653 + C2445 * C2657 +
            C2449 * C1224 + C2444 * C1229) *
               C1222 -
           (C2451 * C3695 + C2446 * C3697 + C2450 * C2658 + C2445 * C2662 +
            C2449 * C1230 + C2444 * C1236) *
               C1217) *
              C51122 * C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1122 + (C2492 + C2493 + C2494) * C1117 -
            (C2689 + C2690 + C2691) * C1123 -
            (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C50991 * C493 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C1123 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C1117 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C1122) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C51061) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C1123 -
            ((C2888 + C2887 + C2886) * C1117 +
             (C2885 + C2884 + C2883) * C1122) +
            (C3444 + C3445 + C3446) * C51061) *
               C51122 * C50977) *
              C50991 * C494 +
          (((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
             C2451 * C2846 + C2446 * C2849) *
                C1122 +
            (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
             C2451 * C2850 + C2446 * C2855) *
                C1117 -
            (C2451 * C3844 + C2446 * C3846 + C2450 * C2846 + C2445 * C2849 +
             C2449 * C1337 + C2444 * C1341) *
                C1123 -
            (C2451 * C3847 + C2446 * C3850 + C2450 * C2850 + C2445 * C2855 +
             C2449 * C1342 + C2444 * C1349) *
                C51061) *
               C51122 * C2447 +
           ((C2889 + C2890 + C2891) * C1122 + (C2892 + C2893 + C2894) * C1117 -
            (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
             C2449 * C1338 + C2444 * C1343) *
                C1123 -
            (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
             C2449 * C1344 + C2444 * C1350) *
                C51061) *
               C51122 * C50977) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51122 * C108 +
            (C1125 + C1126 - C1127 - C1128) * C51122 * C109 + C1147 * C110 +
            C1148 * C111) *
               C51243 +
           ((C1127 - (C1126 + C1125) + C1128) * C51122 * C108 +
            (C1131 - (C1130 + C1129) + C1132) * C51122 * C109 +
            (C1135 - (C1134 + C1133) + C1136) * C51122 * C110 +
            (C1137 - (C1138 + C1139) + C1140) * C51122 * C111) *
               C50996) *
              C51252 +
          ((((C117 * C969 + C51106 * C974) * C1123 -
             ((C117 * C514 + C51106 * C530) * C1117 +
              (C117 * C500 + C51106 * C515) * C1122) +
             (C117 * C975 + C51106 * C984) * C51061) *
                C51122 * C108 +
            (C1608 - (C1609 + C1610) + C1611) * C51122 * C109 +
            (C1612 - (C1613 + C1614) + C1615) * C51122 * C110 +
            (C1616 - (C1617 + C1618) + C1619) * C51122 * C111) *
               C51243 +
           ((C1610 + C1609 - C1608 - C1611) * C51122 * C108 +
            (C1614 + C1613 - C1612 - C1615) * C51122 * C109 +
            (C1618 + C1617 - C1616 - C1619) * C51122 * C110 +
            (C834 * C1122 + C835 * C1117 -
             (C117 * C973 + C51106 * C982) * C1123 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51122 * C111) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C1122 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C1117 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C1123 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C1122 + (C2492 + C2493 + C2494) * C1117 -
             (C2689 + C2690 + C2691) * C1123 -
             (C2692 + C2693 + C2694) * C51061) *
                C51122 * C50977) *
               C51243 +
           (((C2691 + C2690 + C2689) * C1123 -
             ((C2494 + C2493 + C2492) * C1117 +
              (C2491 + C2490 + C2489) * C1122) +
             (C2694 + C2693 + C2692) * C51061) *
                C51122 * C2447 +
            ((C3053 + C3054 + C3055) * C1123 -
             ((C2495 + C2496 + C2497) * C1117 +
              (C2498 + C2499 + C2500) * C1122) +
             (C3056 + C3057 + C3058) * C51061) *
                C51122 * C50977) *
               C50996) *
              C51252 +
          ((((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
              C2451 * C3416 + C2446 * C3419) *
                 C1123 -
             ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
               C2449 * C514 + C2444 * C530) *
                  C1117 +
              (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
               C2449 * C500 + C2444 * C515) *
                  C1122) +
             (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
              C2451 * C3420 + C2446 * C3425) *
                 C51061) *
                C51122 * C2447 +
            ((C3441 + C3442 + C3443) * C1123 -
             ((C2888 + C2887 + C2886) * C1117 +
              (C2885 + C2884 + C2883) * C1122) +
             (C3444 + C3445 + C3446) * C51061) *
                C51122 * C50977) *
               C51243 +
           (((C2883 + C2884 + C2885) * C1122 + (C2886 + C2887 + C2888) * C1117 -
             (C3443 + C3442 + C3441) * C1123 -
             (C3446 + C3445 + C3444) * C51061) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C1122 + (C3220 + C3221 + C3222) * C1117 -
             (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
              C2449 * C971 + C2444 * C978) *
                 C1123 -
             (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
              C2449 * C979 + C2444 * C986) *
                 C51061) *
                C51122 * C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1122 +
            (C117 * C127 + C51106 * C140) * C1117 -
            (C117 * C301 + C51106 * C311) * C1123 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C1125 + C1126 - C1127 - C1128) * C51122 * C109 + C1147 * C110 +
           C1148 * C111) *
              C1119 +
          ((C1127 - (C1126 + C1125) + C1128) * C51122 * C108 +
           (C1131 - (C1130 + C1129) + C1132) * C51122 * C109 +
           (C1135 - (C1134 + C1133) + C1136) * C51122 * C110 +
           (C1137 - (C1138 + C1139) + C1140) * C51122 * C111) *
              C1120 +
          (C1147 * C108 + C1148 * C109 +
           (C1139 + C1138 - C1137 - C1140) * C51122 * C110 +
           (C176 * C1122 + C177 * C1117 -
            (C117 * C689 + C51106 * C690) * C1123 -
            (C117 * C691 + C51106 * C692) * C51061) *
               C51122 * C111) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C51106 * C126) * C1219 +
           (C117 * C127 + C51106 * C140) * C1214 -
           (C117 * C301 + C51106 * C311) * C1220 -
           (C117 * C312 + C51106 * C331) * C1215 +
           (C117 * C302 + C51106 * C313) * C1221 +
           (C117 * C314 + C51106 * C332) * C1216 -
           (C117 * C1223 + C51106 * C1227) * C1222 -
           (C117 * C1228 + C51106 * C1235) * C1217) *
              C51122 * C108 +
          (C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
           C374 * C1221 + C375 * C1216 -
           (C117 * C1224 + C51106 * C1229) * C1222 -
           (C117 * C1230 + C51106 * C1236) * C1217) *
              C51122 * C109 +
          (C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
           C378 * C1221 + C379 * C1216 -
           (C117 * C1225 + C51106 * C1231) * C1222 -
           (C117 * C1232 + C51106 * C1237) * C1217) *
              C51122 * C110 +
          (C172 * C1219 + C173 * C1214 - C380 * C1220 - C381 * C1215 +
           C382 * C1221 + C383 * C1216 -
           (C117 * C1226 + C51106 * C1233) * C1222 -
           (C117 * C1234 + C51106 * C1238) * C1217) *
              C51122 * C111) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C1122 + (C2492 + C2493 + C2494) * C1117 -
            (C2689 + C2690 + C2691) * C1123 -
            (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C1119 +
          (((C2691 + C2690 + C2689) * C1123 -
            ((C2494 + C2493 + C2492) * C1117 +
             (C2491 + C2490 + C2489) * C1122) +
            (C2694 + C2693 + C2692) * C51061) *
               C51122 * C2447 +
           ((C3053 + C3054 + C3055) * C1123 -
            ((C2495 + C2496 + C2497) * C1117 +
             (C2498 + C2499 + C2500) * C1122) +
            (C3056 + C3057 + C3058) * C51061) *
               C51122 * C50977) *
              C1120 +
          (((C2500 + C2499 + C2498) * C1122 + (C2497 + C2496 + C2495) * C1117 -
            (C3055 + C3054 + C3053) * C1123 -
            (C3058 + C3057 + C3056) * C51061) *
               C51122 * C2447 +
           ((C2501 + C2502 + C2503) * C1122 + (C2504 + C2505 + C2506) * C1117 -
            (C2451 * C1226 + C2446 * C1233 + C2450 * C308 + C2445 * C325 +
             C2449 * C307 + C2444 * C323) *
                C1123 -
            (C2451 * C1234 + C2446 * C1238 + C2450 * C326 + C2445 * C338 +
             C2449 * C324 + C2444 * C337) *
                C51061) *
               C51122 * C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
            C2451 * C302 + C2446 * C313) *
               C1219 +
           (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
            C2451 * C314 + C2446 * C332) *
               C1214 -
           (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
            C2449 * C301 + C2444 * C311) *
               C1220 -
           (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
            C2449 * C312 + C2444 * C331) *
               C1215 +
           (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
            C2451 * C2652 + C2446 * C2655) *
               C1221 +
           (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
            C2451 * C2656 + C2446 * C2661) *
               C1216 -
           (C2451 * C3690 + C2446 * C3692 + C2450 * C2652 + C2445 * C2655 +
            C2449 * C1223 + C2444 * C1227) *
               C1222 -
           (C2451 * C3693 + C2446 * C3696 + C2450 * C2656 + C2445 * C2661 +
            C2449 * C1228 + C2444 * C1235) *
               C1217) *
              C51122 * C2447 +
          ((C2489 + C2490 + C2491) * C1219 + (C2492 + C2493 + C2494) * C1214 -
           (C2689 + C2690 + C2691) * C1220 - (C2692 + C2693 + C2694) * C1215 +
           (C2695 + C2696 + C2697) * C1221 + (C2698 + C2699 + C2700) * C1216 -
           (C2451 * C3691 + C2446 * C3694 + C2450 * C2653 + C2445 * C2657 +
            C2449 * C1224 + C2444 * C1229) *
               C1222 -
           (C2451 * C3695 + C2446 * C3697 + C2450 * C2658 + C2445 * C2662 +
            C2449 * C1230 + C2444 * C1236) *
               C1217) *
              C51122 * C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51122 * C108 +
            (C694 + C695 - C696 - C697) * C51122 * C109 + C722 * C110 +
            C723 * C111) *
               C51243 +
           ((C696 - (C695 + C694) + C697) * C51122 * C108 +
            (C700 - (C699 + C698) + C701) * C51122 * C109 +
            (C704 - (C703 + C702) + C705) * C51122 * C110 +
            (C718 - (C708 + C709) + C719) * C51122 * C111) *
               C50996) *
              C1831 +
          ((((C117 * C969 + C51106 * C974) * C688 -
             ((C117 * C514 + C51106 * C530) * C51251 +
              (C117 * C500 + C51106 * C515) * C687) +
             (C117 * C975 + C51106 * C984) * C51061) *
                C51122 * C108 +
            (C1014 - (C992 + C993) + C1015) * C51122 * C109 +
            (C1016 - (C998 + C999) + C1017) * C51122 * C110 +
            (C1018 - (C1004 + C1005) + C1019) * C51122 * C111) *
               C51243 +
           ((C993 + C992 - C1014 - C1015) * C51122 * C108 +
            (C999 + C998 - C1016 - C1017) * C51122 * C109 +
            (C1005 + C1004 - C1018 - C1019) * C51122 * C110 +
            (C834 * C687 + C835 * C51251 -
             (C117 * C973 + C51106 * C982) * C688 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51122 * C111) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C687 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51251 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C688 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C687 + (C2492 + C2493 + C2494) * C51251 -
             (C2689 + C2690 + C2691) * C688 -
             (C2692 + C2693 + C2694) * C51061) *
                C51122 * C50977) *
               C51243 +
           (((C2691 + C2690 + C2689) * C688 -
             ((C2494 + C2493 + C2492) * C51251 +
              (C2491 + C2490 + C2489) * C687) +
             (C2694 + C2693 + C2692) * C51061) *
                C51122 * C2447 +
            ((C3053 + C3054 + C3055) * C688 -
             ((C2495 + C2496 + C2497) * C51251 +
              (C2498 + C2499 + C2500) * C687) +
             (C3056 + C3057 + C3058) * C51061) *
                C51122 * C50977) *
               C50996) *
              C1831 +
          ((((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
              C2451 * C3416 + C2446 * C3419) *
                 C688 -
             ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
               C2449 * C514 + C2444 * C530) *
                  C51251 +
              (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
               C2449 * C500 + C2444 * C515) *
                  C687) +
             (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
              C2451 * C3420 + C2446 * C3425) *
                 C51061) *
                C51122 * C2447 +
            ((C3441 + C3442 + C3443) * C688 -
             ((C2888 + C2887 + C2886) * C51251 +
              (C2885 + C2884 + C2883) * C687) +
             (C3444 + C3445 + C3446) * C51061) *
                C51122 * C50977) *
               C51243 +
           (((C2883 + C2884 + C2885) * C687 + (C2886 + C2887 + C2888) * C51251 -
             (C3443 + C3442 + C3441) * C688 -
             (C3446 + C3445 + C3444) * C51061) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C687 + (C3220 + C3221 + C3222) * C51251 -
             (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
              C2449 * C971 + C2444 * C978) *
                 C688 -
             (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
              C2449 * C979 + C2444 * C986) *
                 C51061) *
                C51122 * C50977) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C687 +
            (C117 * C127 + C51106 * C140) * C51251 -
            (C117 * C301 + C51106 * C311) * C688 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C51122 * C108 +
           (C694 + C695 - C696 - C697) * C51122 * C109 + C722 * C110 +
           C723 * C111) *
              C50991 * C51298 +
          (((C117 * C969 + C51106 * C974) * C688 -
            ((C117 * C514 + C51106 * C530) * C51251 +
             (C117 * C500 + C51106 * C515) * C687) +
            (C117 * C975 + C51106 * C984) * C51061) *
               C51122 * C108 +
           (C1014 - (C992 + C993) + C1015) * C51122 * C109 +
           (C1016 - (C998 + C999) + C1017) * C51122 * C110 +
           (C1018 - (C1004 + C1005) + C1019) * C51122 * C111) *
              C50991 * C51299 +
          (((C117 * C501 + C51106 * C516) * C687 +
            (C117 * C517 + C51106 * C531) * C51251 -
            (C117 * C1337 + C51106 * C1341) * C688 -
            (C117 * C1342 + C51106 * C1349) * C51061) *
               C51122 * C108 +
           (C567 * C687 + C568 * C51251 -
            (C117 * C1338 + C51106 * C1343) * C688 -
            (C117 * C1344 + C51106 * C1350) * C51061) *
               C51122 * C109 +
           (C569 * C687 + C570 * C51251 -
            (C117 * C1339 + C51106 * C1345) * C688 -
            (C117 * C1346 + C51106 * C1351) * C51061) *
               C51122 * C110 +
           (C571 * C687 + C572 * C51251 -
            (C117 * C1340 + C51106 * C1347) * C688 -
            (C117 * C1348 + C51106 * C1352) * C51061) *
               C51122 * C111) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C687 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51251 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C688 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C687 + (C2492 + C2493 + C2494) * C51251 -
            (C2689 + C2690 + C2691) * C688 - (C2692 + C2693 + C2694) * C51061) *
               C51122 * C50977) *
              C50991 * C51298 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C688 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51251 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C687) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C51061) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C688 -
            ((C2888 + C2887 + C2886) * C51251 +
             (C2885 + C2884 + C2883) * C687) +
            (C3444 + C3445 + C3446) * C51061) *
               C51122 * C50977) *
              C50991 * C51299 +
          (((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
             C2451 * C2846 + C2446 * C2849) *
                C687 +
            (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
             C2451 * C2850 + C2446 * C2855) *
                C51251 -
            (C2451 * C3844 + C2446 * C3846 + C2450 * C2846 + C2445 * C2849 +
             C2449 * C1337 + C2444 * C1341) *
                C688 -
            (C2451 * C3847 + C2446 * C3850 + C2450 * C2850 + C2445 * C2855 +
             C2449 * C1342 + C2444 * C1349) *
                C51061) *
               C51122 * C2447 +
           ((C2889 + C2890 + C2891) * C687 + (C2892 + C2893 + C2894) * C51251 -
            (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
             C2449 * C1338 + C2444 * C1343) *
                C688 -
            (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
             C2449 * C1344 + C2444 * C1350) *
                C51061) *
               C51122 * C50977) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C51122 * C108 +
           (C342 + C343 - C384 - C385 + C386 + C387) * C51122 * C109 +
           (C352 + C353 - C388 - C389 + C390 + C391) * C51122 * C110 +
           (C362 + C363 - C392 - C393 + C394 + C395) * C51122 * C111) *
              C50991 * C1831 +
          (((C117 * C969 + C51106 * C974) * C299 -
            ((C117 * C514 + C51106 * C530) * C293 +
             (C117 * C500 + C51106 * C515) * C298) +
            (C117 * C975 + C51106 * C984) * C294 -
            (C117 * C1717 + C51106 * C1721) * C300 -
            (C117 * C1722 + C51106 * C1729) * C295) *
               C51122 * C108 +
           (C1008 * C299 - (C562 * C293 + C561 * C298) + C1009 * C294 -
            (C117 * C1718 + C51106 * C1723) * C300 -
            (C117 * C1724 + C51106 * C1730) * C295) *
               C51122 * C109 +
           (C1010 * C299 - (C564 * C293 + C563 * C298) + C1011 * C294 -
            (C117 * C1719 + C51106 * C1725) * C300 -
            (C117 * C1726 + C51106 * C1731) * C295) *
               C51122 * C110 +
           (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
            (C117 * C1720 + C51106 * C1727) * C300 -
            (C117 * C1728 + C51106 * C1732) * C295) *
               C51122 * C111) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C1119 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C1120 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
            (C186 + C187) * C51122 * C111) *
               C1121) *
              C1831 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 + (C838 + C839) * C51122 * C111) *
               C1120 -
           (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C1119 -
           (((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51122 * C111 +
            (C839 + C838) * C51122 * C110 + C836 * C109 + C837 * C108) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C118 +
            (C117 * C127 + C51106 * C140) * C51009) *
               C51122 * C108 +
           (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
              C50991 * C1997 -
          (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
           ((C117 * C514 + C51106 * C530) * C51009 +
            (C117 * C500 + C51106 * C515) * C118) *
               C51122 * C108) *
              C50991 * C1998 +
          (((C117 * C501 + C51106 * C516) * C118 +
            (C117 * C517 + C51106 * C531) * C51009) *
               C51122 * C108 +
           (C579 + C580) * C51122 * C109 + (C581 + C582) * C51122 * C110 +
           (C583 + C584) * C51122 * C111) *
              C50991 * C1999 -
          (((C117 * C2005 + C51106 * C2013) * C51009 +
            (C117 * C2001 + C51106 * C2006) * C118) *
               C51122 * C111 +
           ((C117 * C2007 + C51106 * C2014) * C51009 +
            (C117 * C2002 + C51106 * C2008) * C118) *
               C51122 * C110 +
           ((C117 * C2009 + C51106 * C2015) * C51009 +
            (C117 * C2003 + C51106 * C2010) * C118) *
               C51122 * C109 +
           ((C117 * C2011 + C51106 * C2016) * C51009 +
            (C117 * C2004 + C51106 * C2012) * C118) *
               C51122 * C108) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C1119 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C1120 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C51122 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51009) *
                C51122 * C50977) *
               C1121) *
              C1831 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51122 * C50977) *
               C1120 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C1119 -
           (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
              C2449 * C511 + C2444 * C528) *
                 C51009 +
             (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
              C2449 * C498 + C2444 * C510) *
                 C118) *
                C51122 * C50977 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C51122 * C2447) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C293 -
            (C2689 + C2690 + C2691) * C299 - (C2692 + C2693 + C2694) * C294 +
            (C2695 + C2696 + C2697) * C300 + (C2698 + C2699 + C2700) * C295) *
               C51122 * C50977) *
              C50991 * C1831 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C299 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C293 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C298) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C294 -
            (C2451 * C4338 + C2446 * C4340 + C2450 * C3416 + C2445 * C3419 +
             C2449 * C1717 + C2444 * C1721) *
                C300 -
            (C2451 * C4341 + C2446 * C4344 + C2450 * C3420 + C2445 * C3425 +
             C2449 * C1722 + C2444 * C1729) *
                C295) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C299 -
            ((C2888 + C2887 + C2886) * C293 + (C2885 + C2884 + C2883) * C298) +
            (C3444 + C3445 + C3446) * C294 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C300 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C295) *
               C51122 * C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C118 + (C2492 + C2493 + C2494) * C51009) *
               C51122 * C50977) *
              C50991 * C1997 -
          (((C2888 + C2887 + C2886) * C51009 + (C2885 + C2884 + C2883) * C118) *
               C51122 * C50977 +
           ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
             C2449 * C514 + C2444 * C530) *
                C51009 +
            (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
             C2449 * C500 + C2444 * C515) *
                C118) *
               C51122 * C2447) *
              C50991 * C1998 +
          (((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
             C2451 * C2846 + C2446 * C2849) *
                C118 +
            (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
             C2451 * C2850 + C2446 * C2855) *
                C51009) *
               C51122 * C2447 +
           ((C2889 + C2890 + C2891) * C118 + (C2892 + C2893 + C2894) * C51009) *
               C51122 * C50977) *
              C50991 * C1999 -
          (((C2451 * C4740 + C2446 * C4748 + C2450 * C4741 + C2445 * C4749 +
             C2449 * C2009 + C2444 * C2015) *
                C51009 +
            (C2451 * C4736 + C2446 * C4742 + C2450 * C4737 + C2445 * C4743 +
             C2449 * C2003 + C2444 * C2010) *
                C118) *
               C51122 * C50977 +
           ((C2451 * C4744 + C2446 * C4750 + C2450 * C4745 + C2445 * C4751 +
             C2449 * C2011 + C2444 * C2016) *
                C51009 +
            (C2451 * C4738 + C2446 * C4746 + C2450 * C4739 + C2445 * C4747 +
             C2449 * C2004 + C2444 * C2012) *
                C118) *
               C51122 * C2447) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C51243 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C50996) *
              C51298 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 + (C838 + C839) * C51122 * C111) *
               C50996 -
           (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C51243) *
              C51299 +
          ((((C117 * C501 + C51106 * C516) * C118 +
             (C117 * C517 + C51106 * C531) * C51009) *
                C51122 * C108 +
            (C579 + C580) * C51122 * C109 + (C581 + C582) * C51122 * C110 +
            (C583 + C584) * C51122 * C111) *
               C51243 -
           (((C117 * C524 + C51106 * C535) * C51009 +
             (C117 * C505 + C51106 * C525) * C118) *
                C51122 * C111 +
            (C584 + C583) * C51122 * C110 + (C582 + C581) * C51122 * C109 +
            (C580 + C579) * C51122 * C108) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C51243 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C50996) *
              C51298 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51122 * C50977) *
               C50996 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C51243) *
              C51299 +
          ((((C2449 * C501 + C2444 * C516 + C2450 * C1337 + C2445 * C1341 +
              C2451 * C2846 + C2446 * C2849) *
                 C118 +
             (C2449 * C517 + C2444 * C531 + C2450 * C1342 + C2445 * C1349 +
              C2451 * C2850 + C2446 * C2855) *
                 C51009) *
                C51122 * C2447 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51122 * C50977) *
               C51243 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51122 * C50977 +
            ((C2894 + C2893 + C2892) * C51009 +
             (C2891 + C2890 + C2889) * C118) *
                C51122 * C2447) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51122 * C108 +
            (C178 + C179) * C51122 * C109 + C192 * C110 + C193 * C111) *
               C1119 -
           (C194 * C111 + C195 * C110 + (C181 + C180) * C51122 * C109 +
            (C179 + C178) * C51122 * C108) *
               C1120 +
           (C192 * C108 + C193 * C109 + (C185 + C184) * C51122 * C110 +
            (C186 + C187) * C51122 * C111) *
               C1121) *
              C1831 +
          (((C573 + C574) * C51122 * C108 + (C575 + C576) * C51122 * C109 +
            (C577 + C578) * C51122 * C110 + (C838 + C839) * C51122 * C111) *
               C1120 -
           (C836 * C111 + C837 * C110 + (C574 + C573) * C51122 * C109 +
            ((C117 * C514 + C51106 * C530) * C51009 +
             (C117 * C500 + C51106 * C515) * C118) *
                C51122 * C108) *
               C1119 -
           (((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51122 * C111 +
            (C839 + C838) * C51122 * C110 + C836 * C109 + C837 * C108) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C51122 * C108 +
           (C342 + C343 - C384 - C385 + C386 + C387) * C51122 * C109 +
           (C352 + C353 - C388 - C389 + C390 + C391) * C51122 * C110 +
           (C362 + C363 - C392 - C393 + C394 + C395) * C51122 * C111) *
              C50991 * C1831 +
          (((C117 * C969 + C51106 * C974) * C299 -
            ((C117 * C514 + C51106 * C530) * C293 +
             (C117 * C500 + C51106 * C515) * C298) +
            (C117 * C975 + C51106 * C984) * C294 -
            (C117 * C1717 + C51106 * C1721) * C300 -
            (C117 * C1722 + C51106 * C1729) * C295) *
               C51122 * C108 +
           (C1008 * C299 - (C562 * C293 + C561 * C298) + C1009 * C294 -
            (C117 * C1718 + C51106 * C1723) * C300 -
            (C117 * C1724 + C51106 * C1730) * C295) *
               C51122 * C109 +
           (C1010 * C299 - (C564 * C293 + C563 * C298) + C1011 * C294 -
            (C117 * C1719 + C51106 * C1725) * C300 -
            (C117 * C1726 + C51106 * C1731) * C295) *
               C51122 * C110 +
           (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
            (C117 * C1720 + C51106 * C1727) * C300 -
            (C117 * C1728 + C51106 * C1732) * C295) *
               C51122 * C111) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C51122 * C2447 +
            ((C2489 + C2490 + C2491) * C118 +
             (C2492 + C2493 + C2494) * C51009) *
                C51122 * C50977) *
               C1119 -
           (((C2495 + C2496 + C2497) * C51009 +
             (C2498 + C2499 + C2500) * C118) *
                C51122 * C50977 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C51122 * C2447) *
               C1120 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C51122 * C2447 +
            ((C2501 + C2502 + C2503) * C118 +
             (C2504 + C2505 + C2506) * C51009) *
                C51122 * C50977) *
               C1121) *
              C1831 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C51122 * C2447 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51122 * C50977) *
               C1120 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51122 * C50977 +
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C51009 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C118) *
                C51122 * C2447) *
               C1119 -
           (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
              C2449 * C511 + C2444 * C528) *
                 C51009 +
             (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
              C2449 * C498 + C2444 * C510) *
                 C118) *
                C51122 * C50977 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C51122 * C2447) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C51122 * C2447 +
           ((C2489 + C2490 + C2491) * C298 + (C2492 + C2493 + C2494) * C293 -
            (C2689 + C2690 + C2691) * C299 - (C2692 + C2693 + C2694) * C294 +
            (C2695 + C2696 + C2697) * C300 + (C2698 + C2699 + C2700) * C295) *
               C51122 * C50977) *
              C50991 * C1831 +
          (((C2449 * C969 + C2444 * C974 + C2450 * C1717 + C2445 * C1721 +
             C2451 * C3416 + C2446 * C3419) *
                C299 -
            ((C2451 * C1722 + C2446 * C1729 + C2450 * C975 + C2445 * C984 +
              C2449 * C514 + C2444 * C530) *
                 C293 +
             (C2451 * C1717 + C2446 * C1721 + C2450 * C969 + C2445 * C974 +
              C2449 * C500 + C2444 * C515) *
                 C298) +
            (C2449 * C975 + C2444 * C984 + C2450 * C1722 + C2445 * C1729 +
             C2451 * C3420 + C2446 * C3425) *
                C294 -
            (C2451 * C4338 + C2446 * C4340 + C2450 * C3416 + C2445 * C3419 +
             C2449 * C1717 + C2444 * C1721) *
                C300 -
            (C2451 * C4341 + C2446 * C4344 + C2450 * C3420 + C2445 * C3425 +
             C2449 * C1722 + C2444 * C1729) *
                C295) *
               C51122 * C2447 +
           ((C3441 + C3442 + C3443) * C299 -
            ((C2888 + C2887 + C2886) * C293 + (C2885 + C2884 + C2883) * C298) +
            (C3444 + C3445 + C3446) * C294 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C300 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C295) *
               C51122 * C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C687 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51251 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C688 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C687 +
                    (C24947 + C24948 + C24949) * C51251 -
                    (C25132 + C25133 + C25134) * C688 -
                    (C25135 + C25136 + C25137) * C51061) *
                       C51122 * C50977) *
                      C51294 +
                  (((C25134 + C25133 + C25132) * C688 -
                    ((C24949 + C24948 + C24947) * C51251 +
                     (C24946 + C24945 + C24944) * C687) +
                    (C25137 + C25136 + C25135) * C51061) *
                       C51122 * C51236 +
                   ((C25484 + C25485 + C25486) * C688 -
                    ((C24950 + C24951 + C24952) * C51251 +
                     (C24953 + C24954 + C24955) * C687) +
                    (C25487 + C25488 + C25489) * C51061) *
                       C51122 * C50977) *
                      C51295 +
                  (((C24955 + C24954 + C24953) * C687 +
                    (C24952 + C24951 + C24950) * C51251 -
                    (C25486 + C25485 + C25484) * C688 -
                    (C25489 + C25488 + C25487) * C51061) *
                       C51122 * C51236 +
                   ((C24956 + C24957 + C24958) * C687 +
                    (C24959 + C24960 + C24961) * C51251 -
                    (C24906 * C1226 + C24901 * C1233 + C24905 * C308 +
                     C51301 * C325 + C24904 * C307 + C51300 * C323) *
                        C688 -
                    (C24906 * C1234 + C24901 * C1238 + C24905 * C326 +
                     C51301 * C338 + C24904 * C324 + C51300 * C337) *
                        C51061) *
                       C51122 * C50977) *
                      C686) *
                 C51025) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C687 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51251 -
                     (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                      C51301 * C313 + C24904 * C301 + C51300 * C311) *
                         C688 -
                     (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                      C51301 * C332 + C24904 * C312 + C51300 * C331) *
                         C51061) *
                        C51122 * C51236 +
                    ((C24944 + C24945 + C24946) * C687 +
                     (C24947 + C24948 + C24949) * C51251 -
                     (C25132 + C25133 + C25134) * C688 -
                     (C25135 + C25136 + C25137) * C51061) *
                        C51122 * C50977) *
                       C296 +
                   (((C25134 + C25133 + C25132) * C688 -
                     ((C24949 + C24948 + C24947) * C51251 +
                      (C24946 + C24945 + C24944) * C687) +
                     (C25137 + C25136 + C25135) * C51061) *
                        C51122 * C51236 +
                    ((C25484 + C25485 + C25486) * C688 -
                     ((C24950 + C24951 + C24952) * C51251 +
                      (C24953 + C24954 + C24955) * C687) +
                     (C25487 + C25488 + C25489) * C51061) *
                        C51122 * C50977) *
                       C50996) *
                      C51252 +
                  ((((C24904 * C969 + C51300 * C974 + C24905 * C1717 +
                      C51301 * C1721 + C24906 * C3416 + C24901 * C3419) *
                         C688 -
                     ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                       C51301 * C984 + C24904 * C514 + C51300 * C530) *
                          C51251 +
                      (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                       C51301 * C974 + C24904 * C500 + C51300 * C515) *
                          C687) +
                     (C24904 * C975 + C51300 * C984 + C24905 * C1722 +
                      C51301 * C1729 + C24906 * C3420 + C24901 * C3425) *
                         C51061) *
                        C51122 * C51236 +
                    ((C25860 + C25861 + C25862) * C688 -
                     ((C25319 + C25318 + C25317) * C51251 +
                      (C25316 + C25315 + C25314) * C687) +
                     (C25863 + C25864 + C25865) * C51061) *
                        C51122 * C50977) *
                       C296 +
                   (((C25314 + C25315 + C25316) * C687 +
                     (C25317 + C25318 + C25319) * C51251 -
                     (C25862 + C25861 + C25860) * C688 -
                     (C25865 + C25864 + C25863) * C51061) *
                        C51122 * C51236 +
                    ((C25648 + C25649 + C25650) * C687 +
                     (C25651 + C25652 + C25653) * C51251 -
                     (C24906 * C3418 + C24901 * C3423 + C24905 * C1719 +
                      C51301 * C1725 + C24904 * C971 + C51300 * C978) *
                         C688 -
                     (C24906 * C3424 + C24901 * C3427 + C24905 * C1726 +
                      C51301 * C1731 + C24904 * C979 + C51300 * C986) *
                         C51061) *
                        C51122 * C50977) *
                       C50996) *
                      C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C298 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C293 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C299 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C294 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C300 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C295) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C298 +
                    (C24947 + C24948 + C24949) * C293 -
                    (C25132 + C25133 + C25134) * C299 -
                    (C25135 + C25136 + C25137) * C294 +
                    (C25138 + C25139 + C25140) * C300 +
                    (C25141 + C25142 + C25143) * C295) *
                       C51122 * C50977) *
                      C296 +
                  (((C25134 + C25133 + C25132) * C299 -
                    ((C24949 + C24948 + C24947) * C293 +
                     (C24946 + C24945 + C24944) * C298) +
                    (C25137 + C25136 + C25135) * C294 -
                    (C25140 + C25139 + C25138) * C300 -
                    (C25143 + C25142 + C25141) * C295) *
                       C51122 * C51236 +
                   ((C24904 * C305 + C51300 * C319 + C24905 * C306 +
                     C51301 * C321 + C24906 * C1225 + C24901 * C1231) *
                        C299 -
                    ((C24950 + C24951 + C24952) * C293 +
                     (C24953 + C24954 + C24955) * C298) +
                    (C24904 * C320 + C51300 * C335 + C24905 * C322 +
                     C51301 * C336 + C24906 * C1232 + C24901 * C1237) *
                        C294 -
                    (C24906 * C2654 + C24901 * C2659 + C24905 * C1225 +
                     C51301 * C1231 + C24904 * C306 + C51300 * C321) *
                        C300 -
                    (C24906 * C2660 + C24901 * C2663 + C24905 * C1232 +
                     C51301 * C1237 + C24904 * C322 + C51300 * C336) *
                        C295) *
                       C51122 * C50977) *
                      C50996) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C118 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51009) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C118 +
                    (C24947 + C24948 + C24949) * C51009) *
                       C51122 * C50977) *
                      C112 -
                  (((C24950 + C24951 + C24952) * C51009 +
                    (C24953 + C24954 + C24955) * C118) *
                       C51122 * C50977 +
                   ((C24949 + C24948 + C24947) * C51009 +
                    (C24946 + C24945 + C24944) * C118) *
                       C51122 * C51236) *
                      C113 +
                  (((C24955 + C24954 + C24953) * C118 +
                    (C24952 + C24951 + C24950) * C51009) *
                       C51122 * C51236 +
                   ((C24956 + C24957 + C24958) * C118 +
                    (C24959 + C24960 + C24961) * C51009) *
                       C51122 * C50977) *
                      C114 -
                  (((C24906 * C330 + C24901 * C340 + C24905 * C328 +
                     C51301 * C339 + C24904 * C134 + C51300 * C144) *
                        C51009 +
                    (C24906 * C310 + C24901 * C329 + C24905 * C309 +
                     C51301 * C327 + C24904 * C123 + C51300 * C135) *
                        C118) *
                       C51122 * C50977 +
                   ((C24961 + C24960 + C24959) * C51009 +
                    (C24958 + C24957 + C24956) * C118) *
                       C51122 * C51236) *
                      C115) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C118 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51009) *
                        C51122 * C51236 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51009) *
                        C51122 * C50977) *
                       C296 -
                   (((C24950 + C24951 + C24952) * C51009 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51122 * C50977 +
                    ((C24949 + C24948 + C24947) * C51009 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51122 * C51236) *
                       C50996) *
                      C493 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51009) *
                        C51122 * C51236 +
                    ((C24904 * C497 + C51300 * C508 + C24905 * C971 +
                      C51301 * C978 + C24906 * C1719 + C24901 * C1725) *
                         C118 +
                     (C24904 * C509 + C51300 * C527 + C24905 * C979 +
                      C51301 * C986 + C24906 * C1726 + C24901 * C1731) *
                         C51009) *
                        C51122 * C50977) *
                       C50996 -
                   (((C25319 + C25318 + C25317) * C51009 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51122 * C50977 +
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C51009 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C118) *
                        C51122 * C51236) *
                       C296) *
                      C494 +
                  ((((C24904 * C501 + C51300 * C516 + C24905 * C1337 +
                      C51301 * C1341 + C24906 * C2846 + C24901 * C2849) *
                         C118 +
                     (C24904 * C517 + C51300 * C531 + C24905 * C1342 +
                      C51301 * C1349 + C24906 * C2850 + C24901 * C2855) *
                         C51009) *
                        C51122 * C51236 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51009) *
                        C51122 * C50977) *
                       C296 -
                   (((C24906 * C2853 + C24901 * C2857 + C24905 * C1346 +
                      C51301 * C1351 + C24904 * C521 + C51300 * C533) *
                         C51009 +
                     (C24906 * C2848 + C24901 * C2854 + C24905 * C1339 +
                      C51301 * C1345 + C24904 * C503 + C51300 * C520) *
                         C118) *
                        C51122 * C50977 +
                    ((C25325 + C25324 + C25323) * C51009 +
                     (C25322 + C25321 + C25320) * C118) *
                        C51122 * C51236) *
                       C50996) *
                      C495)) /
                    (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C118 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51009) *
                        C51122 * C51236 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51009) *
                        C51122 * C50977) *
                       C51294 -
                   (((C24950 + C24951 + C24952) * C51009 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51122 * C50977 +
                    ((C24949 + C24948 + C24947) * C51009 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51122 * C51236) *
                       C51295 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51009) *
                        C51122 * C51236 +
                    ((C24956 + C24957 + C24958) * C118 +
                     (C24959 + C24960 + C24961) * C51009) *
                        C51122 * C50977) *
                       C686) *
                      C51252 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51009) *
                        C51122 * C51236 +
                    ((C25648 + C25649 + C25650) * C118 +
                     (C25651 + C25652 + C25653) * C51009) *
                        C51122 * C50977) *
                       C51295 -
                   (((C25319 + C25318 + C25317) * C51009 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51122 * C50977 +
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C51009 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C118) *
                        C51122 * C51236) *
                       C51294 -
                   (((C24906 * C1728 + C24901 * C1732 + C24905 * C981 +
                      C51301 * C987 + C24904 * C511 + C51300 * C528) *
                         C51009 +
                     (C24906 * C1720 + C24901 * C1727 + C24905 * C972 +
                      C51301 * C980 + C24904 * C498 + C51300 * C510) *
                         C118) *
                        C51122 * C50977 +
                    ((C25653 + C25652 + C25651) * C51009 +
                     (C25650 + C25649 + C25648) * C118) *
                        C51122 * C51236) *
                       C686) *
                      C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C118 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51009) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C118 +
                    (C24947 + C24948 + C24949) * C51009) *
                       C51122 * C50977) *
                      C112 -
                  (((C24950 + C24951 + C24952) * C51009 +
                    (C24953 + C24954 + C24955) * C118) *
                       C51122 * C50977 +
                   ((C24949 + C24948 + C24947) * C51009 +
                    (C24946 + C24945 + C24944) * C118) *
                       C51122 * C51236) *
                      C113 +
                  (((C24955 + C24954 + C24953) * C118 +
                    (C24952 + C24951 + C24950) * C51009) *
                       C51122 * C51236 +
                   ((C24956 + C24957 + C24958) * C118 +
                    (C24959 + C24960 + C24961) * C51009) *
                       C51122 * C50977) *
                      C114 -
                  (((C24906 * C330 + C24901 * C340 + C24905 * C328 +
                     C51301 * C339 + C24904 * C134 + C51300 * C144) *
                        C51009 +
                    (C24906 * C310 + C24901 * C329 + C24905 * C309 +
                     C51301 * C327 + C24904 * C123 + C51300 * C135) *
                        C118) *
                       C51122 * C50977 +
                   ((C24961 + C24960 + C24959) * C51009 +
                    (C24958 + C24957 + C24956) * C118) *
                       C51122 * C51236) *
                      C115) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C298 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C293 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C299 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C294 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C300 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C295) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C298 +
                    (C24947 + C24948 + C24949) * C293 -
                    (C25132 + C25133 + C25134) * C299 -
                    (C25135 + C25136 + C25137) * C294 +
                    (C25138 + C25139 + C25140) * C300 +
                    (C25141 + C25142 + C25143) * C295) *
                       C51122 * C50977) *
                      C296 +
                  (((C25134 + C25133 + C25132) * C299 -
                    ((C24949 + C24948 + C24947) * C293 +
                     (C24946 + C24945 + C24944) * C298) +
                    (C25137 + C25136 + C25135) * C294 -
                    (C25140 + C25139 + C25138) * C300 -
                    (C25143 + C25142 + C25141) * C295) *
                       C51122 * C51236 +
                   ((C24904 * C305 + C51300 * C319 + C24905 * C306 +
                     C51301 * C321 + C24906 * C1225 + C24901 * C1231) *
                        C299 -
                    ((C24950 + C24951 + C24952) * C293 +
                     (C24953 + C24954 + C24955) * C298) +
                    (C24904 * C320 + C51300 * C335 + C24905 * C322 +
                     C51301 * C336 + C24906 * C1232 + C24901 * C1237) *
                        C294 -
                    (C24906 * C2654 + C24901 * C2659 + C24905 * C1225 +
                     C51301 * C1231 + C24904 * C306 + C51300 * C321) *
                        C300 -
                    (C24906 * C2660 + C24901 * C2663 + C24905 * C1232 +
                     C51301 * C1237 + C24904 * C322 + C51300 * C336) *
                        C295) *
                       C51122 * C50977) *
                      C50996) *
                 C51025) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1456 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51296 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1457 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51297 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C1458 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C1453) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C1456 +
                    (C24947 + C24948 + C24949) * C51296 -
                    (C25132 + C25133 + C25134) * C1457 -
                    (C25135 + C25136 + C25137) * C51297 +
                    (C25138 + C25139 + C25140) * C1458 +
                    (C25141 + C25142 + C25143) * C1453) *
                       C51122 * C50977) *
                      C51243 +
                  (((C25134 + C25133 + C25132) * C1457 -
                    ((C24949 + C24948 + C24947) * C51296 +
                     (C24946 + C24945 + C24944) * C1456) +
                    (C25137 + C25136 + C25135) * C51297 -
                    (C25140 + C25139 + C25138) * C1458 -
                    (C25143 + C25142 + C25141) * C1453) *
                       C51122 * C51236 +
                   ((C25484 + C25485 + C25486) * C1457 -
                    ((C24950 + C24951 + C24952) * C51296 +
                     (C24953 + C24954 + C24955) * C1456) +
                    (C25487 + C25488 + C25489) * C51297 -
                    (C24906 * C2654 + C24901 * C2659 + C24905 * C1225 +
                     C51301 * C1231 + C24904 * C306 + C51300 * C321) *
                        C1458 -
                    (C24906 * C2660 + C24901 * C2663 + C24905 * C1232 +
                     C51301 * C1237 + C24904 * C322 + C51300 * C336) *
                        C1453) *
                       C51122 * C50977) *
                      C50996) *
                 C51025) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1456 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51296 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1457 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51297 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C1458 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C1453) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C1456 +
                    (C24947 + C24948 + C24949) * C51296 -
                    (C25132 + C25133 + C25134) * C1457 -
                    (C25135 + C25136 + C25137) * C51297 +
                    (C25138 + C25139 + C25140) * C1458 +
                    (C25141 + C25142 + C25143) * C1453) *
                       C51122 * C50977) *
                      C50991 * C51252 +
                  (((C24904 * C969 + C51300 * C974 + C24905 * C1717 +
                     C51301 * C1721 + C24906 * C3416 + C24901 * C3419) *
                        C1457 -
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C51296 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C1456) +
                    (C24904 * C975 + C51300 * C984 + C24905 * C1722 +
                     C51301 * C1729 + C24906 * C3420 + C24901 * C3425) *
                        C51297 -
                    (C24906 * C4338 + C24901 * C4340 + C24905 * C3416 +
                     C51301 * C3419 + C24904 * C1717 + C51300 * C1721) *
                        C1458 -
                    (C24906 * C4341 + C24901 * C4344 + C24905 * C3420 +
                     C51301 * C3425 + C24904 * C1722 + C51300 * C1729) *
                        C1453) *
                       C51122 * C51236 +
                   ((C25860 + C25861 + C25862) * C1457 -
                    ((C25319 + C25318 + C25317) * C51296 +
                     (C25316 + C25315 + C25314) * C1456) +
                    (C25863 + C25864 + C25865) * C51297 -
                    (C24906 * C4339 + C24901 * C4342 + C24905 * C3417 +
                     C51301 * C3421 + C24904 * C1718 + C51300 * C1723) *
                        C1458 -
                    (C24906 * C4343 + C24901 * C4345 + C24905 * C3422 +
                     C51301 * C3426 + C24904 * C1724 + C51300 * C1730) *
                        C1453) *
                       C51122 * C50977) *
                      C50991 * C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                    C51301 * C311 + C24906 * C302 + C24901 * C313) *
                       C1219 +
                   (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                    C51301 * C331 + C24906 * C314 + C24901 * C332) *
                       C1214 -
                   (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                    C51301 * C313 + C24904 * C301 + C51300 * C311) *
                       C1220 -
                   (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                    C51301 * C332 + C24904 * C312 + C51300 * C331) *
                       C1215 +
                   (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                    C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                       C1221 +
                   (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                    C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                       C1216 -
                   (C24906 * C3690 + C24901 * C3692 + C24905 * C2652 +
                    C51301 * C2655 + C24904 * C1223 + C51300 * C1227) *
                       C1222 -
                   (C24906 * C3693 + C24901 * C3696 + C24905 * C2656 +
                    C51301 * C2661 + C24904 * C1228 + C51300 * C1235) *
                       C1217) *
                      C51122 * C51236 +
                  ((C24944 + C24945 + C24946) * C1219 +
                   (C24947 + C24948 + C24949) * C1214 -
                   (C25132 + C25133 + C25134) * C1220 -
                   (C25135 + C25136 + C25137) * C1215 +
                   (C25138 + C25139 + C25140) * C1221 +
                   (C25141 + C25142 + C25143) * C1216 -
                   (C24906 * C3691 + C24901 * C3694 + C24905 * C2653 +
                    C51301 * C2657 + C24904 * C1224 + C51300 * C1229) *
                       C1222 -
                   (C24906 * C3695 + C24901 * C3697 + C24905 * C2658 +
                    C51301 * C2662 + C24904 * C1230 + C51300 * C1236) *
                       C1217) *
                      C51122 * C50977) *
                 C50991 * C51025) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1122 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C1117 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1123 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C1122 +
                    (C24947 + C24948 + C24949) * C1117 -
                    (C25132 + C25133 + C25134) * C1123 -
                    (C25135 + C25136 + C25137) * C51061) *
                       C51122 * C50977) *
                      C1119 +
                  (((C25134 + C25133 + C25132) * C1123 -
                    ((C24949 + C24948 + C24947) * C1117 +
                     (C24946 + C24945 + C24944) * C1122) +
                    (C25137 + C25136 + C25135) * C51061) *
                       C51122 * C51236 +
                   ((C25484 + C25485 + C25486) * C1123 -
                    ((C24950 + C24951 + C24952) * C1117 +
                     (C24953 + C24954 + C24955) * C1122) +
                    (C25487 + C25488 + C25489) * C51061) *
                       C51122 * C50977) *
                      C1120 +
                  (((C24955 + C24954 + C24953) * C1122 +
                    (C24952 + C24951 + C24950) * C1117 -
                    (C25486 + C25485 + C25484) * C1123 -
                    (C25489 + C25488 + C25487) * C51061) *
                       C51122 * C51236 +
                   ((C24956 + C24957 + C24958) * C1122 +
                    (C24959 + C24960 + C24961) * C1117 -
                    (C24906 * C1226 + C24901 * C1233 + C24905 * C308 +
                     C51301 * C325 + C24904 * C307 + C51300 * C323) *
                        C1123 -
                    (C24906 * C1234 + C24901 * C1238 + C24905 * C326 +
                     C51301 * C338 + C24904 * C324 + C51300 * C337) *
                        C51061) *
                       C51122 * C50977) *
                      C1121) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1122 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C1117 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1123 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C1122 +
                    (C24947 + C24948 + C24949) * C1117 -
                    (C25132 + C25133 + C25134) * C1123 -
                    (C25135 + C25136 + C25137) * C51061) *
                       C51122 * C50977) *
                      C50991 * C493 +
                  (((C24904 * C969 + C51300 * C974 + C24905 * C1717 +
                     C51301 * C1721 + C24906 * C3416 + C24901 * C3419) *
                        C1123 -
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C1117 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C1122) +
                    (C24904 * C975 + C51300 * C984 + C24905 * C1722 +
                     C51301 * C1729 + C24906 * C3420 + C24901 * C3425) *
                        C51061) *
                       C51122 * C51236 +
                   ((C25860 + C25861 + C25862) * C1123 -
                    ((C25319 + C25318 + C25317) * C1117 +
                     (C25316 + C25315 + C25314) * C1122) +
                    (C25863 + C25864 + C25865) * C51061) *
                       C51122 * C50977) *
                      C50991 * C494 +
                  (((C24904 * C501 + C51300 * C516 + C24905 * C1337 +
                     C51301 * C1341 + C24906 * C2846 + C24901 * C2849) *
                        C1122 +
                    (C24904 * C517 + C51300 * C531 + C24905 * C1342 +
                     C51301 * C1349 + C24906 * C2850 + C24901 * C2855) *
                        C1117 -
                    (C24906 * C3844 + C24901 * C3846 + C24905 * C2846 +
                     C51301 * C2849 + C24904 * C1337 + C51300 * C1341) *
                        C1123 -
                    (C24906 * C3847 + C24901 * C3850 + C24905 * C2850 +
                     C51301 * C2855 + C24904 * C1342 + C51300 * C1349) *
                        C51061) *
                       C51122 * C51236 +
                   ((C25320 + C25321 + C25322) * C1122 +
                    (C25323 + C25324 + C25325) * C1117 -
                    (C24906 * C3845 + C24901 * C3848 + C24905 * C2847 +
                     C51301 * C2851 + C24904 * C1338 + C51300 * C1343) *
                        C1123 -
                    (C24906 * C3849 + C24901 * C3851 + C24905 * C2852 +
                     C51301 * C2856 + C24904 * C1344 + C51300 * C1350) *
                        C51061) *
                       C51122 * C50977) *
                      C50991 * C495)) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C1122 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C1117 -
                     (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                      C51301 * C313 + C24904 * C301 + C51300 * C311) *
                         C1123 -
                     (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                      C51301 * C332 + C24904 * C312 + C51300 * C331) *
                         C51061) *
                        C51122 * C51236 +
                    ((C24944 + C24945 + C24946) * C1122 +
                     (C24947 + C24948 + C24949) * C1117 -
                     (C25132 + C25133 + C25134) * C1123 -
                     (C25135 + C25136 + C25137) * C51061) *
                        C51122 * C50977) *
                       C51243 +
                   (((C25134 + C25133 + C25132) * C1123 -
                     ((C24949 + C24948 + C24947) * C1117 +
                      (C24946 + C24945 + C24944) * C1122) +
                     (C25137 + C25136 + C25135) * C51061) *
                        C51122 * C51236 +
                    ((C25484 + C25485 + C25486) * C1123 -
                     ((C24950 + C24951 + C24952) * C1117 +
                      (C24953 + C24954 + C24955) * C1122) +
                     (C25487 + C25488 + C25489) * C51061) *
                        C51122 * C50977) *
                       C50996) *
                      C51252 +
                  ((((C24904 * C969 + C51300 * C974 + C24905 * C1717 +
                      C51301 * C1721 + C24906 * C3416 + C24901 * C3419) *
                         C1123 -
                     ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                       C51301 * C984 + C24904 * C514 + C51300 * C530) *
                          C1117 +
                      (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                       C51301 * C974 + C24904 * C500 + C51300 * C515) *
                          C1122) +
                     (C24904 * C975 + C51300 * C984 + C24905 * C1722 +
                      C51301 * C1729 + C24906 * C3420 + C24901 * C3425) *
                         C51061) *
                        C51122 * C51236 +
                    ((C25860 + C25861 + C25862) * C1123 -
                     ((C25319 + C25318 + C25317) * C1117 +
                      (C25316 + C25315 + C25314) * C1122) +
                     (C25863 + C25864 + C25865) * C51061) *
                        C51122 * C50977) *
                       C51243 +
                   (((C25314 + C25315 + C25316) * C1122 +
                     (C25317 + C25318 + C25319) * C1117 -
                     (C25862 + C25861 + C25860) * C1123 -
                     (C25865 + C25864 + C25863) * C51061) *
                        C51122 * C51236 +
                    ((C25648 + C25649 + C25650) * C1122 +
                     (C25651 + C25652 + C25653) * C1117 -
                     (C24906 * C3418 + C24901 * C3423 + C24905 * C1719 +
                      C51301 * C1725 + C24904 * C971 + C51300 * C978) *
                         C1123 -
                     (C24906 * C3424 + C24901 * C3427 + C24905 * C1726 +
                      C51301 * C1731 + C24904 * C979 + C51300 * C986) *
                         C51061) *
                        C51122 * C50977) *
                       C50996) *
                      C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1122 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C1117 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1123 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C1122 +
                    (C24947 + C24948 + C24949) * C1117 -
                    (C25132 + C25133 + C25134) * C1123 -
                    (C25135 + C25136 + C25137) * C51061) *
                       C51122 * C50977) *
                      C1119 +
                  (((C25134 + C25133 + C25132) * C1123 -
                    ((C24949 + C24948 + C24947) * C1117 +
                     (C24946 + C24945 + C24944) * C1122) +
                    (C25137 + C25136 + C25135) * C51061) *
                       C51122 * C51236 +
                   ((C25484 + C25485 + C25486) * C1123 -
                    ((C24950 + C24951 + C24952) * C1117 +
                     (C24953 + C24954 + C24955) * C1122) +
                    (C25487 + C25488 + C25489) * C51061) *
                       C51122 * C50977) *
                      C1120 +
                  (((C24955 + C24954 + C24953) * C1122 +
                    (C24952 + C24951 + C24950) * C1117 -
                    (C25486 + C25485 + C25484) * C1123 -
                    (C25489 + C25488 + C25487) * C51061) *
                       C51122 * C51236 +
                   ((C24956 + C24957 + C24958) * C1122 +
                    (C24959 + C24960 + C24961) * C1117 -
                    (C24906 * C1226 + C24901 * C1233 + C24905 * C308 +
                     C51301 * C325 + C24904 * C307 + C51300 * C323) *
                        C1123 -
                    (C24906 * C1234 + C24901 * C1238 + C24905 * C326 +
                     C51301 * C338 + C24904 * C324 + C51300 * C337) *
                        C51061) *
                       C51122 * C50977) *
                      C1121) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                    C51301 * C311 + C24906 * C302 + C24901 * C313) *
                       C1219 +
                   (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                    C51301 * C331 + C24906 * C314 + C24901 * C332) *
                       C1214 -
                   (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                    C51301 * C313 + C24904 * C301 + C51300 * C311) *
                       C1220 -
                   (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                    C51301 * C332 + C24904 * C312 + C51300 * C331) *
                       C1215 +
                   (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                    C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                       C1221 +
                   (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                    C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                       C1216 -
                   (C24906 * C3690 + C24901 * C3692 + C24905 * C2652 +
                    C51301 * C2655 + C24904 * C1223 + C51300 * C1227) *
                       C1222 -
                   (C24906 * C3693 + C24901 * C3696 + C24905 * C2656 +
                    C51301 * C2661 + C24904 * C1228 + C51300 * C1235) *
                       C1217) *
                      C51122 * C51236 +
                  ((C24944 + C24945 + C24946) * C1219 +
                   (C24947 + C24948 + C24949) * C1214 -
                   (C25132 + C25133 + C25134) * C1220 -
                   (C25135 + C25136 + C25137) * C1215 +
                   (C25138 + C25139 + C25140) * C1221 +
                   (C25141 + C25142 + C25143) * C1216 -
                   (C24906 * C3691 + C24901 * C3694 + C24905 * C2653 +
                    C51301 * C2657 + C24904 * C1224 + C51300 * C1229) *
                       C1222 -
                   (C24906 * C3695 + C24901 * C3697 + C24905 * C2658 +
                    C51301 * C2662 + C24904 * C1230 + C51300 * C1236) *
                       C1217) *
                      C51122 * C50977) *
                 C50991 * C51025) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C687 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51251 -
                     (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                      C51301 * C313 + C24904 * C301 + C51300 * C311) *
                         C688 -
                     (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                      C51301 * C332 + C24904 * C312 + C51300 * C331) *
                         C51061) *
                        C51122 * C51236 +
                    ((C24944 + C24945 + C24946) * C687 +
                     (C24947 + C24948 + C24949) * C51251 -
                     (C25132 + C25133 + C25134) * C688 -
                     (C25135 + C25136 + C25137) * C51061) *
                        C51122 * C50977) *
                       C51243 +
                   (((C25134 + C25133 + C25132) * C688 -
                     ((C24949 + C24948 + C24947) * C51251 +
                      (C24946 + C24945 + C24944) * C687) +
                     (C25137 + C25136 + C25135) * C51061) *
                        C51122 * C51236 +
                    ((C25484 + C25485 + C25486) * C688 -
                     ((C24950 + C24951 + C24952) * C51251 +
                      (C24953 + C24954 + C24955) * C687) +
                     (C25487 + C25488 + C25489) * C51061) *
                        C51122 * C50977) *
                       C50996) *
                      C1831 +
                  ((((C24904 * C969 + C51300 * C974 + C24905 * C1717 +
                      C51301 * C1721 + C24906 * C3416 + C24901 * C3419) *
                         C688 -
                     ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                       C51301 * C984 + C24904 * C514 + C51300 * C530) *
                          C51251 +
                      (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                       C51301 * C974 + C24904 * C500 + C51300 * C515) *
                          C687) +
                     (C24904 * C975 + C51300 * C984 + C24905 * C1722 +
                      C51301 * C1729 + C24906 * C3420 + C24901 * C3425) *
                         C51061) *
                        C51122 * C51236 +
                    ((C25860 + C25861 + C25862) * C688 -
                     ((C25319 + C25318 + C25317) * C51251 +
                      (C25316 + C25315 + C25314) * C687) +
                     (C25863 + C25864 + C25865) * C51061) *
                        C51122 * C50977) *
                       C51243 +
                   (((C25314 + C25315 + C25316) * C687 +
                     (C25317 + C25318 + C25319) * C51251 -
                     (C25862 + C25861 + C25860) * C688 -
                     (C25865 + C25864 + C25863) * C51061) *
                        C51122 * C51236 +
                    ((C25648 + C25649 + C25650) * C687 +
                     (C25651 + C25652 + C25653) * C51251 -
                     (C24906 * C3418 + C24901 * C3423 + C24905 * C1719 +
                      C51301 * C1725 + C24904 * C971 + C51300 * C978) *
                         C688 -
                     (C24906 * C3424 + C24901 * C3427 + C24905 * C1726 +
                      C51301 * C1731 + C24904 * C979 + C51300 * C986) *
                         C51061) *
                        C51122 * C50977) *
                       C50996) *
                      C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[86] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C687 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51251 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C688 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C687 +
                    (C24947 + C24948 + C24949) * C51251 -
                    (C25132 + C25133 + C25134) * C688 -
                    (C25135 + C25136 + C25137) * C51061) *
                       C51122 * C50977) *
                      C50991 * C51298 +
                  (((C24904 * C969 + C51300 * C974 + C24905 * C1717 +
                     C51301 * C1721 + C24906 * C3416 + C24901 * C3419) *
                        C688 -
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C51251 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C687) +
                    (C24904 * C975 + C51300 * C984 + C24905 * C1722 +
                     C51301 * C1729 + C24906 * C3420 + C24901 * C3425) *
                        C51061) *
                       C51122 * C51236 +
                   ((C25860 + C25861 + C25862) * C688 -
                    ((C25319 + C25318 + C25317) * C51251 +
                     (C25316 + C25315 + C25314) * C687) +
                    (C25863 + C25864 + C25865) * C51061) *
                       C51122 * C50977) *
                      C50991 * C51299 +
                  (((C24904 * C501 + C51300 * C516 + C24905 * C1337 +
                     C51301 * C1341 + C24906 * C2846 + C24901 * C2849) *
                        C687 +
                    (C24904 * C517 + C51300 * C531 + C24905 * C1342 +
                     C51301 * C1349 + C24906 * C2850 + C24901 * C2855) *
                        C51251 -
                    (C24906 * C3844 + C24901 * C3846 + C24905 * C2846 +
                     C51301 * C2849 + C24904 * C1337 + C51300 * C1341) *
                        C688 -
                    (C24906 * C3847 + C24901 * C3850 + C24905 * C2850 +
                     C51301 * C2855 + C24904 * C1342 + C51300 * C1349) *
                        C51061) *
                       C51122 * C51236 +
                   ((C25320 + C25321 + C25322) * C687 +
                    (C25323 + C25324 + C25325) * C51251 -
                    (C24906 * C3845 + C24901 * C3848 + C24905 * C2847 +
                     C51301 * C2851 + C24904 * C1338 + C51300 * C1343) *
                        C688 -
                    (C24906 * C3849 + C24901 * C3851 + C24905 * C2852 +
                     C51301 * C2856 + C24904 * C1344 + C51300 * C1350) *
                        C51061) *
                       C51122 * C50977) *
                      C50991 * C2247)) /
                (p * q * std::sqrt(p + q));
    d2ee[87] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C298 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C293 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C299 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C294 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C300 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C295) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C298 +
                    (C24947 + C24948 + C24949) * C293 -
                    (C25132 + C25133 + C25134) * C299 -
                    (C25135 + C25136 + C25137) * C294 +
                    (C25138 + C25139 + C25140) * C300 +
                    (C25141 + C25142 + C25143) * C295) *
                       C51122 * C50977) *
                      C50991 * C1831 +
                  (((C24904 * C969 + C51300 * C974 + C24905 * C1717 +
                     C51301 * C1721 + C24906 * C3416 + C24901 * C3419) *
                        C299 -
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C293 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C298) +
                    (C24904 * C975 + C51300 * C984 + C24905 * C1722 +
                     C51301 * C1729 + C24906 * C3420 + C24901 * C3425) *
                        C294 -
                    (C24906 * C4338 + C24901 * C4340 + C24905 * C3416 +
                     C51301 * C3419 + C24904 * C1717 + C51300 * C1721) *
                        C300 -
                    (C24906 * C4341 + C24901 * C4344 + C24905 * C3420 +
                     C51301 * C3425 + C24904 * C1722 + C51300 * C1729) *
                        C295) *
                       C51122 * C51236 +
                   ((C25860 + C25861 + C25862) * C299 -
                    ((C25319 + C25318 + C25317) * C293 +
                     (C25316 + C25315 + C25314) * C298) +
                    (C25863 + C25864 + C25865) * C294 -
                    (C24906 * C4339 + C24901 * C4342 + C24905 * C3417 +
                     C51301 * C3421 + C24904 * C1718 + C51300 * C1723) *
                        C300 -
                    (C24906 * C4343 + C24901 * C4345 + C24905 * C3422 +
                     C51301 * C3426 + C24904 * C1724 + C51300 * C1730) *
                        C295) *
                       C51122 * C50977) *
                      C50991 * C51089)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C118 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51009) *
                        C51122 * C51236 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51009) *
                        C51122 * C50977) *
                       C1119 -
                   (((C24950 + C24951 + C24952) * C51009 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51122 * C50977 +
                    ((C24949 + C24948 + C24947) * C51009 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51122 * C51236) *
                       C1120 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51009) *
                        C51122 * C51236 +
                    ((C24956 + C24957 + C24958) * C118 +
                     (C24959 + C24960 + C24961) * C51009) *
                        C51122 * C50977) *
                       C1121) *
                      C1831 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51009) *
                        C51122 * C51236 +
                    ((C25648 + C25649 + C25650) * C118 +
                     (C25651 + C25652 + C25653) * C51009) *
                        C51122 * C50977) *
                       C1120 -
                   (((C25319 + C25318 + C25317) * C51009 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51122 * C50977 +
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C51009 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C118) *
                        C51122 * C51236) *
                       C1119 -
                   (((C24906 * C1728 + C24901 * C1732 + C24905 * C981 +
                      C51301 * C987 + C24904 * C511 + C51300 * C528) *
                         C51009 +
                     (C24906 * C1720 + C24901 * C1727 + C24905 * C972 +
                      C51301 * C980 + C24904 * C498 + C51300 * C510) *
                         C118) *
                        C51122 * C50977 +
                    ((C25653 + C25652 + C25651) * C51009 +
                     (C25650 + C25649 + C25648) * C118) *
                        C51122 * C51236) *
                       C1121) *
                      C51089)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C118 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51009) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C118 +
                    (C24947 + C24948 + C24949) * C51009) *
                       C51122 * C50977) *
                      C50991 * C1997 -
                  (((C25319 + C25318 + C25317) * C51009 +
                    (C25316 + C25315 + C25314) * C118) *
                       C51122 * C50977 +
                   ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                     C51301 * C984 + C24904 * C514 + C51300 * C530) *
                        C51009 +
                    (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                     C51301 * C974 + C24904 * C500 + C51300 * C515) *
                        C118) *
                       C51122 * C51236) *
                      C50991 * C1998 +
                  (((C24904 * C501 + C51300 * C516 + C24905 * C1337 +
                     C51301 * C1341 + C24906 * C2846 + C24901 * C2849) *
                        C118 +
                    (C24904 * C517 + C51300 * C531 + C24905 * C1342 +
                     C51301 * C1349 + C24906 * C2850 + C24901 * C2855) *
                        C51009) *
                       C51122 * C51236 +
                   ((C25320 + C25321 + C25322) * C118 +
                    (C25323 + C25324 + C25325) * C51009) *
                       C51122 * C50977) *
                      C50991 * C1999 -
                  (((C24906 * C4740 + C24901 * C4748 + C24905 * C4741 +
                     C51301 * C4749 + C24904 * C2009 + C51300 * C2015) *
                        C51009 +
                    (C24906 * C4736 + C24901 * C4742 + C24905 * C4737 +
                     C51301 * C4743 + C24904 * C2003 + C51300 * C2010) *
                        C118) *
                       C51122 * C50977 +
                   ((C24906 * C4744 + C24901 * C4750 + C24905 * C4745 +
                     C51301 * C4751 + C24904 * C2011 + C51300 * C2016) *
                        C51009 +
                    (C24906 * C4738 + C24901 * C4746 + C24905 * C4739 +
                     C51301 * C4747 + C24904 * C2004 + C51300 * C2012) *
                        C118) *
                       C51122 * C51236) *
                      C50991 * C2000)) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C118 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51009) *
                        C51122 * C51236 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51009) *
                        C51122 * C50977) *
                       C51243 -
                   (((C24950 + C24951 + C24952) * C51009 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51122 * C50977 +
                    ((C24949 + C24948 + C24947) * C51009 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51122 * C51236) *
                       C50996) *
                      C51298 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51009) *
                        C51122 * C51236 +
                    ((C25648 + C25649 + C25650) * C118 +
                     (C25651 + C25652 + C25653) * C51009) *
                        C51122 * C50977) *
                       C50996 -
                   (((C25319 + C25318 + C25317) * C51009 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51122 * C50977 +
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C51009 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C118) *
                        C51122 * C51236) *
                       C51243) *
                      C51299 +
                  ((((C24904 * C501 + C51300 * C516 + C24905 * C1337 +
                      C51301 * C1341 + C24906 * C2846 + C24901 * C2849) *
                         C118 +
                     (C24904 * C517 + C51300 * C531 + C24905 * C1342 +
                      C51301 * C1349 + C24906 * C2850 + C24901 * C2855) *
                         C51009) *
                        C51122 * C51236 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51009) *
                        C51122 * C50977) *
                       C51243 -
                   (((C24906 * C2853 + C24901 * C2857 + C24905 * C1346 +
                      C51301 * C1351 + C24904 * C521 + C51300 * C533) *
                         C51009 +
                     (C24906 * C2848 + C24901 * C2854 + C24905 * C1339 +
                      C51301 * C1345 + C24904 * C503 + C51300 * C520) *
                         C118) *
                        C51122 * C50977 +
                    ((C25325 + C25324 + C25323) * C51009 +
                     (C25322 + C25321 + C25320) * C118) *
                        C51122 * C51236) *
                       C50996) *
                      C2247)) /
                (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C118 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51009) *
                        C51122 * C51236 +
                    ((C24944 + C24945 + C24946) * C118 +
                     (C24947 + C24948 + C24949) * C51009) *
                        C51122 * C50977) *
                       C1119 -
                   (((C24950 + C24951 + C24952) * C51009 +
                     (C24953 + C24954 + C24955) * C118) *
                        C51122 * C50977 +
                    ((C24949 + C24948 + C24947) * C51009 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51122 * C51236) *
                       C1120 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51009) *
                        C51122 * C51236 +
                    ((C24956 + C24957 + C24958) * C118 +
                     (C24959 + C24960 + C24961) * C51009) *
                        C51122 * C50977) *
                       C1121) *
                      C1831 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51009) *
                        C51122 * C51236 +
                    ((C25648 + C25649 + C25650) * C118 +
                     (C25651 + C25652 + C25653) * C51009) *
                        C51122 * C50977) *
                       C1120 -
                   (((C25319 + C25318 + C25317) * C51009 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51122 * C50977 +
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C51009 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C118) *
                        C51122 * C51236) *
                       C1119 -
                   (((C24906 * C1728 + C24901 * C1732 + C24905 * C981 +
                      C51301 * C987 + C24904 * C511 + C51300 * C528) *
                         C51009 +
                     (C24906 * C1720 + C24901 * C1727 + C24905 * C972 +
                      C51301 * C980 + C24904 * C498 + C51300 * C510) *
                         C118) *
                        C51122 * C50977 +
                    ((C25653 + C25652 + C25651) * C51009 +
                     (C25650 + C25649 + C25648) * C118) *
                        C51122 * C51236) *
                       C1121) *
                      C51089)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C298 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C293 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C299 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C294 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C300 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C295) *
                       C51122 * C51236 +
                   ((C24944 + C24945 + C24946) * C298 +
                    (C24947 + C24948 + C24949) * C293 -
                    (C25132 + C25133 + C25134) * C299 -
                    (C25135 + C25136 + C25137) * C294 +
                    (C25138 + C25139 + C25140) * C300 +
                    (C25141 + C25142 + C25143) * C295) *
                       C51122 * C50977) *
                      C50991 * C1831 +
                  (((C24904 * C969 + C51300 * C974 + C24905 * C1717 +
                     C51301 * C1721 + C24906 * C3416 + C24901 * C3419) *
                        C299 -
                    ((C24906 * C1722 + C24901 * C1729 + C24905 * C975 +
                      C51301 * C984 + C24904 * C514 + C51300 * C530) *
                         C293 +
                     (C24906 * C1717 + C24901 * C1721 + C24905 * C969 +
                      C51301 * C974 + C24904 * C500 + C51300 * C515) *
                         C298) +
                    (C24904 * C975 + C51300 * C984 + C24905 * C1722 +
                     C51301 * C1729 + C24906 * C3420 + C24901 * C3425) *
                        C294 -
                    (C24906 * C4338 + C24901 * C4340 + C24905 * C3416 +
                     C51301 * C3419 + C24904 * C1717 + C51300 * C1721) *
                        C300 -
                    (C24906 * C4341 + C24901 * C4344 + C24905 * C3420 +
                     C51301 * C3425 + C24904 * C1722 + C51300 * C1729) *
                        C295) *
                       C51122 * C51236 +
                   ((C25860 + C25861 + C25862) * C299 -
                    ((C25319 + C25318 + C25317) * C293 +
                     (C25316 + C25315 + C25314) * C298) +
                    (C25863 + C25864 + C25865) * C294 -
                    (C24906 * C4339 + C24901 * C4342 + C24905 * C3417 +
                     C51301 * C3421 + C24904 * C1718 + C51300 * C1723) *
                        C300 -
                    (C24906 * C4343 + C24901 * C4345 + C24905 * C3422 +
                     C51301 * C3426 + C24904 * C1724 + C51300 * C1730) *
                        C295) *
                       C51122 * C50977) *
                      C50991 * C51089)) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C687 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51251 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C688 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51265 +
                   ((C31588 + C31589 + C31590) * C687 +
                    (C31591 + C31592 + C31593) * C51251 -
                    (C24906 * C3416 + C24901 * C3419 + C24905 * C1717 +
                     C51301 * C1721 + C24904 * C969 + C51300 * C974) *
                        C688 -
                    (C24906 * C3420 + C24901 * C3425 + C24905 * C1722 +
                     C51301 * C1729 + C24904 * C975 + C51300 * C984) *
                        C51061) *
                       C51186) *
                      C50972 * C51294 +
                  (((C25134 + C25133 + C25132) * C688 -
                    ((C24949 + C24948 + C24947) * C51251 +
                     (C24946 + C24945 + C24944) * C687) +
                    (C25137 + C25136 + C25135) * C51061) *
                       C51265 +
                   ((C25860 + C25861 + C25862) * C688 -
                    ((C25319 + C25318 + C25317) * C51251 +
                     (C25316 + C25315 + C25314) * C687) +
                    (C25863 + C25864 + C25865) * C51061) *
                       C51186) *
                      C50972 * C51295 +
                  (((C24955 + C24954 + C24953) * C687 +
                    (C24952 + C24951 + C24950) * C51251 -
                    (C25486 + C25485 + C25484) * C688 -
                    (C25489 + C25488 + C25487) * C51061) *
                       C51265 +
                   ((C25648 + C25649 + C25650) * C687 +
                    (C25651 + C25652 + C25653) * C51251 -
                    (C24906 * C3418 + C24901 * C3423 + C24905 * C1719 +
                     C51301 * C1725 + C24904 * C971 + C51300 * C978) *
                        C688 -
                    (C24906 * C3424 + C24901 * C3427 + C24905 * C1726 +
                     C51301 * C1731 + C24904 * C979 + C51300 * C986) *
                        C51061) *
                       C51186) *
                      C50972 * C686) *
                 C51025) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C687 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51251 -
                     (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                      C51301 * C313 + C24904 * C301 + C51300 * C311) *
                         C688 -
                     (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                      C51301 * C332 + C24904 * C312 + C51300 * C331) *
                         C51061) *
                        C51265 +
                    ((C31588 + C31589 + C31590) * C687 +
                     (C31591 + C31592 + C31593) * C51251 -
                     (C32098 + C32099 + C32100) * C688 -
                     (C32101 + C32102 + C32103) * C51061) *
                        C51186) *
                       C50972 * C296 +
                   (((C25134 + C25133 + C25132) * C688 -
                     ((C24949 + C24948 + C24947) * C51251 +
                      (C24946 + C24945 + C24944) * C687) +
                     (C25137 + C25136 + C25135) * C51061) *
                        C51265 +
                    ((C25860 + C25861 + C25862) * C688 -
                     ((C25319 + C25318 + C25317) * C51251 +
                      (C25316 + C25315 + C25314) * C687) +
                     (C25863 + C25864 + C25865) * C51061) *
                        C51186) *
                       C50972 * C50996) *
                      C51252 +
                  ((((C32100 + C32099 + C32098) * C688 -
                     ((C31593 + C31592 + C31591) * C51251 +
                      (C31590 + C31589 + C31588) * C687) +
                     (C32103 + C32102 + C32101) * C51061) *
                        C51265 +
                    ((C24904 * C1337 + C51300 * C1341 + C24905 * C2846 +
                      C51301 * C2849 + C24906 * C3844 + C24901 * C3846) *
                         C688 -
                     ((C31594 + C31595 + C31596) * C51251 +
                      (C31597 + C31598 + C31599) * C687) +
                     (C24904 * C1342 + C51300 * C1349 + C24905 * C2850 +
                      C51301 * C2855 + C24906 * C3847 + C24901 * C3850) *
                         C51061) *
                        C51186) *
                       C50972 * C296 +
                   (((C25314 + C25315 + C25316) * C687 +
                     (C25317 + C25318 + C25319) * C51251 -
                     (C25862 + C25861 + C25860) * C688 -
                     (C25865 + C25864 + C25863) * C51061) *
                        C51265 +
                    ((C25320 + C25321 + C25322) * C687 +
                     (C25323 + C25324 + C25325) * C51251 -
                     (C24906 * C3845 + C24901 * C3848 + C24905 * C2847 +
                      C51301 * C2851 + C24904 * C1338 + C51300 * C1343) *
                         C688 -
                     (C24906 * C3849 + C24901 * C3851 + C24905 * C2852 +
                      C51301 * C2856 + C24904 * C1344 + C51300 * C1350) *
                         C51061) *
                        C51186) *
                       C50972 * C50996) *
                      C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C298 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C293 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C299 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C294 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C300 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C295) *
                       C51265 +
                   ((C24904 * C500 + C51300 * C515 + C24905 * C969 +
                     C51301 * C974 + C24906 * C1717 + C24901 * C1721) *
                        C298 +
                    (C24904 * C514 + C51300 * C530 + C24905 * C975 +
                     C51301 * C984 + C24906 * C1722 + C24901 * C1729) *
                        C293 -
                    (C24906 * C3416 + C24901 * C3419 + C24905 * C1717 +
                     C51301 * C1721 + C24904 * C969 + C51300 * C974) *
                        C299 -
                    (C24906 * C3420 + C24901 * C3425 + C24905 * C1722 +
                     C51301 * C1729 + C24904 * C975 + C51300 * C984) *
                        C294 +
                    (C24904 * C1717 + C51300 * C1721 + C24905 * C3416 +
                     C51301 * C3419 + C24906 * C4338 + C24901 * C4340) *
                        C300 +
                    (C24904 * C1722 + C51300 * C1729 + C24905 * C3420 +
                     C51301 * C3425 + C24906 * C4341 + C24901 * C4344) *
                        C295) *
                       C51186) *
                      C50972 * C296 +
                  (((C25134 + C25133 + C25132) * C299 -
                    ((C24949 + C24948 + C24947) * C293 +
                     (C24946 + C24945 + C24944) * C298) +
                    (C25137 + C25136 + C25135) * C294 -
                    (C25140 + C25139 + C25138) * C300 -
                    (C25143 + C25142 + C25141) * C295) *
                       C51265 +
                   ((C25860 + C25861 + C25862) * C299 -
                    ((C25319 + C25318 + C25317) * C293 +
                     (C25316 + C25315 + C25314) * C298) +
                    (C25863 + C25864 + C25865) * C294 -
                    (C24906 * C4339 + C24901 * C4342 + C24905 * C3417 +
                     C51301 * C3421 + C24904 * C1718 + C51300 * C1723) *
                        C300 -
                    (C24906 * C4343 + C24901 * C4345 + C24905 * C3422 +
                     C51301 * C3426 + C24904 * C1724 + C51300 * C1730) *
                        C295) *
                       C51186) *
                      C50972 * C50996) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C118 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51009) *
                       C51265 +
                   ((C24904 * C500 + C51300 * C515 + C24905 * C969 +
                     C51301 * C974 + C24906 * C1717 + C24901 * C1721) *
                        C118 +
                    (C24904 * C514 + C51300 * C530 + C24905 * C975 +
                     C51301 * C984 + C24906 * C1722 + C24901 * C1729) *
                        C51009) *
                       C51186) *
                      C50972 * C112 -
                  (((C25319 + C25318 + C25317) * C51009 +
                    (C25316 + C25315 + C25314) * C118) *
                       C51186 +
                   ((C24949 + C24948 + C24947) * C51009 +
                    (C24946 + C24945 + C24944) * C118) *
                       C51265) *
                      C50972 * C113 +
                  (((C24955 + C24954 + C24953) * C118 +
                    (C24952 + C24951 + C24950) * C51009) *
                       C51265 +
                   ((C25648 + C25649 + C25650) * C118 +
                    (C25651 + C25652 + C25653) * C51009) *
                       C51186) *
                      C50972 * C114 -
                  (((C24906 * C1728 + C24901 * C1732 + C24905 * C981 +
                     C51301 * C987 + C24904 * C511 + C51300 * C528) *
                        C51009 +
                    (C24906 * C1720 + C24901 * C1727 + C24905 * C972 +
                     C51301 * C980 + C24904 * C498 + C51300 * C510) *
                        C118) *
                       C51186 +
                   ((C24961 + C24960 + C24959) * C51009 +
                    (C24958 + C24957 + C24956) * C118) *
                       C51265) *
                      C50972 * C115) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C118 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51009) *
                        C51265 +
                    ((C31588 + C31589 + C31590) * C118 +
                     (C31591 + C31592 + C31593) * C51009) *
                        C51186) *
                       C50972 * C296 -
                   (((C25319 + C25318 + C25317) * C51009 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51186 +
                    ((C24949 + C24948 + C24947) * C51009 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51265) *
                       C50972 * C50996) *
                      C493 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51009) *
                        C51265 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51009) *
                        C51186) *
                       C50972 * C50996 -
                   (((C31594 + C31595 + C31596) * C51009 +
                     (C31597 + C31598 + C31599) * C118) *
                        C51186 +
                    ((C31593 + C31592 + C31591) * C51009 +
                     (C31590 + C31589 + C31588) * C118) *
                        C51265) *
                       C50972 * C296) *
                      C494 +
                  ((((C31599 + C31598 + C31597) * C118 +
                     (C31596 + C31595 + C31594) * C51009) *
                        C51265 +
                    ((C24904 * C2004 + C51300 * C2012 + C24905 * C4739 +
                      C51301 * C4747 + C24906 * C4738 + C24901 * C4746) *
                         C118 +
                     (C24904 * C2011 + C51300 * C2016 + C24905 * C4745 +
                      C51301 * C4751 + C24906 * C4744 + C24901 * C4750) *
                         C51009) *
                        C51186) *
                       C50972 * C296 -
                   (((C24906 * C4740 + C24901 * C4748 + C24905 * C4741 +
                      C51301 * C4749 + C24904 * C2009 + C51300 * C2015) *
                         C51009 +
                     (C24906 * C4736 + C24901 * C4742 + C24905 * C4737 +
                      C51301 * C4743 + C24904 * C2003 + C51300 * C2010) *
                         C118) *
                        C51186 +
                    ((C25325 + C25324 + C25323) * C51009 +
                     (C25322 + C25321 + C25320) * C118) *
                        C51265) *
                       C50972 * C50996) *
                      C495)) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C118 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51009) *
                        C51265 +
                    ((C31588 + C31589 + C31590) * C118 +
                     (C31591 + C31592 + C31593) * C51009) *
                        C51186) *
                       C50972 * C51294 -
                   (((C25319 + C25318 + C25317) * C51009 +
                     (C25316 + C25315 + C25314) * C118) *
                        C51186 +
                    ((C24949 + C24948 + C24947) * C51009 +
                     (C24946 + C24945 + C24944) * C118) *
                        C51265) *
                       C50972 * C51295 +
                   (((C24955 + C24954 + C24953) * C118 +
                     (C24952 + C24951 + C24950) * C51009) *
                        C51265 +
                    ((C25648 + C25649 + C25650) * C118 +
                     (C25651 + C25652 + C25653) * C51009) *
                        C51186) *
                       C50972 * C686) *
                      C51252 +
                  ((((C25314 + C25315 + C25316) * C118 +
                     (C25317 + C25318 + C25319) * C51009) *
                        C51265 +
                    ((C25320 + C25321 + C25322) * C118 +
                     (C25323 + C25324 + C25325) * C51009) *
                        C51186) *
                       C50972 * C51295 -
                   (((C31594 + C31595 + C31596) * C51009 +
                     (C31597 + C31598 + C31599) * C118) *
                        C51186 +
                    ((C31593 + C31592 + C31591) * C51009 +
                     (C31590 + C31589 + C31588) * C118) *
                        C51265) *
                       C50972 * C51294 -
                   (((C24906 * C2853 + C24901 * C2857 + C24905 * C1346 +
                      C51301 * C1351 + C24904 * C521 + C51300 * C533) *
                         C51009 +
                     (C24906 * C2848 + C24901 * C2854 + C24905 * C1339 +
                      C51301 * C1345 + C24904 * C503 + C51300 * C520) *
                         C118) *
                        C51186 +
                    ((C25653 + C25652 + C25651) * C51009 +
                     (C25650 + C25649 + C25648) * C118) *
                        C51265) *
                       C50972 * C686) *
                      C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C118 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51009) *
                       C51265 +
                   ((C24904 * C500 + C51300 * C515 + C24905 * C969 +
                     C51301 * C974 + C24906 * C1717 + C24901 * C1721) *
                        C118 +
                    (C24904 * C514 + C51300 * C530 + C24905 * C975 +
                     C51301 * C984 + C24906 * C1722 + C24901 * C1729) *
                        C51009) *
                       C51186) *
                      C50972 * C112 -
                  (((C25319 + C25318 + C25317) * C51009 +
                    (C25316 + C25315 + C25314) * C118) *
                       C51186 +
                   ((C24949 + C24948 + C24947) * C51009 +
                    (C24946 + C24945 + C24944) * C118) *
                       C51265) *
                      C50972 * C113 +
                  (((C24955 + C24954 + C24953) * C118 +
                    (C24952 + C24951 + C24950) * C51009) *
                       C51265 +
                   ((C25648 + C25649 + C25650) * C118 +
                    (C25651 + C25652 + C25653) * C51009) *
                       C51186) *
                      C50972 * C114 -
                  (((C24906 * C1728 + C24901 * C1732 + C24905 * C981 +
                     C51301 * C987 + C24904 * C511 + C51300 * C528) *
                        C51009 +
                    (C24906 * C1720 + C24901 * C1727 + C24905 * C972 +
                     C51301 * C980 + C24904 * C498 + C51300 * C510) *
                        C118) *
                       C51186 +
                   ((C24961 + C24960 + C24959) * C51009 +
                    (C24958 + C24957 + C24956) * C118) *
                       C51265) *
                      C50972 * C115) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C298 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C293 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C299 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C294 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C300 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C295) *
                       C51265 +
                   ((C24904 * C500 + C51300 * C515 + C24905 * C969 +
                     C51301 * C974 + C24906 * C1717 + C24901 * C1721) *
                        C298 +
                    (C24904 * C514 + C51300 * C530 + C24905 * C975 +
                     C51301 * C984 + C24906 * C1722 + C24901 * C1729) *
                        C293 -
                    (C24906 * C3416 + C24901 * C3419 + C24905 * C1717 +
                     C51301 * C1721 + C24904 * C969 + C51300 * C974) *
                        C299 -
                    (C24906 * C3420 + C24901 * C3425 + C24905 * C1722 +
                     C51301 * C1729 + C24904 * C975 + C51300 * C984) *
                        C294 +
                    (C24904 * C1717 + C51300 * C1721 + C24905 * C3416 +
                     C51301 * C3419 + C24906 * C4338 + C24901 * C4340) *
                        C300 +
                    (C24904 * C1722 + C51300 * C1729 + C24905 * C3420 +
                     C51301 * C3425 + C24906 * C4341 + C24901 * C4344) *
                        C295) *
                       C51186) *
                      C50972 * C296 +
                  (((C25134 + C25133 + C25132) * C299 -
                    ((C24949 + C24948 + C24947) * C293 +
                     (C24946 + C24945 + C24944) * C298) +
                    (C25137 + C25136 + C25135) * C294 -
                    (C25140 + C25139 + C25138) * C300 -
                    (C25143 + C25142 + C25141) * C295) *
                       C51265 +
                   ((C25860 + C25861 + C25862) * C299 -
                    ((C25319 + C25318 + C25317) * C293 +
                     (C25316 + C25315 + C25314) * C298) +
                    (C25863 + C25864 + C25865) * C294 -
                    (C24906 * C4339 + C24901 * C4342 + C24905 * C3417 +
                     C51301 * C3421 + C24904 * C1718 + C51300 * C1723) *
                        C300 -
                    (C24906 * C4343 + C24901 * C4345 + C24905 * C3422 +
                     C51301 * C3426 + C24904 * C1724 + C51300 * C1730) *
                        C295) *
                       C51186) *
                      C50972 * C50996) *
                 C51025) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1456 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51296 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1457 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51297 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C1458 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C1453) *
                       C51265 +
                   ((C31588 + C31589 + C31590) * C1456 +
                    (C31591 + C31592 + C31593) * C51296 -
                    (C32098 + C32099 + C32100) * C1457 -
                    (C32101 + C32102 + C32103) * C51297 +
                    (C24904 * C1717 + C51300 * C1721 + C24905 * C3416 +
                     C51301 * C3419 + C24906 * C4338 + C24901 * C4340) *
                        C1458 +
                    (C24904 * C1722 + C51300 * C1729 + C24905 * C3420 +
                     C51301 * C3425 + C24906 * C4341 + C24901 * C4344) *
                        C1453) *
                       C51186) *
                      C50972 * C51243 +
                  (((C25134 + C25133 + C25132) * C1457 -
                    ((C24949 + C24948 + C24947) * C51296 +
                     (C24946 + C24945 + C24944) * C1456) +
                    (C25137 + C25136 + C25135) * C51297 -
                    (C25140 + C25139 + C25138) * C1458 -
                    (C25143 + C25142 + C25141) * C1453) *
                       C51265 +
                   ((C25860 + C25861 + C25862) * C1457 -
                    ((C25319 + C25318 + C25317) * C51296 +
                     (C25316 + C25315 + C25314) * C1456) +
                    (C25863 + C25864 + C25865) * C51297 -
                    (C24906 * C4339 + C24901 * C4342 + C24905 * C3417 +
                     C51301 * C3421 + C24904 * C1718 + C51300 * C1723) *
                        C1458 -
                    (C24906 * C4343 + C24901 * C4345 + C24905 * C3422 +
                     C51301 * C3426 + C24904 * C1724 + C51300 * C1730) *
                        C1453) *
                       C51186) *
                      C50972 * C50996) *
                 C51025) /
                (p * q * std::sqrt(p + q));
    d2ee[96] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1456 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C51296 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1457 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51297 +
                    (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                     C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                        C1458 +
                    (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                     C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                        C1453) *
                       C51265 +
                   ((C31588 + C31589 + C31590) * C1456 +
                    (C31591 + C31592 + C31593) * C51296 -
                    (C32098 + C32099 + C32100) * C1457 -
                    (C32101 + C32102 + C32103) * C51297 +
                    (C33010 + C33011 + C33012) * C1458 +
                    (C33013 + C33014 + C33015) * C1453) *
                       C51186) *
                      C50972 * C50991 * C51252 +
                  (((C32100 + C32099 + C32098) * C1457 -
                    ((C31593 + C31592 + C31591) * C51296 +
                     (C31590 + C31589 + C31588) * C1456) +
                    (C32103 + C32102 + C32101) * C51297 -
                    (C33012 + C33011 + C33010) * C1458 -
                    (C33015 + C33014 + C33013) * C1453) *
                       C51265 +
                   ((C32506 + C32507 + C32508) * C1457 -
                    ((C31594 + C31595 + C31596) * C51296 +
                     (C31597 + C31598 + C31599) * C1456) +
                    (C32509 + C32510 + C32511) * C51297 -
                    (C24906 * C21076 + C24901 * C21077 + C24905 * C3844 +
                     C51301 * C3846 + C24904 * C2846 + C51300 * C2849) *
                        C1458 -
                    (C24906 * C21078 + C24901 * C21079 + C24905 * C3847 +
                     C51301 * C3850 + C24904 * C2850 + C51300 * C2855) *
                        C1453) *
                       C51186) *
                      C50972 * C50991 * C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                    C51301 * C311 + C24906 * C302 + C24901 * C313) *
                       C1219 +
                   (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                    C51301 * C331 + C24906 * C314 + C24901 * C332) *
                       C1214 -
                   (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                    C51301 * C313 + C24904 * C301 + C51300 * C311) *
                       C1220 -
                   (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                    C51301 * C332 + C24904 * C312 + C51300 * C331) *
                       C1215 +
                   (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                    C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                       C1221 +
                   (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                    C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                       C1216 -
                   (C24906 * C3690 + C24901 * C3692 + C24905 * C2652 +
                    C51301 * C2655 + C24904 * C1223 + C51300 * C1227) *
                       C1222 -
                   (C24906 * C3693 + C24901 * C3696 + C24905 * C2656 +
                    C51301 * C2661 + C24904 * C1228 + C51300 * C1235) *
                       C1217) *
                      C51265 +
                  ((C31588 + C31589 + C31590) * C1219 +
                   (C31591 + C31592 + C31593) * C1214 -
                   (C32098 + C32099 + C32100) * C1220 -
                   (C32101 + C32102 + C32103) * C1215 +
                   (C24904 * C1717 + C51300 * C1721 + C24905 * C3416 +
                    C51301 * C3419 + C24906 * C4338 + C24901 * C4340) *
                       C1221 +
                   (C24904 * C1722 + C51300 * C1729 + C24905 * C3420 +
                    C51301 * C3425 + C24906 * C4341 + C24901 * C4344) *
                       C1216 -
                   (C24906 * C21406 + C24901 * C21407 + C24905 * C4338 +
                    C51301 * C4340 + C24904 * C3416 + C51300 * C3419) *
                       C1222 -
                   (C24906 * C21408 + C24901 * C21409 + C24905 * C4341 +
                    C51301 * C4344 + C24904 * C3420 + C51300 * C3425) *
                       C1217) *
                      C51186) *
                 C50972 * C50991 * C51025) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1122 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C1117 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1123 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51265 +
                   ((C31588 + C31589 + C31590) * C1122 +
                    (C31591 + C31592 + C31593) * C1117 -
                    (C32098 + C32099 + C32100) * C1123 -
                    (C32101 + C32102 + C32103) * C51061) *
                       C51186) *
                      C50972 * C1119 +
                  (((C25134 + C25133 + C25132) * C1123 -
                    ((C24949 + C24948 + C24947) * C1117 +
                     (C24946 + C24945 + C24944) * C1122) +
                    (C25137 + C25136 + C25135) * C51061) *
                       C51265 +
                   ((C25860 + C25861 + C25862) * C1123 -
                    ((C25319 + C25318 + C25317) * C1117 +
                     (C25316 + C25315 + C25314) * C1122) +
                    (C25863 + C25864 + C25865) * C51061) *
                       C51186) *
                      C50972 * C1120 +
                  (((C24955 + C24954 + C24953) * C1122 +
                    (C24952 + C24951 + C24950) * C1117 -
                    (C25486 + C25485 + C25484) * C1123 -
                    (C25489 + C25488 + C25487) * C51061) *
                       C51265 +
                   ((C25648 + C25649 + C25650) * C1122 +
                    (C25651 + C25652 + C25653) * C1117 -
                    (C24906 * C3418 + C24901 * C3423 + C24905 * C1719 +
                     C51301 * C1725 + C24904 * C971 + C51300 * C978) *
                        C1123 -
                    (C24906 * C3424 + C24901 * C3427 + C24905 * C1726 +
                     C51301 * C1731 + C24904 * C979 + C51300 * C986) *
                        C51061) *
                       C51186) *
                      C50972 * C1121) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1122 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C1117 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1123 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51265 +
                   ((C31588 + C31589 + C31590) * C1122 +
                    (C31591 + C31592 + C31593) * C1117 -
                    (C32098 + C32099 + C32100) * C1123 -
                    (C32101 + C32102 + C32103) * C51061) *
                       C51186) *
                      C50972 * C50991 * C493 +
                  (((C32100 + C32099 + C32098) * C1123 -
                    ((C31593 + C31592 + C31591) * C1117 +
                     (C31590 + C31589 + C31588) * C1122) +
                    (C32103 + C32102 + C32101) * C51061) *
                       C51265 +
                   ((C32506 + C32507 + C32508) * C1123 -
                    ((C31594 + C31595 + C31596) * C1117 +
                     (C31597 + C31598 + C31599) * C1122) +
                    (C32509 + C32510 + C32511) * C51061) *
                       C51186) *
                      C50972 * C50991 * C494 +
                  (((C31599 + C31598 + C31597) * C1122 +
                    (C31596 + C31595 + C31594) * C1117 -
                    (C32508 + C32507 + C32506) * C1123 -
                    (C32511 + C32510 + C32509) * C51061) *
                       C51265 +
                   ((C24904 * C2004 + C51300 * C2012 + C24905 * C4739 +
                     C51301 * C4747 + C24906 * C4738 + C24901 * C4746) *
                        C1122 +
                    (C24904 * C2011 + C51300 * C2016 + C24905 * C4745 +
                     C51301 * C4751 + C24906 * C4744 + C24901 * C4750) *
                        C1117 -
                    (C24906 * C21672 + C24901 * C21674 + C24905 * C4738 +
                     C51301 * C4746 + C24904 * C4739 + C51300 * C4747) *
                        C1123 -
                    (C24906 * C21673 + C24901 * C21675 + C24905 * C4744 +
                     C51301 * C4750 + C24904 * C4745 + C51300 * C4751) *
                        C51061) *
                       C51186) *
                      C50972 * C50991 * C495)) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C1122 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C1117 -
                     (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                      C51301 * C313 + C24904 * C301 + C51300 * C311) *
                         C1123 -
                     (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                      C51301 * C332 + C24904 * C312 + C51300 * C331) *
                         C51061) *
                        C51265 +
                    ((C31588 + C31589 + C31590) * C1122 +
                     (C31591 + C31592 + C31593) * C1117 -
                     (C32098 + C32099 + C32100) * C1123 -
                     (C32101 + C32102 + C32103) * C51061) *
                        C51186) *
                       C50972 * C51243 +
                   (((C25134 + C25133 + C25132) * C1123 -
                     ((C24949 + C24948 + C24947) * C1117 +
                      (C24946 + C24945 + C24944) * C1122) +
                     (C25137 + C25136 + C25135) * C51061) *
                        C51265 +
                    ((C25860 + C25861 + C25862) * C1123 -
                     ((C25319 + C25318 + C25317) * C1117 +
                      (C25316 + C25315 + C25314) * C1122) +
                     (C25863 + C25864 + C25865) * C51061) *
                        C51186) *
                       C50972 * C50996) *
                      C51252 +
                  ((((C32100 + C32099 + C32098) * C1123 -
                     ((C31593 + C31592 + C31591) * C1117 +
                      (C31590 + C31589 + C31588) * C1122) +
                     (C32103 + C32102 + C32101) * C51061) *
                        C51265 +
                    ((C32506 + C32507 + C32508) * C1123 -
                     ((C31594 + C31595 + C31596) * C1117 +
                      (C31597 + C31598 + C31599) * C1122) +
                     (C32509 + C32510 + C32511) * C51061) *
                        C51186) *
                       C50972 * C51243 +
                   (((C25314 + C25315 + C25316) * C1122 +
                     (C25317 + C25318 + C25319) * C1117 -
                     (C25862 + C25861 + C25860) * C1123 -
                     (C25865 + C25864 + C25863) * C51061) *
                        C51265 +
                    ((C25320 + C25321 + C25322) * C1122 +
                     (C25323 + C25324 + C25325) * C1117 -
                     (C24906 * C3845 + C24901 * C3848 + C24905 * C2847 +
                      C51301 * C2851 + C24904 * C1338 + C51300 * C1343) *
                         C1123 -
                     (C24906 * C3849 + C24901 * C3851 + C24905 * C2852 +
                      C51301 * C2856 + C24904 * C1344 + C51300 * C1350) *
                         C51061) *
                        C51186) *
                       C50972 * C50996) *
                      C51089)) /
                (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                     C51301 * C311 + C24906 * C302 + C24901 * C313) *
                        C1122 +
                    (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                     C51301 * C331 + C24906 * C314 + C24901 * C332) *
                        C1117 -
                    (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                     C51301 * C313 + C24904 * C301 + C51300 * C311) *
                        C1123 -
                    (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                     C51301 * C332 + C24904 * C312 + C51300 * C331) *
                        C51061) *
                       C51265 +
                   ((C31588 + C31589 + C31590) * C1122 +
                    (C31591 + C31592 + C31593) * C1117 -
                    (C32098 + C32099 + C32100) * C1123 -
                    (C32101 + C32102 + C32103) * C51061) *
                       C51186) *
                      C50972 * C1119 +
                  (((C25134 + C25133 + C25132) * C1123 -
                    ((C24949 + C24948 + C24947) * C1117 +
                     (C24946 + C24945 + C24944) * C1122) +
                    (C25137 + C25136 + C25135) * C51061) *
                       C51265 +
                   ((C25860 + C25861 + C25862) * C1123 -
                    ((C25319 + C25318 + C25317) * C1117 +
                     (C25316 + C25315 + C25314) * C1122) +
                    (C25863 + C25864 + C25865) * C51061) *
                       C51186) *
                      C50972 * C1120 +
                  (((C24955 + C24954 + C24953) * C1122 +
                    (C24952 + C24951 + C24950) * C1117 -
                    (C25486 + C25485 + C25484) * C1123 -
                    (C25489 + C25488 + C25487) * C51061) *
                       C51265 +
                   ((C25648 + C25649 + C25650) * C1122 +
                    (C25651 + C25652 + C25653) * C1117 -
                    (C24906 * C3418 + C24901 * C3423 + C24905 * C1719 +
                     C51301 * C1725 + C24904 * C971 + C51300 * C978) *
                        C1123 -
                    (C24906 * C3424 + C24901 * C3427 + C24905 * C1726 +
                     C51301 * C1731 + C24904 * C979 + C51300 * C986) *
                        C51061) *
                       C51186) *
                      C50972 * C1121) *
                 C51025) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                    C51301 * C311 + C24906 * C302 + C24901 * C313) *
                       C1219 +
                   (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                    C51301 * C331 + C24906 * C314 + C24901 * C332) *
                       C1214 -
                   (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                    C51301 * C313 + C24904 * C301 + C51300 * C311) *
                       C1220 -
                   (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                    C51301 * C332 + C24904 * C312 + C51300 * C331) *
                       C1215 +
                   (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                    C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                       C1221 +
                   (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                    C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                       C1216 -
                   (C24906 * C3690 + C24901 * C3692 + C24905 * C2652 +
                    C51301 * C2655 + C24904 * C1223 + C51300 * C1227) *
                       C1222 -
                   (C24906 * C3693 + C24901 * C3696 + C24905 * C2656 +
                    C51301 * C2661 + C24904 * C1228 + C51300 * C1235) *
                       C1217) *
                      C51265 +
                  ((C31588 + C31589 + C31590) * C1219 +
                   (C31591 + C31592 + C31593) * C1214 -
                   (C32098 + C32099 + C32100) * C1220 -
                   (C32101 + C32102 + C32103) * C1215 +
                   (C24904 * C1717 + C51300 * C1721 + C24905 * C3416 +
                    C51301 * C3419 + C24906 * C4338 + C24901 * C4340) *
                       C1221 +
                   (C24904 * C1722 + C51300 * C1729 + C24905 * C3420 +
                    C51301 * C3425 + C24906 * C4341 + C24901 * C4344) *
                       C1216 -
                   (C24906 * C21406 + C24901 * C21407 + C24905 * C4338 +
                    C51301 * C4340 + C24904 * C3416 + C51300 * C3419) *
                       C1222 -
                   (C24906 * C21408 + C24901 * C21409 + C24905 * C4341 +
                    C51301 * C4344 + C24904 * C3420 + C51300 * C3425) *
                       C1217) *
                      C51186) *
                 C50972 * C50991 * C51025) /
                    (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                       C51301 * C311 + C24906 * C302 + C24901 * C313) *
                          C687 +
                      (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                       C51301 * C331 + C24906 * C314 + C24901 * C332) *
                          C51251 -
                      (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                       C51301 * C313 + C24904 * C301 + C51300 * C311) *
                          C688 -
                      (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                       C51301 * C332 + C24904 * C312 + C51300 * C331) *
                          C51061) *
                         C51265 +
                     ((C31588 + C31589 + C31590) * C687 +
                      (C31591 + C31592 + C31593) * C51251 -
                      (C32098 + C32099 + C32100) * C688 -
                      (C32101 + C32102 + C32103) * C51061) *
                         C51186) *
                        C50972 * C51243 +
                    (((C25134 + C25133 + C25132) * C688 -
                      ((C24949 + C24948 + C24947) * C51251 +
                       (C24946 + C24945 + C24944) * C687) +
                      (C25137 + C25136 + C25135) * C51061) *
                         C51265 +
                     ((C25860 + C25861 + C25862) * C688 -
                      ((C25319 + C25318 + C25317) * C51251 +
                       (C25316 + C25315 + C25314) * C687) +
                      (C25863 + C25864 + C25865) * C51061) *
                         C51186) *
                        C50972 * C50996) *
                       C1831 +
                   ((((C32100 + C32099 + C32098) * C688 -
                      ((C31593 + C31592 + C31591) * C51251 +
                       (C31590 + C31589 + C31588) * C687) +
                      (C32103 + C32102 + C32101) * C51061) *
                         C51265 +
                     ((C32506 + C32507 + C32508) * C688 -
                      ((C31594 + C31595 + C31596) * C51251 +
                       (C31597 + C31598 + C31599) * C687) +
                      (C32509 + C32510 + C32511) * C51061) *
                         C51186) *
                        C50972 * C51243 +
                    (((C25314 + C25315 + C25316) * C687 +
                      (C25317 + C25318 + C25319) * C51251 -
                      (C25862 + C25861 + C25860) * C688 -
                      (C25865 + C25864 + C25863) * C51061) *
                         C51265 +
                     ((C25320 + C25321 + C25322) * C687 +
                      (C25323 + C25324 + C25325) * C51251 -
                      (C24906 * C3845 + C24901 * C3848 + C24905 * C2847 +
                       C51301 * C2851 + C24904 * C1338 + C51300 * C1343) *
                          C688 -
                      (C24906 * C3849 + C24901 * C3851 + C24905 * C2852 +
                       C51301 * C2856 + C24904 * C1344 + C51300 * C1350) *
                          C51061) *
                         C51186) *
                        C50972 * C50996) *
                       C51089)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C687 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51251 -
                     (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                      C51301 * C313 + C24904 * C301 + C51300 * C311) *
                         C688 -
                     (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                      C51301 * C332 + C24904 * C312 + C51300 * C331) *
                         C51061) *
                        C51265 +
                    ((C31588 + C31589 + C31590) * C687 +
                     (C31591 + C31592 + C31593) * C51251 -
                     (C32098 + C32099 + C32100) * C688 -
                     (C32101 + C32102 + C32103) * C51061) *
                        C51186) *
                       C50972 * C50991 * C51298 +
                   (((C32100 + C32099 + C32098) * C688 -
                     ((C31593 + C31592 + C31591) * C51251 +
                      (C31590 + C31589 + C31588) * C687) +
                     (C32103 + C32102 + C32101) * C51061) *
                        C51265 +
                    ((C32506 + C32507 + C32508) * C688 -
                     ((C31594 + C31595 + C31596) * C51251 +
                      (C31597 + C31598 + C31599) * C687) +
                     (C32509 + C32510 + C32511) * C51061) *
                        C51186) *
                       C50972 * C50991 * C51299 +
                   (((C31599 + C31598 + C31597) * C687 +
                     (C31596 + C31595 + C31594) * C51251 -
                     (C32508 + C32507 + C32506) * C688 -
                     (C32511 + C32510 + C32509) * C51061) *
                        C51265 +
                    ((C33418 + C33419 + C33420) * C687 +
                     (C33421 + C33422 + C33423) * C51251 -
                     (C24906 * C21672 + C24901 * C21674 + C24905 * C4738 +
                      C51301 * C4746 + C24904 * C4739 + C51300 * C4747) *
                         C688 -
                     (C24906 * C21673 + C24901 * C21675 + C24905 * C4744 +
                      C51301 * C4750 + C24904 * C4745 + C51300 * C4751) *
                         C51061) *
                        C51186) *
                       C50972 * C50991 * C2247)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C298 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C293 -
                     (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                      C51301 * C313 + C24904 * C301 + C51300 * C311) *
                         C299 -
                     (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                      C51301 * C332 + C24904 * C312 + C51300 * C331) *
                         C294 +
                     (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                      C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                         C300 +
                     (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                      C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                         C295) *
                        C51265 +
                    ((C31588 + C31589 + C31590) * C298 +
                     (C31591 + C31592 + C31593) * C293 -
                     (C32098 + C32099 + C32100) * C299 -
                     (C32101 + C32102 + C32103) * C294 +
                     (C33010 + C33011 + C33012) * C300 +
                     (C33013 + C33014 + C33015) * C295) *
                        C51186) *
                       C50972 * C50991 * C1831 +
                   (((C32100 + C32099 + C32098) * C299 -
                     ((C31593 + C31592 + C31591) * C293 +
                      (C31590 + C31589 + C31588) * C298) +
                     (C32103 + C32102 + C32101) * C294 -
                     (C33012 + C33011 + C33010) * C300 -
                     (C33015 + C33014 + C33013) * C295) *
                        C51265 +
                    ((C32506 + C32507 + C32508) * C299 -
                     ((C31594 + C31595 + C31596) * C293 +
                      (C31597 + C31598 + C31599) * C298) +
                     (C32509 + C32510 + C32511) * C294 -
                     (C24906 * C21076 + C24901 * C21077 + C24905 * C3844 +
                      C51301 * C3846 + C24904 * C2846 + C51300 * C2849) *
                         C300 -
                     (C24906 * C21078 + C24901 * C21079 + C24905 * C3847 +
                      C51301 * C3850 + C24904 * C2850 + C51300 * C2855) *
                         C295) *
                        C51186) *
                       C50972 * C50991 * C51089)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                       C51301 * C311 + C24906 * C302 + C24901 * C313) *
                          C118 +
                      (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                       C51301 * C331 + C24906 * C314 + C24901 * C332) *
                          C51009) *
                         C51265 +
                     ((C31588 + C31589 + C31590) * C118 +
                      (C31591 + C31592 + C31593) * C51009) *
                         C51186) *
                        C50972 * C1119 -
                    (((C25319 + C25318 + C25317) * C51009 +
                      (C25316 + C25315 + C25314) * C118) *
                         C51186 +
                     ((C24949 + C24948 + C24947) * C51009 +
                      (C24946 + C24945 + C24944) * C118) *
                         C51265) *
                        C50972 * C1120 +
                    (((C24955 + C24954 + C24953) * C118 +
                      (C24952 + C24951 + C24950) * C51009) *
                         C51265 +
                     ((C25648 + C25649 + C25650) * C118 +
                      (C25651 + C25652 + C25653) * C51009) *
                         C51186) *
                        C50972 * C1121) *
                       C1831 +
                   ((((C25314 + C25315 + C25316) * C118 +
                      (C25317 + C25318 + C25319) * C51009) *
                         C51265 +
                     ((C25320 + C25321 + C25322) * C118 +
                      (C25323 + C25324 + C25325) * C51009) *
                         C51186) *
                        C50972 * C1120 -
                    (((C31594 + C31595 + C31596) * C51009 +
                      (C31597 + C31598 + C31599) * C118) *
                         C51186 +
                     ((C31593 + C31592 + C31591) * C51009 +
                      (C31590 + C31589 + C31588) * C118) *
                         C51265) *
                        C50972 * C1119 -
                    (((C24906 * C2853 + C24901 * C2857 + C24905 * C1346 +
                       C51301 * C1351 + C24904 * C521 + C51300 * C533) *
                          C51009 +
                      (C24906 * C2848 + C24901 * C2854 + C24905 * C1339 +
                       C51301 * C1345 + C24904 * C503 + C51300 * C520) *
                          C118) *
                         C51186 +
                     ((C25653 + C25652 + C25651) * C51009 +
                      (C25650 + C25649 + C25648) * C118) *
                         C51265) *
                        C50972 * C1121) *
                       C51089)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C118 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C51009) *
                        C51265 +
                    ((C31588 + C31589 + C31590) * C118 +
                     (C31591 + C31592 + C31593) * C51009) *
                        C51186) *
                       C50972 * C50991 * C1997 -
                   (((C31594 + C31595 + C31596) * C51009 +
                     (C31597 + C31598 + C31599) * C118) *
                        C51186 +
                    ((C31593 + C31592 + C31591) * C51009 +
                     (C31590 + C31589 + C31588) * C118) *
                        C51265) *
                       C50972 * C50991 * C1998 +
                   (((C31599 + C31598 + C31597) * C118 +
                     (C31596 + C31595 + C31594) * C51009) *
                        C51265 +
                    ((C33418 + C33419 + C33420) * C118 +
                     (C33421 + C33422 + C33423) * C51009) *
                        C51186) *
                       C50972 * C50991 * C1999 -
                   (((C24906 * C23364 + C24901 * C23365 + C24905 * C6678 +
                      C51301 * C6681 + C24904 * C5665 + C51300 * C5670) *
                         C51009 +
                     (C24906 * C23362 + C24901 * C23363 + C24905 * C6675 +
                      C51301 * C6677 + C24904 * C5661 + C51300 * C5664) *
                         C118) *
                        C51186 +
                    ((C33423 + C33422 + C33421) * C51009 +
                     (C33420 + C33419 + C33418) * C118) *
                        C51265) *
                       C50972 * C50991 * C2000)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                       C51301 * C311 + C24906 * C302 + C24901 * C313) *
                          C118 +
                      (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                       C51301 * C331 + C24906 * C314 + C24901 * C332) *
                          C51009) *
                         C51265 +
                     ((C31588 + C31589 + C31590) * C118 +
                      (C31591 + C31592 + C31593) * C51009) *
                         C51186) *
                        C50972 * C51243 -
                    (((C25319 + C25318 + C25317) * C51009 +
                      (C25316 + C25315 + C25314) * C118) *
                         C51186 +
                     ((C24949 + C24948 + C24947) * C51009 +
                      (C24946 + C24945 + C24944) * C118) *
                         C51265) *
                        C50972 * C50996) *
                       C51298 +
                   ((((C25314 + C25315 + C25316) * C118 +
                      (C25317 + C25318 + C25319) * C51009) *
                         C51265 +
                     ((C25320 + C25321 + C25322) * C118 +
                      (C25323 + C25324 + C25325) * C51009) *
                         C51186) *
                        C50972 * C50996 -
                    (((C31594 + C31595 + C31596) * C51009 +
                      (C31597 + C31598 + C31599) * C118) *
                         C51186 +
                     ((C31593 + C31592 + C31591) * C51009 +
                      (C31590 + C31589 + C31588) * C118) *
                         C51265) *
                        C50972 * C51243) *
                       C51299 +
                   ((((C31599 + C31598 + C31597) * C118 +
                      (C31596 + C31595 + C31594) * C51009) *
                         C51265 +
                     ((C33418 + C33419 + C33420) * C118 +
                      (C33421 + C33422 + C33423) * C51009) *
                         C51186) *
                        C50972 * C51243 -
                    (((C24906 * C4740 + C24901 * C4748 + C24905 * C4741 +
                       C51301 * C4749 + C24904 * C2009 + C51300 * C2015) *
                          C51009 +
                      (C24906 * C4736 + C24901 * C4742 + C24905 * C4737 +
                       C51301 * C4743 + C24904 * C2003 + C51300 * C2010) *
                          C118) *
                         C51186 +
                     ((C25325 + C25324 + C25323) * C51009 +
                      (C25322 + C25321 + C25320) * C118) *
                         C51265) *
                        C50972 * C50996) *
                       C2247)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                       C51301 * C311 + C24906 * C302 + C24901 * C313) *
                          C118 +
                      (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                       C51301 * C331 + C24906 * C314 + C24901 * C332) *
                          C51009) *
                         C51265 +
                     ((C31588 + C31589 + C31590) * C118 +
                      (C31591 + C31592 + C31593) * C51009) *
                         C51186) *
                        C50972 * C1119 -
                    (((C25319 + C25318 + C25317) * C51009 +
                      (C25316 + C25315 + C25314) * C118) *
                         C51186 +
                     ((C24949 + C24948 + C24947) * C51009 +
                      (C24946 + C24945 + C24944) * C118) *
                         C51265) *
                        C50972 * C1120 +
                    (((C24955 + C24954 + C24953) * C118 +
                      (C24952 + C24951 + C24950) * C51009) *
                         C51265 +
                     ((C25648 + C25649 + C25650) * C118 +
                      (C25651 + C25652 + C25653) * C51009) *
                         C51186) *
                        C50972 * C1121) *
                       C1831 +
                   ((((C25314 + C25315 + C25316) * C118 +
                      (C25317 + C25318 + C25319) * C51009) *
                         C51265 +
                     ((C25320 + C25321 + C25322) * C118 +
                      (C25323 + C25324 + C25325) * C51009) *
                         C51186) *
                        C50972 * C1120 -
                    (((C31594 + C31595 + C31596) * C51009 +
                      (C31597 + C31598 + C31599) * C118) *
                         C51186 +
                     ((C31593 + C31592 + C31591) * C51009 +
                      (C31590 + C31589 + C31588) * C118) *
                         C51265) *
                        C50972 * C1119 -
                    (((C24906 * C2853 + C24901 * C2857 + C24905 * C1346 +
                       C51301 * C1351 + C24904 * C521 + C51300 * C533) *
                          C51009 +
                      (C24906 * C2848 + C24901 * C2854 + C24905 * C1339 +
                       C51301 * C1345 + C24904 * C503 + C51300 * C520) *
                          C118) *
                         C51186 +
                     ((C25653 + C25652 + C25651) * C51009 +
                      (C25650 + C25649 + C25648) * C118) *
                         C51265) *
                        C50972 * C1121) *
                       C51089)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24904 * C119 + C51300 * C126 + C24905 * C301 +
                      C51301 * C311 + C24906 * C302 + C24901 * C313) *
                         C298 +
                     (C24904 * C127 + C51300 * C140 + C24905 * C312 +
                      C51301 * C331 + C24906 * C314 + C24901 * C332) *
                         C293 -
                     (C24906 * C1223 + C24901 * C1227 + C24905 * C302 +
                      C51301 * C313 + C24904 * C301 + C51300 * C311) *
                         C299 -
                     (C24906 * C1228 + C24901 * C1235 + C24905 * C314 +
                      C51301 * C332 + C24904 * C312 + C51300 * C331) *
                         C294 +
                     (C24904 * C302 + C51300 * C313 + C24905 * C1223 +
                      C51301 * C1227 + C24906 * C2652 + C24901 * C2655) *
                         C300 +
                     (C24904 * C314 + C51300 * C332 + C24905 * C1228 +
                      C51301 * C1235 + C24906 * C2656 + C24901 * C2661) *
                         C295) *
                        C51265 +
                    ((C31588 + C31589 + C31590) * C298 +
                     (C31591 + C31592 + C31593) * C293 -
                     (C32098 + C32099 + C32100) * C299 -
                     (C32101 + C32102 + C32103) * C294 +
                     (C33010 + C33011 + C33012) * C300 +
                     (C33013 + C33014 + C33015) * C295) *
                        C51186) *
                       C50972 * C50991 * C1831 +
                   (((C32100 + C32099 + C32098) * C299 -
                     ((C31593 + C31592 + C31591) * C293 +
                      (C31590 + C31589 + C31588) * C298) +
                     (C32103 + C32102 + C32101) * C294 -
                     (C33012 + C33011 + C33010) * C300 -
                     (C33015 + C33014 + C33013) * C295) *
                        C51265 +
                    ((C32506 + C32507 + C32508) * C299 -
                     ((C31594 + C31595 + C31596) * C293 +
                      (C31597 + C31598 + C31599) * C298) +
                     (C32509 + C32510 + C32511) * C294 -
                     (C24906 * C21076 + C24901 * C21077 + C24905 * C3844 +
                      C51301 * C3846 + C24904 * C2846 + C51300 * C2849) *
                         C300 -
                     (C24906 * C21078 + C24901 * C21079 + C24905 * C3847 +
                      C51301 * C3850 + C24904 * C2850 + C51300 * C2855) *
                         C295) *
                        C51186) *
                       C50972 * C50991 * C51089)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C687 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51251 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C688 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C51294 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C688 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51251 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C687) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C51061) *
              C51122 * C50972 * C51295 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C687 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C51251 -
           (C20287 * C2654 + C20282 * C2659 + C20286 * C1225 + C20281 * C1231 +
            C20285 * C306 + C20280 * C321 + C20284 * C305 + C20279 * C319) *
               C688 -
           (C20287 * C2660 + C20282 * C2663 + C20286 * C1232 + C20281 * C1237 +
            C20285 * C322 + C20280 * C336 + C20284 * C320 + C20279 * C335) *
               C51061) *
              C51122 * C50972 * C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C687 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51251 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C688 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
            (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18071 * C17452) *
              C51294 +
          (((C17695 + C17694) * C688 -
            ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
            (C17697 + C17696) * C51061) *
               C51122 * C17450 +
           ((C17703 + C17702) * C688 -
            ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
            (C17705 + C17704) * C51061) *
               C51122 * C17451 +
           ((C18065 + C18066) * C688 - (C17506 * C51251 + C17507 * C687) +
            (C18067 + C18068) * C51061) *
               C51122 * C17452) *
              C51295 +
          (C18071 * C17450 +
           ((C17499 + C17498) * C687 + (C17497 + C17496) * C51251 -
            (C18066 + C18065) * C688 - (C18068 + C18067) * C51061) *
               C51122 * C17451 +
           ((C17500 + C17501) * C687 + (C17502 + C17503) * C51251 -
            (C17454 * C310 + C51158 * C329 + C17453 * C309 + C17448 * C327) *
                C688 -
            (C17454 * C330 + C51158 * C340 + C17453 * C328 + C17448 * C339) *
                C51061) *
               C51122 * C17452) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C687 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51251 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C688 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C5336 +
           ((C22427 + C22428) * C687 + (C22429 + C22430) * C51251 -
            (C17454 * C1717 + C51158 * C1721 + C17453 * C969 + C17448 * C974) *
                C688 -
            (C17454 * C1722 + C51158 * C1729 + C17453 * C975 + C17448 * C984) *
                C51061) *
               C5337 +
           (C22445 * C687 + C22446 * C51251 -
            (C17454 * C2846 + C51158 * C2849 + C17453 * C1337 +
             C17448 * C1341) *
                C688 -
            (C17454 * C2850 + C51158 * C2855 + C17453 * C1342 +
             C17448 * C1349) *
                C51061) *
               C5338) *
              C50972 * C51294 +
          (((C17695 + C17694) * C688 -
            ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
            (C17697 + C17696) * C51061) *
               C5336 +
           ((C18446 + C18447) * C688 -
            ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
            (C18448 + C18449) * C51061) *
               C5337 +
           ((C17453 * C1338 + C17448 * C1343 + C17454 * C2847 +
             C51158 * C2851) *
                C688 -
            (C22409 * C51251 + C22410 * C687) +
            (C17453 * C1344 + C17448 * C1350 + C17454 * C2852 +
             C51158 * C2856) *
                C51061) *
               C5338) *
              C50972 * C51295 +
          (C18070 * C5336 +
           ((C17892 + C17893) * C687 + (C17894 + C17895) * C51251 -
            (C18451 + C18450) * C688 - (C18453 + C18452) * C51061) *
               C5337 +
           ((C17900 + C17901) * C687 + (C17902 + C17903) * C51251 -
            (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
             C17448 * C1345) *
                C688 -
            (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
             C17448 * C1351) *
                C51061) *
               C5338) *
              C50972 * C686) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C687 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51251 -
            (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
             C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
                C688 -
            (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
             C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
                C51061) *
               C51122 * C50972 * C296 +
           ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
             C20286 * C1224 + C20281 * C1229 + C20287 * C2653 +
             C20282 * C2657) *
                C688 -
            ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
              C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                 C51251 +
             (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
              C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                 C687) +
            (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
             C20286 * C1230 + C20281 * C1236 + C20287 * C2658 +
             C20282 * C2662) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51252 +
          (((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
             C20286 * C3416 + C20281 * C3419 + C20287 * C4338 +
             C20282 * C4340) *
                C688 -
            ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 +
              C20281 * C1729 + C20285 * C975 + C20280 * C984 + C20284 * C514 +
              C20279 * C530) *
                 C51251 +
             (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 +
              C20281 * C1721 + C20285 * C969 + C20280 * C974 + C20284 * C500 +
              C20279 * C515) *
                 C687) +
            (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
             C20286 * C3420 + C20281 * C3425 + C20287 * C4341 +
             C20282 * C4344) *
                C51061) *
               C51122 * C50972 * C296 +
           ((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C687 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51251 -
            (C20287 * C4339 + C20282 * C4342 + C20286 * C3417 + C20281 * C3421 +
             C20285 * C1718 + C20280 * C1723 + C20284 * C970 + C20279 * C976) *
                C688 -
            (C20287 * C4343 + C20282 * C4345 + C20286 * C3422 + C20281 * C3426 +
             C20285 * C1724 + C20280 * C1730 + C20284 * C977 + C20279 * C985) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C687 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51251 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C688 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51122 * C17450 +
            ((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
             (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
                C51122 * C17451 +
            C18071 * C17452) *
               C296 +
           (((C17695 + C17694) * C688 -
             ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
             (C17697 + C17696) * C51061) *
                C51122 * C17450 +
            ((C17703 + C17702) * C688 -
             ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
             (C17705 + C17704) * C51061) *
                C51122 * C17451 +
            ((C18065 + C18066) * C688 - (C17506 * C51251 + C17507 * C687) +
             (C18067 + C18068) * C51061) *
                C51122 * C17452) *
               C50996) *
              C51252 +
          ((((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                 C688 -
             ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                  C51251 +
              (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                  C687) +
             (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C17450 +
            ((C18446 + C18447) * C688 -
             ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
             (C18448 + C18449) * C51061) *
                C51122 * C17451 +
            ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
             (C18452 + C18453) * C51061) *
                C51122 * C17452) *
               C296 +
           (((C17888 + C17889) * C687 + (C17890 + C17891) * C51251 -
             (C18447 + C18446) * C688 - (C18449 + C18448) * C51061) *
                C51122 * C17450 +
            ((C17892 + C17893) * C687 + (C17894 + C17895) * C51251 -
             (C18451 + C18450) * C688 - (C18453 + C18452) * C51061) *
                C51122 * C17451 +
            ((C18228 + C18229) * C687 + (C18230 + C18231) * C51251 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C688 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51122 * C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C687 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51251 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C688 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C5336 +
            ((C22427 + C22428) * C687 + (C22429 + C22430) * C51251 -
             (C22961 + C22962) * C688 - (C22963 + C22964) * C51061) *
                C5337 +
            (C22445 * C687 + C22446 * C51251 - (C22965 + C22966) * C688 -
             (C22967 + C22968) * C51061) *
                C5338) *
               C50972 * C296 +
           (((C17695 + C17694) * C688 -
             ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
             (C17697 + C17696) * C51061) *
                C5336 +
            ((C18446 + C18447) * C688 -
             ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
             (C18448 + C18449) * C51061) *
                C5337 +
            ((C22969 + C22970) * C688 - (C22409 * C51251 + C22410 * C687) +
             (C22971 + C22972) * C51061) *
                C5338) *
               C50972 * C50996) *
              C51252 +
          ((((C22962 + C22961) * C688 -
             ((C22430 + C22429) * C51251 + (C22428 + C22427) * C687) +
             (C22964 + C22963) * C51061) *
                C5336 +
            ((C22966 + C22965) * C688 -
             ((C22434 + C22433) * C51251 + (C22432 + C22431) * C687) +
             (C22968 + C22967) * C51061) *
                C5337 +
            ((C17453 * C4739 + C17448 * C4747 + C17454 * C4738 +
              C51158 * C4746) *
                 C688 -
             ((C22441 + C22442) * C51251 + (C22443 + C22444) * C687) +
             (C17453 * C4745 + C17448 * C4751 + C17454 * C4744 +
              C51158 * C4750) *
                 C51061) *
                C5338) *
               C50972 * C296 +
           (((C17888 + C17889) * C687 + (C17890 + C17891) * C51251 -
             (C18447 + C18446) * C688 - (C18449 + C18448) * C51061) *
                C5336 +
            ((C17896 + C17897) * C687 + (C17898 + C17899) * C51251 -
             (C22970 + C22969) * C688 - (C22972 + C22971) * C51061) *
                C5337 +
            ((C22437 + C22438) * C687 + (C22439 + C22440) * C51251 -
             (C17454 * C4736 + C51158 * C4742 + C17453 * C4737 +
              C17448 * C4743) *
                 C688 -
             (C17454 * C4740 + C51158 * C4748 + C17453 * C4741 +
              C17448 * C4749) *
                 C51061) *
                C5338) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17453 * C119 + C17448 * C126 + C17454 * C301 +
                 C51158 * C311) *
                    C118 +
                (C17453 * C127 + C17448 * C140 + C17454 * C312 +
                 C51158 * C331) *
                    C51009) *
                   C51122 * C17450 +
               ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) *
                   C51122 * C17451 +
               C17514 * C17452) *
                  C112 -
              (C17515 * C17452 +
               ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) *
                   C51122 * C17451 +
               ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) *
                   C51122 * C17450) *
                  C113 +
              (C17514 * C17450 +
               ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) *
                   C51122 * C17451 +
               ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) *
                   C51122 * C17452) *
                  C114 -
              (((C17454 * C691 + C51158 * C692 + C17453 * C137 +
                 C17448 * C145) *
                    C51009 +
                (C17454 * C689 + C51158 * C690 + C17453 * C124 +
                 C17448 * C136) *
                    C118) *
                   C51122 * C17452 +
               ((C17503 + C17502) * C51009 + (C17501 + C17500) * C118) *
                   C51122 * C17451 +
               C17515 * C17450) *
                  C115) *
             C51025 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17453 * C119 + C17448 * C126 + C17454 * C301 +
                 C51158 * C311) *
                    C298 +
                (C17453 * C127 + C17448 * C140 + C17454 * C312 +
                 C51158 * C331) *
                    C293 -
                (C17454 * C302 + C51158 * C313 + C17453 * C301 +
                 C17448 * C311) *
                    C299 -
                (C17454 * C314 + C51158 * C332 + C17453 * C312 +
                 C17448 * C331) *
                    C294 +
                (C17453 * C302 + C17448 * C313 + C17454 * C1223 +
                 C51158 * C1227) *
                    C300 +
                (C17453 * C314 + C17448 * C332 + C17454 * C1228 +
                 C51158 * C1235) *
                    C295) *
                   C51122 * C17450 +
               ((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
                (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
                (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
                   C51122 * C17451 +
               (C17504 * C298 + C17505 * C293 - (C17702 + C17703) * C299 -
                (C17704 + C17705) * C294 + (C17706 + C17707) * C300 +
                (C17708 + C17709) * C295) *
                   C51122 * C17452) *
                  C296 +
              (((C17695 + C17694) * C299 -
                ((C17491 + C17490) * C293 + (C17489 + C17488) * C298) +
                (C17697 + C17696) * C294 - (C17699 + C17698) * C300 -
                (C17701 + C17700) * C295) *
                   C51122 * C17450 +
               ((C17703 + C17702) * C299 -
                ((C17495 + C17494) * C293 + (C17493 + C17492) * C298) +
                (C17705 + C17704) * C294 - (C17707 + C17706) * C300 -
                (C17709 + C17708) * C295) *
                   C51122 * C17451 +
               ((C17453 * C307 + C17448 * C323 + C17454 * C308 +
                 C51158 * C325) *
                    C299 -
                (C17506 * C293 + C17507 * C298) +
                (C17453 * C324 + C17448 * C337 + C17454 * C326 +
                 C51158 * C338) *
                    C294 -
                (C17454 * C1226 + C51158 * C1233 + C17453 * C308 +
                 C17448 * C325) *
                    C300 -
                (C17454 * C1234 + C51158 * C1238 + C17453 * C326 +
                 C17448 * C338) *
                    C295) *
                   C51122 * C17452) *
                  C50996) *
             C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C296 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C50996) *
              C493 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C17453 * C498 + C17448 * C510 + C17454 * C972 + C51158 * C980) *
                 C118 +
             (C17453 * C511 + C17448 * C528 + C17454 * C981 + C51158 * C987) *
                 C51009) *
                C51122 * C17452) *
               C50996 -
           (((C17895 + C17894) * C51009 + (C17893 + C17892) * C118) * C51122 *
                C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C296) *
              C494 +
          ((((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                 C118 +
             (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                 C51009) *
                C51122 * C17450 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C51122 *
                C17451 +
            ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51122 *
                C17452) *
               C296 -
           (((C17454 * C1348 + C51158 * C1352 + C17453 * C523 + C17448 * C534) *
                 C51009 +
             (C17454 * C1340 + C51158 * C1347 + C17453 * C504 + C17448 * C522) *
                 C118) *
                C51122 * C17452 +
            ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51122 *
                C17451 +
            ((C17899 + C17898) * C51009 + (C17897 + C17896) * C118) * C51122 *
                C17450) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51009) *
              C51122 * C50972 * C112 -
          ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
            C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
               C51009 +
           (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
            C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
               C118) *
              C51122 * C50972 * C113 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C118 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C51009) *
              C51122 * C50972 * C114 -
          ((C20287 * C1234 + C20282 * C1238 + C20286 * C326 + C20281 * C338 +
            C20285 * C324 + C20280 * C337 + C20284 * C133 + C20279 * C143) *
               C51009 +
           (C20287 * C1226 + C20282 * C1233 + C20286 * C308 + C20281 * C325 +
            C20285 * C307 + C20280 * C323 + C20284 * C122 + C20279 * C132) *
               C118) *
              C51122 * C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C293 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C299 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C294 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C300 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C295) *
              C51122 * C50972 * C296 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C299 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C293 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C298) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C294 -
           (C20287 * C3691 + C20282 * C3694 + C20286 * C2653 + C20281 * C2657 +
            C20285 * C1224 + C20280 * C1229 + C20284 * C304 + C20279 * C317) *
               C300 -
           (C20287 * C3695 + C20282 * C3697 + C20286 * C2658 + C20281 * C2662 +
            C20285 * C1230 + C20280 * C1236 + C20284 * C318 + C20279 * C334) *
               C295) *
              C51122 * C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C296 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C50996) *
              C493 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C50996 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C296) *
              C494 +
          (((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
             C20286 * C2846 + C20281 * C2849 + C20287 * C3844 +
             C20282 * C3846) *
                C118 +
            (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
             C20286 * C2850 + C20281 * C2855 + C20287 * C3847 +
             C20282 * C3850) *
                C51009) *
               C51122 * C50972 * C296 -
           ((C20287 * C3849 + C20282 * C3851 + C20286 * C2852 + C20281 * C2856 +
             C20285 * C1344 + C20280 * C1350 + C20284 * C519 + C20279 * C532) *
                C51009 +
            (C20287 * C3845 + C20282 * C3848 + C20286 * C2847 + C20281 * C2851 +
             C20285 * C1338 + C20280 * C1343 + C20284 * C502 + C20279 * C518) *
                C118) *
               C51122 * C50972 * C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51009) *
               C5336 +
           ((C17453 * C500 + C17448 * C515 + C17454 * C969 + C51158 * C974) *
                C118 +
            (C17453 * C514 + C17448 * C530 + C17454 * C975 + C51158 * C984) *
                C51009) *
               C5337 +
           ((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C118 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C51009) *
               C5338) *
              C50972 * C112 -
          (((C17899 + C17898) * C51009 + (C17897 + C17896) * C118) * C5338 +
           ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C5337 +
           ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C5336) *
              C50972 * C113 +
          (C17512 * C5336 +
           ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C5337 +
           ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C5338) *
              C50972 * C114 -
          (((C17454 * C1348 + C51158 * C1352 + C17453 * C523 + C17448 * C534) *
                C51009 +
            (C17454 * C1340 + C51158 * C1347 + C17453 * C504 + C17448 * C522) *
                C118) *
               C5338 +
           ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C5337 +
           C17513 * C5336) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C5336 +
           ((C17453 * C500 + C17448 * C515 + C17454 * C969 + C51158 * C974) *
                C298 +
            (C17453 * C514 + C17448 * C530 + C17454 * C975 + C51158 * C984) *
                C293 -
            (C17454 * C1717 + C51158 * C1721 + C17453 * C969 + C17448 * C974) *
                C299 -
            (C17454 * C1722 + C51158 * C1729 + C17453 * C975 + C17448 * C984) *
                C294 +
            (C17453 * C1717 + C17448 * C1721 + C17454 * C3416 +
             C51158 * C3419) *
                C300 +
            (C17453 * C1722 + C17448 * C1729 + C17454 * C3420 +
             C51158 * C3425) *
                C295) *
               C5337 +
           ((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C298 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C293 -
            (C17454 * C2846 + C51158 * C2849 + C17453 * C1337 +
             C17448 * C1341) *
                C299 -
            (C17454 * C2850 + C51158 * C2855 + C17453 * C1342 +
             C17448 * C1349) *
                C294 +
            (C17453 * C2846 + C17448 * C2849 + C17454 * C3844 +
             C51158 * C3846) *
                C300 +
            (C17453 * C2850 + C17448 * C2855 + C17454 * C3847 +
             C51158 * C3850) *
                C295) *
               C5338) *
              C50972 * C296 +
          (((C17695 + C17694) * C299 -
            ((C17491 + C17490) * C293 + (C17489 + C17488) * C298) +
            (C17697 + C17696) * C294 - (C17699 + C17698) * C300 -
            (C17701 + C17700) * C295) *
               C5336 +
           ((C18446 + C18447) * C299 -
            ((C17891 + C17890) * C293 + (C17889 + C17888) * C298) +
            (C18448 + C18449) * C294 -
            (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
             C17448 * C1723) *
                C300 -
            (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
             C17448 * C1730) *
                C295) *
               C5337 +
           ((C17453 * C1338 + C17448 * C1343 + C17454 * C2847 +
             C51158 * C2851) *
                C299 -
            ((C17899 + C17898) * C293 + (C17897 + C17896) * C298) +
            (C17453 * C1344 + C17448 * C1350 + C17454 * C2852 +
             C51158 * C2856) *
                C294 -
            (C17454 * C3845 + C51158 * C3848 + C17453 * C2847 +
             C17448 * C2851) *
                C300 -
            (C17454 * C3849 + C51158 * C3851 + C17453 * C2852 +
             C17448 * C2856) *
                C295) *
               C5338) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C5336 +
            ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C5337 +
            C22450 * C5338) *
               C50972 * C296 -
           (C22447 * C5338 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C5337 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C5336) *
               C50972 * C50996) *
              C493 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C5336 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C5337 +
            ((C22437 + C22438) * C118 + (C22439 + C22440) * C51009) * C5338) *
               C50972 * C50996 -
           (((C22441 + C22442) * C51009 + (C22443 + C22444) * C118) * C5338 +
            ((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C5337 +
            ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C5336) *
               C50972 * C296) *
              C494 +
          ((C22450 * C5336 +
            ((C22444 + C22443) * C118 + (C22442 + C22441) * C51009) * C5337 +
            ((C17453 * C5661 + C17448 * C5664 + C17454 * C6675 +
              C51158 * C6677) *
                 C118 +
             (C17453 * C5665 + C17448 * C5670 + C17454 * C6678 +
              C51158 * C6681) *
                 C51009) *
                C5338) *
               C50972 * C296 -
           (((C17454 * C6680 + C51158 * C6682 + C17453 * C5667 +
              C17448 * C5671) *
                 C51009 +
             (C17454 * C6676 + C51158 * C6679 + C17453 * C5662 +
              C17448 * C5666) *
                 C118) *
                C5338 +
            ((C22440 + C22439) * C51009 + (C22438 + C22437) * C118) * C5337 +
            C22447 * C5336) *
               C50972 * C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C51294 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C51295 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
             C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
             C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
                C51009) *
               C51122 * C50972 * C686) *
              C51252 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C51295 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C51294 -
           ((C20287 * C3424 + C20282 * C3427 + C20286 * C1726 + C20281 * C1731 +
             C20285 * C979 + C20280 * C986 + C20284 * C509 + C20279 * C527) *
                C51009 +
            (C20287 * C3418 + C20282 * C3423 + C20286 * C1719 + C20281 * C1725 +
             C20285 * C971 + C20280 * C978 + C20284 * C497 + C20279 * C508) *
                C118) *
               C51122 * C50972 * C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C51294 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C51295 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51122 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) * C51122 *
                C17452) *
               C686) *
              C51252 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51122 *
                C17452) *
               C51295 -
           (C18235 * C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C51294 -
           (((C17454 * C983 + C51158 * C988 + C17453 * C513 + C17448 * C529) *
                 C51009 +
             (C17454 * C973 + C51158 * C982 + C17453 * C499 + C17448 * C512) *
                 C118) *
                C51122 * C17452 +
            ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51122 *
                C17451 +
            C18235 * C17450) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C5336 +
            ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C5337 +
            C22450 * C5338) *
               C50972 * C51294 -
           (C22447 * C5338 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C5337 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C5336) *
               C50972 * C51295 +
           (C17512 * C5336 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C5337 +
            ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C5338) *
               C50972 * C686) *
              C51252 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C5336 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C5337 +
            ((C22437 + C22438) * C118 + (C22439 + C22440) * C51009) * C5338) *
               C50972 * C51295 -
           (((C22441 + C22442) * C51009 + (C22443 + C22444) * C118) * C5338 +
            ((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C5337 +
            ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C5336) *
               C50972 * C51294 -
           (((C17454 * C6233 + C51158 * C6234 + C17453 * C2007 +
              C17448 * C2014) *
                 C51009 +
             (C17454 * C6231 + C51158 * C6232 + C17453 * C2002 +
              C17448 * C2008) *
                 C118) *
                C5338 +
            ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C5337 +
            C18234 * C5336) *
               C50972 * C686) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
            (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
            (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
               C51122 * C17451 +
           (C17504 * C298 + C17505 * C293 - (C17702 + C17703) * C299 -
            (C17704 + C17705) * C294 + (C17706 + C17707) * C300 +
            (C17708 + C17709) * C295) *
               C51122 * C17452) *
              C296 +
          (((C17695 + C17694) * C299 -
            ((C17491 + C17490) * C293 + (C17489 + C17488) * C298) +
            (C17697 + C17696) * C294 - (C17699 + C17698) * C300 -
            (C17701 + C17700) * C295) *
               C51122 * C17450 +
           ((C17703 + C17702) * C299 -
            ((C17495 + C17494) * C293 + (C17493 + C17492) * C298) +
            (C17705 + C17704) * C294 - (C17707 + C17706) * C300 -
            (C17709 + C17708) * C295) *
               C51122 * C17451 +
           ((C17453 * C307 + C17448 * C323 + C17454 * C308 + C51158 * C325) *
                C299 -
            (C17506 * C293 + C17507 * C298) +
            (C17453 * C324 + C17448 * C337 + C17454 * C326 + C51158 * C338) *
                C294 -
            (C17454 * C1226 + C51158 * C1233 + C17453 * C308 + C17448 * C325) *
                C300 -
            (C17454 * C1234 + C51158 * C1238 + C17453 * C326 + C17448 * C338) *
                C295) *
               C51122 * C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51009) *
               C51122 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
               C17451 +
           C17514 * C17452) *
              C112 -
          (C17515 * C17452 +
           ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
               C17451 +
           ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
               C17450) *
              C113 +
          (C17514 * C17450 +
           ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51122 *
               C17451 +
           ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) * C51122 *
               C17452) *
              C114 -
          (((C17454 * C691 + C51158 * C692 + C17453 * C137 + C17448 * C145) *
                C51009 +
            (C17454 * C689 + C51158 * C690 + C17453 * C124 + C17448 * C136) *
                C118) *
               C51122 * C17452 +
           ((C17503 + C17502) * C51009 + (C17501 + C17500) * C118) * C51122 *
               C17451 +
           C17515 * C17450) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51009) *
              C51122 * C50972 * C112 -
          ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
            C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
               C51009 +
           (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
            C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
               C118) *
              C51122 * C50972 * C113 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C118 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C51009) *
              C51122 * C50972 * C114 -
          ((C20287 * C1234 + C20282 * C1238 + C20286 * C326 + C20281 * C338 +
            C20285 * C324 + C20280 * C337 + C20284 * C133 + C20279 * C143) *
               C51009 +
           (C20287 * C1226 + C20282 * C1233 + C20286 * C308 + C20281 * C325 +
            C20285 * C307 + C20280 * C323 + C20284 * C122 + C20279 * C132) *
               C118) *
              C51122 * C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C293 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C299 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C294 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C300 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C295) *
              C51122 * C50972 * C296 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C299 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C293 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C298) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C294 -
           (C20287 * C3691 + C20282 * C3694 + C20286 * C2653 + C20281 * C2657 +
            C20285 * C1224 + C20280 * C1229 + C20284 * C304 + C20279 * C317) *
               C300 -
           (C20287 * C3695 + C20282 * C3697 + C20286 * C2658 + C20281 * C2662 +
            C20285 * C1230 + C20280 * C1236 + C20284 * C318 + C20279 * C334) *
               C295) *
              C51122 * C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51009) *
               C5336 +
           ((C17453 * C500 + C17448 * C515 + C17454 * C969 + C51158 * C974) *
                C118 +
            (C17453 * C514 + C17448 * C530 + C17454 * C975 + C51158 * C984) *
                C51009) *
               C5337 +
           ((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C118 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C51009) *
               C5338) *
              C50972 * C112 -
          (((C17899 + C17898) * C51009 + (C17897 + C17896) * C118) * C5338 +
           ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C5337 +
           ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C5336) *
              C50972 * C113 +
          (C17512 * C5336 +
           ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C5337 +
           ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C5338) *
              C50972 * C114 -
          (((C17454 * C1348 + C51158 * C1352 + C17453 * C523 + C17448 * C534) *
                C51009 +
            (C17454 * C1340 + C51158 * C1347 + C17453 * C504 + C17448 * C522) *
                C118) *
               C5338 +
           ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C5337 +
           C17513 * C5336) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C5336 +
           ((C17453 * C500 + C17448 * C515 + C17454 * C969 + C51158 * C974) *
                C298 +
            (C17453 * C514 + C17448 * C530 + C17454 * C975 + C51158 * C984) *
                C293 -
            (C17454 * C1717 + C51158 * C1721 + C17453 * C969 + C17448 * C974) *
                C299 -
            (C17454 * C1722 + C51158 * C1729 + C17453 * C975 + C17448 * C984) *
                C294 +
            (C17453 * C1717 + C17448 * C1721 + C17454 * C3416 +
             C51158 * C3419) *
                C300 +
            (C17453 * C1722 + C17448 * C1729 + C17454 * C3420 +
             C51158 * C3425) *
                C295) *
               C5337 +
           ((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C298 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C293 -
            (C17454 * C2846 + C51158 * C2849 + C17453 * C1337 +
             C17448 * C1341) *
                C299 -
            (C17454 * C2850 + C51158 * C2855 + C17453 * C1342 +
             C17448 * C1349) *
                C294 +
            (C17453 * C2846 + C17448 * C2849 + C17454 * C3844 +
             C51158 * C3846) *
                C300 +
            (C17453 * C2850 + C17448 * C2855 + C17454 * C3847 +
             C51158 * C3850) *
                C295) *
               C5338) *
              C50972 * C296 +
          (((C17695 + C17694) * C299 -
            ((C17491 + C17490) * C293 + (C17489 + C17488) * C298) +
            (C17697 + C17696) * C294 - (C17699 + C17698) * C300 -
            (C17701 + C17700) * C295) *
               C5336 +
           ((C18446 + C18447) * C299 -
            ((C17891 + C17890) * C293 + (C17889 + C17888) * C298) +
            (C18448 + C18449) * C294 -
            (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
             C17448 * C1723) *
                C300 -
            (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
             C17448 * C1730) *
                C295) *
               C5337 +
           ((C17453 * C1338 + C17448 * C1343 + C17454 * C2847 +
             C51158 * C2851) *
                C299 -
            ((C17899 + C17898) * C293 + (C17897 + C17896) * C298) +
            (C17453 * C1344 + C17448 * C1350 + C17454 * C2852 +
             C51158 * C2856) *
                C294 -
            (C17454 * C3845 + C51158 * C3848 + C17453 * C2847 +
             C17448 * C2851) *
                C300 -
            (C17454 * C3849 + C51158 * C3851 + C17453 * C2852 +
             C17448 * C2856) *
                C295) *
               C5338) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1456 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51296 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1457 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51297 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C1458 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C1453) *
              C51122 * C50972 * C51243 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C1457 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51296 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C1456) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C51297 -
           (C20287 * C3691 + C20282 * C3694 + C20286 * C2653 + C20281 * C2657 +
            C20285 * C1224 + C20280 * C1229 + C20284 * C304 + C20279 * C317) *
               C1458 -
           (C20287 * C3695 + C20282 * C3697 + C20286 * C2658 + C20281 * C2662 +
            C20285 * C1230 + C20280 * C1236 + C20284 * C318 + C20279 * C334) *
               C1453) *
              C51122 * C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1456 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51296 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1457 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51297 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C1458 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C1453) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1456 + (C17490 + C17491) * C51296 -
            (C17694 + C17695) * C1457 - (C17696 + C17697) * C51297 +
            (C17698 + C17699) * C1458 + (C17700 + C17701) * C1453) *
               C51122 * C17451 +
           (C17504 * C1456 + C17505 * C51296 - C18052 * C1457 -
            C18053 * C51297 + (C17706 + C17707) * C1458 +
            (C17708 + C17709) * C1453) *
               C51122 * C17452) *
              C51243 +
          (((C17695 + C17694) * C1457 -
            ((C17491 + C17490) * C51296 + (C17489 + C17488) * C1456) +
            (C17697 + C17696) * C51297 - (C17699 + C17698) * C1458 -
            (C17701 + C17700) * C1453) *
               C51122 * C17450 +
           ((C17703 + C17702) * C1457 -
            ((C17495 + C17494) * C51296 + (C17493 + C17492) * C1456) +
            (C17705 + C17704) * C51297 - (C17707 + C17706) * C1458 -
            (C17709 + C17708) * C1453) *
               C51122 * C17451 +
           ((C18065 + C18066) * C1457 - (C17506 * C51296 + C17507 * C1456) +
            (C18067 + C18068) * C51297 -
            (C17454 * C1226 + C51158 * C1233 + C17453 * C308 + C17448 * C325) *
                C1458 -
            (C17454 * C1234 + C51158 * C1238 + C17453 * C326 + C17448 * C338) *
                C1453) *
               C51122 * C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1456 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51296 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1457 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51297 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C1458 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C1453) *
               C5336 +
           ((C22427 + C22428) * C1456 + (C22429 + C22430) * C51296 -
            (C22961 + C22962) * C1457 - (C22963 + C22964) * C51297 +
            (C17453 * C1717 + C17448 * C1721 + C17454 * C3416 +
             C51158 * C3419) *
                C1458 +
            (C17453 * C1722 + C17448 * C1729 + C17454 * C3420 +
             C51158 * C3425) *
                C1453) *
               C5337 +
           (C22445 * C1456 + C22446 * C51296 - C23369 * C1457 -
            C23370 * C51297 +
            (C17453 * C2846 + C17448 * C2849 + C17454 * C3844 +
             C51158 * C3846) *
                C1458 +
            (C17453 * C2850 + C17448 * C2855 + C17454 * C3847 +
             C51158 * C3850) *
                C1453) *
               C5338) *
              C50972 * C51243 +
          (((C17695 + C17694) * C1457 -
            ((C17491 + C17490) * C51296 + (C17489 + C17488) * C1456) +
            (C17697 + C17696) * C51297 - (C17699 + C17698) * C1458 -
            (C17701 + C17700) * C1453) *
               C5336 +
           ((C18446 + C18447) * C1457 -
            ((C17891 + C17890) * C51296 + (C17889 + C17888) * C1456) +
            (C18448 + C18449) * C51297 -
            (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
             C17448 * C1723) *
                C1458 -
            (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
             C17448 * C1730) *
                C1453) *
               C5337 +
           ((C22969 + C22970) * C1457 - (C22409 * C51296 + C22410 * C1456) +
            (C22971 + C22972) * C51297 -
            (C17454 * C3845 + C51158 * C3848 + C17453 * C2847 +
             C17448 * C2851) *
                C1458 -
            (C17454 * C3849 + C51158 * C3851 + C17453 * C2852 +
             C17448 * C2856) *
                C1453) *
               C5338) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1456 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51296 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1457 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51297 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C1458 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C1453) *
              C51122 * C50972 * C50991 * C51252 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C1457 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51296 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C1456) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C51297 -
           (C20287 * C21406 + C20282 * C21407 + C20286 * C4338 +
            C20281 * C4340 + C20285 * C3416 + C20280 * C3419 + C20284 * C1717 +
            C20279 * C1721) *
               C1458 -
           (C20287 * C21408 + C20282 * C21409 + C20286 * C4341 +
            C20281 * C4344 + C20285 * C3420 + C20280 * C3425 + C20284 * C1722 +
            C20279 * C1729) *
               C1453) *
              C51122 * C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1456 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51296 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1457 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51297 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C1458 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C1453) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1456 + (C17490 + C17491) * C51296 -
            (C17694 + C17695) * C1457 - (C17696 + C17697) * C51297 +
            (C17698 + C17699) * C1458 + (C17700 + C17701) * C1453) *
               C51122 * C17451 +
           (C17504 * C1456 + C17505 * C51296 - C18052 * C1457 -
            C18053 * C51297 + (C17706 + C17707) * C1458 +
            (C17708 + C17709) * C1453) *
               C51122 * C17452) *
              C50991 * C51252 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C1457 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51296 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C1456) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C51297 -
            (C17454 * C3416 + C51158 * C3419 + C17453 * C1717 +
             C17448 * C1721) *
                C1458 -
            (C17454 * C3420 + C51158 * C3425 + C17453 * C1722 +
             C17448 * C1729) *
                C1453) *
               C51122 * C17450 +
           ((C18446 + C18447) * C1457 -
            ((C17891 + C17890) * C51296 + (C17889 + C17888) * C1456) +
            (C18448 + C18449) * C51297 -
            (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
             C17448 * C1723) *
                C1458 -
            (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
             C17448 * C1730) *
                C1453) *
               C51122 * C17451 +
           ((C18450 + C18451) * C1457 - (C18226 * C51296 + C18227 * C1456) +
            (C18452 + C18453) * C51297 -
            (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
             C17448 * C1725) *
                C1458 -
            (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
             C17448 * C1731) *
                C1453) *
               C51122 * C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1456 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51296 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1457 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51297 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C1458 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C1453) *
               C5336 +
           ((C22427 + C22428) * C1456 + (C22429 + C22430) * C51296 -
            (C22961 + C22962) * C1457 - (C22963 + C22964) * C51297 +
            (C23890 + C23891) * C1458 + (C23892 + C23893) * C1453) *
               C5337 +
           (C22445 * C1456 + C22446 * C51296 - C23369 * C1457 -
            C23370 * C51297 + (C23894 + C23895) * C1458 +
            (C23896 + C23897) * C1453) *
               C5338) *
              C50972 * C50991 * C51252 +
          (((C22962 + C22961) * C1457 -
            ((C22430 + C22429) * C51296 + (C22428 + C22427) * C1456) +
            (C22964 + C22963) * C51297 - (C23891 + C23890) * C1458 -
            (C23893 + C23892) * C1453) *
               C5336 +
           ((C22966 + C22965) * C1457 -
            ((C22434 + C22433) * C51296 + (C22432 + C22431) * C1456) +
            (C22968 + C22967) * C51297 - (C23895 + C23894) * C1458 -
            (C23897 + C23896) * C1453) *
               C5337 +
           ((C23382 + C23383) * C1457 -
            ((C22441 + C22442) * C51296 + (C22443 + C22444) * C1456) +
            (C23384 + C23385) * C51297 -
            (C17454 * C21672 + C51158 * C21674 + C17453 * C4738 +
             C17448 * C4746) *
                C1458 -
            (C17454 * C21673 + C51158 * C21675 + C17453 * C4744 +
             C17448 * C4750) *
                C1453) *
               C5338) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17453 * C119 + C17448 * C126 + C17454 * C301 +
                 C51158 * C311) *
                    C1122 +
                (C17453 * C127 + C17448 * C140 + C17454 * C312 +
                 C51158 * C331) *
                    C1117 -
                (C17454 * C302 + C51158 * C313 + C17453 * C301 +
                 C17448 * C311) *
                    C1123 -
                (C17454 * C314 + C51158 * C332 + C17453 * C312 +
                 C17448 * C331) *
                    C51061) *
                   C51122 * C17450 +
               ((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
                (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
                   C51122 * C17451 +
               C18607 * C17452) *
                  C1119 +
              (((C17695 + C17694) * C1123 -
                ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
                (C17697 + C17696) * C51061) *
                   C51122 * C17450 +
               ((C17703 + C17702) * C1123 -
                ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
                (C17705 + C17704) * C51061) *
                   C51122 * C17451 +
               ((C18065 + C18066) * C1123 - (C17506 * C1117 + C17507 * C1122) +
                (C18067 + C18068) * C51061) *
                   C51122 * C17452) *
                  C1120 +
              (C18607 * C17450 +
               ((C17499 + C17498) * C1122 + (C17497 + C17496) * C1117 -
                (C18066 + C18065) * C1123 - (C18068 + C18067) * C51061) *
                   C51122 * C17451 +
               ((C17500 + C17501) * C1122 + (C17502 + C17503) * C1117 -
                (C17454 * C310 + C51158 * C329 + C17453 * C309 +
                 C17448 * C327) *
                    C1123 -
                (C17454 * C330 + C51158 * C340 + C17453 * C328 +
                 C17448 * C339) *
                    C51061) *
                   C51122 * C17452) *
                  C1121) *
             C51025 +
         0.5 * std::pow(Pi, 2.5) *
             (((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                   C1219 +
               (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                   C1214 -
               (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                   C1220 -
               (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                   C1215 +
               (C17453 * C302 + C17448 * C313 + C17454 * C1223 +
                C51158 * C1227) *
                   C1221 +
               (C17453 * C314 + C17448 * C332 + C17454 * C1228 +
                C51158 * C1235) *
                   C1216 -
               (C17454 * C2652 + C51158 * C2655 + C17453 * C1223 +
                C17448 * C1227) *
                   C1222 -
               (C17454 * C2656 + C51158 * C2661 + C17453 * C1228 +
                C17448 * C1235) *
                   C1217) *
                  C51122 * C17450 +
              ((C17488 + C17489) * C1219 + (C17490 + C17491) * C1214 -
               (C17694 + C17695) * C1220 - (C17696 + C17697) * C1215 +
               (C17698 + C17699) * C1221 + (C17700 + C17701) * C1216 -
               (C17454 * C2653 + C51158 * C2657 + C17453 * C1224 +
                C17448 * C1229) *
                   C1222 -
               (C17454 * C2658 + C51158 * C2662 + C17453 * C1230 +
                C17448 * C1236) *
                   C1217) *
                  C51122 * C17451 +
              (C17504 * C1219 + C17505 * C1214 - C18052 * C1220 -
               C18053 * C1215 + (C17706 + C17707) * C1221 +
               (C17708 + C17709) * C1216 -
               (C17454 * C2654 + C51158 * C2659 + C17453 * C1225 +
                C17448 * C1231) *
                   C1222 -
               (C17454 * C2660 + C51158 * C2663 + C17453 * C1232 +
                C17448 * C1237) *
                   C1217) *
                  C51122 * C17452) *
             C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1122 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1117 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1123 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
            (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18607 * C17452) *
              C50991 * C493 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C1123 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C1117 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C1122) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C51061) *
               C51122 * C17450 +
           ((C18446 + C18447) * C1123 -
            ((C17891 + C17890) * C1117 + (C17889 + C17888) * C1122) +
            (C18448 + C18449) * C51061) *
               C51122 * C17451 +
           ((C18450 + C18451) * C1123 - (C18226 * C1117 + C18227 * C1122) +
            (C18452 + C18453) * C51061) *
               C51122 * C17452) *
              C50991 * C494 +
          (((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C1122 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C1117 -
            (C17454 * C2846 + C51158 * C2849 + C17453 * C1337 +
             C17448 * C1341) *
                C1123 -
            (C17454 * C2850 + C51158 * C2855 + C17453 * C1342 +
             C17448 * C1349) *
                C51061) *
               C51122 * C17450 +
           ((C17896 + C17897) * C1122 + (C17898 + C17899) * C1117 -
            (C17454 * C2847 + C51158 * C2851 + C17453 * C1338 +
             C17448 * C1343) *
                C1123 -
            (C17454 * C2852 + C51158 * C2856 + C17453 * C1344 +
             C17448 * C1350) *
                C51061) *
               C51122 * C17451 +
           ((C17900 + C17901) * C1122 + (C17902 + C17903) * C1117 -
            (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
             C17448 * C1345) *
                C1123 -
            (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
             C17448 * C1351) *
                C51061) *
               C51122 * C17452) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1122 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C1117 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1123 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C1119 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C1123 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C1117 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C1122) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C51061) *
              C51122 * C50972 * C1120 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C1122 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C1117 -
           (C20287 * C2654 + C20282 * C2659 + C20286 * C1225 + C20281 * C1231 +
            C20285 * C306 + C20280 * C321 + C20284 * C305 + C20279 * C319) *
               C1123 -
           (C20287 * C2660 + C20282 * C2663 + C20286 * C1232 + C20281 * C1237 +
            C20285 * C322 + C20280 * C336 + C20284 * C320 + C20279 * C335) *
               C51061) *
              C51122 * C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
           C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
              C1219 +
          (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
           C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
              C1214 -
          (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
           C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
              C1220 -
          (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
           C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
              C1215 +
          (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
           C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
              C1221 +
          (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
           C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
              C1216 -
          (C20287 * C20974 + C20282 * C20975 + C20286 * C3690 + C20281 * C3692 +
           C20285 * C2652 + C20280 * C2655 + C20284 * C1223 + C20279 * C1227) *
              C1222 -
          (C20287 * C20976 + C20282 * C20977 + C20286 * C3693 + C20281 * C3696 +
           C20285 * C2656 + C20280 * C2661 + C20284 * C1228 + C20279 * C1235) *
              C1217) *
         C51122 * C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1122 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C1117 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1123 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C50991 * C493 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C1123 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C1117 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C1122) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C51061) *
              C51122 * C50972 * C50991 * C494 +
          ((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
            C20286 * C2846 + C20281 * C2849 + C20287 * C3844 + C20282 * C3846) *
               C1122 +
           (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
            C20286 * C2850 + C20281 * C2855 + C20287 * C3847 + C20282 * C3850) *
               C1117 -
           (C20287 * C21076 + C20282 * C21077 + C20286 * C3844 +
            C20281 * C3846 + C20285 * C2846 + C20280 * C2849 + C20284 * C1337 +
            C20279 * C1341) *
               C1123 -
           (C20287 * C21078 + C20282 * C21079 + C20286 * C3847 +
            C20281 * C3850 + C20285 * C2850 + C20280 * C2855 + C20284 * C1342 +
            C20279 * C1349) *
               C51061) *
              C51122 * C50972 * C50991 * C495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1122 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1117 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1123 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C5336 +
           ((C22427 + C22428) * C1122 + (C22429 + C22430) * C1117 -
            (C22961 + C22962) * C1123 - (C22963 + C22964) * C51061) *
               C5337 +
           (C22445 * C1122 + C22446 * C1117 - (C22965 + C22966) * C1123 -
            (C22967 + C22968) * C51061) *
               C5338) *
              C50972 * C1119 +
          (((C17695 + C17694) * C1123 -
            ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
            (C17697 + C17696) * C51061) *
               C5336 +
           ((C18446 + C18447) * C1123 -
            ((C17891 + C17890) * C1117 + (C17889 + C17888) * C1122) +
            (C18448 + C18449) * C51061) *
               C5337 +
           ((C22969 + C22970) * C1123 - (C22409 * C1117 + C22410 * C1122) +
            (C22971 + C22972) * C51061) *
               C5338) *
              C50972 * C1120 +
          (C18606 * C5336 +
           ((C17892 + C17893) * C1122 + (C17894 + C17895) * C1117 -
            (C18451 + C18450) * C1123 - (C18453 + C18452) * C51061) *
               C5337 +
           ((C17900 + C17901) * C1122 + (C17902 + C17903) * C1117 -
            (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
             C17448 * C1345) *
                C1123 -
            (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
             C17448 * C1351) *
                C51061) *
               C5338) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
               C1219 +
           (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
               C1214 -
           (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
               C1220 -
           (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
               C1215 +
           (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
               C1221 +
           (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
               C1216 -
           (C17454 * C2652 + C51158 * C2655 + C17453 * C1223 + C17448 * C1227) *
               C1222 -
           (C17454 * C2656 + C51158 * C2661 + C17453 * C1228 + C17448 * C1235) *
               C1217) *
              C5336 +
          ((C22427 + C22428) * C1219 + (C22429 + C22430) * C1214 -
           (C22961 + C22962) * C1220 - (C22963 + C22964) * C1215 +
           (C17453 * C1717 + C17448 * C1721 + C17454 * C3416 + C51158 * C3419) *
               C1221 +
           (C17453 * C1722 + C17448 * C1729 + C17454 * C3420 + C51158 * C3425) *
               C1216 -
           (C17454 * C4338 + C51158 * C4340 + C17453 * C3416 + C17448 * C3419) *
               C1222 -
           (C17454 * C4341 + C51158 * C4344 + C17453 * C3420 + C17448 * C3425) *
               C1217) *
              C5337 +
          (C22445 * C1219 + C22446 * C1214 - (C22965 + C22966) * C1220 -
           (C22967 + C22968) * C1215 +
           (C17453 * C2846 + C17448 * C2849 + C17454 * C3844 + C51158 * C3846) *
               C1221 +
           (C17453 * C2850 + C17448 * C2855 + C17454 * C3847 + C51158 * C3850) *
               C1216 -
           (C17454 * C21076 + C51158 * C21077 + C17453 * C3844 +
            C17448 * C3846) *
               C1222 -
           (C17454 * C21078 + C51158 * C21079 + C17453 * C3847 +
            C17448 * C3850) *
               C1217) *
              C5338) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1122 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1117 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1123 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C5336 +
           ((C22427 + C22428) * C1122 + (C22429 + C22430) * C1117 -
            (C22961 + C22962) * C1123 - (C22963 + C22964) * C51061) *
               C5337 +
           C23387 * C5338) *
              C50972 * C50991 * C493 +
          (((C22962 + C22961) * C1123 -
            ((C22430 + C22429) * C1117 + (C22428 + C22427) * C1122) +
            (C22964 + C22963) * C51061) *
               C5336 +
           ((C22966 + C22965) * C1123 -
            ((C22434 + C22433) * C1117 + (C22432 + C22431) * C1122) +
            (C22968 + C22967) * C51061) *
               C5337 +
           ((C23382 + C23383) * C1123 -
            ((C22441 + C22442) * C1117 + (C22443 + C22444) * C1122) +
            (C23384 + C23385) * C51061) *
               C5338) *
              C50972 * C50991 * C494 +
          (C23387 * C5336 +
           ((C22444 + C22443) * C1122 + (C22442 + C22441) * C1117 -
            (C23383 + C23382) * C1123 - (C23385 + C23384) * C51061) *
               C5337 +
           ((C17453 * C5661 + C17448 * C5664 + C17454 * C6675 +
             C51158 * C6677) *
                C1122 +
            (C17453 * C5665 + C17448 * C5670 + C17454 * C6678 +
             C51158 * C6681) *
                C1117 -
            (C17454 * C23362 + C51158 * C23363 + C17453 * C6675 +
             C17448 * C6677) *
                C1123 -
            (C17454 * C23364 + C51158 * C23365 + C17453 * C6678 +
             C17448 * C6681) *
                C51061) *
               C5338) *
              C50972 * C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C1122 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C1117 -
            (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
             C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
                C1123 -
            (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
             C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
                C51061) *
               C51122 * C50972 * C51243 +
           ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
             C20286 * C1224 + C20281 * C1229 + C20287 * C2653 +
             C20282 * C2657) *
                C1123 -
            ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
              C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                 C1117 +
             (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
              C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                 C1122) +
            (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
             C20286 * C1230 + C20281 * C1236 + C20287 * C2658 +
             C20282 * C2662) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51252 +
          (((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
             C20286 * C3416 + C20281 * C3419 + C20287 * C4338 +
             C20282 * C4340) *
                C1123 -
            ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 +
              C20281 * C1729 + C20285 * C975 + C20280 * C984 + C20284 * C514 +
              C20279 * C530) *
                 C1117 +
             (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 +
              C20281 * C1721 + C20285 * C969 + C20280 * C974 + C20284 * C500 +
              C20279 * C515) *
                 C1122) +
            (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
             C20286 * C3420 + C20281 * C3425 + C20287 * C4341 +
             C20282 * C4344) *
                C51061) *
               C51122 * C50972 * C51243 +
           ((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C1122 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C1117 -
            (C20287 * C4339 + C20282 * C4342 + C20286 * C3417 + C20281 * C3421 +
             C20285 * C1718 + C20280 * C1723 + C20284 * C970 + C20279 * C976) *
                C1123 -
            (C20287 * C4343 + C20282 * C4345 + C20286 * C3422 + C20281 * C3426 +
             C20285 * C1724 + C20280 * C1730 + C20284 * C977 + C20279 * C985) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C1122 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C1117 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C1123 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51122 * C17450 +
            ((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
             (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
                C51122 * C17451 +
            C18607 * C17452) *
               C51243 +
           (((C17695 + C17694) * C1123 -
             ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
             (C17697 + C17696) * C51061) *
                C51122 * C17450 +
            ((C17703 + C17702) * C1123 -
             ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
             (C17705 + C17704) * C51061) *
                C51122 * C17451 +
            ((C18065 + C18066) * C1123 - (C17506 * C1117 + C17507 * C1122) +
             (C18067 + C18068) * C51061) *
                C51122 * C17452) *
               C50996) *
              C51252 +
          ((((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                 C1123 -
             ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                  C1117 +
              (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                  C1122) +
             (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C17450 +
            ((C18446 + C18447) * C1123 -
             ((C17891 + C17890) * C1117 + (C17889 + C17888) * C1122) +
             (C18448 + C18449) * C51061) *
                C51122 * C17451 +
            ((C18450 + C18451) * C1123 - (C18226 * C1117 + C18227 * C1122) +
             (C18452 + C18453) * C51061) *
                C51122 * C17452) *
               C51243 +
           (((C17888 + C17889) * C1122 + (C17890 + C17891) * C1117 -
             (C18447 + C18446) * C1123 - (C18449 + C18448) * C51061) *
                C51122 * C17450 +
            ((C17892 + C17893) * C1122 + (C17894 + C17895) * C1117 -
             (C18451 + C18450) * C1123 - (C18453 + C18452) * C51061) *
                C51122 * C17451 +
            ((C18228 + C18229) * C1122 + (C18230 + C18231) * C1117 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C1123 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51122 * C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C1122 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C1117 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C1123 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C5336 +
            ((C22427 + C22428) * C1122 + (C22429 + C22430) * C1117 -
             (C22961 + C22962) * C1123 - (C22963 + C22964) * C51061) *
                C5337 +
            C23387 * C5338) *
               C50972 * C51243 +
           (((C17695 + C17694) * C1123 -
             ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
             (C17697 + C17696) * C51061) *
                C5336 +
            ((C18446 + C18447) * C1123 -
             ((C17891 + C17890) * C1117 + (C17889 + C17888) * C1122) +
             (C18448 + C18449) * C51061) *
                C5337 +
            ((C22969 + C22970) * C1123 - (C22409 * C1117 + C22410 * C1122) +
             (C22971 + C22972) * C51061) *
                C5338) *
               C50972 * C50996) *
              C51252 +
          ((((C22962 + C22961) * C1123 -
             ((C22430 + C22429) * C1117 + (C22428 + C22427) * C1122) +
             (C22964 + C22963) * C51061) *
                C5336 +
            ((C22966 + C22965) * C1123 -
             ((C22434 + C22433) * C1117 + (C22432 + C22431) * C1122) +
             (C22968 + C22967) * C51061) *
                C5337 +
            ((C23382 + C23383) * C1123 -
             ((C22441 + C22442) * C1117 + (C22443 + C22444) * C1122) +
             (C23384 + C23385) * C51061) *
                C5338) *
               C50972 * C51243 +
           (((C17888 + C17889) * C1122 + (C17890 + C17891) * C1117 -
             (C18447 + C18446) * C1123 - (C18449 + C18448) * C51061) *
                C5336 +
            ((C17896 + C17897) * C1122 + (C17898 + C17899) * C1117 -
             (C22970 + C22969) * C1123 - (C22972 + C22971) * C51061) *
                C5337 +
            ((C22437 + C22438) * C1122 + (C22439 + C22440) * C1117 -
             (C17454 * C4736 + C51158 * C4742 + C17453 * C4737 +
              C17448 * C4743) *
                 C1123 -
             (C17454 * C4740 + C51158 * C4748 + C17453 * C4741 +
              C17448 * C4749) *
                 C51061) *
                C5338) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
               C1219 +
           (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
               C1214 -
           (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
               C1220 -
           (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
               C1215 +
           (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
               C1221 +
           (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
               C1216 -
           (C17454 * C2652 + C51158 * C2655 + C17453 * C1223 + C17448 * C1227) *
               C1222 -
           (C17454 * C2656 + C51158 * C2661 + C17453 * C1228 + C17448 * C1235) *
               C1217) *
              C51122 * C17450 +
          ((C17488 + C17489) * C1219 + (C17490 + C17491) * C1214 -
           (C17694 + C17695) * C1220 - (C17696 + C17697) * C1215 +
           (C17698 + C17699) * C1221 + (C17700 + C17701) * C1216 -
           (C17454 * C2653 + C51158 * C2657 + C17453 * C1224 + C17448 * C1229) *
               C1222 -
           (C17454 * C2658 + C51158 * C2662 + C17453 * C1230 + C17448 * C1236) *
               C1217) *
              C51122 * C17451 +
          (C17504 * C1219 + C17505 * C1214 - C18052 * C1220 - C18053 * C1215 +
           (C17706 + C17707) * C1221 + (C17708 + C17709) * C1216 -
           (C17454 * C2654 + C51158 * C2659 + C17453 * C1225 + C17448 * C1231) *
               C1222 -
           (C17454 * C2660 + C51158 * C2663 + C17453 * C1232 + C17448 * C1237) *
               C1217) *
              C51122 * C17452) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1122 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1117 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1123 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
            (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18607 * C17452) *
              C1119 +
          (((C17695 + C17694) * C1123 -
            ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
            (C17697 + C17696) * C51061) *
               C51122 * C17450 +
           ((C17703 + C17702) * C1123 -
            ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
            (C17705 + C17704) * C51061) *
               C51122 * C17451 +
           ((C18065 + C18066) * C1123 - (C17506 * C1117 + C17507 * C1122) +
            (C18067 + C18068) * C51061) *
               C51122 * C17452) *
              C1120 +
          (C18607 * C17450 +
           ((C17499 + C17498) * C1122 + (C17497 + C17496) * C1117 -
            (C18066 + C18065) * C1123 - (C18068 + C18067) * C51061) *
               C51122 * C17451 +
           ((C17500 + C17501) * C1122 + (C17502 + C17503) * C1117 -
            (C17454 * C310 + C51158 * C329 + C17453 * C309 + C17448 * C327) *
                C1123 -
            (C17454 * C330 + C51158 * C340 + C17453 * C328 + C17448 * C339) *
                C51061) *
               C51122 * C17452) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1122 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C1117 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1123 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C1119 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C1123 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C1117 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C1122) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C51061) *
              C51122 * C50972 * C1120 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C1122 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C1117 -
           (C20287 * C2654 + C20282 * C2659 + C20286 * C1225 + C20281 * C1231 +
            C20285 * C306 + C20280 * C321 + C20284 * C305 + C20279 * C319) *
               C1123 -
           (C20287 * C2660 + C20282 * C2663 + C20286 * C1232 + C20281 * C1237 +
            C20285 * C322 + C20280 * C336 + C20284 * C320 + C20279 * C335) *
               C51061) *
              C51122 * C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
           C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
              C1219 +
          (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
           C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
              C1214 -
          (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
           C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
              C1220 -
          (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
           C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
              C1215 +
          (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
           C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
              C1221 +
          (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
           C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
              C1216 -
          (C20287 * C20974 + C20282 * C20975 + C20286 * C3690 + C20281 * C3692 +
           C20285 * C2652 + C20280 * C2655 + C20284 * C1223 + C20279 * C1227) *
              C1222 -
          (C20287 * C20976 + C20282 * C20977 + C20286 * C3693 + C20281 * C3696 +
           C20285 * C2656 + C20280 * C2661 + C20284 * C1228 + C20279 * C1235) *
              C1217) *
         C51122 * C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1122 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1117 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1123 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C5336 +
           ((C22427 + C22428) * C1122 + (C22429 + C22430) * C1117 -
            (C22961 + C22962) * C1123 - (C22963 + C22964) * C51061) *
               C5337 +
           (C22445 * C1122 + C22446 * C1117 - (C22965 + C22966) * C1123 -
            (C22967 + C22968) * C51061) *
               C5338) *
              C50972 * C1119 +
          (((C17695 + C17694) * C1123 -
            ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
            (C17697 + C17696) * C51061) *
               C5336 +
           ((C18446 + C18447) * C1123 -
            ((C17891 + C17890) * C1117 + (C17889 + C17888) * C1122) +
            (C18448 + C18449) * C51061) *
               C5337 +
           ((C22969 + C22970) * C1123 - (C22409 * C1117 + C22410 * C1122) +
            (C22971 + C22972) * C51061) *
               C5338) *
              C50972 * C1120 +
          (C18606 * C5336 +
           ((C17892 + C17893) * C1122 + (C17894 + C17895) * C1117 -
            (C18451 + C18450) * C1123 - (C18453 + C18452) * C51061) *
               C5337 +
           ((C17900 + C17901) * C1122 + (C17902 + C17903) * C1117 -
            (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
             C17448 * C1345) *
                C1123 -
            (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
             C17448 * C1351) *
                C51061) *
               C5338) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
               C1219 +
           (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
               C1214 -
           (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
               C1220 -
           (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
               C1215 +
           (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
               C1221 +
           (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
               C1216 -
           (C17454 * C2652 + C51158 * C2655 + C17453 * C1223 + C17448 * C1227) *
               C1222 -
           (C17454 * C2656 + C51158 * C2661 + C17453 * C1228 + C17448 * C1235) *
               C1217) *
              C5336 +
          ((C22427 + C22428) * C1219 + (C22429 + C22430) * C1214 -
           (C22961 + C22962) * C1220 - (C22963 + C22964) * C1215 +
           (C17453 * C1717 + C17448 * C1721 + C17454 * C3416 + C51158 * C3419) *
               C1221 +
           (C17453 * C1722 + C17448 * C1729 + C17454 * C3420 + C51158 * C3425) *
               C1216 -
           (C17454 * C4338 + C51158 * C4340 + C17453 * C3416 + C17448 * C3419) *
               C1222 -
           (C17454 * C4341 + C51158 * C4344 + C17453 * C3420 + C17448 * C3425) *
               C1217) *
              C5337 +
          (C22445 * C1219 + C22446 * C1214 - (C22965 + C22966) * C1220 -
           (C22967 + C22968) * C1215 +
           (C17453 * C2846 + C17448 * C2849 + C17454 * C3844 + C51158 * C3846) *
               C1221 +
           (C17453 * C2850 + C17448 * C2855 + C17454 * C3847 + C51158 * C3850) *
               C1216 -
           (C17454 * C21076 + C51158 * C21077 + C17453 * C3844 +
            C17448 * C3846) *
               C1222 -
           (C17454 * C21078 + C51158 * C21079 + C17453 * C3847 +
            C17448 * C3850) *
               C1217) *
              C5338) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C687 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51251 -
            (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
             C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
                C688 -
            (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
             C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
                C51061) *
               C51122 * C50972 * C51243 +
           ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
             C20286 * C1224 + C20281 * C1229 + C20287 * C2653 +
             C20282 * C2657) *
                C688 -
            ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
              C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                 C51251 +
             (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
              C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                 C687) +
            (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
             C20286 * C1230 + C20281 * C1236 + C20287 * C2658 +
             C20282 * C2662) *
                C51061) *
               C51122 * C50972 * C50996) *
              C1831 +
          (((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
             C20286 * C3416 + C20281 * C3419 + C20287 * C4338 +
             C20282 * C4340) *
                C688 -
            ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 +
              C20281 * C1729 + C20285 * C975 + C20280 * C984 + C20284 * C514 +
              C20279 * C530) *
                 C51251 +
             (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 +
              C20281 * C1721 + C20285 * C969 + C20280 * C974 + C20284 * C500 +
              C20279 * C515) *
                 C687) +
            (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
             C20286 * C3420 + C20281 * C3425 + C20287 * C4341 +
             C20282 * C4344) *
                C51061) *
               C51122 * C50972 * C51243 +
           ((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C687 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51251 -
            (C20287 * C4339 + C20282 * C4342 + C20286 * C3417 + C20281 * C3421 +
             C20285 * C1718 + C20280 * C1723 + C20284 * C970 + C20279 * C976) *
                C688 -
            (C20287 * C4343 + C20282 * C4345 + C20286 * C3422 + C20281 * C3426 +
             C20285 * C1724 + C20280 * C1730 + C20284 * C977 + C20279 * C985) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C687 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51251 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C688 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51122 * C17450 +
            ((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
             (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
                C51122 * C17451 +
            C18071 * C17452) *
               C51243 +
           (((C17695 + C17694) * C688 -
             ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
             (C17697 + C17696) * C51061) *
                C51122 * C17450 +
            ((C17703 + C17702) * C688 -
             ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
             (C17705 + C17704) * C51061) *
                C51122 * C17451 +
            ((C18065 + C18066) * C688 - (C17506 * C51251 + C17507 * C687) +
             (C18067 + C18068) * C51061) *
                C51122 * C17452) *
               C50996) *
              C1831 +
          ((((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                 C688 -
             ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                  C51251 +
              (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                  C687) +
             (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C17450 +
            ((C18446 + C18447) * C688 -
             ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
             (C18448 + C18449) * C51061) *
                C51122 * C17451 +
            ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
             (C18452 + C18453) * C51061) *
                C51122 * C17452) *
               C51243 +
           (((C17888 + C17889) * C687 + (C17890 + C17891) * C51251 -
             (C18447 + C18446) * C688 - (C18449 + C18448) * C51061) *
                C51122 * C17450 +
            ((C17892 + C17893) * C687 + (C17894 + C17895) * C51251 -
             (C18451 + C18450) * C688 - (C18453 + C18452) * C51061) *
                C51122 * C17451 +
            ((C18228 + C18229) * C687 + (C18230 + C18231) * C51251 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C688 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51122 * C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C687 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51251 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C688 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C5336 +
            ((C22427 + C22428) * C687 + (C22429 + C22430) * C51251 -
             (C22961 + C22962) * C688 - (C22963 + C22964) * C51061) *
                C5337 +
            (C22445 * C687 + C22446 * C51251 - C23369 * C688 -
             C23370 * C51061) *
                C5338) *
               C50972 * C51243 +
           (((C17695 + C17694) * C688 -
             ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
             (C17697 + C17696) * C51061) *
                C5336 +
            ((C18446 + C18447) * C688 -
             ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
             (C18448 + C18449) * C51061) *
                C5337 +
            ((C22969 + C22970) * C688 - (C22409 * C51251 + C22410 * C687) +
             (C22971 + C22972) * C51061) *
                C5338) *
               C50972 * C50996) *
              C1831 +
          ((((C22962 + C22961) * C688 -
             ((C22430 + C22429) * C51251 + (C22428 + C22427) * C687) +
             (C22964 + C22963) * C51061) *
                C5336 +
            ((C22966 + C22965) * C688 -
             ((C22434 + C22433) * C51251 + (C22432 + C22431) * C687) +
             (C22968 + C22967) * C51061) *
                C5337 +
            ((C23382 + C23383) * C688 - (C24292 * C51251 + C24293 * C687) +
             (C23384 + C23385) * C51061) *
                C5338) *
               C50972 * C51243 +
           (((C17888 + C17889) * C687 + (C17890 + C17891) * C51251 -
             (C18447 + C18446) * C688 - (C18449 + C18448) * C51061) *
                C5336 +
            ((C17896 + C17897) * C687 + (C17898 + C17899) * C51251 -
             (C22970 + C22969) * C688 - (C22972 + C22971) * C51061) *
                C5337 +
            ((C22437 + C22438) * C687 + (C22439 + C22440) * C51251 -
             (C17454 * C4736 + C51158 * C4742 + C17453 * C4737 +
              C17448 * C4743) *
                 C688 -
             (C17454 * C4740 + C51158 * C4748 + C17453 * C4741 +
              C17448 * C4749) *
                 C51061) *
                C5338) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C687 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51251 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C688 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C50991 * C51298 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C688 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51251 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C687) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C51061) *
              C51122 * C50972 * C50991 * C51299 +
          ((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
            C20286 * C2846 + C20281 * C2849 + C20287 * C3844 + C20282 * C3846) *
               C687 +
           (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
            C20286 * C2850 + C20281 * C2855 + C20287 * C3847 + C20282 * C3850) *
               C51251 -
           (C20287 * C21076 + C20282 * C21077 + C20286 * C3844 +
            C20281 * C3846 + C20285 * C2846 + C20280 * C2849 + C20284 * C1337 +
            C20279 * C1341) *
               C688 -
           (C20287 * C21078 + C20282 * C21079 + C20286 * C3847 +
            C20281 * C3850 + C20285 * C2850 + C20280 * C2855 + C20284 * C1342 +
            C20279 * C1349) *
               C51061) *
              C51122 * C50972 * C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C687 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51251 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C688 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
            (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18071 * C17452) *
              C50991 * C51298 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C688 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51251 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C687) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C51061) *
               C51122 * C17450 +
           ((C18446 + C18447) * C688 -
            ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
            (C18448 + C18449) * C51061) *
               C51122 * C17451 +
           ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
            (C18452 + C18453) * C51061) *
               C51122 * C17452) *
              C50991 * C51299 +
          (((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C687 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C51251 -
            (C17454 * C2846 + C51158 * C2849 + C17453 * C1337 +
             C17448 * C1341) *
                C688 -
            (C17454 * C2850 + C51158 * C2855 + C17453 * C1342 +
             C17448 * C1349) *
                C51061) *
               C51122 * C17450 +
           ((C17896 + C17897) * C687 + (C17898 + C17899) * C51251 -
            (C17454 * C2847 + C51158 * C2851 + C17453 * C1338 +
             C17448 * C1343) *
                C688 -
            (C17454 * C2852 + C51158 * C2856 + C17453 * C1344 +
             C17448 * C1350) *
                C51061) *
               C51122 * C17451 +
           ((C17900 + C17901) * C687 + (C17902 + C17903) * C51251 -
            (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
             C17448 * C1345) *
                C688 -
            (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
             C17448 * C1351) *
                C51061) *
               C51122 * C17452) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C687 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51251 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C688 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C5336 +
           ((C22427 + C22428) * C687 + (C22429 + C22430) * C51251 -
            (C22961 + C22962) * C688 - (C22963 + C22964) * C51061) *
               C5337 +
           C24801 * C5338) *
              C50972 * C50991 * C51298 +
          (((C22962 + C22961) * C688 -
            ((C22430 + C22429) * C51251 + (C22428 + C22427) * C687) +
            (C22964 + C22963) * C51061) *
               C5336 +
           ((C22966 + C22965) * C688 -
            ((C22434 + C22433) * C51251 + (C22432 + C22431) * C687) +
            (C22968 + C22967) * C51061) *
               C5337 +
           ((C23382 + C23383) * C688 - (C24292 * C51251 + C24293 * C687) +
            (C23384 + C23385) * C51061) *
               C5338) *
              C50972 * C50991 * C51299 +
          (C24801 * C5336 +
           ((C22444 + C22443) * C687 + (C22442 + C22441) * C51251 -
            (C23383 + C23382) * C688 - (C23385 + C23384) * C51061) *
               C5337 +
           ((C24304 + C24305) * C687 + (C24306 + C24307) * C51251 -
            (C17454 * C23362 + C51158 * C23363 + C17453 * C6675 +
             C17448 * C6677) *
                C688 -
            (C17454 * C23364 + C51158 * C23365 + C17453 * C6678 +
             C17448 * C6681) *
                C51061) *
               C5338) *
              C50972 * C50991 * C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C17453 * C119 + C17448 * C126 + C17454 * C301 +
                  C51158 * C311) *
                     C118 +
                 (C17453 * C127 + C17448 * C140 + C17454 * C312 +
                  C51158 * C331) *
                     C51009) *
                    C51122 * C17450 +
                ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) *
                    C51122 * C17451 +
                C17514 * C17452) *
                   C1119 -
               (C17515 * C17452 +
                ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) *
                    C51122 * C17451 +
                ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) *
                    C51122 * C17450) *
                   C1120 +
               (C17514 * C17450 +
                ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) *
                    C51122 * C17451 +
                ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) *
                    C51122 * C17452) *
                   C1121) *
                  C1831 +
              ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) *
                    C51122 * C17450 +
                ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) *
                    C51122 * C17451 +
                ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) *
                    C51122 * C17452) *
                   C1120 -
               (C18235 * C17452 +
                ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) *
                    C51122 * C17451 +
                ((C17454 * C975 + C51158 * C984 + C17453 * C514 +
                  C17448 * C530) *
                     C51009 +
                 (C17454 * C969 + C51158 * C974 + C17453 * C500 +
                  C17448 * C515) *
                     C118) *
                    C51122 * C17450) *
                   C1119 -
               (((C17454 * C983 + C51158 * C988 + C17453 * C513 +
                  C17448 * C529) *
                     C51009 +
                 (C17454 * C973 + C51158 * C982 + C17453 * C499 +
                  C17448 * C512) *
                     C118) *
                    C51122 * C17452 +
                ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) *
                    C51122 * C17451 +
                C18235 * C17450) *
                   C1121) *
                  C51089) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17453 * C119 + C17448 * C126 + C17454 * C301 +
                 C51158 * C311) *
                    C298 +
                (C17453 * C127 + C17448 * C140 + C17454 * C312 +
                 C51158 * C331) *
                    C293 -
                (C17454 * C302 + C51158 * C313 + C17453 * C301 +
                 C17448 * C311) *
                    C299 -
                (C17454 * C314 + C51158 * C332 + C17453 * C312 +
                 C17448 * C331) *
                    C294 +
                (C17453 * C302 + C17448 * C313 + C17454 * C1223 +
                 C51158 * C1227) *
                    C300 +
                (C17453 * C314 + C17448 * C332 + C17454 * C1228 +
                 C51158 * C1235) *
                    C295) *
                   C51122 * C17450 +
               ((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
                (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
                (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
                   C51122 * C17451 +
               (C17504 * C298 + C17505 * C293 - C18052 * C299 - C18053 * C294 +
                (C17706 + C17707) * C300 + (C17708 + C17709) * C295) *
                   C51122 * C17452) *
                  C50991 * C1831 +
              (((C17453 * C969 + C17448 * C974 + C17454 * C1717 +
                 C51158 * C1721) *
                    C299 -
                ((C17454 * C975 + C51158 * C984 + C17453 * C514 +
                  C17448 * C530) *
                     C293 +
                 (C17454 * C969 + C51158 * C974 + C17453 * C500 +
                  C17448 * C515) *
                     C298) +
                (C17453 * C975 + C17448 * C984 + C17454 * C1722 +
                 C51158 * C1729) *
                    C294 -
                (C17454 * C3416 + C51158 * C3419 + C17453 * C1717 +
                 C17448 * C1721) *
                    C300 -
                (C17454 * C3420 + C51158 * C3425 + C17453 * C1722 +
                 C17448 * C1729) *
                    C295) *
                   C51122 * C17450 +
               ((C18446 + C18447) * C299 -
                ((C17891 + C17890) * C293 + (C17889 + C17888) * C298) +
                (C18448 + C18449) * C294 -
                (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
                 C17448 * C1723) *
                    C300 -
                (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
                 C17448 * C1730) *
                    C295) *
                   C51122 * C17451 +
               ((C18450 + C18451) * C299 - (C18226 * C293 + C18227 * C298) +
                (C18452 + C18453) * C294 -
                (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
                 C17448 * C1725) *
                    C300 -
                (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
                 C17448 * C1731) *
                    C295) *
                   C51122 * C17452) *
                  C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51009) *
               C51122 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
               C17451 +
           C17514 * C17452) *
              C50991 * C1997 -
          (C18235 * C17452 +
           ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
               C17451 +
           ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                C51009 +
            (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                C118) *
               C51122 * C17450) *
              C50991 * C1998 +
          (((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C118 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C51009) *
               C51122 * C17450 +
           ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C51122 *
               C17451 +
           ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51122 *
               C17452) *
              C50991 * C1999 -
          (((C17454 * C6233 + C51158 * C6234 + C17453 * C2007 +
             C17448 * C2014) *
                C51009 +
            (C17454 * C6231 + C51158 * C6232 + C17453 * C2002 +
             C17448 * C2008) *
                C118) *
               C51122 * C17452 +
           ((C17454 * C4741 + C51158 * C4749 + C17453 * C2009 +
             C17448 * C2015) *
                C51009 +
            (C17454 * C4737 + C51158 * C4743 + C17453 * C2003 +
             C17448 * C2010) *
                C118) *
               C51122 * C17451 +
           ((C17454 * C4745 + C51158 * C4751 + C17453 * C2011 +
             C17448 * C2016) *
                C51009 +
            (C17454 * C4739 + C51158 * C4747 + C17453 * C2004 +
             C17448 * C2012) *
                C118) *
               C51122 * C17450) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C1119 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C1120 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
             C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
             C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
                C51009) *
               C51122 * C50972 * C1121) *
              C1831 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C1120 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C1119 -
           ((C20287 * C3424 + C20282 * C3427 + C20286 * C1726 + C20281 * C1731 +
             C20285 * C979 + C20280 * C986 + C20284 * C509 + C20279 * C527) *
                C51009 +
            (C20287 * C3418 + C20282 * C3423 + C20286 * C1719 + C20281 * C1725 +
             C20285 * C971 + C20280 * C978 + C20284 * C497 + C20279 * C508) *
                C118) *
               C51122 * C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C293 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C299 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C294 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C300 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C295) *
              C51122 * C50972 * C50991 * C1831 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C299 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C293 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C298) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C294 -
           (C20287 * C21406 + C20282 * C21407 + C20286 * C4338 +
            C20281 * C4340 + C20285 * C3416 + C20280 * C3419 + C20284 * C1717 +
            C20279 * C1721) *
               C300 -
           (C20287 * C21408 + C20282 * C21409 + C20286 * C4341 +
            C20281 * C4344 + C20285 * C3420 + C20280 * C3425 + C20284 * C1722 +
            C20279 * C1729) *
               C295) *
              C51122 * C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51009) *
              C51122 * C50972 * C50991 * C1997 -
          ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
            C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
               C51009 +
           (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
            C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
               C118) *
              C51122 * C50972 * C50991 * C1998 +
          ((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
            C20286 * C2846 + C20281 * C2849 + C20287 * C3844 + C20282 * C3846) *
               C118 +
           (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
            C20286 * C2850 + C20281 * C2855 + C20287 * C3847 + C20282 * C3850) *
               C51009) *
              C51122 * C50972 * C50991 * C1999 -
          ((C20287 * C21673 + C20282 * C21675 + C20286 * C4744 +
            C20281 * C4750 + C20285 * C4745 + C20280 * C4751 + C20284 * C2011 +
            C20279 * C2016) *
               C51009 +
           (C20287 * C21672 + C20282 * C21674 + C20286 * C4738 +
            C20281 * C4746 + C20285 * C4739 + C20280 * C4747 + C20284 * C2004 +
            C20279 * C2012) *
               C118) *
              C51122 * C50972 * C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C5336 +
            ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C5337 +
            C22450 * C5338) *
               C50972 * C1119 -
           (C22447 * C5338 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C5337 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C5336) *
               C50972 * C1120 +
           (C17512 * C5336 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C5337 +
            ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C5338) *
               C50972 * C1121) *
              C1831 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C5336 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C5337 +
            ((C22437 + C22438) * C118 + (C22439 + C22440) * C51009) * C5338) *
               C50972 * C1120 -
           (((C22441 + C22442) * C51009 + (C22443 + C22444) * C118) * C5338 +
            ((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C5337 +
            ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C5336) *
               C50972 * C1119 -
           (((C17454 * C6233 + C51158 * C6234 + C17453 * C2007 +
              C17448 * C2014) *
                 C51009 +
             (C17454 * C6231 + C51158 * C6232 + C17453 * C2002 +
              C17448 * C2008) *
                 C118) *
                C5338 +
            ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C5337 +
            C18234 * C5336) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C5336 +
           ((C22427 + C22428) * C298 + (C22429 + C22430) * C293 -
            (C22961 + C22962) * C299 - (C22963 + C22964) * C294 +
            (C23890 + C23891) * C300 + (C23892 + C23893) * C295) *
               C5337 +
           (C22445 * C298 + C22446 * C293 - C23369 * C299 - C23370 * C294 +
            (C23894 + C23895) * C300 + (C23896 + C23897) * C295) *
               C5338) *
              C50972 * C50991 * C1831 +
          (((C22962 + C22961) * C299 -
            ((C22430 + C22429) * C293 + (C22428 + C22427) * C298) +
            (C22964 + C22963) * C294 - (C23891 + C23890) * C300 -
            (C23893 + C23892) * C295) *
               C5336 +
           ((C22966 + C22965) * C299 -
            ((C22434 + C22433) * C293 + (C22432 + C22431) * C298) +
            (C22968 + C22967) * C294 - (C23895 + C23894) * C300 -
            (C23897 + C23896) * C295) *
               C5337 +
           ((C23382 + C23383) * C299 -
            ((C22441 + C22442) * C293 + (C22443 + C22444) * C298) +
            (C23384 + C23385) * C294 -
            (C17454 * C21672 + C51158 * C21674 + C17453 * C4738 +
             C17448 * C4746) *
                C300 -
            (C17454 * C21673 + C51158 * C21675 + C17453 * C4744 +
             C17448 * C4750) *
                C295) *
               C5338) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51009) *
               C5336 +
           ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C5337 +
           C22450 * C5338) *
              C50972 * C50991 * C1997 -
          (C24308 * C5338 +
           ((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C5337 +
           ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C5336) *
              C50972 * C50991 * C1998 +
          (C22450 * C5336 +
           ((C22444 + C22443) * C118 + (C22442 + C22441) * C51009) * C5337 +
           ((C24304 + C24305) * C118 + (C24306 + C24307) * C51009) * C5338) *
              C50972 * C50991 * C1999 -
          (((C17454 * C24288 + C51158 * C24290 + C17453 * C7648 +
             C17448 * C7651) *
                C51009 +
            (C17454 * C24287 + C51158 * C24289 + C17453 * C7645 +
             C17448 * C7649) *
                C118) *
               C5338 +
           ((C24307 + C24306) * C51009 + (C24305 + C24304) * C118) * C5337 +
           C24308 * C5336) *
              C50972 * C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C51243 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C50996) *
              C51298 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C50996 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C51243) *
              C51299 +
          (((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
             C20286 * C2846 + C20281 * C2849 + C20287 * C3844 +
             C20282 * C3846) *
                C118 +
            (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
             C20286 * C2850 + C20281 * C2855 + C20287 * C3847 +
             C20282 * C3850) *
                C51009) *
               C51122 * C50972 * C51243 -
           ((C20287 * C3849 + C20282 * C3851 + C20286 * C2852 + C20281 * C2856 +
             C20285 * C1344 + C20280 * C1350 + C20284 * C519 + C20279 * C532) *
                C51009 +
            (C20287 * C3845 + C20282 * C3848 + C20286 * C2847 + C20281 * C2851 +
             C20285 * C1338 + C20280 * C1343 + C20284 * C502 + C20279 * C518) *
                C118) *
               C51122 * C50972 * C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C51243 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C50996) *
              C51298 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51122 *
                C17452) *
               C50996 -
           (C18235 * C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C51243) *
              C51299 +
          ((((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                 C118 +
             (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                 C51009) *
                C51122 * C17450 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C51122 *
                C17451 +
            ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51122 *
                C17452) *
               C51243 -
           (((C17454 * C1348 + C51158 * C1352 + C17453 * C523 + C17448 * C534) *
                 C51009 +
             (C17454 * C1340 + C51158 * C1347 + C17453 * C504 + C17448 * C522) *
                 C118) *
                C51122 * C17452 +
            ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51122 *
                C17451 +
            ((C17899 + C17898) * C51009 + (C17897 + C17896) * C118) * C51122 *
                C17450) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C5336 +
            ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C5337 +
            C22450 * C5338) *
               C50972 * C51243 -
           (C22447 * C5338 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C5337 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C5336) *
               C50972 * C50996) *
              C51298 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C5336 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C5337 +
            ((C22437 + C22438) * C118 + (C22439 + C22440) * C51009) * C5338) *
               C50972 * C50996 -
           (C24308 * C5338 +
            ((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C5337 +
            ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C5336) *
               C50972 * C51243) *
              C51299 +
          ((C22450 * C5336 +
            ((C22444 + C22443) * C118 + (C22442 + C22441) * C51009) * C5337 +
            ((C24304 + C24305) * C118 + (C24306 + C24307) * C51009) * C5338) *
               C50972 * C51243 -
           (((C17454 * C6680 + C51158 * C6682 + C17453 * C5667 +
              C17448 * C5671) *
                 C51009 +
             (C17454 * C6676 + C51158 * C6679 + C17453 * C5662 +
              C17448 * C5666) *
                 C118) *
                C5338 +
            ((C22440 + C22439) * C51009 + (C22438 + C22437) * C118) * C5337 +
            C22447 * C5336) *
               C50972 * C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
            (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
            (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
               C51122 * C17451 +
           (C17504 * C298 + C17505 * C293 - C18052 * C299 - C18053 * C294 +
            (C17706 + C17707) * C300 + (C17708 + C17709) * C295) *
               C51122 * C17452) *
              C50991 * C1831 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C299 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C293 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C298) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C294 -
            (C17454 * C3416 + C51158 * C3419 + C17453 * C1717 +
             C17448 * C1721) *
                C300 -
            (C17454 * C3420 + C51158 * C3425 + C17453 * C1722 +
             C17448 * C1729) *
                C295) *
               C51122 * C17450 +
           ((C18446 + C18447) * C299 -
            ((C17891 + C17890) * C293 + (C17889 + C17888) * C298) +
            (C18448 + C18449) * C294 -
            (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
             C17448 * C1723) *
                C300 -
            (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
             C17448 * C1730) *
                C295) *
               C51122 * C17451 +
           ((C18450 + C18451) * C299 - (C18226 * C293 + C18227 * C298) +
            (C18452 + C18453) * C294 -
            (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
             C17448 * C1725) *
                C300 -
            (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
             C17448 * C1731) *
                C295) *
               C51122 * C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C1119 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C1120 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51122 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) * C51122 *
                C17452) *
               C1121) *
              C1831 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51122 *
                C17452) *
               C1120 -
           (C18235 * C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C1119 -
           (((C17454 * C983 + C51158 * C988 + C17453 * C513 + C17448 * C529) *
                 C51009 +
             (C17454 * C973 + C51158 * C982 + C17453 * C499 + C17448 * C512) *
                 C118) *
                C51122 * C17452 +
            ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51122 *
                C17451 +
            C18235 * C17450) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C1119 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C1120 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
             C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
             C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
                C51009) *
               C51122 * C50972 * C1121) *
              C1831 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C1120 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C1119 -
           ((C20287 * C3424 + C20282 * C3427 + C20286 * C1726 + C20281 * C1731 +
             C20285 * C979 + C20280 * C986 + C20284 * C509 + C20279 * C527) *
                C51009 +
            (C20287 * C3418 + C20282 * C3423 + C20286 * C1719 + C20281 * C1725 +
             C20285 * C971 + C20280 * C978 + C20284 * C497 + C20279 * C508) *
                C118) *
               C51122 * C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C293 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C299 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C294 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C300 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C295) *
              C51122 * C50972 * C50991 * C1831 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C299 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C293 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C298) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C294 -
           (C20287 * C21406 + C20282 * C21407 + C20286 * C4338 +
            C20281 * C4340 + C20285 * C3416 + C20280 * C3419 + C20284 * C1717 +
            C20279 * C1721) *
               C300 -
           (C20287 * C21408 + C20282 * C21409 + C20286 * C4341 +
            C20281 * C4344 + C20285 * C3420 + C20280 * C3425 + C20284 * C1722 +
            C20279 * C1729) *
               C295) *
              C51122 * C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C5336 +
            ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C5337 +
            C22450 * C5338) *
               C50972 * C1119 -
           (C22447 * C5338 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C5337 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C5336) *
               C50972 * C1120 +
           (C17512 * C5336 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C5337 +
            ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C5338) *
               C50972 * C1121) *
              C1831 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C5336 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C5337 +
            ((C22437 + C22438) * C118 + (C22439 + C22440) * C51009) * C5338) *
               C50972 * C1120 -
           (((C22441 + C22442) * C51009 + (C22443 + C22444) * C118) * C5338 +
            ((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C5337 +
            ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C5336) *
               C50972 * C1119 -
           (((C17454 * C6233 + C51158 * C6234 + C17453 * C2007 +
              C17448 * C2014) *
                 C51009 +
             (C17454 * C6231 + C51158 * C6232 + C17453 * C2002 +
              C17448 * C2008) *
                 C118) *
                C5338 +
            ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C5337 +
            C18234 * C5336) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C5336 +
           ((C22427 + C22428) * C298 + (C22429 + C22430) * C293 -
            (C22961 + C22962) * C299 - (C22963 + C22964) * C294 +
            (C23890 + C23891) * C300 + (C23892 + C23893) * C295) *
               C5337 +
           (C22445 * C298 + C22446 * C293 - C23369 * C299 - C23370 * C294 +
            (C23894 + C23895) * C300 + (C23896 + C23897) * C295) *
               C5338) *
              C50972 * C50991 * C1831 +
          (((C22962 + C22961) * C299 -
            ((C22430 + C22429) * C293 + (C22428 + C22427) * C298) +
            (C22964 + C22963) * C294 - (C23891 + C23890) * C300 -
            (C23893 + C23892) * C295) *
               C5336 +
           ((C22966 + C22965) * C299 -
            ((C22434 + C22433) * C293 + (C22432 + C22431) * C298) +
            (C22968 + C22967) * C294 - (C23895 + C23894) * C300 -
            (C23897 + C23896) * C295) *
               C5337 +
           ((C23382 + C23383) * C299 -
            ((C22441 + C22442) * C293 + (C22443 + C22444) * C298) +
            (C23384 + C23385) * C294 -
            (C17454 * C21672 + C51158 * C21674 + C17453 * C4738 +
             C17448 * C4746) *
                C300 -
            (C17454 * C21673 + C51158 * C21675 + C17453 * C4744 +
             C17448 * C4750) *
                C295) *
               C5338) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C687 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51251 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C688 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51265 +
            ((C22427 + C22428) * C687 + (C22429 + C22430) * C51251 -
             (C22961 + C22962) * C688 - (C22963 + C22964) * C51061) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
             (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
                C51265 +
            (C28148 * C687 + C28149 * C51251 - (C18447 + C18446) * C688 -
             (C18449 + C18448) * C51061) *
                C51186) *
               C50977) *
              C51294 +
          ((((C17695 + C17694) * C688 -
             ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
             (C17697 + C17696) * C51061) *
                C51265 +
            ((C18446 + C18447) * C688 - (C28150 * C51251 + C28151 * C687) +
             (C18448 + C18449) * C51061) *
                C51186) *
               C51236 +
           (((C17703 + C17702) * C688 -
             ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
             (C17705 + C17704) * C51061) *
                C51265 +
            ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
             (C18452 + C18453) * C51061) *
                C51186) *
               C50977) *
              C51295 +
          ((C18070 * C51265 +
            ((C17892 + C17893) * C687 + (C17894 + C17895) * C51251 -
             (C18451 + C18450) * C688 - (C18453 + C18452) * C51061) *
                C51186) *
               C51236 +
           (((C17499 + C17498) * C687 + (C17497 + C17496) * C51251 -
             (C18066 + C18065) * C688 - (C18068 + C18067) * C51061) *
                C51265 +
            ((C18228 + C18229) * C687 + (C18230 + C18231) * C51251 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C688 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C686) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                  C687 +
              (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                  C51251 -
              (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                  C688 -
              (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                  C51061) *
                 C51265 +
             ((C22427 + C22428) * C687 + (C22429 + C22430) * C51251 -
              (C22961 + C22962) * C688 - (C22963 + C22964) * C51061) *
                 C51186) *
                C51236 +
            (((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
              (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
                 C51265 +
             C28830 * C51186) *
                C50977) *
               C296 +
           ((((C17695 + C17694) * C688 -
              ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
              (C17697 + C17696) * C51061) *
                 C51265 +
             C28831 * C51186) *
                C51236 +
            (((C17703 + C17702) * C688 -
              ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
              (C17705 + C17704) * C51061) *
                 C51265 +
             ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
              (C18452 + C18453) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51252 +
          (((((C22962 + C22961) * C688 -
              ((C22430 + C22429) * C51251 + (C22428 + C22427) * C687) +
              (C22964 + C22963) * C51061) *
                 C51265 +
             ((C22966 + C22965) * C688 -
              ((C22434 + C22433) * C51251 + (C22432 + C22431) * C687) +
              (C22968 + C22967) * C51061) *
                 C51186) *
                C51236 +
            (C28831 * C51265 +
             ((C22969 + C22970) * C688 - (C22409 * C51251 + C22410 * C687) +
              (C22971 + C22972) * C51061) *
                 C51186) *
                C50977) *
               C296 +
           ((C28830 * C51265 +
             (C28152 * C687 + C28153 * C51251 - (C22970 + C22969) * C688 -
              (C22972 + C22971) * C51061) *
                 C51186) *
                C51236 +
            ((C28551 * C687 + C28552 * C51251 - (C18451 + C18450) * C688 -
              (C18453 + C18452) * C51061) *
                 C51265 +
             ((C17900 + C17901) * C687 + (C17902 + C17903) * C51251 -
              (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
               C17448 * C1345) *
                  C688 -
              (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
               C17448 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C293 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C299 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C294 +
             (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                 C300 +
             (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                 C295) *
                C51265 +
            ((C22427 + C22428) * C298 + (C22429 + C22430) * C293 -
             (C22961 + C22962) * C299 - (C22963 + C22964) * C294 +
             (C23890 + C23891) * C300 + (C23892 + C23893) * C295) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
             (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
             (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
                C51265 +
            ((C17888 + C17889) * C298 + (C17890 + C17891) * C293 -
             (C18447 + C18446) * C299 - (C18449 + C18448) * C294 +
             (C27950 + C27951) * C300 + (C27952 + C27953) * C295) *
                C51186) *
               C50977) *
              C296 +
          ((((C17695 + C17694) * C299 -
             ((C17491 + C17490) * C293 + (C17489 + C17488) * C298) +
             (C17697 + C17696) * C294 - (C17699 + C17698) * C300 -
             (C17701 + C17700) * C295) *
                C51265 +
            ((C18446 + C18447) * C299 -
             ((C17891 + C17890) * C293 + (C17889 + C17888) * C298) +
             (C18448 + C18449) * C294 - (C27951 + C27950) * C300 -
             (C27953 + C27952) * C295) *
                C51186) *
               C51236 +
           (((C17703 + C17702) * C299 -
             ((C17495 + C17494) * C293 + (C17493 + C17492) * C298) +
             (C17705 + C17704) * C294 - (C17707 + C17706) * C300 -
             (C17709 + C17708) * C295) *
                C51265 +
            ((C18450 + C18451) * C299 - (C18226 * C293 + C18227 * C298) +
             (C18452 + C18453) * C294 -
             (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
              C17448 * C1725) *
                 C300 -
             (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
              C17448 * C1731) *
                 C295) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51265 +
            ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C51186) *
               C51236 +
           (((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51265 +
            ((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51186) *
               C50977) *
              C112 -
          ((C18234 * C51186 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51265) *
               C50977 +
           (((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51186 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51265) *
               C51236) *
              C113 +
          ((C17512 * C51265 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51186) *
               C51236 +
           (((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51265 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51186) *
               C50977) *
              C114 -
          ((((C17454 * C983 + C51158 * C988 + C17453 * C513 + C17448 * C529) *
                 C51009 +
             (C17454 * C973 + C51158 * C982 + C17453 * C499 + C17448 * C512) *
                 C118) *
                C51186 +
            ((C17503 + C17502) * C51009 + (C17501 + C17500) * C118) * C51265) *
               C50977 +
           (((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51186 +
            C17513 * C51265) *
               C51236) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C51186) *
                C51236 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51265 +
             C28160 * C51186) *
                C50977) *
               C296 -
           ((C18234 * C51186 +
             ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51265) *
                C50977 +
            (C28161 * C51186 +
             ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51265) *
                C51236) *
               C50996) *
              C493 +
          (((C28160 * C51265 + C28162 * C51186) * C51236 +
            (((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51265 +
             ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51186) *
                C50977) *
               C50996 -
           ((C22447 * C51186 + C28161 * C51265) * C50977 +
            (((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C51186 +
             ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C51265) *
                C51236) *
               C296) *
              C494 +
          (((C22450 * C51265 +
             ((C22444 + C22443) * C118 + (C22442 + C22441) * C51009) * C51186) *
                C51236 +
            (C28162 * C51265 +
             ((C22437 + C22438) * C118 + (C22439 + C22440) * C51009) * C51186) *
                C50977) *
               C296 -
           ((((C17454 * C6233 + C51158 * C6234 + C17453 * C2007 +
               C17448 * C2014) *
                  C51009 +
              (C17454 * C6231 + C51158 * C6232 + C17453 * C2002 +
               C17448 * C2008) *
                  C118) *
                 C51186 +
             ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51265) *
                C50977 +
            (((C22440 + C22439) * C51009 + (C22438 + C22437) * C118) * C51186 +
             C22447 * C51265) *
                C51236) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C51186) *
                C51236 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51265 +
             C28160 * C51186) *
                C50977) *
               C51294 -
           ((C18234 * C51186 +
             ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51265) *
                C50977 +
            (C28161 * C51186 +
             ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51265) *
                C51236) *
               C51295 +
           ((C17512 * C51265 + C28555 * C51186) * C51236 +
            (((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51265 +
             ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51186) *
                C50977) *
               C686) *
              C51252 +
          (((C28160 * C51265 + C28162 * C51186) * C51236 +
            (C28555 * C51265 +
             ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51186) *
                C50977) *
               C51295 -
           ((C22447 * C51186 + C28161 * C51265) * C50977 +
            (((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C51186 +
             ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C51265) *
                C51236) *
               C51294 -
           ((((C17454 * C1348 + C51158 * C1352 + C17453 * C523 +
               C17448 * C534) *
                  C51009 +
              (C17454 * C1340 + C51158 * C1347 + C17453 * C504 +
               C17448 * C522) *
                  C118) *
                 C51186 +
             ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51265) *
                C50977 +
            (((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51186 +
             C18234 * C51265) *
                C51236) *
               C686) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51265 +
            ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C51186) *
               C51236 +
           (((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51265 +
            ((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51186) *
               C50977) *
              C112 -
          ((C18234 * C51186 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51265) *
               C50977 +
           (((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51186 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51265) *
               C51236) *
              C113 +
          ((C17512 * C51265 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51186) *
               C51236 +
           (((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51265 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51186) *
               C50977) *
              C114 -
          ((((C17454 * C983 + C51158 * C988 + C17453 * C513 + C17448 * C529) *
                 C51009 +
             (C17454 * C973 + C51158 * C982 + C17453 * C499 + C17448 * C512) *
                 C118) *
                C51186 +
            ((C17503 + C17502) * C51009 + (C17501 + C17500) * C118) * C51265) *
               C50977 +
           (((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51186 +
            C17513 * C51265) *
               C51236) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C293 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C299 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C294 +
             (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                 C300 +
             (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                 C295) *
                C51265 +
            ((C22427 + C22428) * C298 + (C22429 + C22430) * C293 -
             (C22961 + C22962) * C299 - (C22963 + C22964) * C294 +
             (C23890 + C23891) * C300 + (C23892 + C23893) * C295) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
             (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
             (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
                C51265 +
            ((C17888 + C17889) * C298 + (C17890 + C17891) * C293 -
             (C18447 + C18446) * C299 - (C18449 + C18448) * C294 +
             (C27950 + C27951) * C300 + (C27952 + C27953) * C295) *
                C51186) *
               C50977) *
              C296 +
          ((((C17695 + C17694) * C299 -
             ((C17491 + C17490) * C293 + (C17489 + C17488) * C298) +
             (C17697 + C17696) * C294 - (C17699 + C17698) * C300 -
             (C17701 + C17700) * C295) *
                C51265 +
            ((C18446 + C18447) * C299 -
             ((C17891 + C17890) * C293 + (C17889 + C17888) * C298) +
             (C18448 + C18449) * C294 - (C27951 + C27950) * C300 -
             (C27953 + C27952) * C295) *
                C51186) *
               C51236 +
           (((C17703 + C17702) * C299 -
             ((C17495 + C17494) * C293 + (C17493 + C17492) * C298) +
             (C17705 + C17704) * C294 - (C17707 + C17706) * C300 -
             (C17709 + C17708) * C295) *
                C51265 +
            ((C18450 + C18451) * C299 - (C18226 * C293 + C18227 * C298) +
             (C18452 + C18453) * C294 -
             (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
              C17448 * C1725) *
                 C300 -
             (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
              C17448 * C1731) *
                 C295) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C1456 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51296 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C1457 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51297 +
             (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                 C1458 +
             (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                 C1453) *
                C51265 +
            ((C22427 + C22428) * C1456 + (C22429 + C22430) * C51296 -
             (C22961 + C22962) * C1457 - (C22963 + C22964) * C51297 +
             (C23890 + C23891) * C1458 + (C23892 + C23893) * C1453) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C1456 + (C17490 + C17491) * C51296 -
             (C17694 + C17695) * C1457 - (C17696 + C17697) * C51297 +
             (C17698 + C17699) * C1458 + (C17700 + C17701) * C1453) *
                C51265 +
            (C28148 * C1456 + C28149 * C51296 - C28816 * C1457 -
             C28817 * C51297 + (C27950 + C27951) * C1458 +
             (C27952 + C27953) * C1453) *
                C51186) *
               C50977) *
              C51243 +
          ((((C17695 + C17694) * C1457 -
             ((C17491 + C17490) * C51296 + (C17489 + C17488) * C1456) +
             (C17697 + C17696) * C51297 - (C17699 + C17698) * C1458 -
             (C17701 + C17700) * C1453) *
                C51265 +
            (C28818 * C1457 - (C28150 * C51296 + C28151 * C1456) +
             C28821 * C51297 - (C27951 + C27950) * C1458 -
             (C27953 + C27952) * C1453) *
                C51186) *
               C51236 +
           (((C17703 + C17702) * C1457 -
             ((C17495 + C17494) * C51296 + (C17493 + C17492) * C1456) +
             (C17705 + C17704) * C51297 - (C17707 + C17706) * C1458 -
             (C17709 + C17708) * C1453) *
                C51265 +
            ((C18450 + C18451) * C1457 - (C18226 * C51296 + C18227 * C1456) +
             (C18452 + C18453) * C51297 -
             (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
              C17448 * C1725) *
                 C1458 -
             (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
              C17448 * C1731) *
                 C1453) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C1456 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51296 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C1457 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51297 +
             (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                 C1458 +
             (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                 C1453) *
                C51265 +
            ((C22427 + C22428) * C1456 + (C22429 + C22430) * C51296 -
             (C22961 + C22962) * C1457 - (C22963 + C22964) * C51297 +
             (C23890 + C23891) * C1458 + (C23892 + C23893) * C1453) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C1456 + (C17490 + C17491) * C51296 -
             (C17694 + C17695) * C1457 - (C17696 + C17697) * C51297 +
             (C17698 + C17699) * C1458 + (C17700 + C17701) * C1453) *
                C51265 +
            (C28148 * C1456 + C28149 * C51296 - C28816 * C1457 -
             C28817 * C51297 + (C27950 + C27951) * C1458 +
             (C27952 + C27953) * C1453) *
                C51186) *
               C50977) *
              C50991 * C51252 +
          ((((C22962 + C22961) * C1457 -
             ((C22430 + C22429) * C51296 + (C22428 + C22427) * C1456) +
             (C22964 + C22963) * C51297 - (C23891 + C23890) * C1458 -
             (C23893 + C23892) * C1453) *
                C51265 +
            ((C22966 + C22965) * C1457 -
             ((C22434 + C22433) * C51296 + (C22432 + C22431) * C1456) +
             (C22968 + C22967) * C51297 - (C23895 + C23894) * C1458 -
             (C23897 + C23896) * C1453) *
                C51186) *
               C51236 +
           ((C28818 * C1457 - (C28150 * C51296 + C28151 * C1456) +
             C28821 * C51297 - (C27951 + C27950) * C1458 -
             (C27953 + C27952) * C1453) *
                C51265 +
            ((C22969 + C22970) * C1457 - (C22409 * C51296 + C22410 * C1456) +
             (C22971 + C22972) * C51297 -
             (C17454 * C3845 + C51158 * C3848 + C17453 * C2847 +
              C17448 * C2851) *
                 C1458 -
             (C17454 * C3849 + C51158 * C3851 + C17453 * C2852 +
              C17448 * C2856) *
                 C1453) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1219 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1214 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1220 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C1215 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C1221 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C1216 -
            (C17454 * C2652 + C51158 * C2655 + C17453 * C1223 +
             C17448 * C1227) *
                C1222 -
            (C17454 * C2656 + C51158 * C2661 + C17453 * C1228 +
             C17448 * C1235) *
                C1217) *
               C51265 +
           ((C22427 + C22428) * C1219 + (C22429 + C22430) * C1214 -
            (C22961 + C22962) * C1220 - (C22963 + C22964) * C1215 +
            (C23890 + C23891) * C1221 + (C23892 + C23893) * C1216 -
            (C17454 * C4338 + C51158 * C4340 + C17453 * C3416 +
             C17448 * C3419) *
                C1222 -
            (C17454 * C4341 + C51158 * C4344 + C17453 * C3420 +
             C17448 * C3425) *
                C1217) *
               C51186) *
              C51236 +
          (((C17488 + C17489) * C1219 + (C17490 + C17491) * C1214 -
            (C17694 + C17695) * C1220 - (C17696 + C17697) * C1215 +
            (C17698 + C17699) * C1221 + (C17700 + C17701) * C1216 -
            (C17454 * C2653 + C51158 * C2657 + C17453 * C1224 +
             C17448 * C1229) *
                C1222 -
            (C17454 * C2658 + C51158 * C2662 + C17453 * C1230 +
             C17448 * C1236) *
                C1217) *
               C51265 +
           (C28148 * C1219 + C28149 * C1214 - C28816 * C1220 - C28817 * C1215 +
            (C27950 + C27951) * C1221 + (C27952 + C27953) * C1216 -
            (C17454 * C4339 + C51158 * C4342 + C17453 * C3417 +
             C17448 * C3421) *
                C1222 -
            (C17454 * C4343 + C51158 * C4345 + C17453 * C3422 +
             C17448 * C3426) *
                C1217) *
               C51186) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C1122 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C1117 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C1123 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51265 +
            ((C22427 + C22428) * C1122 + (C22429 + C22430) * C1117 -
             (C22961 + C22962) * C1123 - (C22963 + C22964) * C51061) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
             (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
                C51265 +
            (C28148 * C1122 + C28149 * C1117 - C28816 * C1123 -
             C28817 * C51061) *
                C51186) *
               C50977) *
              C1119 +
          ((((C17695 + C17694) * C1123 -
             ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
             (C17697 + C17696) * C51061) *
                C51265 +
            (C28818 * C1123 - (C28150 * C1117 + C28151 * C1122) +
             C28821 * C51061) *
                C51186) *
               C51236 +
           (((C17703 + C17702) * C1123 -
             ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
             (C17705 + C17704) * C51061) *
                C51265 +
            ((C18450 + C18451) * C1123 - (C18226 * C1117 + C18227 * C1122) +
             (C18452 + C18453) * C51061) *
                C51186) *
               C50977) *
              C1120 +
          ((C18606 * C51265 +
            (C28551 * C1122 + C28552 * C1117 - (C18451 + C18450) * C1123 -
             (C18453 + C18452) * C51061) *
                C51186) *
               C51236 +
           (((C17499 + C17498) * C1122 + (C17497 + C17496) * C1117 -
             (C18066 + C18065) * C1123 - (C18068 + C18067) * C51061) *
                C51265 +
            ((C18228 + C18229) * C1122 + (C18230 + C18231) * C1117 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C1123 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C1122 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C1117 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C1123 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51265 +
            ((C22427 + C22428) * C1122 + (C22429 + C22430) * C1117 -
             (C22961 + C22962) * C1123 - (C22963 + C22964) * C51061) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
             (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
                C51265 +
            (C28148 * C1122 + C28149 * C1117 - C28816 * C1123 -
             C28817 * C51061) *
                C51186) *
               C50977) *
              C50991 * C493 +
          ((((C22962 + C22961) * C1123 -
             ((C22430 + C22429) * C1117 + (C22428 + C22427) * C1122) +
             (C22964 + C22963) * C51061) *
                C51265 +
            ((C22966 + C22965) * C1123 -
             ((C22434 + C22433) * C1117 + (C22432 + C22431) * C1122) +
             (C22968 + C22967) * C51061) *
                C51186) *
               C51236 +
           ((C28818 * C1123 - (C28150 * C1117 + C28151 * C1122) +
             C28821 * C51061) *
                C51265 +
            ((C22969 + C22970) * C1123 - (C22409 * C1117 + C22410 * C1122) +
             (C22971 + C22972) * C51061) *
                C51186) *
               C50977) *
              C50991 * C494 +
          ((C23387 * C51265 +
            ((C22444 + C22443) * C1122 + (C22442 + C22441) * C1117 -
             (C23383 + C23382) * C1123 - (C23385 + C23384) * C51061) *
                C51186) *
               C51236 +
           ((C28152 * C1122 + C28153 * C1117 - (C22970 + C22969) * C1123 -
             (C22972 + C22971) * C51061) *
                C51265 +
            ((C22437 + C22438) * C1122 + (C22439 + C22440) * C1117 -
             (C17454 * C4736 + C51158 * C4742 + C17453 * C4737 +
              C17448 * C4743) *
                 C1123 -
             (C17454 * C4740 + C51158 * C4748 + C17453 * C4741 +
              C17448 * C4749) *
                 C51061) *
                C51186) *
               C50977) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                  C1122 +
              (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                  C1117 -
              (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                  C1123 -
              (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                  C51061) *
                 C51265 +
             ((C22427 + C22428) * C1122 + (C22429 + C22430) * C1117 -
              (C22961 + C22962) * C1123 - (C22963 + C22964) * C51061) *
                 C51186) *
                C51236 +
            (((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
              (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
                 C51265 +
             C29814 * C51186) *
                C50977) *
               C51243 +
           ((((C17695 + C17694) * C1123 -
              ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
              (C17697 + C17696) * C51061) *
                 C51265 +
             C29815 * C51186) *
                C51236 +
            (((C17703 + C17702) * C1123 -
              ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
              (C17705 + C17704) * C51061) *
                 C51265 +
             ((C18450 + C18451) * C1123 - (C18226 * C1117 + C18227 * C1122) +
              (C18452 + C18453) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51252 +
          (((((C22962 + C22961) * C1123 -
              ((C22430 + C22429) * C1117 + (C22428 + C22427) * C1122) +
              (C22964 + C22963) * C51061) *
                 C51265 +
             ((C22966 + C22965) * C1123 -
              ((C22434 + C22433) * C1117 + (C22432 + C22431) * C1122) +
              (C22968 + C22967) * C51061) *
                 C51186) *
                C51236 +
            (C29815 * C51265 +
             ((C22969 + C22970) * C1123 - (C22409 * C1117 + C22410 * C1122) +
              (C22971 + C22972) * C51061) *
                 C51186) *
                C50977) *
               C51243 +
           ((C29814 * C51265 +
             (C28152 * C1122 + C28153 * C1117 - (C22970 + C22969) * C1123 -
              (C22972 + C22971) * C51061) *
                 C51186) *
                C51236 +
            ((C28551 * C1122 + C28552 * C1117 - (C18451 + C18450) * C1123 -
              (C18453 + C18452) * C51061) *
                 C51265 +
             ((C17900 + C17901) * C1122 + (C17902 + C17903) * C1117 -
              (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
               C17448 * C1345) *
                  C1123 -
              (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
               C17448 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C1122 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C1117 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C1123 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51265 +
            ((C22427 + C22428) * C1122 + (C22429 + C22430) * C1117 -
             (C22961 + C22962) * C1123 - (C22963 + C22964) * C51061) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
             (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
                C51265 +
            (C28148 * C1122 + C28149 * C1117 - C28816 * C1123 -
             C28817 * C51061) *
                C51186) *
               C50977) *
              C1119 +
          ((((C17695 + C17694) * C1123 -
             ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
             (C17697 + C17696) * C51061) *
                C51265 +
            (C28818 * C1123 - (C28150 * C1117 + C28151 * C1122) +
             C28821 * C51061) *
                C51186) *
               C51236 +
           (((C17703 + C17702) * C1123 -
             ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
             (C17705 + C17704) * C51061) *
                C51265 +
            ((C18450 + C18451) * C1123 - (C18226 * C1117 + C18227 * C1122) +
             (C18452 + C18453) * C51061) *
                C51186) *
               C50977) *
              C1120 +
          ((C18606 * C51265 +
            (C28551 * C1122 + C28552 * C1117 - (C18451 + C18450) * C1123 -
             (C18453 + C18452) * C51061) *
                C51186) *
               C51236 +
           (((C17499 + C17498) * C1122 + (C17497 + C17496) * C1117 -
             (C18066 + C18065) * C1123 - (C18068 + C18067) * C51061) *
                C51265 +
            ((C18228 + C18229) * C1122 + (C18230 + C18231) * C1117 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C1123 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1219 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1214 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1220 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C1215 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C1221 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C1216 -
            (C17454 * C2652 + C51158 * C2655 + C17453 * C1223 +
             C17448 * C1227) *
                C1222 -
            (C17454 * C2656 + C51158 * C2661 + C17453 * C1228 +
             C17448 * C1235) *
                C1217) *
               C51265 +
           ((C22427 + C22428) * C1219 + (C22429 + C22430) * C1214 -
            (C22961 + C22962) * C1220 - (C22963 + C22964) * C1215 +
            (C23890 + C23891) * C1221 + (C23892 + C23893) * C1216 -
            (C17454 * C4338 + C51158 * C4340 + C17453 * C3416 +
             C17448 * C3419) *
                C1222 -
            (C17454 * C4341 + C51158 * C4344 + C17453 * C3420 +
             C17448 * C3425) *
                C1217) *
               C51186) *
              C51236 +
          (((C17488 + C17489) * C1219 + (C17490 + C17491) * C1214 -
            (C17694 + C17695) * C1220 - (C17696 + C17697) * C1215 +
            (C17698 + C17699) * C1221 + (C17700 + C17701) * C1216 -
            (C17454 * C2653 + C51158 * C2657 + C17453 * C1224 +
             C17448 * C1229) *
                C1222 -
            (C17454 * C2658 + C51158 * C2662 + C17453 * C1230 +
             C17448 * C1236) *
                C1217) *
               C51265 +
           (C28148 * C1219 + C28149 * C1214 - C28816 * C1220 - C28817 * C1215 +
            (C27950 + C27951) * C1221 + (C27952 + C27953) * C1216 -
            (C17454 * C4339 + C51158 * C4342 + C17453 * C3417 +
             C17448 * C3421) *
                C1222 -
            (C17454 * C4343 + C51158 * C4345 + C17453 * C3422 +
             C17448 * C3426) *
                C1217) *
               C51186) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                  C687 +
              (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                  C51251 -
              (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                  C688 -
              (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                  C51061) *
                 C51265 +
             ((C22427 + C22428) * C687 + (C22429 + C22430) * C51251 -
              (C22961 + C22962) * C688 - (C22963 + C22964) * C51061) *
                 C51186) *
                C51236 +
            (((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
              (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
                 C51265 +
             C28830 * C51186) *
                C50977) *
               C51243 +
           ((((C17695 + C17694) * C688 -
              ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
              (C17697 + C17696) * C51061) *
                 C51265 +
             C28831 * C51186) *
                C51236 +
            (((C17703 + C17702) * C688 -
              ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
              (C17705 + C17704) * C51061) *
                 C51265 +
             ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
              (C18452 + C18453) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C1831 +
          (((((C22962 + C22961) * C688 -
              ((C22430 + C22429) * C51251 + (C22428 + C22427) * C687) +
              (C22964 + C22963) * C51061) *
                 C51265 +
             ((C22966 + C22965) * C688 -
              ((C22434 + C22433) * C51251 + (C22432 + C22431) * C687) +
              (C22968 + C22967) * C51061) *
                 C51186) *
                C51236 +
            (C28831 * C51265 +
             ((C22969 + C22970) * C688 - (C22409 * C51251 + C22410 * C687) +
              (C22971 + C22972) * C51061) *
                 C51186) *
                C50977) *
               C51243 +
           ((C28830 * C51265 +
             (C28152 * C687 + C28153 * C51251 - (C22970 + C22969) * C688 -
              (C22972 + C22971) * C51061) *
                 C51186) *
                C51236 +
            ((C28551 * C687 + C28552 * C51251 - (C18451 + C18450) * C688 -
              (C18453 + C18452) * C51061) *
                 C51265 +
             ((C17900 + C17901) * C687 + (C17902 + C17903) * C51251 -
              (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
               C17448 * C1345) *
                  C688 -
              (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
               C17448 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C687 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51251 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C688 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51265 +
            ((C22427 + C22428) * C687 + (C22429 + C22430) * C51251 -
             (C22961 + C22962) * C688 - (C22963 + C22964) * C51061) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
             (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
                C51265 +
            C28830 * C51186) *
               C50977) *
              C50991 * C51298 +
          ((((C22962 + C22961) * C688 -
             ((C22430 + C22429) * C51251 + (C22428 + C22427) * C687) +
             (C22964 + C22963) * C51061) *
                C51265 +
            ((C22966 + C22965) * C688 -
             ((C22434 + C22433) * C51251 + (C22432 + C22431) * C687) +
             (C22968 + C22967) * C51061) *
                C51186) *
               C51236 +
           (C28831 * C51265 +
            ((C22969 + C22970) * C688 - (C22409 * C51251 + C22410 * C687) +
             (C22971 + C22972) * C51061) *
                C51186) *
               C50977) *
              C50991 * C51299 +
          ((C24801 * C51265 +
            ((C22444 + C22443) * C687 + (C22442 + C22441) * C51251 -
             (C23383 + C23382) * C688 - (C23385 + C23384) * C51061) *
                C51186) *
               C51236 +
           ((C28152 * C687 + C28153 * C51251 - (C22970 + C22969) * C688 -
             (C22972 + C22971) * C51061) *
                C51265 +
            ((C22437 + C22438) * C687 + (C22439 + C22440) * C51251 -
             (C17454 * C4736 + C51158 * C4742 + C17453 * C4737 +
              C17448 * C4743) *
                 C688 -
             (C17454 * C4740 + C51158 * C4748 + C17453 * C4741 +
              C17448 * C4749) *
                 C51061) *
                C51186) *
               C50977) *
              C50991 * C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C293 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C299 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C294 +
             (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                 C300 +
             (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                 C295) *
                C51265 +
            ((C22427 + C22428) * C298 + (C22429 + C22430) * C293 -
             (C22961 + C22962) * C299 - (C22963 + C22964) * C294 +
             (C23890 + C23891) * C300 + (C23892 + C23893) * C295) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
             (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
             (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
                C51265 +
            (C28148 * C298 + C28149 * C293 - C28816 * C299 - C28817 * C294 +
             (C27950 + C27951) * C300 + (C27952 + C27953) * C295) *
                C51186) *
               C50977) *
              C50991 * C1831 +
          ((((C22962 + C22961) * C299 -
             ((C22430 + C22429) * C293 + (C22428 + C22427) * C298) +
             (C22964 + C22963) * C294 - (C23891 + C23890) * C300 -
             (C23893 + C23892) * C295) *
                C51265 +
            ((C22966 + C22965) * C299 -
             ((C22434 + C22433) * C293 + (C22432 + C22431) * C298) +
             (C22968 + C22967) * C294 - (C23895 + C23894) * C300 -
             (C23897 + C23896) * C295) *
                C51186) *
               C51236 +
           ((C28818 * C299 - (C28150 * C293 + C28151 * C298) + C28821 * C294 -
             (C27951 + C27950) * C300 - (C27953 + C27952) * C295) *
                C51265 +
            ((C22969 + C22970) * C299 - (C22409 * C293 + C22410 * C298) +
             (C22971 + C22972) * C294 -
             (C17454 * C3845 + C51158 * C3848 + C17453 * C2847 +
              C17448 * C2851) *
                 C300 -
             (C17454 * C3849 + C51158 * C3851 + C17453 * C2852 +
              C17448 * C2856) *
                 C295) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C51186) *
                C51236 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51265 +
             C28160 * C51186) *
                C50977) *
               C1119 -
           ((C18234 * C51186 +
             ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51265) *
                C50977 +
            (C28161 * C51186 +
             ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51265) *
                C51236) *
               C1120 +
           ((C17512 * C51265 + C28555 * C51186) * C51236 +
            (((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51265 +
             ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51186) *
                C50977) *
               C1121) *
              C1831 +
          (((C28160 * C51265 + C28162 * C51186) * C51236 +
            (C28555 * C51265 +
             ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51186) *
                C50977) *
               C1120 -
           ((C22447 * C51186 + C28161 * C51265) * C50977 +
            (((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C51186 +
             ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C51265) *
                C51236) *
               C1119 -
           ((((C17454 * C1348 + C51158 * C1352 + C17453 * C523 +
               C17448 * C534) *
                  C51009 +
              (C17454 * C1340 + C51158 * C1347 + C17453 * C504 +
               C17448 * C522) *
                  C118) *
                 C51186 +
             ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51265) *
                C50977 +
            (((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51186 +
             C18234 * C51265) *
                C51236) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51265 +
            ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C51186) *
               C51236 +
           (((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51265 +
            C28160 * C51186) *
               C50977) *
              C50991 * C1997 -
          ((C22447 * C51186 + C28161 * C51265) * C50977 +
           (((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C51186 +
            ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C51265) *
               C51236) *
              C50991 * C1998 +
          ((C22450 * C51265 +
            ((C22444 + C22443) * C118 + (C22442 + C22441) * C51009) * C51186) *
               C51236 +
           (C28162 * C51265 +
            ((C22437 + C22438) * C118 + (C22439 + C22440) * C51009) * C51186) *
               C50977) *
              C50991 * C1999 -
          ((((C17454 * C6680 + C51158 * C6682 + C17453 * C5667 +
              C17448 * C5671) *
                 C51009 +
             (C17454 * C6676 + C51158 * C6679 + C17453 * C5662 +
              C17448 * C5666) *
                 C118) *
                C51186 +
            ((C22440 + C22439) * C51009 + (C22438 + C22437) * C118) * C51265) *
               C50977 +
           (((C24307 + C24306) * C51009 + (C24305 + C24304) * C118) * C51186 +
            C24308 * C51265) *
               C51236) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C51186) *
                C51236 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51265 +
             C28160 * C51186) *
                C50977) *
               C51243 -
           ((C18234 * C51186 +
             ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51265) *
                C50977 +
            (C28161 * C51186 +
             ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51265) *
                C51236) *
               C50996) *
              C51298 +
          (((C28160 * C51265 + C28162 * C51186) * C51236 +
            (C28555 * C51265 +
             ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51186) *
                C50977) *
               C50996 -
           ((C22447 * C51186 + C28161 * C51265) * C50977 +
            (((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C51186 +
             ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C51265) *
                C51236) *
               C51243) *
              C51299 +
          (((C22450 * C51265 +
             ((C22444 + C22443) * C118 + (C22442 + C22441) * C51009) * C51186) *
                C51236 +
            (C28162 * C51265 +
             ((C22437 + C22438) * C118 + (C22439 + C22440) * C51009) * C51186) *
                C50977) *
               C51243 -
           ((((C17454 * C6233 + C51158 * C6234 + C17453 * C2007 +
               C17448 * C2014) *
                  C51009 +
              (C17454 * C6231 + C51158 * C6232 + C17453 * C2002 +
               C17448 * C2008) *
                  C118) *
                 C51186 +
             ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51265) *
                C50977 +
            (((C22440 + C22439) * C51009 + (C22438 + C22437) * C118) * C51186 +
             C22447 * C51265) *
                C51236) *
               C50996) *
              C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                  C118 +
              (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                  C51009) *
                 C51265 +
             ((C22427 + C22428) * C118 + (C22429 + C22430) * C51009) * C51186) *
                C51236 +
            (((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51265 +
             C28160 * C51186) *
                C50977) *
               C1119 -
           ((C18234 * C51186 +
             ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51265) *
                C50977 +
            (C28161 * C51186 +
             ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51265) *
                C51236) *
               C1120 +
           ((C17512 * C51265 + C28555 * C51186) * C51236 +
            (((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51265 +
             ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51186) *
                C50977) *
               C1121) *
              C1831 +
          (((C28160 * C51265 + C28162 * C51186) * C51236 +
            (C28555 * C51265 +
             ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51186) *
                C50977) *
               C1120 -
           ((C22447 * C51186 + C28161 * C51265) * C50977 +
            (((C22434 + C22433) * C51009 + (C22432 + C22431) * C118) * C51186 +
             ((C22430 + C22429) * C51009 + (C22428 + C22427) * C118) * C51265) *
                C51236) *
               C1119 -
           ((((C17454 * C1348 + C51158 * C1352 + C17453 * C523 +
               C17448 * C534) *
                  C51009 +
              (C17454 * C1340 + C51158 * C1347 + C17453 * C504 +
               C17448 * C522) *
                  C118) *
                 C51186 +
             ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51265) *
                C50977 +
            (((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51186 +
             C18234 * C51265) *
                C51236) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C298 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C293 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C299 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C294 +
             (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                 C300 +
             (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                 C295) *
                C51265 +
            ((C22427 + C22428) * C298 + (C22429 + C22430) * C293 -
             (C22961 + C22962) * C299 - (C22963 + C22964) * C294 +
             (C23890 + C23891) * C300 + (C23892 + C23893) * C295) *
                C51186) *
               C51236 +
           (((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
             (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
             (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
                C51265 +
            (C28148 * C298 + C28149 * C293 - C28816 * C299 - C28817 * C294 +
             (C27950 + C27951) * C300 + (C27952 + C27953) * C295) *
                C51186) *
               C50977) *
              C50991 * C1831 +
          ((((C22962 + C22961) * C299 -
             ((C22430 + C22429) * C293 + (C22428 + C22427) * C298) +
             (C22964 + C22963) * C294 - (C23891 + C23890) * C300 -
             (C23893 + C23892) * C295) *
                C51265 +
            ((C22966 + C22965) * C299 -
             ((C22434 + C22433) * C293 + (C22432 + C22431) * C298) +
             (C22968 + C22967) * C294 - (C23895 + C23894) * C300 -
             (C23897 + C23896) * C295) *
                C51186) *
               C51236 +
           ((C28818 * C299 - (C28150 * C293 + C28151 * C298) + C28821 * C294 -
             (C27951 + C27950) * C300 - (C27953 + C27952) * C295) *
                C51265 +
            ((C22969 + C22970) * C299 - (C22409 * C293 + C22410 * C298) +
             (C22971 + C22972) * C294 -
             (C17454 * C3845 + C51158 * C3848 + C17453 * C2847 +
              C17448 * C2851) *
                 C300 -
             (C17454 * C3849 + C51158 * C3851 + C17453 * C2852 +
              C17448 * C2856) *
                 C295) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C687 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51251 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C688 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
            (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18071 * C17452) *
              C51294 +
          (((C17695 + C17694) * C688 -
            ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
            (C17697 + C17696) * C51061) *
               C51122 * C17450 +
           ((C17703 + C17702) * C688 -
            ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
            (C17705 + C17704) * C51061) *
               C51122 * C17451 +
           ((C18065 + C18066) * C688 - (C17506 * C51251 + C17507 * C687) +
            (C18067 + C18068) * C51061) *
               C51122 * C17452) *
              C51295 +
          (C18071 * C17450 +
           ((C17499 + C17498) * C687 + (C17497 + C17496) * C51251 -
            (C18066 + C18065) * C688 - (C18068 + C18067) * C51061) *
               C51122 * C17451 +
           ((C17500 + C17501) * C687 + (C17502 + C17503) * C51251 -
            (C17454 * C310 + C51158 * C329 + C17453 * C309 + C17448 * C327) *
                C688 -
            (C17454 * C330 + C51158 * C340 + C17453 * C328 + C17448 * C339) *
                C51061) *
               C51122 * C17452) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C687 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51251 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C688 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C51294 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C688 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51251 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C687) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C51061) *
              C51122 * C50972 * C51295 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C687 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C51251 -
           (C20287 * C2654 + C20282 * C2659 + C20286 * C1225 + C20281 * C1231 +
            C20285 * C306 + C20280 * C321 + C20284 * C305 + C20279 * C319) *
               C688 -
           (C20287 * C2660 + C20282 * C2663 + C20286 * C1232 + C20281 * C1237 +
            C20285 * C322 + C20280 * C336 + C20284 * C320 + C20279 * C335) *
               C51061) *
              C51122 * C50972 * C686) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C687 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51251 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C688 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51122 * C17450 +
            ((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
             (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
                C51122 * C17451 +
            C18071 * C17452) *
               C296 +
           (((C17695 + C17694) * C688 -
             ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
             (C17697 + C17696) * C51061) *
                C51122 * C17450 +
            ((C17703 + C17702) * C688 -
             ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
             (C17705 + C17704) * C51061) *
                C51122 * C17451 +
            ((C18065 + C18066) * C688 - (C17506 * C51251 + C17507 * C687) +
             (C18067 + C18068) * C51061) *
                C51122 * C17452) *
               C50996) *
              C51252 +
          ((((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                 C688 -
             ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                  C51251 +
              (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                  C687) +
             (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C17450 +
            ((C18446 + C18447) * C688 -
             ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
             (C18448 + C18449) * C51061) *
                C51122 * C17451 +
            ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
             (C18452 + C18453) * C51061) *
                C51122 * C17452) *
               C296 +
           (((C17888 + C17889) * C687 + (C17890 + C17891) * C51251 -
             (C18447 + C18446) * C688 - (C18449 + C18448) * C51061) *
                C51122 * C17450 +
            ((C17892 + C17893) * C687 + (C17894 + C17895) * C51251 -
             (C18451 + C18450) * C688 - (C18453 + C18452) * C51061) *
                C51122 * C17451 +
            ((C18228 + C18229) * C687 + (C18230 + C18231) * C51251 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C688 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51122 * C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C687 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51251 -
            (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
             C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
                C688 -
            (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
             C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
                C51061) *
               C51122 * C50972 * C296 +
           ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
             C20286 * C1224 + C20281 * C1229 + C20287 * C2653 +
             C20282 * C2657) *
                C688 -
            ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
              C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                 C51251 +
             (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
              C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                 C687) +
            (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
             C20286 * C1230 + C20281 * C1236 + C20287 * C2658 +
             C20282 * C2662) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51252 +
          (((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
             C20286 * C3416 + C20281 * C3419 + C20287 * C4338 +
             C20282 * C4340) *
                C688 -
            ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 +
              C20281 * C1729 + C20285 * C975 + C20280 * C984 + C20284 * C514 +
              C20279 * C530) *
                 C51251 +
             (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 +
              C20281 * C1721 + C20285 * C969 + C20280 * C974 + C20284 * C500 +
              C20279 * C515) *
                 C687) +
            (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
             C20286 * C3420 + C20281 * C3425 + C20287 * C4341 +
             C20282 * C4344) *
                C51061) *
               C51122 * C50972 * C296 +
           ((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C687 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51251 -
            (C20287 * C4339 + C20282 * C4342 + C20286 * C3417 + C20281 * C3421 +
             C20285 * C1718 + C20280 * C1723 + C20284 * C970 + C20279 * C976) *
                C688 -
            (C20287 * C4343 + C20282 * C4345 + C20286 * C3422 + C20281 * C3426 +
             C20285 * C1724 + C20280 * C1730 + C20284 * C977 + C20279 * C985) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
            (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
            (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
               C51122 * C17451 +
           (C17504 * C298 + C17505 * C293 - (C17702 + C17703) * C299 -
            (C17704 + C17705) * C294 + (C17706 + C17707) * C300 +
            (C17708 + C17709) * C295) *
               C51122 * C17452) *
              C296 +
          (((C17695 + C17694) * C299 -
            ((C17491 + C17490) * C293 + (C17489 + C17488) * C298) +
            (C17697 + C17696) * C294 - (C17699 + C17698) * C300 -
            (C17701 + C17700) * C295) *
               C51122 * C17450 +
           ((C17703 + C17702) * C299 -
            ((C17495 + C17494) * C293 + (C17493 + C17492) * C298) +
            (C17705 + C17704) * C294 - (C17707 + C17706) * C300 -
            (C17709 + C17708) * C295) *
               C51122 * C17451 +
           ((C17453 * C307 + C17448 * C323 + C17454 * C308 + C51158 * C325) *
                C299 -
            (C17506 * C293 + C17507 * C298) +
            (C17453 * C324 + C17448 * C337 + C17454 * C326 + C51158 * C338) *
                C294 -
            (C17454 * C1226 + C51158 * C1233 + C17453 * C308 + C17448 * C325) *
                C300 -
            (C17454 * C1234 + C51158 * C1238 + C17453 * C326 + C17448 * C338) *
                C295) *
               C51122 * C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51009) *
               C51122 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
               C17451 +
           C17514 * C17452) *
              C112 -
          (C17515 * C17452 +
           ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
               C17451 +
           ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
               C17450) *
              C113 +
          (C17514 * C17450 +
           ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51122 *
               C17451 +
           ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) * C51122 *
               C17452) *
              C114 -
          (((C17454 * C691 + C51158 * C692 + C17453 * C137 + C17448 * C145) *
                C51009 +
            (C17454 * C689 + C51158 * C690 + C17453 * C124 + C17448 * C136) *
                C118) *
               C51122 * C17452 +
           ((C17503 + C17502) * C51009 + (C17501 + C17500) * C118) * C51122 *
               C17451 +
           C17515 * C17450) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C296 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C50996) *
              C493 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C17453 * C498 + C17448 * C510 + C17454 * C972 + C51158 * C980) *
                 C118 +
             (C17453 * C511 + C17448 * C528 + C17454 * C981 + C51158 * C987) *
                 C51009) *
                C51122 * C17452) *
               C50996 -
           (((C17895 + C17894) * C51009 + (C17893 + C17892) * C118) * C51122 *
                C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C296) *
              C494 +
          ((((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                 C118 +
             (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                 C51009) *
                C51122 * C17450 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C51122 *
                C17451 +
            ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51122 *
                C17452) *
               C296 -
           (((C17454 * C1348 + C51158 * C1352 + C17453 * C523 + C17448 * C534) *
                 C51009 +
             (C17454 * C1340 + C51158 * C1347 + C17453 * C504 + C17448 * C522) *
                 C118) *
                C51122 * C17452 +
            ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51122 *
                C17451 +
            ((C17899 + C17898) * C51009 + (C17897 + C17896) * C118) * C51122 *
                C17450) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51009) *
              C51122 * C50972 * C112 -
          ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
            C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
               C51009 +
           (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
            C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
               C118) *
              C51122 * C50972 * C113 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C118 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C51009) *
              C51122 * C50972 * C114 -
          ((C20287 * C1234 + C20282 * C1238 + C20286 * C326 + C20281 * C338 +
            C20285 * C324 + C20280 * C337 + C20284 * C133 + C20279 * C143) *
               C51009 +
           (C20287 * C1226 + C20282 * C1233 + C20286 * C308 + C20281 * C325 +
            C20285 * C307 + C20280 * C323 + C20284 * C122 + C20279 * C132) *
               C118) *
              C51122 * C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C293 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C299 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C294 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C300 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C295) *
              C51122 * C50972 * C296 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C299 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C293 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C298) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C294 -
           (C20287 * C3691 + C20282 * C3694 + C20286 * C2653 + C20281 * C2657 +
            C20285 * C1224 + C20280 * C1229 + C20284 * C304 + C20279 * C317) *
               C300 -
           (C20287 * C3695 + C20282 * C3697 + C20286 * C2658 + C20281 * C2662 +
            C20285 * C1230 + C20280 * C1236 + C20284 * C318 + C20279 * C334) *
               C295) *
              C51122 * C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C296 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C50996) *
              C493 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C50996 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C296) *
              C494 +
          (((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
             C20286 * C2846 + C20281 * C2849 + C20287 * C3844 +
             C20282 * C3846) *
                C118 +
            (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
             C20286 * C2850 + C20281 * C2855 + C20287 * C3847 +
             C20282 * C3850) *
                C51009) *
               C51122 * C50972 * C296 -
           ((C20287 * C3849 + C20282 * C3851 + C20286 * C2852 + C20281 * C2856 +
             C20285 * C1344 + C20280 * C1350 + C20284 * C519 + C20279 * C532) *
                C51009 +
            (C20287 * C3845 + C20282 * C3848 + C20286 * C2847 + C20281 * C2851 +
             C20285 * C1338 + C20280 * C1343 + C20284 * C502 + C20279 * C518) *
                C118) *
               C51122 * C50972 * C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C51294 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C51295 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51122 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) * C51122 *
                C17452) *
               C686) *
              C51252 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51122 *
                C17452) *
               C51295 -
           (C18235 * C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C51294 -
           (((C17454 * C983 + C51158 * C988 + C17453 * C513 + C17448 * C529) *
                 C51009 +
             (C17454 * C973 + C51158 * C982 + C17453 * C499 + C17448 * C512) *
                 C118) *
                C51122 * C17452 +
            ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51122 *
                C17451 +
            C18235 * C17450) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C51294 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C51295 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
             C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
             C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
                C51009) *
               C51122 * C50972 * C686) *
              C51252 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C51295 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C51294 -
           ((C20287 * C3424 + C20282 * C3427 + C20286 * C1726 + C20281 * C1731 +
             C20285 * C979 + C20280 * C986 + C20284 * C509 + C20279 * C527) *
                C51009 +
            (C20287 * C3418 + C20282 * C3423 + C20286 * C1719 + C20281 * C1725 +
             C20285 * C971 + C20280 * C978 + C20284 * C497 + C20279 * C508) *
                C118) *
               C51122 * C50972 * C686) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51009) *
               C51122 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
               C17451 +
           C17514 * C17452) *
              C112 -
          (C17515 * C17452 +
           ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
               C17451 +
           ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
               C17450) *
              C113 +
          (C17514 * C17450 +
           ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51122 *
               C17451 +
           ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) * C51122 *
               C17452) *
              C114 -
          (((C17454 * C691 + C51158 * C692 + C17453 * C137 + C17448 * C145) *
                C51009 +
            (C17454 * C689 + C51158 * C690 + C17453 * C124 + C17448 * C136) *
                C118) *
               C51122 * C17452 +
           ((C17503 + C17502) * C51009 + (C17501 + C17500) * C118) * C51122 *
               C17451 +
           C17515 * C17450) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
            (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
            (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
               C51122 * C17451 +
           (C17504 * C298 + C17505 * C293 - (C17702 + C17703) * C299 -
            (C17704 + C17705) * C294 + (C17706 + C17707) * C300 +
            (C17708 + C17709) * C295) *
               C51122 * C17452) *
              C296 +
          (((C17695 + C17694) * C299 -
            ((C17491 + C17490) * C293 + (C17489 + C17488) * C298) +
            (C17697 + C17696) * C294 - (C17699 + C17698) * C300 -
            (C17701 + C17700) * C295) *
               C51122 * C17450 +
           ((C17703 + C17702) * C299 -
            ((C17495 + C17494) * C293 + (C17493 + C17492) * C298) +
            (C17705 + C17704) * C294 - (C17707 + C17706) * C300 -
            (C17709 + C17708) * C295) *
               C51122 * C17451 +
           ((C17453 * C307 + C17448 * C323 + C17454 * C308 + C51158 * C325) *
                C299 -
            (C17506 * C293 + C17507 * C298) +
            (C17453 * C324 + C17448 * C337 + C17454 * C326 + C51158 * C338) *
                C294 -
            (C17454 * C1226 + C51158 * C1233 + C17453 * C308 + C17448 * C325) *
                C300 -
            (C17454 * C1234 + C51158 * C1238 + C17453 * C326 + C17448 * C338) *
                C295) *
               C51122 * C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51009) *
              C51122 * C50972 * C112 -
          ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
            C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
               C51009 +
           (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
            C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
               C118) *
              C51122 * C50972 * C113 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C118 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C51009) *
              C51122 * C50972 * C114 -
          ((C20287 * C1234 + C20282 * C1238 + C20286 * C326 + C20281 * C338 +
            C20285 * C324 + C20280 * C337 + C20284 * C133 + C20279 * C143) *
               C51009 +
           (C20287 * C1226 + C20282 * C1233 + C20286 * C308 + C20281 * C325 +
            C20285 * C307 + C20280 * C323 + C20284 * C122 + C20279 * C132) *
               C118) *
              C51122 * C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C293 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C299 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C294 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C300 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C295) *
              C51122 * C50972 * C296 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C299 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C293 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C298) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C294 -
           (C20287 * C3691 + C20282 * C3694 + C20286 * C2653 + C20281 * C2657 +
            C20285 * C1224 + C20280 * C1229 + C20284 * C304 + C20279 * C317) *
               C300 -
           (C20287 * C3695 + C20282 * C3697 + C20286 * C2658 + C20281 * C2662 +
            C20285 * C1230 + C20280 * C1236 + C20284 * C318 + C20279 * C334) *
               C295) *
              C51122 * C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1456 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51296 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1457 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51297 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C1458 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C1453) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1456 + (C17490 + C17491) * C51296 -
            (C17694 + C17695) * C1457 - (C17696 + C17697) * C51297 +
            (C17698 + C17699) * C1458 + (C17700 + C17701) * C1453) *
               C51122 * C17451 +
           (C17504 * C1456 + C17505 * C51296 - C18052 * C1457 -
            C18053 * C51297 + (C17706 + C17707) * C1458 +
            (C17708 + C17709) * C1453) *
               C51122 * C17452) *
              C51243 +
          (((C17695 + C17694) * C1457 -
            ((C17491 + C17490) * C51296 + (C17489 + C17488) * C1456) +
            (C17697 + C17696) * C51297 - (C17699 + C17698) * C1458 -
            (C17701 + C17700) * C1453) *
               C51122 * C17450 +
           ((C17703 + C17702) * C1457 -
            ((C17495 + C17494) * C51296 + (C17493 + C17492) * C1456) +
            (C17705 + C17704) * C51297 - (C17707 + C17706) * C1458 -
            (C17709 + C17708) * C1453) *
               C51122 * C17451 +
           ((C18065 + C18066) * C1457 - (C17506 * C51296 + C17507 * C1456) +
            (C18067 + C18068) * C51297 -
            (C17454 * C1226 + C51158 * C1233 + C17453 * C308 + C17448 * C325) *
                C1458 -
            (C17454 * C1234 + C51158 * C1238 + C17453 * C326 + C17448 * C338) *
                C1453) *
               C51122 * C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1456 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51296 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1457 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51297 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C1458 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C1453) *
              C51122 * C50972 * C51243 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C1457 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51296 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C1456) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C51297 -
           (C20287 * C3691 + C20282 * C3694 + C20286 * C2653 + C20281 * C2657 +
            C20285 * C1224 + C20280 * C1229 + C20284 * C304 + C20279 * C317) *
               C1458 -
           (C20287 * C3695 + C20282 * C3697 + C20286 * C2658 + C20281 * C2662 +
            C20285 * C1230 + C20280 * C1236 + C20284 * C318 + C20279 * C334) *
               C1453) *
              C51122 * C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1456 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51296 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1457 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51297 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C1458 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C1453) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1456 + (C17490 + C17491) * C51296 -
            (C17694 + C17695) * C1457 - (C17696 + C17697) * C51297 +
            (C17698 + C17699) * C1458 + (C17700 + C17701) * C1453) *
               C51122 * C17451 +
           (C17504 * C1456 + C17505 * C51296 - C18052 * C1457 -
            C18053 * C51297 + (C17706 + C17707) * C1458 +
            (C17708 + C17709) * C1453) *
               C51122 * C17452) *
              C50991 * C51252 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C1457 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51296 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C1456) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C51297 -
            (C17454 * C3416 + C51158 * C3419 + C17453 * C1717 +
             C17448 * C1721) *
                C1458 -
            (C17454 * C3420 + C51158 * C3425 + C17453 * C1722 +
             C17448 * C1729) *
                C1453) *
               C51122 * C17450 +
           ((C18446 + C18447) * C1457 -
            ((C17891 + C17890) * C51296 + (C17889 + C17888) * C1456) +
            (C18448 + C18449) * C51297 -
            (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
             C17448 * C1723) *
                C1458 -
            (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
             C17448 * C1730) *
                C1453) *
               C51122 * C17451 +
           ((C18450 + C18451) * C1457 - (C18226 * C51296 + C18227 * C1456) +
            (C18452 + C18453) * C51297 -
            (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
             C17448 * C1725) *
                C1458 -
            (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
             C17448 * C1731) *
                C1453) *
               C51122 * C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1456 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51296 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1457 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51297 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C1458 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C1453) *
              C51122 * C50972 * C50991 * C51252 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C1457 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51296 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C1456) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C51297 -
           (C20287 * C21406 + C20282 * C21407 + C20286 * C4338 +
            C20281 * C4340 + C20285 * C3416 + C20280 * C3419 + C20284 * C1717 +
            C20279 * C1721) *
               C1458 -
           (C20287 * C21408 + C20282 * C21409 + C20286 * C4341 +
            C20281 * C4344 + C20285 * C3420 + C20280 * C3425 + C20284 * C1722 +
            C20279 * C1729) *
               C1453) *
              C51122 * C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
               C1219 +
           (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
               C1214 -
           (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
               C1220 -
           (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
               C1215 +
           (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
               C1221 +
           (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
               C1216 -
           (C17454 * C2652 + C51158 * C2655 + C17453 * C1223 + C17448 * C1227) *
               C1222 -
           (C17454 * C2656 + C51158 * C2661 + C17453 * C1228 + C17448 * C1235) *
               C1217) *
              C51122 * C17450 +
          ((C17488 + C17489) * C1219 + (C17490 + C17491) * C1214 -
           (C17694 + C17695) * C1220 - (C17696 + C17697) * C1215 +
           (C17698 + C17699) * C1221 + (C17700 + C17701) * C1216 -
           (C17454 * C2653 + C51158 * C2657 + C17453 * C1224 + C17448 * C1229) *
               C1222 -
           (C17454 * C2658 + C51158 * C2662 + C17453 * C1230 + C17448 * C1236) *
               C1217) *
              C51122 * C17451 +
          (C17504 * C1219 + C17505 * C1214 - C18052 * C1220 - C18053 * C1215 +
           (C17706 + C17707) * C1221 + (C17708 + C17709) * C1216 -
           (C17454 * C2654 + C51158 * C2659 + C17453 * C1225 + C17448 * C1231) *
               C1222 -
           (C17454 * C2660 + C51158 * C2663 + C17453 * C1232 + C17448 * C1237) *
               C1217) *
              C51122 * C17452) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1122 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1117 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1123 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
            (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18607 * C17452) *
              C1119 +
          (((C17695 + C17694) * C1123 -
            ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
            (C17697 + C17696) * C51061) *
               C51122 * C17450 +
           ((C17703 + C17702) * C1123 -
            ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
            (C17705 + C17704) * C51061) *
               C51122 * C17451 +
           ((C18065 + C18066) * C1123 - (C17506 * C1117 + C17507 * C1122) +
            (C18067 + C18068) * C51061) *
               C51122 * C17452) *
              C1120 +
          (C18607 * C17450 +
           ((C17499 + C17498) * C1122 + (C17497 + C17496) * C1117 -
            (C18066 + C18065) * C1123 - (C18068 + C18067) * C51061) *
               C51122 * C17451 +
           ((C17500 + C17501) * C1122 + (C17502 + C17503) * C1117 -
            (C17454 * C310 + C51158 * C329 + C17453 * C309 + C17448 * C327) *
                C1123 -
            (C17454 * C330 + C51158 * C340 + C17453 * C328 + C17448 * C339) *
                C51061) *
               C51122 * C17452) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1122 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1117 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1123 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
            (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18607 * C17452) *
              C50991 * C493 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C1123 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C1117 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C1122) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C51061) *
               C51122 * C17450 +
           ((C18446 + C18447) * C1123 -
            ((C17891 + C17890) * C1117 + (C17889 + C17888) * C1122) +
            (C18448 + C18449) * C51061) *
               C51122 * C17451 +
           ((C18450 + C18451) * C1123 - (C18226 * C1117 + C18227 * C1122) +
            (C18452 + C18453) * C51061) *
               C51122 * C17452) *
              C50991 * C494 +
          (((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C1122 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C1117 -
            (C17454 * C2846 + C51158 * C2849 + C17453 * C1337 +
             C17448 * C1341) *
                C1123 -
            (C17454 * C2850 + C51158 * C2855 + C17453 * C1342 +
             C17448 * C1349) *
                C51061) *
               C51122 * C17450 +
           ((C17896 + C17897) * C1122 + (C17898 + C17899) * C1117 -
            (C17454 * C2847 + C51158 * C2851 + C17453 * C1338 +
             C17448 * C1343) *
                C1123 -
            (C17454 * C2852 + C51158 * C2856 + C17453 * C1344 +
             C17448 * C1350) *
                C51061) *
               C51122 * C17451 +
           ((C17900 + C17901) * C1122 + (C17902 + C17903) * C1117 -
            (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
             C17448 * C1345) *
                C1123 -
            (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
             C17448 * C1351) *
                C51061) *
               C51122 * C17452) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1122 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C1117 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1123 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C1119 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C1123 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C1117 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C1122) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C51061) *
              C51122 * C50972 * C1120 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C1122 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C1117 -
           (C20287 * C2654 + C20282 * C2659 + C20286 * C1225 + C20281 * C1231 +
            C20285 * C306 + C20280 * C321 + C20284 * C305 + C20279 * C319) *
               C1123 -
           (C20287 * C2660 + C20282 * C2663 + C20286 * C1232 + C20281 * C1237 +
            C20285 * C322 + C20280 * C336 + C20284 * C320 + C20279 * C335) *
               C51061) *
              C51122 * C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
           C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
              C1219 +
          (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
           C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
              C1214 -
          (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
           C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
              C1220 -
          (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
           C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
              C1215 +
          (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
           C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
              C1221 +
          (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
           C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
              C1216 -
          (C20287 * C20974 + C20282 * C20975 + C20286 * C3690 + C20281 * C3692 +
           C20285 * C2652 + C20280 * C2655 + C20284 * C1223 + C20279 * C1227) *
              C1222 -
          (C20287 * C20976 + C20282 * C20977 + C20286 * C3693 + C20281 * C3696 +
           C20285 * C2656 + C20280 * C2661 + C20284 * C1228 + C20279 * C1235) *
              C1217) *
         C51122 * C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1122 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C1117 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1123 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C50991 * C493 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C1123 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C1117 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C1122) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C51061) *
              C51122 * C50972 * C50991 * C494 +
          ((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
            C20286 * C2846 + C20281 * C2849 + C20287 * C3844 + C20282 * C3846) *
               C1122 +
           (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
            C20286 * C2850 + C20281 * C2855 + C20287 * C3847 + C20282 * C3850) *
               C1117 -
           (C20287 * C21076 + C20282 * C21077 + C20286 * C3844 +
            C20281 * C3846 + C20285 * C2846 + C20280 * C2849 + C20284 * C1337 +
            C20279 * C1341) *
               C1123 -
           (C20287 * C21078 + C20282 * C21079 + C20286 * C3847 +
            C20281 * C3850 + C20285 * C2850 + C20280 * C2855 + C20284 * C1342 +
            C20279 * C1349) *
               C51061) *
              C51122 * C50972 * C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C1122 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C1117 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C1123 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51122 * C17450 +
            ((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
             (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
                C51122 * C17451 +
            C18607 * C17452) *
               C51243 +
           (((C17695 + C17694) * C1123 -
             ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
             (C17697 + C17696) * C51061) *
                C51122 * C17450 +
            ((C17703 + C17702) * C1123 -
             ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
             (C17705 + C17704) * C51061) *
                C51122 * C17451 +
            ((C18065 + C18066) * C1123 - (C17506 * C1117 + C17507 * C1122) +
             (C18067 + C18068) * C51061) *
                C51122 * C17452) *
               C50996) *
              C51252 +
          ((((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                 C1123 -
             ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                  C1117 +
              (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                  C1122) +
             (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C17450 +
            ((C18446 + C18447) * C1123 -
             ((C17891 + C17890) * C1117 + (C17889 + C17888) * C1122) +
             (C18448 + C18449) * C51061) *
                C51122 * C17451 +
            ((C18450 + C18451) * C1123 - (C18226 * C1117 + C18227 * C1122) +
             (C18452 + C18453) * C51061) *
                C51122 * C17452) *
               C51243 +
           (((C17888 + C17889) * C1122 + (C17890 + C17891) * C1117 -
             (C18447 + C18446) * C1123 - (C18449 + C18448) * C51061) *
                C51122 * C17450 +
            ((C17892 + C17893) * C1122 + (C17894 + C17895) * C1117 -
             (C18451 + C18450) * C1123 - (C18453 + C18452) * C51061) *
                C51122 * C17451 +
            ((C18228 + C18229) * C1122 + (C18230 + C18231) * C1117 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C1123 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51122 * C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C1122 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C1117 -
            (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
             C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
                C1123 -
            (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
             C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
                C51061) *
               C51122 * C50972 * C51243 +
           ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
             C20286 * C1224 + C20281 * C1229 + C20287 * C2653 +
             C20282 * C2657) *
                C1123 -
            ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
              C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                 C1117 +
             (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
              C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                 C1122) +
            (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
             C20286 * C1230 + C20281 * C1236 + C20287 * C2658 +
             C20282 * C2662) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51252 +
          (((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
             C20286 * C3416 + C20281 * C3419 + C20287 * C4338 +
             C20282 * C4340) *
                C1123 -
            ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 +
              C20281 * C1729 + C20285 * C975 + C20280 * C984 + C20284 * C514 +
              C20279 * C530) *
                 C1117 +
             (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 +
              C20281 * C1721 + C20285 * C969 + C20280 * C974 + C20284 * C500 +
              C20279 * C515) *
                 C1122) +
            (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
             C20286 * C3420 + C20281 * C3425 + C20287 * C4341 +
             C20282 * C4344) *
                C51061) *
               C51122 * C50972 * C51243 +
           ((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C1122 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C1117 -
            (C20287 * C4339 + C20282 * C4342 + C20286 * C3417 + C20281 * C3421 +
             C20285 * C1718 + C20280 * C1723 + C20284 * C970 + C20279 * C976) *
                C1123 -
            (C20287 * C4343 + C20282 * C4345 + C20286 * C3422 + C20281 * C3426 +
             C20285 * C1724 + C20280 * C1730 + C20284 * C977 + C20279 * C985) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C1122 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C1117 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C1123 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C1122 + (C17490 + C17491) * C1117 -
            (C17694 + C17695) * C1123 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18607 * C17452) *
              C1119 +
          (((C17695 + C17694) * C1123 -
            ((C17491 + C17490) * C1117 + (C17489 + C17488) * C1122) +
            (C17697 + C17696) * C51061) *
               C51122 * C17450 +
           ((C17703 + C17702) * C1123 -
            ((C17495 + C17494) * C1117 + (C17493 + C17492) * C1122) +
            (C17705 + C17704) * C51061) *
               C51122 * C17451 +
           ((C18065 + C18066) * C1123 - (C17506 * C1117 + C17507 * C1122) +
            (C18067 + C18068) * C51061) *
               C51122 * C17452) *
              C1120 +
          (C18607 * C17450 +
           ((C17499 + C17498) * C1122 + (C17497 + C17496) * C1117 -
            (C18066 + C18065) * C1123 - (C18068 + C18067) * C51061) *
               C51122 * C17451 +
           ((C17500 + C17501) * C1122 + (C17502 + C17503) * C1117 -
            (C17454 * C310 + C51158 * C329 + C17453 * C309 + C17448 * C327) *
                C1123 -
            (C17454 * C330 + C51158 * C340 + C17453 * C328 + C17448 * C339) *
                C51061) *
               C51122 * C17452) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
               C1219 +
           (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
               C1214 -
           (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
               C1220 -
           (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
               C1215 +
           (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
               C1221 +
           (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
               C1216 -
           (C17454 * C2652 + C51158 * C2655 + C17453 * C1223 + C17448 * C1227) *
               C1222 -
           (C17454 * C2656 + C51158 * C2661 + C17453 * C1228 + C17448 * C1235) *
               C1217) *
              C51122 * C17450 +
          ((C17488 + C17489) * C1219 + (C17490 + C17491) * C1214 -
           (C17694 + C17695) * C1220 - (C17696 + C17697) * C1215 +
           (C17698 + C17699) * C1221 + (C17700 + C17701) * C1216 -
           (C17454 * C2653 + C51158 * C2657 + C17453 * C1224 + C17448 * C1229) *
               C1222 -
           (C17454 * C2658 + C51158 * C2662 + C17453 * C1230 + C17448 * C1236) *
               C1217) *
              C51122 * C17451 +
          (C17504 * C1219 + C17505 * C1214 - C18052 * C1220 - C18053 * C1215 +
           (C17706 + C17707) * C1221 + (C17708 + C17709) * C1216 -
           (C17454 * C2654 + C51158 * C2659 + C17453 * C1225 + C17448 * C1231) *
               C1222 -
           (C17454 * C2660 + C51158 * C2663 + C17453 * C1232 + C17448 * C1237) *
               C1217) *
              C51122 * C17452) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C1122 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C1117 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C1123 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C1119 +
          ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
            C20286 * C1224 + C20281 * C1229 + C20287 * C2653 + C20282 * C2657) *
               C1123 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C1117 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C1122) +
           (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
            C20286 * C1230 + C20281 * C1236 + C20287 * C2658 + C20282 * C2662) *
               C51061) *
              C51122 * C50972 * C1120 +
          ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
            C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
               C1122 +
           (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
            C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
               C1117 -
           (C20287 * C2654 + C20282 * C2659 + C20286 * C1225 + C20281 * C1231 +
            C20285 * C306 + C20280 * C321 + C20284 * C305 + C20279 * C319) *
               C1123 -
           (C20287 * C2660 + C20282 * C2663 + C20286 * C1232 + C20281 * C1237 +
            C20285 * C322 + C20280 * C336 + C20284 * C320 + C20279 * C335) *
               C51061) *
              C51122 * C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
           C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
              C1219 +
          (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
           C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
              C1214 -
          (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
           C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
              C1220 -
          (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
           C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
              C1215 +
          (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
           C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
              C1221 +
          (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
           C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
              C1216 -
          (C20287 * C20974 + C20282 * C20975 + C20286 * C3690 + C20281 * C3692 +
           C20285 * C2652 + C20280 * C2655 + C20284 * C1223 + C20279 * C1227) *
              C1222 -
          (C20287 * C20976 + C20282 * C20977 + C20286 * C3693 + C20281 * C3696 +
           C20285 * C2656 + C20280 * C2661 + C20284 * C1228 + C20279 * C1235) *
              C1217) *
         C51122 * C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C687 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51251 -
             (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                 C688 -
             (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                 C51061) *
                C51122 * C17450 +
            ((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
             (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
                C51122 * C17451 +
            C18071 * C17452) *
               C51243 +
           (((C17695 + C17694) * C688 -
             ((C17491 + C17490) * C51251 + (C17489 + C17488) * C687) +
             (C17697 + C17696) * C51061) *
                C51122 * C17450 +
            ((C17703 + C17702) * C688 -
             ((C17495 + C17494) * C51251 + (C17493 + C17492) * C687) +
             (C17705 + C17704) * C51061) *
                C51122 * C17451 +
            ((C18065 + C18066) * C688 - (C17506 * C51251 + C17507 * C687) +
             (C18067 + C18068) * C51061) *
                C51122 * C17452) *
               C50996) *
              C1831 +
          ((((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                 C688 -
             ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                  C51251 +
              (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                  C687) +
             (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                 C51061) *
                C51122 * C17450 +
            ((C18446 + C18447) * C688 -
             ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
             (C18448 + C18449) * C51061) *
                C51122 * C17451 +
            ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
             (C18452 + C18453) * C51061) *
                C51122 * C17452) *
               C51243 +
           (((C17888 + C17889) * C687 + (C17890 + C17891) * C51251 -
             (C18447 + C18446) * C688 - (C18449 + C18448) * C51061) *
                C51122 * C17450 +
            ((C17892 + C17893) * C687 + (C17894 + C17895) * C51251 -
             (C18451 + C18450) * C688 - (C18453 + C18452) * C51061) *
                C51122 * C17451 +
            ((C18228 + C18229) * C687 + (C18230 + C18231) * C51251 -
             (C17454 * C1720 + C51158 * C1727 + C17453 * C972 + C17448 * C980) *
                 C688 -
             (C17454 * C1728 + C51158 * C1732 + C17453 * C981 + C17448 * C987) *
                 C51061) *
                C51122 * C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C687 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51251 -
            (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
             C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
                C688 -
            (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
             C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
                C51061) *
               C51122 * C50972 * C51243 +
           ((C20284 * C303 + C20279 * C315 + C20285 * C304 + C20280 * C317 +
             C20286 * C1224 + C20281 * C1229 + C20287 * C2653 +
             C20282 * C2657) *
                C688 -
            ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
              C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                 C51251 +
             (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
              C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                 C687) +
            (C20284 * C316 + C20279 * C333 + C20285 * C318 + C20280 * C334 +
             C20286 * C1230 + C20281 * C1236 + C20287 * C2658 +
             C20282 * C2662) *
                C51061) *
               C51122 * C50972 * C50996) *
              C1831 +
          (((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
             C20286 * C3416 + C20281 * C3419 + C20287 * C4338 +
             C20282 * C4340) *
                C688 -
            ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 +
              C20281 * C1729 + C20285 * C975 + C20280 * C984 + C20284 * C514 +
              C20279 * C530) *
                 C51251 +
             (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 +
              C20281 * C1721 + C20285 * C969 + C20280 * C974 + C20284 * C500 +
              C20279 * C515) *
                 C687) +
            (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
             C20286 * C3420 + C20281 * C3425 + C20287 * C4341 +
             C20282 * C4344) *
                C51061) *
               C51122 * C50972 * C51243 +
           ((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C687 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51251 -
            (C20287 * C4339 + C20282 * C4342 + C20286 * C3417 + C20281 * C3421 +
             C20285 * C1718 + C20280 * C1723 + C20284 * C970 + C20279 * C976) *
                C688 -
            (C20287 * C4343 + C20282 * C4345 + C20286 * C3422 + C20281 * C3426 +
             C20285 * C1724 + C20280 * C1730 + C20284 * C977 + C20279 * C985) *
                C51061) *
               C51122 * C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C687 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51251 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C688 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C51061) *
               C51122 * C17450 +
           ((C17488 + C17489) * C687 + (C17490 + C17491) * C51251 -
            (C17694 + C17695) * C688 - (C17696 + C17697) * C51061) *
               C51122 * C17451 +
           C18071 * C17452) *
              C50991 * C51298 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C688 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51251 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C687) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C51061) *
               C51122 * C17450 +
           ((C18446 + C18447) * C688 -
            ((C17891 + C17890) * C51251 + (C17889 + C17888) * C687) +
            (C18448 + C18449) * C51061) *
               C51122 * C17451 +
           ((C18450 + C18451) * C688 - (C18226 * C51251 + C18227 * C687) +
            (C18452 + C18453) * C51061) *
               C51122 * C17452) *
              C50991 * C51299 +
          (((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C687 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C51251 -
            (C17454 * C2846 + C51158 * C2849 + C17453 * C1337 +
             C17448 * C1341) *
                C688 -
            (C17454 * C2850 + C51158 * C2855 + C17453 * C1342 +
             C17448 * C1349) *
                C51061) *
               C51122 * C17450 +
           ((C17896 + C17897) * C687 + (C17898 + C17899) * C51251 -
            (C17454 * C2847 + C51158 * C2851 + C17453 * C1338 +
             C17448 * C1343) *
                C688 -
            (C17454 * C2852 + C51158 * C2856 + C17453 * C1344 +
             C17448 * C1350) *
                C51061) *
               C51122 * C17451 +
           ((C17900 + C17901) * C687 + (C17902 + C17903) * C51251 -
            (C17454 * C2848 + C51158 * C2854 + C17453 * C1339 +
             C17448 * C1345) *
                C688 -
            (C17454 * C2853 + C51158 * C2857 + C17453 * C1346 +
             C17448 * C1351) *
                C51061) *
               C51122 * C17452) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C687 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51251 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C688 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C51061) *
              C51122 * C50972 * C50991 * C51298 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C688 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51251 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C687) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C51061) *
              C51122 * C50972 * C50991 * C51299 +
          ((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
            C20286 * C2846 + C20281 * C2849 + C20287 * C3844 + C20282 * C3846) *
               C687 +
           (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
            C20286 * C2850 + C20281 * C2855 + C20287 * C3847 + C20282 * C3850) *
               C51251 -
           (C20287 * C21076 + C20282 * C21077 + C20286 * C3844 +
            C20281 * C3846 + C20285 * C2846 + C20280 * C2849 + C20284 * C1337 +
            C20279 * C1341) *
               C688 -
           (C20287 * C21078 + C20282 * C21079 + C20286 * C3847 +
            C20281 * C3850 + C20285 * C2850 + C20280 * C2855 + C20284 * C1342 +
            C20279 * C1349) *
               C51061) *
              C51122 * C50972 * C50991 * C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
            (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
            (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
               C51122 * C17451 +
           (C17504 * C298 + C17505 * C293 - C18052 * C299 - C18053 * C294 +
            (C17706 + C17707) * C300 + (C17708 + C17709) * C295) *
               C51122 * C17452) *
              C50991 * C1831 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C299 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C293 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C298) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C294 -
            (C17454 * C3416 + C51158 * C3419 + C17453 * C1717 +
             C17448 * C1721) *
                C300 -
            (C17454 * C3420 + C51158 * C3425 + C17453 * C1722 +
             C17448 * C1729) *
                C295) *
               C51122 * C17450 +
           ((C18446 + C18447) * C299 -
            ((C17891 + C17890) * C293 + (C17889 + C17888) * C298) +
            (C18448 + C18449) * C294 -
            (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
             C17448 * C1723) *
                C300 -
            (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
             C17448 * C1730) *
                C295) *
               C51122 * C17451 +
           ((C18450 + C18451) * C299 - (C18226 * C293 + C18227 * C298) +
            (C18452 + C18453) * C294 -
            (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
             C17448 * C1725) *
                C300 -
            (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
             C17448 * C1731) *
                C295) *
               C51122 * C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C1119 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C1120 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51122 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) * C51122 *
                C17452) *
               C1121) *
              C1831 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51122 *
                C17452) *
               C1120 -
           (C18235 * C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C1119 -
           (((C17454 * C983 + C51158 * C988 + C17453 * C513 + C17448 * C529) *
                 C51009 +
             (C17454 * C973 + C51158 * C982 + C17453 * C499 + C17448 * C512) *
                 C118) *
                C51122 * C17452 +
            ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51122 *
                C17451 +
            C18235 * C17450) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C118 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C51009) *
               C51122 * C17450 +
           ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
               C17451 +
           C17514 * C17452) *
              C50991 * C1997 -
          (C18235 * C17452 +
           ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
               C17451 +
           ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                C51009 +
            (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                C118) *
               C51122 * C17450) *
              C50991 * C1998 +
          (((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                C118 +
            (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                C51009) *
               C51122 * C17450 +
           ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C51122 *
               C17451 +
           ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51122 *
               C17452) *
              C50991 * C1999 -
          (((C17454 * C6233 + C51158 * C6234 + C17453 * C2007 +
             C17448 * C2014) *
                C51009 +
            (C17454 * C6231 + C51158 * C6232 + C17453 * C2002 +
             C17448 * C2008) *
                C118) *
               C51122 * C17452 +
           ((C17454 * C4741 + C51158 * C4749 + C17453 * C2009 +
             C17448 * C2015) *
                C51009 +
            (C17454 * C4737 + C51158 * C4743 + C17453 * C2003 +
             C17448 * C2010) *
                C118) *
               C51122 * C17451 +
           ((C17454 * C4745 + C51158 * C4751 + C17453 * C2011 +
             C17448 * C2016) *
                C51009 +
            (C17454 * C4739 + C51158 * C4747 + C17453 * C2004 +
             C17448 * C2012) *
                C118) *
               C51122 * C17450) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C1119 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C1120 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
             C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
             C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
                C51009) *
               C51122 * C50972 * C1121) *
              C1831 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C1120 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C1119 -
           ((C20287 * C3424 + C20282 * C3427 + C20286 * C1726 + C20281 * C1731 +
             C20285 * C979 + C20280 * C986 + C20284 * C509 + C20279 * C527) *
                C51009 +
            (C20287 * C3418 + C20282 * C3423 + C20286 * C1719 + C20281 * C1725 +
             C20285 * C971 + C20280 * C978 + C20284 * C497 + C20279 * C508) *
                C118) *
               C51122 * C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C293 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C299 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C294 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C300 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C295) *
              C51122 * C50972 * C50991 * C1831 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C299 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C293 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C298) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C294 -
           (C20287 * C21406 + C20282 * C21407 + C20286 * C4338 +
            C20281 * C4340 + C20285 * C3416 + C20280 * C3419 + C20284 * C1717 +
            C20279 * C1721) *
               C300 -
           (C20287 * C21408 + C20282 * C21409 + C20286 * C4341 +
            C20281 * C4344 + C20285 * C3420 + C20280 * C3425 + C20284 * C1722 +
            C20279 * C1729) *
               C295) *
              C51122 * C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C118 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C51009) *
              C51122 * C50972 * C50991 * C1997 -
          ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
            C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
               C51009 +
           (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
            C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
               C118) *
              C51122 * C50972 * C50991 * C1998 +
          ((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
            C20286 * C2846 + C20281 * C2849 + C20287 * C3844 + C20282 * C3846) *
               C118 +
           (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
            C20286 * C2850 + C20281 * C2855 + C20287 * C3847 + C20282 * C3850) *
               C51009) *
              C51122 * C50972 * C50991 * C1999 -
          ((C20287 * C21673 + C20282 * C21675 + C20286 * C4744 +
            C20281 * C4750 + C20285 * C4745 + C20280 * C4751 + C20284 * C2011 +
            C20279 * C2016) *
               C51009 +
           (C20287 * C21672 + C20282 * C21674 + C20286 * C4738 +
            C20281 * C4746 + C20285 * C4739 + C20280 * C4747 + C20284 * C2004 +
            C20279 * C2012) *
               C118) *
              C51122 * C50972 * C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C51243 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C50996) *
              C51298 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51122 *
                C17452) *
               C50996 -
           (C18235 * C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C51243) *
              C51299 +
          ((((C17453 * C501 + C17448 * C516 + C17454 * C1337 + C51158 * C1341) *
                 C118 +
             (C17453 * C517 + C17448 * C531 + C17454 * C1342 + C51158 * C1349) *
                 C51009) *
                C51122 * C17450 +
            ((C17896 + C17897) * C118 + (C17898 + C17899) * C51009) * C51122 *
                C17451 +
            ((C17900 + C17901) * C118 + (C17902 + C17903) * C51009) * C51122 *
                C17452) *
               C51243 -
           (((C17454 * C1348 + C51158 * C1352 + C17453 * C523 + C17448 * C534) *
                 C51009 +
             (C17454 * C1340 + C51158 * C1347 + C17453 * C504 + C17448 * C522) *
                 C118) *
                C51122 * C17452 +
            ((C17903 + C17902) * C51009 + (C17901 + C17900) * C118) * C51122 *
                C17451 +
            ((C17899 + C17898) * C51009 + (C17897 + C17896) * C118) * C51122 *
                C17450) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C51243 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C50996) *
              C51298 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C50996 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C51243) *
              C51299 +
          (((C20284 * C501 + C20279 * C516 + C20285 * C1337 + C20280 * C1341 +
             C20286 * C2846 + C20281 * C2849 + C20287 * C3844 +
             C20282 * C3846) *
                C118 +
            (C20284 * C517 + C20279 * C531 + C20285 * C1342 + C20280 * C1349 +
             C20286 * C2850 + C20281 * C2855 + C20287 * C3847 +
             C20282 * C3850) *
                C51009) *
               C51122 * C50972 * C51243 -
           ((C20287 * C3849 + C20282 * C3851 + C20286 * C2852 + C20281 * C2856 +
             C20285 * C1344 + C20280 * C1350 + C20284 * C519 + C20279 * C532) *
                C51009 +
            (C20287 * C3845 + C20282 * C3848 + C20286 * C2847 + C20281 * C2851 +
             C20285 * C1338 + C20280 * C1343 + C20284 * C502 + C20279 * C518) *
                C118) *
               C51122 * C50972 * C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                 C118 +
             (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                 C51009) *
                C51122 * C17450 +
            ((C17488 + C17489) * C118 + (C17490 + C17491) * C51009) * C51122 *
                C17451 +
            C17514 * C17452) *
               C1119 -
           (C17515 * C17452 +
            ((C17495 + C17494) * C51009 + (C17493 + C17492) * C118) * C51122 *
                C17451 +
            ((C17491 + C17490) * C51009 + (C17489 + C17488) * C118) * C51122 *
                C17450) *
               C1120 +
           (C17514 * C17450 +
            ((C17499 + C17498) * C118 + (C17497 + C17496) * C51009) * C51122 *
                C17451 +
            ((C17500 + C17501) * C118 + (C17502 + C17503) * C51009) * C51122 *
                C17452) *
               C1121) *
              C1831 +
          ((((C17888 + C17889) * C118 + (C17890 + C17891) * C51009) * C51122 *
                C17450 +
            ((C17892 + C17893) * C118 + (C17894 + C17895) * C51009) * C51122 *
                C17451 +
            ((C18228 + C18229) * C118 + (C18230 + C18231) * C51009) * C51122 *
                C17452) *
               C1120 -
           (C18235 * C17452 +
            ((C17891 + C17890) * C51009 + (C17889 + C17888) * C118) * C51122 *
                C17451 +
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C51009 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C118) *
                C51122 * C17450) *
               C1119 -
           (((C17454 * C983 + C51158 * C988 + C17453 * C513 + C17448 * C529) *
                 C51009 +
             (C17454 * C973 + C51158 * C982 + C17453 * C499 + C17448 * C512) *
                 C118) *
                C51122 * C17452 +
            ((C18231 + C18230) * C51009 + (C18229 + C18228) * C118) * C51122 *
                C17451 +
            C18235 * C17450) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17453 * C119 + C17448 * C126 + C17454 * C301 + C51158 * C311) *
                C298 +
            (C17453 * C127 + C17448 * C140 + C17454 * C312 + C51158 * C331) *
                C293 -
            (C17454 * C302 + C51158 * C313 + C17453 * C301 + C17448 * C311) *
                C299 -
            (C17454 * C314 + C51158 * C332 + C17453 * C312 + C17448 * C331) *
                C294 +
            (C17453 * C302 + C17448 * C313 + C17454 * C1223 + C51158 * C1227) *
                C300 +
            (C17453 * C314 + C17448 * C332 + C17454 * C1228 + C51158 * C1235) *
                C295) *
               C51122 * C17450 +
           ((C17488 + C17489) * C298 + (C17490 + C17491) * C293 -
            (C17694 + C17695) * C299 - (C17696 + C17697) * C294 +
            (C17698 + C17699) * C300 + (C17700 + C17701) * C295) *
               C51122 * C17451 +
           (C17504 * C298 + C17505 * C293 - C18052 * C299 - C18053 * C294 +
            (C17706 + C17707) * C300 + (C17708 + C17709) * C295) *
               C51122 * C17452) *
              C50991 * C1831 +
          (((C17453 * C969 + C17448 * C974 + C17454 * C1717 + C51158 * C1721) *
                C299 -
            ((C17454 * C975 + C51158 * C984 + C17453 * C514 + C17448 * C530) *
                 C293 +
             (C17454 * C969 + C51158 * C974 + C17453 * C500 + C17448 * C515) *
                 C298) +
            (C17453 * C975 + C17448 * C984 + C17454 * C1722 + C51158 * C1729) *
                C294 -
            (C17454 * C3416 + C51158 * C3419 + C17453 * C1717 +
             C17448 * C1721) *
                C300 -
            (C17454 * C3420 + C51158 * C3425 + C17453 * C1722 +
             C17448 * C1729) *
                C295) *
               C51122 * C17450 +
           ((C18446 + C18447) * C299 -
            ((C17891 + C17890) * C293 + (C17889 + C17888) * C298) +
            (C18448 + C18449) * C294 -
            (C17454 * C3417 + C51158 * C3421 + C17453 * C1718 +
             C17448 * C1723) *
                C300 -
            (C17454 * C3422 + C51158 * C3426 + C17453 * C1724 +
             C17448 * C1730) *
                C295) *
               C51122 * C17451 +
           ((C18450 + C18451) * C299 - (C18226 * C293 + C18227 * C298) +
            (C18452 + C18453) * C294 -
            (C17454 * C3418 + C51158 * C3423 + C17453 * C1719 +
             C17448 * C1725) *
                C300 -
            (C17454 * C3424 + C51158 * C3427 + C17453 * C1726 +
             C17448 * C1731) *
                C295) *
               C51122 * C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
             C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
                C118 +
            (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
             C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
                C51009) *
               C51122 * C50972 * C1119 -
           ((C20287 * C1230 + C20282 * C1236 + C20286 * C318 + C20281 * C334 +
             C20285 * C316 + C20280 * C333 + C20284 * C129 + C20279 * C141) *
                C51009 +
            (C20287 * C1224 + C20282 * C1229 + C20286 * C304 + C20281 * C317 +
             C20285 * C303 + C20280 * C315 + C20284 * C120 + C20279 * C128) *
                C118) *
               C51122 * C50972 * C1120 +
           ((C20284 * C121 + C20279 * C130 + C20285 * C305 + C20280 * C319 +
             C20286 * C306 + C20281 * C321 + C20287 * C1225 + C20282 * C1231) *
                C118 +
            (C20284 * C131 + C20279 * C142 + C20285 * C320 + C20280 * C335 +
             C20286 * C322 + C20281 * C336 + C20287 * C1232 + C20282 * C1237) *
                C51009) *
               C51122 * C50972 * C1121) *
              C1831 +
          (((C20284 * C496 + C20279 * C506 + C20285 * C970 + C20280 * C976 +
             C20286 * C1718 + C20281 * C1723 + C20287 * C3417 +
             C20282 * C3421) *
                C118 +
            (C20284 * C507 + C20279 * C526 + C20285 * C977 + C20280 * C985 +
             C20286 * C1724 + C20281 * C1730 + C20287 * C3422 +
             C20282 * C3426) *
                C51009) *
               C51122 * C50972 * C1120 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C51009 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C118) *
               C51122 * C50972 * C1119 -
           ((C20287 * C3424 + C20282 * C3427 + C20286 * C1726 + C20281 * C1731 +
             C20285 * C979 + C20280 * C986 + C20284 * C509 + C20279 * C527) *
                C51009 +
            (C20287 * C3418 + C20282 * C3423 + C20286 * C1719 + C20281 * C1725 +
             C20285 * C971 + C20280 * C978 + C20284 * C497 + C20279 * C508) *
                C118) *
               C51122 * C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20284 * C119 + C20279 * C126 + C20285 * C301 + C20280 * C311 +
            C20286 * C302 + C20281 * C313 + C20287 * C1223 + C20282 * C1227) *
               C298 +
           (C20284 * C127 + C20279 * C140 + C20285 * C312 + C20280 * C331 +
            C20286 * C314 + C20281 * C332 + C20287 * C1228 + C20282 * C1235) *
               C293 -
           (C20287 * C2652 + C20282 * C2655 + C20286 * C1223 + C20281 * C1227 +
            C20285 * C302 + C20280 * C313 + C20284 * C301 + C20279 * C311) *
               C299 -
           (C20287 * C2656 + C20282 * C2661 + C20286 * C1228 + C20281 * C1235 +
            C20285 * C314 + C20280 * C332 + C20284 * C312 + C20279 * C331) *
               C294 +
           (C20284 * C302 + C20279 * C313 + C20285 * C1223 + C20280 * C1227 +
            C20286 * C2652 + C20281 * C2655 + C20287 * C3690 + C20282 * C3692) *
               C300 +
           (C20284 * C314 + C20279 * C332 + C20285 * C1228 + C20280 * C1235 +
            C20286 * C2656 + C20281 * C2661 + C20287 * C3693 + C20282 * C3696) *
               C295) *
              C51122 * C50972 * C50991 * C1831 +
          ((C20284 * C969 + C20279 * C974 + C20285 * C1717 + C20280 * C1721 +
            C20286 * C3416 + C20281 * C3419 + C20287 * C4338 + C20282 * C4340) *
               C299 -
           ((C20287 * C3420 + C20282 * C3425 + C20286 * C1722 + C20281 * C1729 +
             C20285 * C975 + C20280 * C984 + C20284 * C514 + C20279 * C530) *
                C293 +
            (C20287 * C3416 + C20282 * C3419 + C20286 * C1717 + C20281 * C1721 +
             C20285 * C969 + C20280 * C974 + C20284 * C500 + C20279 * C515) *
                C298) +
           (C20284 * C975 + C20279 * C984 + C20285 * C1722 + C20280 * C1729 +
            C20286 * C3420 + C20281 * C3425 + C20287 * C4341 + C20282 * C4344) *
               C294 -
           (C20287 * C21406 + C20282 * C21407 + C20286 * C4338 +
            C20281 * C4340 + C20285 * C3416 + C20280 * C3419 + C20284 * C1717 +
            C20279 * C1721) *
               C300 -
           (C20287 * C21408 + C20282 * C21409 + C20286 * C4341 +
            C20281 * C4344 + C20285 * C3420 + C20280 * C3425 + C20284 * C1722 +
            C20279 * C1729) *
               C295) *
              C51122 * C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C687 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51251 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C688 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C34007 +
            ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
             (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
             (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                C34007 +
            C14971 * C51186) *
               C50977) *
              C51294 +
          ((((C8499 + C8498) * C688 -
             ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
             (C8501 + C8500) * C51061) *
                C34007 +
            C14972 * C51186) *
               C51236 +
           (((C8507 + C8506) * C688 -
             ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
             (C8509 + C8508) * C51061) *
                C34007 +
            ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
             (C9256 + C9257) * C51061) *
                C51186) *
               C50977) *
              C51295 +
          ((C8874 * C34007 +
            (C14668 * C687 + C14669 * C51251 - (C9255 + C9254) * C688 -
             (C9257 + C9256) * C51061) *
                C51186) *
               C51236 +
           (((C8303 + C8302) * C687 + (C8301 + C8300) * C51251 -
             (C8870 + C8869) * C688 - (C8872 + C8871) * C51061) *
                C34007 +
            ((C9032 + C9033) * C687 + (C9034 + C9035) * C51251 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C688 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C686) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C687 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51251 -
              (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                  C688 -
              (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                  C51061) *
                 C34007 +
             ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
              (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                 C51186) *
                C51236 +
            (((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
              (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                 C34007 +
             C14971 * C51186) *
                C50977) *
               C296 +
           ((((C8499 + C8498) * C688 -
              ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
              (C8501 + C8500) * C51061) *
                 C34007 +
             C14972 * C51186) *
                C51236 +
            (((C8507 + C8506) * C688 -
              ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
              (C8509 + C8508) * C51061) *
                 C34007 +
             ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
              (C9256 + C9257) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51252 +
          (((((C14956 + C14955) * C688 -
              ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
              (C14958 + C14957) * C51061) *
                 C34007 +
             ((C15499 + C15500) * C688 -
              ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
              (C15501 + C15502) * C51061) *
                 C51186) *
                C51236 +
            (C14972 * C34007 +
             ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
              (C14967 + C14968) * C51061) *
                 C51186) *
                C50977) *
               C296 +
           ((C14971 * C34007 +
             (C14236 * C687 + C14237 * C51251 - (C14966 + C14965) * C688 -
              (C14968 + C14967) * C51061) *
                 C51186) *
                C51236 +
            ((C14668 * C687 + C14669 * C51251 - (C9255 + C9254) * C688 -
              (C9257 + C9256) * C51061) *
                 C34007 +
             ((C8704 + C8705) * C687 + (C8706 + C8707) * C51251 -
              (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 +
               C51264 * C1345) *
                  C688 -
              (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 +
               C51264 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C298 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C293 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C299 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C294 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C300 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C295) *
                C34007 +
            ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
             (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
             (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
             (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
             (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
                C34007 +
            (C14232 * C298 + C14233 * C293 - C14941 * C299 - C14942 * C294 +
             (C14026 + C14027) * C300 + (C14028 + C14029) * C295) *
                C51186) *
               C50977) *
              C296 +
          ((((C8499 + C8498) * C299 -
             ((C8295 + C8294) * C293 + (C8293 + C8292) * C298) +
             (C8501 + C8500) * C294 - (C8503 + C8502) * C300 -
             (C8505 + C8504) * C295) *
                C34007 +
            (C14943 * C299 - (C14234 * C293 + C14235 * C298) + C14946 * C294 -
             (C14027 + C14026) * C300 - (C14029 + C14028) * C295) *
                C51186) *
               C51236 +
           (((C8507 + C8506) * C299 -
             ((C8299 + C8298) * C293 + (C8297 + C8296) * C298) +
             (C8509 + C8508) * C294 - (C8511 + C8510) * C300 -
             (C8513 + C8512) * C295) *
                C34007 +
            ((C9254 + C9255) * C299 - (C9030 * C293 + C9031 * C298) +
             (C9256 + C9257) * C294 -
             (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                 C300 -
             (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                 C295) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C34007 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
               C51236 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C34007 +
            C14276 * C51186) *
               C50977) *
              C112 -
          ((C9038 * C51186 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C34007) *
               C50977 +
           (C14277 * C51186 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C34007) *
               C51236) *
              C113 +
          ((C8316 * C34007 + C14672 * C51186) * C51236 +
           (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C34007 +
            ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
               C50977) *
              C114 -
          ((((C8258 * C983 + C51158 * C988 + C8257 * C513 + C51264 * C529) *
                 C51009 +
             (C8258 * C973 + C51158 * C982 + C8257 * C499 + C51264 * C512) *
                 C118) *
                C51186 +
            ((C8307 + C8306) * C51009 + (C8305 + C8304) * C118) * C34007) *
               C50977 +
           (((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51186 +
            C8317 * C34007) *
               C51236) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C34007 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C51236 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C34007 +
             C14276 * C51186) *
                C50977) *
               C296 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C34007) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C34007) *
                C51236) *
               C50996) *
              C493 +
          (((C14276 * C34007 + C14278 * C51186) * C51236 +
            (C14672 * C34007 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C50996 -
           ((C14279 * C51186 + C14277 * C34007) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C34007) *
                C51236) *
               C296) *
              C494 +
          (((((C14271 + C14270) * C118 + (C14269 + C14268) * C51009) * C34007 +
             ((C16701 + C16702) * C118 + (C16703 + C16704) * C51009) * C51186) *
                C51236 +
            (C14278 * C34007 +
             ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C51186) *
                C50977) *
               C296 -
           ((((C8258 * C6233 + C51158 * C6234 + C8257 * C2007 +
               C51264 * C2014) *
                  C51009 +
              (C8258 * C6231 + C51158 * C6232 + C8257 * C2002 +
               C51264 * C2008) *
                  C118) *
                 C51186 +
             ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C34007) *
                C50977 +
            (((C14275 + C14274) * C51009 + (C14273 + C14272) * C118) * C51186 +
             C14279 * C34007) *
                C51236) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C34007 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C51236 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C34007 +
             C14276 * C51186) *
                C50977) *
               C51294 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C34007) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C34007) *
                C51236) *
               C51295 +
           ((C8316 * C34007 + C14672 * C51186) * C51236 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C34007 +
             ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
                C50977) *
               C686) *
              C51252 +
          (((C14276 * C34007 + C14278 * C51186) * C51236 +
            (C14672 * C34007 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C51295 -
           ((C14279 * C51186 + C14277 * C34007) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C34007) *
                C51236) *
               C51294 -
           ((((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                  C51009 +
              (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                  C118) *
                 C51186 +
             ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C34007) *
                C50977 +
            (((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51186 +
             C9038 * C34007) *
                C51236) *
               C686) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C34007 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
               C51236 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C34007 +
            C14276 * C51186) *
               C50977) *
              C112 -
          ((C9038 * C51186 +
            ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C34007) *
               C50977 +
           (C14277 * C51186 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C34007) *
               C51236) *
              C113 +
          ((C8316 * C34007 + C14672 * C51186) * C51236 +
           (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C34007 +
            ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
               C50977) *
              C114 -
          ((((C8258 * C983 + C51158 * C988 + C8257 * C513 + C51264 * C529) *
                 C51009 +
             (C8258 * C973 + C51158 * C982 + C8257 * C499 + C51264 * C512) *
                 C118) *
                C51186 +
            ((C8307 + C8306) * C51009 + (C8305 + C8304) * C118) * C34007) *
               C50977 +
           (((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51186 +
            C8317 * C34007) *
               C51236) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C298 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C293 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C299 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C294 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C300 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C295) *
                C34007 +
            ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
             (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
             (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
             (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
             (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
                C34007 +
            (C14232 * C298 + C14233 * C293 - C14941 * C299 - C14942 * C294 +
             (C14026 + C14027) * C300 + (C14028 + C14029) * C295) *
                C51186) *
               C50977) *
              C296 +
          ((((C8499 + C8498) * C299 -
             ((C8295 + C8294) * C293 + (C8293 + C8292) * C298) +
             (C8501 + C8500) * C294 - (C8503 + C8502) * C300 -
             (C8505 + C8504) * C295) *
                C34007 +
            (C14943 * C299 - (C14234 * C293 + C14235 * C298) + C14946 * C294 -
             (C14027 + C14026) * C300 - (C14029 + C14028) * C295) *
                C51186) *
               C51236 +
           (((C8507 + C8506) * C299 -
             ((C8299 + C8298) * C293 + (C8297 + C8296) * C298) +
             (C8509 + C8508) * C294 - (C8511 + C8510) * C300 -
             (C8513 + C8512) * C295) *
                C34007 +
            ((C9254 + C9255) * C299 - (C9030 * C293 + C9031 * C298) +
             (C9256 + C9257) * C294 -
             (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                 C300 -
             (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                 C295) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1456 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51296 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1457 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51297 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C1458 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C1453) *
                C34007 +
            ((C14256 + C14257) * C1456 + (C14258 + C14259) * C51296 -
             (C14955 + C14956) * C1457 - (C14957 + C14958) * C51297 +
             (C16171 + C16172) * C1458 + (C16173 + C16174) * C1453) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C1456 + (C8294 + C8295) * C51296 -
             (C8498 + C8499) * C1457 - (C8500 + C8501) * C51297 +
             (C8502 + C8503) * C1458 + (C8504 + C8505) * C1453) *
                C34007 +
            (C14232 * C1456 + C14233 * C51296 - C14941 * C1457 -
             C14942 * C51297 + (C14026 + C14027) * C1458 +
             (C14028 + C14029) * C1453) *
                C51186) *
               C50977) *
              C51243 +
          ((((C8499 + C8498) * C1457 -
             ((C8295 + C8294) * C51296 + (C8293 + C8292) * C1456) +
             (C8501 + C8500) * C51297 - (C8503 + C8502) * C1458 -
             (C8505 + C8504) * C1453) *
                C34007 +
            (C14943 * C1457 - (C14234 * C51296 + C14235 * C1456) +
             C14946 * C51297 - (C14027 + C14026) * C1458 -
             (C14029 + C14028) * C1453) *
                C51186) *
               C51236 +
           (((C8507 + C8506) * C1457 -
             ((C8299 + C8298) * C51296 + (C8297 + C8296) * C1456) +
             (C8509 + C8508) * C51297 - (C8511 + C8510) * C1458 -
             (C8513 + C8512) * C1453) *
                C34007 +
            ((C9254 + C9255) * C1457 - (C9030 * C51296 + C9031 * C1456) +
             (C9256 + C9257) * C51297 -
             (C8258 * C3418 + C51158 * C3423 + C8257 * C1719 + C51264 * C1725) *
                 C1458 -
             (C8258 * C3424 + C51158 * C3427 + C8257 * C1726 + C51264 * C1731) *
                 C1453) *
                C51186) *
               C50977) *
              C50996) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1456 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51296 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1457 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51297 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C1458 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C1453) *
                C34007 +
            ((C14256 + C14257) * C1456 + (C14258 + C14259) * C51296 -
             (C14955 + C14956) * C1457 - (C14957 + C14958) * C51297 +
             (C16171 + C16172) * C1458 + (C16173 + C16174) * C1453) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C1456 + (C8294 + C8295) * C51296 -
             (C8498 + C8499) * C1457 - (C8500 + C8501) * C51297 +
             (C8502 + C8503) * C1458 + (C8504 + C8505) * C1453) *
                C34007 +
            (C14232 * C1456 + C14233 * C51296 - C14941 * C1457 -
             C14942 * C51297 + (C14026 + C14027) * C1458 +
             (C14028 + C14029) * C1453) *
                C51186) *
               C50977) *
              C50991 * C51252 +
          ((((C14956 + C14955) * C1457 -
             ((C14259 + C14258) * C51296 + (C14257 + C14256) * C1456) +
             (C14958 + C14957) * C51297 - (C16172 + C16171) * C1458 -
             (C16174 + C16173) * C1453) *
                C34007 +
            ((C15499 + C15500) * C1457 -
             ((C14268 + C14269) * C51296 + (C14270 + C14271) * C1456) +
             (C15501 + C15502) * C51297 -
             (C8258 * C3844 + C51158 * C3846 + C8257 * C2846 + C51264 * C2849) *
                 C1458 -
             (C8258 * C3847 + C51158 * C3850 + C8257 * C2850 + C51264 * C2855) *
                 C1453) *
                C51186) *
               C51236 +
           ((C14943 * C1457 - (C14234 * C51296 + C14235 * C1456) +
             C14946 * C51297 - (C14027 + C14026) * C1458 -
             (C14029 + C14028) * C1453) *
                C34007 +
            ((C14965 + C14966) * C1457 - (C14238 * C51296 + C14239 * C1456) +
             (C14967 + C14968) * C51297 -
             (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                 C1458 -
             (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                 C1453) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1219 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1214 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1220 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C1215 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C1221 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C1216 -
            (C8258 * C2652 + C51158 * C2655 + C8257 * C1223 + C51264 * C1227) *
                C1222 -
            (C8258 * C2656 + C51158 * C2661 + C8257 * C1228 + C51264 * C1235) *
                C1217) *
               C34007 +
           ((C14256 + C14257) * C1219 + (C14258 + C14259) * C1214 -
            (C14955 + C14956) * C1220 - (C14957 + C14958) * C1215 +
            (C16171 + C16172) * C1221 + (C16173 + C16174) * C1216 -
            (C8258 * C4338 + C51158 * C4340 + C8257 * C3416 + C51264 * C3419) *
                C1222 -
            (C8258 * C4341 + C51158 * C4344 + C8257 * C3420 + C51264 * C3425) *
                C1217) *
               C51186) *
              C51236 +
          (((C8292 + C8293) * C1219 + (C8294 + C8295) * C1214 -
            (C8498 + C8499) * C1220 - (C8500 + C8501) * C1215 +
            (C8502 + C8503) * C1221 + (C8504 + C8505) * C1216 -
            (C8258 * C2653 + C51158 * C2657 + C8257 * C1224 + C51264 * C1229) *
                C1222 -
            (C8258 * C2658 + C51158 * C2662 + C8257 * C1230 + C51264 * C1236) *
                C1217) *
               C34007 +
           (C14232 * C1219 + C14233 * C1214 - C14941 * C1220 - C14942 * C1215 +
            (C14026 + C14027) * C1221 + (C14028 + C14029) * C1216 -
            (C8258 * C4339 + C51158 * C4342 + C8257 * C3417 + C51264 * C3421) *
                C1222 -
            (C8258 * C4343 + C51158 * C4345 + C8257 * C3422 + C51264 * C3426) *
                C1217) *
               C51186) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1122 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C1117 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1123 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C34007 +
            ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
             (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
             (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                C34007 +
            C15967 * C51186) *
               C50977) *
              C1119 +
          ((((C8499 + C8498) * C1123 -
             ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
             (C8501 + C8500) * C51061) *
                C34007 +
            C15968 * C51186) *
               C51236 +
           (((C8507 + C8506) * C1123 -
             ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
             (C8509 + C8508) * C51061) *
                C34007 +
            ((C9254 + C9255) * C1123 - (C9030 * C1117 + C9031 * C1122) +
             (C9256 + C9257) * C51061) *
                C51186) *
               C50977) *
              C1120 +
          ((C9410 * C34007 +
            (C14668 * C1122 + C14669 * C1117 - (C9255 + C9254) * C1123 -
             (C9257 + C9256) * C51061) *
                C51186) *
               C51236 +
           (((C8303 + C8302) * C1122 + (C8301 + C8300) * C1117 -
             (C8870 + C8869) * C1123 - (C8872 + C8871) * C51061) *
                C34007 +
            ((C9032 + C9033) * C1122 + (C9034 + C9035) * C1117 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C1123 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1122 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C1117 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1123 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C34007 +
            ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
             (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
             (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                C34007 +
            C15967 * C51186) *
               C50977) *
              C50991 * C493 +
          ((((C14956 + C14955) * C1123 -
             ((C14259 + C14258) * C1117 + (C14257 + C14256) * C1122) +
             (C14958 + C14957) * C51061) *
                C34007 +
            ((C15499 + C15500) * C1123 -
             ((C14268 + C14269) * C1117 + (C14270 + C14271) * C1122) +
             (C15501 + C15502) * C51061) *
                C51186) *
               C51236 +
           (C15968 * C34007 +
            ((C14965 + C14966) * C1123 - (C14238 * C1117 + C14239 * C1122) +
             (C14967 + C14968) * C51061) *
                C51186) *
               C50977) *
              C50991 * C494 +
          ((((C14271 + C14270) * C1122 + (C14269 + C14268) * C1117 -
             (C15500 + C15499) * C1123 - (C15502 + C15501) * C51061) *
                C34007 +
            ((C16701 + C16702) * C1122 + (C16703 + C16704) * C1117 -
             (C8258 * C4738 + C51158 * C4746 + C8257 * C4739 + C51264 * C4747) *
                 C1123 -
             (C8258 * C4744 + C51158 * C4750 + C8257 * C4745 + C51264 * C4751) *
                 C51061) *
                C51186) *
               C51236 +
           ((C14236 * C1122 + C14237 * C1117 - (C14966 + C14965) * C1123 -
             (C14968 + C14967) * C51061) *
                C34007 +
            ((C14272 + C14273) * C1122 + (C14274 + C14275) * C1117 -
             (C8258 * C4736 + C51158 * C4742 + C8257 * C4737 + C51264 * C4743) *
                 C1123 -
             (C8258 * C4740 + C51158 * C4748 + C8257 * C4741 + C51264 * C4749) *
                 C51061) *
                C51186) *
               C50977) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C1122 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C1117 -
              (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                  C1123 -
              (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                  C51061) *
                 C34007 +
             ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
              (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                 C51186) *
                C51236 +
            (((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
              (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                 C34007 +
             C15967 * C51186) *
                C50977) *
               C51243 +
           ((((C8499 + C8498) * C1123 -
              ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
              (C8501 + C8500) * C51061) *
                 C34007 +
             C15968 * C51186) *
                C51236 +
            (((C8507 + C8506) * C1123 -
              ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
              (C8509 + C8508) * C51061) *
                 C34007 +
             ((C9254 + C9255) * C1123 - (C9030 * C1117 + C9031 * C1122) +
              (C9256 + C9257) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51252 +
          (((((C14956 + C14955) * C1123 -
              ((C14259 + C14258) * C1117 + (C14257 + C14256) * C1122) +
              (C14958 + C14957) * C51061) *
                 C34007 +
             ((C15499 + C15500) * C1123 -
              ((C14268 + C14269) * C1117 + (C14270 + C14271) * C1122) +
              (C15501 + C15502) * C51061) *
                 C51186) *
                C51236 +
            (C15968 * C34007 +
             ((C14965 + C14966) * C1123 - (C14238 * C1117 + C14239 * C1122) +
              (C14967 + C14968) * C51061) *
                 C51186) *
                C50977) *
               C51243 +
           ((C15967 * C34007 +
             (C14236 * C1122 + C14237 * C1117 - (C14966 + C14965) * C1123 -
              (C14968 + C14967) * C51061) *
                 C51186) *
                C51236 +
            ((C14668 * C1122 + C14669 * C1117 - (C9255 + C9254) * C1123 -
              (C9257 + C9256) * C51061) *
                 C34007 +
             ((C8704 + C8705) * C1122 + (C8706 + C8707) * C1117 -
              (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 +
               C51264 * C1345) *
                  C1123 -
              (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 +
               C51264 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1122 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C1117 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1123 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C34007 +
            ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
             (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C1122 + (C8294 + C8295) * C1117 -
             (C8498 + C8499) * C1123 - (C8500 + C8501) * C51061) *
                C34007 +
            C15967 * C51186) *
               C50977) *
              C1119 +
          ((((C8499 + C8498) * C1123 -
             ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
             (C8501 + C8500) * C51061) *
                C34007 +
            C15968 * C51186) *
               C51236 +
           (((C8507 + C8506) * C1123 -
             ((C8299 + C8298) * C1117 + (C8297 + C8296) * C1122) +
             (C8509 + C8508) * C51061) *
                C34007 +
            ((C9254 + C9255) * C1123 - (C9030 * C1117 + C9031 * C1122) +
             (C9256 + C9257) * C51061) *
                C51186) *
               C50977) *
              C1120 +
          ((C9410 * C34007 +
            (C14668 * C1122 + C14669 * C1117 - (C9255 + C9254) * C1123 -
             (C9257 + C9256) * C51061) *
                C51186) *
               C51236 +
           (((C8303 + C8302) * C1122 + (C8301 + C8300) * C1117 -
             (C8870 + C8869) * C1123 - (C8872 + C8871) * C51061) *
                C34007 +
            ((C9032 + C9033) * C1122 + (C9034 + C9035) * C1117 -
             (C8258 * C1720 + C51158 * C1727 + C8257 * C972 + C51264 * C980) *
                 C1123 -
             (C8258 * C1728 + C51158 * C1732 + C8257 * C981 + C51264 * C987) *
                 C51061) *
                C51186) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1219 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1214 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1220 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C1215 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C1221 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C1216 -
            (C8258 * C2652 + C51158 * C2655 + C8257 * C1223 + C51264 * C1227) *
                C1222 -
            (C8258 * C2656 + C51158 * C2661 + C8257 * C1228 + C51264 * C1235) *
                C1217) *
               C34007 +
           ((C14256 + C14257) * C1219 + (C14258 + C14259) * C1214 -
            (C14955 + C14956) * C1220 - (C14957 + C14958) * C1215 +
            (C16171 + C16172) * C1221 + (C16173 + C16174) * C1216 -
            (C8258 * C4338 + C51158 * C4340 + C8257 * C3416 + C51264 * C3419) *
                C1222 -
            (C8258 * C4341 + C51158 * C4344 + C8257 * C3420 + C51264 * C3425) *
                C1217) *
               C51186) *
              C51236 +
          (((C8292 + C8293) * C1219 + (C8294 + C8295) * C1214 -
            (C8498 + C8499) * C1220 - (C8500 + C8501) * C1215 +
            (C8502 + C8503) * C1221 + (C8504 + C8505) * C1216 -
            (C8258 * C2653 + C51158 * C2657 + C8257 * C1224 + C51264 * C1229) *
                C1222 -
            (C8258 * C2658 + C51158 * C2662 + C8257 * C1230 + C51264 * C1236) *
                C1217) *
               C34007 +
           (C14232 * C1219 + C14233 * C1214 - C14941 * C1220 - C14942 * C1215 +
            (C14026 + C14027) * C1221 + (C14028 + C14029) * C1216 -
            (C8258 * C4339 + C51158 * C4342 + C8257 * C3417 + C51264 * C3421) *
                C1222 -
            (C8258 * C4343 + C51158 * C4345 + C8257 * C3422 + C51264 * C3426) *
                C1217) *
               C51186) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C687 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51251 -
              (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                  C688 -
              (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                  C51061) *
                 C34007 +
             ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
              (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                 C51186) *
                C51236 +
            (((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
              (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                 C34007 +
             C14971 * C51186) *
                C50977) *
               C51243 +
           ((((C8499 + C8498) * C688 -
              ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
              (C8501 + C8500) * C51061) *
                 C34007 +
             C14972 * C51186) *
                C51236 +
            (((C8507 + C8506) * C688 -
              ((C8299 + C8298) * C51251 + (C8297 + C8296) * C687) +
              (C8509 + C8508) * C51061) *
                 C34007 +
             ((C9254 + C9255) * C688 - (C9030 * C51251 + C9031 * C687) +
              (C9256 + C9257) * C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C1831 +
          (((((C14956 + C14955) * C688 -
              ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
              (C14958 + C14957) * C51061) *
                 C34007 +
             ((C15499 + C15500) * C688 -
              ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
              (C15501 + C15502) * C51061) *
                 C51186) *
                C51236 +
            (C14972 * C34007 +
             ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
              (C14967 + C14968) * C51061) *
                 C51186) *
                C50977) *
               C51243 +
           ((C14971 * C34007 +
             (C14236 * C687 + C14237 * C51251 - (C14966 + C14965) * C688 -
              (C14968 + C14967) * C51061) *
                 C51186) *
                C51236 +
            ((C14668 * C687 + C14669 * C51251 - (C9255 + C9254) * C688 -
              (C9257 + C9256) * C51061) *
                 C34007 +
             ((C8704 + C8705) * C687 + (C8706 + C8707) * C51251 -
              (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 +
               C51264 * C1345) *
                  C688 -
              (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 +
               C51264 * C1351) *
                  C51061) *
                 C51186) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C687 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51251 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C688 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C34007 +
            ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
             (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C687 + (C8294 + C8295) * C51251 -
             (C8498 + C8499) * C688 - (C8500 + C8501) * C51061) *
                C34007 +
            C14971 * C51186) *
               C50977) *
              C50991 * C51298 +
          ((((C14956 + C14955) * C688 -
             ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
             (C14958 + C14957) * C51061) *
                C34007 +
            ((C15499 + C15500) * C688 -
             ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
             (C15501 + C15502) * C51061) *
                C51186) *
               C51236 +
           (C14972 * C34007 +
            ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
             (C14967 + C14968) * C51061) *
                C51186) *
               C50977) *
              C50991 * C51299 +
          ((((C14271 + C14270) * C687 + (C14269 + C14268) * C51251 -
             (C15500 + C15499) * C688 - (C15502 + C15501) * C51061) *
                C34007 +
            ((C16701 + C16702) * C687 + (C16703 + C16704) * C51251 -
             (C8258 * C4738 + C51158 * C4746 + C8257 * C4739 + C51264 * C4747) *
                 C688 -
             (C8258 * C4744 + C51158 * C4750 + C8257 * C4745 + C51264 * C4751) *
                 C51061) *
                C51186) *
               C51236 +
           ((C14236 * C687 + C14237 * C51251 - (C14966 + C14965) * C688 -
             (C14968 + C14967) * C51061) *
                C34007 +
            ((C14272 + C14273) * C687 + (C14274 + C14275) * C51251 -
             (C8258 * C4736 + C51158 * C4742 + C8257 * C4737 + C51264 * C4743) *
                 C688 -
             (C8258 * C4740 + C51158 * C4748 + C8257 * C4741 + C51264 * C4749) *
                 C51061) *
                C51186) *
               C50977) *
              C50991 * C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C298 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C293 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C299 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C294 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C300 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C295) *
                C34007 +
            ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
             (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
             (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
             (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
             (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
                C34007 +
            (C14232 * C298 + C14233 * C293 - C14941 * C299 - C14942 * C294 +
             (C14026 + C14027) * C300 + (C14028 + C14029) * C295) *
                C51186) *
               C50977) *
              C50991 * C1831 +
          ((((C14956 + C14955) * C299 -
             ((C14259 + C14258) * C293 + (C14257 + C14256) * C298) +
             (C14958 + C14957) * C294 - (C16172 + C16171) * C300 -
             (C16174 + C16173) * C295) *
                C34007 +
            ((C15499 + C15500) * C299 -
             ((C14268 + C14269) * C293 + (C14270 + C14271) * C298) +
             (C15501 + C15502) * C294 -
             (C8258 * C3844 + C51158 * C3846 + C8257 * C2846 + C51264 * C2849) *
                 C300 -
             (C8258 * C3847 + C51158 * C3850 + C8257 * C2850 + C51264 * C2855) *
                 C295) *
                C51186) *
               C51236 +
           ((C14943 * C299 - (C14234 * C293 + C14235 * C298) + C14946 * C294 -
             (C14027 + C14026) * C300 - (C14029 + C14028) * C295) *
                C34007 +
            ((C14965 + C14966) * C299 - (C14238 * C293 + C14239 * C298) +
             (C14967 + C14968) * C294 -
             (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                 C300 -
             (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                 C295) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C34007 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C51236 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C34007 +
             C14276 * C51186) *
                C50977) *
               C1119 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C34007) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C34007) *
                C51236) *
               C1120 +
           ((C8316 * C34007 + C14672 * C51186) * C51236 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C34007 +
             ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
                C50977) *
               C1121) *
              C1831 +
          (((C14276 * C34007 + C14278 * C51186) * C51236 +
            (C14672 * C34007 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C1120 -
           ((C14279 * C51186 + C14277 * C34007) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C34007) *
                C51236) *
               C1119 -
           ((((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                  C51009 +
              (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                  C118) *
                 C51186 +
             ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C34007) *
                C50977 +
            (((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51186 +
             C9038 * C34007) *
                C51236) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C34007 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
               C51236 +
           (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C34007 +
            C14276 * C51186) *
               C50977) *
              C50991 * C1997 -
          ((C14279 * C51186 + C14277 * C34007) * C50977 +
           (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
            ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C34007) *
               C51236) *
              C50991 * C1998 +
          ((((C14271 + C14270) * C118 + (C14269 + C14268) * C51009) * C34007 +
            ((C16701 + C16702) * C118 + (C16703 + C16704) * C51009) * C51186) *
               C51236 +
           (C14278 * C34007 +
            ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C51186) *
               C50977) *
              C50991 * C1999 -
          ((((C8258 * C6680 + C51158 * C6682 + C8257 * C5667 + C51264 * C5671) *
                 C51009 +
             (C8258 * C6676 + C51158 * C6679 + C8257 * C5662 + C51264 * C5666) *
                 C118) *
                C51186 +
            ((C14275 + C14274) * C51009 + (C14273 + C14272) * C118) * C34007) *
               C50977 +
           (((C8258 * C6678 + C51158 * C6681 + C8257 * C5665 + C51264 * C5670) *
                 C51009 +
             (C8258 * C6675 + C51158 * C6677 + C8257 * C5661 + C51264 * C5664) *
                 C118) *
                C51186 +
            ((C16704 + C16703) * C51009 + (C16702 + C16701) * C118) * C34007) *
               C51236) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C34007 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C51236 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C34007 +
             C14276 * C51186) *
                C50977) *
               C51243 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C34007) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C34007) *
                C51236) *
               C50996) *
              C51298 +
          (((C14276 * C34007 + C14278 * C51186) * C51236 +
            (C14672 * C34007 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C50996 -
           ((C14279 * C51186 + C14277 * C34007) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C34007) *
                C51236) *
               C51243) *
              C51299 +
          (((((C14271 + C14270) * C118 + (C14269 + C14268) * C51009) * C34007 +
             ((C16701 + C16702) * C118 + (C16703 + C16704) * C51009) * C51186) *
                C51236 +
            (C14278 * C34007 +
             ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C51186) *
                C50977) *
               C51243 -
           ((((C8258 * C6233 + C51158 * C6234 + C8257 * C2007 +
               C51264 * C2014) *
                  C51009 +
              (C8258 * C6231 + C51158 * C6232 + C8257 * C2002 +
               C51264 * C2008) *
                  C118) *
                 C51186 +
             ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C34007) *
                C50977 +
            (((C14275 + C14274) * C51009 + (C14273 + C14272) * C118) * C51186 +
             C14279 * C34007) *
                C51236) *
               C50996) *
              C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                  C118 +
              (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                  C51009) *
                 C34007 +
             ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51186) *
                C51236 +
            (((C8292 + C8293) * C118 + (C8294 + C8295) * C51009) * C34007 +
             C14276 * C51186) *
                C50977) *
               C1119 -
           ((C9038 * C51186 +
             ((C8299 + C8298) * C51009 + (C8297 + C8296) * C118) * C34007) *
                C50977 +
            (C14277 * C51186 +
             ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C34007) *
                C51236) *
               C1120 +
           ((C8316 * C34007 + C14672 * C51186) * C51236 +
            (((C8303 + C8302) * C118 + (C8301 + C8300) * C51009) * C34007 +
             ((C9032 + C9033) * C118 + (C9034 + C9035) * C51009) * C51186) *
                C50977) *
               C1121) *
              C1831 +
          (((C14276 * C34007 + C14278 * C51186) * C51236 +
            (C14672 * C34007 +
             ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C51186) *
                C50977) *
               C1120 -
           ((C14279 * C51186 + C14277 * C34007) * C50977 +
            (((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51186 +
             ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C34007) *
                C51236) *
               C1119 -
           ((((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                  C51009 +
              (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                  C118) *
                 C51186 +
             ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C34007) *
                C50977 +
            (((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51186 +
             C9038 * C34007) *
                C51236) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C298 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C293 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C299 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C294 +
             (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                 C300 +
             (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                 C295) *
                C34007 +
            ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
             (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
             (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
                C51186) *
               C51236 +
           (((C8292 + C8293) * C298 + (C8294 + C8295) * C293 -
             (C8498 + C8499) * C299 - (C8500 + C8501) * C294 +
             (C8502 + C8503) * C300 + (C8504 + C8505) * C295) *
                C34007 +
            (C14232 * C298 + C14233 * C293 - C14941 * C299 - C14942 * C294 +
             (C14026 + C14027) * C300 + (C14028 + C14029) * C295) *
                C51186) *
               C50977) *
              C50991 * C1831 +
          ((((C14956 + C14955) * C299 -
             ((C14259 + C14258) * C293 + (C14257 + C14256) * C298) +
             (C14958 + C14957) * C294 - (C16172 + C16171) * C300 -
             (C16174 + C16173) * C295) *
                C34007 +
            ((C15499 + C15500) * C299 -
             ((C14268 + C14269) * C293 + (C14270 + C14271) * C298) +
             (C15501 + C15502) * C294 -
             (C8258 * C3844 + C51158 * C3846 + C8257 * C2846 + C51264 * C2849) *
                 C300 -
             (C8258 * C3847 + C51158 * C3850 + C8257 * C2850 + C51264 * C2855) *
                 C295) *
                C51186) *
               C51236 +
           ((C14943 * C299 - (C14234 * C293 + C14235 * C298) + C14946 * C294 -
             (C14027 + C14026) * C300 - (C14029 + C14028) * C295) *
                C34007 +
            ((C14965 + C14966) * C299 - (C14238 * C293 + C14239 * C298) +
             (C14967 + C14968) * C294 -
             (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                 C300 -
             (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                 C295) *
                C51186) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C687 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51251 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C688 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51302 +
           ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
            (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
               C51303 +
           (C47624 * C687 + C47625 * C51251 - (C15500 + C15499) * C688 -
            (C15502 + C15501) * C51061) *
               C44702) *
              C50972 * C51294 +
          (((C8499 + C8498) * C688 -
            ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
            (C8501 + C8500) * C51061) *
               C51302 +
           C14972 * C51303 +
           ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
            (C14967 + C14968) * C51061) *
               C44702) *
              C50972 * C51295 +
          (C8874 * C51302 +
           (C14668 * C687 + C14669 * C51251 - (C9255 + C9254) * C688 -
            (C9257 + C9256) * C51061) *
               C51303 +
           ((C8704 + C8705) * C687 + (C8706 + C8707) * C51251 -
            (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 + C51264 * C1345) *
                C688 -
            (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 + C51264 * C1351) *
                C51061) *
               C44702) *
              C50972 * C686) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C687 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51251 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C688 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51302 +
            ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
             (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                C51303 +
            (C47624 * C687 + C47625 * C51251 - (C15500 + C15499) * C688 -
             (C15502 + C15501) * C51061) *
                C44702) *
               C50972 * C296 +
           (((C8499 + C8498) * C688 -
             ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
             (C8501 + C8500) * C51061) *
                C51302 +
            C14972 * C51303 +
            ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
             (C14967 + C14968) * C51061) *
                C44702) *
               C50972 * C50996) *
              C51252 +
          ((((C14956 + C14955) * C688 -
             ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
             (C14958 + C14957) * C51061) *
                C51302 +
            ((C15499 + C15500) * C688 -
             ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
             (C15501 + C15502) * C51061) *
                C51303 +
            ((C8257 * C4739 + C51264 * C4747 + C8258 * C4738 + C51158 * C4746) *
                 C688 -
             ((C16704 + C16703) * C51251 + (C16702 + C16701) * C687) +
             (C8257 * C4745 + C51264 * C4751 + C8258 * C4744 + C51158 * C4750) *
                 C51061) *
                C44702) *
               C50972 * C296 +
           (C14971 * C51302 +
            (C14236 * C687 + C14237 * C51251 - (C14966 + C14965) * C688 -
             (C14968 + C14967) * C51061) *
                C51303 +
            ((C14272 + C14273) * C687 + (C14274 + C14275) * C51251 -
             (C8258 * C4736 + C51158 * C4742 + C8257 * C4737 + C51264 * C4743) *
                 C688 -
             (C8258 * C4740 + C51158 * C4748 + C8257 * C4741 + C51264 * C4749) *
                 C51061) *
                C44702) *
               C50972 * C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C298 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C293 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C299 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C294 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C300 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C295) *
               C51302 +
           ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
            (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
            (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
               C51303 +
           ((C14271 + C14270) * C298 + (C14269 + C14268) * C293 -
            (C15500 + C15499) * C299 - (C15502 + C15501) * C294 +
            (C8257 * C2846 + C51264 * C2849 + C8258 * C3844 + C51158 * C3846) *
                C300 +
            (C8257 * C2850 + C51264 * C2855 + C8258 * C3847 + C51158 * C3850) *
                C295) *
               C44702) *
              C50972 * C296 +
          (((C8499 + C8498) * C299 -
            ((C8295 + C8294) * C293 + (C8293 + C8292) * C298) +
            (C8501 + C8500) * C294 - (C8503 + C8502) * C300 -
            (C8505 + C8504) * C295) *
               C51302 +
           (C14943 * C299 - (C14234 * C293 + C14235 * C298) + C14946 * C294 -
            (C14027 + C14026) * C300 - (C14029 + C14028) * C295) *
               C51303 +
           ((C14965 + C14966) * C299 - (C14238 * C293 + C14239 * C298) +
            (C14967 + C14968) * C294 -
            (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                C300 -
            (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                C295) *
               C44702) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C118 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51009) *
               C51302 +
           ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51303 +
           ((C14271 + C14270) * C118 + (C14269 + C14268) * C51009) * C44702) *
              C50972 * C112 -
          (C14279 * C44702 + C14277 * C51303 +
           ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51302) *
              C50972 * C113 +
          (C8316 * C51302 + C14672 * C51303 +
           ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C44702) *
              C50972 * C114 -
          (((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                C51009 +
            (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                C118) *
               C44702 +
           ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51303 +
           C8317 * C51302) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51302 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51303 +
            C47628 * C44702) *
               C50972 * C296 -
           (C14279 * C44702 + C14277 * C51303 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51302) *
               C50972 * C50996) *
              C493 +
          ((C14276 * C51302 + C14278 * C51303 +
            ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C44702) *
               C50972 * C50996 -
           (((C16704 + C16703) * C51009 + (C16702 + C16701) * C118) * C44702 +
            ((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51303 +
            ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51302) *
               C50972 * C296) *
              C494 +
          ((C47628 * C51302 +
            ((C16701 + C16702) * C118 + (C16703 + C16704) * C51009) * C51303 +
            ((C8257 * C5661 + C51264 * C5664 + C8258 * C6675 + C51158 * C6677) *
                 C118 +
             (C8257 * C5665 + C51264 * C5670 + C8258 * C6678 + C51158 * C6681) *
                 C51009) *
                C44702) *
               C50972 * C296 -
           (((C8258 * C6680 + C51158 * C6682 + C8257 * C5667 + C51264 * C5671) *
                 C51009 +
             (C8258 * C6676 + C51158 * C6679 + C8257 * C5662 + C51264 * C5666) *
                 C118) *
                C44702 +
            ((C14275 + C14274) * C51009 + (C14273 + C14272) * C118) * C51303 +
            C14279 * C51302) *
               C50972 * C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51302 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51303 +
            C47628 * C44702) *
               C50972 * C51294 -
           (C14279 * C44702 + C14277 * C51303 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51302) *
               C50972 * C51295 +
           (C8316 * C51302 + C14672 * C51303 +
            ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C44702) *
               C50972 * C686) *
              C51252 +
          ((C14276 * C51302 + C14278 * C51303 +
            ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C44702) *
               C50972 * C51295 -
           (((C16704 + C16703) * C51009 + (C16702 + C16701) * C118) * C44702 +
            ((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51303 +
            ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51302) *
               C50972 * C51294 -
           (((C8258 * C6233 + C51158 * C6234 + C8257 * C2007 + C51264 * C2014) *
                 C51009 +
             (C8258 * C6231 + C51158 * C6232 + C8257 * C2002 + C51264 * C2008) *
                 C118) *
                C44702 +
            ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51303 +
            C9038 * C51302) *
               C50972 * C686) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C118 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51009) *
               C51302 +
           ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51303 +
           ((C14271 + C14270) * C118 + (C14269 + C14268) * C51009) * C44702) *
              C50972 * C112 -
          (C14279 * C44702 + C14277 * C51303 +
           ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51302) *
              C50972 * C113 +
          (C8316 * C51302 + C14672 * C51303 +
           ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C44702) *
              C50972 * C114 -
          (((C8258 * C1348 + C51158 * C1352 + C8257 * C523 + C51264 * C534) *
                C51009 +
            (C8258 * C1340 + C51158 * C1347 + C8257 * C504 + C51264 * C522) *
                C118) *
               C44702 +
           ((C9035 + C9034) * C51009 + (C9033 + C9032) * C118) * C51303 +
           C8317 * C51302) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C298 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C293 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C299 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C294 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C300 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C295) *
               C51302 +
           ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
            (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
            (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
               C51303 +
           ((C14271 + C14270) * C298 + (C14269 + C14268) * C293 -
            (C15500 + C15499) * C299 - (C15502 + C15501) * C294 +
            (C8257 * C2846 + C51264 * C2849 + C8258 * C3844 + C51158 * C3846) *
                C300 +
            (C8257 * C2850 + C51264 * C2855 + C8258 * C3847 + C51158 * C3850) *
                C295) *
               C44702) *
              C50972 * C296 +
          (((C8499 + C8498) * C299 -
            ((C8295 + C8294) * C293 + (C8293 + C8292) * C298) +
            (C8501 + C8500) * C294 - (C8503 + C8502) * C300 -
            (C8505 + C8504) * C295) *
               C51302 +
           (C14943 * C299 - (C14234 * C293 + C14235 * C298) + C14946 * C294 -
            (C14027 + C14026) * C300 - (C14029 + C14028) * C295) *
               C51303 +
           ((C14965 + C14966) * C299 - (C14238 * C293 + C14239 * C298) +
            (C14967 + C14968) * C294 -
            (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                C300 -
            (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                C295) *
               C44702) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1456 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51296 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1457 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51297 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C1458 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C1453) *
               C51302 +
           ((C14256 + C14257) * C1456 + (C14258 + C14259) * C51296 -
            (C14955 + C14956) * C1457 - (C14957 + C14958) * C51297 +
            (C16171 + C16172) * C1458 + (C16173 + C16174) * C1453) *
               C51303 +
           (C47624 * C1456 + C47625 * C51296 - C48507 * C1457 -
            C48508 * C51297 +
            (C8257 * C2846 + C51264 * C2849 + C8258 * C3844 + C51158 * C3846) *
                C1458 +
            (C8257 * C2850 + C51264 * C2855 + C8258 * C3847 + C51158 * C3850) *
                C1453) *
               C44702) *
              C50972 * C51243 +
          (((C8499 + C8498) * C1457 -
            ((C8295 + C8294) * C51296 + (C8293 + C8292) * C1456) +
            (C8501 + C8500) * C51297 - (C8503 + C8502) * C1458 -
            (C8505 + C8504) * C1453) *
               C51302 +
           (C14943 * C1457 - (C14234 * C51296 + C14235 * C1456) +
            C14946 * C51297 - (C14027 + C14026) * C1458 -
            (C14029 + C14028) * C1453) *
               C51303 +
           ((C14965 + C14966) * C1457 - (C14238 * C51296 + C14239 * C1456) +
            (C14967 + C14968) * C51297 -
            (C8258 * C3845 + C51158 * C3848 + C8257 * C2847 + C51264 * C2851) *
                C1458 -
            (C8258 * C3849 + C51158 * C3851 + C8257 * C2852 + C51264 * C2856) *
                C1453) *
               C44702) *
              C50972 * C50996) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1456 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51296 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1457 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51297 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C1458 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C1453) *
               C51302 +
           ((C14256 + C14257) * C1456 + (C14258 + C14259) * C51296 -
            (C14955 + C14956) * C1457 - (C14957 + C14958) * C51297 +
            (C16171 + C16172) * C1458 + (C16173 + C16174) * C1453) *
               C51303 +
           (C47624 * C1456 + C47625 * C51296 - C48507 * C1457 -
            C48508 * C51297 + (C49020 + C49021) * C1458 +
            (C49022 + C49023) * C1453) *
               C44702) *
              C50972 * C50991 * C51252 +
          (((C14956 + C14955) * C1457 -
            ((C14259 + C14258) * C51296 + (C14257 + C14256) * C1456) +
            (C14958 + C14957) * C51297 - (C16172 + C16171) * C1458 -
            (C16174 + C16173) * C1453) *
               C51302 +
           ((C15499 + C15500) * C1457 -
            ((C14268 + C14269) * C51296 + (C14270 + C14271) * C1456) +
            (C15501 + C15502) * C51297 - (C49021 + C49020) * C1458 -
            (C49023 + C49022) * C1453) *
               C51303 +
           ((C48520 + C48521) * C1457 -
            ((C16704 + C16703) * C51296 + (C16702 + C16701) * C1456) +
            (C48522 + C48523) * C51297 -
            (C8258 * C21672 + C51158 * C21674 + C8257 * C4738 +
             C51264 * C4746) *
                C1458 -
            (C8258 * C21673 + C51158 * C21675 + C8257 * C4744 +
             C51264 * C4750) *
                C1453) *
               C44702) *
              C50972 * C50991 * C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
               C1219 +
           (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
               C1214 -
           (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
               C1220 -
           (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
               C1215 +
           (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
               C1221 +
           (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
               C1216 -
           (C8258 * C2652 + C51158 * C2655 + C8257 * C1223 + C51264 * C1227) *
               C1222 -
           (C8258 * C2656 + C51158 * C2661 + C8257 * C1228 + C51264 * C1235) *
               C1217) *
              C51302 +
          ((C14256 + C14257) * C1219 + (C14258 + C14259) * C1214 -
           (C14955 + C14956) * C1220 - (C14957 + C14958) * C1215 +
           (C16171 + C16172) * C1221 + (C16173 + C16174) * C1216 -
           (C8258 * C4338 + C51158 * C4340 + C8257 * C3416 + C51264 * C3419) *
               C1222 -
           (C8258 * C4341 + C51158 * C4344 + C8257 * C3420 + C51264 * C3425) *
               C1217) *
              C51303 +
          (C47624 * C1219 + C47625 * C1214 - (C15500 + C15499) * C1220 -
           (C15502 + C15501) * C1215 +
           (C8257 * C2846 + C51264 * C2849 + C8258 * C3844 + C51158 * C3846) *
               C1221 +
           (C8257 * C2850 + C51264 * C2855 + C8258 * C3847 + C51158 * C3850) *
               C1216 -
           (C8258 * C21076 + C51158 * C21077 + C8257 * C3844 + C51264 * C3846) *
               C1222 -
           (C8258 * C21078 + C51158 * C21079 + C8257 * C3847 + C51264 * C3850) *
               C1217) *
              C44702) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1122 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1117 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1123 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51302 +
           ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
            (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
               C51303 +
           (C47624 * C1122 + C47625 * C1117 - (C15500 + C15499) * C1123 -
            (C15502 + C15501) * C51061) *
               C44702) *
              C50972 * C1119 +
          (((C8499 + C8498) * C1123 -
            ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
            (C8501 + C8500) * C51061) *
               C51302 +
           C15968 * C51303 +
           ((C14965 + C14966) * C1123 - (C14238 * C1117 + C14239 * C1122) +
            (C14967 + C14968) * C51061) *
               C44702) *
              C50972 * C1120 +
          (C9410 * C51302 +
           (C14668 * C1122 + C14669 * C1117 - (C9255 + C9254) * C1123 -
            (C9257 + C9256) * C51061) *
               C51303 +
           ((C8704 + C8705) * C1122 + (C8706 + C8707) * C1117 -
            (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 + C51264 * C1345) *
                C1123 -
            (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 + C51264 * C1351) *
                C51061) *
               C44702) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1122 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1117 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1123 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51302 +
           ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
            (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
               C51303 +
           C48525 * C44702) *
              C50972 * C50991 * C493 +
          (((C14956 + C14955) * C1123 -
            ((C14259 + C14258) * C1117 + (C14257 + C14256) * C1122) +
            (C14958 + C14957) * C51061) *
               C51302 +
           ((C15499 + C15500) * C1123 -
            ((C14268 + C14269) * C1117 + (C14270 + C14271) * C1122) +
            (C15501 + C15502) * C51061) *
               C51303 +
           ((C48520 + C48521) * C1123 -
            ((C16704 + C16703) * C1117 + (C16702 + C16701) * C1122) +
            (C48522 + C48523) * C51061) *
               C44702) *
              C50972 * C50991 * C494 +
          (C48525 * C51302 +
           ((C16701 + C16702) * C1122 + (C16703 + C16704) * C1117 -
            (C48521 + C48520) * C1123 - (C48523 + C48522) * C51061) *
               C51303 +
           ((C8257 * C5661 + C51264 * C5664 + C8258 * C6675 + C51158 * C6677) *
                C1122 +
            (C8257 * C5665 + C51264 * C5670 + C8258 * C6678 + C51158 * C6681) *
                C1117 -
            (C8258 * C23362 + C51158 * C23363 + C8257 * C6675 +
             C51264 * C6677) *
                C1123 -
            (C8258 * C23364 + C51158 * C23365 + C8257 * C6678 +
             C51264 * C6681) *
                C51061) *
               C44702) *
              C50972 * C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C1122 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C1117 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C1123 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51302 +
            ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
             (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
                C51303 +
            C48525 * C44702) *
               C50972 * C51243 +
           (((C8499 + C8498) * C1123 -
             ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
             (C8501 + C8500) * C51061) *
                C51302 +
            C15968 * C51303 +
            ((C14965 + C14966) * C1123 - (C14238 * C1117 + C14239 * C1122) +
             (C14967 + C14968) * C51061) *
                C44702) *
               C50972 * C50996) *
              C51252 +
          ((((C14956 + C14955) * C1123 -
             ((C14259 + C14258) * C1117 + (C14257 + C14256) * C1122) +
             (C14958 + C14957) * C51061) *
                C51302 +
            ((C15499 + C15500) * C1123 -
             ((C14268 + C14269) * C1117 + (C14270 + C14271) * C1122) +
             (C15501 + C15502) * C51061) *
                C51303 +
            ((C48520 + C48521) * C1123 -
             ((C16704 + C16703) * C1117 + (C16702 + C16701) * C1122) +
             (C48522 + C48523) * C51061) *
                C44702) *
               C50972 * C51243 +
           (C15967 * C51302 +
            (C14236 * C1122 + C14237 * C1117 - (C14966 + C14965) * C1123 -
             (C14968 + C14967) * C51061) *
                C51303 +
            ((C14272 + C14273) * C1122 + (C14274 + C14275) * C1117 -
             (C8258 * C4736 + C51158 * C4742 + C8257 * C4737 + C51264 * C4743) *
                 C1123 -
             (C8258 * C4740 + C51158 * C4748 + C8257 * C4741 + C51264 * C4749) *
                 C51061) *
                C44702) *
               C50972 * C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C1122 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C1117 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C1123 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51302 +
           ((C14256 + C14257) * C1122 + (C14258 + C14259) * C1117 -
            (C14955 + C14956) * C1123 - (C14957 + C14958) * C51061) *
               C51303 +
           (C47624 * C1122 + C47625 * C1117 - (C15500 + C15499) * C1123 -
            (C15502 + C15501) * C51061) *
               C44702) *
              C50972 * C1119 +
          (((C8499 + C8498) * C1123 -
            ((C8295 + C8294) * C1117 + (C8293 + C8292) * C1122) +
            (C8501 + C8500) * C51061) *
               C51302 +
           C15968 * C51303 +
           ((C14965 + C14966) * C1123 - (C14238 * C1117 + C14239 * C1122) +
            (C14967 + C14968) * C51061) *
               C44702) *
              C50972 * C1120 +
          (C9410 * C51302 +
           (C14668 * C1122 + C14669 * C1117 - (C9255 + C9254) * C1123 -
            (C9257 + C9256) * C51061) *
               C51303 +
           ((C8704 + C8705) * C1122 + (C8706 + C8707) * C1117 -
            (C8258 * C2848 + C51158 * C2854 + C8257 * C1339 + C51264 * C1345) *
                C1123 -
            (C8258 * C2853 + C51158 * C2857 + C8257 * C1346 + C51264 * C1351) *
                C51061) *
               C44702) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
               C1219 +
           (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
               C1214 -
           (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
               C1220 -
           (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
               C1215 +
           (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
               C1221 +
           (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
               C1216 -
           (C8258 * C2652 + C51158 * C2655 + C8257 * C1223 + C51264 * C1227) *
               C1222 -
           (C8258 * C2656 + C51158 * C2661 + C8257 * C1228 + C51264 * C1235) *
               C1217) *
              C51302 +
          ((C14256 + C14257) * C1219 + (C14258 + C14259) * C1214 -
           (C14955 + C14956) * C1220 - (C14957 + C14958) * C1215 +
           (C16171 + C16172) * C1221 + (C16173 + C16174) * C1216 -
           (C8258 * C4338 + C51158 * C4340 + C8257 * C3416 + C51264 * C3419) *
               C1222 -
           (C8258 * C4341 + C51158 * C4344 + C8257 * C3420 + C51264 * C3425) *
               C1217) *
              C51303 +
          (C47624 * C1219 + C47625 * C1214 - (C15500 + C15499) * C1220 -
           (C15502 + C15501) * C1215 +
           (C8257 * C2846 + C51264 * C2849 + C8258 * C3844 + C51158 * C3846) *
               C1221 +
           (C8257 * C2850 + C51264 * C2855 + C8258 * C3847 + C51158 * C3850) *
               C1216 -
           (C8258 * C21076 + C51158 * C21077 + C8257 * C3844 + C51264 * C3846) *
               C1222 -
           (C8258 * C21078 + C51158 * C21079 + C8257 * C3847 + C51264 * C3850) *
               C1217) *
              C44702) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C687 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51251 -
             (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                 C688 -
             (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                 C51061) *
                C51302 +
            ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
             (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
                C51303 +
            (C47624 * C687 + C47625 * C51251 - C48507 * C688 -
             C48508 * C51061) *
                C44702) *
               C50972 * C51243 +
           (((C8499 + C8498) * C688 -
             ((C8295 + C8294) * C51251 + (C8293 + C8292) * C687) +
             (C8501 + C8500) * C51061) *
                C51302 +
            C14972 * C51303 +
            ((C14965 + C14966) * C688 - (C14238 * C51251 + C14239 * C687) +
             (C14967 + C14968) * C51061) *
                C44702) *
               C50972 * C50996) *
              C1831 +
          ((((C14956 + C14955) * C688 -
             ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
             (C14958 + C14957) * C51061) *
                C51302 +
            ((C15499 + C15500) * C688 -
             ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
             (C15501 + C15502) * C51061) *
                C51303 +
            ((C48520 + C48521) * C688 - (C49414 * C51251 + C49415 * C687) +
             (C48522 + C48523) * C51061) *
                C44702) *
               C50972 * C51243 +
           (C14971 * C51302 +
            (C14236 * C687 + C14237 * C51251 - (C14966 + C14965) * C688 -
             (C14968 + C14967) * C51061) *
                C51303 +
            ((C14272 + C14273) * C687 + (C14274 + C14275) * C51251 -
             (C8258 * C4736 + C51158 * C4742 + C8257 * C4737 + C51264 * C4743) *
                 C688 -
             (C8258 * C4740 + C51158 * C4748 + C8257 * C4741 + C51264 * C4749) *
                 C51061) *
                C44702) *
               C50972 * C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C687 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51251 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C688 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C51061) *
               C51302 +
           ((C14256 + C14257) * C687 + (C14258 + C14259) * C51251 -
            (C14955 + C14956) * C688 - (C14957 + C14958) * C51061) *
               C51303 +
           C49923 * C44702) *
              C50972 * C50991 * C51298 +
          (((C14956 + C14955) * C688 -
            ((C14259 + C14258) * C51251 + (C14257 + C14256) * C687) +
            (C14958 + C14957) * C51061) *
               C51302 +
           ((C15499 + C15500) * C688 -
            ((C14268 + C14269) * C51251 + (C14270 + C14271) * C687) +
            (C15501 + C15502) * C51061) *
               C51303 +
           ((C48520 + C48521) * C688 - (C49414 * C51251 + C49415 * C687) +
            (C48522 + C48523) * C51061) *
               C44702) *
              C50972 * C50991 * C51299 +
          (C49923 * C51302 +
           ((C16701 + C16702) * C687 + (C16703 + C16704) * C51251 -
            (C48521 + C48520) * C688 - (C48523 + C48522) * C51061) *
               C51303 +
           ((C49426 + C49427) * C687 + (C49428 + C49429) * C51251 -
            (C8258 * C23362 + C51158 * C23363 + C8257 * C6675 +
             C51264 * C6677) *
                C688 -
            (C8258 * C23364 + C51158 * C23365 + C8257 * C6678 +
             C51264 * C6681) *
                C51061) *
               C44702) *
              C50972 * C50991 * C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C298 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C293 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C299 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C294 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C300 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C295) *
               C51302 +
           ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
            (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
            (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
               C51303 +
           (C47624 * C298 + C47625 * C293 - C48507 * C299 - C48508 * C294 +
            (C49020 + C49021) * C300 + (C49022 + C49023) * C295) *
               C44702) *
              C50972 * C50991 * C1831 +
          (((C14956 + C14955) * C299 -
            ((C14259 + C14258) * C293 + (C14257 + C14256) * C298) +
            (C14958 + C14957) * C294 - (C16172 + C16171) * C300 -
            (C16174 + C16173) * C295) *
               C51302 +
           ((C15499 + C15500) * C299 -
            ((C14268 + C14269) * C293 + (C14270 + C14271) * C298) +
            (C15501 + C15502) * C294 - (C49021 + C49020) * C300 -
            (C49023 + C49022) * C295) *
               C51303 +
           ((C48520 + C48521) * C299 -
            ((C16704 + C16703) * C293 + (C16702 + C16701) * C298) +
            (C48522 + C48523) * C294 -
            (C8258 * C21672 + C51158 * C21674 + C8257 * C4738 +
             C51264 * C4746) *
                C300 -
            (C8258 * C21673 + C51158 * C21675 + C8257 * C4744 +
             C51264 * C4750) *
                C295) *
               C44702) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51302 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51303 +
            C47628 * C44702) *
               C50972 * C1119 -
           (C14279 * C44702 + C14277 * C51303 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51302) *
               C50972 * C1120 +
           (C8316 * C51302 + C14672 * C51303 +
            ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C44702) *
               C50972 * C1121) *
              C1831 +
          ((C14276 * C51302 + C14278 * C51303 +
            ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C44702) *
               C50972 * C1120 -
           (((C16704 + C16703) * C51009 + (C16702 + C16701) * C118) * C44702 +
            ((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51303 +
            ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51302) *
               C50972 * C1119 -
           (((C8258 * C6233 + C51158 * C6234 + C8257 * C2007 + C51264 * C2014) *
                 C51009 +
             (C8258 * C6231 + C51158 * C6232 + C8257 * C2002 + C51264 * C2008) *
                 C118) *
                C44702 +
            ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51303 +
            C9038 * C51302) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C118 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C51009) *
               C51302 +
           ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51303 +
           C47628 * C44702) *
              C50972 * C50991 * C1997 -
          (C49430 * C44702 +
           ((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51303 +
           ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51302) *
              C50972 * C50991 * C1998 +
          (C47628 * C51302 +
           ((C16701 + C16702) * C118 + (C16703 + C16704) * C51009) * C51303 +
           ((C49426 + C49427) * C118 + (C49428 + C49429) * C51009) * C44702) *
              C50972 * C50991 * C1999 -
          (((C8258 * C24288 + C51158 * C24290 + C8257 * C7648 +
             C51264 * C7651) *
                C51009 +
            (C8258 * C24287 + C51158 * C24289 + C8257 * C7645 +
             C51264 * C7649) *
                C118) *
               C44702 +
           ((C49429 + C49428) * C51009 + (C49427 + C49426) * C118) * C51303 +
           C49430 * C51302) *
              C50972 * C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51302 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51303 +
            C47628 * C44702) *
               C50972 * C51243 -
           (C14279 * C44702 + C14277 * C51303 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51302) *
               C50972 * C50996) *
              C51298 +
          ((C14276 * C51302 + C14278 * C51303 +
            ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C44702) *
               C50972 * C50996 -
           (C49430 * C44702 +
            ((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51303 +
            ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51302) *
               C50972 * C51243) *
              C51299 +
          ((C47628 * C51302 +
            ((C16701 + C16702) * C118 + (C16703 + C16704) * C51009) * C51303 +
            ((C49426 + C49427) * C118 + (C49428 + C49429) * C51009) * C44702) *
               C50972 * C51243 -
           (((C8258 * C6680 + C51158 * C6682 + C8257 * C5667 + C51264 * C5671) *
                 C51009 +
             (C8258 * C6676 + C51158 * C6679 + C8257 * C5662 + C51264 * C5666) *
                 C118) *
                C44702 +
            ((C14275 + C14274) * C51009 + (C14273 + C14272) * C118) * C51303 +
            C14279 * C51302) *
               C50972 * C50996) *
              C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                 C118 +
             (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                 C51009) *
                C51302 +
            ((C14256 + C14257) * C118 + (C14258 + C14259) * C51009) * C51303 +
            C47628 * C44702) *
               C50972 * C1119 -
           (C14279 * C44702 + C14277 * C51303 +
            ((C8295 + C8294) * C51009 + (C8293 + C8292) * C118) * C51302) *
               C50972 * C1120 +
           (C8316 * C51302 + C14672 * C51303 +
            ((C8704 + C8705) * C118 + (C8706 + C8707) * C51009) * C44702) *
               C50972 * C1121) *
              C1831 +
          ((C14276 * C51302 + C14278 * C51303 +
            ((C14272 + C14273) * C118 + (C14274 + C14275) * C51009) * C44702) *
               C50972 * C1120 -
           (((C16704 + C16703) * C51009 + (C16702 + C16701) * C118) * C44702 +
            ((C14268 + C14269) * C51009 + (C14270 + C14271) * C118) * C51303 +
            ((C14259 + C14258) * C51009 + (C14257 + C14256) * C118) * C51302) *
               C50972 * C1119 -
           (((C8258 * C6233 + C51158 * C6234 + C8257 * C2007 + C51264 * C2014) *
                 C51009 +
             (C8258 * C6231 + C51158 * C6232 + C8257 * C2002 + C51264 * C2008) *
                 C118) *
                C44702 +
            ((C8707 + C8706) * C51009 + (C8705 + C8704) * C118) * C51303 +
            C9038 * C51302) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8257 * C119 + C51264 * C126 + C8258 * C301 + C51158 * C311) *
                C298 +
            (C8257 * C127 + C51264 * C140 + C8258 * C312 + C51158 * C331) *
                C293 -
            (C8258 * C302 + C51158 * C313 + C8257 * C301 + C51264 * C311) *
                C299 -
            (C8258 * C314 + C51158 * C332 + C8257 * C312 + C51264 * C331) *
                C294 +
            (C8257 * C302 + C51264 * C313 + C8258 * C1223 + C51158 * C1227) *
                C300 +
            (C8257 * C314 + C51264 * C332 + C8258 * C1228 + C51158 * C1235) *
                C295) *
               C51302 +
           ((C14256 + C14257) * C298 + (C14258 + C14259) * C293 -
            (C14955 + C14956) * C299 - (C14957 + C14958) * C294 +
            (C16171 + C16172) * C300 + (C16173 + C16174) * C295) *
               C51303 +
           (C47624 * C298 + C47625 * C293 - C48507 * C299 - C48508 * C294 +
            (C49020 + C49021) * C300 + (C49022 + C49023) * C295) *
               C44702) *
              C50972 * C50991 * C1831 +
          (((C14956 + C14955) * C299 -
            ((C14259 + C14258) * C293 + (C14257 + C14256) * C298) +
            (C14958 + C14957) * C294 - (C16172 + C16171) * C300 -
            (C16174 + C16173) * C295) *
               C51302 +
           ((C15499 + C15500) * C299 -
            ((C14268 + C14269) * C293 + (C14270 + C14271) * C298) +
            (C15501 + C15502) * C294 - (C49021 + C49020) * C300 -
            (C49023 + C49022) * C295) *
               C51303 +
           ((C48520 + C48521) * C299 -
            ((C16704 + C16703) * C293 + (C16702 + C16701) * C298) +
            (C48522 + C48523) * C294 -
            (C8258 * C21672 + C51158 * C21674 + C8257 * C4738 +
             C51264 * C4746) *
                C300 -
            (C8258 * C21673 + C51158 * C21675 + C8257 * C4744 +
             C51264 * C4750) *
                C295) *
               C44702) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C687 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51251 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C688 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C687 +
            (C36972 + C36973 + C36974) * C51251 -
            (C2451 * C3416 + C2446 * C3419 + C2450 * C1717 + C2445 * C1721 +
             C2449 * C969 + C2444 * C974) *
                C688 -
            (C2451 * C3420 + C2446 * C3425 + C2450 * C1722 + C2445 * C1729 +
             C2449 * C975 + C2444 * C984) *
                C51061) *
               C51186) *
              C50972 * C51294 +
          (((C2691 + C2690 + C2689) * C688 -
            ((C2494 + C2493 + C2492) * C51251 +
             (C2491 + C2490 + C2489) * C687) +
            (C2694 + C2693 + C2692) * C51061) *
               C34007 +
           ((C3441 + C3442 + C3443) * C688 -
            ((C2888 + C2887 + C2886) * C51251 +
             (C2885 + C2884 + C2883) * C687) +
            (C3444 + C3445 + C3446) * C51061) *
               C51186) *
              C50972 * C51295 +
          (((C2500 + C2499 + C2498) * C687 + (C2497 + C2496 + C2495) * C51251 -
            (C3055 + C3054 + C3053) * C688 - (C3058 + C3057 + C3056) * C51061) *
               C34007 +
           ((C3217 + C3218 + C3219) * C687 + (C3220 + C3221 + C3222) * C51251 -
            (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
             C2449 * C971 + C2444 * C978) *
                C688 -
            (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
             C2449 * C979 + C2444 * C986) *
                C51061) *
               C51186) *
              C50972 * C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6236 + C6237 - C6268 - C6269) * C51186) *
               C17450 +
           ((C694 + C695 - C696 - C697) * C34007 + C6272 * C51186) * C17451 +
           C34456 * C17452) *
              C51294 +
          (((C696 - (C695 + C694) + C697) * C34007 + C6274 * C51186) * C17450 +
           ((C700 - (C699 + C698) + C701) * C34007 + C11926 * C51186) * C17451 +
           ((C704 - (C703 + C702) + C705) * C34007 +
            (C1018 - (C1004 + C1005) + C1019) * C51186) *
               C17452) *
              C51295 +
          (C34456 * C17450 +
           (C721 * C34007 + (C1005 + C1004 - C1018 - C1019) * C51186) * C17451 +
           ((C709 + C708 - C718 - C719) * C34007 +
            (C834 * C687 + C835 * C51251 -
             (C117 * C973 + C51106 * C982) * C688 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51186) *
               C17452) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C687 +
            (C117 * C127 + C51106 * C140) * C51251 -
            (C117 * C301 + C51106 * C311) * C688 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C39356 +
           (C6236 + C6237 - C6268 - C6269) * C39357 + C8154 * C39358 +
           (C8151 + C8150 - C8149 - C8152) * C39359) *
              C50972 * C51294 +
          ((C696 - (C695 + C694) + C697) * C39356 + C6274 * C39357 +
           C6275 * C39358 + (C6276 - (C6254 + C6255) + C6277) * C39359) *
              C50972 * C51295 +
          (C720 * C39356 + C11577 * C39357 +
           (C5883 + C5882 - C5888 - C5889) * C39358 +
           (C5709 * C687 + C5710 * C51251 -
            (C117 * C6231 + C51106 * C6232) * C688 -
            (C117 * C6233 + C51106 * C6234) * C51061) *
               C39359) *
              C50972 * C686) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C687 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51251 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C688 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C34007 +
            ((C36969 + C36970 + C36971) * C687 +
             (C36972 + C36973 + C36974) * C51251 -
             (C37479 + C37480 + C37481) * C688 -
             (C37482 + C37483 + C37484) * C51061) *
                C51186) *
               C50972 * C296 +
           (((C2691 + C2690 + C2689) * C688 -
             ((C2494 + C2493 + C2492) * C51251 +
              (C2491 + C2490 + C2489) * C687) +
             (C2694 + C2693 + C2692) * C51061) *
                C34007 +
            ((C3441 + C3442 + C3443) * C688 -
             ((C2888 + C2887 + C2886) * C51251 +
              (C2885 + C2884 + C2883) * C687) +
             (C3444 + C3445 + C3446) * C51061) *
                C51186) *
               C50972 * C50996) *
              C51252 +
          ((((C37481 + C37480 + C37479) * C688 -
             ((C36974 + C36973 + C36972) * C51251 +
              (C36971 + C36970 + C36969) * C687) +
             (C37484 + C37483 + C37482) * C51061) *
                C34007 +
            ((C2449 * C1337 + C2444 * C1341 + C2450 * C2846 + C2445 * C2849 +
              C2451 * C3844 + C2446 * C3846) *
                 C688 -
             ((C36975 + C36976 + C36977) * C51251 +
              (C36978 + C36979 + C36980) * C687) +
             (C2449 * C1342 + C2444 * C1349 + C2450 * C2850 + C2445 * C2855 +
              C2451 * C3847 + C2446 * C3850) *
                 C51061) *
                C51186) *
               C50972 * C296 +
           (((C2883 + C2884 + C2885) * C687 + (C2886 + C2887 + C2888) * C51251 -
             (C3443 + C3442 + C3441) * C688 -
             (C3446 + C3445 + C3444) * C51061) *
                C34007 +
            ((C2889 + C2890 + C2891) * C687 + (C2892 + C2893 + C2894) * C51251 -
             (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
              C2449 * C1338 + C2444 * C1343) *
                 C688 -
             (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
              C2449 * C1344 + C2444 * C1350) *
                 C51061) *
                C51186) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C34007 +
             (C6236 + C6237 - C6268 - C6269) * C51186) *
                C17450 +
            ((C694 + C695 - C696 - C697) * C34007 + C6272 * C51186) * C17451 +
            C34456 * C17452) *
               C296 +
           (((C696 - (C695 + C694) + C697) * C34007 + C6274 * C51186) * C17450 +
            ((C700 - (C699 + C698) + C701) * C34007 + C11926 * C51186) *
                C17451 +
            ((C704 - (C703 + C702) + C705) * C34007 +
             (C1018 - (C1004 + C1005) + C1019) * C51186) *
                C17452) *
               C50996) *
              C51252 +
          ((((C6268 - (C6237 + C6236) + C6269) * C34007 +
             (C6270 - (C6243 + C6242) + C6271) * C51186) *
                C17450 +
            (C6274 * C34007 + C6275 * C51186) * C17451 +
            (C11926 * C34007 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
                C17452) *
               C296 +
           ((C6272 * C34007 + C6273 * C51186) * C17450 +
            (C11577 * C34007 + (C5883 + C5882 - C5888 - C5889) * C51186) *
                C17451 +
            ((C1005 + C1004 - C1018 - C1019) * C34007 +
             (C571 * C687 + C572 * C51251 -
              (C117 * C1340 + C51106 * C1347) * C688 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C39356 +
            (C6236 + C6237 - C6268 - C6269) * C39357 + C8154 * C39358 +
            (C8151 + C8150 - C8149 - C8152) * C39359) *
               C50972 * C296 +
           ((C696 - (C695 + C694) + C697) * C39356 + C6274 * C39357 +
            C6275 * C39358 + (C6276 - (C6254 + C6255) + C6277) * C39359) *
               C50972 * C50996) *
              C51252 +
          (((C6268 - (C6237 + C6236) + C6269) * C39356 +
            (C6270 - (C6243 + C6242) + C6271) * C39357 +
            (C8149 - (C8150 + C8151) + C8152) * C39358 +
            ((C117 * C6675 + C51106 * C6677) * C688 -
             (C7659 * C51251 + C7658 * C687) +
             (C117 * C6678 + C51106 * C6681) * C51061) *
                C39359) *
               C50972 * C296 +
           (C6272 * C39356 + C6273 * C39357 +
            (C6255 + C6254 - C6276 - C6277) * C39358 +
            (C5713 * C687 + C5714 * C51251 -
             (C117 * C6676 + C51106 * C6679) * C688 -
             (C117 * C6680 + C51106 * C6682) * C51061) *
                C39359) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51106 * C126) * C118 +
                 (C117 * C127 + C51106 * C140) * C51009) *
                    C34007 +
                (C5715 + C5716) * C51186) *
                   C17450 +
               ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
               C34014 * C17452) *
                  C112 -
              (C34015 * C17452 +
               (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
               (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
                  C113 +
              (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
               ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
                  C114 -
              ((((C117 * C824 + C51106 * C826) * C51009 +
                 (C117 * C823 + C51106 * C825) * C118) *
                    C51186 +
                (C187 + C186) * C34007) *
                   C17452 +
               ((C839 + C838) * C51186 + C190 * C34007) * C17451 +
               C34015 * C17450) *
                  C115) *
             C51025 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51106 * C126) * C298 +
                 (C117 * C127 + C51106 * C140) * C293 -
                 (C117 * C301 + C51106 * C311) * C299 -
                 (C117 * C312 + C51106 * C331) * C294 +
                 (C117 * C302 + C51106 * C313) * C300 +
                 (C117 * C314 + C51106 * C332) * C295) *
                    C34007 +
                (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
                   C17450 +
               ((C342 + C343 - C384 - C385 + C386 + C387) * C34007 +
                (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
                   C17451 +
               ((C352 + C353 - C388 - C389 + C390 + C391) * C34007 +
                (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) *
                    C51186) *
                   C17452) *
                  C296 +
              (((C384 - (C343 + C342) + C385 - C386 - C387) * C34007 +
                (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51186) *
                   C17450 +
               ((C388 - (C353 + C352) + C389 - C390 - C391) * C34007 +
                (C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) *
                    C51186) *
                   C17451 +
               ((C392 - (C363 + C362) + C393 - C394 - C395) * C34007 +
                (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
                 (C117 * C1720 + C51106 * C1727) * C300 -
                 (C117 * C1728 + C51106 * C1732) * C295) *
                    C51186) *
                   C17452) *
                  C50996) *
             C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C296 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C50996) *
              C493 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C50996 -
           ((C5684 * C51186 + C833 * C34007) * C17452 +
            (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C296) *
              C494 +
          (((C5727 * C34007 + (C5724 + C5723) * C51186) * C17450 +
            (C5683 * C34007 + C5728 * C51186) * C17451 +
            (C6037 * C34007 + (C5721 + C5722) * C51186) * C17452) *
               C296 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C51186 +
             (C584 + C583) * C34007) *
                C17452 +
            ((C5722 + C5721) * C51186 + C5684 * C34007) * C17451 +
            (C5729 * C51186 + C5685 * C34007) * C17450) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C34007 +
           ((C2449 * C500 + C2444 * C515 + C2450 * C969 + C2445 * C974 +
             C2451 * C1717 + C2446 * C1721) *
                C118 +
            (C2449 * C514 + C2444 * C530 + C2450 * C975 + C2445 * C984 +
             C2451 * C1722 + C2446 * C1729) *
                C51009) *
               C51186) *
              C50972 * C112 -
          (((C2888 + C2887 + C2886) * C51009 + (C2885 + C2884 + C2883) * C118) *
               C51186 +
           ((C2494 + C2493 + C2492) * C51009 + (C2491 + C2490 + C2489) * C118) *
               C34007) *
              C50972 * C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51009) *
               C34007 +
           ((C3217 + C3218 + C3219) * C118 + (C3220 + C3221 + C3222) * C51009) *
               C51186) *
              C50972 * C114 -
          (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
             C2449 * C511 + C2444 * C528) *
                C51009 +
            (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
             C2449 * C498 + C2444 * C510) *
                C118) *
               C51186 +
           ((C2506 + C2505 + C2504) * C51009 + (C2503 + C2502 + C2501) * C118) *
               C34007) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C34007 +
           ((C2449 * C500 + C2444 * C515 + C2450 * C969 + C2445 * C974 +
             C2451 * C1717 + C2446 * C1721) *
                C298 +
            (C2449 * C514 + C2444 * C530 + C2450 * C975 + C2445 * C984 +
             C2451 * C1722 + C2446 * C1729) *
                C293 -
            (C2451 * C3416 + C2446 * C3419 + C2450 * C1717 + C2445 * C1721 +
             C2449 * C969 + C2444 * C974) *
                C299 -
            (C2451 * C3420 + C2446 * C3425 + C2450 * C1722 + C2445 * C1729 +
             C2449 * C975 + C2444 * C984) *
                C294 +
            (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
             C2451 * C4338 + C2446 * C4340) *
                C300 +
            (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
             C2451 * C4341 + C2446 * C4344) *
                C295) *
               C51186) *
              C50972 * C296 +
          (((C2691 + C2690 + C2689) * C299 -
            ((C2494 + C2493 + C2492) * C293 + (C2491 + C2490 + C2489) * C298) +
            (C2694 + C2693 + C2692) * C294 - (C2697 + C2696 + C2695) * C300 -
            (C2700 + C2699 + C2698) * C295) *
               C34007 +
           ((C3441 + C3442 + C3443) * C299 -
            ((C2888 + C2887 + C2886) * C293 + (C2885 + C2884 + C2883) * C298) +
            (C3444 + C3445 + C3446) * C294 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C300 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C295) *
               C51186) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C296 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C50996) *
              C493 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C50996 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C296) *
              C494 +
          ((((C36980 + C36979 + C36978) * C118 +
             (C36977 + C36976 + C36975) * C51009) *
                C34007 +
            ((C2449 * C2004 + C2444 * C2012 + C2450 * C4739 + C2445 * C4747 +
              C2451 * C4738 + C2446 * C4746) *
                 C118 +
             (C2449 * C2011 + C2444 * C2016 + C2450 * C4745 + C2445 * C4751 +
              C2451 * C4744 + C2446 * C4750) *
                 C51009) *
                C51186) *
               C50972 * C296 -
           (((C2451 * C4740 + C2446 * C4748 + C2450 * C4741 + C2445 * C4749 +
              C2449 * C2009 + C2444 * C2015) *
                 C51009 +
             (C2451 * C4736 + C2446 * C4742 + C2450 * C4737 + C2445 * C4743 +
              C2449 * C2003 + C2444 * C2010) *
                 C118) *
                C51186 +
            ((C2894 + C2893 + C2892) * C51009 +
             (C2891 + C2890 + C2889) * C118) *
                C34007) *
               C50972 * C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C118 +
            (C117 * C127 + C51106 * C140) * C51009) *
               C39356 +
           (C5715 + C5716) * C39357 + C5727 * C39358 +
           (C5724 + C5723) * C39359) *
              C50972 * C112 -
          (C5729 * C39359 + C5685 * C39358 + C5686 * C39357 +
           (C179 + C178) * C39356) *
              C50972 * C113 +
          (C188 * C39356 + C6036 * C39357 + C6037 * C39358 +
           (C5721 + C5722) * C39359) *
              C50972 * C114 -
          (((C117 * C2005 + C51106 * C2013) * C51009 +
            (C117 * C2001 + C51106 * C2006) * C118) *
               C39359 +
           (C584 + C583) * C39358 + C832 * C39357 + C191 * C39356) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C39356 +
           (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C39357 +
           (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C39358 +
           (C5712 * C298 + C5711 * C293 - C6705 * C299 - C6706 * C294 +
            (C117 * C4738 + C51106 * C4746) * C300 +
            (C117 * C4744 + C51106 * C4750) * C295) *
               C39359) *
              C50972 * C296 +
          ((C384 - (C343 + C342) + C385 - C386 - C387) * C39356 +
           (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C39357 +
           (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C39358 +
           (C6266 * C299 - (C5708 * C293 + C5707 * C298) + C6267 * C294 -
            (C117 * C4736 + C51106 * C4742) * C300 -
            (C117 * C4740 + C51106 * C4748) * C295) *
               C39359) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C39356 +
            (C5715 + C5716) * C39357 + C5727 * C39358 + C39557 * C39359) *
               C50972 * C296 -
           (C5729 * C39359 + C5685 * C39358 + C5686 * C39357 +
            (C179 + C178) * C39356) *
               C50972 * C50996) *
              C493 +
          ((C5682 * C39356 + C5683 * C39357 + C5728 * C39358 +
            (C5725 + C5726) * C39359) *
               C50972 * C50996 -
           ((C7661 + C7660) * C39359 + C7653 * C39358 +
            (C5718 + C5717) * C39357 + (C5716 + C5715) * C39356) *
               C50972 * C296) *
              C494 +
          ((C5727 * C39356 + C39557 * C39357 + (C7660 + C7661) * C39358 +
            ((C117 * C7645 + C51106 * C7649) * C118 +
             (C117 * C7648 + C51106 * C7651) * C51009) *
                C39359) *
               C50972 * C296 -
           (((C117 * C7646 + C51106 * C7650) * C51009 +
             (C117 * C7644 + C51106 * C7647) * C118) *
                C39359 +
            (C5726 + C5725) * C39358 + C5729 * C39357 + C5685 * C39356) *
               C50972 * C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C51294 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C51295 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C34007 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51186) *
               C50972 * C686) *
              C51252 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C51295 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C51294 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51186 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C34007) *
               C50972 * C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C51294 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C51295 +
           (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
            ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
               C686) *
              C51252 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C51295 -
           (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C51294 -
           ((((C117 * C524 + C51106 * C535) * C51009 +
              (C117 * C505 + C51106 * C525) * C118) *
                 C51186 +
             (C839 + C838) * C34007) *
                C17452 +
            ((C584 + C583) * C51186 + C832 * C34007) * C17451 +
            C34605 * C17450) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C39356 +
            (C5715 + C5716) * C39357 + C5727 * C39358 + C39557 * C39359) *
               C50972 * C51294 -
           (C5729 * C39359 + C5685 * C39358 + C5686 * C39357 +
            (C179 + C178) * C39356) *
               C50972 * C51295 +
           (C188 * C39356 + C6036 * C39357 + C6037 * C39358 +
            (C5721 + C5722) * C39359) *
               C50972 * C686) *
              C51252 +
          ((C5682 * C39356 + C5683 * C39357 + C5728 * C39358 +
            (C5725 + C5726) * C39359) *
               C50972 * C51295 -
           ((C7661 + C7660) * C39359 + C7653 * C39358 +
            (C5718 + C5717) * C39357 + (C5716 + C5715) * C39356) *
               C50972 * C51294 -
           (((C117 * C5668 + C51106 * C5672) * C51009 +
             (C117 * C5663 + C51106 * C5669) * C118) *
                C39359 +
            (C5722 + C5721) * C39358 + C5684 * C39357 + C833 * C39356) *
               C50972 * C686) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C34007 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C17450 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C34007 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C17451 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C34007 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C17452) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C34007 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51186) *
               C17450 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C34007 +
            (C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51186) *
               C17451 +
           ((C392 - (C363 + C362) + C393 - C394 - C395) * C34007 +
            (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
             (C117 * C1720 + C51106 * C1727) * C300 -
             (C117 * C1728 + C51106 * C1732) * C295) *
                C51186) *
               C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C34007 +
            (C5715 + C5716) * C51186) *
               C17450 +
           ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
           C34014 * C17452) *
              C112 -
          (C34015 * C17452 + (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
           (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
              C113 +
          (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
           ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
              C114 -
          ((((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51186 +
            (C187 + C186) * C34007) *
               C17452 +
           ((C839 + C838) * C51186 + C190 * C34007) * C17451 +
           C34015 * C17450) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C34007 +
           ((C2449 * C500 + C2444 * C515 + C2450 * C969 + C2445 * C974 +
             C2451 * C1717 + C2446 * C1721) *
                C118 +
            (C2449 * C514 + C2444 * C530 + C2450 * C975 + C2445 * C984 +
             C2451 * C1722 + C2446 * C1729) *
                C51009) *
               C51186) *
              C50972 * C112 -
          (((C2888 + C2887 + C2886) * C51009 + (C2885 + C2884 + C2883) * C118) *
               C51186 +
           ((C2494 + C2493 + C2492) * C51009 + (C2491 + C2490 + C2489) * C118) *
               C34007) *
              C50972 * C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51009) *
               C34007 +
           ((C3217 + C3218 + C3219) * C118 + (C3220 + C3221 + C3222) * C51009) *
               C51186) *
              C50972 * C114 -
          (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
             C2449 * C511 + C2444 * C528) *
                C51009 +
            (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
             C2449 * C498 + C2444 * C510) *
                C118) *
               C51186 +
           ((C2506 + C2505 + C2504) * C51009 + (C2503 + C2502 + C2501) * C118) *
               C34007) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C34007 +
           ((C2449 * C500 + C2444 * C515 + C2450 * C969 + C2445 * C974 +
             C2451 * C1717 + C2446 * C1721) *
                C298 +
            (C2449 * C514 + C2444 * C530 + C2450 * C975 + C2445 * C984 +
             C2451 * C1722 + C2446 * C1729) *
                C293 -
            (C2451 * C3416 + C2446 * C3419 + C2450 * C1717 + C2445 * C1721 +
             C2449 * C969 + C2444 * C974) *
                C299 -
            (C2451 * C3420 + C2446 * C3425 + C2450 * C1722 + C2445 * C1729 +
             C2449 * C975 + C2444 * C984) *
                C294 +
            (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
             C2451 * C4338 + C2446 * C4340) *
                C300 +
            (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
             C2451 * C4341 + C2446 * C4344) *
                C295) *
               C51186) *
              C50972 * C296 +
          (((C2691 + C2690 + C2689) * C299 -
            ((C2494 + C2493 + C2492) * C293 + (C2491 + C2490 + C2489) * C298) +
            (C2694 + C2693 + C2692) * C294 - (C2697 + C2696 + C2695) * C300 -
            (C2700 + C2699 + C2698) * C295) *
               C34007 +
           ((C3441 + C3442 + C3443) * C299 -
            ((C2888 + C2887 + C2886) * C293 + (C2885 + C2884 + C2883) * C298) +
            (C3444 + C3445 + C3446) * C294 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C300 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C295) *
               C51186) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C118 +
            (C117 * C127 + C51106 * C140) * C51009) *
               C39356 +
           (C5715 + C5716) * C39357 + C5727 * C39358 +
           (C5724 + C5723) * C39359) *
              C50972 * C112 -
          (C5729 * C39359 + C5685 * C39358 + C5686 * C39357 +
           (C179 + C178) * C39356) *
              C50972 * C113 +
          (C188 * C39356 + C6036 * C39357 + C6037 * C39358 +
           (C5721 + C5722) * C39359) *
              C50972 * C114 -
          (((C117 * C2005 + C51106 * C2013) * C51009 +
            (C117 * C2001 + C51106 * C2006) * C118) *
               C39359 +
           (C584 + C583) * C39358 + C832 * C39357 + C191 * C39356) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C39356 +
           (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C39357 +
           (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C39358 +
           (C5712 * C298 + C5711 * C293 - C6705 * C299 - C6706 * C294 +
            (C117 * C4738 + C51106 * C4746) * C300 +
            (C117 * C4744 + C51106 * C4750) * C295) *
               C39359) *
              C50972 * C296 +
          ((C384 - (C343 + C342) + C385 - C386 - C387) * C39356 +
           (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C39357 +
           (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C39358 +
           (C6266 * C299 - (C5708 * C293 + C5707 * C298) + C6267 * C294 -
            (C117 * C4736 + C51106 * C4742) * C300 -
            (C117 * C4740 + C51106 * C4748) * C295) *
               C39359) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1456 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51296 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1457 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51297 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C1458 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C1453) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1456 +
            (C36972 + C36973 + C36974) * C51296 -
            (C37479 + C37480 + C37481) * C1457 -
            (C37482 + C37483 + C37484) * C51297 +
            (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
             C2451 * C4338 + C2446 * C4340) *
                C1458 +
            (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
             C2451 * C4341 + C2446 * C4344) *
                C1453) *
               C51186) *
              C50972 * C51243 +
          (((C2691 + C2690 + C2689) * C1457 -
            ((C2494 + C2493 + C2492) * C51296 +
             (C2491 + C2490 + C2489) * C1456) +
            (C2694 + C2693 + C2692) * C51297 - (C2697 + C2696 + C2695) * C1458 -
            (C2700 + C2699 + C2698) * C1453) *
               C34007 +
           ((C3441 + C3442 + C3443) * C1457 -
            ((C2888 + C2887 + C2886) * C51296 +
             (C2885 + C2884 + C2883) * C1456) +
            (C3444 + C3445 + C3446) * C51297 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C1458 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C1453) *
               C51186) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C34007 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C51186) *
               C17450 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C34007 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C51186) *
               C17451 +
           ((C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C34007 +
            (C12469 + C12470 - C12471 - C12472 + C12473 + C12474) * C51186) *
               C17452) *
              C51243 +
          (((C1462 - (C1461 + C1460) + C1463 - C1464 - C1465) * C34007 +
            (C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C51186) *
               C17450 +
           ((C1468 - (C1467 + C1466) + C1469 - C1470 - C1471) * C34007 +
            (C12471 - (C12470 + C12469) + C12472 - C12473 - C12474) * C51186) *
               C17451 +
           ((C1474 - (C1473 + C1472) + C1475 - C1476 - C1477) * C34007 +
            (C1012 * C1457 - (C566 * C51296 + C565 * C1456) + C1013 * C51297 -
             (C117 * C1720 + C51106 * C1727) * C1458 -
             (C117 * C1728 + C51106 * C1732) * C1453) *
                C51186) *
               C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1456 +
            (C117 * C127 + C51106 * C140) * C51296 -
            (C117 * C301 + C51106 * C311) * C1457 -
            (C117 * C312 + C51106 * C331) * C51297 +
            (C117 * C302 + C51106 * C313) * C1458 +
            (C117 * C314 + C51106 * C332) * C1453) *
               C39356 +
           (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C39357 +
           (C7227 + C7228 - C7229 - C7230 + C7241 + C7242) * C39358 +
           (C5712 * C1456 + C5711 * C51296 - C6705 * C1457 - C6706 * C51297 +
            (C117 * C4738 + C51106 * C4746) * C1458 +
            (C117 * C4744 + C51106 * C4750) * C1453) *
               C39359) *
              C50972 * C51243 +
          ((C1462 - (C1461 + C1460) + C1463 - C1464 - C1465) * C39356 +
           (C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C39357 +
           (C6866 - (C6865 + C6864) + C6867 - C6868 - C6869) * C39358 +
           (C6266 * C1457 - (C5708 * C51296 + C5707 * C1456) + C6267 * C51297 -
            (C117 * C4736 + C51106 * C4742) * C1458 -
            (C117 * C4740 + C51106 * C4748) * C1453) *
               C39359) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1456 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51296 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1457 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51297 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C1458 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C1453) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1456 +
            (C36972 + C36973 + C36974) * C51296 -
            (C37479 + C37480 + C37481) * C1457 -
            (C37482 + C37483 + C37484) * C51297 +
            (C38391 + C38392 + C38393) * C1458 +
            (C38394 + C38395 + C38396) * C1453) *
               C51186) *
              C50972 * C50991 * C51252 +
          (((C37481 + C37480 + C37479) * C1457 -
            ((C36974 + C36973 + C36972) * C51296 +
             (C36971 + C36970 + C36969) * C1456) +
            (C37484 + C37483 + C37482) * C51297 -
            (C38393 + C38392 + C38391) * C1458 -
            (C38396 + C38395 + C38394) * C1453) *
               C34007 +
           ((C37887 + C37888 + C37889) * C1457 -
            ((C36975 + C36976 + C36977) * C51296 +
             (C36978 + C36979 + C36980) * C1456) +
            (C37890 + C37891 + C37892) * C51297 -
            (C2451 * C21076 + C2446 * C21077 + C2450 * C3844 + C2445 * C3846 +
             C2449 * C2846 + C2444 * C2849) *
                C1458 -
            (C2451 * C21078 + C2446 * C21079 + C2450 * C3847 + C2445 * C3850 +
             C2449 * C2850 + C2444 * C2855) *
                C1453) *
               C51186) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C34007 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C51186) *
               C17450 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C34007 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C51186) *
               C17451 +
           ((C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C34007 +
            (C12469 + C12470 - C12471 - C12472 + C12473 + C12474) * C51186) *
               C17452) *
              C50991 * C51252 +
          (((C7221 - (C7220 + C7219) + C7222 - C7239 - C7240) * C34007 +
            (C7229 - (C7228 + C7227) + C7230 - C7241 - C7242) * C51186) *
               C17450 +
           ((C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C34007 +
            (C6866 - (C6865 + C6864) + C6867 - C6868 - C6869) * C51186) *
               C17451 +
           ((C12471 - (C12470 + C12469) + C12472 - C12473 - C12474) * C34007 +
            (C5886 * C1457 - (C570 * C51296 + C569 * C1456) + C5887 * C51297 -
             (C117 * C2848 + C51106 * C2854) * C1458 -
             (C117 * C2853 + C51106 * C2857) * C1453) *
                C51186) *
               C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1456 +
            (C117 * C127 + C51106 * C140) * C51296 -
            (C117 * C301 + C51106 * C311) * C1457 -
            (C117 * C312 + C51106 * C331) * C51297 +
            (C117 * C302 + C51106 * C313) * C1458 +
            (C117 * C314 + C51106 * C332) * C1453) *
               C39356 +
           (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C39357 +
           (C7227 + C7228 - C7229 - C7230 + C7241 + C7242) * C39358 +
           (C40485 + C40486 - C40487 - C40488 + C40495 + C40496) * C39359) *
              C50972 * C50991 * C51252 +
          ((C7221 - (C7220 + C7219) + C7222 - C7239 - C7240) * C39356 +
           (C7229 - (C7228 + C7227) + C7230 - C7241 - C7242) * C39357 +
           (C40487 - (C40486 + C40485) + C40488 - C40495 - C40496) * C39358 +
           (C40154 * C1457 - (C7659 * C51296 + C7658 * C1456) +
            C40155 * C51297 - (C117 * C23362 + C51106 * C23363) * C1458 -
            (C117 * C23364 + C51106 * C23365) * C1453) *
               C39359) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51106 * C126) * C1122 +
                 (C117 * C127 + C51106 * C140) * C1117 -
                 (C117 * C301 + C51106 * C311) * C1123 -
                 (C117 * C312 + C51106 * C331) * C51061) *
                    C34007 +
                (C6684 + C6685 - C6686 - C6687) * C51186) *
                   C17450 +
               ((C1125 + C1126 - C1127 - C1128) * C34007 + C7070 * C51186) *
                   C17451 +
               C34948 * C17452) *
                  C1119 +
              (((C1127 - (C1126 + C1125) + C1128) * C34007 + C7071 * C51186) *
                   C17450 +
               ((C1131 - (C1130 + C1129) + C1132) * C34007 + C12671 * C51186) *
                   C17451 +
               ((C1135 - (C1134 + C1133) + C1136) * C34007 +
                (C1616 - (C1617 + C1618) + C1619) * C51186) *
                   C17452) *
                  C1120 +
              (C34948 * C17450 +
               (C1146 * C34007 + (C1618 + C1617 - C1616 - C1619) * C51186) *
                   C17451 +
               ((C1139 + C1138 - C1137 - C1140) * C34007 +
                (C834 * C1122 + C835 * C1117 -
                 (C117 * C973 + C51106 * C982) * C1123 -
                 (C117 * C983 + C51106 * C988) * C51061) *
                    C51186) *
                   C17452) *
                  C1121) *
             C51025 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C51106 * C126) * C1219 +
                (C117 * C127 + C51106 * C140) * C1214 -
                (C117 * C301 + C51106 * C311) * C1220 -
                (C117 * C312 + C51106 * C331) * C1215 +
                (C117 * C302 + C51106 * C313) * C1221 +
                (C117 * C314 + C51106 * C332) * C1216 -
                (C117 * C1223 + C51106 * C1227) * C1222 -
                (C117 * C1228 + C51106 * C1235) * C1217) *
                   C34007 +
               (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
                C7235 * C1221 + C7236 * C1216 -
                (C117 * C3416 + C51106 * C3419) * C1222 -
                (C117 * C3420 + C51106 * C3425) * C1217) *
                   C51186) *
                  C17450 +
              ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
                C374 * C1221 + C375 * C1216 -
                (C117 * C1224 + C51106 * C1229) * C1222 -
                (C117 * C1230 + C51106 * C1236) * C1217) *
                   C34007 +
               (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
                C5504 * C1221 + C5505 * C1216 -
                (C117 * C3417 + C51106 * C3421) * C1222 -
                (C117 * C3422 + C51106 * C3426) * C1217) *
                   C51186) *
                  C17451 +
              ((C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
                C378 * C1221 + C379 * C1216 -
                (C117 * C1225 + C51106 * C1231) * C1222 -
                (C117 * C1232 + C51106 * C1237) * C1217) *
                   C34007 +
               (C563 * C1219 + C564 * C1214 - C1010 * C1220 - C1011 * C1215 +
                C11278 * C1221 + C11279 * C1216 -
                (C117 * C3418 + C51106 * C3423) * C1222 -
                (C117 * C3424 + C51106 * C3427) * C1217) *
                   C51186) *
                  C17452) *
             C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6684 + C6685 - C6686 - C6687) * C51186) *
               C17450 +
           ((C1125 + C1126 - C1127 - C1128) * C34007 + C7070 * C51186) *
               C17451 +
           C34948 * C17452) *
              C50991 * C493 +
          (((C6686 - (C6685 + C6684) + C6687) * C34007 +
            (C6690 - (C6689 + C6688) + C6691) * C51186) *
               C17450 +
           (C7071 * C34007 + C7072 * C51186) * C17451 +
           (C12671 * C34007 + (C6428 - (C6429 + C6430) + C6431) * C51186) *
               C17452) *
              C50991 * C494 +
          ((C6711 * C34007 + (C6696 + C6695 - C6709 - C6710) * C51186) *
               C17450 +
           (C6708 * C34007 + (C6701 + C6700 - C6699 - C6702) * C51186) *
               C17451 +
           ((C6430 + C6429 - C6428 - C6431) * C34007 +
            (C5709 * C1122 + C5710 * C1117 -
             (C117 * C6231 + C51106 * C6232) * C1123 -
             (C117 * C6233 + C51106 * C6234) * C51061) *
                C51186) *
               C17452) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1122 +
            (C36972 + C36973 + C36974) * C1117 -
            (C37479 + C37480 + C37481) * C1123 -
            (C37482 + C37483 + C37484) * C51061) *
               C51186) *
              C50972 * C1119 +
          (((C2691 + C2690 + C2689) * C1123 -
            ((C2494 + C2493 + C2492) * C1117 +
             (C2491 + C2490 + C2489) * C1122) +
            (C2694 + C2693 + C2692) * C51061) *
               C34007 +
           ((C3441 + C3442 + C3443) * C1123 -
            ((C2888 + C2887 + C2886) * C1117 +
             (C2885 + C2884 + C2883) * C1122) +
            (C3444 + C3445 + C3446) * C51061) *
               C51186) *
              C50972 * C1120 +
          (((C2500 + C2499 + C2498) * C1122 + (C2497 + C2496 + C2495) * C1117 -
            (C3055 + C3054 + C3053) * C1123 -
            (C3058 + C3057 + C3056) * C51061) *
               C34007 +
           ((C3217 + C3218 + C3219) * C1122 + (C3220 + C3221 + C3222) * C1117 -
            (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
             C2449 * C971 + C2444 * C978) *
                C1123 -
            (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
             C2449 * C979 + C2444 * C986) *
                C51061) *
               C51186) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
            C2451 * C302 + C2446 * C313) *
               C1219 +
           (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
            C2451 * C314 + C2446 * C332) *
               C1214 -
           (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
            C2449 * C301 + C2444 * C311) *
               C1220 -
           (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
            C2449 * C312 + C2444 * C331) *
               C1215 +
           (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
            C2451 * C2652 + C2446 * C2655) *
               C1221 +
           (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
            C2451 * C2656 + C2446 * C2661) *
               C1216 -
           (C2451 * C3690 + C2446 * C3692 + C2450 * C2652 + C2445 * C2655 +
            C2449 * C1223 + C2444 * C1227) *
               C1222 -
           (C2451 * C3693 + C2446 * C3696 + C2450 * C2656 + C2445 * C2661 +
            C2449 * C1228 + C2444 * C1235) *
               C1217) *
              C34007 +
          ((C36969 + C36970 + C36971) * C1219 +
           (C36972 + C36973 + C36974) * C1214 -
           (C37479 + C37480 + C37481) * C1220 -
           (C37482 + C37483 + C37484) * C1215 +
           (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
            C2451 * C4338 + C2446 * C4340) *
               C1221 +
           (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
            C2451 * C4341 + C2446 * C4344) *
               C1216 -
           (C2451 * C21406 + C2446 * C21407 + C2450 * C4338 + C2445 * C4340 +
            C2449 * C3416 + C2444 * C3419) *
               C1222 -
           (C2451 * C21408 + C2446 * C21409 + C2450 * C4341 + C2445 * C4344 +
            C2449 * C3420 + C2444 * C3425) *
               C1217) *
              C51186) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1122 +
            (C36972 + C36973 + C36974) * C1117 -
            (C37479 + C37480 + C37481) * C1123 -
            (C37482 + C37483 + C37484) * C51061) *
               C51186) *
              C50972 * C50991 * C493 +
          (((C37481 + C37480 + C37479) * C1123 -
            ((C36974 + C36973 + C36972) * C1117 +
             (C36971 + C36970 + C36969) * C1122) +
            (C37484 + C37483 + C37482) * C51061) *
               C34007 +
           ((C37887 + C37888 + C37889) * C1123 -
            ((C36975 + C36976 + C36977) * C1117 +
             (C36978 + C36979 + C36980) * C1122) +
            (C37890 + C37891 + C37892) * C51061) *
               C51186) *
              C50972 * C50991 * C494 +
          (((C36980 + C36979 + C36978) * C1122 +
            (C36977 + C36976 + C36975) * C1117 -
            (C37889 + C37888 + C37887) * C1123 -
            (C37892 + C37891 + C37890) * C51061) *
               C34007 +
           ((C2449 * C2004 + C2444 * C2012 + C2450 * C4739 + C2445 * C4747 +
             C2451 * C4738 + C2446 * C4746) *
                C1122 +
            (C2449 * C2011 + C2444 * C2016 + C2450 * C4745 + C2445 * C4751 +
             C2451 * C4744 + C2446 * C4750) *
                C1117 -
            (C2451 * C21672 + C2446 * C21674 + C2450 * C4738 + C2445 * C4746 +
             C2449 * C4739 + C2444 * C4747) *
                C1123 -
            (C2451 * C21673 + C2446 * C21675 + C2450 * C4744 + C2445 * C4750 +
             C2449 * C4745 + C2444 * C4751) *
                C51061) *
               C51186) *
              C50972 * C50991 * C495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1122 +
            (C117 * C127 + C51106 * C140) * C1117 -
            (C117 * C301 + C51106 * C311) * C1123 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C39356 +
           (C6684 + C6685 - C6686 - C6687) * C39357 + C6711 * C39358 +
           (C6696 + C6695 - C6709 - C6710) * C39359) *
              C50972 * C1119 +
          ((C1127 - (C1126 + C1125) + C1128) * C39356 + C7071 * C39357 +
           C7072 * C39358 + (C6699 - (C6700 + C6701) + C6702) * C39359) *
              C50972 * C1120 +
          (C1145 * C39356 + C12076 * C39357 +
           (C6430 + C6429 - C6428 - C6431) * C39358 +
           (C5709 * C1122 + C5710 * C1117 -
            (C117 * C6231 + C51106 * C6232) * C1123 -
            (C117 * C6233 + C51106 * C6234) * C51061) *
               C39359) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C119 + C51106 * C126) * C1219 +
           (C117 * C127 + C51106 * C140) * C1214 -
           (C117 * C301 + C51106 * C311) * C1220 -
           (C117 * C312 + C51106 * C331) * C1215 +
           (C117 * C302 + C51106 * C313) * C1221 +
           (C117 * C314 + C51106 * C332) * C1216 -
           (C117 * C1223 + C51106 * C1227) * C1222 -
           (C117 * C1228 + C51106 * C1235) * C1217) *
              C39356 +
          (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
           C7235 * C1221 + C7236 * C1216 -
           (C117 * C3416 + C51106 * C3419) * C1222 -
           (C117 * C3420 + C51106 * C3425) * C1217) *
              C39357 +
          (C5705 * C1219 + C5706 * C1214 - C6260 * C1220 - C6261 * C1215 +
           C7237 * C1221 + C7238 * C1216 -
           (C117 * C3844 + C51106 * C3846) * C1222 -
           (C117 * C3847 + C51106 * C3850) * C1217) *
              C39358 +
          (C5712 * C1219 + C5711 * C1214 - C6705 * C1220 - C6706 * C1215 +
           (C117 * C4738 + C51106 * C4746) * C1221 +
           (C117 * C4744 + C51106 * C4750) * C1216 -
           (C117 * C21672 + C51106 * C21674) * C1222 -
           (C117 * C21673 + C51106 * C21675) * C1217) *
              C39359) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1122 +
            (C117 * C127 + C51106 * C140) * C1117 -
            (C117 * C301 + C51106 * C311) * C1123 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C39356 +
           (C6684 + C6685 - C6686 - C6687) * C39357 + C6711 * C39358 +
           C40156 * C39359) *
              C50972 * C50991 * C493 +
          ((C6686 - (C6685 + C6684) + C6687) * C39356 +
           (C6690 - (C6689 + C6688) + C6691) * C39357 +
           (C6709 - (C6695 + C6696) + C6710) * C39358 +
           (C40157 - (C40149 + C40150) + C40158) * C39359) *
              C50972 * C50991 * C494 +
          (C6711 * C39356 + C40156 * C39357 +
           (C40150 + C40149 - C40157 - C40158) * C39358 +
           ((C117 * C7645 + C51106 * C7649) * C1122 +
            (C117 * C7648 + C51106 * C7651) * C1117 -
            (C117 * C24287 + C51106 * C24289) * C1123 -
            (C117 * C24288 + C51106 * C24290) * C51061) *
               C39359) *
              C50972 * C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C1122 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C1117 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C1123 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C34007 +
            ((C36969 + C36970 + C36971) * C1122 +
             (C36972 + C36973 + C36974) * C1117 -
             (C37479 + C37480 + C37481) * C1123 -
             (C37482 + C37483 + C37484) * C51061) *
                C51186) *
               C50972 * C51243 +
           (((C2691 + C2690 + C2689) * C1123 -
             ((C2494 + C2493 + C2492) * C1117 +
              (C2491 + C2490 + C2489) * C1122) +
             (C2694 + C2693 + C2692) * C51061) *
                C34007 +
            ((C3441 + C3442 + C3443) * C1123 -
             ((C2888 + C2887 + C2886) * C1117 +
              (C2885 + C2884 + C2883) * C1122) +
             (C3444 + C3445 + C3446) * C51061) *
                C51186) *
               C50972 * C50996) *
              C51252 +
          ((((C37481 + C37480 + C37479) * C1123 -
             ((C36974 + C36973 + C36972) * C1117 +
              (C36971 + C36970 + C36969) * C1122) +
             (C37484 + C37483 + C37482) * C51061) *
                C34007 +
            ((C37887 + C37888 + C37889) * C1123 -
             ((C36975 + C36976 + C36977) * C1117 +
              (C36978 + C36979 + C36980) * C1122) +
             (C37890 + C37891 + C37892) * C51061) *
                C51186) *
               C50972 * C51243 +
           (((C2883 + C2884 + C2885) * C1122 + (C2886 + C2887 + C2888) * C1117 -
             (C3443 + C3442 + C3441) * C1123 -
             (C3446 + C3445 + C3444) * C51061) *
                C34007 +
            ((C2889 + C2890 + C2891) * C1122 + (C2892 + C2893 + C2894) * C1117 -
             (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
              C2449 * C1338 + C2444 * C1343) *
                 C1123 -
             (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
              C2449 * C1344 + C2444 * C1350) *
                 C51061) *
                C51186) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C1122 +
              (C117 * C127 + C51106 * C140) * C1117 -
              (C117 * C301 + C51106 * C311) * C1123 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C34007 +
             (C6684 + C6685 - C6686 - C6687) * C51186) *
                C17450 +
            ((C1125 + C1126 - C1127 - C1128) * C34007 + C7070 * C51186) *
                C17451 +
            C34948 * C17452) *
               C51243 +
           (((C1127 - (C1126 + C1125) + C1128) * C34007 + C7071 * C51186) *
                C17450 +
            ((C1131 - (C1130 + C1129) + C1132) * C34007 + C12671 * C51186) *
                C17451 +
            ((C1135 - (C1134 + C1133) + C1136) * C34007 +
             (C1616 - (C1617 + C1618) + C1619) * C51186) *
                C17452) *
               C50996) *
              C51252 +
          ((((C6686 - (C6685 + C6684) + C6687) * C34007 +
             (C6690 - (C6689 + C6688) + C6691) * C51186) *
                C17450 +
            (C7071 * C34007 + C7072 * C51186) * C17451 +
            (C12671 * C34007 + (C6428 - (C6429 + C6430) + C6431) * C51186) *
                C17452) *
               C51243 +
           ((C7070 * C34007 + C6708 * C51186) * C17450 +
            (C12076 * C34007 + (C6430 + C6429 - C6428 - C6431) * C51186) *
                C17451 +
            ((C1618 + C1617 - C1616 - C1619) * C34007 +
             (C571 * C1122 + C572 * C1117 -
              (C117 * C1340 + C51106 * C1347) * C1123 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C39356 +
            (C6684 + C6685 - C6686 - C6687) * C39357 + C6711 * C39358 +
            C40156 * C39359) *
               C50972 * C51243 +
           ((C1127 - (C1126 + C1125) + C1128) * C39356 + C7071 * C39357 +
            C7072 * C39358 + (C6699 - (C6700 + C6701) + C6702) * C39359) *
               C50972 * C50996) *
              C51252 +
          (((C6686 - (C6685 + C6684) + C6687) * C39356 +
            (C6690 - (C6689 + C6688) + C6691) * C39357 +
            (C6709 - (C6695 + C6696) + C6710) * C39358 +
            (C40157 - (C40149 + C40150) + C40158) * C39359) *
               C50972 * C51243 +
           (C7070 * C39356 + C6708 * C39357 +
            (C6701 + C6700 - C6699 - C6702) * C39358 +
            (C5713 * C1122 + C5714 * C1117 -
             (C117 * C6676 + C51106 * C6679) * C1123 -
             (C117 * C6680 + C51106 * C6682) * C51061) *
                C39359) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C34007 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            C7235 * C1221 + C7236 * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C51186) *
              C17450 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C34007 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C51186) *
              C17451 +
          ((C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
            C378 * C1221 + C379 * C1216 -
            (C117 * C1225 + C51106 * C1231) * C1222 -
            (C117 * C1232 + C51106 * C1237) * C1217) *
               C34007 +
           (C563 * C1219 + C564 * C1214 - C1010 * C1220 - C1011 * C1215 +
            C11278 * C1221 + C11279 * C1216 -
            (C117 * C3418 + C51106 * C3423) * C1222 -
            (C117 * C3424 + C51106 * C3427) * C1217) *
               C51186) *
              C17452) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6684 + C6685 - C6686 - C6687) * C51186) *
               C17450 +
           ((C1125 + C1126 - C1127 - C1128) * C34007 + C7070 * C51186) *
               C17451 +
           C34948 * C17452) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C34007 + C7071 * C51186) *
               C17450 +
           ((C1131 - (C1130 + C1129) + C1132) * C34007 + C12671 * C51186) *
               C17451 +
           ((C1135 - (C1134 + C1133) + C1136) * C34007 +
            (C1616 - (C1617 + C1618) + C1619) * C51186) *
               C17452) *
              C1120 +
          (C34948 * C17450 +
           (C1146 * C34007 + (C1618 + C1617 - C1616 - C1619) * C51186) *
               C17451 +
           ((C1139 + C1138 - C1137 - C1140) * C34007 +
            (C834 * C1122 + C835 * C1117 -
             (C117 * C973 + C51106 * C982) * C1123 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51186) *
               C17452) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1122 +
            (C36972 + C36973 + C36974) * C1117 -
            (C37479 + C37480 + C37481) * C1123 -
            (C37482 + C37483 + C37484) * C51061) *
               C51186) *
              C50972 * C1119 +
          (((C2691 + C2690 + C2689) * C1123 -
            ((C2494 + C2493 + C2492) * C1117 +
             (C2491 + C2490 + C2489) * C1122) +
            (C2694 + C2693 + C2692) * C51061) *
               C34007 +
           ((C3441 + C3442 + C3443) * C1123 -
            ((C2888 + C2887 + C2886) * C1117 +
             (C2885 + C2884 + C2883) * C1122) +
            (C3444 + C3445 + C3446) * C51061) *
               C51186) *
              C50972 * C1120 +
          (((C2500 + C2499 + C2498) * C1122 + (C2497 + C2496 + C2495) * C1117 -
            (C3055 + C3054 + C3053) * C1123 -
            (C3058 + C3057 + C3056) * C51061) *
               C34007 +
           ((C3217 + C3218 + C3219) * C1122 + (C3220 + C3221 + C3222) * C1117 -
            (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
             C2449 * C971 + C2444 * C978) *
                C1123 -
            (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
             C2449 * C979 + C2444 * C986) *
                C51061) *
               C51186) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
            C2451 * C302 + C2446 * C313) *
               C1219 +
           (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
            C2451 * C314 + C2446 * C332) *
               C1214 -
           (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
            C2449 * C301 + C2444 * C311) *
               C1220 -
           (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
            C2449 * C312 + C2444 * C331) *
               C1215 +
           (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
            C2451 * C2652 + C2446 * C2655) *
               C1221 +
           (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
            C2451 * C2656 + C2446 * C2661) *
               C1216 -
           (C2451 * C3690 + C2446 * C3692 + C2450 * C2652 + C2445 * C2655 +
            C2449 * C1223 + C2444 * C1227) *
               C1222 -
           (C2451 * C3693 + C2446 * C3696 + C2450 * C2656 + C2445 * C2661 +
            C2449 * C1228 + C2444 * C1235) *
               C1217) *
              C34007 +
          ((C36969 + C36970 + C36971) * C1219 +
           (C36972 + C36973 + C36974) * C1214 -
           (C37479 + C37480 + C37481) * C1220 -
           (C37482 + C37483 + C37484) * C1215 +
           (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
            C2451 * C4338 + C2446 * C4340) *
               C1221 +
           (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
            C2451 * C4341 + C2446 * C4344) *
               C1216 -
           (C2451 * C21406 + C2446 * C21407 + C2450 * C4338 + C2445 * C4340 +
            C2449 * C3416 + C2444 * C3419) *
               C1222 -
           (C2451 * C21408 + C2446 * C21409 + C2450 * C4341 + C2445 * C4344 +
            C2449 * C3420 + C2444 * C3425) *
               C1217) *
              C51186) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1122 +
            (C117 * C127 + C51106 * C140) * C1117 -
            (C117 * C301 + C51106 * C311) * C1123 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C39356 +
           (C6684 + C6685 - C6686 - C6687) * C39357 + C6711 * C39358 +
           (C6696 + C6695 - C6709 - C6710) * C39359) *
              C50972 * C1119 +
          ((C1127 - (C1126 + C1125) + C1128) * C39356 + C7071 * C39357 +
           C7072 * C39358 + (C6699 - (C6700 + C6701) + C6702) * C39359) *
              C50972 * C1120 +
          (C1145 * C39356 + C12076 * C39357 +
           (C6430 + C6429 - C6428 - C6431) * C39358 +
           (C5709 * C1122 + C5710 * C1117 -
            (C117 * C6231 + C51106 * C6232) * C1123 -
            (C117 * C6233 + C51106 * C6234) * C51061) *
               C39359) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C51106 * C126) * C1219 +
           (C117 * C127 + C51106 * C140) * C1214 -
           (C117 * C301 + C51106 * C311) * C1220 -
           (C117 * C312 + C51106 * C331) * C1215 +
           (C117 * C302 + C51106 * C313) * C1221 +
           (C117 * C314 + C51106 * C332) * C1216 -
           (C117 * C1223 + C51106 * C1227) * C1222 -
           (C117 * C1228 + C51106 * C1235) * C1217) *
              C39356 +
          (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
           C7235 * C1221 + C7236 * C1216 -
           (C117 * C3416 + C51106 * C3419) * C1222 -
           (C117 * C3420 + C51106 * C3425) * C1217) *
              C39357 +
          (C5705 * C1219 + C5706 * C1214 - C6260 * C1220 - C6261 * C1215 +
           C7237 * C1221 + C7238 * C1216 -
           (C117 * C3844 + C51106 * C3846) * C1222 -
           (C117 * C3847 + C51106 * C3850) * C1217) *
              C39358 +
          (C5712 * C1219 + C5711 * C1214 - C6705 * C1220 - C6706 * C1215 +
           (C117 * C4738 + C51106 * C4746) * C1221 +
           (C117 * C4744 + C51106 * C4750) * C1216 -
           (C117 * C21672 + C51106 * C21674) * C1222 -
           (C117 * C21673 + C51106 * C21675) * C1217) *
              C39359) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C687 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51251 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C688 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C34007 +
            ((C36969 + C36970 + C36971) * C687 +
             (C36972 + C36973 + C36974) * C51251 -
             (C37479 + C37480 + C37481) * C688 -
             (C37482 + C37483 + C37484) * C51061) *
                C51186) *
               C50972 * C51243 +
           (((C2691 + C2690 + C2689) * C688 -
             ((C2494 + C2493 + C2492) * C51251 +
              (C2491 + C2490 + C2489) * C687) +
             (C2694 + C2693 + C2692) * C51061) *
                C34007 +
            ((C3441 + C3442 + C3443) * C688 -
             ((C2888 + C2887 + C2886) * C51251 +
              (C2885 + C2884 + C2883) * C687) +
             (C3444 + C3445 + C3446) * C51061) *
                C51186) *
               C50972 * C50996) *
              C1831 +
          ((((C37481 + C37480 + C37479) * C688 -
             ((C36974 + C36973 + C36972) * C51251 +
              (C36971 + C36970 + C36969) * C687) +
             (C37484 + C37483 + C37482) * C51061) *
                C34007 +
            ((C37887 + C37888 + C37889) * C688 -
             ((C36975 + C36976 + C36977) * C51251 +
              (C36978 + C36979 + C36980) * C687) +
             (C37890 + C37891 + C37892) * C51061) *
                C51186) *
               C50972 * C51243 +
           (((C2883 + C2884 + C2885) * C687 + (C2886 + C2887 + C2888) * C51251 -
             (C3443 + C3442 + C3441) * C688 -
             (C3446 + C3445 + C3444) * C51061) *
                C34007 +
            ((C2889 + C2890 + C2891) * C687 + (C2892 + C2893 + C2894) * C51251 -
             (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
              C2449 * C1338 + C2444 * C1343) *
                 C688 -
             (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
              C2449 * C1344 + C2444 * C1350) *
                 C51061) *
                C51186) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C34007 +
             (C6236 + C6237 - C6268 - C6269) * C51186) *
                C17450 +
            ((C694 + C695 - C696 - C697) * C34007 + C6272 * C51186) * C17451 +
            C34456 * C17452) *
               C51243 +
           (((C696 - (C695 + C694) + C697) * C34007 + C6274 * C51186) * C17450 +
            ((C700 - (C699 + C698) + C701) * C34007 + C11926 * C51186) *
                C17451 +
            ((C704 - (C703 + C702) + C705) * C34007 +
             (C1018 - (C1004 + C1005) + C1019) * C51186) *
                C17452) *
               C50996) *
              C1831 +
          ((((C6268 - (C6237 + C6236) + C6269) * C34007 +
             (C6270 - (C6243 + C6242) + C6271) * C51186) *
                C17450 +
            (C6274 * C34007 + C6275 * C51186) * C17451 +
            (C11926 * C34007 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
                C17452) *
               C51243 +
           ((C6272 * C34007 + C6273 * C51186) * C17450 +
            (C11577 * C34007 + (C5883 + C5882 - C5888 - C5889) * C51186) *
                C17451 +
            ((C1005 + C1004 - C1018 - C1019) * C34007 +
             (C571 * C687 + C572 * C51251 -
              (C117 * C1340 + C51106 * C1347) * C688 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C39356 +
            (C6236 + C6237 - C6268 - C6269) * C39357 + C8154 * C39358 +
            (C8151 + C8150 - C8149 - C8152) * C39359) *
               C50972 * C51243 +
           ((C696 - (C695 + C694) + C697) * C39356 + C6274 * C39357 +
            C6275 * C39358 + (C6276 - (C6254 + C6255) + C6277) * C39359) *
               C50972 * C50996) *
              C1831 +
          (((C6268 - (C6237 + C6236) + C6269) * C39356 +
            (C6270 - (C6243 + C6242) + C6271) * C39357 +
            (C8149 - (C8150 + C8151) + C8152) * C39358 +
            (C40154 * C688 - (C7659 * C51251 + C7658 * C687) +
             C40155 * C51061) *
                C39359) *
               C50972 * C51243 +
           (C6272 * C39356 + C6273 * C39357 +
            (C6255 + C6254 - C6276 - C6277) * C39358 +
            (C5713 * C687 + C5714 * C51251 -
             (C117 * C6676 + C51106 * C6679) * C688 -
             (C117 * C6680 + C51106 * C6682) * C51061) *
                C39359) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C687 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51251 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C688 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C687 +
            (C36972 + C36973 + C36974) * C51251 -
            (C37479 + C37480 + C37481) * C688 -
            (C37482 + C37483 + C37484) * C51061) *
               C51186) *
              C50972 * C50991 * C51298 +
          (((C37481 + C37480 + C37479) * C688 -
            ((C36974 + C36973 + C36972) * C51251 +
             (C36971 + C36970 + C36969) * C687) +
            (C37484 + C37483 + C37482) * C51061) *
               C34007 +
           ((C37887 + C37888 + C37889) * C688 -
            ((C36975 + C36976 + C36977) * C51251 +
             (C36978 + C36979 + C36980) * C687) +
            (C37890 + C37891 + C37892) * C51061) *
               C51186) *
              C50972 * C50991 * C51299 +
          (((C36980 + C36979 + C36978) * C687 +
            (C36977 + C36976 + C36975) * C51251 -
            (C37889 + C37888 + C37887) * C688 -
            (C37892 + C37891 + C37890) * C51061) *
               C34007 +
           ((C38799 + C38800 + C38801) * C687 +
            (C38802 + C38803 + C38804) * C51251 -
            (C2451 * C21672 + C2446 * C21674 + C2450 * C4738 + C2445 * C4746 +
             C2449 * C4739 + C2444 * C4747) *
                C688 -
            (C2451 * C21673 + C2446 * C21675 + C2450 * C4744 + C2445 * C4750 +
             C2449 * C4745 + C2444 * C4751) *
                C51061) *
               C51186) *
              C50972 * C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6236 + C6237 - C6268 - C6269) * C51186) *
               C17450 +
           ((C694 + C695 - C696 - C697) * C34007 + C6272 * C51186) * C17451 +
           C34456 * C17452) *
              C50991 * C51298 +
          (((C6268 - (C6237 + C6236) + C6269) * C34007 +
            (C6270 - (C6243 + C6242) + C6271) * C51186) *
               C17450 +
           (C6274 * C34007 + C6275 * C51186) * C17451 +
           (C11926 * C34007 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
               C17452) *
              C50991 * C51299 +
          ((C8154 * C34007 + (C8151 + C8150 - C8149 - C8152) * C51186) *
               C17450 +
           (C6273 * C34007 + (C6255 + C6254 - C6276 - C6277) * C51186) *
               C17451 +
           ((C5883 + C5882 - C5888 - C5889) * C34007 +
            (C5709 * C687 + C5710 * C51251 -
             (C117 * C6231 + C51106 * C6232) * C688 -
             (C117 * C6233 + C51106 * C6234) * C51061) *
                C51186) *
               C17452) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C687 +
            (C117 * C127 + C51106 * C140) * C51251 -
            (C117 * C301 + C51106 * C311) * C688 -
            (C117 * C312 + C51106 * C331) * C51061) *
               C39356 +
           (C6236 + C6237 - C6268 - C6269) * C39357 + C8154 * C39358 +
           C41110 * C39359) *
              C50972 * C50991 * C51298 +
          ((C6268 - (C6237 + C6236) + C6269) * C39356 +
           (C6270 - (C6243 + C6242) + C6271) * C39357 +
           (C8149 - (C8150 + C8151) + C8152) * C39358 +
           (C41105 - (C41106 + C41107) + C41108) * C39359) *
              C50972 * C50991 * C51299 +
          (C8154 * C39356 + C41110 * C39357 +
           (C41107 + C41106 - C41105 - C41108) * C39358 +
           (C40774 * C687 + C40775 * C51251 -
            (C117 * C24287 + C51106 * C24289) * C688 -
            (C117 * C24288 + C51106 * C24290) * C51061) *
               C39359) *
              C50972 * C50991 * C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((((C117 * C119 + C51106 * C126) * C118 +
                  (C117 * C127 + C51106 * C140) * C51009) *
                     C34007 +
                 (C5715 + C5716) * C51186) *
                    C17450 +
                ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
                C34014 * C17452) *
                   C1119 -
               (C34015 * C17452 +
                (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
                (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
                   C1120 +
               (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
                ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
                   C1121) *
                  C1831 +
              (((C5682 * C34007 + C5683 * C51186) * C17450 +
                (C6036 * C34007 + C6037 * C51186) * C17451 +
                (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
                   C1120 -
               (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
                ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) *
                    C17450) *
                   C1119 -
               ((((C117 * C524 + C51106 * C535) * C51009 +
                  (C117 * C505 + C51106 * C525) * C118) *
                     C51186 +
                 (C839 + C838) * C34007) *
                    C17452 +
                ((C584 + C583) * C51186 + C832 * C34007) * C17451 +
                C34605 * C17450) *
                   C1121) *
                  C51089) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C51106 * C126) * C298 +
                 (C117 * C127 + C51106 * C140) * C293 -
                 (C117 * C301 + C51106 * C311) * C299 -
                 (C117 * C312 + C51106 * C331) * C294 +
                 (C117 * C302 + C51106 * C313) * C300 +
                 (C117 * C314 + C51106 * C332) * C295) *
                    C34007 +
                (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
                   C17450 +
               ((C342 + C343 - C384 - C385 + C386 + C387) * C34007 +
                (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
                   C17451 +
               ((C352 + C353 - C388 - C389 + C390 + C391) * C34007 +
                (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) *
                    C51186) *
                   C17452) *
                  C50991 * C1831 +
              (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C34007 +
                (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C51186) *
                   C17450 +
               ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C34007 +
                (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C51186) *
                   C17451 +
               ((C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) *
                    C34007 +
                (C5886 * C299 - (C570 * C293 + C569 * C298) + C5887 * C294 -
                 (C117 * C2848 + C51106 * C2854) * C300 -
                 (C117 * C2853 + C51106 * C2857) * C295) *
                    C51186) *
                   C17452) *
                  C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C34007 +
            (C5715 + C5716) * C51186) *
               C17450 +
           ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
           C34014 * C17452) *
              C50991 * C1997 -
          (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
           ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
              C50991 * C1998 +
          ((C5727 * C34007 + (C5724 + C5723) * C51186) * C17450 +
           (C5683 * C34007 + C5728 * C51186) * C17451 +
           (C6037 * C34007 + (C5721 + C5722) * C51186) * C17452) *
              C50991 * C1999 -
          ((((C117 * C5668 + C51106 * C5672) * C51009 +
             (C117 * C5663 + C51106 * C5669) * C118) *
                C51186 +
            (C5722 + C5721) * C34007) *
               C17452 +
           ((C5726 + C5725) * C51186 + C5729 * C34007) * C17451 +
           ((C7661 + C7660) * C51186 + C7653 * C34007) * C17450) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C1119 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C1120 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C34007 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51186) *
               C50972 * C1121) *
              C1831 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C1120 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C1119 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51186 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C34007) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C34007 +
           ((C36969 + C36970 + C36971) * C298 +
            (C36972 + C36973 + C36974) * C293 -
            (C37479 + C37480 + C37481) * C299 -
            (C37482 + C37483 + C37484) * C294 +
            (C38391 + C38392 + C38393) * C300 +
            (C38394 + C38395 + C38396) * C295) *
               C51186) *
              C50972 * C50991 * C1831 +
          (((C37481 + C37480 + C37479) * C299 -
            ((C36974 + C36973 + C36972) * C293 +
             (C36971 + C36970 + C36969) * C298) +
            (C37484 + C37483 + C37482) * C294 -
            (C38393 + C38392 + C38391) * C300 -
            (C38396 + C38395 + C38394) * C295) *
               C34007 +
           ((C37887 + C37888 + C37889) * C299 -
            ((C36975 + C36976 + C36977) * C293 +
             (C36978 + C36979 + C36980) * C298) +
            (C37890 + C37891 + C37892) * C294 -
            (C2451 * C21076 + C2446 * C21077 + C2450 * C3844 + C2445 * C3846 +
             C2449 * C2846 + C2444 * C2849) *
                C300 -
            (C2451 * C21078 + C2446 * C21079 + C2450 * C3847 + C2445 * C3850 +
             C2449 * C2850 + C2444 * C2855) *
                C295) *
               C51186) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C34007 +
           ((C36969 + C36970 + C36971) * C118 +
            (C36972 + C36973 + C36974) * C51009) *
               C51186) *
              C50972 * C50991 * C1997 -
          (((C36975 + C36976 + C36977) * C51009 +
            (C36978 + C36979 + C36980) * C118) *
               C51186 +
           ((C36974 + C36973 + C36972) * C51009 +
            (C36971 + C36970 + C36969) * C118) *
               C34007) *
              C50972 * C50991 * C1998 +
          (((C36980 + C36979 + C36978) * C118 +
            (C36977 + C36976 + C36975) * C51009) *
               C34007 +
           ((C38799 + C38800 + C38801) * C118 +
            (C38802 + C38803 + C38804) * C51009) *
               C51186) *
              C50972 * C50991 * C1999 -
          (((C2451 * C23364 + C2446 * C23365 + C2450 * C6678 + C2445 * C6681 +
             C2449 * C5665 + C2444 * C5670) *
                C51009 +
            (C2451 * C23362 + C2446 * C23363 + C2450 * C6675 + C2445 * C6677 +
             C2449 * C5661 + C2444 * C5664) *
                C118) *
               C51186 +
           ((C38804 + C38803 + C38802) * C51009 +
            (C38801 + C38800 + C38799) * C118) *
               C34007) *
              C50972 * C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C39356 +
            (C5715 + C5716) * C39357 + C5727 * C39358 + C39557 * C39359) *
               C50972 * C1119 -
           (C5729 * C39359 + C5685 * C39358 + C5686 * C39357 +
            (C179 + C178) * C39356) *
               C50972 * C1120 +
           (C188 * C39356 + C6036 * C39357 + C6037 * C39358 +
            (C5721 + C5722) * C39359) *
               C50972 * C1121) *
              C1831 +
          ((C5682 * C39356 + C5683 * C39357 + C5728 * C39358 +
            (C5725 + C5726) * C39359) *
               C50972 * C1120 -
           ((C7661 + C7660) * C39359 + C7653 * C39358 +
            (C5718 + C5717) * C39357 + (C5716 + C5715) * C39356) *
               C50972 * C1119 -
           (((C117 * C5668 + C51106 * C5672) * C51009 +
             (C117 * C5663 + C51106 * C5669) * C118) *
                C39359 +
            (C5722 + C5721) * C39358 + C5684 * C39357 + C833 * C39356) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C39356 +
           (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C39357 +
           (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C39358 +
           (C40693 + C40694 - C40695 - C40696 + C40697 + C40698) * C39359) *
              C50972 * C50991 * C1831 +
          ((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C39356 +
           (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C39357 +
           (C40695 - (C40694 + C40693) + C40696 - C40697 - C40698) * C39358 +
           (C40154 * C299 - (C7659 * C293 + C7658 * C298) + C40155 * C294 -
            (C117 * C23362 + C51106 * C23363) * C300 -
            (C117 * C23364 + C51106 * C23365) * C295) *
               C39359) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C118 +
            (C117 * C127 + C51106 * C140) * C51009) *
               C39356 +
           (C5715 + C5716) * C39357 + C5727 * C39358 + C39557 * C39359) *
              C50972 * C50991 * C1997 -
          (C40769 * C39359 + C7653 * C39358 + (C5718 + C5717) * C39357 +
           (C5716 + C5715) * C39356) *
              C50972 * C50991 * C1998 +
          (C5727 * C39356 + C39557 * C39357 + (C7660 + C7661) * C39358 +
           (C40776 + C40777) * C39359) *
              C50972 * C50991 * C1999 -
          (((C117 * C40765 + C51106 * C40767) * C51009 +
            (C117 * C40764 + C51106 * C40766) * C118) *
               C39359 +
           (C40777 + C40776) * C39358 + C40769 * C39357 + C7653 * C39356) *
              C50972 * C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C51243 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C50996) *
              C51298 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C50996 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C51243) *
              C51299 +
          ((((C36980 + C36979 + C36978) * C118 +
             (C36977 + C36976 + C36975) * C51009) *
                C34007 +
            ((C38799 + C38800 + C38801) * C118 +
             (C38802 + C38803 + C38804) * C51009) *
                C51186) *
               C50972 * C51243 -
           (((C2451 * C4740 + C2446 * C4748 + C2450 * C4741 + C2445 * C4749 +
              C2449 * C2009 + C2444 * C2015) *
                 C51009 +
             (C2451 * C4736 + C2446 * C4742 + C2450 * C4737 + C2445 * C4743 +
              C2449 * C2003 + C2444 * C2010) *
                 C118) *
                C51186 +
            ((C2894 + C2893 + C2892) * C51009 +
             (C2891 + C2890 + C2889) * C118) *
                C34007) *
               C50972 * C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C51243 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C50996) *
              C51298 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C50996 -
           (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C51243) *
              C51299 +
          (((C5727 * C34007 + (C5724 + C5723) * C51186) * C17450 +
            (C5683 * C34007 + C5728 * C51186) * C17451 +
            (C6037 * C34007 + (C5721 + C5722) * C51186) * C17452) *
               C51243 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C51186 +
             (C584 + C583) * C34007) *
                C17452 +
            ((C5722 + C5721) * C51186 + C5684 * C34007) * C17451 +
            (C5729 * C51186 + C5685 * C34007) * C17450) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C39356 +
            (C5715 + C5716) * C39357 + C5727 * C39358 + C39557 * C39359) *
               C50972 * C51243 -
           (C5729 * C39359 + C5685 * C39358 + C5686 * C39357 +
            (C179 + C178) * C39356) *
               C50972 * C50996) *
              C51298 +
          ((C5682 * C39356 + C5683 * C39357 + C5728 * C39358 +
            (C5725 + C5726) * C39359) *
               C50972 * C50996 -
           (C40769 * C39359 + C7653 * C39358 + (C5718 + C5717) * C39357 +
            (C5716 + C5715) * C39356) *
               C50972 * C51243) *
              C51299 +
          ((C5727 * C39356 + C39557 * C39357 + (C7660 + C7661) * C39358 +
            (C40776 + C40777) * C39359) *
               C50972 * C51243 -
           (((C117 * C7646 + C51106 * C7650) * C51009 +
             (C117 * C7644 + C51106 * C7647) * C118) *
                C39359 +
            (C5726 + C5725) * C39358 + C5729 * C39357 + C5685 * C39356) *
               C50972 * C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C34007 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C17450 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C34007 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C17451 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C34007 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C17452) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C34007 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C51186) *
               C17450 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C34007 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C51186) *
               C17451 +
           ((C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C34007 +
            (C5886 * C299 - (C570 * C293 + C569 * C298) + C5887 * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C51186) *
               C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C1119 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C1120 +
           (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
            ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
               C1121) *
              C1831 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C1120 -
           (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C1119 -
           ((((C117 * C524 + C51106 * C535) * C51009 +
              (C117 * C505 + C51106 * C525) * C118) *
                 C51186 +
             (C839 + C838) * C34007) *
                C17452 +
            ((C584 + C583) * C51186 + C832 * C34007) * C17451 +
            C34605 * C17450) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C1119 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C1120 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C34007 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51186) *
               C50972 * C1121) *
              C1831 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C1120 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C1119 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51186 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C34007) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C34007 +
           ((C36969 + C36970 + C36971) * C298 +
            (C36972 + C36973 + C36974) * C293 -
            (C37479 + C37480 + C37481) * C299 -
            (C37482 + C37483 + C37484) * C294 +
            (C38391 + C38392 + C38393) * C300 +
            (C38394 + C38395 + C38396) * C295) *
               C51186) *
              C50972 * C50991 * C1831 +
          (((C37481 + C37480 + C37479) * C299 -
            ((C36974 + C36973 + C36972) * C293 +
             (C36971 + C36970 + C36969) * C298) +
            (C37484 + C37483 + C37482) * C294 -
            (C38393 + C38392 + C38391) * C300 -
            (C38396 + C38395 + C38394) * C295) *
               C34007 +
           ((C37887 + C37888 + C37889) * C299 -
            ((C36975 + C36976 + C36977) * C293 +
             (C36978 + C36979 + C36980) * C298) +
            (C37890 + C37891 + C37892) * C294 -
            (C2451 * C21076 + C2446 * C21077 + C2450 * C3844 + C2445 * C3846 +
             C2449 * C2846 + C2444 * C2849) *
                C300 -
            (C2451 * C21078 + C2446 * C21079 + C2450 * C3847 + C2445 * C3850 +
             C2449 * C2850 + C2444 * C2855) *
                C295) *
               C51186) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C39356 +
            (C5715 + C5716) * C39357 + C5727 * C39358 + C39557 * C39359) *
               C50972 * C1119 -
           (C5729 * C39359 + C5685 * C39358 + C5686 * C39357 +
            (C179 + C178) * C39356) *
               C50972 * C1120 +
           (C188 * C39356 + C6036 * C39357 + C6037 * C39358 +
            (C5721 + C5722) * C39359) *
               C50972 * C1121) *
              C1831 +
          ((C5682 * C39356 + C5683 * C39357 + C5728 * C39358 +
            (C5725 + C5726) * C39359) *
               C50972 * C1120 -
           ((C7661 + C7660) * C39359 + C7653 * C39358 +
            (C5718 + C5717) * C39357 + (C5716 + C5715) * C39356) *
               C50972 * C1119 -
           (((C117 * C5668 + C51106 * C5672) * C51009 +
             (C117 * C5663 + C51106 * C5669) * C118) *
                C39359 +
            (C5722 + C5721) * C39358 + C5684 * C39357 + C833 * C39356) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C298 +
            (C117 * C127 + C51106 * C140) * C293 -
            (C117 * C301 + C51106 * C311) * C299 -
            (C117 * C312 + C51106 * C331) * C294 +
            (C117 * C302 + C51106 * C313) * C300 +
            (C117 * C314 + C51106 * C332) * C295) *
               C39356 +
           (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C39357 +
           (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C39358 +
           (C40693 + C40694 - C40695 - C40696 + C40697 + C40698) * C39359) *
              C50972 * C50991 * C1831 +
          ((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C39356 +
           (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C39357 +
           (C40695 - (C40694 + C40693) + C40696 - C40697 - C40698) * C39358 +
           (C40154 * C299 - (C7659 * C293 + C7658 * C298) + C40155 * C294 -
            (C117 * C23362 + C51106 * C23363) * C300 -
            (C117 * C23364 + C51106 * C23365) * C295) *
               C39359) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51302 +
            (C6236 + C6237 - C6268 - C6269) * C51303 + C8154 * C44702) *
               C51236 +
           ((C694 + C695 - C696 - C697) * C51302 + C6272 * C51303 +
            C6273 * C44702) *
               C50977) *
              C51294 +
          (((C696 - (C695 + C694) + C697) * C51302 + C6274 * C51303 +
            C6275 * C44702) *
               C51236 +
           ((C700 - (C699 + C698) + C701) * C51302 + C11926 * C51303 +
            (C5888 - (C5882 + C5883) + C5889) * C44702) *
               C50977) *
              C51295 +
          ((C720 * C51302 + C11577 * C51303 +
            (C5883 + C5882 - C5888 - C5889) * C44702) *
               C51236 +
           (C721 * C51302 + (C1005 + C1004 - C1018 - C1019) * C51303 +
            (C571 * C687 + C572 * C51251 -
             (C117 * C1340 + C51106 * C1347) * C688 -
             (C117 * C1348 + C51106 * C1352) * C51061) *
                C44702) *
               C50977) *
              C686) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C51302 +
             (C6236 + C6237 - C6268 - C6269) * C51303 + C8154 * C44702) *
                C51236 +
            ((C694 + C695 - C696 - C697) * C51302 + C6272 * C51303 +
             C6273 * C44702) *
                C50977) *
               C296 +
           (((C696 - (C695 + C694) + C697) * C51302 + C6274 * C51303 +
             C6275 * C44702) *
                C51236 +
            ((C700 - (C699 + C698) + C701) * C51302 + C11926 * C51303 +
             (C5888 - (C5882 + C5883) + C5889) * C44702) *
                C50977) *
               C50996) *
              C51252 +
          ((((C6268 - (C6237 + C6236) + C6269) * C51302 +
             (C6270 - (C6243 + C6242) + C6271) * C51303 +
             (C8149 - (C8150 + C8151) + C8152) * C44702) *
                C51236 +
            (C6274 * C51302 + C6275 * C51303 +
             (C6276 - (C6254 + C6255) + C6277) * C44702) *
                C50977) *
               C296 +
           ((C6272 * C51302 + C6273 * C51303 +
             (C6255 + C6254 - C6276 - C6277) * C44702) *
                C51236 +
            (C11577 * C51302 + (C5883 + C5882 - C5888 - C5889) * C51303 +
             (C5709 * C687 + C5710 * C51251 -
              (C117 * C6231 + C51106 * C6232) * C688 -
              (C117 * C6233 + C51106 * C6234) * C51061) *
                 C44702) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C51302 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51303 +
            (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C44702) *
               C51236 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C51302 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51303 +
            (C5494 + C5495 - C5512 - C5513 + C5514 + C5515) * C44702) *
               C50977) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C51302 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51303 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C44702) *
               C51236 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C51302 +
            (C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51303 +
            (C5886 * C299 - (C570 * C293 + C569 * C298) + C5887 * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C44702) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51302 +
            (C5715 + C5716) * C51303 + C5727 * C44702) *
               C51236 +
           ((C178 + C179) * C51302 + C5682 * C51303 + C5683 * C44702) *
               C50977) *
              C112 -
          ((C5684 * C44702 + C833 * C51303 + (C181 + C180) * C51302) * C50977 +
           (C5685 * C44702 + C5686 * C51303 + (C179 + C178) * C51302) *
               C51236) *
              C113 +
          ((C188 * C51302 + C6036 * C51303 + C6037 * C44702) * C51236 +
           (C189 * C51302 + C11726 * C51303 + (C583 + C584) * C44702) *
               C50977) *
              C114 -
          ((((C117 * C524 + C51106 * C535) * C51009 +
             (C117 * C505 + C51106 * C525) * C118) *
                C44702 +
            (C839 + C838) * C51303 + C190 * C51302) *
               C50977 +
           ((C584 + C583) * C44702 + C832 * C51303 + C191 * C51302) * C51236) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51302 +
             (C5715 + C5716) * C51303 + C5727 * C44702) *
                C51236 +
            ((C178 + C179) * C51302 + C5682 * C51303 + C5683 * C44702) *
                C50977) *
               C296 -
           ((C5684 * C44702 + C833 * C51303 + (C181 + C180) * C51302) * C50977 +
            (C5685 * C44702 + C5686 * C51303 + (C179 + C178) * C51302) *
                C51236) *
               C50996) *
              C493 +
          (((C5682 * C51302 + C5683 * C51303 + C5728 * C44702) * C51236 +
            (C6036 * C51302 + C6037 * C51303 + (C5721 + C5722) * C44702) *
                C50977) *
               C50996 -
           ((C5729 * C44702 + C5685 * C51303 + C5686 * C51302) * C50977 +
            (C7653 * C44702 + (C5718 + C5717) * C51303 +
             (C5716 + C5715) * C51302) *
                C51236) *
               C296) *
              C494 +
          (((C5727 * C51302 + C39557 * C51303 + (C7660 + C7661) * C44702) *
                C51236 +
            (C5683 * C51302 + C5728 * C51303 + (C5725 + C5726) * C44702) *
                C50977) *
               C296 -
           ((((C117 * C5668 + C51106 * C5672) * C51009 +
              (C117 * C5663 + C51106 * C5669) * C118) *
                 C44702 +
             (C5722 + C5721) * C51303 + C5684 * C51302) *
                C50977 +
            ((C5726 + C5725) * C44702 + C5729 * C51303 + C5685 * C51302) *
                C51236) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51302 +
             (C5715 + C5716) * C51303 + C5727 * C44702) *
                C51236 +
            ((C178 + C179) * C51302 + C5682 * C51303 + C5683 * C44702) *
                C50977) *
               C51294 -
           ((C5684 * C44702 + C833 * C51303 + (C181 + C180) * C51302) * C50977 +
            (C5685 * C44702 + C5686 * C51303 + (C179 + C178) * C51302) *
                C51236) *
               C51295 +
           ((C188 * C51302 + C6036 * C51303 + C6037 * C44702) * C51236 +
            (C189 * C51302 + C11726 * C51303 + (C583 + C584) * C44702) *
                C50977) *
               C686) *
              C51252 +
          (((C5682 * C51302 + C5683 * C51303 + C5728 * C44702) * C51236 +
            (C6036 * C51302 + C6037 * C51303 + (C5721 + C5722) * C44702) *
                C50977) *
               C51295 -
           ((C5729 * C44702 + C5685 * C51303 + C5686 * C51302) * C50977 +
            (C7653 * C44702 + (C5718 + C5717) * C51303 +
             (C5716 + C5715) * C51302) *
                C51236) *
               C51294 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C44702 +
             (C584 + C583) * C51303 + C832 * C51302) *
                C50977 +
            ((C5722 + C5721) * C44702 + C5684 * C51303 + C833 * C51302) *
                C51236) *
               C686) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51302 +
            (C5715 + C5716) * C51303 + C5727 * C44702) *
               C51236 +
           ((C178 + C179) * C51302 + C5682 * C51303 + C5683 * C44702) *
               C50977) *
              C112 -
          ((C5684 * C44702 + C833 * C51303 + (C181 + C180) * C51302) * C50977 +
           (C5685 * C44702 + C5686 * C51303 + (C179 + C178) * C51302) *
               C51236) *
              C113 +
          ((C188 * C51302 + C6036 * C51303 + C6037 * C44702) * C51236 +
           (C189 * C51302 + C11726 * C51303 + (C583 + C584) * C44702) *
               C50977) *
              C114 -
          ((((C117 * C524 + C51106 * C535) * C51009 +
             (C117 * C505 + C51106 * C525) * C118) *
                C44702 +
            (C839 + C838) * C51303 + C190 * C51302) *
               C50977 +
           ((C584 + C583) * C44702 + C832 * C51303 + C191 * C51302) * C51236) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C51302 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51303 +
            (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C44702) *
               C51236 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C51302 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51303 +
            (C5494 + C5495 - C5512 - C5513 + C5514 + C5515) * C44702) *
               C50977) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C51302 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51303 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C44702) *
               C51236 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C51302 +
            (C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51303 +
            (C5886 * C299 - (C570 * C293 + C569 * C298) + C5887 * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C44702) *
               C50977) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C51302 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C51303 +
            (C7227 + C7228 - C7229 - C7230 + C7241 + C7242) * C44702) *
               C51236 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C51302 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C51303 +
            (C6864 + C6865 - C6866 - C6867 + C6868 + C6869) * C44702) *
               C50977) *
              C51243 +
          (((C1462 - (C1461 + C1460) + C1463 - C1464 - C1465) * C51302 +
            (C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C51303 +
            (C6866 - (C6865 + C6864) + C6867 - C6868 - C6869) * C44702) *
               C51236 +
           ((C1468 - (C1467 + C1466) + C1469 - C1470 - C1471) * C51302 +
            (C12471 - (C12470 + C12469) + C12472 - C12473 - C12474) * C51303 +
            (C5886 * C1457 - (C570 * C51296 + C569 * C1456) + C5887 * C51297 -
             (C117 * C2848 + C51106 * C2854) * C1458 -
             (C117 * C2853 + C51106 * C2857) * C1453) *
                C44702) *
               C50977) *
              C50996) *
         C51025) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C51302 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C51303 +
            (C7227 + C7228 - C7229 - C7230 + C7241 + C7242) * C44702) *
               C51236 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C51302 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C51303 +
            (C6864 + C6865 - C6866 - C6867 + C6868 + C6869) * C44702) *
               C50977) *
              C50991 * C51252 +
          (((C7221 - (C7220 + C7219) + C7222 - C7239 - C7240) * C51302 +
            (C7229 - (C7228 + C7227) + C7230 - C7241 - C7242) * C51303 +
            (C40487 - (C40486 + C40485) + C40488 - C40495 - C40496) * C44702) *
               C51236 +
           ((C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C51302 +
            (C6866 - (C6865 + C6864) + C6867 - C6868 - C6869) * C51303 +
            (C6266 * C1457 - (C5708 * C51296 + C5707 * C1456) + C6267 * C51297 -
             (C117 * C4736 + C51106 * C4742) * C1458 -
             (C117 * C4740 + C51106 * C4748) * C1453) *
                C44702) *
               C50977) *
              C50991 * C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C51302 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            C7235 * C1221 + C7236 * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C51303 +
           (C5705 * C1219 + C5706 * C1214 - C6260 * C1220 - C6261 * C1215 +
            C7237 * C1221 + C7238 * C1216 -
            (C117 * C3844 + C51106 * C3846) * C1222 -
            (C117 * C3847 + C51106 * C3850) * C1217) *
               C44702) *
              C51236 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C51302 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C51303 +
           (C567 * C1219 + C568 * C1214 - C5506 * C1220 - C5507 * C1215 +
            C5508 * C1221 + C5509 * C1216 -
            (C117 * C3845 + C51106 * C3848) * C1222 -
            (C117 * C3849 + C51106 * C3851) * C1217) *
               C44702) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51302 +
            (C6684 + C6685 - C6686 - C6687) * C51303 + C6711 * C44702) *
               C51236 +
           ((C1125 + C1126 - C1127 - C1128) * C51302 + C7070 * C51303 +
            C6708 * C44702) *
               C50977) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C51302 + C7071 * C51303 +
            C7072 * C44702) *
               C51236 +
           ((C1131 - (C1130 + C1129) + C1132) * C51302 + C12671 * C51303 +
            (C6428 - (C6429 + C6430) + C6431) * C44702) *
               C50977) *
              C1120 +
          ((C1145 * C51302 + C12076 * C51303 +
            (C6430 + C6429 - C6428 - C6431) * C44702) *
               C51236 +
           (C1146 * C51302 + (C1618 + C1617 - C1616 - C1619) * C51303 +
            (C571 * C1122 + C572 * C1117 -
             (C117 * C1340 + C51106 * C1347) * C1123 -
             (C117 * C1348 + C51106 * C1352) * C51061) *
                C44702) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51302 +
            (C6684 + C6685 - C6686 - C6687) * C51303 + C6711 * C44702) *
               C51236 +
           ((C1125 + C1126 - C1127 - C1128) * C51302 + C7070 * C51303 +
            C6708 * C44702) *
               C50977) *
              C50991 * C493 +
          (((C6686 - (C6685 + C6684) + C6687) * C51302 +
            (C6690 - (C6689 + C6688) + C6691) * C51303 +
            (C6709 - (C6695 + C6696) + C6710) * C44702) *
               C51236 +
           (C7071 * C51302 + C7072 * C51303 +
            (C6699 - (C6700 + C6701) + C6702) * C44702) *
               C50977) *
              C50991 * C494 +
          ((C6711 * C51302 + C40156 * C51303 +
            (C40150 + C40149 - C40157 - C40158) * C44702) *
               C51236 +
           (C6708 * C51302 + (C6701 + C6700 - C6699 - C6702) * C51303 +
            (C5713 * C1122 + C5714 * C1117 -
             (C117 * C6676 + C51106 * C6679) * C1123 -
             (C117 * C6680 + C51106 * C6682) * C51061) *
                C44702) *
               C50977) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C1122 +
              (C117 * C127 + C51106 * C140) * C1117 -
              (C117 * C301 + C51106 * C311) * C1123 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C51302 +
             (C6684 + C6685 - C6686 - C6687) * C51303 + C6711 * C44702) *
                C51236 +
            ((C1125 + C1126 - C1127 - C1128) * C51302 + C7070 * C51303 +
             C6708 * C44702) *
                C50977) *
               C51243 +
           (((C1127 - (C1126 + C1125) + C1128) * C51302 + C7071 * C51303 +
             C7072 * C44702) *
                C51236 +
            ((C1131 - (C1130 + C1129) + C1132) * C51302 + C12671 * C51303 +
             (C6428 - (C6429 + C6430) + C6431) * C44702) *
                C50977) *
               C50996) *
              C51252 +
          ((((C6686 - (C6685 + C6684) + C6687) * C51302 +
             (C6690 - (C6689 + C6688) + C6691) * C51303 +
             (C6709 - (C6695 + C6696) + C6710) * C44702) *
                C51236 +
            (C7071 * C51302 + C7072 * C51303 +
             (C6699 - (C6700 + C6701) + C6702) * C44702) *
                C50977) *
               C51243 +
           ((C7070 * C51302 + C6708 * C51303 +
             (C6701 + C6700 - C6699 - C6702) * C44702) *
                C51236 +
            (C12076 * C51302 + (C6430 + C6429 - C6428 - C6431) * C51303 +
             (C5709 * C1122 + C5710 * C1117 -
              (C117 * C6231 + C51106 * C6232) * C1123 -
              (C117 * C6233 + C51106 * C6234) * C51061) *
                 C44702) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51302 +
            (C6684 + C6685 - C6686 - C6687) * C51303 + C6711 * C44702) *
               C51236 +
           ((C1125 + C1126 - C1127 - C1128) * C51302 + C7070 * C51303 +
            C6708 * C44702) *
               C50977) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C51302 + C7071 * C51303 +
            C7072 * C44702) *
               C51236 +
           ((C1131 - (C1130 + C1129) + C1132) * C51302 + C12671 * C51303 +
            (C6428 - (C6429 + C6430) + C6431) * C44702) *
               C50977) *
              C1120 +
          ((C1145 * C51302 + C12076 * C51303 +
            (C6430 + C6429 - C6428 - C6431) * C44702) *
               C51236 +
           (C1146 * C51302 + (C1618 + C1617 - C1616 - C1619) * C51303 +
            (C571 * C1122 + C572 * C1117 -
             (C117 * C1340 + C51106 * C1347) * C1123 -
             (C117 * C1348 + C51106 * C1352) * C51061) *
                C44702) *
               C50977) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C51302 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            C7235 * C1221 + C7236 * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C51303 +
           (C5705 * C1219 + C5706 * C1214 - C6260 * C1220 - C6261 * C1215 +
            C7237 * C1221 + C7238 * C1216 -
            (C117 * C3844 + C51106 * C3846) * C1222 -
            (C117 * C3847 + C51106 * C3850) * C1217) *
               C44702) *
              C51236 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C51302 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C51303 +
           (C567 * C1219 + C568 * C1214 - C5506 * C1220 - C5507 * C1215 +
            C5508 * C1221 + C5509 * C1216 -
            (C117 * C3845 + C51106 * C3848) * C1222 -
            (C117 * C3849 + C51106 * C3851) * C1217) *
               C44702) *
              C50977) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C51302 +
             (C6236 + C6237 - C6268 - C6269) * C51303 + C8154 * C44702) *
                C51236 +
            ((C694 + C695 - C696 - C697) * C51302 + C6272 * C51303 +
             C6273 * C44702) *
                C50977) *
               C51243 +
           (((C696 - (C695 + C694) + C697) * C51302 + C6274 * C51303 +
             C6275 * C44702) *
                C51236 +
            ((C700 - (C699 + C698) + C701) * C51302 + C11926 * C51303 +
             (C5888 - (C5882 + C5883) + C5889) * C44702) *
                C50977) *
               C50996) *
              C1831 +
          ((((C6268 - (C6237 + C6236) + C6269) * C51302 +
             (C6270 - (C6243 + C6242) + C6271) * C51303 +
             (C8149 - (C8150 + C8151) + C8152) * C44702) *
                C51236 +
            (C6274 * C51302 + C6275 * C51303 +
             (C6276 - (C6254 + C6255) + C6277) * C44702) *
                C50977) *
               C51243 +
           ((C6272 * C51302 + C6273 * C51303 +
             (C6255 + C6254 - C6276 - C6277) * C44702) *
                C51236 +
            (C11577 * C51302 + (C5883 + C5882 - C5888 - C5889) * C51303 +
             (C5709 * C687 + C5710 * C51251 -
              (C117 * C6231 + C51106 * C6232) * C688 -
              (C117 * C6233 + C51106 * C6234) * C51061) *
                 C44702) *
                C50977) *
               C50996) *
              C51089)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C51302 +
            (C6236 + C6237 - C6268 - C6269) * C51303 + C8154 * C44702) *
               C51236 +
           ((C694 + C695 - C696 - C697) * C51302 + C6272 * C51303 +
            C6273 * C44702) *
               C50977) *
              C50991 * C51298 +
          (((C6268 - (C6237 + C6236) + C6269) * C51302 +
            (C6270 - (C6243 + C6242) + C6271) * C51303 +
            (C8149 - (C8150 + C8151) + C8152) * C44702) *
               C51236 +
           (C6274 * C51302 + C6275 * C51303 +
            (C6276 - (C6254 + C6255) + C6277) * C44702) *
               C50977) *
              C50991 * C51299 +
          ((C8154 * C51302 + C41110 * C51303 +
            (C41107 + C41106 - C41105 - C41108) * C44702) *
               C51236 +
           (C6273 * C51302 + (C6255 + C6254 - C6276 - C6277) * C51303 +
            (C5713 * C687 + C5714 * C51251 -
             (C117 * C6676 + C51106 * C6679) * C688 -
             (C117 * C6680 + C51106 * C6682) * C51061) *
                C44702) *
               C50977) *
              C50991 * C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C51302 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51303 +
            (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C44702) *
               C51236 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C51302 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51303 +
            (C5494 + C5495 - C5512 - C5513 + C5514 + C5515) * C44702) *
               C50977) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C51302 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C51303 +
            (C40695 - (C40694 + C40693) + C40696 - C40697 - C40698) * C44702) *
               C51236 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51302 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C51303 +
            (C6266 * C299 - (C5708 * C293 + C5707 * C298) + C6267 * C294 -
             (C117 * C4736 + C51106 * C4742) * C300 -
             (C117 * C4740 + C51106 * C4748) * C295) *
                C44702) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51302 +
             (C5715 + C5716) * C51303 + C5727 * C44702) *
                C51236 +
            ((C178 + C179) * C51302 + C5682 * C51303 + C5683 * C44702) *
                C50977) *
               C1119 -
           ((C5684 * C44702 + C833 * C51303 + (C181 + C180) * C51302) * C50977 +
            (C5685 * C44702 + C5686 * C51303 + (C179 + C178) * C51302) *
                C51236) *
               C1120 +
           ((C188 * C51302 + C6036 * C51303 + C6037 * C44702) * C51236 +
            (C189 * C51302 + C11726 * C51303 + (C583 + C584) * C44702) *
                C50977) *
               C1121) *
              C1831 +
          (((C5682 * C51302 + C5683 * C51303 + C5728 * C44702) * C51236 +
            (C6036 * C51302 + C6037 * C51303 + (C5721 + C5722) * C44702) *
                C50977) *
               C1120 -
           ((C5729 * C44702 + C5685 * C51303 + C5686 * C51302) * C50977 +
            (C7653 * C44702 + (C5718 + C5717) * C51303 +
             (C5716 + C5715) * C51302) *
                C51236) *
               C1119 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C44702 +
             (C584 + C583) * C51303 + C832 * C51302) *
                C50977 +
            ((C5722 + C5721) * C44702 + C5684 * C51303 + C833 * C51302) *
                C51236) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C51302 +
            (C5715 + C5716) * C51303 + C5727 * C44702) *
               C51236 +
           ((C178 + C179) * C51302 + C5682 * C51303 + C5683 * C44702) *
               C50977) *
              C50991 * C1997 -
          ((C5729 * C44702 + C5685 * C51303 + C5686 * C51302) * C50977 +
           (C7653 * C44702 + (C5718 + C5717) * C51303 +
            (C5716 + C5715) * C51302) *
               C51236) *
              C50991 * C1998 +
          ((C5727 * C51302 + C39557 * C51303 + (C7660 + C7661) * C44702) *
               C51236 +
           (C5683 * C51302 + C5728 * C51303 + (C5725 + C5726) * C44702) *
               C50977) *
              C50991 * C1999 -
          ((((C117 * C7646 + C51106 * C7650) * C51009 +
             (C117 * C7644 + C51106 * C7647) * C118) *
                C44702 +
            (C5726 + C5725) * C51303 + C5729 * C51302) *
               C50977 +
           ((C40777 + C40776) * C44702 + C40769 * C51303 + C7653 * C51302) *
               C51236) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51302 +
             (C5715 + C5716) * C51303 + C5727 * C44702) *
                C51236 +
            ((C178 + C179) * C51302 + C5682 * C51303 + C5683 * C44702) *
                C50977) *
               C51243 -
           ((C5684 * C44702 + C833 * C51303 + (C181 + C180) * C51302) * C50977 +
            (C5685 * C44702 + C5686 * C51303 + (C179 + C178) * C51302) *
                C51236) *
               C50996) *
              C51298 +
          (((C5682 * C51302 + C5683 * C51303 + C5728 * C44702) * C51236 +
            (C6036 * C51302 + C6037 * C51303 + (C5721 + C5722) * C44702) *
                C50977) *
               C50996 -
           ((C5729 * C44702 + C5685 * C51303 + C5686 * C51302) * C50977 +
            (C7653 * C44702 + (C5718 + C5717) * C51303 +
             (C5716 + C5715) * C51302) *
                C51236) *
               C51243) *
              C51299 +
          (((C5727 * C51302 + C39557 * C51303 + (C7660 + C7661) * C44702) *
                C51236 +
            (C5683 * C51302 + C5728 * C51303 + (C5725 + C5726) * C44702) *
                C50977) *
               C51243 -
           ((((C117 * C5668 + C51106 * C5672) * C51009 +
              (C117 * C5663 + C51106 * C5669) * C118) *
                 C44702 +
             (C5722 + C5721) * C51303 + C5684 * C51302) *
                C50977 +
            ((C5726 + C5725) * C44702 + C5729 * C51303 + C5685 * C51302) *
                C51236) *
               C50996) *
              C2247)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C51302 +
             (C5715 + C5716) * C51303 + C5727 * C44702) *
                C51236 +
            ((C178 + C179) * C51302 + C5682 * C51303 + C5683 * C44702) *
                C50977) *
               C1119 -
           ((C5684 * C44702 + C833 * C51303 + (C181 + C180) * C51302) * C50977 +
            (C5685 * C44702 + C5686 * C51303 + (C179 + C178) * C51302) *
                C51236) *
               C1120 +
           ((C188 * C51302 + C6036 * C51303 + C6037 * C44702) * C51236 +
            (C189 * C51302 + C11726 * C51303 + (C583 + C584) * C44702) *
                C50977) *
               C1121) *
              C1831 +
          (((C5682 * C51302 + C5683 * C51303 + C5728 * C44702) * C51236 +
            (C6036 * C51302 + C6037 * C51303 + (C5721 + C5722) * C44702) *
                C50977) *
               C1120 -
           ((C5729 * C44702 + C5685 * C51303 + C5686 * C51302) * C50977 +
            (C7653 * C44702 + (C5718 + C5717) * C51303 +
             (C5716 + C5715) * C51302) *
                C51236) *
               C1119 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C44702 +
             (C584 + C583) * C51303 + C832 * C51302) *
                C50977 +
            ((C5722 + C5721) * C44702 + C5684 * C51303 + C833 * C51302) *
                C51236) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C51302 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51303 +
            (C7541 + C7542 - C7543 - C7544 + C7545 + C7546) * C44702) *
               C51236 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C51302 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51303 +
            (C5494 + C5495 - C5512 - C5513 + C5514 + C5515) * C44702) *
               C50977) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C51302 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C51303 +
            (C40695 - (C40694 + C40693) + C40696 - C40697 - C40698) * C44702) *
               C51236 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51302 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C51303 +
            (C6266 * C299 - (C5708 * C293 + C5707 * C298) + C6267 * C294 -
             (C117 * C4736 + C51106 * C4742) * C300 -
             (C117 * C4740 + C51106 * C4748) * C295) *
                C44702) *
               C50977) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6236 + C6237 - C6268 - C6269) * C51186) *
               C17450 +
           ((C694 + C695 - C696 - C697) * C34007 + C6272 * C51186) * C17451 +
           C34456 * C17452) *
              C51294 +
          (((C696 - (C695 + C694) + C697) * C34007 + C6274 * C51186) * C17450 +
           ((C700 - (C699 + C698) + C701) * C34007 + C11926 * C51186) * C17451 +
           ((C704 - (C703 + C702) + C705) * C34007 +
            (C1018 - (C1004 + C1005) + C1019) * C51186) *
               C17452) *
              C51295 +
          (C34456 * C17450 +
           (C721 * C34007 + (C1005 + C1004 - C1018 - C1019) * C51186) * C17451 +
           ((C709 + C708 - C718 - C719) * C34007 +
            (C834 * C687 + C835 * C51251 -
             (C117 * C973 + C51106 * C982) * C688 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51186) *
               C17452) *
              C686) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C687 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51251 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C688 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C687 +
            (C36972 + C36973 + C36974) * C51251 -
            (C2451 * C3416 + C2446 * C3419 + C2450 * C1717 + C2445 * C1721 +
             C2449 * C969 + C2444 * C974) *
                C688 -
            (C2451 * C3420 + C2446 * C3425 + C2450 * C1722 + C2445 * C1729 +
             C2449 * C975 + C2444 * C984) *
                C51061) *
               C51186) *
              C50972 * C51294 +
          (((C2691 + C2690 + C2689) * C688 -
            ((C2494 + C2493 + C2492) * C51251 +
             (C2491 + C2490 + C2489) * C687) +
            (C2694 + C2693 + C2692) * C51061) *
               C34007 +
           ((C3441 + C3442 + C3443) * C688 -
            ((C2888 + C2887 + C2886) * C51251 +
             (C2885 + C2884 + C2883) * C687) +
            (C3444 + C3445 + C3446) * C51061) *
               C51186) *
              C50972 * C51295 +
          (((C2500 + C2499 + C2498) * C687 + (C2497 + C2496 + C2495) * C51251 -
            (C3055 + C3054 + C3053) * C688 - (C3058 + C3057 + C3056) * C51061) *
               C34007 +
           ((C3217 + C3218 + C3219) * C687 + (C3220 + C3221 + C3222) * C51251 -
            (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
             C2449 * C971 + C2444 * C978) *
                C688 -
            (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
             C2449 * C979 + C2444 * C986) *
                C51061) *
               C51186) *
              C50972 * C686) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C34007 +
             (C6236 + C6237 - C6268 - C6269) * C51186) *
                C17450 +
            ((C694 + C695 - C696 - C697) * C34007 + C6272 * C51186) * C17451 +
            C34456 * C17452) *
               C296 +
           (((C696 - (C695 + C694) + C697) * C34007 + C6274 * C51186) * C17450 +
            ((C700 - (C699 + C698) + C701) * C34007 + C11926 * C51186) *
                C17451 +
            ((C704 - (C703 + C702) + C705) * C34007 +
             (C1018 - (C1004 + C1005) + C1019) * C51186) *
                C17452) *
               C50996) *
              C51252 +
          ((((C6268 - (C6237 + C6236) + C6269) * C34007 +
             (C6270 - (C6243 + C6242) + C6271) * C51186) *
                C17450 +
            (C6274 * C34007 + C6275 * C51186) * C17451 +
            (C11926 * C34007 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
                C17452) *
               C296 +
           ((C6272 * C34007 + C6273 * C51186) * C17450 +
            (C11577 * C34007 + (C5883 + C5882 - C5888 - C5889) * C51186) *
                C17451 +
            ((C1005 + C1004 - C1018 - C1019) * C34007 +
             (C571 * C687 + C572 * C51251 -
              (C117 * C1340 + C51106 * C1347) * C688 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C687 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51251 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C688 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C34007 +
            ((C36969 + C36970 + C36971) * C687 +
             (C36972 + C36973 + C36974) * C51251 -
             (C37479 + C37480 + C37481) * C688 -
             (C37482 + C37483 + C37484) * C51061) *
                C51186) *
               C50972 * C296 +
           (((C2691 + C2690 + C2689) * C688 -
             ((C2494 + C2493 + C2492) * C51251 +
              (C2491 + C2490 + C2489) * C687) +
             (C2694 + C2693 + C2692) * C51061) *
                C34007 +
            ((C3441 + C3442 + C3443) * C688 -
             ((C2888 + C2887 + C2886) * C51251 +
              (C2885 + C2884 + C2883) * C687) +
             (C3444 + C3445 + C3446) * C51061) *
                C51186) *
               C50972 * C50996) *
              C51252 +
          ((((C37481 + C37480 + C37479) * C688 -
             ((C36974 + C36973 + C36972) * C51251 +
              (C36971 + C36970 + C36969) * C687) +
             (C37484 + C37483 + C37482) * C51061) *
                C34007 +
            ((C2449 * C1337 + C2444 * C1341 + C2450 * C2846 + C2445 * C2849 +
              C2451 * C3844 + C2446 * C3846) *
                 C688 -
             ((C36975 + C36976 + C36977) * C51251 +
              (C36978 + C36979 + C36980) * C687) +
             (C2449 * C1342 + C2444 * C1349 + C2450 * C2850 + C2445 * C2855 +
              C2451 * C3847 + C2446 * C3850) *
                 C51061) *
                C51186) *
               C50972 * C296 +
           (((C2883 + C2884 + C2885) * C687 + (C2886 + C2887 + C2888) * C51251 -
             (C3443 + C3442 + C3441) * C688 -
             (C3446 + C3445 + C3444) * C51061) *
                C34007 +
            ((C2889 + C2890 + C2891) * C687 + (C2892 + C2893 + C2894) * C51251 -
             (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
              C2449 * C1338 + C2444 * C1343) *
                 C688 -
             (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
              C2449 * C1344 + C2444 * C1350) *
                 C51061) *
                C51186) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C34007 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C17450 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C34007 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C17451 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C34007 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C17452) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C34007 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51186) *
               C17450 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C34007 +
            (C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51186) *
               C17451 +
           ((C392 - (C363 + C362) + C393 - C394 - C395) * C34007 +
            (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
             (C117 * C1720 + C51106 * C1727) * C300 -
             (C117 * C1728 + C51106 * C1732) * C295) *
                C51186) *
               C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C34007 +
            (C5715 + C5716) * C51186) *
               C17450 +
           ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
           C34014 * C17452) *
              C112 -
          (C34015 * C17452 + (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
           (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
              C113 +
          (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
           ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
              C114 -
          ((((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51186 +
            (C187 + C186) * C34007) *
               C17452 +
           ((C839 + C838) * C51186 + C190 * C34007) * C17451 +
           C34015 * C17450) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C296 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C50996) *
              C493 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C50996 -
           ((C5684 * C51186 + C833 * C34007) * C17452 +
            (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C296) *
              C494 +
          (((C5727 * C34007 + (C5724 + C5723) * C51186) * C17450 +
            (C5683 * C34007 + C5728 * C51186) * C17451 +
            (C6037 * C34007 + (C5721 + C5722) * C51186) * C17452) *
               C296 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C51186 +
             (C584 + C583) * C34007) *
                C17452 +
            ((C5722 + C5721) * C51186 + C5684 * C34007) * C17451 +
            (C5729 * C51186 + C5685 * C34007) * C17450) *
               C50996) *
              C495)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C34007 +
           ((C2449 * C500 + C2444 * C515 + C2450 * C969 + C2445 * C974 +
             C2451 * C1717 + C2446 * C1721) *
                C118 +
            (C2449 * C514 + C2444 * C530 + C2450 * C975 + C2445 * C984 +
             C2451 * C1722 + C2446 * C1729) *
                C51009) *
               C51186) *
              C50972 * C112 -
          (((C2888 + C2887 + C2886) * C51009 + (C2885 + C2884 + C2883) * C118) *
               C51186 +
           ((C2494 + C2493 + C2492) * C51009 + (C2491 + C2490 + C2489) * C118) *
               C34007) *
              C50972 * C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51009) *
               C34007 +
           ((C3217 + C3218 + C3219) * C118 + (C3220 + C3221 + C3222) * C51009) *
               C51186) *
              C50972 * C114 -
          (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
             C2449 * C511 + C2444 * C528) *
                C51009 +
            (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
             C2449 * C498 + C2444 * C510) *
                C118) *
               C51186 +
           ((C2506 + C2505 + C2504) * C51009 + (C2503 + C2502 + C2501) * C118) *
               C34007) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C34007 +
           ((C2449 * C500 + C2444 * C515 + C2450 * C969 + C2445 * C974 +
             C2451 * C1717 + C2446 * C1721) *
                C298 +
            (C2449 * C514 + C2444 * C530 + C2450 * C975 + C2445 * C984 +
             C2451 * C1722 + C2446 * C1729) *
                C293 -
            (C2451 * C3416 + C2446 * C3419 + C2450 * C1717 + C2445 * C1721 +
             C2449 * C969 + C2444 * C974) *
                C299 -
            (C2451 * C3420 + C2446 * C3425 + C2450 * C1722 + C2445 * C1729 +
             C2449 * C975 + C2444 * C984) *
                C294 +
            (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
             C2451 * C4338 + C2446 * C4340) *
                C300 +
            (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
             C2451 * C4341 + C2446 * C4344) *
                C295) *
               C51186) *
              C50972 * C296 +
          (((C2691 + C2690 + C2689) * C299 -
            ((C2494 + C2493 + C2492) * C293 + (C2491 + C2490 + C2489) * C298) +
            (C2694 + C2693 + C2692) * C294 - (C2697 + C2696 + C2695) * C300 -
            (C2700 + C2699 + C2698) * C295) *
               C34007 +
           ((C3441 + C3442 + C3443) * C299 -
            ((C2888 + C2887 + C2886) * C293 + (C2885 + C2884 + C2883) * C298) +
            (C3444 + C3445 + C3446) * C294 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C300 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C295) *
               C51186) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C296 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C50996) *
              C493 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C50996 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C296) *
              C494 +
          ((((C36980 + C36979 + C36978) * C118 +
             (C36977 + C36976 + C36975) * C51009) *
                C34007 +
            ((C2449 * C2004 + C2444 * C2012 + C2450 * C4739 + C2445 * C4747 +
              C2451 * C4738 + C2446 * C4746) *
                 C118 +
             (C2449 * C2011 + C2444 * C2016 + C2450 * C4745 + C2445 * C4751 +
              C2451 * C4744 + C2446 * C4750) *
                 C51009) *
                C51186) *
               C50972 * C296 -
           (((C2451 * C4740 + C2446 * C4748 + C2450 * C4741 + C2445 * C4749 +
              C2449 * C2009 + C2444 * C2015) *
                 C51009 +
             (C2451 * C4736 + C2446 * C4742 + C2450 * C4737 + C2445 * C4743 +
              C2449 * C2003 + C2444 * C2010) *
                 C118) *
                C51186 +
            ((C2894 + C2893 + C2892) * C51009 +
             (C2891 + C2890 + C2889) * C118) *
                C34007) *
               C50972 * C50996) *
              C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C51294 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C51295 +
           (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
            ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
               C686) *
              C51252 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C51295 -
           (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C51294 -
           ((((C117 * C524 + C51106 * C535) * C51009 +
              (C117 * C505 + C51106 * C525) * C118) *
                 C51186 +
             (C839 + C838) * C34007) *
                C17452 +
            ((C584 + C583) * C51186 + C832 * C34007) * C17451 +
            C34605 * C17450) *
               C686) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C51294 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C51295 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C34007 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51186) *
               C50972 * C686) *
              C51252 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C51295 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C51294 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51186 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C34007) *
               C50972 * C686) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C34007 +
            (C5715 + C5716) * C51186) *
               C17450 +
           ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
           C34014 * C17452) *
              C112 -
          (C34015 * C17452 + (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
           (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
              C113 +
          (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
           ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
              C114 -
          ((((C117 * C824 + C51106 * C826) * C51009 +
             (C117 * C823 + C51106 * C825) * C118) *
                C51186 +
            (C187 + C186) * C34007) *
               C17452 +
           ((C839 + C838) * C51186 + C190 * C34007) * C17451 +
           C34015 * C17450) *
              C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C34007 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C17450 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C34007 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C17451 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C34007 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C17452) *
              C296 +
          (((C384 - (C343 + C342) + C385 - C386 - C387) * C34007 +
            (C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C51186) *
               C17450 +
           ((C388 - (C353 + C352) + C389 - C390 - C391) * C34007 +
            (C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C51186) *
               C17451 +
           ((C392 - (C363 + C362) + C393 - C394 - C395) * C34007 +
            (C1012 * C299 - (C566 * C293 + C565 * C298) + C1013 * C294 -
             (C117 * C1720 + C51106 * C1727) * C300 -
             (C117 * C1728 + C51106 * C1732) * C295) *
                C51186) *
               C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C34007 +
           ((C2449 * C500 + C2444 * C515 + C2450 * C969 + C2445 * C974 +
             C2451 * C1717 + C2446 * C1721) *
                C118 +
            (C2449 * C514 + C2444 * C530 + C2450 * C975 + C2445 * C984 +
             C2451 * C1722 + C2446 * C1729) *
                C51009) *
               C51186) *
              C50972 * C112 -
          (((C2888 + C2887 + C2886) * C51009 + (C2885 + C2884 + C2883) * C118) *
               C51186 +
           ((C2494 + C2493 + C2492) * C51009 + (C2491 + C2490 + C2489) * C118) *
               C34007) *
              C50972 * C113 +
          (((C2500 + C2499 + C2498) * C118 + (C2497 + C2496 + C2495) * C51009) *
               C34007 +
           ((C3217 + C3218 + C3219) * C118 + (C3220 + C3221 + C3222) * C51009) *
               C51186) *
              C50972 * C114 -
          (((C2451 * C1728 + C2446 * C1732 + C2450 * C981 + C2445 * C987 +
             C2449 * C511 + C2444 * C528) *
                C51009 +
            (C2451 * C1720 + C2446 * C1727 + C2450 * C972 + C2445 * C980 +
             C2449 * C498 + C2444 * C510) *
                C118) *
               C51186 +
           ((C2506 + C2505 + C2504) * C51009 + (C2503 + C2502 + C2501) * C118) *
               C34007) *
              C50972 * C115) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C34007 +
           ((C2449 * C500 + C2444 * C515 + C2450 * C969 + C2445 * C974 +
             C2451 * C1717 + C2446 * C1721) *
                C298 +
            (C2449 * C514 + C2444 * C530 + C2450 * C975 + C2445 * C984 +
             C2451 * C1722 + C2446 * C1729) *
                C293 -
            (C2451 * C3416 + C2446 * C3419 + C2450 * C1717 + C2445 * C1721 +
             C2449 * C969 + C2444 * C974) *
                C299 -
            (C2451 * C3420 + C2446 * C3425 + C2450 * C1722 + C2445 * C1729 +
             C2449 * C975 + C2444 * C984) *
                C294 +
            (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
             C2451 * C4338 + C2446 * C4340) *
                C300 +
            (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
             C2451 * C4341 + C2446 * C4344) *
                C295) *
               C51186) *
              C50972 * C296 +
          (((C2691 + C2690 + C2689) * C299 -
            ((C2494 + C2493 + C2492) * C293 + (C2491 + C2490 + C2489) * C298) +
            (C2694 + C2693 + C2692) * C294 - (C2697 + C2696 + C2695) * C300 -
            (C2700 + C2699 + C2698) * C295) *
               C34007 +
           ((C3441 + C3442 + C3443) * C299 -
            ((C2888 + C2887 + C2886) * C293 + (C2885 + C2884 + C2883) * C298) +
            (C3444 + C3445 + C3446) * C294 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C300 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C295) *
               C51186) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C34007 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C51186) *
               C17450 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C34007 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C51186) *
               C17451 +
           ((C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C34007 +
            (C12469 + C12470 - C12471 - C12472 + C12473 + C12474) * C51186) *
               C17452) *
              C51243 +
          (((C1462 - (C1461 + C1460) + C1463 - C1464 - C1465) * C34007 +
            (C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C51186) *
               C17450 +
           ((C1468 - (C1467 + C1466) + C1469 - C1470 - C1471) * C34007 +
            (C12471 - (C12470 + C12469) + C12472 - C12473 - C12474) * C51186) *
               C17451 +
           ((C1474 - (C1473 + C1472) + C1475 - C1476 - C1477) * C34007 +
            (C1012 * C1457 - (C566 * C51296 + C565 * C1456) + C1013 * C51297 -
             (C117 * C1720 + C51106 * C1727) * C1458 -
             (C117 * C1728 + C51106 * C1732) * C1453) *
                C51186) *
               C17452) *
              C50996) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1456 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51296 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1457 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51297 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C1458 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C1453) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1456 +
            (C36972 + C36973 + C36974) * C51296 -
            (C37479 + C37480 + C37481) * C1457 -
            (C37482 + C37483 + C37484) * C51297 +
            (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
             C2451 * C4338 + C2446 * C4340) *
                C1458 +
            (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
             C2451 * C4341 + C2446 * C4344) *
                C1453) *
               C51186) *
              C50972 * C51243 +
          (((C2691 + C2690 + C2689) * C1457 -
            ((C2494 + C2493 + C2492) * C51296 +
             (C2491 + C2490 + C2489) * C1456) +
            (C2694 + C2693 + C2692) * C51297 - (C2697 + C2696 + C2695) * C1458 -
            (C2700 + C2699 + C2698) * C1453) *
               C34007 +
           ((C3441 + C3442 + C3443) * C1457 -
            ((C2888 + C2887 + C2886) * C51296 +
             (C2885 + C2884 + C2883) * C1456) +
            (C3444 + C3445 + C3446) * C51297 -
            (C2451 * C4339 + C2446 * C4342 + C2450 * C3417 + C2445 * C3421 +
             C2449 * C1718 + C2444 * C1723) *
                C1458 -
            (C2451 * C4343 + C2446 * C4345 + C2450 * C3422 + C2445 * C3426 +
             C2449 * C1724 + C2444 * C1730) *
                C1453) *
               C51186) *
              C50972 * C50996) *
         C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1456 +
             (C117 * C127 + C51106 * C140) * C51296 -
             (C117 * C301 + C51106 * C311) * C1457 -
             (C117 * C312 + C51106 * C331) * C51297 +
             (C117 * C302 + C51106 * C313) * C1458 +
             (C117 * C314 + C51106 * C332) * C1453) *
                C34007 +
            (C7219 + C7220 - C7221 - C7222 + C7239 + C7240) * C51186) *
               C17450 +
           ((C1460 + C1461 - C1462 - C1463 + C1464 + C1465) * C34007 +
            (C6858 + C6859 - C6860 - C6861 + C6862 + C6863) * C51186) *
               C17451 +
           ((C1466 + C1467 - C1468 - C1469 + C1470 + C1471) * C34007 +
            (C12469 + C12470 - C12471 - C12472 + C12473 + C12474) * C51186) *
               C17452) *
              C50991 * C51252 +
          (((C7221 - (C7220 + C7219) + C7222 - C7239 - C7240) * C34007 +
            (C7229 - (C7228 + C7227) + C7230 - C7241 - C7242) * C51186) *
               C17450 +
           ((C6860 - (C6859 + C6858) + C6861 - C6862 - C6863) * C34007 +
            (C6866 - (C6865 + C6864) + C6867 - C6868 - C6869) * C51186) *
               C17451 +
           ((C12471 - (C12470 + C12469) + C12472 - C12473 - C12474) * C34007 +
            (C5886 * C1457 - (C570 * C51296 + C569 * C1456) + C5887 * C51297 -
             (C117 * C2848 + C51106 * C2854) * C1458 -
             (C117 * C2853 + C51106 * C2857) * C1453) *
                C51186) *
               C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1456 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51296 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1457 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51297 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C1458 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C1453) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1456 +
            (C36972 + C36973 + C36974) * C51296 -
            (C37479 + C37480 + C37481) * C1457 -
            (C37482 + C37483 + C37484) * C51297 +
            (C38391 + C38392 + C38393) * C1458 +
            (C38394 + C38395 + C38396) * C1453) *
               C51186) *
              C50972 * C50991 * C51252 +
          (((C37481 + C37480 + C37479) * C1457 -
            ((C36974 + C36973 + C36972) * C51296 +
             (C36971 + C36970 + C36969) * C1456) +
            (C37484 + C37483 + C37482) * C51297 -
            (C38393 + C38392 + C38391) * C1458 -
            (C38396 + C38395 + C38394) * C1453) *
               C34007 +
           ((C37887 + C37888 + C37889) * C1457 -
            ((C36975 + C36976 + C36977) * C51296 +
             (C36978 + C36979 + C36980) * C1456) +
            (C37890 + C37891 + C37892) * C51297 -
            (C2451 * C21076 + C2446 * C21077 + C2450 * C3844 + C2445 * C3846 +
             C2449 * C2846 + C2444 * C2849) *
                C1458 -
            (C2451 * C21078 + C2446 * C21079 + C2450 * C3847 + C2445 * C3850 +
             C2449 * C2850 + C2444 * C2855) *
                C1453) *
               C51186) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C34007 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            C7235 * C1221 + C7236 * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C51186) *
              C17450 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C34007 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C51186) *
              C17451 +
          ((C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
            C378 * C1221 + C379 * C1216 -
            (C117 * C1225 + C51106 * C1231) * C1222 -
            (C117 * C1232 + C51106 * C1237) * C1217) *
               C34007 +
           (C563 * C1219 + C564 * C1214 - C1010 * C1220 - C1011 * C1215 +
            C11278 * C1221 + C11279 * C1216 -
            (C117 * C3418 + C51106 * C3423) * C1222 -
            (C117 * C3424 + C51106 * C3427) * C1217) *
               C51186) *
              C17452) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6684 + C6685 - C6686 - C6687) * C51186) *
               C17450 +
           ((C1125 + C1126 - C1127 - C1128) * C34007 + C7070 * C51186) *
               C17451 +
           C34948 * C17452) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C34007 + C7071 * C51186) *
               C17450 +
           ((C1131 - (C1130 + C1129) + C1132) * C34007 + C12671 * C51186) *
               C17451 +
           ((C1135 - (C1134 + C1133) + C1136) * C34007 +
            (C1616 - (C1617 + C1618) + C1619) * C51186) *
               C17452) *
              C1120 +
          (C34948 * C17450 +
           (C1146 * C34007 + (C1618 + C1617 - C1616 - C1619) * C51186) *
               C17451 +
           ((C1139 + C1138 - C1137 - C1140) * C34007 +
            (C834 * C1122 + C835 * C1117 -
             (C117 * C973 + C51106 * C982) * C1123 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51186) *
               C17452) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6684 + C6685 - C6686 - C6687) * C51186) *
               C17450 +
           ((C1125 + C1126 - C1127 - C1128) * C34007 + C7070 * C51186) *
               C17451 +
           C34948 * C17452) *
              C50991 * C493 +
          (((C6686 - (C6685 + C6684) + C6687) * C34007 +
            (C6690 - (C6689 + C6688) + C6691) * C51186) *
               C17450 +
           (C7071 * C34007 + C7072 * C51186) * C17451 +
           (C12671 * C34007 + (C6428 - (C6429 + C6430) + C6431) * C51186) *
               C17452) *
              C50991 * C494 +
          ((C6711 * C34007 + (C6696 + C6695 - C6709 - C6710) * C51186) *
               C17450 +
           (C6708 * C34007 + (C6701 + C6700 - C6699 - C6702) * C51186) *
               C17451 +
           ((C6430 + C6429 - C6428 - C6431) * C34007 +
            (C5709 * C1122 + C5710 * C1117 -
             (C117 * C6231 + C51106 * C6232) * C1123 -
             (C117 * C6233 + C51106 * C6234) * C51061) *
                C51186) *
               C17452) *
              C50991 * C495)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1122 +
            (C36972 + C36973 + C36974) * C1117 -
            (C37479 + C37480 + C37481) * C1123 -
            (C37482 + C37483 + C37484) * C51061) *
               C51186) *
              C50972 * C1119 +
          (((C2691 + C2690 + C2689) * C1123 -
            ((C2494 + C2493 + C2492) * C1117 +
             (C2491 + C2490 + C2489) * C1122) +
            (C2694 + C2693 + C2692) * C51061) *
               C34007 +
           ((C3441 + C3442 + C3443) * C1123 -
            ((C2888 + C2887 + C2886) * C1117 +
             (C2885 + C2884 + C2883) * C1122) +
            (C3444 + C3445 + C3446) * C51061) *
               C51186) *
              C50972 * C1120 +
          (((C2500 + C2499 + C2498) * C1122 + (C2497 + C2496 + C2495) * C1117 -
            (C3055 + C3054 + C3053) * C1123 -
            (C3058 + C3057 + C3056) * C51061) *
               C34007 +
           ((C3217 + C3218 + C3219) * C1122 + (C3220 + C3221 + C3222) * C1117 -
            (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
             C2449 * C971 + C2444 * C978) *
                C1123 -
            (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
             C2449 * C979 + C2444 * C986) *
                C51061) *
               C51186) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
            C2451 * C302 + C2446 * C313) *
               C1219 +
           (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
            C2451 * C314 + C2446 * C332) *
               C1214 -
           (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
            C2449 * C301 + C2444 * C311) *
               C1220 -
           (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
            C2449 * C312 + C2444 * C331) *
               C1215 +
           (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
            C2451 * C2652 + C2446 * C2655) *
               C1221 +
           (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
            C2451 * C2656 + C2446 * C2661) *
               C1216 -
           (C2451 * C3690 + C2446 * C3692 + C2450 * C2652 + C2445 * C2655 +
            C2449 * C1223 + C2444 * C1227) *
               C1222 -
           (C2451 * C3693 + C2446 * C3696 + C2450 * C2656 + C2445 * C2661 +
            C2449 * C1228 + C2444 * C1235) *
               C1217) *
              C34007 +
          ((C36969 + C36970 + C36971) * C1219 +
           (C36972 + C36973 + C36974) * C1214 -
           (C37479 + C37480 + C37481) * C1220 -
           (C37482 + C37483 + C37484) * C1215 +
           (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
            C2451 * C4338 + C2446 * C4340) *
               C1221 +
           (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
            C2451 * C4341 + C2446 * C4344) *
               C1216 -
           (C2451 * C21406 + C2446 * C21407 + C2450 * C4338 + C2445 * C4340 +
            C2449 * C3416 + C2444 * C3419) *
               C1222 -
           (C2451 * C21408 + C2446 * C21409 + C2450 * C4341 + C2445 * C4344 +
            C2449 * C3420 + C2444 * C3425) *
               C1217) *
              C51186) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1122 +
            (C36972 + C36973 + C36974) * C1117 -
            (C37479 + C37480 + C37481) * C1123 -
            (C37482 + C37483 + C37484) * C51061) *
               C51186) *
              C50972 * C50991 * C493 +
          (((C37481 + C37480 + C37479) * C1123 -
            ((C36974 + C36973 + C36972) * C1117 +
             (C36971 + C36970 + C36969) * C1122) +
            (C37484 + C37483 + C37482) * C51061) *
               C34007 +
           ((C37887 + C37888 + C37889) * C1123 -
            ((C36975 + C36976 + C36977) * C1117 +
             (C36978 + C36979 + C36980) * C1122) +
            (C37890 + C37891 + C37892) * C51061) *
               C51186) *
              C50972 * C50991 * C494 +
          (((C36980 + C36979 + C36978) * C1122 +
            (C36977 + C36976 + C36975) * C1117 -
            (C37889 + C37888 + C37887) * C1123 -
            (C37892 + C37891 + C37890) * C51061) *
               C34007 +
           ((C2449 * C2004 + C2444 * C2012 + C2450 * C4739 + C2445 * C4747 +
             C2451 * C4738 + C2446 * C4746) *
                C1122 +
            (C2449 * C2011 + C2444 * C2016 + C2450 * C4745 + C2445 * C4751 +
             C2451 * C4744 + C2446 * C4750) *
                C1117 -
            (C2451 * C21672 + C2446 * C21674 + C2450 * C4738 + C2445 * C4746 +
             C2449 * C4739 + C2444 * C4747) *
                C1123 -
            (C2451 * C21673 + C2446 * C21675 + C2450 * C4744 + C2445 * C4750 +
             C2449 * C4745 + C2444 * C4751) *
                C51061) *
               C51186) *
              C50972 * C50991 * C495)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C1122 +
              (C117 * C127 + C51106 * C140) * C1117 -
              (C117 * C301 + C51106 * C311) * C1123 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C34007 +
             (C6684 + C6685 - C6686 - C6687) * C51186) *
                C17450 +
            ((C1125 + C1126 - C1127 - C1128) * C34007 + C7070 * C51186) *
                C17451 +
            C34948 * C17452) *
               C51243 +
           (((C1127 - (C1126 + C1125) + C1128) * C34007 + C7071 * C51186) *
                C17450 +
            ((C1131 - (C1130 + C1129) + C1132) * C34007 + C12671 * C51186) *
                C17451 +
            ((C1135 - (C1134 + C1133) + C1136) * C34007 +
             (C1616 - (C1617 + C1618) + C1619) * C51186) *
                C17452) *
               C50996) *
              C51252 +
          ((((C6686 - (C6685 + C6684) + C6687) * C34007 +
             (C6690 - (C6689 + C6688) + C6691) * C51186) *
                C17450 +
            (C7071 * C34007 + C7072 * C51186) * C17451 +
            (C12671 * C34007 + (C6428 - (C6429 + C6430) + C6431) * C51186) *
                C17452) *
               C51243 +
           ((C7070 * C34007 + C6708 * C51186) * C17450 +
            (C12076 * C34007 + (C6430 + C6429 - C6428 - C6431) * C51186) *
                C17451 +
            ((C1618 + C1617 - C1616 - C1619) * C34007 +
             (C571 * C1122 + C572 * C1117 -
              (C117 * C1340 + C51106 * C1347) * C1123 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C1122 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C1117 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C1123 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C34007 +
            ((C36969 + C36970 + C36971) * C1122 +
             (C36972 + C36973 + C36974) * C1117 -
             (C37479 + C37480 + C37481) * C1123 -
             (C37482 + C37483 + C37484) * C51061) *
                C51186) *
               C50972 * C51243 +
           (((C2691 + C2690 + C2689) * C1123 -
             ((C2494 + C2493 + C2492) * C1117 +
              (C2491 + C2490 + C2489) * C1122) +
             (C2694 + C2693 + C2692) * C51061) *
                C34007 +
            ((C3441 + C3442 + C3443) * C1123 -
             ((C2888 + C2887 + C2886) * C1117 +
              (C2885 + C2884 + C2883) * C1122) +
             (C3444 + C3445 + C3446) * C51061) *
                C51186) *
               C50972 * C50996) *
              C51252 +
          ((((C37481 + C37480 + C37479) * C1123 -
             ((C36974 + C36973 + C36972) * C1117 +
              (C36971 + C36970 + C36969) * C1122) +
             (C37484 + C37483 + C37482) * C51061) *
                C34007 +
            ((C37887 + C37888 + C37889) * C1123 -
             ((C36975 + C36976 + C36977) * C1117 +
              (C36978 + C36979 + C36980) * C1122) +
             (C37890 + C37891 + C37892) * C51061) *
                C51186) *
               C50972 * C51243 +
           (((C2883 + C2884 + C2885) * C1122 + (C2886 + C2887 + C2888) * C1117 -
             (C3443 + C3442 + C3441) * C1123 -
             (C3446 + C3445 + C3444) * C51061) *
                C34007 +
            ((C2889 + C2890 + C2891) * C1122 + (C2892 + C2893 + C2894) * C1117 -
             (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
              C2449 * C1338 + C2444 * C1343) *
                 C1123 -
             (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
              C2449 * C1344 + C2444 * C1350) *
                 C51061) *
                C51186) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C1122 +
             (C117 * C127 + C51106 * C140) * C1117 -
             (C117 * C301 + C51106 * C311) * C1123 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6684 + C6685 - C6686 - C6687) * C51186) *
               C17450 +
           ((C1125 + C1126 - C1127 - C1128) * C34007 + C7070 * C51186) *
               C17451 +
           C34948 * C17452) *
              C1119 +
          (((C1127 - (C1126 + C1125) + C1128) * C34007 + C7071 * C51186) *
               C17450 +
           ((C1131 - (C1130 + C1129) + C1132) * C34007 + C12671 * C51186) *
               C17451 +
           ((C1135 - (C1134 + C1133) + C1136) * C34007 +
            (C1616 - (C1617 + C1618) + C1619) * C51186) *
               C17452) *
              C1120 +
          (C34948 * C17450 +
           (C1146 * C34007 + (C1618 + C1617 - C1616 - C1619) * C51186) *
               C17451 +
           ((C1139 + C1138 - C1137 - C1140) * C34007 +
            (C834 * C1122 + C835 * C1117 -
             (C117 * C973 + C51106 * C982) * C1123 -
             (C117 * C983 + C51106 * C988) * C51061) *
                C51186) *
               C17452) *
              C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C51106 * C126) * C1219 +
            (C117 * C127 + C51106 * C140) * C1214 -
            (C117 * C301 + C51106 * C311) * C1220 -
            (C117 * C312 + C51106 * C331) * C1215 +
            (C117 * C302 + C51106 * C313) * C1221 +
            (C117 * C314 + C51106 * C332) * C1216 -
            (C117 * C1223 + C51106 * C1227) * C1222 -
            (C117 * C1228 + C51106 * C1235) * C1217) *
               C34007 +
           (C5703 * C1219 + C5704 * C1214 - C6258 * C1220 - C6259 * C1215 +
            C7235 * C1221 + C7236 * C1216 -
            (C117 * C3416 + C51106 * C3419) * C1222 -
            (C117 * C3420 + C51106 * C3425) * C1217) *
               C51186) *
              C17450 +
          ((C168 * C1219 + C169 * C1214 - C372 * C1220 - C373 * C1215 +
            C374 * C1221 + C375 * C1216 -
            (C117 * C1224 + C51106 * C1229) * C1222 -
            (C117 * C1230 + C51106 * C1236) * C1217) *
               C34007 +
           (C561 * C1219 + C562 * C1214 - C1008 * C1220 - C1009 * C1215 +
            C5504 * C1221 + C5505 * C1216 -
            (C117 * C3417 + C51106 * C3421) * C1222 -
            (C117 * C3422 + C51106 * C3426) * C1217) *
               C51186) *
              C17451 +
          ((C170 * C1219 + C171 * C1214 - C376 * C1220 - C377 * C1215 +
            C378 * C1221 + C379 * C1216 -
            (C117 * C1225 + C51106 * C1231) * C1222 -
            (C117 * C1232 + C51106 * C1237) * C1217) *
               C34007 +
           (C563 * C1219 + C564 * C1214 - C1010 * C1220 - C1011 * C1215 +
            C11278 * C1221 + C11279 * C1216 -
            (C117 * C3418 + C51106 * C3423) * C1222 -
            (C117 * C3424 + C51106 * C3427) * C1217) *
               C51186) *
              C17452) *
         C50991 * C51025) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C1122 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C1117 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C1123 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C1122 +
            (C36972 + C36973 + C36974) * C1117 -
            (C37479 + C37480 + C37481) * C1123 -
            (C37482 + C37483 + C37484) * C51061) *
               C51186) *
              C50972 * C1119 +
          (((C2691 + C2690 + C2689) * C1123 -
            ((C2494 + C2493 + C2492) * C1117 +
             (C2491 + C2490 + C2489) * C1122) +
            (C2694 + C2693 + C2692) * C51061) *
               C34007 +
           ((C3441 + C3442 + C3443) * C1123 -
            ((C2888 + C2887 + C2886) * C1117 +
             (C2885 + C2884 + C2883) * C1122) +
            (C3444 + C3445 + C3446) * C51061) *
               C51186) *
              C50972 * C1120 +
          (((C2500 + C2499 + C2498) * C1122 + (C2497 + C2496 + C2495) * C1117 -
            (C3055 + C3054 + C3053) * C1123 -
            (C3058 + C3057 + C3056) * C51061) *
               C34007 +
           ((C3217 + C3218 + C3219) * C1122 + (C3220 + C3221 + C3222) * C1117 -
            (C2451 * C3418 + C2446 * C3423 + C2450 * C1719 + C2445 * C1725 +
             C2449 * C971 + C2444 * C978) *
                C1123 -
            (C2451 * C3424 + C2446 * C3427 + C2450 * C1726 + C2445 * C1731 +
             C2449 * C979 + C2444 * C986) *
                C51061) *
               C51186) *
              C50972 * C1121) *
         C51025) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
            C2451 * C302 + C2446 * C313) *
               C1219 +
           (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
            C2451 * C314 + C2446 * C332) *
               C1214 -
           (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
            C2449 * C301 + C2444 * C311) *
               C1220 -
           (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
            C2449 * C312 + C2444 * C331) *
               C1215 +
           (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
            C2451 * C2652 + C2446 * C2655) *
               C1221 +
           (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
            C2451 * C2656 + C2446 * C2661) *
               C1216 -
           (C2451 * C3690 + C2446 * C3692 + C2450 * C2652 + C2445 * C2655 +
            C2449 * C1223 + C2444 * C1227) *
               C1222 -
           (C2451 * C3693 + C2446 * C3696 + C2450 * C2656 + C2445 * C2661 +
            C2449 * C1228 + C2444 * C1235) *
               C1217) *
              C34007 +
          ((C36969 + C36970 + C36971) * C1219 +
           (C36972 + C36973 + C36974) * C1214 -
           (C37479 + C37480 + C37481) * C1220 -
           (C37482 + C37483 + C37484) * C1215 +
           (C2449 * C1717 + C2444 * C1721 + C2450 * C3416 + C2445 * C3419 +
            C2451 * C4338 + C2446 * C4340) *
               C1221 +
           (C2449 * C1722 + C2444 * C1729 + C2450 * C3420 + C2445 * C3425 +
            C2451 * C4341 + C2446 * C4344) *
               C1216 -
           (C2451 * C21406 + C2446 * C21407 + C2450 * C4338 + C2445 * C4340 +
            C2449 * C3416 + C2444 * C3419) *
               C1222 -
           (C2451 * C21408 + C2446 * C21409 + C2450 * C4341 + C2445 * C4344 +
            C2449 * C3420 + C2444 * C3425) *
               C1217) *
              C51186) *
         C50972 * C50991 * C51025) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C687 +
              (C117 * C127 + C51106 * C140) * C51251 -
              (C117 * C301 + C51106 * C311) * C688 -
              (C117 * C312 + C51106 * C331) * C51061) *
                 C34007 +
             (C6236 + C6237 - C6268 - C6269) * C51186) *
                C17450 +
            ((C694 + C695 - C696 - C697) * C34007 + C6272 * C51186) * C17451 +
            C34456 * C17452) *
               C51243 +
           (((C696 - (C695 + C694) + C697) * C34007 + C6274 * C51186) * C17450 +
            ((C700 - (C699 + C698) + C701) * C34007 + C11926 * C51186) *
                C17451 +
            ((C704 - (C703 + C702) + C705) * C34007 +
             (C1018 - (C1004 + C1005) + C1019) * C51186) *
                C17452) *
               C50996) *
              C1831 +
          ((((C6268 - (C6237 + C6236) + C6269) * C34007 +
             (C6270 - (C6243 + C6242) + C6271) * C51186) *
                C17450 +
            (C6274 * C34007 + C6275 * C51186) * C17451 +
            (C11926 * C34007 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
                C17452) *
               C51243 +
           ((C6272 * C34007 + C6273 * C51186) * C17450 +
            (C11577 * C34007 + (C5883 + C5882 - C5888 - C5889) * C51186) *
                C17451 +
            ((C1005 + C1004 - C1018 - C1019) * C34007 +
             (C571 * C687 + C572 * C51251 -
              (C117 * C1340 + C51106 * C1347) * C688 -
              (C117 * C1348 + C51106 * C1352) * C51061) *
                 C51186) *
                C17452) *
               C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C687 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51251 -
             (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
              C2449 * C301 + C2444 * C311) *
                 C688 -
             (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
              C2449 * C312 + C2444 * C331) *
                 C51061) *
                C34007 +
            ((C36969 + C36970 + C36971) * C687 +
             (C36972 + C36973 + C36974) * C51251 -
             (C37479 + C37480 + C37481) * C688 -
             (C37482 + C37483 + C37484) * C51061) *
                C51186) *
               C50972 * C51243 +
           (((C2691 + C2690 + C2689) * C688 -
             ((C2494 + C2493 + C2492) * C51251 +
              (C2491 + C2490 + C2489) * C687) +
             (C2694 + C2693 + C2692) * C51061) *
                C34007 +
            ((C3441 + C3442 + C3443) * C688 -
             ((C2888 + C2887 + C2886) * C51251 +
              (C2885 + C2884 + C2883) * C687) +
             (C3444 + C3445 + C3446) * C51061) *
                C51186) *
               C50972 * C50996) *
              C1831 +
          ((((C37481 + C37480 + C37479) * C688 -
             ((C36974 + C36973 + C36972) * C51251 +
              (C36971 + C36970 + C36969) * C687) +
             (C37484 + C37483 + C37482) * C51061) *
                C34007 +
            ((C37887 + C37888 + C37889) * C688 -
             ((C36975 + C36976 + C36977) * C51251 +
              (C36978 + C36979 + C36980) * C687) +
             (C37890 + C37891 + C37892) * C51061) *
                C51186) *
               C50972 * C51243 +
           (((C2883 + C2884 + C2885) * C687 + (C2886 + C2887 + C2888) * C51251 -
             (C3443 + C3442 + C3441) * C688 -
             (C3446 + C3445 + C3444) * C51061) *
                C34007 +
            ((C2889 + C2890 + C2891) * C687 + (C2892 + C2893 + C2894) * C51251 -
             (C2451 * C3845 + C2446 * C3848 + C2450 * C2847 + C2445 * C2851 +
              C2449 * C1338 + C2444 * C1343) *
                 C688 -
             (C2451 * C3849 + C2446 * C3851 + C2450 * C2852 + C2445 * C2856 +
              C2449 * C1344 + C2444 * C1350) *
                 C51061) *
                C51186) *
               C50972 * C50996) *
              C51089)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C687 +
             (C117 * C127 + C51106 * C140) * C51251 -
             (C117 * C301 + C51106 * C311) * C688 -
             (C117 * C312 + C51106 * C331) * C51061) *
                C34007 +
            (C6236 + C6237 - C6268 - C6269) * C51186) *
               C17450 +
           ((C694 + C695 - C696 - C697) * C34007 + C6272 * C51186) * C17451 +
           C34456 * C17452) *
              C50991 * C51298 +
          (((C6268 - (C6237 + C6236) + C6269) * C34007 +
            (C6270 - (C6243 + C6242) + C6271) * C51186) *
               C17450 +
           (C6274 * C34007 + C6275 * C51186) * C17451 +
           (C11926 * C34007 + (C5888 - (C5882 + C5883) + C5889) * C51186) *
               C17452) *
              C50991 * C51299 +
          ((C8154 * C34007 + (C8151 + C8150 - C8149 - C8152) * C51186) *
               C17450 +
           (C6273 * C34007 + (C6255 + C6254 - C6276 - C6277) * C51186) *
               C17451 +
           ((C5883 + C5882 - C5888 - C5889) * C34007 +
            (C5709 * C687 + C5710 * C51251 -
             (C117 * C6231 + C51106 * C6232) * C688 -
             (C117 * C6233 + C51106 * C6234) * C51061) *
                C51186) *
               C17452) *
              C50991 * C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C687 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51251 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C688 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C51061) *
               C34007 +
           ((C36969 + C36970 + C36971) * C687 +
            (C36972 + C36973 + C36974) * C51251 -
            (C37479 + C37480 + C37481) * C688 -
            (C37482 + C37483 + C37484) * C51061) *
               C51186) *
              C50972 * C50991 * C51298 +
          (((C37481 + C37480 + C37479) * C688 -
            ((C36974 + C36973 + C36972) * C51251 +
             (C36971 + C36970 + C36969) * C687) +
            (C37484 + C37483 + C37482) * C51061) *
               C34007 +
           ((C37887 + C37888 + C37889) * C688 -
            ((C36975 + C36976 + C36977) * C51251 +
             (C36978 + C36979 + C36980) * C687) +
            (C37890 + C37891 + C37892) * C51061) *
               C51186) *
              C50972 * C50991 * C51299 +
          (((C36980 + C36979 + C36978) * C687 +
            (C36977 + C36976 + C36975) * C51251 -
            (C37889 + C37888 + C37887) * C688 -
            (C37892 + C37891 + C37890) * C51061) *
               C34007 +
           ((C38799 + C38800 + C38801) * C687 +
            (C38802 + C38803 + C38804) * C51251 -
            (C2451 * C21672 + C2446 * C21674 + C2450 * C4738 + C2445 * C4746 +
             C2449 * C4739 + C2444 * C4747) *
                C688 -
            (C2451 * C21673 + C2446 * C21675 + C2450 * C4744 + C2445 * C4750 +
             C2449 * C4745 + C2444 * C4751) *
                C51061) *
               C51186) *
              C50972 * C50991 * C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C34007 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C17450 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C34007 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C17451 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C34007 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C17452) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C34007 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C51186) *
               C17450 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C34007 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C51186) *
               C17451 +
           ((C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C34007 +
            (C5886 * C299 - (C570 * C293 + C569 * C298) + C5887 * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C51186) *
               C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C1119 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C1120 +
           (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
            ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
               C1121) *
              C1831 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C1120 -
           (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C1119 -
           ((((C117 * C524 + C51106 * C535) * C51009 +
              (C117 * C505 + C51106 * C525) * C118) *
                 C51186 +
             (C839 + C838) * C34007) *
                C17452 +
            ((C584 + C583) * C51186 + C832 * C34007) * C17451 +
            C34605 * C17450) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C118 +
             (C117 * C127 + C51106 * C140) * C51009) *
                C34007 +
            (C5715 + C5716) * C51186) *
               C17450 +
           ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
           C34014 * C17452) *
              C50991 * C1997 -
          (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
           ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
              C50991 * C1998 +
          ((C5727 * C34007 + (C5724 + C5723) * C51186) * C17450 +
           (C5683 * C34007 + C5728 * C51186) * C17451 +
           (C6037 * C34007 + (C5721 + C5722) * C51186) * C17452) *
              C50991 * C1999 -
          ((((C117 * C5668 + C51106 * C5672) * C51009 +
             (C117 * C5663 + C51106 * C5669) * C118) *
                C51186 +
            (C5722 + C5721) * C34007) *
               C17452 +
           ((C5726 + C5725) * C51186 + C5729 * C34007) * C17451 +
           ((C7661 + C7660) * C51186 + C7653 * C34007) * C17450) *
              C50991 * C2000)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C1119 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C1120 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C34007 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51186) *
               C50972 * C1121) *
              C1831 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C1120 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C1119 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51186 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C34007) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C34007 +
           ((C36969 + C36970 + C36971) * C298 +
            (C36972 + C36973 + C36974) * C293 -
            (C37479 + C37480 + C37481) * C299 -
            (C37482 + C37483 + C37484) * C294 +
            (C38391 + C38392 + C38393) * C300 +
            (C38394 + C38395 + C38396) * C295) *
               C51186) *
              C50972 * C50991 * C1831 +
          (((C37481 + C37480 + C37479) * C299 -
            ((C36974 + C36973 + C36972) * C293 +
             (C36971 + C36970 + C36969) * C298) +
            (C37484 + C37483 + C37482) * C294 -
            (C38393 + C38392 + C38391) * C300 -
            (C38396 + C38395 + C38394) * C295) *
               C34007 +
           ((C37887 + C37888 + C37889) * C299 -
            ((C36975 + C36976 + C36977) * C293 +
             (C36978 + C36979 + C36980) * C298) +
            (C37890 + C37891 + C37892) * C294 -
            (C2451 * C21076 + C2446 * C21077 + C2450 * C3844 + C2445 * C3846 +
             C2449 * C2846 + C2444 * C2849) *
                C300 -
            (C2451 * C21078 + C2446 * C21079 + C2450 * C3847 + C2445 * C3850 +
             C2449 * C2850 + C2444 * C2855) *
                C295) *
               C51186) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C118 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C51009) *
               C34007 +
           ((C36969 + C36970 + C36971) * C118 +
            (C36972 + C36973 + C36974) * C51009) *
               C51186) *
              C50972 * C50991 * C1997 -
          (((C36975 + C36976 + C36977) * C51009 +
            (C36978 + C36979 + C36980) * C118) *
               C51186 +
           ((C36974 + C36973 + C36972) * C51009 +
            (C36971 + C36970 + C36969) * C118) *
               C34007) *
              C50972 * C50991 * C1998 +
          (((C36980 + C36979 + C36978) * C118 +
            (C36977 + C36976 + C36975) * C51009) *
               C34007 +
           ((C38799 + C38800 + C38801) * C118 +
            (C38802 + C38803 + C38804) * C51009) *
               C51186) *
              C50972 * C50991 * C1999 -
          (((C2451 * C23364 + C2446 * C23365 + C2450 * C6678 + C2445 * C6681 +
             C2449 * C5665 + C2444 * C5670) *
                C51009 +
            (C2451 * C23362 + C2446 * C23363 + C2450 * C6675 + C2445 * C6677 +
             C2449 * C5661 + C2444 * C5664) *
                C118) *
               C51186 +
           ((C38804 + C38803 + C38802) * C51009 +
            (C38801 + C38800 + C38799) * C118) *
               C34007) *
              C50972 * C50991 * C2000)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C51243 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C50996) *
              C51298 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C50996 -
           (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C51243) *
              C51299 +
          (((C5727 * C34007 + (C5724 + C5723) * C51186) * C17450 +
            (C5683 * C34007 + C5728 * C51186) * C17451 +
            (C6037 * C34007 + (C5721 + C5722) * C51186) * C17452) *
               C51243 -
           ((((C117 * C2005 + C51106 * C2013) * C51009 +
              (C117 * C2001 + C51106 * C2006) * C118) *
                 C51186 +
             (C584 + C583) * C34007) *
                C17452 +
            ((C5722 + C5721) * C51186 + C5684 * C34007) * C17451 +
            (C5729 * C51186 + C5685 * C34007) * C17450) *
               C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C51243 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C50996) *
              C51298 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C50996 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C51243) *
              C51299 +
          ((((C36980 + C36979 + C36978) * C118 +
             (C36977 + C36976 + C36975) * C51009) *
                C34007 +
            ((C38799 + C38800 + C38801) * C118 +
             (C38802 + C38803 + C38804) * C51009) *
                C51186) *
               C50972 * C51243 -
           (((C2451 * C4740 + C2446 * C4748 + C2450 * C4741 + C2445 * C4749 +
              C2449 * C2009 + C2444 * C2015) *
                 C51009 +
             (C2451 * C4736 + C2446 * C4742 + C2450 * C4737 + C2445 * C4743 +
              C2449 * C2003 + C2444 * C2010) *
                 C118) *
                C51186 +
            ((C2894 + C2893 + C2892) * C51009 +
             (C2891 + C2890 + C2889) * C118) *
                C34007) *
               C50972 * C50996) *
              C2247)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C51106 * C126) * C118 +
              (C117 * C127 + C51106 * C140) * C51009) *
                 C34007 +
             (C5715 + C5716) * C51186) *
                C17450 +
            ((C178 + C179) * C34007 + C5682 * C51186) * C17451 +
            C34014 * C17452) *
               C1119 -
           (C34015 * C17452 +
            (C833 * C51186 + (C181 + C180) * C34007) * C17451 +
            (C5686 * C51186 + (C179 + C178) * C34007) * C17450) *
               C1120 +
           (C34014 * C17450 + (C189 * C34007 + C11726 * C51186) * C17451 +
            ((C185 + C184) * C34007 + (C838 + C839) * C51186) * C17452) *
               C1121) *
              C1831 +
          (((C5682 * C34007 + C5683 * C51186) * C17450 +
            (C6036 * C34007 + C6037 * C51186) * C17451 +
            (C11726 * C34007 + (C583 + C584) * C51186) * C17452) *
               C1120 -
           (C34605 * C17452 + (C5685 * C51186 + C5686 * C34007) * C17451 +
            ((C5718 + C5717) * C51186 + (C5716 + C5715) * C34007) * C17450) *
               C1119 -
           ((((C117 * C524 + C51106 * C535) * C51009 +
              (C117 * C505 + C51106 * C525) * C118) *
                 C51186 +
             (C839 + C838) * C34007) *
                C17452 +
            ((C584 + C583) * C51186 + C832 * C34007) * C17451 +
            C34605 * C17450) *
               C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C51106 * C126) * C298 +
             (C117 * C127 + C51106 * C140) * C293 -
             (C117 * C301 + C51106 * C311) * C299 -
             (C117 * C312 + C51106 * C331) * C294 +
             (C117 * C302 + C51106 * C313) * C300 +
             (C117 * C314 + C51106 * C332) * C295) *
                C34007 +
            (C7535 + C7536 - C7537 - C7538 + C7539 + C7540) * C51186) *
               C17450 +
           ((C342 + C343 - C384 - C385 + C386 + C387) * C34007 +
            (C5486 + C5487 - C5488 - C5489 + C5510 + C5511) * C51186) *
               C17451 +
           ((C352 + C353 - C388 - C389 + C390 + C391) * C34007 +
            (C11270 + C11271 - C11272 - C11273 + C11280 + C11281) * C51186) *
               C17452) *
              C50991 * C1831 +
          (((C7537 - (C7536 + C7535) + C7538 - C7539 - C7540) * C34007 +
            (C7543 - (C7542 + C7541) + C7544 - C7545 - C7546) * C51186) *
               C17450 +
           ((C5488 - (C5487 + C5486) + C5489 - C5510 - C5511) * C34007 +
            (C5512 - (C5495 + C5494) + C5513 - C5514 - C5515) * C51186) *
               C17451 +
           ((C11272 - (C11271 + C11270) + C11273 - C11280 - C11281) * C34007 +
            (C5886 * C299 - (C570 * C293 + C569 * C298) + C5887 * C294 -
             (C117 * C2848 + C51106 * C2854) * C300 -
             (C117 * C2853 + C51106 * C2857) * C295) *
                C51186) *
               C17452) *
              C50991 * C51089)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
              C2451 * C302 + C2446 * C313) *
                 C118 +
             (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
              C2451 * C314 + C2446 * C332) *
                 C51009) *
                C34007 +
            ((C36969 + C36970 + C36971) * C118 +
             (C36972 + C36973 + C36974) * C51009) *
                C51186) *
               C50972 * C1119 -
           (((C2888 + C2887 + C2886) * C51009 +
             (C2885 + C2884 + C2883) * C118) *
                C51186 +
            ((C2494 + C2493 + C2492) * C51009 +
             (C2491 + C2490 + C2489) * C118) *
                C34007) *
               C50972 * C1120 +
           (((C2500 + C2499 + C2498) * C118 +
             (C2497 + C2496 + C2495) * C51009) *
                C34007 +
            ((C3217 + C3218 + C3219) * C118 +
             (C3220 + C3221 + C3222) * C51009) *
                C51186) *
               C50972 * C1121) *
              C1831 +
          ((((C2883 + C2884 + C2885) * C118 +
             (C2886 + C2887 + C2888) * C51009) *
                C34007 +
            ((C2889 + C2890 + C2891) * C118 +
             (C2892 + C2893 + C2894) * C51009) *
                C51186) *
               C50972 * C1120 -
           (((C36975 + C36976 + C36977) * C51009 +
             (C36978 + C36979 + C36980) * C118) *
                C51186 +
            ((C36974 + C36973 + C36972) * C51009 +
             (C36971 + C36970 + C36969) * C118) *
                C34007) *
               C50972 * C1119 -
           (((C2451 * C2853 + C2446 * C2857 + C2450 * C1346 + C2445 * C1351 +
              C2449 * C521 + C2444 * C533) *
                 C51009 +
             (C2451 * C2848 + C2446 * C2854 + C2450 * C1339 + C2445 * C1345 +
              C2449 * C503 + C2444 * C520) *
                 C118) *
                C51186 +
            ((C3222 + C3221 + C3220) * C51009 +
             (C3219 + C3218 + C3217) * C118) *
                C34007) *
               C50972 * C1121) *
              C51089)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2449 * C119 + C2444 * C126 + C2450 * C301 + C2445 * C311 +
             C2451 * C302 + C2446 * C313) *
                C298 +
            (C2449 * C127 + C2444 * C140 + C2450 * C312 + C2445 * C331 +
             C2451 * C314 + C2446 * C332) *
                C293 -
            (C2451 * C1223 + C2446 * C1227 + C2450 * C302 + C2445 * C313 +
             C2449 * C301 + C2444 * C311) *
                C299 -
            (C2451 * C1228 + C2446 * C1235 + C2450 * C314 + C2445 * C332 +
             C2449 * C312 + C2444 * C331) *
                C294 +
            (C2449 * C302 + C2444 * C313 + C2450 * C1223 + C2445 * C1227 +
             C2451 * C2652 + C2446 * C2655) *
                C300 +
            (C2449 * C314 + C2444 * C332 + C2450 * C1228 + C2445 * C1235 +
             C2451 * C2656 + C2446 * C2661) *
                C295) *
               C34007 +
           ((C36969 + C36970 + C36971) * C298 +
            (C36972 + C36973 + C36974) * C293 -
            (C37479 + C37480 + C37481) * C299 -
            (C37482 + C37483 + C37484) * C294 +
            (C38391 + C38392 + C38393) * C300 +
            (C38394 + C38395 + C38396) * C295) *
               C51186) *
              C50972 * C50991 * C1831 +
          (((C37481 + C37480 + C37479) * C299 -
            ((C36974 + C36973 + C36972) * C293 +
             (C36971 + C36970 + C36969) * C298) +
            (C37484 + C37483 + C37482) * C294 -
            (C38393 + C38392 + C38391) * C300 -
            (C38396 + C38395 + C38394) * C295) *
               C34007 +
           ((C37887 + C37888 + C37889) * C299 -
            ((C36975 + C36976 + C36977) * C293 +
             (C36978 + C36979 + C36980) * C298) +
            (C37890 + C37891 + C37892) * C294 -
            (C2451 * C21076 + C2446 * C21077 + C2450 * C3844 + C2445 * C3846 +
             C2449 * C2846 + C2444 * C2849) *
                C300 -
            (C2451 * C21078 + C2446 * C21079 + C2450 * C3847 + C2445 * C3850 +
             C2449 * C2850 + C2444 * C2855) *
                C295) *
               C51186) *
              C50972 * C50991 * C51089)) /
            (p * q * std::sqrt(p + q));
}
