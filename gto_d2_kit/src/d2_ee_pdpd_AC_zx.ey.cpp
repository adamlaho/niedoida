/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AC_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_13_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49747 = 0 * ce;
    const double C49746 = ce * de;
    const double C49745 = 0 * de;
    const double C49744 = ce + de;
    const double C49743 = 0 * de;
    const double C49742 = xC - xD;
    const double C49810 = ae * be;
    const double C49809 = ae + be;
    const double C49808 = 0 * be;
    const double C49807 = zA - zB;
    const double C49838 = 0 * ae;
    const double C49833 = 0 * be;
    const double C49872 = zP - zQ;
    const double C49871 = p + q;
    const double C49870 = p * q;
    const double C49869 = xP - xQ;
    const double C49877 = bs[3];
    const double C49888 = bs[4];
    const double C49896 = bs[5];
    const double C49915 = bs[6];
    const double C49945 = bs[7];
    const double C50071 = yP - yQ;
    const double C50339 = bs[2];
    const double C122 = bs[0];
    const double C50764 = xA - xB;
    const double C50793 = yC - yD;
    const double C50805 = zC - zD;
    const double C50891 = yA - yB;
    const double C49752 = C49747 / C49744;
    const double C49749 = 2 * C49744;
    const double C49748 = std::pow(C49744, 2);
    const double C49751 = C49746 * C49742;
    const double C49750 = C49742 * C49745;
    const double C50748 = C49742 * de;
    const double C50747 = C49742 * ce;
    const double C50746 = std::pow(C49742, 2);
    const double C49811 = std::pow(C49809, 2);
    const double C49834 = 2 * C49809;
    const double C49880 = C49744 * C49809;
    const double C143 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (zP - zQ) * (xP - xQ) * ae * ce) /
                         C49744) /
                        C49809;
    const double C49812 = C49810 * C49807;
    const double C49835 = C49807 * C49808;
    const double C50903 = std::pow(C49807, 2);
    const double C50967 = C49807 * be;
    const double C50966 = C49807 * ae;
    const double C49843 = C49838 / C49809;
    const double C49878 = C49872 * ae;
    const double C50151 = std::pow(C49872, 2);
    const double C49873 = 2 * C49870;
    const double C49879 = C49872 * C49869;
    const double C49898 = std::pow(C49869, 2);
    const double C49989 = C49869 * ce;
    const double C50089 = std::pow(C50071, 2);
    const double C50767 = C50764 * be;
    const double C50766 = C50764 * ae;
    const double C50765 = std::pow(C50764, 2);
    const double C50794 = std::pow(C50793, 2);
    const double C50844 = C50793 * de;
    const double C50843 = C50793 * ce;
    const double C50806 = std::pow(C50805, 2);
    const double C50870 = C50805 * de;
    const double C50869 = C50805 * ce;
    const double C50892 = std::pow(C50891, 2);
    const double C50941 = C50891 * be;
    const double C50940 = C50891 * ae;
    const double C50756 = std::pow(C49749, -1);
    const double C51034 = std::pow(C49749, -2);
    const double C49753 = 2 * C49748;
    const double C51025 = 4 * C49748;
    const double C49754 = C49750 / C49744;
    const double C50749 = C50746 * C49746;
    const double C49813 = 2 * C49811;
    const double C51032 = 4 * C49811;
    const double C50775 = std::pow(C49834, -1);
    const double C51047 = std::pow(C49834, -2);
    const double C49840 = C49835 / C49809;
    const double C50904 = C50903 * C49810;
    const double C49882 = C49877 * C49878;
    const double C49890 = C49888 * C49878;
    const double C49901 = C49896 * C49878;
    const double C49921 = C49915 * C49878;
    const double C49953 = C49945 * C49878;
    const double C49874 = C49873 / C49871;
    const double C129 = (-(bs[1] * C49878 * C49873) / C49871) / C49809;
    const double C123 = -(C49869 * bs[1] * C49873) / C49871;
    const double C286 = -(C50071 * bs[1] * C49873) / C49871;
    const double C463 = -(C49872 * bs[1] * C49873) / C49871;
    const double C49883 = C49879 * ae;
    const double C49992 = C49888 * C49989;
    const double C49996 = C49896 * C49989;
    const double C50006 = C49877 * C49989;
    const double C50019 = C49915 * C49989;
    const double C50039 = C49945 * C49989;
    const double C130 = (bs[1] * C49989 * C49873) / (C49871 * C49744);
    const double C50768 = C50765 * C49810;
    const double C50795 = C50794 * C49746;
    const double C50807 = C50806 * C49746;
    const double C50893 = C50892 * C49810;
    const double C49759 = C49745 / C49753;
    const double C49757 = C49743 / C49753;
    const double C49756 = 0 - C49754;
    const double C50750 = C50749 / C49744;
    const double C49837 = C49808 / C49813;
    const double C49841 = C49833 / C49813;
    const double C49844 = 0 - C49840;
    const double C50905 = C50904 / C49809;
    const double C49876 = -C49874;
    const double C49887 = std::pow(C49874, 4);
    const double C49914 = std::pow(C49874, 6);
    const double C144 =
        (-(C49869 * std::pow(-C49874, 3) * bs[3] * C49872 * C49869 * ae * ce) /
         C49744) /
            C49809 -
        (std::pow(C49874, 2) * bs[2] * C49872 * ae * ce) / (C49744 * C49809);
    const double C50340 = std::pow(C49874, 2);
    const double C131 =
        (C49869 * std::pow(C49874, 2) * bs[2] * C49878) / C49809;
    const double C132 =
        (ce * bs[1] * C49873) / (C49871 * C49744) -
        (C49869 * std::pow(C49874, 2) * bs[2] * C49989) / C49744;
    const double C49885 = C49883 * ce;
    const double C50769 = C50768 / C49809;
    const double C50796 = C50795 / C49744;
    const double C50808 = C50807 / C49744;
    const double C50894 = C50893 / C49809;
    const double C49761 = C49756 * ce;
    const double C50751 = -C50750;
    const double C49847 = C49844 * ae;
    const double C50906 = -C50905;
    const double C49881 = std::pow(C49876, 3);
    const double C49895 = std::pow(C49876, 5);
    const double C49944 = std::pow(C49876, 7);
    const double C49892 = C49887 * C49890;
    const double C49993 = C49888 * C49887;
    const double C49994 = C49887 * C49992;
    const double C49924 = C49914 * C49921;
    const double C50024 = C49914 * C50019;
    const double C50040 = C49915 * C49914;
    const double C50341 = C50339 * C50340;
    const double C296 = -(C50071 * C50340 * C50339 * C49989) / C49744;
    const double C297 = (C50071 * C50340 * C50339 * C49878) / C49809;
    const double C473 = -(C49872 * C50340 * C50339 * C49989) / C49744;
    const double C474 = (C49872 * C50340 * C50339 * C49878) / C49809 -
                        (ae * bs[1] * C49873) / (C49871 * C49809);
    const double C49889 = C49888 * C49885;
    const double C49899 = C49896 * C49885;
    const double C49918 = C49915 * C49885;
    const double C49950 = C49945 * C49885;
    const double C50770 = -C50769;
    const double C50797 = -C50796;
    const double C50809 = -C50808;
    const double C50895 = -C50894;
    const double C49764 = C49761 / C49744;
    const double C50752 = std::exp(C50751);
    const double C49849 = C49847 / C49809;
    const double C50907 = std::exp(C50906);
    const double C49884 = C49881 * C49882;
    const double C49990 = C49877 * C49881;
    const double C50007 = C49881 * C50006;
    const double C315 =
        (-((yP - yQ) * C49881 * C49877 * C49885) / C49744) / C49809;
    const double C492 =
        (-(C49872 * C49881 * C49877 * C49885) / C49744) / C49809 -
        (ae * std::pow(C49874, 2) * bs[2] * C49869 * ce) / C49880;
    const double C49903 = C49895 * C49901;
    const double C49999 = C49896 * C49895;
    const double C50000 = C49895 * C49996;
    const double C49957 = C49944 * C49953;
    const double C50044 = C49944 * C50039;
    const double C49897 = C49892 * ce;
    const double C49894 = C49869 * C49892;
    const double C50510 = C50071 * C49892;
    const double C50512 = C49872 * C49892;
    const double C49998 = C49869 * C49993;
    const double C49997 = C49993 * ce;
    const double C50347 = C49993 * C49898;
    const double C50456 = C49993 * C50089;
    const double C50491 = C50071 * C49993;
    const double C50515 = C49993 * C50151;
    const double C50578 = C49872 * C49993;
    const double C50577 = C49993 * ae;
    const double C50009 = C49869 * C49994;
    const double C50087 = C50071 * C49994;
    const double C50150 = ae * C49994;
    const double C50148 = C49872 * C49994;
    const double C49927 = C49924 * C49898;
    const double C49946 = C49924 * ce;
    const double C49942 = C49869 * C49924;
    const double C50592 = C49924 * C50089;
    const double C50620 = C50071 * C49924;
    const double C50638 = C49872 * C49924;
    const double C50027 = C49869 * C50024;
    const double C50132 = C50024 * C50089;
    const double C50192 = C50071 * C50024;
    const double C50223 = C50024 * C50151;
    const double C50305 = ae * C50024;
    const double C50303 = C49872 * C50024;
    const double C50047 = C50040 * C49898;
    const double C50046 = C49869 * C50040;
    const double C50045 = C50040 * ce;
    const double C50600 = C50040 * C50089;
    const double C50623 = C50071 * C50040;
    const double C50642 = C50040 * C50151;
    const double C124 = C50341 * C49898 - (bs[1] * C49873) / C49871;
    const double C285 = C50071 * C49869 * C50341;
    const double C290 = C50341 * C50089 - (bs[1] * C49873) / C49871;
    const double C462 = C49872 * C49869 * C50341;
    const double C467 = C50341 * C50151 - (bs[1] * C49873) / C49871;
    const double C894 = C49872 * C50071 * C50341;
    const double C49891 = C49887 * C49889;
    const double C49902 = C49895 * C49899;
    const double C49923 = C49914 * C49918;
    const double C49956 = C49944 * C49950;
    const double C50771 = std::exp(C50770);
    const double C50798 = std::exp(C50797);
    const double C50810 = std::exp(C50809);
    const double C50896 = std::exp(C50895);
    const double C49766 = C49764 - C49757;
    const double C49755 = C49751 * C50752;
    const double C50753 = C50752 * C50747;
    const double C50757 = C50756 * C50752;
    const double C51022 = C50752 * C50748;
    const double C51019 = C50752 / C49749;
    const double C1032 = C51034 * C50752;
    const double C49851 = C49849 - C49841;
    const double C154 = C50907 * C144;
    const double C152 = C50907 * C131;
    const double C2465 = C50907 * C297;
    const double C49814 = C49812 * C50907;
    const double C117 = -(2 * ae * be * (zA - zB) * C50907) / (ae + be);
    const double C50968 = C50907 * C50966;
    const double C50971 = C50775 * C50907;
    const double C51055 = C50907 * C50967;
    const double C51048 = C50907 / C49834;
    const double C5310 = C51047 * C50907;
    const double C145 =
        (-(C49869 * C49884 * ce) / C49744) / C49809 -
        (C49881 * C49877 * C49885) / C49880 +
        C49869 * ((-(C49869 * std::pow(C49874, 4) * bs[4] * C49885) / C49744) /
                      C49809 -
                  (C49884 * ce) / C49880);
    const double C133 =
        (std::pow(C49874, 2) * bs[2] * C49878 + C49884 * C49898) / C49809;
    const double C135 =
        (2 * C49869 * C49884 + C49869 * (C49884 + C49892 * C49898)) / C49809;
    const double C295 = (C50071 * C49869 * C49884) / C49809;
    const double C299 = (C50071 * (C49884 + C49892 * C49898)) / C49809;
    const double C305 = (C50340 * C50339 * C49878 + C49884 * C50089) / C49809;
    const double C472 =
        (C49872 * C49869 * C49884 + C49869 * C50341 * ae) / C49809;
    const double C482 =
        (C50340 * C50339 * C49878 + C49872 * (C49872 * C49884 + C50341 * ae) +
         C49872 * C50341 * ae) /
        C49809;
    const double C899 =
        (C49872 * C50071 * C49884 + C50071 * C50341 * ae) / C49809;
    const double C1121 =
        (2 * C50071 * C49884 + C50071 * (C49884 + C49892 * C50089)) / C49809;
    const double C50010 = C49990 * ce;
    const double C50346 = C49869 * C49990;
    const double C50432 = C50071 * C49990;
    const double C50514 = C49872 * C49990;
    const double C50513 = C49990 * ae;
    const double C476 = (C49872 * (C49884 + C49892 * C49898) +
                         (C50341 + C49990 * C49898) * ae) /
                        C49809;
    const double C1584 = (C49872 * (C49884 + C49892 * C50089) +
                          (C50341 + C49990 * C50089) * ae) /
                         C49809;
    const double C1868 =
        (2 * (C49872 * C49884 + C50341 * ae) +
         C49872 * (C49884 + C49872 * (C49872 * C49892 + C49990 * ae) +
                   C49872 * C49990 * ae) +
         (C50341 + C49990 * C50151) * ae) /
        C49809;
    const double C125 =
        2 * C49869 * C50341 + C49869 * (C50341 + C49990 * C49898);
    const double C287 = C50071 * (C50341 + C49990 * C49898);
    const double C464 = C49872 * (C50341 + C49990 * C49898);
    const double C1113 =
        2 * C50071 * C50341 + C50071 * (C50341 + C49990 * C50089);
    const double C1576 = C49872 * (C50341 + C49990 * C50089);
    const double C1860 =
        2 * C49872 * C50341 + C49872 * (C50341 + C49990 * C50151);
    const double C134 = -(C49869 * (C49869 * C50007 + C50341 * ce) +
                          C50340 * C50339 * C49989 + C49869 * C50341 * ce) /
                        C49744;
    const double C298 = -(C50071 * (C49869 * C50007 + C50341 * ce)) / C49744;
    const double C306 = -(C50007 * C50089 + C50340 * C50339 * C49989) / C49744;
    const double C475 = -(C49872 * (C49869 * C50007 + C50341 * ce)) / C49744;
    const double C483 = -(C50007 * C50151 + C50340 * C50339 * C49989) / C49744;
    const double C900 = -(C49872 * C50071 * C50007) / C49744;
    const double C1120 = (-2 * C50071 * C50007) / C49744 -
                         (C50071 * (C49994 * C50089 + C50007)) / C49744;
    const double C1583 = -(C49872 * (C49994 * C50089 + C50007)) / C49744;
    const double C1867 = (-2 * C49872 * C50007) / C49744 -
                         (C49872 * (C49994 * C50151 + C50007)) / C49744;
    const double C2467 = C50907 * C315;
    const double C49905 = C49903 * C49898;
    const double C49916 = C49903 * ce;
    const double C49912 = C49869 * C49903;
    const double C50479 = C49903 * C50089;
    const double C50551 = C50071 * C49903;
    const double C50576 = C49872 * C49903;
    const double C2454 =
        (3 * (C49884 + C49892 * C50089) +
         C50071 * (2 * C50071 * C49892 + C50071 * (C49892 + C49903 * C50089))) /
        C49809;
    const double C50001 = C49999 * C49898;
    const double C50021 = C49869 * C49999;
    const double C50020 = C49999 * ce;
    const double C50492 = C49999 * C50089;
    const double C50554 = C50071 * C49999;
    const double C50579 = C49999 * C50151;
    const double C50640 = C49872 * C49999;
    const double C50639 = C49999 * ae;
    const double C50002 = C49869 * C50000;
    const double C50101 = C50000 * C50089;
    const double C50131 = C50071 * C50000;
    const double C50154 = C50000 * C50151;
    const double C50222 = ae * C50000;
    const double C50220 = C49872 * C50000;
    const double C49960 = C49957 * C49898;
    const double C50048 = C49869 * C50044;
    const double C50255 = C50044 * C50089;
    const double C50279 = C50071 * C50044;
    const double C50307 = C50044 * C50151;
    const double C49900 = C49897 / C49880;
    const double C307 = (C49869 * C49884 + C49894 * C50089) / C49809;
    const double C50014 = C49998 * ce;
    const double C50351 = 2 * C49998;
    const double C50429 = C50071 * C49998;
    const double C50522 = C49872 * C49998;
    const double C50521 = C49998 * ae;
    const double C50348 = C49990 + C50347;
    const double C50457 = C49990 + C50456;
    const double C50493 = 2 * C50491;
    const double C50553 = C49872 * C50491;
    const double C50552 = C50491 * ae;
    const double C50517 = C49990 + C50515;
    const double C50583 = 2 * C50578;
    const double C50581 = C50578 * ae;
    const double C1234 = -(C50087 * C50151 + C50071 * C50007) / C49744;
    const double C50153 = C50150 / C49880;
    const double C49930 = C49903 + C49927;
    const double C49951 = C49946 / C49880;
    const double C49952 = 2 * C49942;
    const double C49949 = C49942 * ce;
    const double C50475 = C49942 * C50089;
    const double C50541 = C50071 * C49942;
    const double C50561 = C49872 * C49942;
    const double C50593 = C49903 + C50592;
    const double C50624 = C49872 * C50620;
    const double C50134 = C50132 + C50000;
    const double C50195 = C50192 * C50151;
    const double C50254 = -2 * C50192;
    const double C50278 = ae * C50192;
    const double C50275 = C49872 * C50192;
    const double C50228 = C50223 + C50000;
    const double C50311 = C50305 / C49880;
    const double C50313 = -2 * C50303;
    const double C50309 = ae * C50303;
    const double C50050 = C49999 + C50047;
    const double C50049 = C50046 * ce;
    const double C50484 = C50046 * C50089;
    const double C50544 = C50071 * C50046;
    const double C50564 = C50046 * C50151;
    const double C50601 = C49999 + C50600;
    const double C50626 = C50623 * C50151;
    const double C50646 = C49999 + C50642;
    const double C146 =
        2 * ((-(C49869 * C49891) / C49744) / C49809 - (C49884 * ce) / C49880) -
        ((C49884 + C49892 * std::pow(C49869, 2)) * ce) / C49880 +
        C49869 *
            ((-(C49869 * C49892 * ce) / C49744) / C49809 - C49891 / C49880 +
             C49869 *
                 ((-(C49869 * std::pow(C49876, 5) * bs[5] * C49885) / C49744) /
                      C49809 -
                  (C49892 * ce) / C49880));
    const double C316 = (yP - yQ) * ((-(C49869 * C49891) / C49744) / C49809 -
                                     (C49884 * ce) / C49880);
    const double C320 = (-(C49891 * std::pow(yP - yQ, 2)) / C49744) / C49809 -
                        (C49881 * C49877 * C49885) / C49880;
    const double C493 = C49872 * ((-(C49869 * C49891) / C49744) / C49809 -
                                  (C49884 * ce) / C49880) -
                        (ae * (C49869 * C49881 * C49877 * C49869 * ce +
                               bs[2] * std::pow(C49874, 2) * ce)) /
                            C49880;
    const double C497 = (-(ae * C49872 * C50007) / C49744) / C49809 -
                        (C49881 * C49877 * C49885) / C49880 +
                        C49872 * ((-(C49872 * C49891) / C49744) / C49809 -
                                  (ae * C50007) / C49880);
    const double C909 = (-(C49872 * C50071 * C49891) / C49744) / C49809 -
                        (ae * C50071 * C50007) / C49880;
    const double C49904 = C49869 * C49902;
    const double C49913 = C49902 / C49880;
    const double C50146 = C50071 * C49902;
    const double C50149 = C49872 * C49902;
    const double C1125 =
        (-2 * C50071 * C49891) / C49880 +
        C50071 * ((-(C49902 * std::pow(C50071, 2)) / C49744) / C49809 -
                  C49891 / C49880);
    const double C1239 =
        (-(ae * C49872 * C50087) / C49744) / C49809 -
        (C50071 * C49891) / C49880 +
        C49872 * ((-(C49872 * C50071 * C49902) / C49744) / C49809 -
                  (ae * C50087) / C49880);
    const double C1588 =
        C49872 * ((-(C49902 * C50089) / C49744) / C49809 - C49891 / C49880) -
        (ae * (C49994 * C50089 + C50007)) / C49880;
    const double C1872 =
        2 * ((-(C49872 * C49891) / C49744) / C49809 - (ae * C50007) / C49880) -
        (ae * (C49994 * std::pow(C49872, 2) + C50007)) / C49880 +
        C49872 *
            ((-(ae * C49872 * C49994) / C49744) / C49809 - C49891 / C49880 +
             C49872 * ((-(C49872 * C49902) / C49744) / C49809 -
                       (ae * C49994) / C49880));
    const double C49926 = C49869 * C49923;
    const double C49943 = C49923 / C49880;
    const double C50116 = C49923 * C50089;
    const double C50190 = C50071 * C49923;
    const double C50221 = C49872 * C49923;
    const double C49959 = C49869 * C49956;
    const double C50244 = C49956 * C50089;
    const double C50277 = C50071 * C49956;
    const double C50304 = C49872 * C49956;
    const double C50772 = C50771 * C50766;
    const double C50776 = C50775 * C50771;
    const double C51029 = C50771 * C50767;
    const double C51026 = C50771 / C49834;
    const double C17289 = C51047 * C50771;
    const double C50845 = C50798 * C50843;
    const double C50848 = C50756 * C50798;
    const double C51038 = C50798 * C50844;
    const double C51033 = C50798 / C49749;
    const double C282 = C51034 * C50798;
    const double C50871 = C50810 * C50869;
    const double C50874 = C50756 * C50810;
    const double C51042 = C50810 * C50870;
    const double C51035 = C50810 / C49749;
    const double C461 = C51034 * C50810;
    const double C50942 = C50896 * C50940;
    const double C50945 = C50775 * C50896;
    const double C51051 = C50896 * C50941;
    const double C51046 = C50896 / C49834;
    const double C2304 = C51047 * C50896;
    const double C49760 = C49755 / C49748;
    const double C49758 = 2 * C49755;
    const double C51023 = C50753 / C49753;
    const double C51021 = C50753 / C49744;
    const double C51020 = C50753 * C50748;
    const double C1031 = (2 * C50756 * C50753) / C49744;
    const double C51024 = C50757 * C50748;
    const double C109 = C50757 / C51025;
    const double C638 = C50757 / C49749;
    const double C51060 = C51022 / C49744;
    const double C1030 = (C50752 * std::pow(C50747, 2)) / C49748 + C51019;
    const double C49839 = C49814 / C49811;
    const double C49836 = 2 * C49814;
    const double C5313 = ((0 * ae) / C49809 - C49814 / C49811) / (2 * C49809) +
                         (0 * ae) / C49809;
    const double C10843 =
        ((C50907 - (C49807 * 2 * C49814) / C49809) * ae) / C49809 -
        C49808 / C49813;
    const double C10844 = (0 * ae) / C49809 - C49814 / C49811;
    const double C33360 =
        (-C49808 / C49809) / (2 * C49809) -
        ((C50907 - (C49807 * 2 * C49814) / C49809) * be) / C49809;
    const double C33361 =
        (-(2 * C49814) / C49809) / (2 * C49809) - (0 * be) / C49809;
    const double C155 = C117 * C124;
    const double C153 = C117 * C132;
    const double C151 = C117 * C123;
    const double C326 = C117 * C285;
    const double C503 = C117 * C462;
    const double C2474 = C117 * C290;
    const double C2466 = C117 * C296;
    const double C2464 = C117 * C286;
    const double C3240 = C117 * C894;
    const double C51057 = C50968 / C49813;
    const double C51056 = C50968 * C50967;
    const double C51050 = C50968 / C49809;
    const double C5309 = (2 * C50775 * C50968) / C49809;
    const double C5312 =
        (((C50907 - (C49807 * 2 * C49814) / C49809) * ae) / C49809 -
         C49808 / C49813) /
            (2 * C49809) +
        ((C49807 * ((0 * ae) / C49809 - C49814 / C49811) + C50971) * ae) /
            C49809;
    const double C51058 = C50971 * C50967;
    const double C38957 = C50971 / C51032;
    const double C44280 = C50971 / C49834;
    const double C51074 = C51055 / C49809;
    const double C5308 = (C50907 * std::pow(C50966, 2)) / C49811 + C51048;
    const double C158 = C50907 * C145;
    const double C156 = C50907 * C133;
    const double C160 = C50907 * C135;
    const double C327 = C50907 * C295;
    const double C331 = C50907 * C299;
    const double C2475 = C50907 * C305;
    const double C504 = C50907 * C472;
    const double C10847 = C50971 * C472;
    const double C33364 = C50971 * C472;
    const double C3241 = C50907 * C899;
    const double C13903 = C50971 * C899;
    const double C36340 = C50971 * C899;
    const double C2489 = C50907 * C1121;
    const double C50011 = C50009 + C50010;
    const double C484 =
        (C49869 * C49884 + C49872 * (C49872 * C49894 + C50346 * ae) +
         C49872 * C50346 * ae) /
        C49809;
    const double C901 =
        (C49872 * C50071 * C49894 + C50071 * C50346 * ae) / C49809;
    const double C291 = C49869 * C50341 + C50346 * C50089;
    const double C468 = C49869 * C50341 + C50346 * C50151;
    const double C895 = C49872 * C50071 * C50346;
    const double C1112 =
        2 * C50071 * C50346 + C50071 * (C50346 + C49998 * C50089);
    const double C1575 = C49872 * (C50346 + C49998 * C50089);
    const double C1859 =
        2 * C49872 * C50346 + C49872 * (C50346 + C49998 * C50151);
    const double C1235 =
        (C50071 * C49884 + C49872 * (C49872 * C50071 * C49892 + C50432 * ae) +
         C49872 * C50432 * ae) /
        C49809;
    const double C4719 =
        (2 * (C49872 * C50510 + C50432 * ae) +
         C49872 * (C50510 + C49872 * (C49872 * C50071 * C49903 + C50491 * ae) +
                   C49872 * C50491 * ae) +
         (C50432 + C50491 * C50151) * ae) /
        C49809;
    const double C1227 = C50071 * C50341 + C50432 * C50151;
    const double C4711 =
        2 * C49872 * C50432 + C49872 * (C50432 + C50491 * C50151);
    const double C50516 = C50512 + C50513;
    const double C508 = C50907 * C476;
    const double C10857 = C50971 * C476;
    const double C33374 = C50971 * C476;
    const double C3251 = C50907 * C1584;
    const double C13918 = C50971 * C1584;
    const double C36348 = C50971 * C1584;
    const double C159 = C117 * C125;
    const double C330 = C117 * C287;
    const double C507 = C117 * C464;
    const double C2488 = C117 * C1113;
    const double C3250 = C117 * C1576;
    const double C157 = C117 * C134;
    const double C328 = C117 * C298;
    const double C2476 = C117 * C306;
    const double C505 = C117 * C475;
    const double C3238 = C117 * C900;
    const double C2486 = C117 * C1120;
    const double C3248 = C117 * C1583;
    const double C49907 = C49892 + C49905;
    const double C49919 = C49916 / C49880;
    const double C49920 = 2 * C49912;
    const double C49917 = C49912 * ce;
    const double C50507 = C50071 * C49912;
    const double C50520 = C49872 * C49912;
    const double C1119 =
        (2 * C50071 * C49894 + C50071 * (C49894 + C49912 * C50089)) / C49809;
    const double C1582 = (C49872 * (C49894 + C49912 * C50089) +
                          (C50346 + C49998 * C50089) * ae) /
                         C49809;
    const double C1866 =
        (2 * (C49872 * C49894 + C50346 * ae) +
         C49872 * (C49894 + C49872 * (C49872 * C49912 + C49998 * ae) +
                   C49872 * C49998 * ae) +
         (C50346 + C49998 * C50151) * ae) /
        C49809;
    const double C2456 =
        (3 * (C49894 + C49912 * C50089) +
         C50071 * (2 * C50071 * C49912 + C50071 * (C49912 + C49942 * C50089))) /
        C49809;
    const double C50480 = C49892 + C50479;
    const double C50555 = C49872 * C50551;
    const double C50591 = 2 * C50551;
    const double C50580 = C50576 + C50577;
    const double C3560 = C50907 * C2454;
    const double C50003 = C49993 + C50001;
    const double C50025 = C50021 * ce;
    const double C50041 = 2 * C50021;
    const double C50460 = C50021 * C50089;
    const double C50483 = C50071 * C50021;
    const double C50523 = C50021 * C50151;
    const double C50563 = C49872 * C50021;
    const double C50562 = C50021 * ae;
    const double C50028 = C50027 + C50020;
    const double C50494 = C49993 + C50492;
    const double C50556 = C50554 * C50151;
    const double C50599 = 2 * C50554;
    const double C50622 = C49872 * C50554;
    const double C50621 = C50554 * ae;
    const double C50582 = C49993 + C50579;
    const double C50647 = 2 * C50640;
    const double C50645 = C50640 * ae;
    const double C50644 = C50638 + C50639;
    const double C50004 = C50002 + C49997;
    const double C50102 = C50101 + C49994;
    const double C50133 = -2 * C50131;
    const double C50191 = ae * C50131;
    const double C50189 = C49872 * C50131;
    const double C4718 = (-2 * C49872 * C50087) / C49744 -
                         (C49872 * (C50131 * C50151 + C50087)) / C49744;
    const double C50156 = C50154 + C49994;
    const double C50226 = C50222 / C49880;
    const double C50227 = -2 * C50220;
    const double C50224 = ae * C50220;
    const double C49963 = C49924 + C49960;
    const double C50051 = C50048 + C50045;
    const double C50258 = C50255 + C50024;
    const double C50284 = C50279 * C50151;
    const double C50314 = C50307 + C50024;
    const double C339 = C50907 * C307;
    const double C1233 =
        (C50071 * C49894 + C49872 * (C49872 * C50071 * C49912 + C50429 * ae) +
         C49872 * C50429 * ae) /
        C49809;
    const double C1226 = C50071 * C50346 + C50429 * C50151;
    const double C126 = 3 * (C50341 + C49990 * C49898) +
                        C49869 * (2 * C50346 + C49869 * C50348);
    const double C288 = C50071 * (2 * C50346 + C49869 * C50348);
    const double C292 = C50341 + C49990 * C49898 + C50348 * C50089;
    const double C465 = C49872 * (2 * C50346 + C49869 * C50348);
    const double C469 = C50341 + C49990 * C49898 + C50348 * C50151;
    const double C896 = C49872 * C50071 * C50348;
    const double C2681 =
        (C49884 + C49892 * C50089 +
         C49872 * (C49872 * (C49892 + C49903 * C50089) + C50457 * ae) +
         C49872 * C50457 * ae) /
        C49809;
    const double C3227 =
        (C49872 * (2 * C50071 * C49892 + C50071 * (C49892 + C49903 * C50089)) +
         (2 * C50432 + C50071 * C50457) * ae) /
        C49809;
    const double C2451 = 3 * (C50341 + C49990 * C50089) +
                         C50071 * (2 * C50432 + C50071 * C50457);
    const double C2678 = C50341 + C49990 * C50089 + C50457 * C50151;
    const double C3224 = C49872 * (2 * C50432 + C50071 * C50457);
    const double C5696 = 3 * (C50341 + C49990 * C50151) +
                         C49872 * (2 * C50514 + C49872 * C50517);
    const double C3743 = C117 * C1234;
    const double C49933 = C49869 * C49930;
    const double C49947 = 3 * C49930;
    const double C49941 = C49930 * ce;
    const double C50528 = C49872 * C49930;
    const double C50536 = C50071 * C49930;
    const double C49955 = C49949 / C49744;
    const double C50476 = C49912 + C50475;
    const double C50545 = C49872 * C50541;
    const double C50594 = C50071 * C50593;
    const double C50612 = C49872 * C50593;
    const double C50136 = C50071 * C50134;
    const double C50253 = -3 * C50134;
    const double C50269 = ae * C50134;
    const double C50267 = C49872 * C50134;
    const double C50197 = C50195 + C50131;
    const double C50257 = C50254 / C49744;
    const double C50282 = C50278 / C49880;
    const double C50283 = -2 * C50275;
    const double C50280 = ae * C50275;
    const double C50232 = C49872 * C50228;
    const double C50306 = -3 * C50228;
    const double C50302 = ae * C50228;
    const double C50318 = C50313 / C49744;
    const double C50316 = C50309 / C49744;
    const double C50053 = C49869 * C50050;
    const double C50052 = C50050 * ce;
    const double C50464 = C50050 * C50089;
    const double C50531 = C50050 * C50151;
    const double C50537 = C50071 * C50050;
    const double C50486 = C50021 + C50484;
    const double C50546 = C50544 * C50151;
    const double C50567 = C50021 + C50564;
    const double C50602 = C50071 * C50601;
    const double C50615 = C50601 * C50151;
    const double C50629 = C50554 + C50626;
    const double C50649 = C49872 * C50646;
    const double C162 = C50907 * C146;
    const double C329 = C50907 * C316;
    const double C2477 = C50907 * C320;
    const double C506 = C50907 * C493;
    const double C10851 = C50971 * C493;
    const double C33368 = C50971 * C493;
    const double C3239 = C50907 * C909;
    const double C13907 = C50971 * C909;
    const double C36344 = C50971 * C909;
    const double C49906 = C49904 / C49744;
    const double C2460 =
        3 * ((-(C49902 * C50089) / C49744) / C49809 - C49891 / C49880) +
        C50071 * ((-2 * C50071 * C49902) / C49880 +
                  C50071 * ((-(C49923 * C50089) / C49744) / C49809 - C49913));
    const double C4723 =
        2 * ((-(C49872 * C50146) / C49744) / C49809 - (ae * C50087) / C49880) -
        (ae * (C50131 * std::pow(C49872, 2) + C50087)) / C49880 +
        C49872 *
            ((-(ae * C49872 * C50131) / C49744) / C49809 - C50146 / C49880 +
             C49872 * ((-(C49872 * C50071 * C49923) / C49744) / C49809 -
                       (ae * C50131) / C49880));
    const double C50152 = C50149 / C49744;
    const double C2487 = C50907 * C1125;
    const double C3744 = C50907 * C1239;
    const double C14800 = C50971 * C1239;
    const double C21934 = C5310 * C1239;
    const double C37030 = C50971 * C1239;
    const double C3249 = C50907 * C1588;
    const double C13914 = C50971 * C1588;
    const double C36352 = C50971 * C1588;
    const double C49929 = C49926 / C49744;
    const double C50117 = C50116 / C49744;
    const double C50193 = C49872 * C50190;
    const double C50243 = -2 * C50190;
    const double C50276 = C50190 / C49880;
    const double C50225 = C50221 / C49744;
    const double C49962 = C49959 / C49744;
    const double C50246 = C50244 / C49744;
    const double C50281 = C49872 * C50277;
    const double C50310 = C50304 / C49744;
    const double C51030 = C50772 / C49813;
    const double C51028 = C50772 / C49809;
    const double C51027 = C50772 * C50767;
    const double C17288 = (2 * C50775 * C50772) / C49809;
    const double C51031 = C50776 * C50767;
    const double C113 = C50776 / C51032;
    const double C8156 = C50776 / C49834;
    const double C51063 = C51029 / C49809;
    const double C17287 = (C50771 * std::pow(C50766, 2)) / C49811 + C51026;
    const double C51040 = C50845 / C49753;
    const double C51039 = C50845 * C50844;
    const double C51036 = C50845 / C49744;
    const double C281 = (2 * C50756 * C50845) / C49744;
    const double C51041 = C50848 * C50844;
    const double C1108 = C50848 / C51025;
    const double C1342 = C50848 / C49749;
    const double C51065 = C51038 / C49744;
    const double C280 = (C50798 * std::pow(C50843, 2)) / C49748 + C51033;
    const double C51044 = C50871 / C49753;
    const double C51043 = C50871 * C50870;
    const double C51037 = C50871 / C49744;
    const double C460 = (2 * C50756 * C50871) / C49744;
    const double C51045 = C50874 * C50870;
    const double C1856 = C50874 / C51025;
    const double C2103 = C50874 / C49749;
    const double C51068 = C51042 / C49744;
    const double C459 = (C50810 * std::pow(C50869, 2)) / C49748 + C51035;
    const double C51053 = C50942 / C49813;
    const double C51052 = C50942 * C50941;
    const double C51049 = C50942 / C49809;
    const double C2303 = (2 * C50775 * C50942) / C49809;
    const double C51054 = C50945 * C50941;
    const double C19892 = C50945 / C51032;
    const double C24524 = C50945 / C49834;
    const double C51071 = C51051 / C49809;
    const double C2302 = (C50896 * std::pow(C50940, 2)) / C49811 + C51046;
    const double C49763 = C49752 - C49760;
    const double C49762 = C49742 * C49758;
    const double C284 = (-C49758 / C49744) / C49749 - (0 * de) / C49744;
    const double C1109 = -C49758 / C49744;
    const double C51059 = C51020 / C49748;
    const double C51061 = C51024 / C49744;
    const double C278 = -C51060;
    const double C49846 = C49843 - C49839;
    const double C49842 = C49807 * C49836;
    const double C21933 = C5313 * C1234;
    const double C10864 = C10843 * C125;
    const double C10858 = C10843 * C134;
    const double C10854 = C10843 * C124;
    const double C10852 = C10843 * C132;
    const double C10848 = C10843 * C123;
    const double C11052 = C10843 * C287;
    const double C11048 = C10843 * C298;
    const double C11044 = C10843 * C285;
    const double C11246 = C10843 * C464;
    const double C11242 = C10843 * C475;
    const double C11238 = C10843 * C462;
    const double C13919 = C10843 * C290;
    const double C13915 = C10843 * C306;
    const double C13904 = C10843 * C296;
    const double C13900 = C10843 * C286;
    const double C14805 = C10843 * C894;
    const double C14801 = C10843 * C900;
    const double C15154 = C10843 * C1120;
    const double C15150 = C10843 * C1113;
    const double C15360 = C10843 * C1234;
    const double C16018 = C10843 * C1583;
    const double C16014 = C10843 * C1576;
    const double C10856 = C10844 * C464;
    const double C10850 = C10844 * C475;
    const double C10846 = C10844 * C462;
    const double C13917 = C10844 * C1576;
    const double C13913 = C10844 * C1583;
    const double C13906 = C10844 * C900;
    const double C13902 = C10844 * C894;
    const double C14799 = C10844 * C1234;
    const double C33381 = C33360 * C125;
    const double C33375 = C33360 * C134;
    const double C33371 = C33360 * C124;
    const double C33369 = C33360 * C132;
    const double C33365 = C33360 * C123;
    const double C33569 = C33360 * C287;
    const double C33565 = C33360 * C298;
    const double C33561 = C33360 * C285;
    const double C33763 = C33360 * C464;
    const double C33759 = C33360 * C475;
    const double C33755 = C33360 * C462;
    const double C36365 = C33360 * C1113;
    const double C36361 = C33360 * C1120;
    const double C36349 = C33360 * C306;
    const double C36345 = C33360 * C290;
    const double C36341 = C33360 * C296;
    const double C36337 = C33360 * C286;
    const double C37047 = C33360 * C1576;
    const double C37043 = C33360 * C1583;
    const double C37035 = C33360 * C894;
    const double C37031 = C33360 * C900;
    const double C37481 = C33360 * C1234;
    const double C33373 = C33361 * C464;
    const double C33367 = C33361 * C475;
    const double C33363 = C33361 * C462;
    const double C36351 = C33361 * C1583;
    const double C36347 = C33361 * C1576;
    const double C36343 = C33361 * C900;
    const double C36339 = C33361 * C894;
    const double C37029 = C33361 * C1234;
    const double C172 = C153 + C154;
    const double C171 = C151 + C152;
    const double C2501 = C2466 + C2467;
    const double C2500 = C2464 + C2465;
    const double C51075 = C51056 / C49811;
    const double C10869 = C51050 * C146;
    const double C10865 = C51050 * C135;
    const double C10859 = C51050 * C145;
    const double C10855 = C51050 * C133;
    const double C10853 = C51050 * C144;
    const double C10849 = C51050 * C131;
    const double C11063 = C51050 * C307;
    const double C11053 = C51050 * C299;
    const double C11049 = C51050 * C316;
    const double C11045 = C51050 * C295;
    const double C11247 = C51050 * C476;
    const double C11243 = C51050 * C493;
    const double C11239 = C51050 * C472;
    const double C13920 = C51050 * C305;
    const double C13916 = C51050 * C320;
    const double C13905 = C51050 * C315;
    const double C13901 = C51050 * C297;
    const double C14806 = C51050 * C899;
    const double C14802 = C51050 * C909;
    const double C15155 = C51050 * C1125;
    const double C15151 = C51050 * C1121;
    const double C15361 = C51050 * C1239;
    const double C16019 = C51050 * C1588;
    const double C16015 = C51050 * C1584;
    const double C31698 = C51050 * C2454;
    const double C5311 =
        (((0 - (C49807 * C49808) / C49809) * ae) / C49809 - (0 * be) / C49813) /
            (2 * C49809) +
        ((C49807 * (((C50907 - (C49807 * 2 * C49814) / C49809) * ae) / C49809 -
                    C49808 / C49813) +
          C51050) *
         ae) /
            C49809 +
        (0 * ae) / C49809 - C49814 / C49811;
    const double C5330 = C5309 * C476;
    const double C5324 = C5309 * C493;
    const double C5318 = C5309 * C472;
    const double C21944 = C5309 * C1584;
    const double C21938 = C5309 * C1588;
    const double C21932 = C5309 * C909;
    const double C21926 = C5309 * C899;
    const double C22594 = C5309 * C1239;
    const double C5329 = C5312 * C464;
    const double C5323 = C5312 * C475;
    const double C5317 = C5312 * C462;
    const double C21943 = C5312 * C1576;
    const double C21937 = C5312 * C1583;
    const double C21931 = C5312 * C900;
    const double C21925 = C5312 * C894;
    const double C22593 = C5312 * C1234;
    const double C51076 = C51058 / C49809;
    const double C47250 = C44280 * C1239;
    const double C33358 = -C51074;
    const double C5350 = C5308 * C146;
    const double C5344 = C5308 * C135;
    const double C5334 = C5308 * C145;
    const double C5328 = C5308 * C133;
    const double C5326 = C5308 * C144;
    const double C5320 = C5308 * C131;
    const double C5532 = C5308 * C307;
    const double C5522 = C5308 * C316;
    const double C5516 = C5308 * C295;
    const double C5716 = C5308 * C493;
    const double C5710 = C5308 * C472;
    const double C5896 = C5308 * C299;
    const double C6060 = C5308 * C476;
    const double C21946 = C5308 * C305;
    const double C21940 = C5308 * C320;
    const double C21930 = C5308 * C315;
    const double C21924 = C5308 * C297;
    const double C22602 = C5308 * C899;
    const double C22596 = C5308 * C909;
    const double C22860 = C5308 * C1125;
    const double C22854 = C5308 * C1121;
    const double C23028 = C5308 * C1239;
    const double C23532 = C5308 * C1588;
    const double C23526 = C5308 * C1584;
    const double C173 = C155 + C156;
    const double C350 = C326 + C327;
    const double C2502 = C2474 + C2475;
    const double C527 = C503 + C504;
    const double C3262 = C3240 + C3241;
    const double C136 =
        (-2 * (C49869 * C50007 + C50341 * ce)) / C49744 -
        (C49869 * (C49869 * C50011 + C50007 + C49869 * C49990 * ce)) / C49744 -
        ((C50341 + C49990 * C49898) * ce) / C49744;
    const double C300 =
        -(C50071 * (C49869 * C50011 + C50007 + C50346 * ce)) / C49744;
    const double C308 =
        -(C50011 * C50089 + C49869 * C50007 + C50341 * ce) / C49744;
    const double C477 =
        -(C49872 * (C49869 * C50011 + C50007 + C50346 * ce)) / C49744;
    const double C485 =
        -(C50011 * C50151 + C49869 * C50007 + C50341 * ce) / C49744;
    const double C902 = -(C49872 * C50071 * C50011) / C49744;
    const double C516 = C50907 * C484;
    const double C5316 = C5310 * C484;
    const double C5726 = C5308 * C484;
    const double C5712 = C5309 * C484;
    const double C11257 = C51050 * C484;
    const double C11241 = C50971 * C484;
    const double C33758 = C50971 * C484;
    const double C44286 = C44280 * C484;
    const double C916 = C50907 * C901;
    const double C5518 = C5309 * C901;
    const double C6276 = C5308 * C901;
    const double C11047 = C50971 * C901;
    const double C11803 = C51050 * C901;
    const double C33564 = C50971 * C901;
    const double C338 = C117 * C291;
    const double C11062 = C10843 * C291;
    const double C33579 = C33360 * C291;
    const double C515 = C117 * C468;
    const double C5315 = C5313 * C468;
    const double C5711 = C5312 * C468;
    const double C11256 = C10843 * C468;
    const double C11240 = C10844 * C468;
    const double C33773 = C33360 * C468;
    const double C33757 = C33361 * C468;
    const double C915 = C117 * C895;
    const double C5517 = C5312 * C895;
    const double C11046 = C10844 * C895;
    const double C11802 = C10843 * C895;
    const double C33563 = C33361 * C895;
    const double C34319 = C33360 * C895;
    const double C2484 = C117 * C1112;
    const double C13926 = C10843 * C1112;
    const double C36355 = C33360 * C1112;
    const double C2691 = C117 * C1575;
    const double C5529 = C5312 * C1575;
    const double C11060 = C10844 * C1575;
    const double C14812 = C10843 * C1575;
    const double C33577 = C33361 * C1575;
    const double C37037 = C33360 * C1575;
    const double C5723 = C5312 * C1859;
    const double C5713 = C5313 * C1859;
    const double C11254 = C10844 * C1859;
    const double C33771 = C33361 * C1859;
    const double C3742 = C50907 * C1235;
    const double C14804 = C50971 * C1235;
    const double C15357 = C51050 * C1235;
    const double C21928 = C5310 * C1235;
    const double C22600 = C5309 * C1235;
    const double C23022 = C5308 * C1235;
    const double C37034 = C50971 * C1235;
    const double C47244 = C44280 * C1235;
    const double C15359 = C50971 * C4719;
    const double C22598 = C5310 * C4719;
    const double C23024 = C5309 * C4719;
    const double C37480 = C50971 * C4719;
    const double C47914 = C44280 * C4719;
    const double C3741 = C117 * C1227;
    const double C14803 = C10844 * C1227;
    const double C15356 = C10843 * C1227;
    const double C21927 = C5313 * C1227;
    const double C22599 = C5312 * C1227;
    const double C37033 = C33361 * C1227;
    const double C37477 = C33360 * C1227;
    const double C15358 = C10844 * C4711;
    const double C22597 = C5313 * C4711;
    const double C23023 = C5312 * C4711;
    const double C37479 = C33361 * C4711;
    const double C5699 =
        (3 * (C49884 + C49872 * C50516 + C50514 * ae) +
         C49872 * (2 * C50516 +
                   C49872 * (C49892 + C49872 * (C49872 * C49903 + C49993 * ae) +
                             C49872 * C49993 * ae) +
                   C50517 * ae) +
         (2 * C50514 + C49872 * C50517) * ae) /
        C49809;
    const double C175 = C159 + C160;
    const double C352 = C330 + C331;
    const double C529 = C507 + C508;
    const double C2507 = C2488 + C2489;
    const double C3264 = C3250 + C3251;
    const double C174 = C157 + C158;
    const double C137 = (3 * (C49884 + C49892 * C49898) +
                         C49869 * (2 * C49894 + C49869 * C49907)) /
                        C49809;
    const double C301 = (C50071 * (2 * C49894 + C49869 * C49907)) / C49809;
    const double C309 = (C49884 + C49892 * C49898 + C49907 * C50089) / C49809;
    const double C478 = (C49872 * (2 * C49894 + C49869 * C49907) +
                         (2 * C50346 + C49869 * C50348) * ae) /
                        C49809;
    const double C486 =
        (C49884 + C49892 * C49898 + C49872 * (C49872 * C49907 + C50348 * ae) +
         C49872 * C50348 * ae) /
        C49809;
    const double C903 =
        (C49872 * C50071 * C49907 + C50071 * C50348 * ae) / C49809;
    const double C1117 =
        (2 * C50071 * C49907 + C50071 * (C49907 + C49930 * C50089)) / C49809;
    const double C49922 = C49917 / C49744;
    const double C50524 = C50520 + C50521;
    const double C2485 = C50907 * C1119;
    const double C13927 = C51050 * C1119;
    const double C2692 = C50907 * C1582;
    const double C5530 = C5309 * C1582;
    const double C11061 = C50971 * C1582;
    const double C14813 = C51050 * C1582;
    const double C33578 = C50971 * C1582;
    const double C5724 = C5309 * C1866;
    const double C5714 = C5310 * C1866;
    const double C11255 = C50971 * C1866;
    const double C33772 = C50971 * C1866;
    const double C44672 = C44280 * C1866;
    const double C2497 = C50907 * C2456;
    const double C3543 =
        (4 * (2 * C50071 * C49892 + C50071 * C50480) +
         C50071 *
             (3 * C50480 + C50071 * (2 * C50071 * C49903 +
                                     C50071 * (C49903 + C49924 * C50089)))) /
        C49809;
    const double C50557 = C50555 + C50552;
    const double C50584 = C49872 * C50580;
    const double C50637 = 2 * C50580;
    const double C50022 = C50003 * ce;
    const double C50352 = C49869 * C50003;
    const double C50356 = 3 * C50003;
    const double C50426 = C50071 * C50003;
    const double C50530 = C49872 * C50003;
    const double C50529 = C50003 * ae;
    const double C1580 = (C49872 * (C49907 + C49930 * C50089) +
                          (C50348 + C50003 * C50089) * ae) /
                         C49809;
    const double C1864 =
        (2 * (C49872 * C49907 + C50348 * ae) +
         C49872 * (C49907 + C49872 * (C49872 * C49930 + C50003 * ae) +
                   C49872 * C50003 * ae) +
         (C50348 + C50003 * C50151) * ae) /
        C49809;
    const double C1111 =
        2 * C50071 * C50348 + C50071 * (C50348 + C50003 * C50089);
    const double C1574 = C49872 * (C50348 + C50003 * C50089);
    const double C1858 =
        2 * C49872 * C50348 + C49872 * (C50348 + C50003 * C50151);
    const double C50461 = C49998 + C50460;
    const double C50485 = 2 * C50483;
    const double C50543 = C49872 * C50483;
    const double C50542 = C50483 * ae;
    const double C4717 =
        (2 * (C49872 * C50507 + C50429 * ae) +
         C49872 * (C50507 + C49872 * (C49872 * C50071 * C49942 + C50483 * ae) +
                   C49872 * C50483 * ae) +
         (C50429 + C50483 * C50151) * ae) /
        C49809;
    const double C4710 =
        2 * C49872 * C50429 + C49872 * (C50429 + C50483 * C50151);
    const double C50525 = C49998 + C50523;
    const double C50568 = 2 * C50563;
    const double C50566 = C50563 * ae;
    const double C50565 = C50561 + C50562;
    const double C50029 = C49869 * C50028;
    const double C50038 = -2 * C50028;
    const double C50104 = C50028 * C50089;
    const double C50122 = C50071 * C50028;
    const double C50163 = C50028 * C50151;
    const double C50204 = ae * C50028;
    const double C50202 = C49872 * C50028;
    const double C50495 = C50071 * C50494;
    const double C50598 = 3 * C50494;
    const double C50614 = C49872 * C50494;
    const double C50613 = C50494 * ae;
    const double C4715 =
        (2 * (C49872 * C50480 + C50457 * ae) +
         C49872 *
             (C50480 +
              C49872 * (C49872 * (C49903 + C49924 * C50089) + C50494 * ae) +
              C49872 * C50494 * ae) +
         (C50457 + C50494 * C50151) * ae) /
        C49809;
    const double C4709 =
        2 * C49872 * C50457 + C49872 * (C50457 + C50494 * C50151);
    const double C50558 = C50491 + C50556;
    const double C50627 = 2 * C50622;
    const double C50625 = C50622 * ae;
    const double C50628 = C50624 + C50621;
    const double C50585 = C49872 * C50582;
    const double C50643 = 3 * C50582;
    const double C50641 = C50582 * ae;
    const double C50648 = C49872 * C50644;
    const double C50013 = C49869 * C50004;
    const double C50018 = -2 * C50004;
    const double C50085 = C50071 * C50004;
    const double C50162 = ae * C50004;
    const double C50160 = C49872 * C50004;
    const double C1118 = (-2 * C50071 * C50011) / C49744 -
                         (C50071 * (C50004 * C50089 + C50011)) / C49744;
    const double C1581 = -(C49872 * (C50004 * C50089 + C50011)) / C49744;
    const double C1865 = (-2 * C49872 * C50011) / C49744 -
                         (C49872 * (C50004 * C50151 + C50011)) / C49744;
    const double C2687 =
        (-(C49902 * C50089) / C49744) / C49809 - C49891 / C49880 -
        (ae * C49872 * C50102) / C49880 +
        C49872 * (C49872 * ((-(C49923 * C50089) / C49744) / C49809 - C49913) -
                  (ae * C50102) / C49880);
    const double C3233 =
        (((-2 * C50087) / C49744 - (C50071 * C50102) / C49744) * ae) / C49809 +
        C49872 * ((-2 * C50071 * C49902) / C49880 +
                  C50071 * ((-(C49923 * C50089) / C49744) / C49809 - C49913));
    const double C2455 =
        (-3 * (C49994 * C50089 + C50007)) / C49744 +
        C50071 * ((-2 * C50087) / C49744 - (C50071 * C50102) / C49744);
    const double C2682 = -(C50102 * C50151 + C49994 * C50089 + C50007) / C49744;
    const double C3228 =
        C49872 * ((-2 * C50087) / C49744 - (C50071 * C50102) / C49744);
    const double C4714 = (-2 * C49872 * C50102) / C49744 -
                         (C49872 * (C50134 * C50151 + C50102)) / C49744;
    const double C50135 = C50133 / C49744;
    const double C50194 = C50191 / C49880;
    const double C15362 = C10844 * C4718;
    const double C22591 = C5313 * C4718;
    const double C23029 = C5312 * C4718;
    const double C37483 = C33361 * C4718;
    const double C5700 =
        (-3 * (C49994 * C50151 + C50007)) / C49744 +
        C49872 * ((-2 * C50148) / C49744 - (C49872 * C50156) / C49744);
    const double C50231 = C50227 / C49744;
    const double C50229 = C50224 / C49744;
    const double C49966 = C49869 * C49963;
    const double C2458 =
        (3 * (C49907 + C49930 * C50089) +
         C50071 * (2 * C50071 * C49930 + C50071 * (C49930 + C49963 * C50089))) /
        C49809;
    const double C50054 = C49869 * C50051;
    const double C50123 = C50051 * C50089;
    const double C50182 = C50071 * C50051;
    const double C50205 = C50051 * C50151;
    const double C50259 = C50071 * C50258;
    const double C50270 = C50258 * C50151;
    const double C50288 = C50284 + C50192;
    const double C50319 = C49872 * C50314;
    const double C2696 = C50907 * C1233;
    const double C5520 = C5310 * C1233;
    const double C6274 = C5309 * C1233;
    const double C11801 = C50971 * C1233;
    const double C14141 = C51050 * C1233;
    const double C34318 = C50971 * C1233;
    const double C44490 = C44280 * C1233;
    const double C2695 = C117 * C1226;
    const double C5519 = C5313 * C1226;
    const double C6273 = C5312 * C1226;
    const double C11800 = C10844 * C1226;
    const double C14140 = C10843 * C1226;
    const double C34317 = C33361 * C1226;
    const double C41191 = C33360 * C1226;
    const double C163 = C117 * C126;
    const double C10872 = C10843 * C126;
    const double C33389 = C33360 * C126;
    const double C334 = C117 * C288;
    const double C11436 = C10843 * C288;
    const double C33953 = C33360 * C288;
    const double C342 = C117 * C292;
    const double C11070 = C10843 * C292;
    const double C33587 = C33360 * C292;
    const double C511 = C117 * C465;
    const double C5341 = C5312 * C465;
    const double C10862 = C10844 * C465;
    const double C11596 = C10843 * C465;
    const double C33379 = C33361 * C465;
    const double C34113 = C33360 * C465;
    const double C519 = C117 * C469;
    const double C5331 = C5313 * C469;
    const double C6057 = C5312 * C469;
    const double C11264 = C10843 * C469;
    const double C11248 = C10844 * C469;
    const double C33781 = C33360 * C469;
    const double C33765 = C33361 * C469;
    const double C919 = C117 * C896;
    const double C5893 = C5312 * C896;
    const double C11054 = C10844 * C896;
    const double C11810 = C10843 * C896;
    const double C33571 = C33361 * C896;
    const double C34327 = C33360 * C896;
    const double C3748 = C50907 * C2681;
    const double C16017 = C50971 * C2681;
    const double C21942 = C5310 * C2681;
    const double C23528 = C5309 * C2681;
    const double C31862 = C51050 * C2681;
    const double C37046 = C50971 * C2681;
    const double C47258 = C44280 * C2681;
    const double C4307 = C50907 * C3227;
    const double C15153 = C50971 * C3227;
    const double C22856 = C5309 * C3227;
    const double C32370 = C51050 * C3227;
    const double C36364 = C50971 * C3227;
    const double C3559 = C117 * C2451;
    const double C31697 = C10843 * C2451;
    const double C37313 = C33360 * C2451;
    const double C3747 = C117 * C2678;
    const double C16016 = C10844 * C2678;
    const double C21941 = C5313 * C2678;
    const double C23527 = C5312 * C2678;
    const double C31861 = C10843 * C2678;
    const double C37045 = C33361 * C2678;
    const double C37485 = C33360 * C2678;
    const double C4306 = C117 * C3224;
    const double C15152 = C10844 * C3224;
    const double C22855 = C5312 * C3224;
    const double C32369 = C10843 * C3224;
    const double C36363 = C33361 * C3224;
    const double C37997 = C33360 * C3224;
    const double C49935 = C49920 + C49933;
    const double C49948 = C49941 / C49880;
    const double C49958 = -C49955;
    const double C3541 =
        (4 * (2 * C50071 * C49912 + C50071 * C50476) +
         C50071 * (3 * C50476 +
                   C50071 * (2 * C50071 * C49942 +
                             C50071 * (C49942 + C49869 * C49957 * C50089)))) /
        C49809;
    const double C50595 = C50591 + C50594;
    const double C50137 = C50136 / C49744;
    const double C50256 = C50253 / C49744;
    const double C50271 = C50269 / C49880;
    const double C6682 =
        (-3 * (C50131 * C50151 + C50087)) / C49744 +
        C49872 * ((-2 * C50189) / C49744 - (C49872 * C50197) / C49744);
    const double C50287 = C50283 / C49744;
    const double C50285 = C50280 / C49744;
    const double C50235 = C50232 / C49744;
    const double C50312 = C50306 / C49744;
    const double C50308 = C50302 / C49880;
    const double C50320 = -C50316;
    const double C50056 = C50041 + C50053;
    const double C50055 = C50052 / C49744;
    const double C50465 = C50003 + C50464;
    const double C50533 = C50003 + C50531;
    const double C50487 = C50071 * C50486;
    const double C50548 = C50483 + C50546;
    const double C50570 = C49872 * C50567;
    const double C50603 = C50599 + C50602;
    const double C50617 = C50494 + C50615;
    const double C50631 = C49872 * C50629;
    const double C50651 = C50647 + C50649;
    const double C351 = C328 + C329;
    const double C2503 = C2476 + C2477;
    const double C528 = C505 + C506;
    const double C3261 = C3238 + C3239;
    const double C49908 = -C49906;
    const double C3562 = C50907 * C2460;
    const double C31702 = C51050 * C2460;
    const double C15363 = C50971 * C4723;
    const double C22592 = C5310 * C4723;
    const double C23030 = C5309 * C4723;
    const double C37484 = C50971 * C4723;
    const double C47908 = C44280 * C4723;
    const double C50155 = -C50152;
    const double C2506 = C2486 + C2487;
    const double C3754 = C3743 + C3744;
    const double C3263 = C3248 + C3249;
    const double C49932 = -C49929;
    const double C50118 = -C50117;
    const double C50196 = C50193 / C49744;
    const double C50245 = C50243 / C49880;
    const double C50230 = -C50225;
    const double C49965 = -C49962;
    const double C50247 = -C50246;
    const double C50286 = C50281 / C49744;
    const double C50317 = -C50310;
    const double C51062 = C51027 / C49811;
    const double C51064 = C51031 / C49809;
    const double C2300 = -C51063;
    const double C51066 = C51039 / C49748;
    const double C51067 = C51041 / C49744;
    const double C1033 = -C51065;
    const double C51069 = C51043 / C49748;
    const double C51070 = C51045 / C49744;
    const double C1687 = -C51068;
    const double C51072 = C51052 / C49811;
    const double C51073 = C51054 / C49809;
    const double C17290 = -C51071;
    const double C121 =
        (C49763 / C49749 - (0 * de) / C49744) / C49749 + (0 * ce) / C49744;
    const double C643 = C49763 / C49749 - (0 * de) / C49744;
    const double C1037 = C49763 / C49749 + (0 * ce) / C49744;
    const double C49765 = C49762 / C49744;
    const double C51077 = C51019 - C51059;
    const double C51078 = C51023 - C51061;
    const double C38961 =
        (C49846 / C49834 - (0 * be) / C49809) / C49834 + (0 * ae) / C49809;
    const double C44283 = C49846 / C49834 - (0 * be) / C49809;
    const double C49845 = C49842 / C49809;
    const double C21952 = C21933 + C21934;
    const double C10883 = C10856 + C10857;
    const double C10880 = C10850 + C10851;
    const double C10878 = C10846 + C10847;
    const double C13938 = C13917 + C13918;
    const double C13936 = C13913 + C13914;
    const double C13935 = C13906 + C13907;
    const double C13933 = C13902 + C13903;
    const double C14818 = C14799 + C14800;
    const double C33400 = C33373 + C33374;
    const double C33397 = C33367 + C33368;
    const double C33395 = C33363 + C33364;
    const double C36378 = C36351 + C36352;
    const double C36376 = C36347 + C36348;
    const double C36374 = C36343 + C36344;
    const double C36372 = C36339 + C36340;
    const double C37053 = C37029 + C37030;
    const double C2514 = C2501 * C278;
    const double C3418 = C2501 * C1030;
    const double C3548 = C2501 * C50752;
    const double C3908 = C2501 * C51021;
    const double C3547 = C2500 * C1109;
    const double C51087 = C51048 - C51075;
    const double C10887 = C10864 + C10865;
    const double C10884 = C10858 + C10859;
    const double C10882 = C10854 + C10855;
    const double C10881 = C10852 + C10853;
    const double C10879 = C10848 + C10849;
    const double C11080 = C11052 + C11053;
    const double C11078 = C11048 + C11049;
    const double C11076 = C11044 + C11045;
    const double C11274 = C11246 + C11247;
    const double C11272 = C11242 + C11243;
    const double C11270 = C11238 + C11239;
    const double C13939 = C13919 + C13920;
    const double C13937 = C13915 + C13916;
    const double C13934 = C13904 + C13905;
    const double C13932 = C13900 + C13901;
    const double C14821 = C14805 + C14806;
    const double C14819 = C14801 + C14802;
    const double C15160 = C15154 + C15155;
    const double C15158 = C15150 + C15151;
    const double C15366 = C15360 + C15361;
    const double C16024 = C16018 + C16019;
    const double C16022 = C16014 + C16015;
    const double C5343 = C5311 * C125;
    const double C5333 = C5311 * C134;
    const double C5327 = C5311 * C124;
    const double C5325 = C5311 * C132;
    const double C5319 = C5311 * C123;
    const double C5531 = C5311 * C291;
    const double C5521 = C5311 * C298;
    const double C5515 = C5311 * C285;
    const double C5725 = C5311 * C468;
    const double C5715 = C5311 * C475;
    const double C5709 = C5311 * C462;
    const double C5895 = C5311 * C287;
    const double C6059 = C5311 * C464;
    const double C6275 = C5311 * C895;
    const double C21945 = C5311 * C290;
    const double C21939 = C5311 * C306;
    const double C21929 = C5311 * C296;
    const double C21923 = C5311 * C286;
    const double C22601 = C5311 * C894;
    const double C22595 = C5311 * C900;
    const double C22859 = C5311 * C1120;
    const double C22853 = C5311 * C1113;
    const double C23027 = C5311 * C1234;
    const double C23021 = C5311 * C1227;
    const double C23531 = C5311 * C1583;
    const double C23525 = C5311 * C1576;
    const double C5358 = C5329 + C5330;
    const double C5355 = C5323 + C5324;
    const double C5352 = C5317 + C5318;
    const double C21957 = C21943 + C21944;
    const double C21954 = C21937 + C21938;
    const double C21951 = C21931 + C21932;
    const double C21948 = C21925 + C21926;
    const double C22604 = C22593 + C22594;
    const double C51088 = C51057 - C51076;
    const double C33386 = C33358 * C146;
    const double C33382 = C33358 * C135;
    const double C33376 = C33358 * C145;
    const double C33372 = C33358 * C133;
    const double C33370 = C33358 * C144;
    const double C33366 = C33358 * C131;
    const double C33580 = C33358 * C307;
    const double C33570 = C33358 * C299;
    const double C33566 = C33358 * C316;
    const double C33562 = C33358 * C295;
    const double C33774 = C33358 * C484;
    const double C33764 = C33358 * C476;
    const double C33760 = C33358 * C493;
    const double C33756 = C33358 * C472;
    const double C34320 = C33358 * C901;
    const double C36366 = C33358 * C1121;
    const double C36362 = C33358 * C1125;
    const double C36356 = C33358 * C1119;
    const double C36350 = C33358 * C320;
    const double C36346 = C33358 * C305;
    const double C36342 = C33358 * C315;
    const double C36338 = C33358 * C297;
    const double C37048 = C33358 * C1584;
    const double C37044 = C33358 * C1588;
    const double C37038 = C33358 * C1582;
    const double C37036 = C33358 * C899;
    const double C37032 = C33358 * C909;
    const double C37318 = C33358 * C2460;
    const double C37314 = C33358 * C2454;
    const double C37486 = C33358 * C2681;
    const double C37482 = C33358 * C1239;
    const double C37478 = C33358 * C1235;
    const double C37998 = C33358 * C3227;
    const double C41192 = C33358 * C1233;
    const double C2468 = C350 * C284;
    const double C3549 = C350 * C1109;
    const double C3909 = C350 * C49763;
    const double C3551 = C2502 * C1109;
    const double C3740 = C3262 * C1109;
    const double C161 = C117 * C136;
    const double C5349 = C5311 * C136;
    const double C10868 = C10843 * C136;
    const double C33385 = C33360 * C136;
    const double C332 = C117 * C300;
    const double C5901 = C5311 * C300;
    const double C11056 = C10843 * C300;
    const double C33573 = C33360 * C300;
    const double C340 = C117 * C308;
    const double C5537 = C5311 * C308;
    const double C11066 = C10843 * C308;
    const double C33583 = C33360 * C308;
    const double C509 = C117 * C477;
    const double C5335 = C5312 * C477;
    const double C6065 = C5311 * C477;
    const double C10860 = C10844 * C477;
    const double C11250 = C10843 * C477;
    const double C33377 = C33361 * C477;
    const double C33767 = C33360 * C477;
    const double C517 = C117 * C485;
    const double C5321 = C5313 * C485;
    const double C5731 = C5311 * C485;
    const double C5717 = C5312 * C485;
    const double C11260 = C10843 * C485;
    const double C11244 = C10844 * C485;
    const double C33777 = C33360 * C485;
    const double C33761 = C33361 * C485;
    const double C917 = C117 * C902;
    const double C5523 = C5312 * C902;
    const double C6281 = C5311 * C902;
    const double C11050 = C10844 * C902;
    const double C11806 = C10843 * C902;
    const double C33567 = C33361 * C902;
    const double C34323 = C33360 * C902;
    const double C356 = C338 + C339;
    const double C11085 = C11062 + C11063;
    const double C533 = C515 + C516;
    const double C5351 = C5315 + C5316;
    const double C5734 = C5711 + C5712;
    const double C11279 = C11256 + C11257;
    const double C11271 = C11240 + C11241;
    const double C33788 = C33757 + C33758;
    const double C927 = C915 + C916;
    const double C5540 = C5517 + C5518;
    const double C11077 = C11046 + C11047;
    const double C11817 = C11802 + C11803;
    const double C33594 = C33563 + C33564;
    const double C3753 = C3741 + C3742;
    const double C14820 = C14803 + C14804;
    const double C15364 = C15356 + C15357;
    const double C21949 = C21927 + C21928;
    const double C22607 = C22599 + C22600;
    const double C37055 = C37033 + C37034;
    const double C15365 = C15358 + C15359;
    const double C22606 = C22597 + C22598;
    const double C23034 = C23023 + C23024;
    const double C37494 = C37479 + C37480;
    const double C2472 = C352 * C284;
    const double C3913 = C352 * C49763;
    const double C9212 = C352 * C1109;
    const double C3558 = C2507 * C1109;
    const double C3736 = C3264 * C1109;
    const double C164 = C50907 * C137;
    const double C10873 = C51050 * C137;
    const double C33390 = C33358 * C137;
    const double C335 = C50907 * C301;
    const double C11437 = C51050 * C301;
    const double C33954 = C33358 * C301;
    const double C343 = C50907 * C309;
    const double C11071 = C51050 * C309;
    const double C33588 = C33358 * C309;
    const double C512 = C50907 * C478;
    const double C5342 = C5309 * C478;
    const double C10863 = C50971 * C478;
    const double C11597 = C51050 * C478;
    const double C33380 = C50971 * C478;
    const double C34114 = C33358 * C478;
    const double C520 = C50907 * C486;
    const double C5332 = C5310 * C486;
    const double C6058 = C5309 * C486;
    const double C11265 = C51050 * C486;
    const double C11249 = C50971 * C486;
    const double C33782 = C33358 * C486;
    const double C33766 = C50971 * C486;
    const double C44302 = C44280 * C486;
    const double C920 = C50907 * C903;
    const double C5894 = C5309 * C903;
    const double C11055 = C50971 * C903;
    const double C11811 = C51050 * C903;
    const double C33572 = C50971 * C903;
    const double C34328 = C33358 * C903;
    const double C2493 = C50907 * C1117;
    const double C49925 = -C49922;
    const double C2505 = C2484 + C2485;
    const double C13941 = C13926 + C13927;
    const double C2703 = C2691 + C2692;
    const double C5546 = C5529 + C5530;
    const double C11084 = C11060 + C11061;
    const double C14823 = C14812 + C14813;
    const double C33601 = C33577 + C33578;
    const double C5740 = C5723 + C5724;
    const double C5735 = C5713 + C5714;
    const double C11278 = C11254 + C11255;
    const double C33795 = C33771 + C33772;
    const double C20614 = C50907 * C3543;
    const double C50586 = C49892 + C50584;
    const double C50026 = C50022 / C49744;
    const double C50353 = C50351 + C50352;
    const double C1231 =
        (C50071 * C49907 + C49872 * (C49872 * C50071 * C49930 + C50426 * ae) +
         C49872 * C50426 * ae) /
        C49809;
    const double C6267 =
        (2 * (C49872 * C50536 + C50426 * ae) +
         C49872 * (C50536 + C49872 * (C49872 * C50071 * C49963 + C50537 * ae) +
                   C49872 * C50537 * ae) +
         (C50426 + C50537 * C50151) * ae) /
        C49809;
    const double C1225 = C50071 * C50348 + C50426 * C50151;
    const double C6266 =
        2 * C49872 * C50426 + C49872 * (C50426 + C50537 * C50151);
    const double C50532 = C50528 + C50529;
    const double C3026 = C50907 * C1580;
    const double C11069 = C50971 * C1580;
    const double C33586 = C50971 * C1580;
    const double C6056 = C5310 * C1864;
    const double C11263 = C50971 * C1864;
    const double C33780 = C50971 * C1864;
    const double C45014 = C44280 * C1864;
    const double C2492 = C117 * C1111;
    const double C3025 = C117 * C1574;
    const double C11068 = C10844 * C1574;
    const double C33585 = C33361 * C1574;
    const double C6055 = C5313 * C1858;
    const double C11262 = C10844 * C1858;
    const double C33779 = C33361 * C1858;
    const double C2683 =
        (C49894 + C49912 * C50089 +
         C49872 * (C49872 * (C49912 + C49942 * C50089) + C50461 * ae) +
         C49872 * C50461 * ae) /
        C49809;
    const double C3229 =
        (C49872 * (2 * C50071 * C49912 + C50071 * (C49912 + C49942 * C50089)) +
         (2 * C50429 + C50071 * C50461) * ae) /
        C49809;
    const double C4713 =
        (2 * (C49872 * C50476 + C50461 * ae) +
         C49872 * (C50476 +
                   C49872 * (C49872 * (C49942 + C49869 * C49957 * C50089) +
                             C50486 * ae) +
                   C49872 * C50486 * ae) +
         (C50461 + C50486 * C50151) * ae) /
        C49809;
    const double C2452 = 3 * (C50346 + C49998 * C50089) +
                         C50071 * (2 * C50429 + C50071 * C50461);
    const double C2679 = C50346 + C49998 * C50089 + C50461 * C50151;
    const double C3225 = C49872 * (2 * C50429 + C50071 * C50461);
    const double C4708 =
        2 * C49872 * C50461 + C49872 * (C50461 + C50486 * C50151);
    const double C50547 = C50545 + C50542;
    const double C6272 = C5310 * C4717;
    const double C14139 = C50971 * C4717;
    const double C41190 = C50971 * C4717;
    const double C45226 = C44280 * C4717;
    const double C6271 = C5313 * C4710;
    const double C14138 = C10844 * C4710;
    const double C41189 = C33361 * C4710;
    const double C5701 =
        (3 * (C49894 + C49872 * C50524 + C50522 * ae) +
         C49872 * (2 * C50524 +
                   C49872 * (C49912 + C49872 * (C49872 * C49942 + C50021 * ae) +
                             C49872 * C50021 * ae) +
                   C50525 * ae) +
         (2 * C50522 + C49872 * C50525) * ae) /
        C49809;
    const double C5697 = 3 * (C50346 + C49998 * C50151) +
                         C49872 * (2 * C50522 + C49872 * C50525);
    const double C50569 = C49872 * C50565;
    const double C50030 = C50029 + C50000;
    const double C50043 = C50038 / C49744;
    const double C50105 = C50104 + C50004;
    const double C50124 = -2 * C50122;
    const double C50181 = ae * C50122;
    const double C50179 = C49872 * C50122;
    const double C50165 = C50163 + C50004;
    const double C50207 = C50204 / C49880;
    const double C50208 = -2 * C50202;
    const double C50206 = ae * C50202;
    const double C50496 = C50493 + C50495;
    const double C50616 = C50612 + C50613;
    const double C23530 = C5310 * C4715;
    const double C31864 = C50971 * C4715;
    const double C37488 = C50971 * C4715;
    const double C48842 = C44280 * C4715;
    const double C23529 = C5313 * C4709;
    const double C31863 = C10844 * C4709;
    const double C37487 = C33361 * C4709;
    const double C6683 =
        (3 * (C50510 + C49872 * C50557 + C50553 * ae) +
         C49872 * (2 * C50557 +
                   C49872 * (C50551 +
                             C49872 * (C49872 * C50071 * C49924 + C50554 * ae) +
                             C49872 * C50554 * ae) +
                   C50558 * ae) +
         (2 * C50553 + C49872 * C50558) * ae) /
        C49809;
    const double C6679 = 3 * (C50432 + C50491 * C50151) +
                         C49872 * (2 * C50553 + C49872 * C50558);
    const double C50630 = C49872 * C50628;
    const double C50587 = C50583 + C50585;
    const double C50650 = C49903 + C50648;
    const double C50015 = C50013 + C49994;
    const double C50023 = C50018 / C49744;
    const double C1232 = -(C50085 * C50151 + C50071 * C50011) / C49744;
    const double C4716 = (-2 * C49872 * C50085) / C49744 -
                         (C49872 * (C50122 * C50151 + C50085)) / C49744;
    const double C50164 = C50162 / C49880;
    const double C2490 = C117 * C1118;
    const double C13930 = C10843 * C1118;
    const double C36367 = C33360 * C1118;
    const double C2693 = C117 * C1581;
    const double C5535 = C5312 * C1581;
    const double C11064 = C10844 * C1581;
    const double C14816 = C10843 * C1581;
    const double C33581 = C33361 * C1581;
    const double C37049 = C33360 * C1581;
    const double C5729 = C5312 * C1865;
    const double C5719 = C5313 * C1865;
    const double C11258 = C10844 * C1865;
    const double C33775 = C33361 * C1865;
    const double C3750 = C50907 * C2687;
    const double C16021 = C50971 * C2687;
    const double C21936 = C5310 * C2687;
    const double C23534 = C5309 * C2687;
    const double C31866 = C51050 * C2687;
    const double C37042 = C50971 * C2687;
    const double C37490 = C33358 * C2687;
    const double C47252 = C44280 * C2687;
    const double C4309 = C50907 * C3233;
    const double C15157 = C50971 * C3233;
    const double C22862 = C5309 * C3233;
    const double C32374 = C51050 * C3233;
    const double C36360 = C50971 * C3233;
    const double C38002 = C33358 * C3233;
    const double C3561 = C117 * C2455;
    const double C31701 = C10843 * C2455;
    const double C37317 = C33360 * C2455;
    const double C3749 = C117 * C2682;
    const double C16020 = C10844 * C2682;
    const double C21935 = C5313 * C2682;
    const double C23533 = C5312 * C2682;
    const double C31865 = C10843 * C2682;
    const double C37041 = C33361 * C2682;
    const double C37489 = C33360 * C2682;
    const double C4308 = C117 * C3228;
    const double C15156 = C10844 * C3228;
    const double C22861 = C5312 * C3228;
    const double C32373 = C10843 * C3228;
    const double C36359 = C33361 * C3228;
    const double C38001 = C33360 * C3228;
    const double C23535 = C5313 * C4714;
    const double C31867 = C10844 * C4714;
    const double C37491 = C33361 * C4714;
    const double C50233 = -C50229;
    const double C49968 = C49952 + C49966;
    const double C50057 = C50054 + C50024;
    const double C50125 = C50123 + C50028;
    const double C50185 = C50182 * C50151;
    const double C50209 = C50205 + C50028;
    const double C50260 = C50259 / C49744;
    const double C50272 = C50270 + C50134;
    const double C50291 = C49872 * C50288;
    const double C50322 = C50319 / C49744;
    const double C2705 = C2695 + C2696;
    const double C5541 = C5519 + C5520;
    const double C6284 = C6273 + C6274;
    const double C11816 = C11800 + C11801;
    const double C14147 = C14140 + C14141;
    const double C34333 = C34317 + C34318;
    const double C3569 = C3559 + C3560;
    const double C31708 = C31697 + C31698;
    const double C3755 = C3747 + C3748;
    const double C16023 = C16016 + C16017;
    const double C21956 = C21941 + C21942;
    const double C23538 = C23527 + C23528;
    const double C31869 = C31861 + C31862;
    const double C37061 = C37045 + C37046;
    const double C4314 = C4306 + C4307;
    const double C15159 = C15152 + C15153;
    const double C22866 = C22855 + C22856;
    const double C32379 = C32369 + C32370;
    const double C36385 = C36363 + C36364;
    const double C139 = (4 * (2 * C49894 + C49869 * C49907) +
                         C49869 * (3 * C49907 + C49869 * C49935)) /
                        C49809;
    const double C303 = (C50071 * (3 * C49907 + C49869 * C49935)) / C49809;
    const double C311 =
        (2 * C49894 + C49869 * C49907 + C49935 * C50089) / C49809;
    const double C49961 = C49958 / C49809;
    const double C20606 =
        (5 * (3 * C50480 + C50071 * C50595) +
         C50071 * (4 * C50595 +
                   C50071 * (3 * C50593 +
                             C50071 * (2 * C50071 * C49924 +
                                       C50071 * (C49924 + C49957 * C50089))))) /
        C49809;
    const double C50138 = C50135 - C50137;
    const double C23031 = C5313 * C6682;
    const double C50289 = -C50285;
    const double C50238 = C50231 - C50235;
    const double C50323 = C50320 / C49809;
    const double C50058 = C50056 * ce;
    const double C50357 = C49869 * C50056;
    const double C50423 = C50071 * C50056;
    const double C2685 =
        (C49907 + C49930 * C50089 +
         C49872 * (C49872 * (C49930 + C49963 * C50089) + C50465 * ae) +
         C49872 * C50465 * ae) /
        C49809;
    const double C3231 =
        (C49872 * (2 * C50071 * C49930 + C50071 * (C49930 + C49963 * C50089)) +
         (2 * C50426 + C50071 * C50465) * ae) /
        C49809;
    const double C2453 = 3 * (C50348 + C50003 * C50089) +
                         C50071 * (2 * C50426 + C50071 * C50465);
    const double C2680 = C50348 + C50003 * C50089 + C50465 * C50151;
    const double C3226 = C49872 * (2 * C50426 + C50071 * C50465);
    const double C5698 = 3 * (C50348 + C50003 * C50151) +
                         C49872 * (2 * C50530 + C49872 * C50533);
    const double C50488 = C50485 + C50487;
    const double C6678 = 3 * (C50429 + C50483 * C50151) +
                         C49872 * (2 * C50543 + C49872 * C50548);
    const double C50572 = C50568 + C50570;
    const double C50604 = C50071 * C50603;
    const double C23016 = 3 * (C50457 + C50494 * C50151) +
                          C49872 * (2 * C50614 + C49872 * C50617);
    const double C50633 = C50627 + C50631;
    const double C50653 = C49872 * C50651;
    const double C2471 = C351 * C278;
    const double C2469 = C351 * C50757;
    const double C3424 = C351 * C1030;
    const double C3420 = C351 * C1031;
    const double C3550 = C351 * C50752;
    const double C3912 = C351 * C51021;
    const double C3910 = C351 * C50757;
    const double C2516 = C2503 * C278;
    const double C3430 = C2503 * C1030;
    const double C3552 = C2503 * C50752;
    const double C3916 = C2503 * C51021;
    const double C3267 = C3261 * C278;
    const double C3739 = C3261 * C50752;
    const double C4135 = C3261 * C51021;
    const double C49909 = C49908 / C49809;
    const double C15367 = C15362 + C15363;
    const double C22603 = C22591 + C22592;
    const double C23037 = C23029 + C23030;
    const double C37496 = C37483 + C37484;
    const double C50157 = C50155 / C49809;
    const double C2519 = C2506 * C278;
    const double C3557 = C2506 * C50752;
    const double C3924 = C2506 * C51021;
    const double C20534 = C2506 * C1030;
    const double C3758 = C3754 * C50752;
    const double C3269 = C3263 * C278;
    const double C3735 = C3263 * C50752;
    const double C4143 = C3263 * C51021;
    const double C49934 = C49932 / C49809;
    const double C50119 = C50118 / C49809;
    const double C50198 = -C50196;
    const double C50234 = C50230 / C49809;
    const double C49967 = C49965 / C49809;
    const double C50248 = C50247 / C49809;
    const double C50290 = -C50286;
    const double C50321 = C50317 / C49809;
    const double C51079 = C51026 - C51062;
    const double C51080 = C51030 - C51064;
    const double C51081 = C51033 - C51066;
    const double C51082 = C51040 - C51067;
    const double C51083 = C51035 - C51069;
    const double C51084 = C51044 - C51070;
    const double C51085 = C51046 - C51072;
    const double C51086 = C51053 - C51073;
    const double C2859 = C352 * C643;
    const double C3421 = C352 * C1037;
    const double C49767 = C50752 - C49765;
    const double C2868 = C2503 * C51077;
    const double C2862 = C351 * C51077;
    const double C2856 = C2501 * C51077;
    const double C20198 = C2506 * C51077;
    const double C106 = (C51077 * C50747) / C49744 + (C51021 - C51060) / C49749;
    const double C2858 = C351 * C51078;
    const double C107 =
        (C51078 * C50747) / C49744 + (2 * C50757 + C51077) / C49749;
    const double C108 = (C50747 * C50757) / C49753 + C51078 / C49749;
    const double C44301 = C44283 * C469;
    const double C44291 = C44283 * C485;
    const double C44285 = C44283 * C468;
    const double C44489 = C44283 * C1226;
    const double C44677 = C44283 * C1865;
    const double C44671 = C44283 * C1859;
    const double C45013 = C44283 * C1858;
    const double C45225 = C44283 * C4710;
    const double C47257 = C44283 * C2678;
    const double C47251 = C44283 * C2682;
    const double C47249 = C44283 * C1234;
    const double C47243 = C44283 * C1227;
    const double C47913 = C44283 * C4711;
    const double C47907 = C44283 * C4718;
    const double C48343 = C44283 * C6682;
    const double C48847 = C44283 * C4714;
    const double C48841 = C44283 * C4709;
    const double C49848 = C50907 - C49845;
    const double C44320 = C51087 * C146;
    const double C44314 = C51087 * C135;
    const double C44304 = C51087 * C145;
    const double C44298 = C51087 * C133;
    const double C44296 = C51087 * C144;
    const double C44290 = C51087 * C131;
    const double C44502 = C51087 * C307;
    const double C44492 = C51087 * C316;
    const double C44486 = C51087 * C295;
    const double C44684 = C51087 * C484;
    const double C44674 = C51087 * C493;
    const double C44668 = C51087 * C472;
    const double C44854 = C51087 * C299;
    const double C45018 = C51087 * C476;
    const double C45230 = C51087 * C901;
    const double C47262 = C51087 * C305;
    const double C47256 = C51087 * C320;
    const double C47246 = C51087 * C315;
    const double C47240 = C51087 * C297;
    const double C47918 = C51087 * C899;
    const double C47912 = C51087 * C909;
    const double C48176 = C51087 * C1125;
    const double C48170 = C51087 * C1121;
    const double C48340 = C51087 * C1239;
    const double C48334 = C51087 * C1235;
    const double C48844 = C51087 * C1588;
    const double C48838 = C51087 * C1584;
    const double C38954 =
        (C51087 * C50966) / C49809 + (C51050 - C51074) / C49834;
    const double C10894 = C10882 + C10883;
    const double C30807 = C13939 + C13938;
    const double C30808 = C13937 + C13936;
    const double C5365 = C5343 + C5344;
    const double C5360 = C5333 + C5334;
    const double C5357 = C5327 + C5328;
    const double C5356 = C5325 + C5326;
    const double C5353 = C5319 + C5320;
    const double C5547 = C5531 + C5532;
    const double C5542 = C5521 + C5522;
    const double C5539 = C5515 + C5516;
    const double C5741 = C5725 + C5726;
    const double C5736 = C5715 + C5716;
    const double C5733 = C5709 + C5710;
    const double C5905 = C5895 + C5896;
    const double C6069 = C6059 + C6060;
    const double C6285 = C6275 + C6276;
    const double C21958 = C21945 + C21946;
    const double C21955 = C21939 + C21940;
    const double C21950 = C21929 + C21930;
    const double C21947 = C21923 + C21924;
    const double C22608 = C22601 + C22602;
    const double C22605 = C22595 + C22596;
    const double C22868 = C22859 + C22860;
    const double C22865 = C22853 + C22854;
    const double C23036 = C23027 + C23028;
    const double C23033 = C23021 + C23022;
    const double C23540 = C23531 + C23532;
    const double C23537 = C23525 + C23526;
    const double C44312 = C51088 * C478;
    const double C44300 = C51088 * C476;
    const double C44294 = C51088 * C493;
    const double C44288 = C51088 * C472;
    const double C44500 = C51088 * C1582;
    const double C44488 = C51088 * C901;
    const double C44682 = C51088 * C1866;
    const double C44670 = C51088 * C484;
    const double C44852 = C51088 * C903;
    const double C45016 = C51088 * C486;
    const double C45228 = C51088 * C1233;
    const double C47260 = C51088 * C1584;
    const double C47254 = C51088 * C1588;
    const double C47248 = C51088 * C909;
    const double C47242 = C51088 * C899;
    const double C47916 = C51088 * C1235;
    const double C47910 = C51088 * C1239;
    const double C48178 = C51088 * C3233;
    const double C48172 = C51088 * C3227;
    const double C48342 = C51088 * C4723;
    const double C48336 = C51088 * C4719;
    const double C48846 = C51088 * C2687;
    const double C48840 = C51088 * C2681;
    const double C38955 =
        (C51088 * C50966) / C49809 + (2 * C50971 + C51087) / C49834;
    const double C38956 = (C50966 * C50971) / C49813 + C51088 / C49834;
    const double C33404 = C33381 + C33382;
    const double C33401 = C33375 + C33376;
    const double C33399 = C33371 + C33372;
    const double C33398 = C33369 + C33370;
    const double C33396 = C33365 + C33366;
    const double C33602 = C33579 + C33580;
    const double C33597 = C33569 + C33570;
    const double C33595 = C33565 + C33566;
    const double C33593 = C33561 + C33562;
    const double C33796 = C33773 + C33774;
    const double C33791 = C33763 + C33764;
    const double C33789 = C33759 + C33760;
    const double C33787 = C33755 + C33756;
    const double C34334 = C34319 + C34320;
    const double C36386 = C36365 + C36366;
    const double C36384 = C36361 + C36362;
    const double C36381 = C36355 + C36356;
    const double C36377 = C36349 + C36350;
    const double C36375 = C36345 + C36346;
    const double C36373 = C36341 + C36342;
    const double C36371 = C36337 + C36338;
    const double C37062 = C37047 + C37048;
    const double C37060 = C37043 + C37044;
    const double C37057 = C37037 + C37038;
    const double C37056 = C37035 + C37036;
    const double C37054 = C37031 + C37032;
    const double C37324 = C37313 + C37314;
    const double C37497 = C37485 + C37486;
    const double C37495 = C37481 + C37482;
    const double C37493 = C37477 + C37478;
    const double C38007 = C37997 + C37998;
    const double C41198 = C41191 + C41192;
    const double C176 = C161 + C162;
    const double C5368 = C5349 + C5350;
    const double C10889 = C10868 + C10869;
    const double C33406 = C33385 + C33386;
    const double C2478 = C356 * C284;
    const double C3553 = C356 * C1109;
    const double C3917 = C356 * C49763;
    const double C3237 = C927 * C284;
    const double C3738 = C927 * C1109;
    const double C4134 = C927 * C49763;
    const double C13910 = C11076 + C11077;
    const double C13908 = C11077 + C11076;
    const double C3757 = C3753 * C1109;
    const double C177 = C163 + C164;
    const double C10891 = C10872 + C10873;
    const double C33408 = C33389 + C33390;
    const double C354 = C334 + C335;
    const double C11443 = C11436 + C11437;
    const double C33960 = C33953 + C33954;
    const double C358 = C342 + C343;
    const double C11089 = C11070 + C11071;
    const double C33606 = C33587 + C33588;
    const double C531 = C511 + C512;
    const double C5364 = C5341 + C5342;
    const double C10886 = C10862 + C10863;
    const double C11603 = C11596 + C11597;
    const double C33403 = C33379 + C33380;
    const double C34120 = C34113 + C34114;
    const double C535 = C519 + C520;
    const double C5359 = C5331 + C5332;
    const double C6068 = C6057 + C6058;
    const double C11283 = C11264 + C11265;
    const double C11275 = C11248 + C11249;
    const double C33800 = C33781 + C33782;
    const double C33792 = C33765 + C33766;
    const double C929 = C919 + C920;
    const double C5904 = C5893 + C5894;
    const double C11081 = C11054 + C11055;
    const double C11821 = C11810 + C11811;
    const double C33598 = C33571 + C33572;
    const double C34338 = C34327 + C34328;
    const double C49928 = C49925 / C49809;
    const double C2518 = C2505 * C284;
    const double C3556 = C2505 * C1109;
    const double C3923 = C2505 * C49763;
    const double C3247 = C2703 * C284;
    const double C3734 = C2703 * C1109;
    const double C4142 = C2703 * C49763;
    const double C13923 = C11084 + C11085;
    const double C13912 = C11085 + C11084;
    const double C50588 = C50586 + C50581;
    const double C480 = (C49872 * (3 * C49907 + C49869 * C49935) +
                         (3 * C50348 + C49869 * C50353) * ae) /
                        C49809;
    const double C488 =
        (2 * C49894 + C49869 * C49907 +
         C49872 * (C49872 * C49935 + C50353 * ae) + C49872 * C50353 * ae) /
        C49809;
    const double C905 =
        (C49872 * C50071 * C49935 + C50071 * C50353 * ae) / C49809;
    const double C127 = 4 * (2 * C50346 + C49869 * C50348) +
                        C49869 * (3 * C50348 + C49869 * C50353);
    const double C289 = C50071 * (3 * C50348 + C49869 * C50353);
    const double C293 = 2 * C50346 + C49869 * C50348 + C50353 * C50089;
    const double C466 = C49872 * (3 * C50348 + C49869 * C50353);
    const double C470 = 2 * C50346 + C49869 * C50348 + C50353 * C50151;
    const double C897 = C49872 * C50071 * C50353;
    const double C1110 =
        2 * C50071 * C50353 + C50071 * (C50353 + C50056 * C50089);
    const double C1573 = C49872 * (C50353 + C50056 * C50089);
    const double C1857 =
        2 * C49872 * C50353 + C49872 * (C50353 + C50056 * C50151);
    const double C5892 = C5310 * C1231;
    const double C8461 = C50907 * C1231;
    const double C11809 = C50971 * C1231;
    const double C34326 = C50971 * C1231;
    const double C44850 = C44280 * C1231;
    const double C5891 = C5313 * C1225;
    const double C8460 = C117 * C1225;
    const double C11808 = C10844 * C1225;
    const double C34325 = C33361 * C1225;
    const double C44849 = C44283 * C1225;
    const double C5703 =
        (3 * (C49907 + C49872 * C50532 + C50530 * ae) +
         C49872 * (2 * C50532 +
                   C49872 * (C49930 + C49872 * (C49872 * C49963 + C50050 * ae) +
                             C49872 * C50050 * ae) +
                   C50533 * ae) +
         (2 * C50530 + C49872 * C50533) * ae) /
        C49809;
    const double C2509 = C2492 + C2493;
    const double C3029 = C3025 + C3026;
    const double C11088 = C11068 + C11069;
    const double C33605 = C33585 + C33586;
    const double C6067 = C6055 + C6056;
    const double C11282 = C11262 + C11263;
    const double C33799 = C33779 + C33780;
    const double C2700 = C50907 * C2683;
    const double C5528 = C5310 * C2683;
    const double C14811 = C50971 * C2683;
    const double C37040 = C50971 * C2683;
    const double C44498 = C44280 * C2683;
    const double C3258 = C50907 * C3229;
    const double C13925 = C50971 * C3229;
    const double C36358 = C50971 * C3229;
    const double C2496 = C117 * C2452;
    const double C2699 = C117 * C2679;
    const double C5527 = C5313 * C2679;
    const double C14810 = C10844 * C2679;
    const double C37039 = C33361 * C2679;
    const double C44497 = C44283 * C2679;
    const double C3257 = C117 * C3225;
    const double C13924 = C10844 * C3225;
    const double C36357 = C33361 * C3225;
    const double C6681 =
        (3 * (C50507 + C49872 * C50547 + C50543 * ae) +
         C49872 * (2 * C50547 +
                   C49872 * (C50541 +
                             C49872 * (C49872 * C50071 * C49869 * C49957 +
                                       C50544 * ae) +
                             C49872 * C50544 * ae) +
                   C50548 * ae) +
         (2 * C50543 + C49872 * C50548) * ae) /
        C49809;
    const double C6283 = C6271 + C6272;
    const double C14146 = C14138 + C14139;
    const double C41197 = C41189 + C41190;
    const double C5722 = C5310 * C5701;
    const double C44680 = C44280 * C5701;
    const double C5721 = C5313 * C5697;
    const double C44679 = C44283 * C5697;
    const double C50571 = C49912 + C50569;
    const double C50031 = C50030 + C50025;
    const double C2457 =
        (-3 * (C50004 * C50089 + C50011)) / C49744 +
        C50071 * ((-2 * C50085) / C49744 - (C50071 * C50105) / C49744);
    const double C2684 = -(C50105 * C50151 + C50004 * C50089 + C50011) / C49744;
    const double C3230 =
        C49872 * ((-2 * C50085) / C49744 - (C50071 * C50105) / C49744);
    const double C50126 = C50124 / C49744;
    const double C50184 = C50181 / C49880;
    const double C5702 =
        (-3 * (C50004 * C50151 + C50011)) / C49744 +
        C49872 * ((-2 * C50160) / C49744 - (C49872 * C50165) / C49744);
    const double C50212 = C50208 / C49744;
    const double C50210 = C50206 / C49880;
    const double C3729 =
        (2 * C50071 * C49892 + C50071 * C50480 +
         C49872 * (C49872 * (2 * C50071 * C49903 +
                             C50071 * (C49903 + C49924 * C50089)) +
                   C50496 * ae) +
         C49872 * C50496 * ae) /
        C49809;
    const double C4300 =
        (C49872 *
             (3 * C50480 + C50071 * (2 * C50071 * C49903 +
                                     C50071 * (C49903 + C49924 * C50089))) +
         (3 * C50457 + C50071 * C50496) * ae) /
        C49809;
    const double C21350 =
        (2 * (C49872 * C50595 + C50496 * ae) +
         C49872 * (C50595 +
                   C49872 * (C49872 * (2 * C50071 * C49924 +
                                       C50071 * (C49924 + C49957 * C50089)) +
                             C50603 * ae) +
                   C49872 * C50603 * ae) +
         (C50496 + C50603 * C50151) * ae) /
        C49809;
    const double C3539 = 4 * (2 * C50432 + C50071 * C50457) +
                         C50071 * (3 * C50457 + C50071 * C50496);
    const double C3725 = 2 * C50432 + C50071 * C50457 + C50496 * C50151;
    const double C4296 = C49872 * (3 * C50457 + C50071 * C50496);
    const double C21348 =
        2 * C49872 * C50496 + C49872 * (C50496 + C50603 * C50151);
    const double C23018 =
        (3 * (C50480 + C49872 * C50616 + C50614 * ae) +
         C49872 * (2 * C50616 +
                   C49872 * (C50593 +
                             C49872 * (C49872 * (C49924 + C49957 * C50089) +
                                       C50601 * ae) +
                             C49872 * C50601 * ae) +
                   C50617 * ae) +
         (2 * C50614 + C49872 * C50617) * ae) /
        C49809;
    const double C23539 = C23529 + C23530;
    const double C31870 = C31863 + C31864;
    const double C37498 = C37487 + C37488;
    const double C23026 = C5310 * C6683;
    const double C48338 = C44280 * C6683;
    const double C23025 = C5313 * C6679;
    const double C48337 = C44283 * C6679;
    const double C50632 = C50551 + C50630;
    const double C7563 = 4 * (2 * C50514 + C49872 * C50517) +
                         C49872 * (3 * C50517 + C49872 * C50587);
    const double C50652 = C50650 + C50645;
    const double C50016 = C50015 + C50014;
    const double C2697 = C117 * C1232;
    const double C5525 = C5313 * C1232;
    const double C6279 = C5312 * C1232;
    const double C11804 = C10844 * C1232;
    const double C14144 = C10843 * C1232;
    const double C34321 = C33361 * C1232;
    const double C41195 = C33360 * C1232;
    const double C44495 = C44283 * C1232;
    const double C6277 = C5313 * C4716;
    const double C14142 = C10844 * C4716;
    const double C41193 = C33361 * C4716;
    const double C45231 = C44283 * C4716;
    const double C3570 = C3561 + C3562;
    const double C31710 = C31701 + C31702;
    const double C37326 = C37317 + C37318;
    const double C3756 = C3749 + C3750;
    const double C16025 = C16020 + C16021;
    const double C21953 = C21935 + C21936;
    const double C23541 = C23533 + C23534;
    const double C31871 = C31865 + C31866;
    const double C37059 = C37041 + C37042;
    const double C37499 = C37489 + C37490;
    const double C4315 = C4308 + C4309;
    const double C15161 = C15156 + C15157;
    const double C22869 = C22861 + C22862;
    const double C32381 = C32373 + C32374;
    const double C36383 = C36359 + C36360;
    const double C38009 = C38001 + C38002;
    const double C50236 = C50233 / C49809;
    const double C49970 = C49869 * C49968;
    const double C1115 =
        (2 * C50071 * C49935 + C50071 * (C49935 + C49968 * C50089)) / C49809;
    const double C1578 = (C49872 * (C49935 + C49968 * C50089) +
                          (C50353 + C50056 * C50089) * ae) /
                         C49809;
    const double C1862 =
        (2 * (C49872 * C49935 + C50353 * ae) +
         C49872 * (C49935 + C49872 * (C49872 * C49968 + C50056 * ae) +
                   C49872 * C50056 * ae) +
         (C50353 + C50056 * C50151) * ae) /
        C49809;
    const double C50059 = C50057 + C50049;
    const double C50127 = C50071 * C50125;
    const double C4712 = (-2 * C49872 * C50105) / C49744 -
                         (C49872 * (C50125 * C50151 + C50105)) / C49744;
    const double C50187 = C50185 + C50122;
    const double C50213 = C49872 * C50209;
    const double C50261 = C50257 - C50260;
    const double C23017 =
        (-3 * (C50134 * C50151 + C50102)) / C49744 +
        C49872 * ((-2 * C50267) / C49744 - (C49872 * C50272) / C49744);
    const double C50294 = C50291 / C49744;
    const double C50325 = C50318 - C50322;
    const double C3745 = C2705 * C1109;
    const double C14809 = C11816 + C11817;
    const double C14798 = C11817 + C11816;
    const double C3575 = C3569 * C1109;
    const double C3759 = C3755 * C1109;
    const double C32368 = C16023 + C16022;
    const double C4317 = C4314 * C1109;
    const double C31696 = C15159 + C15158;
    const double C168 = C50907 * C139;
    const double C650 = C50907 * C303;
    const double C347 = C50907 * C311;
    const double C49964 = C49961 - C49943;
    const double C3542 =
        4 * ((-2 * C50087) / C49744 - (C50071 * C50102) / C49744) +
        C50071 * ((-3 * C50102) / C49744 + C50071 * C50138);
    const double C3728 =
        (-2 * C50087) / C49744 - (C50071 * C50102) / C49744 + C50138 * C50151;
    const double C4299 = C49872 * ((-3 * C50102) / C49744 + C50071 * C50138);
    const double C50292 = C50289 / C49809;
    const double C7566 =
        4 * ((-2 * C50148) / C49744 - (C49872 * C50156) / C49744) +
        C49872 * ((-3 * C50156) / C49744 + C49872 * C50238);
    const double C50326 = C50323 - C49943;
    const double C50060 = C50058 / C49744;
    const double C50358 = C50356 + C50357;
    const double C1229 =
        (C50071 * C49935 + C49872 * (C49872 * C50071 * C49968 + C50423 * ae) +
         C49872 * C50423 * ae) /
        C49809;
    const double C1224 = C50071 * C50353 + C50423 * C50151;
    const double C3727 =
        (2 * C50071 * C49912 + C50071 * C50476 +
         C49872 * (C49872 * (2 * C50071 * C49942 +
                             C50071 * (C49942 + C49869 * C49957 * C50089)) +
                   C50488 * ae) +
         C49872 * C50488 * ae) /
        C49809;
    const double C4298 =
        (C49872 * (3 * C50476 +
                   C50071 * (2 * C50071 * C49942 +
                             C50071 * (C49942 + C49869 * C49957 * C50089))) +
         (3 * C50461 + C50071 * C50488) * ae) /
        C49809;
    const double C3538 = 4 * (2 * C50429 + C50071 * C50461) +
                         C50071 * (3 * C50461 + C50071 * C50488);
    const double C3724 = 2 * C50429 + C50071 * C50461 + C50488 * C50151;
    const double C4295 = C49872 * (3 * C50461 + C50071 * C50488);
    const double C7562 = 4 * (2 * C50522 + C49872 * C50525) +
                         C49872 * (3 * C50525 + C49872 * C50572);
    const double C50605 = C50598 + C50604;
    const double C23932 = 4 * (2 * C50553 + C49872 * C50558) +
                          C49872 * (3 * C50558 + C49872 * C50633);
    const double C50655 = C50643 + C50653;
    const double C3565 = C3551 + C3552;
    const double C49910 = C49909 - C49900;
    const double C50158 = C50157 - C50153;
    const double C3568 = C3557 + C3558;
    const double C20610 = C3558 + C3557;
    const double C4305 = C3735 + C3736;
    const double C49936 = C49934 - C49919;
    const double C50120 = C50119 - C49913;
    const double C50199 = C50198 / C49809;
    const double C50237 = C50234 - C50226;
    const double C49969 = C49967 - C49951;
    const double C50249 = C50248 - C49943;
    const double C50293 = C50290 / C49809;
    const double C50324 = C50321 - C50311;
    const double C110 = (C51079 * C50766) / C49809 + (C51028 - C51063) / C49834;
    const double C111 =
        (C51080 * C50766) / C49809 + (2 * C50776 + C51079) / C49834;
    const double C112 = (C50766 * C50776) / C49813 + C51080 / C49834;
    const double C1105 =
        (C51081 * C50843) / C49744 + (C51036 - C51065) / C49749;
    const double C1106 =
        (C51082 * C50843) / C49744 + (2 * C50848 + C51081) / C49749;
    const double C1107 = (C50843 * C50848) / C49753 + C51082 / C49749;
    const double C1853 =
        (C51083 * C50869) / C49744 + (C51037 - C51068) / C49749;
    const double C1854 =
        (C51084 * C50869) / C49744 + (2 * C50874 + C51083) / C49749;
    const double C1855 = (C50869 * C50874) / C49753 + C51084 / C49749;
    const double C19889 =
        (C51085 * C50940) / C49809 + (C51049 - C51071) / C49834;
    const double C19890 =
        (C51086 * C50940) / C49809 + (2 * C50945 + C51085) / C49834;
    const double C19891 = (C50940 * C50945) / C49813 + C51086 / C49834;
    const double C49768 = C49767 * ce;
    const double C283 = (-C49745 / C49744) / C49749 - (C49767 * de) / C49744;
    const double C44329 = C44301 + C44302;
    const double C44321 = C44285 + C44286;
    const double C44511 = C44489 + C44490;
    const double C44693 = C44671 + C44672;
    const double C45025 = C45013 + C45014;
    const double C45237 = C45225 + C45226;
    const double C47272 = C47257 + C47258;
    const double C47269 = C47251 + C47252;
    const double C47268 = C47249 + C47250;
    const double C47265 = C47243 + C47244;
    const double C47922 = C47913 + C47914;
    const double C47919 = C47907 + C47908;
    const double C48851 = C48841 + C48842;
    const double C49850 = C49848 * ae;
    const double C31693 = C30807 * C1109;
    const double C30812 = C30808 * C278;
    const double C31694 = C30808 * C50752;
    const double C32020 = C30808 * C51021;
    const double C33411 = C33399 + C33400;
    const double C36353 = C33601 + C33602;
    const double C40993 = C33602 + C33601;
    const double C40991 = C33593 + C33594;
    const double C40989 = C33594 + C33593;
    const double C41852 = C34333 + C34334;
    const double C41849 = C34334 + C34333;
    const double C37312 = C36385 + C36386;
    const double C36390 = C36377 + C36378;
    const double C36389 = C36375 + C36376;
    const double C37996 = C37061 + C37062;
    const double C2865 = C354 * C643;
    const double C3427 = C354 * C1037;
    const double C8308 = C354 * C284;
    const double C9516 = C354 * C49763;
    const double C2482 = C358 * C284;
    const double C2871 = C358 * C643;
    const double C3433 = C358 * C1037;
    const double C3921 = C358 * C49763;
    const double C9215 = C358 * C1109;
    const double C10896 = C10886 + C10887;
    const double C33413 = C33403 + C33404;
    const double C11592 = C11275 + C11274;
    const double C34109 = C33792 + C33791;
    const double C3243 = C929 * C284;
    const double C4138 = C929 * C49763;
    const double C9365 = C929 * C1109;
    const double C11432 = C11081 + C11080;
    const double C14344 = C11080 + C11081;
    const double C33949 = C33598 + C33597;
    const double C41395 = C33597 + C33598;
    const double C49931 = C49928 - C49913;
    const double C30809 = C13923 * C284;
    const double C32021 = C13923 * C49763;
    const double C7567 =
        (4 * (2 * C50516 + C49872 * C50588 + C50517 * ae) +
         C49872 *
             (3 * C50588 +
              C49872 *
                  (2 * C50580 +
                   C49872 * (C49903 + C49872 * (C49872 * C49924 + C49999 * ae) +
                             C49872 * C49999 * ae) +
                   C50582 * ae) +
              C50587 * ae) +
         (3 * C50517 + C49872 * C50587) * ae) /
        C49809;
    const double C760 = C50907 * C480;
    const double C10871 = C50971 * C480;
    const double C33388 = C50971 * C480;
    const double C524 = C50907 * C488;
    const double C5340 = C5310 * C488;
    const double C11595 = C50971 * C488;
    const double C34112 = C50971 * C488;
    const double C44310 = C44280 * C488;
    const double C924 = C50907 * C905;
    const double C11435 = C50971 * C905;
    const double C33952 = C50971 * C905;
    const double C167 = C117 * C127;
    const double C649 = C117 * C289;
    const double C346 = C117 * C293;
    const double C759 = C117 * C466;
    const double C10870 = C10844 * C466;
    const double C33387 = C33361 * C466;
    const double C523 = C117 * C470;
    const double C5339 = C5313 * C470;
    const double C11594 = C10844 * C470;
    const double C34111 = C33361 * C470;
    const double C44309 = C44283 * C470;
    const double C923 = C117 * C897;
    const double C11434 = C10844 * C897;
    const double C33951 = C33361 * C897;
    const double C5903 = C5891 + C5892;
    const double C8464 = C8460 + C8461;
    const double C11820 = C11808 + C11809;
    const double C34337 = C34325 + C34326;
    const double C44861 = C44849 + C44850;
    const double C2522 = C2509 * C284;
    const double C3927 = C2509 * C49763;
    const double C9216 = C2509 * C1109;
    const double C20201 = C2509 * C643;
    const double C20537 = C2509 * C1037;
    const double C3253 = C3029 * C284;
    const double C4146 = C3029 * C49763;
    const double C9866 = C3029 * C1109;
    const double C2511 = C2496 + C2497;
    const double C2707 = C2699 + C2700;
    const double C5545 = C5527 + C5528;
    const double C14822 = C14810 + C14811;
    const double C37058 = C37039 + C37040;
    const double C44515 = C44497 + C44498;
    const double C3265 = C3257 + C3258;
    const double C13940 = C13924 + C13925;
    const double C36382 = C36357 + C36358;
    const double C5739 = C5721 + C5722;
    const double C44697 = C44679 + C44680;
    const double C50573 = C50571 + C50566;
    const double C50032 = C49869 * C50031;
    const double C50037 = -3 * C50031;
    const double C50083 = C50071 * C50031;
    const double C50170 = ae * C50031;
    const double C50168 = C49872 * C50031;
    const double C2498 = C117 * C2457;
    const double C2701 = C117 * C2684;
    const double C5533 = C5313 * C2684;
    const double C14814 = C10844 * C2684;
    const double C37051 = C33361 * C2684;
    const double C44503 = C44283 * C2684;
    const double C3259 = C117 * C3230;
    const double C13928 = C10844 * C3230;
    const double C36369 = C33361 * C3230;
    const double C5727 = C5313 * C5702;
    const double C44685 = C44283 * C5702;
    const double C20726 = C50907 * C3729;
    const double C22858 = C5310 * C3729;
    const double C32372 = C50971 * C3729;
    const double C38000 = C50971 * C3729;
    const double C48174 = C44280 * C3729;
    const double C21079 = C50907 * C4300;
    const double C31700 = C50971 * C4300;
    const double C37316 = C50971 * C4300;
    const double C20613 = C117 * C3539;
    const double C20725 = C117 * C3725;
    const double C22857 = C5313 * C3725;
    const double C32371 = C10844 * C3725;
    const double C37999 = C33361 * C3725;
    const double C48173 = C44283 * C3725;
    const double C21078 = C117 * C4296;
    const double C31699 = C10844 * C4296;
    const double C37315 = C33361 * C4296;
    const double C23035 = C23025 + C23026;
    const double C48347 = C48337 + C48338;
    const double C50634 = C50632 + C50625;
    const double C50654 = C49872 * C50652;
    const double C138 =
        (-3 * (C49869 * C50011 + C50007 + C50346 * ce)) / C49744 +
        C49869 * ((-2 * C50011) / C49744 - (C49869 * C50016) / C49744 -
                  (C50348 * ce) / C49744) -
        ((2 * C50346 + C49869 * C50348) * ce) / C49744;
    const double C302 =
        C50071 * ((-2 * C50011) / C49744 - (C49869 * C50016) / C49744 -
                  (C50348 * ce) / C49744);
    const double C310 =
        -(C50016 * C50089 + C49869 * C50011 + C50007 + C50346 * ce) / C49744;
    const double C479 =
        C49872 * ((-2 * C50011) / C49744 - (C49869 * C50016) / C49744 -
                  (C50348 * ce) / C49744);
    const double C487 =
        -(C50016 * C50151 + C49869 * C50011 + C50007 + C50346 * ce) / C49744;
    const double C904 = -(C49872 * C50071 * C50016) / C49744;
    const double C1116 = (-2 * C50071 * C50016) / C49744 -
                         (C50071 * (C50031 * C50089 + C50016)) / C49744;
    const double C1579 = -(C49872 * (C50031 * C50089 + C50016)) / C49744;
    const double C1863 = (-2 * C49872 * C50016) / C49744 -
                         (C49872 * (C50031 * C50151 + C50016)) / C49744;
    const double C3576 = C3570 * C50752;
    const double C19995 = C3570 * C278;
    const double C20834 = C3570 * C51021;
    const double C3760 = C3756 * C50752;
    const double C32367 = C16025 + C16024;
    const double C37995 = C37059 + C37060;
    const double C4318 = C4315 * C50752;
    const double C20432 = C4315 * C278;
    const double C20971 = C4315 * C51021;
    const double C31695 = C15161 + C15160;
    const double C37311 = C36383 + C36384;
    const double C50239 = C50236 - C49913;
    const double C49972 = C49947 + C49970;
    const double C50061 = C49869 * C50059;
    const double C50107 = C50059 * C50089;
    const double C50171 = C50059 * C50151;
    const double C50177 = C50071 * C50059;
    const double C50128 = C50127 / C49744;
    const double C6680 =
        (-3 * (C50122 * C50151 + C50085)) / C49744 +
        C49872 * ((-2 * C50179) / C49744 - (C49872 * C50187) / C49744);
    const double C50216 = C50213 / C49744;
    const double C50262 = C50071 * C50261;
    const double C21349 =
        2 * C49872 * C50138 + C49872 * (C50138 + C50261 * C50151);
    const double C50297 = C50287 - C50294;
    const double C50328 = C49872 * C50325;
    const double C32378 = C32368 * C1109;
    const double C31707 = C31696 * C1109;
    const double C20615 = C117 * C3542;
    const double C20727 = C117 * C3728;
    const double C22863 = C5313 * C3728;
    const double C32375 = C10844 * C3728;
    const double C38003 = C33361 * C3728;
    const double C48179 = C44283 * C3728;
    const double C21080 = C117 * C4299;
    const double C31703 = C10844 * C4299;
    const double C37319 = C33361 * C4299;
    const double C50295 = C50292 - C50276;
    const double C128 = 5 * (3 * C50348 + C49869 * C50353) +
                        C49869 * (4 * C50353 + C49869 * C50358);
    const double C294 = 3 * C50348 + C49869 * C50353 + C50358 * C50089;
    const double C471 = 3 * C50348 + C49869 * C50353 + C50358 * C50151;
    const double C644 = C50071 * (4 * C50353 + C49869 * C50358);
    const double C754 = C49872 * (4 * C50353 + C49869 * C50358);
    const double C898 = C49872 * C50071 * C50358;
    const double C20722 =
        (3 * C50480 + C50071 * C50595 +
         C49872 * (C49872 * (3 * C50593 +
                             C50071 * (2 * C50071 * C49924 +
                                       C50071 * (C49924 + C49957 * C50089))) +
                   C50605 * ae) +
         C49872 * C50605 * ae) /
        C49809;
    const double C21073 =
        (C49872 * (4 * C50595 +
                   C50071 * (3 * C50593 +
                             C50071 * (2 * C50071 * C49924 +
                                       C50071 * (C49924 + C49957 * C50089)))) +
         (4 * C50496 + C50071 * C50605) * ae) /
        C49809;
    const double C20604 = 5 * (3 * C50457 + C50071 * C50496) +
                          C50071 * (4 * C50496 + C50071 * C50605);
    const double C20720 = 3 * C50457 + C50071 * C50496 + C50605 * C50151;
    const double C21071 = C49872 * (4 * C50496 + C50071 * C50605);
    const double C40334 = 5 * (3 * C50517 + C49872 * C50587) +
                          C49872 * (4 * C50587 + C49872 * C50655);
    const double C3571 = C3565 * C2300;
    const double C20609 = C3565 * C50771;
    const double C25551 = C3565 * C51028;
    const double C147 =
        3 * ((-(C49894 * ce) / C49744) / C49809 - C49891 / C49880 +
             C49869 * C49910) -
        ((2 * C49894 + C49869 * C49907) * ce) / C49880 +
        C49869 *
            (2 * C49910 - (C49907 * ce) / C49880 +
             C49869 *
                 ((-(C49869 * C49903 * ce) / C49744) / C49809 -
                  C49902 / C49880 +
                  C49869 * ((-(C49869 * std::pow(C49874, 6) * bs[6] * C49885) /
                             C49744) /
                                C49809 -
                            (C49903 * ce) / C49880)));
    const double C317 = (yP - yQ) * ((-(C49894 * ce) / C49744) / C49809 -
                                     C49891 / C49880 + C49869 * C49910);
    const double C321 = (-(C49869 * C49891) / C49744) / C49809 -
                        (C49884 * ce) / C49880 + C49910 * std::pow(yP - yQ, 2);
    const double C494 =
        C49872 * ((-(C49894 * ce) / C49744) / C49809 - C49891 / C49880 +
                  C49869 * C49910) -
        (ae * (C49869 * (C49869 * C49887 * C49888 * C49989 + C49990 * ce) +
               C49881 * C49877 * C49989 + C49869 * C49990 * ce)) /
            C49880;
    const double C498 = (-(C49869 * C49891) / C49744) / C49809 -
                        (C49884 * ce) / C49880 -
                        (ae * C49872 * C50011) / C49880 +
                        C49872 * (C49872 * C49910 - (ae * C50011) / C49880);
    const double C910 =
        C49872 * C50071 * C49910 - (ae * C50071 * C50011) / C49880;
    const double C5705 =
        3 * ((-(ae * C50148) / C49744) / C49809 - C49891 / C49880 +
             C49872 * C50158) +
        (((-2 * C50148) / C49744 - (C49872 * C50156) / C49744) * ae) / C49809 +
        C49872 *
            (2 * C50158 - (ae * C50156) / C49880 +
             C49872 * ((-(ae * C49872 * C50000) / C49744) / C49809 - C49913 +
                       C49872 * ((-(C49872 * C49923) / C49744) / C49809 -
                                 (ae * C50000) / C49880)));
    const double C3574 = C3568 * C2300;
    const double C20612 = C3568 * C50771;
    const double C25554 = C3568 * C51028;
    const double C20617 = C20610 * C50771;
    const double C4313 = C4305 * C2300;
    const double C21077 = C4305 * C50771;
    const double C26193 = C4305 * C51028;
    const double C49937 = C49869 * C49936;
    const double C49940 = 2 * C49936;
    const double C50144 = C50071 * C49936;
    const double C50161 = C49872 * C49936;
    const double C50214 = C49936 - C50210;
    const double C1124 =
        2 * C50071 * C49910 + C50071 * (C49910 + C49936 * std::pow(C50071, 2));
    const double C1238 =
        C50071 * C49910 - (ae * C49872 * C50085) / C49880 +
        C49872 * (C49872 * C50071 * C49936 - (ae * C50085) / C49880);
    const double C1587 = C49872 * (C49910 + C49936 * C50089) -
                         (ae * (C50004 * C50089 + C50011)) / C49880;
    const double C1871 =
        2 * (C49872 * C49910 - (ae * C50011) / C49880) -
        (ae * (C50004 * std::pow(C49872, 2) + C50011)) / C49880 +
        C49872 * (C49910 - (ae * C49872 * C50004) / C49880 +
                  C49872 * (C49872 * C49936 - (ae * C50004) / C49880));
    const double C3545 =
        4 * ((-2 * C50071 * C49902) / C49880 + C50071 * C50120) +
        C50071 * (3 * C50120 +
                  C50071 * ((-2 * C50071 * C49923) / C49880 +
                            C50071 * ((-(C49956 * C50089) / C49744) / C49809 -
                                      C49943)));
    const double C3731 =
        (-2 * C50071 * C49902) / C49880 + C50071 * C50120 +
        (C49872 * C50138 * ae) / C49809 +
        C49872 * ((C50138 * ae) / C49809 +
                  C49872 * ((-2 * C50071 * C49923) / C49880 +
                            C50071 * ((-(C49956 * C50089) / C49744) / C49809 -
                                      C49943)));
    const double C4302 =
        (((-3 * C50102) / C49744 + C50071 * C50138) * ae) / C49809 +
        C49872 * (3 * C50120 +
                  C50071 * ((-2 * C50071 * C49923) / C49880 +
                            C50071 * ((-(C49956 * C50089) / C49744) / C49809 -
                                      C49943)));
    const double C4721 =
        2 * (C49872 * C50120 - (ae * C50102) / C49880) -
        (ae * (C50134 * std::pow(C49872, 2) + C50102)) / C49880 +
        C49872 * (C50120 - (ae * C49872 * C50134) / C49880 +
                  C49872 * (C49872 * ((-(C49956 * C50089) / C49744) / C49809 -
                                      C49943) -
                            (ae * C50134) / C49880));
    const double C50200 = C50199 - C50194;
    const double C50240 = C49872 * C50237;
    const double C50301 = 2 * C50237;
    const double C49971 = C49869 * C49969;
    const double C50113 = C49969 * C50089;
    const double C50180 = C50071 * C49969;
    const double C50203 = C49872 * C49969;
    const double C2461 =
        3 * (C49910 + C49936 * C50089) +
        C50071 * (2 * C50071 * C49936 + C50071 * (C49936 + C49969 * C50089));
    const double C2688 =
        C49910 + C49936 * C50089 - (ae * C49872 * C50105) / C49880 +
        C49872 * (C49872 * (C49936 + C49969 * C50089) - (ae * C50105) / C49880);
    const double C3234 =
        (((-2 * C50085) / C49744 - (C50071 * C50105) / C49744) * ae) / C49809 +
        C49872 * (2 * C50071 * C49936 + C50071 * (C49936 + C49969 * C50089));
    const double C50250 = C50071 * C50249;
    const double C50268 = C49872 * C50249;
    const double C50296 = C50293 - C50282;
    const double C50327 = C49872 * C50324;
    const double C49769 = C49768 / C49744;
    const double C2480 = C356 * C283;
    const double C2470 = C350 * C283;
    const double C2524 = C2505 * C283;
    const double C2520 = C2507 * C283;
    const double C2515 = C2502 * C283;
    const double C2513 = C2500 * C283;
    const double C3255 = C2703 * C283;
    const double C3245 = C927 * C283;
    const double C3270 = C3264 * C283;
    const double C3268 = C3262 * C283;
    const double C8312 = C358 * C283;
    const double C8306 = C352 * C283;
    const double C8960 = C929 * C283;
    const double C19996 = C3569 * C283;
    const double C20433 = C4314 * C283;
    const double C30811 = C30807 * C283;
    const double C49852 = C49850 / C49809;
    const double C31705 = C31693 + C31694;
    const double C36379 = C36353 * C284;
    const double C37649 = C36353 * C49763;
    const double C37323 = C37312 * C1109;
    const double C36392 = C36390 * C278;
    const double C37310 = C36390 * C50752;
    const double C37648 = C36390 * C51021;
    const double C36391 = C36389 * C283;
    const double C37309 = C36389 * C1109;
    const double C38006 = C37996 * C1109;
    const double C179 = C167 + C168;
    const double C653 = C649 + C650;
    const double C360 = C346 + C347;
    const double C763 = C759 + C760;
    const double C10890 = C10870 + C10871;
    const double C33407 = C33387 + C33388;
    const double C537 = C523 + C524;
    const double C5363 = C5339 + C5340;
    const double C11602 = C11594 + C11595;
    const double C34119 = C34111 + C34112;
    const double C44333 = C44309 + C44310;
    const double C931 = C923 + C924;
    const double C11442 = C11434 + C11435;
    const double C33959 = C33951 + C33952;
    const double C9366 = C8464 * C1109;
    const double C3563 = C2511 * C1109;
    const double C19994 = C2511 * C284;
    const double C20833 = C2511 * C49763;
    const double C3751 = C2707 * C1109;
    const double C4310 = C3265 * C1109;
    const double C20431 = C3265 * C284;
    const double C20970 = C3265 * C49763;
    const double C7565 =
        (4 * (2 * C50524 + C49872 * C50573 + C50525 * ae) +
         C49872 * (3 * C50573 +
                   C49872 * (2 * C50565 +
                             C49872 * (C49942 +
                                       C49872 * (C49872 * C49869 * C49957 +
                                                 C50046 * ae) +
                                       C49872 * C50046 * ae) +
                             C50567 * ae) +
                   C50572 * ae) +
         (3 * C50525 + C49872 * C50572) * ae) /
        C49809;
    const double C50033 = C50032 / C49744;
    const double C50042 = C50037 / C49744;
    const double C1230 = -(C50083 * C50151 + C50071 * C50016) / C49744;
    const double C50172 = C50170 / C49880;
    const double C20619 = C20613 + C20614;
    const double C20729 = C20725 + C20726;
    const double C22867 = C22857 + C22858;
    const double C32380 = C32371 + C32372;
    const double C38008 = C37999 + C38000;
    const double C48183 = C48173 + C48174;
    const double C21083 = C21078 + C21079;
    const double C31709 = C31699 + C31700;
    const double C37325 = C37315 + C37316;
    const double C23934 =
        (4 * (2 * C50557 + C49872 * C50634 + C50558 * ae) +
         C49872 * (3 * C50634 +
                   C49872 * (2 * C50628 +
                             C49872 * (C50620 +
                                       C49872 * (C49872 * C50071 * C49957 +
                                                 C50623 * ae) +
                                       C49872 * C50623 * ae) +
                             C50629 * ae) +
                   C50633 * ae) +
         (3 * C50558 + C49872 * C50633) * ae) /
        C49809;
    const double C50656 = C50637 + C50654;
    const double C165 = C117 * C138;
    const double C10876 = C10843 * C138;
    const double C33393 = C33360 * C138;
    const double C336 = C117 * C302;
    const double C11440 = C10843 * C302;
    const double C33957 = C33360 * C302;
    const double C344 = C117 * C310;
    const double C11074 = C10843 * C310;
    const double C33591 = C33360 * C310;
    const double C513 = C117 * C479;
    const double C5347 = C5312 * C479;
    const double C10866 = C10844 * C479;
    const double C11600 = C10843 * C479;
    const double C33383 = C33361 * C479;
    const double C34117 = C33360 * C479;
    const double C521 = C117 * C487;
    const double C5337 = C5313 * C487;
    const double C6063 = C5312 * C487;
    const double C11268 = C10843 * C487;
    const double C11252 = C10844 * C487;
    const double C33785 = C33360 * C487;
    const double C33769 = C33361 * C487;
    const double C44307 = C44283 * C487;
    const double C921 = C117 * C904;
    const double C5899 = C5312 * C904;
    const double C11058 = C10844 * C904;
    const double C11814 = C10843 * C904;
    const double C33575 = C33361 * C904;
    const double C34331 = C33360 * C904;
    const double C2494 = C117 * C1116;
    const double C3027 = C117 * C1579;
    const double C11072 = C10844 * C1579;
    const double C33589 = C33361 * C1579;
    const double C6061 = C5313 * C1863;
    const double C11266 = C10844 * C1863;
    const double C33783 = C33361 * C1863;
    const double C45019 = C44283 * C1863;
    const double C20611 = C3576 + C3575;
    const double C32377 = C32367 * C50752;
    const double C38005 = C37995 * C50752;
    const double C21076 = C4318 + C4317;
    const double C31706 = C31695 * C50752;
    const double C37322 = C37311 * C50752;
    const double C141 = (5 * (3 * C49907 + C49869 * C49935) +
                         C49869 * (4 * C49935 + C49869 * C49972)) /
                        C49809;
    const double C313 =
        (3 * C49907 + C49869 * C49935 + C49972 * C50089) / C49809;
    const double C490 =
        (3 * C49907 + C49869 * C49935 +
         C49872 * (C49872 * C49972 + C50358 * ae) + C49872 * C50358 * ae) /
        C49809;
    const double C645 = (C50071 * (4 * C49935 + C49869 * C49972)) / C49809;
    const double C755 = (C49872 * (4 * C49935 + C49869 * C49972) +
                         (4 * C50353 + C49869 * C50358) * ae) /
                        C49809;
    const double C907 =
        (C49872 * C50071 * C49972 + C50071 * C50358 * ae) / C49809;
    const double C50062 = C50061 / C49744;
    const double C50108 = C50107 + C50031;
    const double C50173 = C50171 + C50031;
    const double C6268 = (-2 * C49872 * C50083) / C49744 -
                         (C49872 * (C50177 * C50151 + C50083)) / C49744;
    const double C50129 = C50126 - C50128;
    const double C50218 = C50212 - C50216;
    const double C50263 = C50256 + C50262;
    const double C23933 =
        4 * ((-2 * C50189) / C49744 - (C49872 * C50197) / C49744) +
        C49872 * ((-3 * C50197) / C49744 + C49872 * C50297);
    const double C50330 = C50312 + C50328;
    const double C166 = C50907 * C147;
    const double C10877 = C51050 * C147;
    const double C33394 = C33358 * C147;
    const double C333 = C50907 * C317;
    const double C5902 = C5308 * C317;
    const double C11057 = C51050 * C317;
    const double C33574 = C33358 * C317;
    const double C44860 = C51087 * C317;
    const double C341 = C50907 * C321;
    const double C5538 = C5308 * C321;
    const double C11067 = C51050 * C321;
    const double C33584 = C33358 * C321;
    const double C44508 = C51087 * C321;
    const double C510 = C50907 * C494;
    const double C5336 = C5309 * C494;
    const double C6066 = C5308 * C494;
    const double C10861 = C50971 * C494;
    const double C11251 = C51050 * C494;
    const double C33378 = C50971 * C494;
    const double C33768 = C33358 * C494;
    const double C44306 = C51088 * C494;
    const double C45024 = C51087 * C494;
    const double C518 = C50907 * C498;
    const double C5322 = C5310 * C498;
    const double C5732 = C5308 * C498;
    const double C5718 = C5309 * C498;
    const double C11261 = C51050 * C498;
    const double C11245 = C50971 * C498;
    const double C33778 = C33358 * C498;
    const double C33762 = C50971 * C498;
    const double C44292 = C44280 * C498;
    const double C44690 = C51087 * C498;
    const double C44676 = C51088 * C498;
    const double C918 = C50907 * C910;
    const double C5524 = C5309 * C910;
    const double C6282 = C5308 * C910;
    const double C11051 = C50971 * C910;
    const double C11807 = C51050 * C910;
    const double C33568 = C50971 * C910;
    const double C34324 = C33358 * C910;
    const double C44494 = C51088 * C910;
    const double C45236 = C51087 * C910;
    const double C49938 = C49931 + C49937;
    const double C49954 = C49940 - C49948;
    const double C4722 =
        2 * (C49872 * C50144 - (ae * C50085) / C49880) -
        (ae * (C50122 * std::pow(C49872, 2) + C50085)) / C49880 +
        C49872 * (C50144 - (ae * C49872 * C50122) / C49880 +
                  C49872 * (C49872 * C50071 * C49969 - (ae * C50122) / C49880));
    const double C50166 = C50161 - C50164;
    const double C2491 = C50907 * C1124;
    const double C13931 = C51050 * C1124;
    const double C36368 = C33358 * C1124;
    const double C2698 = C50907 * C1238;
    const double C5526 = C5310 * C1238;
    const double C6280 = C5309 * C1238;
    const double C11805 = C50971 * C1238;
    const double C14145 = C51050 * C1238;
    const double C34322 = C50971 * C1238;
    const double C41196 = C33358 * C1238;
    const double C44496 = C44280 * C1238;
    const double C45234 = C51088 * C1238;
    const double C2694 = C50907 * C1587;
    const double C5536 = C5309 * C1587;
    const double C11065 = C50971 * C1587;
    const double C14817 = C51050 * C1587;
    const double C33582 = C50971 * C1587;
    const double C37050 = C33358 * C1587;
    const double C44506 = C51088 * C1587;
    const double C5730 = C5309 * C1871;
    const double C5720 = C5310 * C1871;
    const double C11259 = C50971 * C1871;
    const double C33776 = C50971 * C1871;
    const double C44688 = C51088 * C1871;
    const double C44678 = C44280 * C1871;
    const double C20616 = C50907 * C3545;
    const double C20728 = C50907 * C3731;
    const double C22864 = C5310 * C3731;
    const double C32376 = C50971 * C3731;
    const double C38004 = C50971 * C3731;
    const double C48180 = C44280 * C3731;
    const double C21081 = C50907 * C4302;
    const double C31704 = C50971 * C4302;
    const double C37320 = C50971 * C4302;
    const double C23536 = C5310 * C4721;
    const double C31868 = C50971 * C4721;
    const double C37492 = C50971 * C4721;
    const double C48848 = C44280 * C4721;
    const double C6685 =
        3 * ((-(ae * C50189) / C49744) / C49809 - C50146 / C49880 +
             C49872 * C50200) +
        (((-2 * C50189) / C49744 - (C49872 * C50197) / C49744) * ae) / C49809 +
        C49872 * (2 * C50200 - (ae * C50197) / C49880 +
                  C49872 * ((-(ae * C49872 * C50192) / C49744) / C49809 -
                            C50190 / C49880 +
                            C49872 * ((-(C49872 * C50071 * C49956) / C49744) /
                                          C49809 -
                                      (ae * C50192) / C49880)));
    const double C50241 = C50239 + C50240;
    const double C50315 = C50301 - C50308;
    const double C49973 = C49964 + C49971;
    const double C50114 = C49936 + C50113;
    const double C50183 = C49872 * C50180;
    const double C50211 = C50203 - C50207;
    const double C2499 = C50907 * C2461;
    const double C2702 = C50907 * C2688;
    const double C5534 = C5310 * C2688;
    const double C14815 = C50971 * C2688;
    const double C37052 = C50971 * C2688;
    const double C44504 = C44280 * C2688;
    const double C3260 = C50907 * C3234;
    const double C13929 = C50971 * C3234;
    const double C36370 = C50971 * C3234;
    const double C50251 = C50245 + C50250;
    const double C50273 = C50268 - C50271;
    const double C50298 = C49872 * C50296;
    const double C50329 = C50326 + C50327;
    const double C49770 = C49769 - C49759;
    const double C19993 = C2520 + C2519;
    const double C2526 = C2515 + C2516;
    const double C30813 = C30811 + C30812;
    const double C49853 = C49852 - C49837;
    const double C31712 = C31705 * C50771;
    const double C36393 = C36391 + C36392;
    const double C37321 = C37309 + C37310;
    const double C8616 = C653 * C643;
    const double C9112 = C653 * C1037;
    const double C2877 = C360 * C643;
    const double C3439 = C360 * C1037;
    const double C8310 = C360 * C284;
    const double C9518 = C360 * C49763;
    const double C8958 = C931 * C284;
    const double C9716 = C931 * C49763;
    const double C50034 = C50023 - C50033;
    const double C5897 = C5313 * C1230;
    const double C8462 = C117 * C1230;
    const double C11812 = C10844 * C1230;
    const double C34329 = C33361 * C1230;
    const double C44855 = C44283 * C1230;
    const double C20621 = C20619 * C1109;
    const double C20731 = C20729 * C1109;
    const double C21085 = C21083 * C1109;
    const double C50657 = C50656 + C50641;
    const double C20618 = C20611 * C50771;
    const double C32383 = C32377 + C32378;
    const double C38011 = C38005 + C38006;
    const double C21082 = C21076 * C50771;
    const double C31713 = C31706 + C31707;
    const double C37329 = C37322 + C37323;
    const double C50063 = C50043 - C50062;
    const double C2459 =
        (-3 * (C50031 * C50089 + C50016)) / C49744 +
        C50071 * ((-2 * C50083) / C49744 - (C50071 * C50108) / C49744);
    const double C2686 = -(C50108 * C50151 + C50031 * C50089 + C50016) / C49744;
    const double C3232 =
        C49872 * ((-2 * C50083) / C49744 - (C50071 * C50108) / C49744);
    const double C5704 =
        (-3 * (C50031 * C50151 + C50016)) / C49744 +
        C49872 * ((-2 * C50168) / C49744 - (C49872 * C50173) / C49744);
    const double C3540 =
        4 * ((-2 * C50085) / C49744 - (C50071 * C50105) / C49744) +
        C50071 * ((-3 * C50105) / C49744 + C50071 * C50129);
    const double C3726 =
        (-2 * C50085) / C49744 - (C50071 * C50105) / C49744 + C50129 * C50151;
    const double C4297 = C49872 * ((-3 * C50105) / C49744 + C50071 * C50129);
    const double C7564 =
        4 * ((-2 * C50160) / C49744 - (C49872 * C50165) / C49744) +
        C49872 * ((-3 * C50165) / C49744 + C49872 * C50218);
    const double C20605 = 5 * ((-3 * C50102) / C49744 + C50071 * C50138) +
                          C50071 * (4 * C50138 + C50071 * C50263);
    const double C20721 =
        (-3 * C50102) / C49744 + C50071 * C50138 + C50263 * C50151;
    const double C21072 = C49872 * (4 * C50138 + C50071 * C50263);
    const double C40335 = 5 * ((-3 * C50156) / C49744 + C49872 * C50238) +
                          C49872 * (4 * C50238 + C49872 * C50330);
    const double C178 = C165 + C166;
    const double C10893 = C10876 + C10877;
    const double C33410 = C33393 + C33394;
    const double C353 = C332 + C333;
    const double C5908 = C5901 + C5902;
    const double C11082 = C11056 + C11057;
    const double C33599 = C33573 + C33574;
    const double C357 = C340 + C341;
    const double C5550 = C5537 + C5538;
    const double C11087 = C11066 + C11067;
    const double C33604 = C33583 + C33584;
    const double C530 = C509 + C510;
    const double C5361 = C5335 + C5336;
    const double C6072 = C6065 + C6066;
    const double C10885 = C10860 + C10861;
    const double C11276 = C11250 + C11251;
    const double C33402 = C33377 + C33378;
    const double C33793 = C33767 + C33768;
    const double C534 = C517 + C518;
    const double C5354 = C5321 + C5322;
    const double C5744 = C5731 + C5732;
    const double C5737 = C5717 + C5718;
    const double C11281 = C11260 + C11261;
    const double C11273 = C11244 + C11245;
    const double C33798 = C33777 + C33778;
    const double C33790 = C33761 + C33762;
    const double C44324 = C44291 + C44292;
    const double C928 = C917 + C918;
    const double C5543 = C5523 + C5524;
    const double C6288 = C6281 + C6282;
    const double C11079 = C11050 + C11051;
    const double C11819 = C11806 + C11807;
    const double C33596 = C33567 + C33568;
    const double C34336 = C34323 + C34324;
    const double C148 =
        4 * (2 * C49910 - (C49907 * ce) / C49880 + C49869 * C49938) -
        ((3 * C49907 + C49869 * C49935) * ce) / C49880 +
        C49869 *
            (3 * C49938 - (C49935 * ce) / C49880 +
             C49869 * (2 * C49936 - (C49930 * ce) / C49880 +
                       C49869 * ((-(C49869 * C49924 * ce) / C49744) / C49809 -
                                 C49923 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49876, 7) *
                                              bs[7] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49924 * ce) / C49880))));
    const double C318 =
        (yP - yQ) * (2 * C49910 - (C49907 * ce) / C49880 + C49869 * C49938);
    const double C322 = (-(C49894 * ce) / C49744) / C49809 - C49891 / C49880 +
                        C49869 * C49910 + C49938 * std::pow(yP - yQ, 2);
    const double C495 =
        (((-2 * (C49869 * C49994 + C49990 * ce)) / C49744 -
          (C49869 *
           (C49869 * (C49869 * C49895 * C49896 * C49989 + C49993 * ce) +
            C49994 + C49869 * C49993 * ce)) /
              C49744 -
          ((C49990 + C49993 * C49898) * ce) / C49744) *
         ae) /
            C49809 +
        C49872 * (2 * C49910 - (C49907 * ce) / C49880 + C49869 * C49938);
    const double C499 = (-(C49894 * ce) / C49744) / C49809 - C49891 / C49880 +
                        C49869 * C49910 - (ae * C49872 * C50016) / C49880 +
                        C49872 * (C49872 * C49938 - (ae * C50016) / C49880);
    const double C911 =
        C49872 * C50071 * C49938 - (ae * C50071 * C50016) / C49880;
    const double C6278 = C5310 * C4722;
    const double C14143 = C50971 * C4722;
    const double C41194 = C50971 * C4722;
    const double C45232 = C44280 * C4722;
    const double C5706 =
        3 * (C49910 - (ae * C50160) / C49880 + C49872 * C50166) +
        (((-2 * C50160) / C49744 - (C49872 * C50165) / C49744) * ae) / C49809 +
        C49872 *
            (2 * C50166 - (ae * C50165) / C49880 +
             C49872 * (C49936 - (ae * C49872 * C50028) / C49880 +
                       C49872 * (C49872 * C49969 - (ae * C50028) / C49880)));
    const double C2508 = C2490 + C2491;
    const double C13943 = C13930 + C13931;
    const double C36387 = C36367 + C36368;
    const double C2706 = C2697 + C2698;
    const double C5544 = C5525 + C5526;
    const double C6287 = C6279 + C6280;
    const double C11818 = C11804 + C11805;
    const double C14149 = C14144 + C14145;
    const double C34335 = C34321 + C34322;
    const double C41200 = C41195 + C41196;
    const double C44514 = C44495 + C44496;
    const double C2704 = C2693 + C2694;
    const double C5549 = C5535 + C5536;
    const double C11086 = C11064 + C11065;
    const double C14825 = C14816 + C14817;
    const double C33603 = C33581 + C33582;
    const double C37063 = C37049 + C37050;
    const double C5743 = C5729 + C5730;
    const double C5738 = C5719 + C5720;
    const double C11280 = C11258 + C11259;
    const double C33797 = C33775 + C33776;
    const double C44696 = C44677 + C44678;
    const double C20620 = C20615 + C20616;
    const double C20730 = C20727 + C20728;
    const double C22870 = C22863 + C22864;
    const double C32382 = C32375 + C32376;
    const double C38010 = C38003 + C38004;
    const double C48186 = C48179 + C48180;
    const double C21084 = C21080 + C21081;
    const double C31711 = C31703 + C31704;
    const double C37327 = C37319 + C37320;
    const double C23542 = C23535 + C23536;
    const double C31872 = C31867 + C31868;
    const double C37500 = C37491 + C37492;
    const double C48854 = C48847 + C48848;
    const double C23032 = C5310 * C6685;
    const double C48344 = C44280 * C6685;
    const double C7569 =
        4 * (2 * C50158 - (ae * C50156) / C49880 + C49872 * C50241) +
        (((-3 * C50156) / C49744 + C49872 * C50238) * ae) / C49809 +
        C49872 *
            (3 * C50241 + (C50238 * ae) / C49809 +
             C49872 *
                 (2 * C50237 - (ae * C50228) / C49880 +
                  C49872 *
                      ((-(ae * C49872 * C50024) / C49744) / C49809 - C49943 +
                       C49872 * ((-(C49872 * C49956) / C49744) / C49809 -
                                 (ae * C50024) / C49880))));
    const double C49974 = C49869 * C49973;
    const double C50169 = C49872 * C49973;
    const double C50176 = C50071 * C49973;
    const double C1123 =
        2 * C50071 * C49938 + C50071 * (C49938 + C49973 * std::pow(C50071, 2));
    const double C1237 =
        C50071 * C49938 - (ae * C49872 * C50083) / C49880 +
        C49872 * (C49872 * C50071 * C49973 - (ae * C50083) / C49880);
    const double C1586 = C49872 * (C49938 + C49973 * C50089) -
                         (ae * (C50031 * C50089 + C50016)) / C49880;
    const double C1870 =
        2 * (C49872 * C49938 - (ae * C50016) / C49880) -
        (ae * (C50031 * std::pow(C49872, 2) + C50016)) / C49880 +
        C49872 * (C49938 - (ae * C49872 * C50031) / C49880 +
                  C49872 * (C49872 * C49973 - (ae * C50031) / C49880));
    const double C2462 =
        3 * (C49938 + C49973 * C50089) +
        C50071 *
            (2 * C50071 * C49973 +
             C50071 *
                 (C49973 +
                  ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                   C49956 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49744) /
                                 C49809 -
                             (C49957 * ce) / C49880)) *
                      C50089));
    const double C2689 =
        C49938 + C49973 * C50089 - (ae * C49872 * C50108) / C49880 +
        C49872 *
            (C49872 *
                 (C49973 +
                  ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                   C49956 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49744) /
                                 C49809 -
                             (C49957 * ce) / C49880)) *
                      C50089) -
             (ae * C50108) / C49880);
    const double C3235 =
        (((-2 * C50083) / C49744 - (C50071 * C50108) / C49744) * ae) / C49809 +
        C49872 *
            (2 * C50071 * C49973 +
             C50071 *
                 (C49973 +
                  ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                   C49956 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49744) /
                                 C49809 -
                             (C49957 * ce) / C49880)) *
                      C50089));
    const double C3544 =
        4 * (2 * C50071 * C49936 + C50071 * C50114) +
        C50071 *
            (3 * C50114 +
             C50071 * (2 * C50071 * C49969 +
                       C50071 * (C49969 + ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880) *
                                              C50089)));
    const double C3730 =
        2 * C50071 * C49936 + C50071 * C50114 +
        (C49872 * C50129 * ae) / C49809 +
        C49872 *
            ((C50129 * ae) / C49809 +
             C49872 * (2 * C50071 * C49969 +
                       C50071 * (C49969 + ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880) *
                                              C50089)));
    const double C4301 =
        (((-3 * C50105) / C49744 + C50071 * C50129) * ae) / C49809 +
        C49872 *
            (3 * C50114 +
             C50071 * (2 * C50071 * C49969 +
                       C50071 * (C49969 + ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880) *
                                              C50089)));
    const double C4720 =
        2 * (C49872 * C50114 - (ae * C50105) / C49880) -
        (ae * (C50125 * std::pow(C49872, 2) + C50105)) / C49880 +
        C49872 *
            (C50114 - (ae * C49872 * C50125) / C49880 +
             C49872 * (C49872 * (C49969 + ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880) *
                                              C50089) -
                       (ae * C50125) / C49880));
    const double C50186 = C50183 - C50184;
    const double C50215 = C49872 * C50211;
    const double C2512 = C2498 + C2499;
    const double C2708 = C2701 + C2702;
    const double C5548 = C5533 + C5534;
    const double C14824 = C14814 + C14815;
    const double C37064 = C37051 + C37052;
    const double C44518 = C44503 + C44504;
    const double C3266 = C3259 + C3260;
    const double C13942 = C13928 + C13929;
    const double C36388 = C36369 + C36370;
    const double C20607 =
        5 * (3 * C50120 + C50071 * C50251) +
        C50071 * (4 * C50251 +
                  C50071 * (3 * C50249 +
                            C50071 * ((-2 * C50071 * C49956) / C49880 +
                                      C50071 * ((-(std::pow(C49874, 8) * bs[8] *
                                                   C49885 * C50089) /
                                                 C49744) /
                                                    C49809 -
                                                C49956 / C49880))));
    const double C20723 =
        3 * C50120 + C50071 * C50251 + (C49872 * C50263 * ae) / C49809 +
        C49872 * ((C50263 * ae) / C49809 +
                  C49872 * (3 * C50249 +
                            C50071 * ((-2 * C50071 * C49956) / C49880 +
                                      C50071 * ((-(std::pow(C49874, 8) * bs[8] *
                                                   C49885 * C50089) /
                                                 C49744) /
                                                    C49809 -
                                                C49956 / C49880))));
    const double C21074 =
        ((4 * C50138 + C50071 * C50263) * ae) / C49809 +
        C49872 * (4 * C50251 +
                  C50071 * (3 * C50249 +
                            C50071 * ((-2 * C50071 * C49956) / C49880 +
                                      C50071 * ((-(std::pow(C49874, 8) * bs[8] *
                                                   C49885 * C50089) /
                                                 C49744) /
                                                    C49809 -
                                                C49956 / C49880))));
    const double C21351 =
        2 * ((C50138 * ae) / C49809 + C49872 * C50251) +
        ((C50138 + C50261 * C50151) * ae) / C49809 +
        C49872 * (C50251 + (C49872 * C50261 * ae) / C49809 +
                  C49872 * ((C50261 * ae) / C49809 +
                            C49872 * ((-2 * C50071 * C49956) / C49880 +
                                      C50071 * ((-(std::pow(C49874, 8) * bs[8] *
                                                   C49885 * C50089) /
                                                 C49744) /
                                                    C49809 -
                                                C49956 / C49880))));
    const double C23019 =
        3 * (C50120 - (ae * C50267) / C49880 + C49872 * C50273) +
        (((-2 * C50267) / C49744 - (C49872 * C50272) / C49744) * ae) / C49809 +
        C49872 * (2 * C50273 - (ae * C50272) / C49880 +
                  C49872 * (C50249 - (ae * C49872 * C50258) / C49880 +
                            C49872 * (C49872 * ((-(std::pow(C49874, 8) * bs[8] *
                                                   C49885 * C50089) /
                                                 C49744) /
                                                    C49809 -
                                                C49956 / C49880) -
                                      (ae * C50258) / C49880)));
    const double C50299 = C50295 + C50298;
    const double C50331 = C49872 * C50329;
    const double C3929 = C2505 * C49770;
    const double C3925 = C2507 * C49770;
    const double C3919 = C356 * C49770;
    const double C3915 = C2502 * C49770;
    const double C3911 = C350 * C49770;
    const double C3907 = C2500 * C49770;
    const double C4148 = C2703 * C49770;
    const double C4144 = C3264 * C49770;
    const double C4140 = C927 * C49770;
    const double C4136 = C3262 * C49770;
    const double C9520 = C358 * C49770;
    const double C9514 = C352 * C49770;
    const double C9718 = C929 * C49770;
    const double C20835 = C3569 * C49770;
    const double C20972 = C4314 * C49770;
    const double C32019 = C30807 * C49770;
    const double C37647 = C36389 * C49770;
    const double C118 =
        ((((0 - (C49742 * C49743) / C49744) * ce) / C49744 - (0 * de) / C49753 +
          C49745 / C49744) /
             C49749 -
         ((C49742 * C49766 + 0) * de) / C49744) /
            C49749 +
        ((C49742 * (C49766 / C49749 -
                    ((C49742 * C49770 + C51021) * de) / C49744 + C49763) +
          C51077) *
         ce) /
            C49744 +
        C49770 / C49749 - ((C49742 * C49763 + C50757) * de) / C49744;
    const double C119 =
        (C49766 / C49749 - ((C49742 * C49770 + C51021) * de) / C49744 +
         C49763) /
            C49749 +
        ((C49742 *
              (C49770 / C49749 - ((C49742 * C49763 + C50757) * de) / C49744) +
          C51078) *
         ce) /
            C49744 +
        2 * (C49763 / C49749 - (0 * de) / C49744);
    const double C120 =
        (C49770 / C49749 - ((C49742 * C49763 + C50757) * de) / C49744) /
            C49749 +
        ((C49742 * (C49763 / C49749 - (0 * de) / C49744) + C638) * ce) / C49744;
    const double C641 =
        C49766 / C49749 - ((C49742 * C49770 + C51021) * de) / C49744 + C49763;
    const double C642 =
        C49770 / C49749 - ((C49742 * C49763 + C50757) * de) / C49744;
    const double C1035 =
        C49766 / C49749 + ((C49742 * C49770 + C51021) * ce) / C49744 + C49763;
    const double C1036 =
        C49770 / C49749 + ((C49742 * C49763 + C50757) * ce) / C49744;
    const double C19998 = C19993 - C2518;
    const double C2528 = C2526 - C2478;
    const double C30814 = C30813 - C30809;
    const double C38958 =
        ((((0 - (C49807 * C49833) / C49809) * ae) / C49809 - (0 * be) / C49813 +
          C49808 / C49809) /
             C49834 -
         ((C49807 * C49851 + 0) * be) / C49809) /
            C49834 +
        ((C49807 * (C49851 / C49834 -
                    ((C49807 * C49853 + C51050) * be) / C49809 + C49846) +
          C51087) *
         ae) /
            C49809 +
        C49853 / C49834 - ((C49807 * C49846 + C50971) * be) / C49809;
    const double C38959 =
        (C49851 / C49834 - ((C49807 * C49853 + C51050) * be) / C49809 +
         C49846) /
            C49834 +
        ((C49807 *
              (C49853 / C49834 - ((C49807 * C49846 + C50971) * be) / C49809) +
          C51088) *
         ae) /
            C49809 +
        2 * (C49846 / C49834 - (0 * be) / C49809);
    const double C38960 =
        (C49853 / C49834 - ((C49807 * C49846 + C50971) * be) / C49809) /
            C49834 +
        ((C49807 * (C49846 / C49834 - (0 * be) / C49809) + C44280) * ae) /
            C49809;
    const double C44281 =
        C49851 / C49834 - ((C49807 * C49853 + C51050) * be) / C49809 + C49846;
    const double C44282 =
        C49853 / C49834 - ((C49807 * C49846 + C50971) * be) / C49809;
    const double C36394 = C36393 - C36379;
    const double C37328 = C37321 * C50771;
    const double C50035 = C50034 - C50026;
    const double C40336 =
        (5 * (3 * C50588 + C49872 * C50657 + C50587 * ae) +
         C49872 * (4 * C50657 +
                   C49872 * (3 * C50652 +
                             C49872 * (2 * C50644 +
                                       C49872 * (C49924 +
                                                 C49872 * (C49872 * C49957 +
                                                           C50040 * ae) +
                                                 C49872 * C50040 * ae) +
                                       C50646 * ae) +
                             C50651 * ae) +
                   C50655 * ae) +
         (4 * C50587 + C49872 * C50655) * ae) /
        C49809;
    const double C32384 = C32383 * C50771;
    const double C38012 = C38011 * C50771;
    const double C31714 = C31713 * C50771;
    const double C37330 = C37329 * C50771;
    const double C50064 = C50063 - C50055;
    const double C2473 = C353 * C50757;
    const double C2864 = C353 * C51078;
    const double C2860 = C353 * C638;
    const double C3426 = C353 * C1031;
    const double C3422 = C353 * C1032;
    const double C3914 = C353 * C50757;
    const double C8307 = C353 * C278;
    const double C8613 = C353 * C51077;
    const double C9109 = C353 * C1030;
    const double C9213 = C353 * C50752;
    const double C9515 = C353 * C51021;
    const double C2481 = C357 * C278;
    const double C2479 = C357 * C50757;
    const double C2874 = C357 * C51077;
    const double C2870 = C357 * C51078;
    const double C3436 = C357 * C1030;
    const double C3432 = C357 * C1031;
    const double C3554 = C357 * C50752;
    const double C3920 = C357 * C51021;
    const double C3918 = C357 * C50757;
    const double C10895 = C10884 + C10885;
    const double C33412 = C33401 + C33402;
    const double C3244 = C928 * C278;
    const double C3242 = C928 * C50757;
    const double C3737 = C928 * C50752;
    const double C4139 = C928 * C51021;
    const double C4137 = C928 * C50757;
    const double C13911 = C11078 + C11079;
    const double C13909 = C11079 + C11078;
    const double C40992 = C33595 + C33596;
    const double C40990 = C33596 + C33595;
    const double C170 = C50907 * C148;
    const double C337 = C50907 * C318;
    const double C11441 = C51050 * C318;
    const double C33958 = C33358 * C318;
    const double C345 = C50907 * C322;
    const double C11075 = C51050 * C322;
    const double C33592 = C33358 * C322;
    const double C514 = C50907 * C495;
    const double C5348 = C5309 * C495;
    const double C10867 = C50971 * C495;
    const double C11601 = C51050 * C495;
    const double C33384 = C50971 * C495;
    const double C34118 = C33358 * C495;
    const double C44318 = C51088 * C495;
    const double C522 = C50907 * C499;
    const double C5338 = C5310 * C499;
    const double C6064 = C5309 * C499;
    const double C11269 = C51050 * C499;
    const double C11253 = C50971 * C499;
    const double C33786 = C33358 * C499;
    const double C33770 = C50971 * C499;
    const double C44308 = C44280 * C499;
    const double C45022 = C51088 * C499;
    const double C922 = C50907 * C911;
    const double C5900 = C5309 * C911;
    const double C11059 = C50971 * C911;
    const double C11815 = C51050 * C911;
    const double C33576 = C50971 * C911;
    const double C34332 = C33358 * C911;
    const double C44858 = C51088 * C911;
    const double C6286 = C6277 + C6278;
    const double C14148 = C14142 + C14143;
    const double C41199 = C41193 + C41194;
    const double C45240 = C45231 + C45232;
    const double C5728 = C5310 * C5706;
    const double C44686 = C44280 * C5706;
    const double C2523 = C2508 * C278;
    const double C2521 = C2508 * C50757;
    const double C3555 = C2508 * C50752;
    const double C3928 = C2508 * C51021;
    const double C3926 = C2508 * C50757;
    const double C20200 = C2508 * C51078;
    const double C20536 = C2508 * C1031;
    const double C3746 = C2706 * C50752;
    const double C14808 = C11818 + C11819;
    const double C14807 = C11819 + C11818;
    const double C41851 = C34335 + C34336;
    const double C41850 = C34336 + C34335;
    const double C3254 = C2704 * C278;
    const double C3252 = C2704 * C50757;
    const double C3733 = C2704 * C50752;
    const double C4147 = C2704 * C51021;
    const double C4145 = C2704 * C50757;
    const double C13922 = C11086 + C11087;
    const double C13921 = C11087 + C11086;
    const double C36354 = C33603 + C33604;
    const double C40994 = C33604 + C33603;
    const double C20622 = C20620 * C50752;
    const double C20732 = C20730 * C50752;
    const double C21086 = C21084 * C50752;
    const double C23038 = C23031 + C23032;
    const double C48350 = C48343 + C48344;
    const double C49975 = C49954 + C49974;
    const double C50174 = C50169 - C50172;
    const double C6269 =
        2 * (C49872 * C50176 - (ae * C50083) / C49880) -
        (ae * (C50177 * C50151 + C50083)) / C49880 +
        C49872 * (C50176 - (ae * C49872 * C50177) / C49880 +
                  C49872 * (C49872 * C50071 *
                                ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880)) -
                            (ae * C50177) / C49880));
    const double C2495 = C50907 * C1123;
    const double C5898 = C5310 * C1237;
    const double C8463 = C50907 * C1237;
    const double C11813 = C50971 * C1237;
    const double C34330 = C50971 * C1237;
    const double C44856 = C44280 * C1237;
    const double C3028 = C50907 * C1586;
    const double C11073 = C50971 * C1586;
    const double C33590 = C50971 * C1586;
    const double C6062 = C5310 * C1870;
    const double C11267 = C50971 * C1870;
    const double C33784 = C50971 * C1870;
    const double C45020 = C44280 * C1870;
    const double C6684 =
        3 * (C50144 - (ae * C50179) / C49880 + C49872 * C50186) +
        (((-2 * C50179) / C49744 - (C49872 * C50187) / C49744) * ae) / C49809 +
        C49872 * (2 * C50186 - (ae * C50187) / C49880 +
                  C49872 * (C50180 - (ae * C49872 * C50182) / C49880 +
                            C49872 * (C49872 * C50071 *
                                          ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880) -
                                      (ae * C50182) / C49880)));
    const double C50217 = C50214 + C50215;
    const double C3564 = C2512 * C50752;
    const double C19997 = C2512 * C50757;
    const double C20836 = C2512 * C50757;
    const double C3752 = C2708 * C50752;
    const double C4311 = C3266 * C50752;
    const double C20434 = C3266 * C50757;
    const double C20973 = C3266 * C50757;
    const double C23935 =
        4 * (2 * C50200 - (ae * C50197) / C49880 + C49872 * C50299) +
        (((-3 * C50197) / C49744 + C49872 * C50297) * ae) / C49809 +
        C49872 *
            (3 * C50299 + (C50297 * ae) / C49809 +
             C49872 *
                 (2 * C50296 - (ae * C50288) / C49880 +
                  C49872 * ((-(ae * C49872 * C50279) / C49744) / C49809 -
                            C50277 / C49880 +
                            C49872 * ((-(C49872 * C50071 * std::pow(C49874, 8) *
                                         bs[8] * C49885) /
                                       C49744) /
                                          C49809 -
                                      (ae * C50279) / C49880))));
    const double C50332 = C50315 + C50331;
    const double C20832 = C3925 + C3924;
    const double C3931 = C3915 + C3916;
    const double C32023 = C32019 + C32020;
    const double C37651 = C37647 + C37648;
    const double C2873 = C356 * C641;
    const double C2867 = C2502 * C641;
    const double C2861 = C350 * C641;
    const double C2855 = C2500 * C641;
    const double C8612 = C352 * C641;
    const double C20197 = C2507 * C641;
    const double C2875 = C358 * C642;
    const double C2869 = C356 * C642;
    const double C2863 = C352 * C642;
    const double C2857 = C350 * C642;
    const double C8614 = C354 * C642;
    const double C20199 = C2505 * C642;
    const double C3435 = C356 * C1035;
    const double C3429 = C2502 * C1035;
    const double C3423 = C350 * C1035;
    const double C3417 = C2500 * C1035;
    const double C9108 = C352 * C1035;
    const double C20533 = C2507 * C1035;
    const double C3437 = C358 * C1036;
    const double C3431 = C356 * C1036;
    const double C3425 = C352 * C1036;
    const double C3419 = C350 * C1036;
    const double C9110 = C354 * C1036;
    const double C20535 = C2505 * C1036;
    const double C44319 = C44281 * C136;
    const double C44313 = C44281 * C125;
    const double C44303 = C44281 * C134;
    const double C44297 = C44281 * C124;
    const double C44295 = C44281 * C132;
    const double C44289 = C44281 * C123;
    const double C44507 = C44281 * C308;
    const double C44501 = C44281 * C291;
    const double C44491 = C44281 * C298;
    const double C44485 = C44281 * C285;
    const double C44689 = C44281 * C485;
    const double C44683 = C44281 * C468;
    const double C44673 = C44281 * C475;
    const double C44667 = C44281 * C462;
    const double C44859 = C44281 * C300;
    const double C44853 = C44281 * C287;
    const double C45023 = C44281 * C477;
    const double C45017 = C44281 * C464;
    const double C45235 = C44281 * C902;
    const double C45229 = C44281 * C895;
    const double C47261 = C44281 * C290;
    const double C47255 = C44281 * C306;
    const double C47245 = C44281 * C296;
    const double C47239 = C44281 * C286;
    const double C47917 = C44281 * C894;
    const double C47911 = C44281 * C900;
    const double C48175 = C44281 * C1120;
    const double C48169 = C44281 * C1113;
    const double C48339 = C44281 * C1234;
    const double C48333 = C44281 * C1227;
    const double C48843 = C44281 * C1583;
    const double C48837 = C44281 * C1576;
    const double C44317 = C44282 * C479;
    const double C44311 = C44282 * C465;
    const double C44305 = C44282 * C477;
    const double C44299 = C44282 * C464;
    const double C44293 = C44282 * C475;
    const double C44287 = C44282 * C462;
    const double C44505 = C44282 * C1581;
    const double C44499 = C44282 * C1575;
    const double C44493 = C44282 * C902;
    const double C44487 = C44282 * C895;
    const double C44687 = C44282 * C1865;
    const double C44681 = C44282 * C1859;
    const double C44675 = C44282 * C485;
    const double C44669 = C44282 * C468;
    const double C44857 = C44282 * C904;
    const double C44851 = C44282 * C896;
    const double C45021 = C44282 * C487;
    const double C45015 = C44282 * C469;
    const double C45233 = C44282 * C1232;
    const double C45227 = C44282 * C1226;
    const double C47259 = C44282 * C1576;
    const double C47253 = C44282 * C1583;
    const double C47247 = C44282 * C900;
    const double C47241 = C44282 * C894;
    const double C47915 = C44282 * C1227;
    const double C47909 = C44282 * C1234;
    const double C48177 = C44282 * C3228;
    const double C48171 = C44282 * C3224;
    const double C48341 = C44282 * C4718;
    const double C48335 = C44282 * C4711;
    const double C48845 = C44282 * C2682;
    const double C48839 = C44282 * C2678;
    const double C140 =
        4 * ((-2 * C50011) / C49744 - (C49869 * C50016) / C49744 -
             (C50348 * ce) / C49744) +
        C49869 * ((-3 * C50016) / C49744 + C49869 * C50035 -
                  (C50353 * ce) / C49744) -
        ((3 * C50348 + C49869 * C50353) * ce) / C49744;
    const double C304 = C50071 * ((-3 * C50016) / C49744 + C49869 * C50035 -
                                  (C50353 * ce) / C49744);
    const double C312 = (-2 * C50011) / C49744 - (C49869 * C50016) / C49744 -
                        (C50348 * ce) / C49744 + C50035 * C50089;
    const double C481 = C49872 * ((-3 * C50016) / C49744 + C49869 * C50035 -
                                  (C50353 * ce) / C49744);
    const double C489 = (-2 * C50011) / C49744 - (C49869 * C50016) / C49744 -
                        (C50348 * ce) / C49744 + C50035 * C50151;
    const double C906 = C49872 * C50071 * C50035;
    const double C50065 = C49869 * C50064;
    const double C50081 = C50071 * C50064;
    const double C1114 =
        2 * C50071 * C50035 + C50071 * (C50035 + C50064 * C50089);
    const double C1577 = C49872 * (C50035 + C50064 * C50089);
    const double C1861 =
        2 * C49872 * C50035 + C49872 * (C50035 + C50064 * C50151);
    const double C2504 = C2480 + C2481;
    const double C2530 = C2528 - C2479;
    const double C3566 = C3553 + C3554;
    const double C3932 = C3919 + C3920;
    const double C355 = C336 + C337;
    const double C11445 = C11440 + C11441;
    const double C33962 = C33957 + C33958;
    const double C359 = C344 + C345;
    const double C11091 = C11074 + C11075;
    const double C33608 = C33591 + C33592;
    const double C532 = C513 + C514;
    const double C5367 = C5347 + C5348;
    const double C10888 = C10866 + C10867;
    const double C11605 = C11600 + C11601;
    const double C33405 = C33383 + C33384;
    const double C34122 = C34117 + C34118;
    const double C536 = C521 + C522;
    const double C5362 = C5337 + C5338;
    const double C6071 = C6063 + C6064;
    const double C11285 = C11268 + C11269;
    const double C11277 = C11252 + C11253;
    const double C33802 = C33785 + C33786;
    const double C33794 = C33769 + C33770;
    const double C44332 = C44307 + C44308;
    const double C930 = C921 + C922;
    const double C5907 = C5899 + C5900;
    const double C11083 = C11058 + C11059;
    const double C11823 = C11814 + C11815;
    const double C33600 = C33575 + C33576;
    const double C34340 = C34331 + C34332;
    const double C5742 = C5727 + C5728;
    const double C44700 = C44685 + C44686;
    const double C19999 = C19998 - C2521;
    const double C3567 = C3555 + C3556;
    const double C4304 = C3733 + C3734;
    const double C30810 = C13922 * C50757;
    const double C32022 = C13922 * C50757;
    const double C36380 = C36354 * C50757;
    const double C37650 = C36354 * C50757;
    const double C149 =
        5 * (3 * C49938 - (C49935 * ce) / C49880 + C49869 * C49975) -
        ((4 * C49935 + C49869 * C49972) * ce) / C49880 +
        C49869 *
            (4 * C49975 - (C49972 * ce) / C49880 +
             C49869 *
                 (3 * C49973 - (C49968 * ce) / C49880 +
                  C49869 *
                      (2 * C49969 - (C49963 * ce) / C49880 +
                       C49869 * ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880)))));
    const double C319 =
        (yP - yQ) * (3 * C49938 - (C49935 * ce) / C49880 + C49869 * C49975);
    const double C323 = 2 * C49910 - (C49907 * ce) / C49880 + C49869 * C49938 +
                        C49975 * std::pow(yP - yQ, 2);
    const double C324 =
        3 * C49938 - (C49935 * ce) / C49880 + C49869 * C49975 +
        (3 * C49973 - (C49968 * ce) / C49880 +
         C49869 *
             (2 * C49969 - (C49963 * ce) / C49880 +
              C49869 *
                  ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                   C49956 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49744) /
                                 C49809 -
                             (C49957 * ce) / C49880)))) *
            std::pow(yP - yQ, 2);
    const double C496 =
        (((-3 * (C49869 * C50004 + C49994 + C49998 * ce)) / C49744 +
          C49869 * ((-2 * C50004) / C49744 -
                    (C49869 * (C49869 * (C49869 * C49914 * C49915 * C49989 +
                                         C49999 * ce) +
                               C50000 + C49869 * C49999 * ce)) /
                        C49744 -
                    (C50003 * ce) / C49744) -
          ((2 * C49998 + C49869 * C50003) * ce) / C49744) *
         ae) /
            C49809 +
        C49872 * (3 * C49938 - (C49935 * ce) / C49880 + C49869 * C49975);
    const double C500 = 2 * C49910 - (C49907 * ce) / C49880 + C49869 * C49938 +
                        (C49872 * C50035 * ae) / C49809 +
                        C49872 * ((C50035 * ae) / C49809 + C49872 * C49975);
    const double C647 =
        (yP - yQ) *
        (4 * C49975 - (C49972 * ce) / C49880 +
         C49869 *
             (3 * C49973 - (C49968 * ce) / C49880 +
              C49869 * (2 * C49969 - (C49963 * ce) / C49880 +
                        C49869 * ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                  C49956 / C49880 +
                                  C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                               bs[8] * C49885) /
                                             C49744) /
                                                C49809 -
                                            (C49957 * ce) / C49880)))));
    const double C912 =
        (C50071 * C50035 * ae) / C49809 + C49872 * C50071 * C49975;
    const double C1122 =
        2 * C50071 * C49975 +
        C50071 *
            (C49975 +
             (2 * C49969 - (C49963 * ce) / C49880 +
              C49869 *
                  ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                   C49956 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49744) /
                                 C49809 -
                             (C49957 * ce) / C49880))) *
                 std::pow(C50071, 2));
    const double C1585 =
        ((C50035 + C50064 * C50089) * ae) / C49809 +
        C49872 *
            (C49975 +
             (2 * C49969 - (C49963 * ce) / C49880 +
              C49869 *
                  ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                   C49956 / C49880 +
                   C49869 * ((-(C49869 * std::pow(C49874, 8) * bs[8] * C49885) /
                              C49744) /
                                 C49809 -
                             (C49957 * ce) / C49880))) *
                 C50089);
    const double C1869 =
        2 * ((C50035 * ae) / C49809 + C49872 * C49975) +
        ((C50035 + C50064 * std::pow(C49872, 2)) * ae) / C49809 +
        C49872 *
            (C49975 + (C49872 * C50064 * ae) / C49809 +
             C49872 *
                 ((C50064 * ae) / C49809 +
                  C49872 *
                      (2 * C49969 - (C49963 * ce) / C49880 +
                       C49869 * ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880)))));
    const double C5707 =
        3 * (C49938 - (ae * C50168) / C49880 + C49872 * C50174) +
        (((-2 * C50168) / C49744 - (C49872 * C50173) / C49744) * ae) / C49809 +
        C49872 *
            (2 * C50174 - (ae * C50173) / C49880 +
             C49872 *
                 (C49973 - (ae * C49872 * C50059) / C49880 +
                  C49872 *
                      (C49872 * ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880)) -
                       (ae * C50059) / C49880)));
    const double C2510 = C2494 + C2495;
    const double C5906 = C5897 + C5898;
    const double C8465 = C8462 + C8463;
    const double C11822 = C11812 + C11813;
    const double C34339 = C34329 + C34330;
    const double C44864 = C44855 + C44856;
    const double C3030 = C3027 + C3028;
    const double C11090 = C11072 + C11073;
    const double C33607 = C33589 + C33590;
    const double C6070 = C6061 + C6062;
    const double C11284 = C11266 + C11267;
    const double C33801 = C33783 + C33784;
    const double C45028 = C45019 + C45020;
    const double C7568 =
        4 * (2 * C50166 - (ae * C50165) / C49880 + C49872 * C50217) +
        (((-3 * C50165) / C49744 + C49872 * C50218) * ae) / C49809 +
        C49872 *
            (3 * C50217 + (C50218 * ae) / C49809 +
             C49872 *
                 (2 * C50211 - (ae * C50209) / C49880 +
                  C49872 *
                      (C49969 - (ae * C49872 * C50051) / C49880 +
                       C49872 * (C49872 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880) -
                                 (ae * C50051) / C49880))));
    const double C40337 =
        5 * (3 * C50241 + (C50238 * ae) / C49809 + C49872 * C50332) +
        ((4 * C50238 + C49872 * C50330) * ae) / C49809 +
        C49872 *
            (4 * C50332 + (C50330 * ae) / C49809 +
             C49872 *
                 (3 * C50329 + (C50325 * ae) / C49809 +
                  C49872 *
                      (2 * C50324 - (ae * C50314) / C49880 +
                       C49872 * ((-(ae * C49872 * C50044) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49872 * ((-(C49872 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (ae * C50044) / C49880)))));
    const double C20837 = C20832 - C3923;
    const double C3933 = C3931 - C3917;
    const double C32024 = C32023 - C32021;
    const double C37652 = C37651 - C37649;
    const double C44338 = C44319 + C44320;
    const double C44335 = C44313 + C44314;
    const double C44330 = C44303 + C44304;
    const double C44327 = C44297 + C44298;
    const double C44326 = C44295 + C44296;
    const double C44323 = C44289 + C44290;
    const double C44520 = C44507 + C44508;
    const double C44517 = C44501 + C44502;
    const double C44512 = C44491 + C44492;
    const double C44509 = C44485 + C44486;
    const double C44702 = C44689 + C44690;
    const double C44699 = C44683 + C44684;
    const double C44694 = C44673 + C44674;
    const double C44691 = C44667 + C44668;
    const double C44866 = C44859 + C44860;
    const double C44863 = C44853 + C44854;
    const double C45030 = C45023 + C45024;
    const double C45027 = C45017 + C45018;
    const double C45242 = C45235 + C45236;
    const double C45239 = C45229 + C45230;
    const double C47274 = C47261 + C47262;
    const double C47271 = C47255 + C47256;
    const double C47266 = C47245 + C47246;
    const double C47263 = C47239 + C47240;
    const double C47924 = C47917 + C47918;
    const double C47921 = C47911 + C47912;
    const double C48184 = C48175 + C48176;
    const double C48181 = C48169 + C48170;
    const double C48348 = C48339 + C48340;
    const double C48345 = C48333 + C48334;
    const double C48852 = C48843 + C48844;
    const double C48849 = C48837 + C48838;
    const double C44337 = C44317 + C44318;
    const double C44334 = C44311 + C44312;
    const double C44331 = C44305 + C44306;
    const double C44328 = C44299 + C44300;
    const double C44325 = C44293 + C44294;
    const double C44322 = C44287 + C44288;
    const double C44519 = C44505 + C44506;
    const double C44516 = C44499 + C44500;
    const double C44513 = C44493 + C44494;
    const double C44510 = C44487 + C44488;
    const double C44701 = C44687 + C44688;
    const double C44698 = C44681 + C44682;
    const double C44695 = C44675 + C44676;
    const double C44692 = C44669 + C44670;
    const double C44865 = C44857 + C44858;
    const double C44862 = C44851 + C44852;
    const double C45029 = C45021 + C45022;
    const double C45026 = C45015 + C45016;
    const double C45241 = C45233 + C45234;
    const double C45238 = C45227 + C45228;
    const double C47273 = C47259 + C47260;
    const double C47270 = C47253 + C47254;
    const double C47267 = C47247 + C47248;
    const double C47264 = C47241 + C47242;
    const double C47923 = C47915 + C47916;
    const double C47920 = C47909 + C47910;
    const double C48185 = C48177 + C48178;
    const double C48182 = C48171 + C48172;
    const double C48349 = C48341 + C48342;
    const double C48346 = C48335 + C48336;
    const double C48853 = C48845 + C48846;
    const double C48850 = C48839 + C48840;
    const double C169 = C117 * C140;
    const double C651 = C117 * C304;
    const double C348 = C117 * C312;
    const double C761 = C117 * C481;
    const double C10874 = C10844 * C481;
    const double C33391 = C33361 * C481;
    const double C525 = C117 * C489;
    const double C5345 = C5313 * C489;
    const double C11598 = C10844 * C489;
    const double C34115 = C33361 * C489;
    const double C44315 = C44283 * C489;
    const double C925 = C117 * C906;
    const double C11438 = C10844 * C906;
    const double C33955 = C33361 * C906;
    const double C50066 = C50042 + C50065;
    const double C1236 =
        C50071 * C49975 + (C49872 * C50081 * ae) / C49809 +
        C49872 * ((C50081 * ae) / C49809 +
                  C49872 * C50071 *
                      (2 * C49969 - (C49963 * ce) / C49880 +
                       C49869 * ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880))));
    const double C1228 = C50071 * C50035 + C50081 * C50151;
    const double C2517 = C2504 - C2482;
    const double C2531 = C2530 * C2300;
    const double C19992 = C2530 * C50771;
    const double C24672 = C2530 * C51028;
    const double C3572 = C3566 * C50776;
    const double C25552 = C3566 * C50776;
    const double C3934 = C3932 - C3921;
    const double C2866 = C355 * C638;
    const double C3428 = C355 * C1032;
    const double C8309 = C355 * C50757;
    const double C8615 = C355 * C51078;
    const double C9111 = C355 * C1031;
    const double C9517 = C355 * C50757;
    const double C2483 = C359 * C50757;
    const double C2876 = C359 * C51078;
    const double C2872 = C359 * C638;
    const double C3438 = C359 * C1031;
    const double C3434 = C359 * C1032;
    const double C3922 = C359 * C50757;
    const double C8311 = C359 * C278;
    const double C9214 = C359 * C50752;
    const double C9519 = C359 * C51021;
    const double C10897 = C10888 + C10889;
    const double C33414 = C33405 + C33406;
    const double C11593 = C11277 + C11276;
    const double C34110 = C33794 + C33793;
    const double C3246 = C930 * C50757;
    const double C4141 = C930 * C50757;
    const double C8959 = C930 * C278;
    const double C9364 = C930 * C50752;
    const double C9717 = C930 * C51021;
    const double C11433 = C11083 + C11082;
    const double C14345 = C11082 + C11083;
    const double C33950 = C33600 + C33599;
    const double C41396 = C33599 + C33600;
    const double C20000 = C19999 * C50771;
    const double C3573 = C3567 * C50776;
    const double C25553 = C3567 * C50776;
    const double C4312 = C4304 * C50776;
    const double C26192 = C4304 * C50776;
    const double C30815 = C30814 - C30810;
    const double C36395 = C36394 - C36380;
    const double C652 = C50907 * C319;
    const double C349 = C50907 * C323;
    const double C762 = C50907 * C496;
    const double C10875 = C50971 * C496;
    const double C33392 = C50971 * C496;
    const double C526 = C50907 * C500;
    const double C5346 = C5310 * C500;
    const double C11599 = C50971 * C500;
    const double C34116 = C50971 * C500;
    const double C44316 = C44280 * C500;
    const double C926 = C50907 * C912;
    const double C11439 = C50971 * C912;
    const double C33956 = C50971 * C912;
    const double C2525 = C2510 * C50757;
    const double C3930 = C2510 * C50757;
    const double C9217 = C2510 * C50752;
    const double C20202 = C2510 * C638;
    const double C20538 = C2510 * C1032;
    const double C9367 = C8465 * C50752;
    const double C3256 = C3030 * C50757;
    const double C4149 = C3030 * C50757;
    const double C9867 = C3030 * C50752;
    const double C20838 = C20837 - C3926;
    const double C3935 = C3933 - C3918;
    const double C32025 = C32024 - C32022;
    const double C37653 = C37652 - C37650;
    const double C180 = C169 + C170;
    const double C50067 = C50066 - C50060;
    const double C3577 = C3571 + C3572;
    const double C25555 = C25551 + C25552;
    const double C2527 = C2517 - C2483;
    const double C3936 = C3934 - C3922;
    const double C3578 = C3573 + C3574;
    const double C25556 = C25553 + C25554;
    const double C4316 = C4312 + C4313;
    const double C26194 = C26192 + C26193;
    const double C30816 = C30815 * C50771;
    const double C36396 = C36395 * C50771;
    const double C654 = C651 + C652;
    const double C361 = C348 + C349;
    const double C764 = C761 + C762;
    const double C10892 = C10874 + C10875;
    const double C33409 = C33391 + C33392;
    const double C538 = C525 + C526;
    const double C5366 = C5345 + C5346;
    const double C11604 = C11598 + C11599;
    const double C34121 = C34115 + C34116;
    const double C44336 = C44315 + C44316;
    const double C932 = C925 + C926;
    const double C11444 = C11438 + C11439;
    const double C33961 = C33955 + C33956;
    const double C20839 = C20838 * C50771;
    const double C3937 = C3935 * C2300;
    const double C20831 = C3935 * C50771;
    const double C25849 = C3935 * C51028;
    const double C32026 = C32025 * C50771;
    const double C37654 = C37653 * C50771;
    const double C501 =
        3 * C49938 - (C49935 * ce) / C49880 + C49869 * C49975 +
        (C49872 * C50067 * ae) / C49809 +
        C49872 *
            ((C50067 * ae) / C49809 +
             C49872 *
                 (3 * C49973 - (C49968 * ce) / C49880 +
                  C49869 *
                      (2 * C49969 - (C49963 * ce) / C49880 +
                       C49869 * ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880)))));
    const double C757 =
        ((4 * C50035 + C49869 * C50067 -
          ((3 * C50003 + C49869 * C50056) * ce) / C49744) *
         ae) /
            C49809 +
        C49872 *
            (4 * C49975 - (C49972 * ce) / C49880 +
             C49869 *
                 (3 * C49973 - (C49968 * ce) / C49880 +
                  C49869 *
                      (2 * C49969 - (C49963 * ce) / C49880 +
                       C49869 * ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880)))));
    const double C913 =
        (C50071 * C50067 * ae) / C49809 +
        C49872 * C50071 *
            (3 * C49973 - (C49968 * ce) / C49880 +
             C49869 * (2 * C49969 - (C49963 * ce) / C49880 +
                       C49869 * ((-(C49869 * C49957 * ce) / C49744) / C49809 -
                                 C49956 / C49880 +
                                 C49869 * ((-(C49869 * std::pow(C49874, 8) *
                                              bs[8] * C49885) /
                                            C49744) /
                                               C49809 -
                                           (C49957 * ce) / C49880))));
    const double C142 =
        5 * ((-3 * C50016) / C49744 + C49869 * C50035 -
             (C50353 * ce) / C49744) +
        C49869 * (4 * C50035 + C49869 * C50067 - (C50358 * ce) / C49744) -
        ((4 * C50353 + C49869 * C50358) * ce) / C49744;
    const double C314 = (-3 * C50016) / C49744 + C49869 * C50035 -
                        (C50353 * ce) / C49744 + C50067 * C50089;
    const double C491 = (-3 * C50016) / C49744 + C49869 * C50035 -
                        (C50353 * ce) / C49744 + C50067 * C50151;
    const double C646 =
        C50071 * (4 * C50035 + C49869 * C50067 - (C50358 * ce) / C49744);
    const double C756 =
        C49872 * (4 * C50035 + C49869 * C50067 - (C50358 * ce) / C49744);
    const double C908 = C49872 * C50071 * C50067;
    const double C2529 = C2527 * C50776;
    const double C24673 = C2527 * C50776;
    const double C3938 = C3936 * C50776;
    const double C25850 = C3936 * C50776;
    const double C8617 = C654 * C638;
    const double C9113 = C654 * C1032;
    const double C2878 = C361 * C638;
    const double C3440 = C361 * C1032;
    const double C8313 = C361 * C50757;
    const double C9521 = C361 * C50757;
    const double C8961 = C932 * C50757;
    const double C9719 = C932 * C50757;
    const double C2532 = C2531 + C2529;
    const double C24674 = C24672 + C24673;
    const double C3939 = C3937 + C3938;
    const double C25851 = C25849 + C25850;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50907 * C129) * C641 +
                    (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
                    C172 * C51078 + C173 * C643 + C174 * C638) *
                       C51079 +
                   (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
                    C175 * C643 + C176 * C638) *
                       C51080 +
                   (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
                    C177 * C643 + C178 * C638) *
                       C8156) *
                      C51049 +
                  ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C51079 +
                   (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C51080 +
                   (C8612 + C8613 - C8614 - C8615 + C8616 + C8617) * C8156) *
                      C50945) *
                     C50810 * C51036 +
                 (((C2857 - (C2856 + C2855) + C2858 - C2859 - C2860) * C51079 +
                   (C2863 - (C2862 + C2861) + C2864 - C2865 - C2866) * C51080 +
                   (C8614 - (C8613 + C8612) + C8615 - C8616 - C8617) * C8156) *
                      C51049 +
                  ((C2869 - (C2868 + C2867) + C2870 - C2871 - C2872) * C51079 +
                   (C2875 - (C2874 + C2873) + C2876 - C2877 - C2878) * C51080 +
                   (C360 * C642 - (C359 * C51077 + C358 * C641) +
                    C361 * C51078 - (C117 * C294 + C50907 * C313) * C643 -
                    (C117 * C314 + C50907 * C324) * C638) *
                       C8156) *
                      C50945) *
                     C50810 * C50848)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C283 +
              (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
              C172 * C50757) *
                 C51079 +
             (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                 C51080 +
             (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                 C8156) *
                C51049 +
            ((C2513 + C2514 - C2468 - C2469) * C51079 +
             (C2470 + C2471 - C2472 - C2473) * C51080 +
             (C8306 + C8307 - C8308 - C8309) * C8156) *
                C50945) *
               C51037 +
           (((C527 * C284 -
              ((C117 * C473 + C50907 * C492) * C278 +
               (C117 * C463 + C50907 * C474) * C283) +
              C528 * C50757) *
                 C51079 +
             (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                 C51080 +
             (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) *
                 C8156) *
                C51049 +
            ((C3237 - (C3267 + C3268) + C3242) * C51079 +
             (C3243 - (C3244 + C3245) + C3246) * C51080 +
             (C8958 - (C8959 + C8960) + C8961) * C8156) *
                C50945) *
               C50874) *
              C51036 +
          ((((C2468 - (C2514 + C2513) + C2469) * C51079 +
             (C2472 - (C2471 + C2470) + C2473) * C51080 +
             (C8308 - (C8307 + C8306) + C8309) * C8156) *
                C51049 +
            ((C2478 - (C2516 + C2515) + C2479) * C51079 +
             (C2482 - (C2481 + C2480) + C2483) * C51080 +
             (C8310 - (C8311 + C8312) + C8313) * C8156) *
                C50945) *
               C51037 +
           (((C3268 + C3267 - C3237 - C3242) * C51079 +
             (C3245 + C3244 - C3243 - C3246) * C51080 +
             (C8960 + C8959 - C8958 - C8961) * C8156) *
                C51049 +
            ((C3270 + C3269 - C3247 - C3252) * C51079 +
             (C3255 + C3254 - C3253 - C3256) * C51080 +
             (C3029 * C283 + C3030 * C278 -
              (C117 * C1573 + C50907 * C1578) * C284 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C8156) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C51079 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C51080 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C8156) *
               C51049 +
           ((C2513 + C2514 - C2468 - C2469) * C51079 +
            (C2470 + C2471 - C2472 - C2473) * C51080 +
            (C8306 + C8307 - C8308 - C8309) * C8156) *
               C50945) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C51079 +
            (C2472 - (C2471 + C2470) + C2473) * C51080 +
            (C8308 - (C8307 + C8306) + C8309) * C8156) *
               C51049 +
           ((C2478 - (C2516 + C2515) + C2479) * C51079 +
            (C2482 - (C2481 + C2480) + C2483) * C51080 +
            (C8310 - (C8311 + C8312) + C8313) * C8156) *
               C50945) *
              C50810 * C281 +
          ((C2530 * C51079 + C2527 * C51080 +
            (C8312 + C8311 - C8310 - C8313) * C8156) *
               C51049 +
           ((C2520 + C2519 - C2518 - C2521) * C51079 +
            (C2524 + C2523 - C2522 - C2525) * C51080 +
            (C2509 * C283 + C2510 * C278 -
             (C117 * C1110 + C50907 * C1115) * C284 -
             (C117 * C1114 + C50907 * C1122) * C50757) *
                C8156) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C51079 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C51080 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C8156) *
              C51049 +
          ((C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C51079 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C51080 +
           (C352 * C118 + C353 * C106 - C354 * C119 - C355 * C107 +
            C653 * C120 + C654 * C108 - (C117 * C644 + C50907 * C645) * C121 -
            (C117 * C646 + C50907 * C647) * C109) *
               C8156) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C51079 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C51080 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C8156) *
               C51049 +
           ((C2513 + C2514 - C2468 - C2469) * C51079 +
            (C2470 + C2471 - C2472 - C2473) * C51080 +
            (C8306 + C8307 - C8308 - C8309) * C8156) *
               C50945) *
              C459 +
          (((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C51079 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                C51080 +
            (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) *
                C8156) *
               C51049 +
           ((C3237 - (C3267 + C3268) + C3242) * C51079 +
            (C3243 - (C3244 + C3245) + C3246) * C51080 +
            (C931 * C284 - (C930 * C278 + C929 * C283) + C932 * C50757) *
                C8156) *
               C50945) *
              C460 +
          ((((C117 * C467 + C50907 * C482) * C283 +
             (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
             C534 * C50757) *
                C51079 +
            (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50757) * C51080 +
            (C535 * C283 + C536 * C278 - C537 * C284 - C538 * C50757) * C8156) *
               C51049 +
           ((C3753 * C283 + C3754 * C278 - C2705 * C284 - C2706 * C50757) *
                C51079 +
            (C2705 * C283 + C2706 * C278 - C8464 * C284 - C8465 * C50757) *
                C51080 +
            (C8464 * C283 + C8465 * C278 -
             (C117 * C1224 + C50907 * C1229) * C284 -
             (C117 * C1228 + C50907 * C1236) * C50757) *
                C8156) *
               C50945) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50907 * C129) * C641 +
                    (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
                    C172 * C51078 + C173 * C643 + C174 * C638) *
                       C51079 +
                   (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
                    C175 * C643 + C176 * C638) *
                       C51080 +
                   (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
                    C177 * C643 + C178 * C638) *
                       C8156) *
                      C51049 +
                  ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C51079 +
                   (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C51080 +
                   (C8612 + C8613 - C8614 - C8615 + C8616 + C8617) * C8156) *
                      C50945) *
                     C51037 +
                 (((C527 * C642 -
                    ((C117 * C473 + C50907 * C492) * C51077 +
                     (C117 * C463 + C50907 * C474) * C641) +
                    C528 * C51078 - C529 * C643 - C530 * C638) *
                       C51079 +
                   (C529 * C642 - (C528 * C51077 + C527 * C641) +
                    C530 * C51078 - C531 * C643 - C532 * C638) *
                       C51080 +
                   (C531 * C642 - (C530 * C51077 + C529 * C641) +
                    C532 * C51078 - C763 * C643 - C764 * C638) *
                       C8156) *
                      C51049 +
                  ((C927 * C642 - (C3261 * C51077 + C3262 * C641) +
                    C928 * C51078 - C929 * C643 - C930 * C638) *
                       C51079 +
                   (C929 * C642 - (C928 * C51077 + C927 * C641) +
                    C930 * C51078 - C931 * C643 - C932 * C638) *
                       C51080 +
                   (C931 * C642 - (C930 * C51077 + C929 * C641) +
                    C932 * C51078 - (C117 * C898 + C50907 * C907) * C643 -
                    (C117 * C908 + C50907 * C913) * C638) *
                       C8156) *
                      C50945) *
                     C50874) *
                C50798) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C51079 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C51080 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C8156) *
              C51049 +
          ((C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C51079 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C51080 +
           (C352 * C118 + C353 * C106 - C354 * C119 - C355 * C107 +
            C653 * C120 + C654 * C108 - (C117 * C644 + C50907 * C645) * C121 -
            (C117 * C646 + C50907 * C647) * C109) *
               C8156) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C51079 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C51080 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C8156) *
               C51049 +
           ((C2513 + C2514 - C2468 - C2469) * C51079 +
            (C2470 + C2471 - C2472 - C2473) * C51080 +
            (C8306 + C8307 - C8308 - C8309) * C8156) *
               C50945) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C51079 +
            (C2472 - (C2471 + C2470) + C2473) * C51080 +
            (C8308 - (C8307 + C8306) + C8309) * C8156) *
               C51049 +
           ((C2478 - (C2516 + C2515) + C2479) * C51079 +
            (C2482 - (C2481 + C2480) + C2483) * C51080 +
            (C8310 - (C8311 + C8312) + C8313) * C8156) *
               C50945) *
              C50810 * C281 +
          ((C2530 * C51079 + C2527 * C51080 +
            (C8312 + C8311 - C8310 - C8313) * C8156) *
               C51049 +
           ((C2520 + C2519 - C2518 - C2521) * C51079 +
            (C2524 + C2523 - C2522 - C2525) * C51080 +
            (C2509 * C283 + C2510 * C278 -
             (C117 * C1110 + C50907 * C1115) * C284 -
             (C117 * C1114 + C50907 * C1122) * C50757) *
                C8156) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C51079 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C51080 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C8156) *
               C51049 +
           ((C3907 + C3908 - C3909 - C3910) * C51079 +
            (C3911 + C3912 - C3913 - C3914) * C51080 +
            (C9514 + C9515 - C9516 - C9517) * C8156) *
               C50945) *
              C50810 * C51081 +
          (((C3909 - (C3908 + C3907) + C3910) * C51079 +
            (C3913 - (C3912 + C3911) + C3914) * C51080 +
            (C9516 - (C9515 + C9514) + C9517) * C8156) *
               C51049 +
           ((C3917 - (C3916 + C3915) + C3918) * C51079 +
            (C3921 - (C3920 + C3919) + C3922) * C51080 +
            (C9518 - (C9519 + C9520) + C9521) * C8156) *
               C50945) *
              C50810 * C51082 +
          ((C3935 * C51079 + C3936 * C51080 +
            (C9520 + C9519 - C9518 - C9521) * C8156) *
               C51049 +
           ((C3925 + C3924 - C3923 - C3926) * C51079 +
            (C3929 + C3928 - C3927 - C3930) * C51080 +
            (C2509 * C49770 + C2510 * C51021 -
             (C117 * C1110 + C50907 * C1115) * C49763 -
             (C117 * C1114 + C50907 * C1122) * C50757) *
                C8156) *
               C50945) *
              C50810 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C117 * C122 + C50907 * C129) * C1109 +
                     (C117 * C130 + C50907 * C143) * C50752) *
                        C51079 +
                    (C171 * C1109 + C172 * C50752) * C51080 +
                    (C173 * C1109 + C174 * C50752) * C8156) *
                       C51049 +
                   ((C3547 + C3548) * C51079 + (C3549 + C3550) * C51080 +
                    (C9212 + C9213) * C8156) *
                       C50945) *
                      C51037 -
                  (((C9364 + C9365) * C8156 + (C3737 + C3738) * C51080 +
                    (C3739 + C3740) * C51079) *
                       C50945 +
                   ((C530 * C50752 + C529 * C1109) * C8156 +
                    (C528 * C50752 + C527 * C1109) * C51080 +
                    ((C117 * C473 + C50907 * C492) * C50752 +
                     (C117 * C463 + C50907 * C474) * C1109) *
                        C51079) *
                       C51049) *
                      C50874) *
                     C51081 +
                 ((((C3740 + C3739) * C51079 + (C3738 + C3737) * C51080 +
                    (C9365 + C9364) * C8156) *
                       C51049 +
                   ((C3736 + C3735) * C51079 + (C3734 + C3733) * C51080 +
                    (C9866 + C9867) * C8156) *
                       C50945) *
                      C50874 -
                  (((C9214 + C9215) * C8156 + (C3554 + C3553) * C51080 +
                    (C3552 + C3551) * C51079) *
                       C50945 +
                   ((C9213 + C9212) * C8156 + (C3550 + C3549) * C51080 +
                    (C3548 + C3547) * C51079) *
                       C51049) *
                      C51037) *
                     C51082 +
                 (((C3565 * C51079 + C3566 * C51080 + (C9215 + C9214) * C8156) *
                       C51049 +
                   ((C3558 + C3557) * C51079 + (C3556 + C3555) * C51080 +
                    (C9216 + C9217) * C8156) *
                       C50945) *
                      C51037 -
                  ((((C117 * C3232 + C50907 * C3235) * C50752 +
                     (C117 * C3226 + C50907 * C3231) * C1109) *
                        C8156 +
                    (C4311 + C4310) * C51080 + (C4318 + C4317) * C51079) *
                       C50945 +
                   ((C9867 + C9866) * C8156 + C4304 * C51080 + C4305 * C51079) *
                       C51049) *
                      C50874) *
                     C1342)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50907 * C129) * C1109 +
                    (C117 * C130 + C50907 * C143) * C50752) *
                       C51079 +
                   (C171 * C1109 + C172 * C50752) * C51080 +
                   (C173 * C1109 + C174 * C50752) * C8156) *
                      C51049 +
                  ((C3547 + C3548) * C51079 + (C3549 + C3550) * C51080 +
                   (C9212 + C9213) * C8156) *
                      C50945) *
                     C50810 * C1105 -
                 (((C9214 + C9215) * C8156 + (C3554 + C3553) * C51080 +
                   (C3552 + C3551) * C51079) *
                      C50945 +
                  ((C9213 + C9212) * C8156 + (C3550 + C3549) * C51080 +
                   (C3548 + C3547) * C51079) *
                      C51049) *
                     C50810 * C1106 +
                 ((C3565 * C51079 + C3566 * C51080 + (C9215 + C9214) * C8156) *
                      C51049 +
                  ((C3558 + C3557) * C51079 + (C3556 + C3555) * C51080 +
                   (C9216 + C9217) * C8156) *
                      C50945) *
                     C50810 * C1107 -
                 ((((C117 * C2459 + C50907 * C2462) * C50752 +
                    (C117 * C2453 + C50907 * C2458) * C1109) *
                       C8156 +
                   (C3564 + C3563) * C51080 + (C3576 + C3575) * C51079) *
                      C50945 +
                  ((C9217 + C9216) * C8156 + C3567 * C51080 + C3568 * C51079) *
                      C51049) *
                     C50810 * C1108)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50907 * C129) * C1035 +
                    (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
                    C172 * C1031 + C173 * C1037 + C174 * C1032) *
                       C51079 +
                   (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                    C175 * C1037 + C176 * C1032) *
                       C51080 +
                   (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                    C177 * C1037 + C178 * C1032) *
                       C8156) *
                      C51049 +
                  ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C51079 +
                   (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C51080 +
                   (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C8156) *
                      C50945) *
                     C50810 * C1033 +
                 (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C51079 +
                   (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C51080 +
                   (C9110 - (C9109 + C9108) + C9111 - C9112 - C9113) * C8156) *
                      C51049 +
                  ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C51079 +
                   (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C51080 +
                   (C360 * C1036 - (C359 * C1030 + C358 * C1035) +
                    C361 * C1031 - (C117 * C294 + C50907 * C313) * C1037 -
                    (C117 * C314 + C50907 * C324) * C1032) *
                       C8156) *
                      C50945) *
                     C50810 * C50848)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((((C117 * C122 + C50907 * C129) * C1109 +
                     (C117 * C130 + C50907 * C143) * C50752) *
                        C51079 +
                    (C171 * C1109 + C172 * C50752) * C51080 +
                    (C173 * C1109 + C174 * C50752) * C8156) *
                       C51049 +
                   ((C3547 + C3548) * C51079 + (C3549 + C3550) * C51080 +
                    (C9212 + C9213) * C8156) *
                       C50945) *
                      C459 -
                  (((C9364 + C9365) * C8156 + (C3737 + C3738) * C51080 +
                    (C3739 + C3740) * C51079) *
                       C50945 +
                   ((C530 * C50752 + C529 * C1109) * C8156 +
                    (C528 * C50752 + C527 * C1109) * C51080 +
                    ((C117 * C473 + C50907 * C492) * C50752 +
                     (C117 * C463 + C50907 * C474) * C1109) *
                        C51079) *
                       C51049) *
                      C460 +
                  ((((C117 * C467 + C50907 * C482) * C1109 +
                     (C117 * C483 + C50907 * C497) * C50752) *
                        C51079 +
                    (C533 * C1109 + C534 * C50752) * C51080 +
                    (C535 * C1109 + C536 * C50752) * C8156) *
                       C51049 +
                   ((C3757 + C3758) * C51079 + (C3745 + C3746) * C51080 +
                    (C9366 + C9367) * C8156) *
                       C50945) *
                      C461) *
                     C1033 +
                 ((((C3740 + C3739) * C51079 + (C3738 + C3737) * C51080 +
                    (C9365 + C9364) * C8156) *
                       C51049 +
                   ((C3736 + C3735) * C51079 + (C3734 + C3733) * C51080 +
                    (C3029 * C1109 + C3030 * C50752) * C8156) *
                       C50945) *
                      C460 -
                  (((C9214 + C9215) * C8156 + (C3554 + C3553) * C51080 +
                    (C3552 + C3551) * C51079) *
                       C50945 +
                   ((C9213 + C9212) * C8156 + (C3550 + C3549) * C51080 +
                    (C3548 + C3547) * C51079) *
                       C51049) *
                      C459 -
                  ((((C117 * C2686 + C50907 * C2689) * C50752 +
                     (C117 * C2680 + C50907 * C2685) * C1109) *
                        C8156 +
                    (C3752 + C3751) * C51080 + (C3760 + C3759) * C51079) *
                       C50945 +
                   ((C9367 + C9366) * C8156 + (C3746 + C3745) * C51080 +
                    (C3758 + C3757) * C51079) *
                       C51049) *
                      C461) *
                     C50848)) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C51079 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C51080 +
             (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                 C8156) *
                C51049 +
            ((C3907 + C3908 - C3909 - C3910) * C51079 +
             (C3911 + C3912 - C3913 - C3914) * C51080 +
             (C9514 + C9515 - C9516 - C9517) * C8156) *
                C50945) *
               C51037 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C51079 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C51080 +
             (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                 C8156) *
                C51049 +
            ((C4134 - (C4135 + C4136) + C4137) * C51079 +
             (C4138 - (C4139 + C4140) + C4141) * C51080 +
             (C9716 - (C9717 + C9718) + C9719) * C8156) *
                C50945) *
               C50874) *
              C1033 +
          ((((C3909 - (C3908 + C3907) + C3910) * C51079 +
             (C3913 - (C3912 + C3911) + C3914) * C51080 +
             (C9516 - (C9515 + C9514) + C9517) * C8156) *
                C51049 +
            ((C3917 - (C3916 + C3915) + C3918) * C51079 +
             (C3921 - (C3920 + C3919) + C3922) * C51080 +
             (C9518 - (C9519 + C9520) + C9521) * C8156) *
                C50945) *
               C51037 +
           (((C4136 + C4135 - C4134 - C4137) * C51079 +
             (C4140 + C4139 - C4138 - C4141) * C51080 +
             (C9718 + C9717 - C9716 - C9719) * C8156) *
                C51049 +
            ((C4144 + C4143 - C4142 - C4145) * C51079 +
             (C4148 + C4147 - C4146 - C4149) * C51080 +
             (C3029 * C49770 + C3030 * C51021 -
              (C117 * C1573 + C50907 * C1578) * C49763 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C8156) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50907 * C129) * C1035 +
                    (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
                    C172 * C1031 + C173 * C1037 + C174 * C1032) *
                       C51079 +
                   (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                    C175 * C1037 + C176 * C1032) *
                       C51080 +
                   (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                    C177 * C1037 + C178 * C1032) *
                       C8156) *
                      C51049 +
                  ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C51079 +
                   (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C51080 +
                   (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C8156) *
                      C50945) *
                     C50810 * C1033 +
                 (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C51079 +
                   (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C51080 +
                   (C9110 - (C9109 + C9108) + C9111 - C9112 - C9113) * C8156) *
                      C51049 +
                  ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C51079 +
                   (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C51080 +
                   (C360 * C1036 - (C359 * C1030 + C358 * C1035) +
                    C361 * C1031 - (C117 * C294 + C50907 * C313) * C1037 -
                    (C117 * C314 + C50907 * C324) * C1032) *
                       C8156) *
                      C50945) *
                     C50810 * C50848)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C122 + C50907 * C129) * C1109 +
                    (C117 * C130 + C50907 * C143) * C50752) *
                       C51079 +
                   (C171 * C1109 + C172 * C50752) * C51080 +
                   (C173 * C1109 + C174 * C50752) * C8156) *
                      C51049 +
                  ((C3547 + C3548) * C51079 + (C3549 + C3550) * C51080 +
                   (C9212 + C9213) * C8156) *
                      C50945) *
                     C50810 * C1105 -
                 (((C9214 + C9215) * C8156 + (C3554 + C3553) * C51080 +
                   (C3552 + C3551) * C51079) *
                      C50945 +
                  ((C9213 + C9212) * C8156 + (C3550 + C3549) * C51080 +
                   (C3548 + C3547) * C51079) *
                      C51049) *
                     C50810 * C1106 +
                 ((C3565 * C51079 + C3566 * C51080 + (C9215 + C9214) * C8156) *
                      C51049 +
                  ((C3558 + C3557) * C51079 + (C3556 + C3555) * C51080 +
                   (C9216 + C9217) * C8156) *
                      C50945) *
                     C50810 * C1107 -
                 ((((C117 * C2459 + C50907 * C2462) * C50752 +
                    (C117 * C2453 + C50907 * C2458) * C1109) *
                       C8156 +
                   (C3564 + C3563) * C51080 + (C3576 + C3575) * C51079) *
                      C50945 +
                  ((C9217 + C9216) * C8156 + C3567 * C51080 + C3568 * C51079) *
                      C51049) *
                     C50810 * C1108)) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C51079 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C51080 +
             (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                 C8156) *
                C51049 +
            ((C3907 + C3908 - C3909 - C3910) * C51079 +
             (C3911 + C3912 - C3913 - C3914) * C51080 +
             (C9514 + C9515 - C9516 - C9517) * C8156) *
                C50945) *
               C1687 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C51079 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C51080 +
             (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                 C8156) *
                C51049 +
            ((C4134 - (C4135 + C4136) + C4137) * C51079 +
             (C4138 - (C4139 + C4140) + C4141) * C51080 +
             (C9716 - (C9717 + C9718) + C9719) * C8156) *
                C50945) *
               C50874) *
              C51036 +
          ((((C3909 - (C3908 + C3907) + C3910) * C51079 +
             (C3913 - (C3912 + C3911) + C3914) * C51080 +
             (C9516 - (C9515 + C9514) + C9517) * C8156) *
                C51049 +
            ((C3917 - (C3916 + C3915) + C3918) * C51079 +
             (C3921 - (C3920 + C3919) + C3922) * C51080 +
             (C9518 - (C9519 + C9520) + C9521) * C8156) *
                C50945) *
               C1687 +
           (((C4136 + C4135 - C4134 - C4137) * C51079 +
             (C4140 + C4139 - C4138 - C4141) * C51080 +
             (C9718 + C9717 - C9716 - C9719) * C8156) *
                C51049 +
            ((C4144 + C4143 - C4142 - C4145) * C51079 +
             (C4148 + C4147 - C4146 - C4149) * C51080 +
             (C3029 * C49770 + C3030 * C51021 -
              (C117 * C1573 + C50907 * C1578) * C49763 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C8156) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C122 + C50907 * C129) * C1109 +
                      (C117 * C130 + C50907 * C143) * C50752) *
                         C51079 +
                     (C171 * C1109 + C172 * C50752) * C51080 +
                     (C173 * C1109 + C174 * C50752) * C8156) *
                        C51049 +
                    ((C3547 + C3548) * C51079 + (C3549 + C3550) * C51080 +
                     (C9212 + C9213) * C8156) *
                        C50945) *
                       C51083 -
                   (((C9364 + C9365) * C8156 + (C3737 + C3738) * C51080 +
                     (C3739 + C3740) * C51079) *
                        C50945 +
                    ((C530 * C50752 + C529 * C1109) * C8156 +
                     (C528 * C50752 + C527 * C1109) * C51080 +
                     ((C117 * C473 + C50907 * C492) * C50752 +
                      (C117 * C463 + C50907 * C474) * C1109) *
                         C51079) *
                        C51049) *
                       C51084 +
                   ((((C117 * C467 + C50907 * C482) * C1109 +
                      (C117 * C483 + C50907 * C497) * C50752) *
                         C51079 +
                     (C533 * C1109 + C534 * C50752) * C51080 +
                     (C535 * C1109 + C536 * C50752) * C8156) *
                        C51049 +
                    ((C3757 + C3758) * C51079 + (C3745 + C3746) * C51080 +
                     (C9366 + C9367) * C8156) *
                        C50945) *
                       C2103) *
                      C51036 +
                  ((((C3740 + C3739) * C51079 + (C3738 + C3737) * C51080 +
                     (C9365 + C9364) * C8156) *
                        C51049 +
                    ((C3736 + C3735) * C51079 + (C3734 + C3733) * C51080 +
                     (C9866 + C9867) * C8156) *
                        C50945) *
                       C51084 -
                   (((C9214 + C9215) * C8156 + (C3554 + C3553) * C51080 +
                     (C3552 + C3551) * C51079) *
                        C50945 +
                    ((C9213 + C9212) * C8156 + (C3550 + C3549) * C51080 +
                     (C3548 + C3547) * C51079) *
                        C51049) *
                       C51083 -
                   ((((C117 * C2686 + C50907 * C2689) * C50752 +
                      (C117 * C2680 + C50907 * C2685) * C1109) *
                         C8156 +
                     (C3752 + C3751) * C51080 + (C3760 + C3759) * C51079) *
                        C50945 +
                    ((C9367 + C9366) * C8156 + (C3746 + C3745) * C51080 +
                     (C3758 + C3757) * C51079) *
                        C51049) *
                       C2103) *
                      C50848)) /
                (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C51079 +
             (C171 * C1109 + C172 * C50752) * C51080 +
             (C173 * C1109 + C174 * C50752) * C8156) *
                C51049 +
            ((C3547 + C3548) * C51079 + (C3549 + C3550) * C51080 +
             (C9212 + C9213) * C8156) *
                C50945) *
               C1687 -
           (((C9364 + C9365) * C8156 + (C3737 + C3738) * C51080 +
             (C3739 + C3740) * C51079) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C8156 +
             (C528 * C50752 + C527 * C1109) * C51080 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C51079) *
                C51049) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C51079 + (C3738 + C3737) * C51080 +
             (C9365 + C9364) * C8156) *
                C51049 +
            ((C3736 + C3735) * C51079 + (C3734 + C3733) * C51080 +
             (C9866 + C9867) * C8156) *
                C50945) *
               C50874 -
           (((C9214 + C9215) * C8156 + (C3554 + C3553) * C51080 +
             (C3552 + C3551) * C51079) *
                C50945 +
            ((C9213 + C9212) * C8156 + (C3550 + C3549) * C51080 +
             (C3548 + C3547) * C51079) *
                C51049) *
               C1687) *
              C281 +
          (((C3565 * C51079 + C3566 * C51080 + (C9215 + C9214) * C8156) *
                C51049 +
            ((C3558 + C3557) * C51079 + (C3556 + C3555) * C51080 +
             (C9216 + C9217) * C8156) *
                C50945) *
               C1687 -
           ((((C117 * C3232 + C50907 * C3235) * C50752 +
              (C117 * C3226 + C50907 * C3231) * C1109) *
                 C8156 +
             (C4311 + C4310) * C51080 + (C4318 + C4317) * C51079) *
                C50945 +
            ((C9867 + C9866) * C8156 + C4304 * C51080 + C4305 * C51079) *
                C51049) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C51079 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C51080 +
            (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C8156) *
               C51049 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C51079 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C51080 +
            (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C8156) *
               C50945) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C51079 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C51080 +
            (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
             C763 * C1037 - C764 * C1032) *
                C8156) *
               C51049 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C51079 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C51080 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50907 * C907) * C1037 -
             (C117 * C908 + C50907 * C913) * C1032) *
                C8156) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C51079 +
            (C171 * C1109 + C172 * C50752) * C51080 +
            (C173 * C1109 + C174 * C50752) * C8156) *
               C51049 +
           ((C3547 + C3548) * C51079 + (C3549 + C3550) * C51080 +
            (C9212 + C9213) * C8156) *
               C50945) *
              C1853 -
          (((C9364 + C9365) * C8156 + (C3737 + C3738) * C51080 +
            (C3739 + C3740) * C51079) *
               C50945 +
           ((C530 * C50752 + C529 * C1109) * C8156 +
            (C528 * C50752 + C527 * C1109) * C51080 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C51079) *
               C51049) *
              C1854 +
          ((((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C51079 +
            (C533 * C1109 + C534 * C50752) * C51080 +
            (C535 * C1109 + C536 * C50752) * C8156) *
               C51049 +
           ((C3757 + C3758) * C51079 + (C3745 + C3746) * C51080 +
            (C9366 + C9367) * C8156) *
               C50945) *
              C1855 -
          ((((C117 * C6268 + C50907 * C6269) * C50752 +
             (C117 * C6266 + C50907 * C6267) * C1109) *
                C8156 +
            ((C117 * C4716 + C50907 * C4722) * C50752 +
             (C117 * C4710 + C50907 * C4717) * C1109) *
                C51080 +
            ((C117 * C4718 + C50907 * C4723) * C50752 +
             (C117 * C4711 + C50907 * C4719) * C1109) *
                C51079) *
               C50945 +
           (((C117 * C1863 + C50907 * C1870) * C50752 +
             (C117 * C1858 + C50907 * C1864) * C1109) *
                C8156 +
            ((C117 * C1865 + C50907 * C1871) * C50752 +
             (C117 * C1859 + C50907 * C1866) * C1109) *
                C51080 +
            ((C117 * C1867 + C50907 * C1872) * C50752 +
             (C117 * C1860 + C50907 * C1868) * C1109) *
                C51079) *
               C51049) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C51079 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C51080 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C8156) *
               C51049 +
           ((C3907 + C3908 - C3909 - C3910) * C51079 +
            (C3911 + C3912 - C3913 - C3914) * C51080 +
            (C9514 + C9515 - C9516 - C9517) * C8156) *
               C50945) *
              C51083 +
          (((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C51079 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C51080 +
            (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                C8156) *
               C51049 +
           ((C4134 - (C4135 + C4136) + C4137) * C51079 +
            (C4138 - (C4139 + C4140) + C4141) * C51080 +
            (C9716 - (C9717 + C9718) + C9719) * C8156) *
               C50945) *
              C51084 +
          ((((C117 * C467 + C50907 * C482) * C49770 +
             (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
             C534 * C50757) *
                C51079 +
            (C533 * C49770 + C534 * C51021 - C535 * C49763 - C536 * C50757) *
                C51080 +
            (C535 * C49770 + C536 * C51021 - C537 * C49763 - C538 * C50757) *
                C8156) *
               C51049 +
           ((C3753 * C49770 + C3754 * C51021 - C2705 * C49763 -
             C2706 * C50757) *
                C51079 +
            (C2705 * C49770 + C2706 * C51021 - C8464 * C49763 -
             C8465 * C50757) *
                C51080 +
            (C8464 * C49770 + C8465 * C51021 -
             (C117 * C1224 + C50907 * C1229) * C49763 -
             (C117 * C1228 + C50907 * C1236) * C50757) *
                C8156) *
               C50945) *
              C2103) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C51079 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C51080 +
            (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C8156) *
               C51049 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C51079 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C51080 +
            (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C8156) *
               C50945) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C51079 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C51080 +
            (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
             C763 * C1037 - C764 * C1032) *
                C8156) *
               C51049 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C51079 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C51080 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50907 * C907) * C1037 -
             (C117 * C908 + C50907 * C913) * C1032) *
                C8156) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C51079 +
             (C171 * C1109 + C172 * C50752) * C51080 +
             (C173 * C1109 + C174 * C50752) * C8156) *
                C51049 +
            ((C3547 + C3548) * C51079 + (C3549 + C3550) * C51080 +
             (C9212 + C9213) * C8156) *
                C50945) *
               C1687 -
           (((C9364 + C9365) * C8156 + (C3737 + C3738) * C51080 +
             (C3739 + C3740) * C51079) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C8156 +
             (C528 * C50752 + C527 * C1109) * C51080 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C51079) *
                C51049) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C51079 + (C3738 + C3737) * C51080 +
             (C9365 + C9364) * C8156) *
                C51049 +
            ((C3736 + C3735) * C51079 + (C3734 + C3733) * C51080 +
             (C9866 + C9867) * C8156) *
                C50945) *
               C50874 -
           (((C9214 + C9215) * C8156 + (C3554 + C3553) * C51080 +
             (C3552 + C3551) * C51079) *
                C50945 +
            ((C9213 + C9212) * C8156 + (C3550 + C3549) * C51080 +
             (C3548 + C3547) * C51079) *
                C51049) *
               C1687) *
              C281 +
          (((C3565 * C51079 + C3566 * C51080 + (C9215 + C9214) * C8156) *
                C51049 +
            ((C3558 + C3557) * C51079 + (C3556 + C3555) * C51080 +
             (C9216 + C9217) * C8156) *
                C50945) *
               C1687 -
           ((((C117 * C3232 + C50907 * C3235) * C50752 +
              (C117 * C3226 + C50907 * C3231) * C1109) *
                 C8156 +
             (C4311 + C4310) * C51080 + (C4318 + C4317) * C51079) *
                C50945 +
            ((C9867 + C9866) * C8156 + C4304 * C51080 + C4305 * C51079) *
                C51049) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C641 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51077 -
             (C10878 + C10879) * C642 - (C10880 + C10881) * C51078 +
             C10894 * C643 + C10895 * C638) *
                C2300 +
            ((C10879 + C10878) * C641 + (C10881 + C10880) * C51077 -
             (C10883 + C10882) * C642 - (C10885 + C10884) * C51078 +
             (C10887 + C10886) * C643 + (C10889 + C10888) * C638) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C641 + (C13934 + C13935) * C51077 -
             C13908 * C642 - C13909 * C51078 + C14344 * C643 + C14345 * C638) *
                C2300 +
            (C13910 * C641 + C13911 * C51077 - C11432 * C642 - C11433 * C51078 +
             (C11443 + C11442) * C643 + (C11445 + C11444) * C638) *
                C50776) *
               C50945) *
              C50810 * C51036 +
          (((C13910 * C642 -
             ((C13935 + C13934) * C51077 + (C13933 + C13932) * C641) +
             C13911 * C51078 - C11432 * C643 - C11433 * C638) *
                C2300 +
            (C14344 * C642 - (C13909 * C51077 + C13908 * C641) +
             C14345 * C51078 - (C11442 + C11443) * C643 -
             (C11444 + C11445) * C638) *
                C50776) *
               C51049 +
           ((C13912 * C642 -
             ((C13936 + C13937) * C51077 + (C13938 + C13939) * C641) +
             C13921 * C51078 - (C11088 + C11089) * C643 -
             (C11090 + C11091) * C638) *
                C2300 +
            ((C11089 + C11088) * C642 - (C13922 * C51077 + C13923 * C641) +
             (C11091 + C11090) * C51078 -
             (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                 C643 -
             (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                 C638) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C283 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C278 -
              (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                 C2300 +
             ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
              (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                 C50776) *
                C51049 +
            (((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
              C13908 * C284 - C13909 * C50757) *
                 C2300 +
             (C13910 * C283 + C13911 * C278 - C11432 * C284 - C11433 * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C11270 + C11271) * C284 -
              ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                   C278 +
               (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                   C283) +
              (C11272 + C11273) * C50757) *
                 C2300 +
             ((C11274 + C11275) * C284 -
              ((C11273 + C11272) * C278 + (C11271 + C11270) * C283) +
              (C11276 + C11277) * C50757) *
                 C50776) *
                C51049 +
            ((C14798 * C284 -
              ((C14818 + C14819) * C278 + (C14820 + C14821) * C283) +
              C14807 * C50757) *
                 C2300 +
             ((C11821 + C11820) * C284 - (C14808 * C278 + C14809 * C283) +
              (C11823 + C11822) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C51036 +
          ((((C13910 * C284 -
              ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
              C13911 * C50757) *
                 C2300 +
             (C14344 * C284 - (C13909 * C278 + C13908 * C283) +
              C14345 * C50757) *
                 C50776) *
                C51049 +
            ((C13912 * C284 -
              ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
              C13921 * C50757) *
                 C2300 +
             ((C11089 + C11088) * C284 - (C13922 * C278 + C13923 * C283) +
              (C11091 + C11090) * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C14821 + C14820) * C283 + (C14819 + C14818) * C278 -
              C14809 * C284 - C14808 * C50757) *
                 C2300 +
             (C14798 * C283 + C14807 * C278 - (C11820 + C11821) * C284 -
              (C11822 + C11823) * C50757) *
                 C50776) *
                C51049 +
            (((C10843 * C1576 + C51050 * C1584 + C10844 * C2678 +
               C50971 * C2681) *
                  C283 +
              (C10843 * C1583 + C51050 * C1588 + C10844 * C2682 +
               C50971 * C2687) *
                  C278 -
              (C14822 + C14823) * C284 - (C14824 + C14825) * C50757) *
                 C2300 +
             ((C14823 + C14822) * C283 + (C14825 + C14824) * C278 -
              (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
               C51050 * C1580) *
                  C284 -
              (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
               C51050 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C283 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                C2300 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
             C13908 * C284 - C13909 * C50757) *
                C2300 +
            (C13910 * C283 + C13911 * C278 - C11432 * C284 - C11433 * C50757) *
                C50776) *
               C50945) *
              C50810 * C280 +
          (((C13910 * C284 -
             ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
             C13911 * C50757) *
                C2300 +
            ((C11080 + C11081) * C284 - (C13909 * C278 + C13908 * C283) +
             (C11082 + C11083) * C50757) *
                C50776) *
               C51049 +
           ((C13912 * C284 -
             ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
             C13921 * C50757) *
                C2300 +
            ((C11089 + C11088) * C284 - (C13922 * C278 + C13923 * C283) +
             (C11091 + C11090) * C50757) *
                C50776) *
               C50945) *
              C50810 * C281 +
          ((((C13939 + C13938) * C283 + (C13937 + C13936) * C278 -
             C13923 * C284 - C13922 * C50757) *
                C2300 +
            (C13912 * C283 + C13921 * C278 - (C11088 + C11089) * C284 -
             (C11090 + C11091) * C50757) *
                C50776) *
               C51049 +
           (((C10843 * C1113 + C51050 * C1121 + C10844 * C3224 +
              C50971 * C3227) *
                 C283 +
             (C10843 * C1120 + C51050 * C1125 + C10844 * C3228 +
              C50971 * C3233) *
                 C278 -
             (C13940 + C13941) * C284 - (C13942 + C13943) * C50757) *
                C2300 +
            ((C13941 + C13940) * C283 + (C13943 + C13942) * C278 -
             (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
              C51050 * C1117) *
                 C284 -
             (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
              C51050 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C118 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C106 -
            (C10878 + C10879) * C119 - (C10880 + C10881) * C107 +
            C10894 * C120 + C10895 * C108 - C10896 * C121 - C10897 * C109) *
               C2300 +
           ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
            (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
            (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
            (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
               C50776) *
              C51049 +
          (((C10843 * C286 + C51050 * C297 + C10844 * C894 + C50971 * C899) *
                C118 +
            (C10843 * C296 + C51050 * C315 + C10844 * C900 + C50971 * C909) *
                C106 -
            (C11077 + C11076) * C119 - (C11079 + C11078) * C107 +
            (C11080 + C11081) * C120 + (C11082 + C11083) * C108 -
            (C11442 + C11443) * C121 - (C11444 + C11445) * C109) *
               C2300 +
           ((C11076 + C11077) * C118 + (C11078 + C11079) * C106 -
            C11432 * C119 - C11433 * C107 + (C11443 + C11442) * C120 +
            (C11445 + C11444) * C108 -
            (C10844 * C898 + C50971 * C907 + C10843 * C289 + C51050 * C303) *
                C121 -
            (C10844 * C908 + C50971 * C913 + C10843 * C304 + C51050 * C319) *
                C109) *
               C50776) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C283 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                C2300 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
             C13908 * C284 - C13909 * C50757) *
                C2300 +
            (C13910 * C283 + C13911 * C278 - C11432 * C284 - C11433 * C50757) *
                C50776) *
               C50945) *
              C459 +
          ((((C11270 + C11271) * C284 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C278 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C283) +
             (C11272 + C11273) * C50757) *
                C2300 +
            ((C11274 + C11275) * C284 -
             ((C11273 + C11272) * C278 + (C11271 + C11270) * C283) +
             (C11276 + C11277) * C50757) *
                C50776) *
               C51049 +
           (((C11817 + C11816) * C284 -
             ((C10844 * C1234 + C50971 * C1239 + C10843 * C900 +
               C51050 * C909) *
                  C278 +
              (C10844 * C1227 + C50971 * C1235 + C10843 * C894 +
               C51050 * C899) *
                  C283) +
             (C11819 + C11818) * C50757) *
                C2300 +
            ((C11821 + C11820) * C284 -
             ((C11818 + C11819) * C278 + (C11816 + C11817) * C283) +
             (C11823 + C11822) * C50757) *
                C50776) *
               C50945) *
              C460 +
          ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C283 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C278 -
             (C11278 + C11279) * C284 - (C11280 + C11281) * C50757) *
                C2300 +
            ((C11279 + C11278) * C283 + (C11281 + C11280) * C278 -
             (C11282 + C11283) * C284 - (C11284 + C11285) * C50757) *
                C50776) *
               C51049 +
           (((C10843 * C1227 + C51050 * C1235 + C10844 * C4711 +
              C50971 * C4719) *
                 C283 +
             (C10843 * C1234 + C51050 * C1239 + C10844 * C4718 +
              C50971 * C4723) *
                 C278 -
             (C14146 + C14147) * C284 - (C14148 + C14149) * C50757) *
                C2300 +
            ((C14147 + C14146) * C283 + (C14149 + C14148) * C278 -
             (C10844 * C6266 + C50971 * C6267 + C10843 * C1225 +
              C51050 * C1231) *
                 C284 -
             (C10844 * C6268 + C50971 * C6269 + C10843 * C1230 +
              C51050 * C1237) *
                 C50757) *
                C50776) *
               C50945) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C641 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51077 -
             (C10878 + C10879) * C642 - (C10880 + C10881) * C51078 +
             C10894 * C643 + C10895 * C638) *
                C2300 +
            ((C10879 + C10878) * C641 + (C10881 + C10880) * C51077 -
             (C10883 + C10882) * C642 - (C10885 + C10884) * C51078 +
             (C10887 + C10886) * C643 + (C10889 + C10888) * C638) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C641 + (C13934 + C13935) * C51077 -
             C13908 * C642 - C13909 * C51078 + C14344 * C643 + C14345 * C638) *
                C2300 +
            (C13910 * C641 + C13911 * C51077 - C11432 * C642 - C11433 * C51078 +
             (C11443 + C11442) * C643 + (C11445 + C11444) * C638) *
                C50776) *
               C50945) *
              C51037 +
          ((((C11270 + C11271) * C642 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C51077 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C641) +
             (C11272 + C11273) * C51078 - C11592 * C643 - C11593 * C638) *
                C2300 +
            ((C11274 + C11275) * C642 -
             ((C11273 + C11272) * C51077 + (C11271 + C11270) * C641) +
             (C11276 + C11277) * C51078 - (C11602 + C11603) * C643 -
             (C11604 + C11605) * C638) *
                C50776) *
               C51049 +
           (((C11817 + C11816) * C642 -
             ((C10844 * C1234 + C50971 * C1239 + C10843 * C900 +
               C51050 * C909) *
                  C51077 +
              (C10844 * C1227 + C50971 * C1235 + C10843 * C894 +
               C51050 * C899) *
                  C641) +
             (C11819 + C11818) * C51078 - (C11820 + C11821) * C643 -
             (C11822 + C11823) * C638) *
                C2300 +
            ((C11821 + C11820) * C642 -
             ((C11818 + C11819) * C51077 + (C11816 + C11817) * C641) +
             (C11823 + C11822) * C51078 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C643 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C638) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C118 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C106 -
            (C10878 + C10879) * C119 - (C10880 + C10881) * C107 +
            C10894 * C120 + C10895 * C108 - C10896 * C121 - C10897 * C109) *
               C2300 +
           ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
            (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
            (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
            (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
               C50776) *
              C51049 +
          (((C10843 * C286 + C51050 * C297 + C10844 * C894 + C50971 * C899) *
                C118 +
            (C10843 * C296 + C51050 * C315 + C10844 * C900 + C50971 * C909) *
                C106 -
            (C11077 + C11076) * C119 - (C11079 + C11078) * C107 +
            (C11080 + C11081) * C120 + (C11082 + C11083) * C108 -
            (C11442 + C11443) * C121 - (C11444 + C11445) * C109) *
               C2300 +
           ((C11076 + C11077) * C118 + (C11078 + C11079) * C106 -
            C11432 * C119 - C11433 * C107 + (C11443 + C11442) * C120 +
            (C11445 + C11444) * C108 -
            (C10844 * C898 + C50971 * C907 + C10843 * C289 + C51050 * C303) *
                C121 -
            (C10844 * C908 + C50971 * C913 + C10843 * C304 + C51050 * C319) *
                C109) *
               C50776) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C283 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                C2300 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
             C13908 * C284 - C13909 * C50757) *
                C2300 +
            (C13910 * C283 + C13911 * C278 - C11432 * C284 - C11433 * C50757) *
                C50776) *
               C50945) *
              C50810 * C280 +
          (((C13910 * C284 -
             ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
             C13911 * C50757) *
                C2300 +
            ((C11080 + C11081) * C284 - (C13909 * C278 + C13908 * C283) +
             (C11082 + C11083) * C50757) *
                C50776) *
               C51049 +
           ((C13912 * C284 -
             ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
             C13921 * C50757) *
                C2300 +
            ((C11089 + C11088) * C284 - (C13922 * C278 + C13923 * C283) +
             (C11091 + C11090) * C50757) *
                C50776) *
               C50945) *
              C50810 * C281 +
          ((((C13939 + C13938) * C283 + (C13937 + C13936) * C278 -
             C13923 * C284 - C13922 * C50757) *
                C2300 +
            (C13912 * C283 + C13921 * C278 - (C11088 + C11089) * C284 -
             (C11090 + C11091) * C50757) *
                C50776) *
               C51049 +
           (((C10843 * C1113 + C51050 * C1121 + C10844 * C3224 +
              C50971 * C3227) *
                 C283 +
             (C10843 * C1120 + C51050 * C1125 + C10844 * C3228 +
              C50971 * C3233) *
                 C278 -
             (C13940 + C13941) * C284 - (C13942 + C13943) * C50757) *
                C2300 +
            ((C13941 + C13940) * C283 + (C13943 + C13942) * C278 -
             (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
              C51050 * C1117) *
                 C284 -
             (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
              C51050 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C49770 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51021 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                C2300 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
             C13908 * C49763 - C13909 * C50757) *
                C2300 +
            (C13910 * C49770 + C13911 * C51021 - C11432 * C49763 -
             C11433 * C50757) *
                C50776) *
               C50945) *
              C50810 * C51081 +
          (((C13910 * C49763 -
             ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
             C13911 * C50757) *
                C2300 +
            (C14344 * C49763 - (C13909 * C51021 + C13908 * C49770) +
             C14345 * C50757) *
                C50776) *
               C51049 +
           ((C13912 * C49763 -
             ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
             C13921 * C50757) *
                C2300 +
            ((C11089 + C11088) * C49763 - (C13922 * C51021 + C13923 * C49770) +
             (C11091 + C11090) * C50757) *
                C50776) *
               C50945) *
              C50810 * C51082 +
          ((((C13939 + C13938) * C49770 + (C13937 + C13936) * C51021 -
             C13923 * C49763 - C13922 * C50757) *
                C2300 +
            (C13912 * C49770 + C13921 * C51021 - (C11088 + C11089) * C49763 -
             (C11090 + C11091) * C50757) *
                C50776) *
               C51049 +
           (((C15158 + C15159) * C49770 + (C15160 + C15161) * C51021 -
             (C13940 + C13941) * C49763 - (C13942 + C13943) * C50757) *
                C2300 +
            ((C13941 + C13940) * C49770 + (C13943 + C13942) * C51021 -
             (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
              C51050 * C1117) *
                 C49763 -
             (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
              C51050 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C2300 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C51049 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C2300 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C51037 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C2300) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C2300) *
                C51049) *
               C50874) *
              C51081 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C2300 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C51049 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C2300 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C2300) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C2300) *
                C51049) *
               C51037) *
              C51082 +
          (((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C2300 +
             (C13912 * C1109 + C13921 * C50752) * C50776) *
                C51049 +
            (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C2300 +
             ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) *
                 C50776) *
                C50945) *
               C51037 -
           ((((C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
               C51050 * C3234) *
                  C50752 +
              (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
               C51050 * C3229) *
                  C1109) *
                 C50776 +
             ((C10844 * C3728 + C50971 * C3731 + C10843 * C3228 +
               C51050 * C3233) *
                  C50752 +
              (C10844 * C3725 + C50971 * C3729 + C10843 * C3224 +
               C51050 * C3227) *
                  C1109) *
                 C2300) *
                C50945 +
            (((C14824 + C14825) * C50752 + (C14822 + C14823) * C1109) * C50776 +
             ((C16025 + C16024) * C50752 + (C16023 + C16022) * C1109) * C2300) *
                C51049) *
               C50874) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C2300 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C50776) *
               C51049 +
           (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C2300 +
            (C13910 * C1109 + C13911 * C50752) * C50776) *
               C50945) *
              C50810 * C1105 -
          (((C13922 * C50752 + C13923 * C1109) * C50776 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C2300) *
               C50945 +
           ((C13909 * C50752 + C13908 * C1109) * C50776 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C2300) *
               C51049) *
              C50810 * C1106 +
          ((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C2300 +
            (C13912 * C1109 + C13921 * C50752) * C50776) *
               C51049 +
           (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C2300 +
            ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) * C50776) *
               C50945) *
              C50810 * C1107 -
          ((((C10844 * C4297 + C50971 * C4301 + C10843 * C2457 +
              C51050 * C2461) *
                 C50752 +
             (C10844 * C4295 + C50971 * C4298 + C10843 * C2452 +
              C51050 * C2456) *
                 C1109) *
                C50776 +
            ((C10844 * C4299 + C50971 * C4302 + C10843 * C2455 +
              C51050 * C2460) *
                 C50752 +
             (C10844 * C4296 + C50971 * C4300 + C10843 * C2451 +
              C51050 * C2454) *
                 C1109) *
                C2300) *
               C50945 +
           (((C13942 + C13943) * C50752 + (C13940 + C13941) * C1109) * C50776 +
            ((C15161 + C15160) * C50752 + (C15159 + C15158) * C1109) * C2300) *
               C51049) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1035 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C1030 -
             (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
             C10894 * C1037 + C10895 * C1032) *
                C2300 +
            ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
             (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
             (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
             C13908 * C1036 - C13909 * C1031 + C14344 * C1037 +
             C14345 * C1032) *
                C2300 +
            (C13910 * C1035 + C13911 * C1030 - C11432 * C1036 - C11433 * C1031 +
             (C11443 + C11442) * C1037 + (C11445 + C11444) * C1032) *
                C50776) *
               C50945) *
              C50810 * C1033 +
          (((C13910 * C1036 -
             ((C13935 + C13934) * C1030 + (C13933 + C13932) * C1035) +
             C13911 * C1031 - C11432 * C1037 - C11433 * C1032) *
                C2300 +
            (C14344 * C1036 - (C13909 * C1030 + C13908 * C1035) +
             C14345 * C1031 - (C11442 + C11443) * C1037 -
             (C11444 + C11445) * C1032) *
                C50776) *
               C51049 +
           ((C13912 * C1036 -
             ((C13936 + C13937) * C1030 + (C13938 + C13939) * C1035) +
             C13921 * C1031 - (C11088 + C11089) * C1037 -
             (C11090 + C11091) * C1032) *
                C2300 +
            ((C11089 + C11088) * C1036 - (C13922 * C1030 + C13923 * C1035) +
             (C11091 + C11090) * C1031 -
             (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                 C1037 -
             (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                 C1032) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C2300 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C51049 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C2300 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C459 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C2300) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C2300) *
                C51049) *
               C460 +
           ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 +
               C50971 * C1868) *
                  C1109 +
              (C10843 * C483 + C51050 * C497 + C10844 * C1867 +
               C50971 * C1872) *
                  C50752) *
                 C2300 +
             ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) *
                 C50776) *
                C51049 +
            (((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C2300 +
             ((C14147 + C14146) * C1109 + (C14149 + C14148) * C50752) *
                 C50776) *
                C50945) *
               C461) *
              C1033 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C2300 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C51049 +
            (((C10843 * C1576 + C51050 * C1584 + C10844 * C2678 +
               C50971 * C2681) *
                  C1109 +
              (C10843 * C1583 + C51050 * C1588 + C10844 * C2682 +
               C50971 * C2687) *
                  C50752) *
                 C2300 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C460 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C2300) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C2300) *
                C51049) *
               C459 -
           ((((C10844 * C4712 + C50971 * C4720 + C10843 * C2684 +
               C51050 * C2688) *
                  C50752 +
              (C10844 * C4708 + C50971 * C4713 + C10843 * C2679 +
               C51050 * C2683) *
                  C1109) *
                 C50776 +
             ((C10844 * C4714 + C50971 * C4721 + C10843 * C2682 +
               C51050 * C2687) *
                  C50752 +
              (C10844 * C4709 + C50971 * C4715 + C10843 * C2678 +
               C51050 * C2681) *
                  C1109) *
                 C2300) *
                C50945 +
            (((C14148 + C14149) * C50752 + (C14146 + C14147) * C1109) * C50776 +
             ((C15367 + C15366) * C50752 + (C15365 + C15364) * C1109) * C2300) *
                C51049) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C49770 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C51021 -
              (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                 C2300 +
             ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
              (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                 C50776) *
                C51049 +
            (((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
              C13908 * C49763 - C13909 * C50757) *
                 C2300 +
             (C13910 * C49770 + C13911 * C51021 - C11432 * C49763 -
              C11433 * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C11270 + C11271) * C49763 -
              ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                   C51021 +
               (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                   C49770) +
              (C11272 + C11273) * C50757) *
                 C2300 +
             ((C11274 + C11275) * C49763 -
              ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
              (C11276 + C11277) * C50757) *
                 C50776) *
                C51049 +
            ((C14798 * C49763 -
              ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
              C14807 * C50757) *
                 C2300 +
             ((C11821 + C11820) * C49763 - (C14808 * C51021 + C14809 * C49770) +
              (C11823 + C11822) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C1033 +
          ((((C13910 * C49763 -
              ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
              C13911 * C50757) *
                 C2300 +
             (C14344 * C49763 - (C13909 * C51021 + C13908 * C49770) +
              C14345 * C50757) *
                 C50776) *
                C51049 +
            ((C13912 * C49763 -
              ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
              C13921 * C50757) *
                 C2300 +
             ((C11089 + C11088) * C49763 - (C13922 * C51021 + C13923 * C49770) +
              (C11091 + C11090) * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C14821 + C14820) * C49770 + (C14819 + C14818) * C51021 -
              C14809 * C49763 - C14808 * C50757) *
                 C2300 +
             (C14798 * C49770 + C14807 * C51021 - (C11820 + C11821) * C49763 -
              (C11822 + C11823) * C50757) *
                 C50776) *
                C51049 +
            (((C10843 * C1576 + C51050 * C1584 + C10844 * C2678 +
               C50971 * C2681) *
                  C49770 +
              (C10843 * C1583 + C51050 * C1588 + C10844 * C2682 +
               C50971 * C2687) *
                  C51021 -
              (C14822 + C14823) * C49763 - (C14824 + C14825) * C50757) *
                 C2300 +
             ((C14823 + C14822) * C49770 + (C14825 + C14824) * C51021 -
              (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
               C51050 * C1580) *
                  C49763 -
              (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
               C51050 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1035 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C1030 -
             (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
             C10894 * C1037 + C10895 * C1032) *
                C2300 +
            ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
             (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
             (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
             C13908 * C1036 - C13909 * C1031 + C14344 * C1037 +
             C14345 * C1032) *
                C2300 +
            (C13910 * C1035 + C13911 * C1030 - C11432 * C1036 - C11433 * C1031 +
             (C11443 + C11442) * C1037 + (C11445 + C11444) * C1032) *
                C50776) *
               C50945) *
              C50810 * C1033 +
          (((C13910 * C1036 -
             ((C13935 + C13934) * C1030 + (C13933 + C13932) * C1035) +
             C13911 * C1031 - C11432 * C1037 - C11433 * C1032) *
                C2300 +
            (C14344 * C1036 - (C13909 * C1030 + C13908 * C1035) +
             C14345 * C1031 - (C11442 + C11443) * C1037 -
             (C11444 + C11445) * C1032) *
                C50776) *
               C51049 +
           ((C13912 * C1036 -
             ((C13936 + C13937) * C1030 + (C13938 + C13939) * C1035) +
             C13921 * C1031 - (C11088 + C11089) * C1037 -
             (C11090 + C11091) * C1032) *
                C2300 +
            ((C11089 + C11088) * C1036 - (C13922 * C1030 + C13923 * C1035) +
             (C11091 + C11090) * C1031 -
             (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                 C1037 -
             (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                 C1032) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C2300 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C50776) *
               C51049 +
           (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C2300 +
            (C13910 * C1109 + C13911 * C50752) * C50776) *
               C50945) *
              C50810 * C1105 -
          (((C13922 * C50752 + C13923 * C1109) * C50776 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C2300) *
               C50945 +
           ((C13909 * C50752 + C13908 * C1109) * C50776 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C2300) *
               C51049) *
              C50810 * C1106 +
          ((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C2300 +
            (C13912 * C1109 + C13921 * C50752) * C50776) *
               C51049 +
           (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C2300 +
            ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) * C50776) *
               C50945) *
              C50810 * C1107 -
          ((((C10844 * C4297 + C50971 * C4301 + C10843 * C2457 +
              C51050 * C2461) *
                 C50752 +
             (C10844 * C4295 + C50971 * C4298 + C10843 * C2452 +
              C51050 * C2456) *
                 C1109) *
                C50776 +
            ((C10844 * C4299 + C50971 * C4302 + C10843 * C2455 +
              C51050 * C2460) *
                 C50752 +
             (C10844 * C4296 + C50971 * C4300 + C10843 * C2451 +
              C51050 * C2454) *
                 C1109) *
                C2300) *
               C50945 +
           (((C13942 + C13943) * C50752 + (C13940 + C13941) * C1109) * C50776 +
            ((C15161 + C15160) * C50752 + (C15159 + C15158) * C1109) * C2300) *
               C51049) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C49770 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C51021 -
              (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                 C2300 +
             ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
              (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                 C50776) *
                C51049 +
            (((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
              C13908 * C49763 - C13909 * C50757) *
                 C2300 +
             (C13910 * C49770 + C13911 * C51021 - C11432 * C49763 -
              C11433 * C50757) *
                 C50776) *
                C50945) *
               C1687 +
           ((((C11270 + C11271) * C49763 -
              ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                   C51021 +
               (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                   C49770) +
              (C11272 + C11273) * C50757) *
                 C2300 +
             ((C11274 + C11275) * C49763 -
              ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
              (C11276 + C11277) * C50757) *
                 C50776) *
                C51049 +
            ((C14798 * C49763 -
              ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
              C14807 * C50757) *
                 C2300 +
             ((C11821 + C11820) * C49763 - (C14808 * C51021 + C14809 * C49770) +
              (C11823 + C11822) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C51036 +
          ((((C13910 * C49763 -
              ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
              C13911 * C50757) *
                 C2300 +
             (C14344 * C49763 - (C13909 * C51021 + C13908 * C49770) +
              C14345 * C50757) *
                 C50776) *
                C51049 +
            ((C13912 * C49763 -
              ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
              C13921 * C50757) *
                 C2300 +
             ((C11089 + C11088) * C49763 - (C13922 * C51021 + C13923 * C49770) +
              (C11091 + C11090) * C50757) *
                 C50776) *
                C50945) *
               C1687 +
           ((((C14821 + C14820) * C49770 + (C14819 + C14818) * C51021 -
              C14809 * C49763 - C14808 * C50757) *
                 C2300 +
             (C14798 * C49770 + C14807 * C51021 - (C11820 + C11821) * C49763 -
              (C11822 + C11823) * C50757) *
                 C50776) *
                C51049 +
            (((C16022 + C16023) * C49770 + (C16024 + C16025) * C51021 -
              (C14822 + C14823) * C49763 - (C14824 + C14825) * C50757) *
                 C2300 +
             ((C14823 + C14822) * C49770 + (C14825 + C14824) * C51021 -
              (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
               C51050 * C1580) *
                  C49763 -
              (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
               C51050 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C2300 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C51049 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C2300 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C51083 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C2300) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C2300) *
                C51049) *
               C51084 +
           ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 +
               C50971 * C1868) *
                  C1109 +
              (C10843 * C483 + C51050 * C497 + C10844 * C1867 +
               C50971 * C1872) *
                  C50752) *
                 C2300 +
             ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) *
                 C50776) *
                C51049 +
            (((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C2300 +
             ((C14147 + C14146) * C1109 + (C14149 + C14148) * C50752) *
                 C50776) *
                C50945) *
               C2103) *
              C51036 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C2300 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C51049 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C2300 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C51084 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C2300) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C2300) *
                C51049) *
               C51083 -
           ((((C10844 * C4712 + C50971 * C4720 + C10843 * C2684 +
               C51050 * C2688) *
                  C50752 +
              (C10844 * C4708 + C50971 * C4713 + C10843 * C2679 +
               C51050 * C2683) *
                  C1109) *
                 C50776 +
             ((C10844 * C4714 + C50971 * C4721 + C10843 * C2682 +
               C51050 * C2687) *
                  C50752 +
              (C10844 * C4709 + C50971 * C4715 + C10843 * C2678 +
               C51050 * C2681) *
                  C1109) *
                 C2300) *
                C50945 +
            (((C14148 + C14149) * C50752 + (C14146 + C14147) * C1109) * C50776 +
             ((C15367 + C15366) * C50752 + (C15365 + C15364) * C1109) * C2300) *
                C51049) *
               C2103) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C2300 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C51049 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C2300 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C1687 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C2300) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C2300) *
                C51049) *
               C50874) *
              C280 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C2300 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C51049 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C2300 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C2300) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C2300) *
                C51049) *
               C1687) *
              C281 +
          (((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C2300 +
             (C13912 * C1109 + C13921 * C50752) * C50776) *
                C51049 +
            (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C2300 +
             ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) *
                 C50776) *
                C50945) *
               C1687 -
           ((((C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
               C51050 * C3234) *
                  C50752 +
              (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
               C51050 * C3229) *
                  C1109) *
                 C50776 +
             ((C10844 * C3728 + C50971 * C3731 + C10843 * C3228 +
               C51050 * C3233) *
                  C50752 +
              (C10844 * C3725 + C50971 * C3729 + C10843 * C3224 +
               C51050 * C3227) *
                  C1109) *
                 C2300) *
                C50945 +
            (((C14824 + C14825) * C50752 + (C14822 + C14823) * C1109) * C50776 +
             ((C16025 + C16024) * C50752 + (C16023 + C16022) * C1109) * C2300) *
                C51049) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1035 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C1030 -
             (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
             C10894 * C1037 + C10895 * C1032) *
                C2300 +
            ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
             (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
             (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
             C13908 * C1036 - C13909 * C1031 + C14344 * C1037 +
             C14345 * C1032) *
                C2300 +
            (C13910 * C1035 + C13911 * C1030 - C11432 * C1036 - C11433 * C1031 +
             (C11443 + C11442) * C1037 + (C11445 + C11444) * C1032) *
                C50776) *
               C50945) *
              C1687 +
          ((((C11270 + C11271) * C1036 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C1030 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1035) +
             (C11272 + C11273) * C1031 - C11592 * C1037 - C11593 * C1032) *
                C2300 +
            ((C11274 + C11275) * C1036 -
             ((C11273 + C11272) * C1030 + (C11271 + C11270) * C1035) +
             (C11276 + C11277) * C1031 - (C11602 + C11603) * C1037 -
             (C11604 + C11605) * C1032) *
                C50776) *
               C51049 +
           ((C14798 * C1036 -
             ((C14818 + C14819) * C1030 + (C14820 + C14821) * C1035) +
             C14807 * C1031 - (C11820 + C11821) * C1037 -
             (C11822 + C11823) * C1032) *
                C2300 +
            ((C11821 + C11820) * C1036 - (C14808 * C1030 + C14809 * C1035) +
             (C11823 + C11822) * C1031 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C1037 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C1032) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C2300 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C50776) *
               C51049 +
           (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C2300 +
            (C13910 * C1109 + C13911 * C50752) * C50776) *
               C50945) *
              C1853 -
          (((C14808 * C50752 + C14809 * C1109) * C50776 +
            ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C2300) *
               C50945 +
           (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C2300) *
               C51049) *
              C1854 +
          ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C1109 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C50752) *
                C2300 +
            ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) * C50776) *
               C51049 +
           (((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C2300 +
            ((C14147 + C14146) * C1109 + (C14149 + C14148) * C50752) * C50776) *
               C50945) *
              C1855 -
          ((((C10844 * C6680 + C50971 * C6684 + C10843 * C4716 +
              C51050 * C4722) *
                 C50752 +
             (C10844 * C6678 + C50971 * C6681 + C10843 * C4710 +
              C51050 * C4717) *
                 C1109) *
                C50776 +
            ((C10844 * C6682 + C50971 * C6685 + C10843 * C4718 +
              C51050 * C4723) *
                 C50752 +
             (C10844 * C6679 + C50971 * C6683 + C10843 * C4711 +
              C51050 * C4719) *
                 C1109) *
                C2300) *
               C50945 +
           (((C10844 * C5702 + C50971 * C5706 + C10843 * C1865 +
              C51050 * C1871) *
                 C50752 +
             (C10844 * C5697 + C50971 * C5701 + C10843 * C1859 +
              C51050 * C1866) *
                 C1109) *
                C50776 +
            ((C10844 * C5700 + C50971 * C5705 + C10843 * C1867 +
              C51050 * C1872) *
                 C50752 +
             (C10844 * C5696 + C50971 * C5699 + C10843 * C1860 +
              C51050 * C1868) *
                 C1109) *
                C2300) *
               C51049) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C49770 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51021 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                C2300 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
             C13908 * C49763 - C13909 * C50757) *
                C2300 +
            (C13910 * C49770 + C13911 * C51021 - C11432 * C49763 -
             C11433 * C50757) *
                C50776) *
               C50945) *
              C51083 +
          ((((C11270 + C11271) * C49763 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C51021 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C49770) +
             (C11272 + C11273) * C50757) *
                C2300 +
            ((C11274 + C11275) * C49763 -
             ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
             (C11276 + C11277) * C50757) *
                C50776) *
               C51049 +
           ((C14798 * C49763 -
             ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
             C14807 * C50757) *
                C2300 +
            ((C11821 + C11820) * C49763 - (C14808 * C51021 + C14809 * C49770) +
             (C11823 + C11822) * C50757) *
                C50776) *
               C50945) *
              C51084 +
          ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C49770 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C51021 -
             (C11278 + C11279) * C49763 - (C11280 + C11281) * C50757) *
                C2300 +
            ((C11279 + C11278) * C49770 + (C11281 + C11280) * C51021 -
             (C11282 + C11283) * C49763 - (C11284 + C11285) * C50757) *
                C50776) *
               C51049 +
           (((C15364 + C15365) * C49770 + (C15366 + C15367) * C51021 -
             (C14146 + C14147) * C49763 - (C14148 + C14149) * C50757) *
                C2300 +
            ((C14147 + C14146) * C49770 + (C14149 + C14148) * C51021 -
             (C10844 * C6266 + C50971 * C6267 + C10843 * C1225 +
              C51050 * C1231) *
                 C49763 -
             (C10844 * C6268 + C50971 * C6269 + C10843 * C1230 +
              C51050 * C1237) *
                 C50757) *
                C50776) *
               C50945) *
              C2103) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1035 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C1030 -
             (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
             C10894 * C1037 + C10895 * C1032) *
                C2300 +
            ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
             (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
             (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
                C50776) *
               C51049 +
           (((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
             C13908 * C1036 - C13909 * C1031 + C14344 * C1037 +
             C14345 * C1032) *
                C2300 +
            (C13910 * C1035 + C13911 * C1030 - C11432 * C1036 - C11433 * C1031 +
             (C11443 + C11442) * C1037 + (C11445 + C11444) * C1032) *
                C50776) *
               C50945) *
              C1687 +
          ((((C11270 + C11271) * C1036 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C1030 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1035) +
             (C11272 + C11273) * C1031 - C11592 * C1037 - C11593 * C1032) *
                C2300 +
            ((C11274 + C11275) * C1036 -
             ((C11273 + C11272) * C1030 + (C11271 + C11270) * C1035) +
             (C11276 + C11277) * C1031 - (C11602 + C11603) * C1037 -
             (C11604 + C11605) * C1032) *
                C50776) *
               C51049 +
           ((C14798 * C1036 -
             ((C14818 + C14819) * C1030 + (C14820 + C14821) * C1035) +
             C14807 * C1031 - (C11820 + C11821) * C1037 -
             (C11822 + C11823) * C1032) *
                C2300 +
            ((C11821 + C11820) * C1036 - (C14808 * C1030 + C14809 * C1035) +
             (C11823 + C11822) * C1031 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C1037 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C1032) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C2300 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C51049 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C2300 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C1687 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C2300) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C2300) *
                C51049) *
               C50874) *
              C280 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C2300 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C51049 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C2300 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C2300) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C2300) *
                C51049) *
               C1687) *
              C281 +
          (((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C2300 +
             (C13912 * C1109 + C13921 * C50752) * C50776) *
                C51049 +
            (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C2300 +
             ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) *
                 C50776) *
                C50945) *
               C1687 -
           ((((C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
               C51050 * C3234) *
                  C50752 +
              (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
               C51050 * C3229) *
                  C1109) *
                 C50776 +
             ((C10844 * C3728 + C50971 * C3731 + C10843 * C3228 +
               C51050 * C3233) *
                  C50752 +
              (C10844 * C3725 + C50971 * C3729 + C10843 * C3224 +
               C51050 * C3227) *
                  C1109) *
                 C2300) *
                C50945 +
            (((C14824 + C14825) * C50752 + (C14822 + C14823) * C1109) * C50776 +
             ((C16025 + C16024) * C50752 + (C16023 + C16022) * C1109) * C2300) *
                C51049) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C641 +
             (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
             C172 * C51078 + C173 * C643 + C174 * C638) *
                C2300 +
            (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
             C175 * C643 + C176 * C638) *
                C50776) *
               C2302 +
           ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C2300 +
            (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C50776) *
               C2303 +
           ((C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C2300 +
            (C2873 + C2874 - C2875 - C2876 + C2877 + C2878) * C50776) *
               C2304) *
              C50810 * C51036 +
          (((C2857 - (C2856 + C2855) + C2858 - C2859 - C2860) * C2300 +
            (C2863 - (C2862 + C2861) + C2864 - C2865 - C2866) * C50776) *
               C2302 +
           ((C2869 - (C2868 + C2867) + C2870 - C2871 - C2872) * C2300 +
            (C2875 - (C2874 + C2873) + C2876 - C2877 - C2878) * C50776) *
               C2303 +
           ((C2505 * C642 - (C2506 * C51077 + C2507 * C641) + C2508 * C51078 -
             C2509 * C643 - C2510 * C638) *
                C2300 +
            (C2509 * C642 - (C2508 * C51077 + C2505 * C641) + C2510 * C51078 -
             (C117 * C1110 + C50907 * C1115) * C643 -
             (C117 * C1114 + C50907 * C1122) * C638) *
                C50776) *
               C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C641 +
            (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
            C172 * C51078 + C173 * C643 + C174 * C638) *
               C110 +
           (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
            C175 * C643 + C176 * C638) *
               C111 +
           (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
            C177 * C643 + C178 * C638) *
               C112 +
           (C175 * C641 + C176 * C51077 - C177 * C642 - C178 * C51078 +
            C179 * C643 + C180 * C638) *
               C113) *
              C50896 * C50810 * C51036 +
          ((C350 * C642 -
            ((C117 * C296 + C50907 * C315) * C51077 +
             (C117 * C286 + C50907 * C297) * C641) +
            C351 * C51078 - C352 * C643 - C353 * C638) *
               C110 +
           (C352 * C642 - (C351 * C51077 + C350 * C641) + C353 * C51078 -
            C354 * C643 - C355 * C638) *
               C111 +
           (C354 * C642 - (C353 * C51077 + C352 * C641) + C355 * C51078 -
            C653 * C643 - C654 * C638) *
               C112 +
           (C653 * C642 - (C355 * C51077 + C354 * C641) + C654 * C51078 -
            (C117 * C644 + C50907 * C645) * C643 -
            (C117 * C646 + C50907 * C647) * C638) *
               C113) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C641 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C51077 -
            (C5351 + C5352 + C5353) * C642 - (C5354 + C5355 + C5356) * C51078 +
            (C5357 + C5358 + C5359) * C643 + (C5360 + C5361 + C5362) * C638) *
               C2300 +
           ((C5353 + C5352 + C5351) * C641 + (C5356 + C5355 + C5354) * C51077 -
            (C5359 + C5358 + C5357) * C642 - (C5362 + C5361 + C5360) * C51078 +
            (C5365 + C5364 + C5363) * C643 + (C5368 + C5367 + C5366) * C638) *
               C50776) *
              C50896 * C50810 * C51036 +
          (((C5539 + C5540 + C5541) * C642 -
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C51077 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C641) +
            (C5542 + C5543 + C5544) * C51078 - (C5903 + C5904 + C5905) * C643 -
            (C5906 + C5907 + C5908) * C638) *
               C2300 +
           ((C5905 + C5904 + C5903) * C642 -
            ((C5544 + C5543 + C5542) * C51077 +
             (C5541 + C5540 + C5539) * C641) +
            (C5908 + C5907 + C5906) * C51078 -
            (C5313 * C1224 + C5310 * C1229 + C5312 * C897 + C5309 * C905 +
             C5311 * C288 + C5308 * C301) *
                C643 -
            (C5313 * C1228 + C5310 * C1236 + C5312 * C906 + C5309 * C912 +
             C5311 * C302 + C5308 * C318) *
                C638) *
               C50776) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C283 +
              (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
              C172 * C50757) *
                 C2300 +
             (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                 C50776) *
                C2302 +
            ((C2513 + C2514 - C2468 - C2469) * C2300 +
             (C2470 + C2471 - C2472 - C2473) * C50776) *
                C2303 +
            C2532 * C2304) *
               C51037 +
           (((C527 * C284 -
              ((C117 * C473 + C50907 * C492) * C278 +
               (C117 * C463 + C50907 * C474) * C283) +
              C528 * C50757) *
                 C2300 +
             (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                 C50776) *
                C2302 +
            ((C3237 - (C3267 + C3268) + C3242) * C2300 +
             (C3243 - (C3244 + C3245) + C3246) * C50776) *
                C2303 +
            ((C3247 - (C3269 + C3270) + C3252) * C2300 +
             (C3253 - (C3254 + C3255) + C3256) * C50776) *
                C2304) *
               C50874) *
              C51036 +
          ((((C2468 - (C2514 + C2513) + C2469) * C2300 +
             (C2472 - (C2471 + C2470) + C2473) * C50776) *
                C2302 +
            ((C2478 - (C2516 + C2515) + C2479) * C2300 +
             (C2482 - (C2481 + C2480) + C2483) * C50776) *
                C2303 +
            ((C2518 - (C2519 + C2520) + C2521) * C2300 +
             (C2522 - (C2523 + C2524) + C2525) * C50776) *
                C2304) *
               C51037 +
           (((C3268 + C3267 - C3237 - C3242) * C2300 +
             (C3245 + C3244 - C3243 - C3246) * C50776) *
                C2302 +
            ((C3270 + C3269 - C3247 - C3252) * C2300 +
             (C3255 + C3254 - C3253 - C3256) * C50776) *
                C2303 +
            (((C117 * C3224 + C50907 * C3227) * C283 +
              (C117 * C3228 + C50907 * C3233) * C278 - C3265 * C284 -
              C3266 * C50757) *
                 C2300 +
             (C3265 * C283 + C3266 * C278 -
              (C117 * C3226 + C50907 * C3231) * C284 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C110 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C111 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C112 +
            (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50757) * C113) *
               C50896 * C51037 +
           ((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C110 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) * C111 +
            (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) * C112 +
            (C763 * C284 - (C532 * C278 + C531 * C283) + C764 * C50757) *
                C113) *
               C50896 * C50874) *
              C51036 +
          (((C350 * C284 -
             ((C117 * C296 + C50907 * C315) * C278 +
              (C117 * C286 + C50907 * C297) * C283) +
             C351 * C50757) *
                C110 +
            (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50757) * C111 +
            (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50757) * C112 +
            (C653 * C284 - (C355 * C278 + C354 * C283) + C654 * C50757) *
                C113) *
               C50896 * C51037 +
           (((C117 * C894 + C50907 * C899) * C283 +
             (C117 * C900 + C50907 * C909) * C278 - C927 * C284 -
             C928 * C50757) *
                C110 +
            (C927 * C283 + C928 * C278 - C929 * C284 - C930 * C50757) * C111 +
            (C929 * C283 + C930 * C278 - C931 * C284 - C932 * C50757) * C112 +
            (C931 * C283 + C932 * C278 - (C117 * C898 + C50907 * C907) * C284 -
             (C117 * C908 + C50907 * C913) * C50757) *
                C113) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C283 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C278 -
             (C5351 + C5352 + C5353) * C284 -
             (C5354 + C5355 + C5356) * C50757) *
                C2300 +
            ((C5353 + C5352 + C5351) * C283 + (C5356 + C5355 + C5354) * C278 -
             (C5359 + C5358 + C5357) * C284 -
             (C5362 + C5361 + C5360) * C50757) *
                C50776) *
               C50896 * C51037 +
           (((C5733 + C5734 + C5735) * C284 -
             ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
               C5311 * C473 + C5308 * C492) *
                  C278 +
              (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
               C5311 * C463 + C5308 * C474) *
                  C283) +
             (C5736 + C5737 + C5738) * C50757) *
                C2300 +
            ((C6069 + C6068 + C6067) * C284 -
             ((C5738 + C5737 + C5736) * C278 + (C5735 + C5734 + C5733) * C283) +
             (C6072 + C6071 + C6070) * C50757) *
                C50776) *
               C50896 * C50874) *
              C51036 +
          ((((C5539 + C5540 + C5541) * C284 -
             ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
               C5311 * C296 + C5308 * C315) *
                  C278 +
              (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
               C5311 * C286 + C5308 * C297) *
                  C283) +
             (C5542 + C5543 + C5544) * C50757) *
                C2300 +
            ((C5905 + C5904 + C5903) * C284 -
             ((C5544 + C5543 + C5542) * C278 + (C5541 + C5540 + C5539) * C283) +
             (C5908 + C5907 + C5906) * C50757) *
                C50776) *
               C50896 * C51037 +
           (((C5311 * C894 + C5308 * C899 + C5312 * C1227 + C5309 * C1235 +
              C5313 * C4711 + C5310 * C4719) *
                 C283 +
             (C5311 * C900 + C5308 * C909 + C5312 * C1234 + C5309 * C1239 +
              C5313 * C4718 + C5310 * C4723) *
                 C278 -
             (C6283 + C6284 + C6285) * C284 -
             (C6286 + C6287 + C6288) * C50757) *
                C2300 +
            ((C6285 + C6284 + C6283) * C283 + (C6288 + C6287 + C6286) * C278 -
             (C5313 * C6266 + C5310 * C6267 + C5312 * C1225 + C5309 * C1231 +
              C5311 * C896 + C5308 * C903) *
                 C284 -
             (C5313 * C6268 + C5310 * C6269 + C5312 * C1230 + C5309 * C1237 +
              C5311 * C904 + C5308 * C911) *
                 C50757) *
                C50776) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C50907 * C129) * C118 +
               (C117 * C130 + C50907 * C143) * C106 - C171 * C119 -
               C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
               C176 * C109) *
                  C110 +
              (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
               C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                  C111 +
              (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
               C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                  C112 +
              (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 +
               C179 * C120 + C180 * C108 -
               (C117 * C128 + C50907 * C141) * C121 -
               (C117 * C142 + C50907 * C149) * C109) *
                  C113) *
             C50896 * C50810 * C50798 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50907 * C129) * C283 +
                (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
                C172 * C50757) *
                   C110 +
               (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                   C111 +
               (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                   C112 +
               (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50757) *
                   C113) *
                  C50896 * C50810 * C280 +
              ((C350 * C284 -
                ((C117 * C296 + C50907 * C315) * C278 +
                 (C117 * C286 + C50907 * C297) * C283) +
                C351 * C50757) *
                   C110 +
               (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50757) *
                   C111 +
               (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50757) *
                   C112 +
               ((C117 * C289 + C50907 * C303) * C284 -
                (C355 * C278 + C354 * C283) +
                (C117 * C304 + C50907 * C319) * C50757) *
                   C113) *
                  C50896 * C50810 * C281 +
              (((C117 * C290 + C50907 * C305) * C283 +
                (C117 * C306 + C50907 * C320) * C278 - C356 * C284 -
                C357 * C50757) *
                   C110 +
               (C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50757) *
                   C111 +
               (C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50757) *
                   C112 +
               (C360 * C283 + C361 * C278 -
                (C117 * C294 + C50907 * C313) * C284 -
                (C117 * C314 + C50907 * C324) * C50757) *
                   C113) *
                  C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50757) * C113) *
              C50896 * C459 +
          ((C527 * C284 -
            ((C117 * C473 + C50907 * C492) * C278 +
             (C117 * C463 + C50907 * C474) * C283) +
            C528 * C50757) *
               C110 +
           (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) * C111 +
           (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) * C112 +
           ((C117 * C466 + C50907 * C480) * C284 - (C532 * C278 + C531 * C283) +
            (C117 * C481 + C50907 * C496) * C50757) *
               C113) *
              C50896 * C460 +
          (((C117 * C467 + C50907 * C482) * C283 +
            (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
            C534 * C50757) *
               C110 +
           (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50757) * C111 +
           (C535 * C283 + C536 * C278 - C537 * C284 - C538 * C50757) * C112 +
           (C537 * C283 + C538 * C278 - (C117 * C471 + C50907 * C490) * C284 -
            (C117 * C491 + C50907 * C501) * C50757) *
               C113) *
              C50896 * C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C2300 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50776) *
              C2302 +
          (((C117 * C286 + C50907 * C297) * C118 +
            (C117 * C296 + C50907 * C315) * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C2300 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C50776) *
              C2303 +
          (((C117 * C290 + C50907 * C305) * C118 +
            (C117 * C306 + C50907 * C320) * C106 - C356 * C119 - C357 * C107 +
            C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
               C2300 +
           (C356 * C118 + C357 * C106 - C358 * C119 - C359 * C107 +
            C360 * C120 + C361 * C108 - (C117 * C294 + C50907 * C313) * C121 -
            (C117 * C314 + C50907 * C324) * C109) *
               C50776) *
              C2304) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C2513 + C2514 - C2468 - C2469) * C2300 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C2303 +
           C2532 * C2304) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C2300 +
            (C2472 - (C2471 + C2470) + C2473) * C50776) *
               C2302 +
           ((C2478 - (C2516 + C2515) + C2479) * C2300 +
            (C2482 - (C2481 + C2480) + C2483) * C50776) *
               C2303 +
           ((C2518 - (C2519 + C2520) + C2521) * C2300 +
            (C2522 - (C2523 + C2524) + C2525) * C50776) *
               C2304) *
              C50810 * C281 +
          (C2532 * C2302 +
           ((C2520 + C2519 - C2518 - C2521) * C2300 +
            (C2524 + C2523 - C2522 - C2525) * C50776) *
               C2303 +
           (((C117 * C2451 + C50907 * C2454) * C283 +
             (C117 * C2455 + C50907 * C2460) * C278 - C2511 * C284 -
             C2512 * C50757) *
                C2300 +
            (C2511 * C283 + C2512 * C278 -
             (C117 * C2453 + C50907 * C2458) * C284 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C2304) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C2513 + C2514 - C2468 - C2469) * C2300 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C2303 +
           C2532 * C2304) *
              C459 +
          (((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C2300 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                C50776) *
               C2302 +
           ((C927 * C284 -
             ((C117 * C900 + C50907 * C909) * C278 +
              (C117 * C894 + C50907 * C899) * C283) +
             C928 * C50757) *
                C2300 +
            (C929 * C284 - (C928 * C278 + C927 * C283) + C930 * C50757) *
                C50776) *
               C2303 +
           ((C2703 * C284 -
             ((C117 * C1583 + C50907 * C1588) * C278 +
              (C117 * C1576 + C50907 * C1584) * C283) +
             C2704 * C50757) *
                C2300 +
            ((C117 * C1574 + C50907 * C1580) * C284 -
             (C2704 * C278 + C2703 * C283) +
             (C117 * C1579 + C50907 * C1586) * C50757) *
                C50776) *
               C2304) *
              C460 +
          ((((C117 * C467 + C50907 * C482) * C283 +
             (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
             C534 * C50757) *
                C2300 +
            (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50757) *
                C50776) *
               C2302 +
           (((C117 * C1227 + C50907 * C1235) * C283 +
             (C117 * C1234 + C50907 * C1239) * C278 - C2705 * C284 -
             C2706 * C50757) *
                C2300 +
            (C2705 * C283 + C2706 * C278 -
             (C117 * C1225 + C50907 * C1231) * C284 -
             (C117 * C1230 + C50907 * C1237) * C50757) *
                C50776) *
               C2303 +
           (((C117 * C2678 + C50907 * C2681) * C283 +
             (C117 * C2682 + C50907 * C2687) * C278 - C2707 * C284 -
             C2708 * C50757) *
                C2300 +
            (C2707 * C283 + C2708 * C278 -
             (C117 * C2680 + C50907 * C2685) * C284 -
             (C117 * C2686 + C50907 * C2689) * C50757) *
                C50776) *
               C2304) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
            C5313 * C467 + C5310 * C482) *
               C118 +
           (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
            C5313 * C483 + C5310 * C497) *
               C106 -
           (C5351 + C5352 + C5353) * C119 - (C5354 + C5355 + C5356) * C107 +
           (C5357 + C5358 + C5359) * C120 + (C5360 + C5361 + C5362) * C108 -
           (C5363 + C5364 + C5365) * C121 - (C5366 + C5367 + C5368) * C109) *
              C2300 +
          ((C5353 + C5352 + C5351) * C118 + (C5356 + C5355 + C5354) * C106 -
           (C5359 + C5358 + C5357) * C119 - (C5362 + C5361 + C5360) * C107 +
           (C5365 + C5364 + C5363) * C120 + (C5368 + C5367 + C5366) * C108 -
           (C5313 * C471 + C5310 * C490 + C5312 * C466 + C5309 * C480 +
            C5311 * C126 + C5308 * C137) *
               C121 -
           (C5313 * C491 + C5310 * C501 + C5312 * C481 + C5309 * C496 +
            C5311 * C138 + C5308 * C147) *
               C109) *
              C50776) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C50757) *
               C2300 +
           ((C5353 + C5352 + C5351) * C283 + (C5356 + C5355 + C5354) * C278 -
            (C5359 + C5358 + C5357) * C284 - (C5362 + C5361 + C5360) * C50757) *
               C50776) *
              C50896 * C50810 * C280 +
          (((C5539 + C5540 + C5541) * C284 -
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C278 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C283) +
            (C5542 + C5543 + C5544) * C50757) *
               C2300 +
           ((C5311 * C287 + C5308 * C299 + C5312 * C896 + C5309 * C903 +
             C5313 * C1225 + C5310 * C1231) *
                C284 -
            ((C5544 + C5543 + C5542) * C278 + (C5541 + C5540 + C5539) * C283) +
            (C5311 * C300 + C5308 * C317 + C5312 * C904 + C5309 * C911 +
             C5313 * C1230 + C5310 * C1237) *
                C50757) *
               C50776) *
              C50896 * C50810 * C281 +
          (((C5311 * C290 + C5308 * C305 + C5312 * C1576 + C5309 * C1584 +
             C5313 * C2678 + C5310 * C2681) *
                C283 +
            (C5311 * C306 + C5308 * C320 + C5312 * C1583 + C5309 * C1588 +
             C5313 * C2682 + C5310 * C2687) *
                C278 -
            (C5545 + C5546 + C5547) * C284 - (C5548 + C5549 + C5550) * C50757) *
               C2300 +
           ((C5547 + C5546 + C5545) * C283 + (C5550 + C5549 + C5548) * C278 -
            (C5313 * C2680 + C5310 * C2685 + C5312 * C1574 + C5309 * C1580 +
             C5311 * C292 + C5308 * C309) *
                C284 -
            (C5313 * C2686 + C5310 * C2689 + C5312 * C1579 + C5309 * C1586 +
             C5311 * C310 + C5308 * C322) *
                C50757) *
               C50776) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C50757) *
               C2300 +
           ((C5353 + C5352 + C5351) * C283 + (C5356 + C5355 + C5354) * C278 -
            (C5359 + C5358 + C5357) * C284 - (C5362 + C5361 + C5360) * C50757) *
               C50776) *
              C50896 * C459 +
          (((C5733 + C5734 + C5735) * C284 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C278 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C283) +
            (C5736 + C5737 + C5738) * C50757) *
               C2300 +
           ((C5311 * C464 + C5308 * C476 + C5312 * C469 + C5309 * C486 +
             C5313 * C1858 + C5310 * C1864) *
                C284 -
            ((C5738 + C5737 + C5736) * C278 + (C5735 + C5734 + C5733) * C283) +
            (C5311 * C477 + C5308 * C494 + C5312 * C487 + C5309 * C499 +
             C5313 * C1863 + C5310 * C1870) *
                C50757) *
               C50776) *
              C50896 * C460 +
          (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
             C5313 * C5696 + C5310 * C5699) *
                C283 +
            (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
             C5313 * C5700 + C5310 * C5705) *
                C278 -
            (C5739 + C5740 + C5741) * C284 - (C5742 + C5743 + C5744) * C50757) *
               C2300 +
           ((C5741 + C5740 + C5739) * C283 + (C5744 + C5743 + C5742) * C278 -
            (C5313 * C5698 + C5310 * C5703 + C5312 * C1858 + C5309 * C1864 +
             C5311 * C469 + C5308 * C486) *
                C284 -
            (C5313 * C5704 + C5310 * C5707 + C5312 * C1863 + C5309 * C1870 +
             C5311 * C487 + C5308 * C499) *
                C50757) *
               C50776) *
              C50896 * C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C641 +
             (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
             C172 * C51078 + C173 * C643 + C174 * C638) *
                C2300 +
            (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
             C175 * C643 + C176 * C638) *
                C50776) *
               C2302 +
           ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C2300 +
            (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C50776) *
               C2303 +
           ((C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C2300 +
            (C2873 + C2874 - C2875 - C2876 + C2877 + C2878) * C50776) *
               C2304) *
              C51037 +
          (((C527 * C642 -
             ((C117 * C473 + C50907 * C492) * C51077 +
              (C117 * C463 + C50907 * C474) * C641) +
             C528 * C51078 - C529 * C643 - C530 * C638) *
                C2300 +
            (C529 * C642 - (C528 * C51077 + C527 * C641) + C530 * C51078 -
             C531 * C643 - C532 * C638) *
                C50776) *
               C2302 +
           ((C927 * C642 -
             ((C117 * C900 + C50907 * C909) * C51077 +
              (C117 * C894 + C50907 * C899) * C641) +
             C928 * C51078 - C929 * C643 - C930 * C638) *
                C2300 +
            (C929 * C642 - (C928 * C51077 + C927 * C641) + C930 * C51078 -
             C931 * C643 - C932 * C638) *
                C50776) *
               C2303 +
           ((C2703 * C642 -
             ((C117 * C1583 + C50907 * C1588) * C51077 +
              (C117 * C1576 + C50907 * C1584) * C641) +
             C2704 * C51078 - C3029 * C643 - C3030 * C638) *
                C2300 +
            (C3029 * C642 - (C2704 * C51077 + C2703 * C641) + C3030 * C51078 -
             (C117 * C1573 + C50907 * C1578) * C643 -
             (C117 * C1577 + C50907 * C1585) * C638) *
                C50776) *
               C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C641 +
            (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
            C172 * C51078 + C173 * C643 + C174 * C638) *
               C110 +
           (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
            C175 * C643 + C176 * C638) *
               C111 +
           (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
            C177 * C643 + C178 * C638) *
               C112 +
           (C175 * C641 + C176 * C51077 - C177 * C642 - C178 * C51078 +
            C179 * C643 + C180 * C638) *
               C113) *
              C50896 * C51037 +
          ((C527 * C642 -
            ((C117 * C473 + C50907 * C492) * C51077 +
             (C117 * C463 + C50907 * C474) * C641) +
            C528 * C51078 - C529 * C643 - C530 * C638) *
               C110 +
           (C529 * C642 - (C528 * C51077 + C527 * C641) + C530 * C51078 -
            C531 * C643 - C532 * C638) *
               C111 +
           (C531 * C642 - (C530 * C51077 + C529 * C641) + C532 * C51078 -
            C763 * C643 - C764 * C638) *
               C112 +
           (C763 * C642 - (C532 * C51077 + C531 * C641) + C764 * C51078 -
            (C117 * C754 + C50907 * C755) * C643 -
            (C117 * C756 + C50907 * C757) * C638) *
               C113) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C641 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C51077 -
            (C5351 + C5352 + C5353) * C642 - (C5354 + C5355 + C5356) * C51078 +
            (C5357 + C5358 + C5359) * C643 + (C5360 + C5361 + C5362) * C638) *
               C2300 +
           ((C5353 + C5352 + C5351) * C641 + (C5356 + C5355 + C5354) * C51077 -
            (C5359 + C5358 + C5357) * C642 - (C5362 + C5361 + C5360) * C51078 +
            (C5365 + C5364 + C5363) * C643 + (C5368 + C5367 + C5366) * C638) *
               C50776) *
              C50896 * C51037 +
          (((C5733 + C5734 + C5735) * C642 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C51077 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C641) +
            (C5736 + C5737 + C5738) * C51078 - (C6067 + C6068 + C6069) * C643 -
            (C6070 + C6071 + C6072) * C638) *
               C2300 +
           ((C6069 + C6068 + C6067) * C642 -
            ((C5738 + C5737 + C5736) * C51077 +
             (C5735 + C5734 + C5733) * C641) +
            (C6072 + C6071 + C6070) * C51078 -
            (C5313 * C1857 + C5310 * C1862 + C5312 * C470 + C5309 * C488 +
             C5311 * C465 + C5308 * C478) *
                C643 -
            (C5313 * C1861 + C5310 * C1869 + C5312 * C489 + C5309 * C500 +
             C5311 * C479 + C5308 * C495) *
                C638) *
               C50776) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50757) * C113) *
              C50896 * C50810 * C280 +
          ((C350 * C284 -
            ((C117 * C296 + C50907 * C315) * C278 +
             (C117 * C286 + C50907 * C297) * C283) +
            C351 * C50757) *
               C110 +
           (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50757) * C111 +
           (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50757) * C112 +
           ((C117 * C289 + C50907 * C303) * C284 - (C355 * C278 + C354 * C283) +
            (C117 * C304 + C50907 * C319) * C50757) *
               C113) *
              C50896 * C50810 * C281 +
          (((C117 * C290 + C50907 * C305) * C283 +
            (C117 * C306 + C50907 * C320) * C278 - C356 * C284 -
            C357 * C50757) *
               C110 +
           (C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50757) * C111 +
           (C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50757) * C112 +
           (C360 * C283 + C361 * C278 - (C117 * C294 + C50907 * C313) * C284 -
            (C117 * C314 + C50907 * C324) * C50757) *
               C113) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50907 * C129) * C118 +
           (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C110 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C111 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C112 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50907 * C141) * C121 -
           (C117 * C142 + C50907 * C149) * C109) *
              C113) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C2300 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50776) *
              C2302 +
          (((C117 * C286 + C50907 * C297) * C118 +
            (C117 * C296 + C50907 * C315) * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C2300 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C50776) *
              C2303 +
          (((C117 * C290 + C50907 * C305) * C118 +
            (C117 * C306 + C50907 * C320) * C106 - C356 * C119 - C357 * C107 +
            C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
               C2300 +
           (C356 * C118 + C357 * C106 - C358 * C119 - C359 * C107 +
            C360 * C120 + C361 * C108 - (C117 * C294 + C50907 * C313) * C121 -
            (C117 * C314 + C50907 * C324) * C109) *
               C50776) *
              C2304) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C2513 + C2514 - C2468 - C2469) * C2300 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C2303 +
           C2532 * C2304) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C2300 +
            (C2472 - (C2471 + C2470) + C2473) * C50776) *
               C2302 +
           ((C2478 - (C2516 + C2515) + C2479) * C2300 +
            (C2482 - (C2481 + C2480) + C2483) * C50776) *
               C2303 +
           ((C2518 - (C2519 + C2520) + C2521) * C2300 +
            (C2522 - (C2523 + C2524) + C2525) * C50776) *
               C2304) *
              C50810 * C281 +
          (C2532 * C2302 +
           ((C2520 + C2519 - C2518 - C2521) * C2300 +
            (C2524 + C2523 - C2522 - C2525) * C50776) *
               C2303 +
           (((C117 * C2451 + C50907 * C2454) * C283 +
             (C117 * C2455 + C50907 * C2460) * C278 - C2511 * C284 -
             C2512 * C50757) *
                C2300 +
            (C2511 * C283 + C2512 * C278 -
             (C117 * C2453 + C50907 * C2458) * C284 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C2304) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
            C5313 * C467 + C5310 * C482) *
               C118 +
           (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
            C5313 * C483 + C5310 * C497) *
               C106 -
           (C5351 + C5352 + C5353) * C119 - (C5354 + C5355 + C5356) * C107 +
           (C5357 + C5358 + C5359) * C120 + (C5360 + C5361 + C5362) * C108 -
           (C5363 + C5364 + C5365) * C121 - (C5366 + C5367 + C5368) * C109) *
              C2300 +
          ((C5353 + C5352 + C5351) * C118 + (C5356 + C5355 + C5354) * C106 -
           (C5359 + C5358 + C5357) * C119 - (C5362 + C5361 + C5360) * C107 +
           (C5365 + C5364 + C5363) * C120 + (C5368 + C5367 + C5366) * C108 -
           (C5313 * C471 + C5310 * C490 + C5312 * C466 + C5309 * C480 +
            C5311 * C126 + C5308 * C137) *
               C121 -
           (C5313 * C491 + C5310 * C501 + C5312 * C481 + C5309 * C496 +
            C5311 * C138 + C5308 * C147) *
               C109) *
              C50776) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C50757) *
               C2300 +
           ((C5353 + C5352 + C5351) * C283 + (C5356 + C5355 + C5354) * C278 -
            (C5359 + C5358 + C5357) * C284 - (C5362 + C5361 + C5360) * C50757) *
               C50776) *
              C50896 * C50810 * C280 +
          (((C5539 + C5540 + C5541) * C284 -
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C278 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C283) +
            (C5542 + C5543 + C5544) * C50757) *
               C2300 +
           ((C5311 * C287 + C5308 * C299 + C5312 * C896 + C5309 * C903 +
             C5313 * C1225 + C5310 * C1231) *
                C284 -
            ((C5544 + C5543 + C5542) * C278 + (C5541 + C5540 + C5539) * C283) +
            (C5311 * C300 + C5308 * C317 + C5312 * C904 + C5309 * C911 +
             C5313 * C1230 + C5310 * C1237) *
                C50757) *
               C50776) *
              C50896 * C50810 * C281 +
          (((C5311 * C290 + C5308 * C305 + C5312 * C1576 + C5309 * C1584 +
             C5313 * C2678 + C5310 * C2681) *
                C283 +
            (C5311 * C306 + C5308 * C320 + C5312 * C1583 + C5309 * C1588 +
             C5313 * C2682 + C5310 * C2687) *
                C278 -
            (C5545 + C5546 + C5547) * C284 - (C5548 + C5549 + C5550) * C50757) *
               C2300 +
           ((C5547 + C5546 + C5545) * C283 + (C5550 + C5549 + C5548) * C278 -
            (C5313 * C2680 + C5310 * C2685 + C5312 * C1574 + C5309 * C1580 +
             C5311 * C292 + C5308 * C309) *
                C284 -
            (C5313 * C2686 + C5310 * C2689 + C5312 * C1579 + C5309 * C1586 +
             C5311 * C310 + C5308 * C322) *
                C50757) *
               C50776) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C2300 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C3907 + C3908 - C3909 - C3910) * C2300 +
            (C3911 + C3912 - C3913 - C3914) * C50776) *
               C2303 +
           C3939 * C2304) *
              C50810 * C51081 +
          (((C3909 - (C3908 + C3907) + C3910) * C2300 +
            (C3913 - (C3912 + C3911) + C3914) * C50776) *
               C2302 +
           ((C3917 - (C3916 + C3915) + C3918) * C2300 +
            (C3921 - (C3920 + C3919) + C3922) * C50776) *
               C2303 +
           ((C3923 - (C3924 + C3925) + C3926) * C2300 +
            (C3927 - (C3928 + C3929) + C3930) * C50776) *
               C2304) *
              C50810 * C51082 +
          (C3939 * C2302 +
           ((C3925 + C3924 - C3923 - C3926) * C2300 +
            (C3929 + C3928 - C3927 - C3930) * C50776) *
               C2303 +
           ((C3569 * C49770 + C3570 * C51021 - C2511 * C49763 -
             C2512 * C50757) *
                C2300 +
            (C2511 * C49770 + C2512 * C51021 -
             (C117 * C2453 + C50907 * C2458) * C49763 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C2304) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C49770 +
            (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
            C172 * C50757) *
               C110 +
           (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
               C111 +
           (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
               C112 +
           (C175 * C49770 + C176 * C51021 - C177 * C49763 - C178 * C50757) *
               C113) *
              C50896 * C50810 * C51081 +
          ((C350 * C49763 -
            ((C117 * C296 + C50907 * C315) * C51021 +
             (C117 * C286 + C50907 * C297) * C49770) +
            C351 * C50757) *
               C110 +
           (C352 * C49763 - (C351 * C51021 + C350 * C49770) + C353 * C50757) *
               C111 +
           (C354 * C49763 - (C353 * C51021 + C352 * C49770) + C355 * C50757) *
               C112 +
           (C653 * C49763 - (C355 * C51021 + C354 * C49770) + C654 * C50757) *
               C113) *
              C50896 * C50810 * C51082 +
          (((C117 * C290 + C50907 * C305) * C49770 +
            (C117 * C306 + C50907 * C320) * C51021 - C356 * C49763 -
            C357 * C50757) *
               C110 +
           (C356 * C49770 + C357 * C51021 - C358 * C49763 - C359 * C50757) *
               C111 +
           (C358 * C49770 + C359 * C51021 - C360 * C49763 - C361 * C50757) *
               C112 +
           (C360 * C49770 + C361 * C51021 -
            (C117 * C294 + C50907 * C313) * C49763 -
            (C117 * C314 + C50907 * C324) * C50757) *
               C113) *
              C50896 * C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C51021 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50757) *
               C2300 +
           ((C5353 + C5352 + C5351) * C49770 +
            (C5356 + C5355 + C5354) * C51021 -
            (C5359 + C5358 + C5357) * C49763 -
            (C5362 + C5361 + C5360) * C50757) *
               C50776) *
              C50896 * C50810 * C51081 +
          (((C5539 + C5540 + C5541) * C49763 -
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C51021 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C49770) +
            (C5542 + C5543 + C5544) * C50757) *
               C2300 +
           ((C5905 + C5904 + C5903) * C49763 -
            ((C5544 + C5543 + C5542) * C51021 +
             (C5541 + C5540 + C5539) * C49770) +
            (C5908 + C5907 + C5906) * C50757) *
               C50776) *
              C50896 * C50810 * C51082 +
          (((C5311 * C290 + C5308 * C305 + C5312 * C1576 + C5309 * C1584 +
             C5313 * C2678 + C5310 * C2681) *
                C49770 +
            (C5311 * C306 + C5308 * C320 + C5312 * C1583 + C5309 * C1588 +
             C5313 * C2682 + C5310 * C2687) *
                C51021 -
            (C5545 + C5546 + C5547) * C49763 -
            (C5548 + C5549 + C5550) * C50757) *
               C2300 +
           ((C5547 + C5546 + C5545) * C49770 +
            (C5550 + C5549 + C5548) * C51021 -
            (C5313 * C2680 + C5310 * C2685 + C5312 * C1574 + C5309 * C1580 +
             C5311 * C292 + C5308 * C309) *
                C49763 -
            (C5313 * C2686 + C5310 * C2689 + C5312 * C1579 + C5309 * C1586 +
             C5311 * C310 + C5308 * C322) *
                C50757) *
               C50776) *
              C50896 * C50810 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C51037 -
           (C4316 * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C50874) *
              C51081 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            ((C4317 + C4318) * C2300 + (C4310 + C4311) * C50776) * C2304) *
               C50874 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C51037) *
              C51082 +
          ((C3577 * C2302 +
            ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
            ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
               C51037 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             ((C117 * C4299 + C50907 * C4302) * C50752 +
              (C117 * C4296 + C50907 * C4300) * C1109) *
                 C2300) *
                C2304 +
            ((C4311 + C4310) * C50776 + (C4318 + C4317) * C2300) * C2303 +
            C4316 * C2302) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C110 +
            (C171 * C1109 + C172 * C50752) * C111 +
            (C173 * C1109 + C174 * C50752) * C112 +
            (C175 * C1109 + C176 * C50752) * C113) *
               C50896 * C51037 -
           ((C532 * C50752 + C531 * C1109) * C113 +
            (C530 * C50752 + C529 * C1109) * C112 +
            (C528 * C50752 + C527 * C1109) * C111 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C110) *
               C50896 * C50874) *
              C51081 +
          ((((C117 * C894 + C50907 * C899) * C1109 +
             (C117 * C900 + C50907 * C909) * C50752) *
                C110 +
            (C927 * C1109 + C928 * C50752) * C111 +
            (C929 * C1109 + C930 * C50752) * C112 +
            (C931 * C1109 + C932 * C50752) * C113) *
               C50896 * C50874 -
           ((C355 * C50752 + C354 * C1109) * C113 +
            (C353 * C50752 + C352 * C1109) * C112 +
            (C351 * C50752 + C350 * C1109) * C111 +
            ((C117 * C296 + C50907 * C315) * C50752 +
             (C117 * C286 + C50907 * C297) * C1109) *
                C110) *
               C50896 * C51037) *
              C51082 +
          ((((C117 * C290 + C50907 * C305) * C1109 +
             (C117 * C306 + C50907 * C320) * C50752) *
                C110 +
            (C356 * C1109 + C357 * C50752) * C111 +
            (C358 * C1109 + C359 * C50752) * C112 +
            (C360 * C1109 + C361 * C50752) * C113) *
               C50896 * C51037 -
           (((C117 * C1577 + C50907 * C1585) * C50752 +
             (C117 * C1573 + C50907 * C1578) * C1109) *
                C113 +
            ((C117 * C1579 + C50907 * C1586) * C50752 +
             (C117 * C1574 + C50907 * C1580) * C1109) *
                C112 +
            ((C117 * C1581 + C50907 * C1587) * C50752 +
             (C117 * C1575 + C50907 * C1582) * C1109) *
                C111 +
            ((C117 * C1583 + C50907 * C1588) * C50752 +
             (C117 * C1576 + C50907 * C1584) * C1109) *
                C110) *
               C50896 * C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C2300 +
            ((C5353 + C5352 + C5351) * C1109 +
             (C5356 + C5355 + C5354) * C50752) *
                C50776) *
               C50896 * C51037 -
           (((C5738 + C5737 + C5736) * C50752 +
             (C5735 + C5734 + C5733) * C1109) *
                C50776 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C2300) *
               C50896 * C50874) *
              C51081 +
          ((((C5311 * C894 + C5308 * C899 + C5312 * C1227 + C5309 * C1235 +
              C5313 * C4711 + C5310 * C4719) *
                 C1109 +
             (C5311 * C900 + C5308 * C909 + C5312 * C1234 + C5309 * C1239 +
              C5313 * C4718 + C5310 * C4723) *
                 C50752) *
                C2300 +
            ((C6285 + C6284 + C6283) * C1109 +
             (C6288 + C6287 + C6286) * C50752) *
                C50776) *
               C50896 * C50874 -
           (((C5544 + C5543 + C5542) * C50752 +
             (C5541 + C5540 + C5539) * C1109) *
                C50776 +
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C50752 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C1109) *
                C2300) *
               C50896 * C51037) *
              C51082 +
          ((((C5311 * C290 + C5308 * C305 + C5312 * C1576 + C5309 * C1584 +
              C5313 * C2678 + C5310 * C2681) *
                 C1109 +
             (C5311 * C306 + C5308 * C320 + C5312 * C1583 + C5309 * C1588 +
              C5313 * C2682 + C5310 * C2687) *
                 C50752) *
                C2300 +
            ((C5547 + C5546 + C5545) * C1109 +
             (C5550 + C5549 + C5548) * C50752) *
                C50776) *
               C50896 * C51037 -
           (((C5313 * C4712 + C5310 * C4720 + C5312 * C2684 + C5309 * C2688 +
              C5311 * C1581 + C5308 * C1587) *
                 C50752 +
             (C5313 * C4708 + C5310 * C4713 + C5312 * C2679 + C5309 * C2683 +
              C5311 * C1575 + C5308 * C1582) *
                 C1109) *
                C50776 +
            ((C5313 * C4714 + C5310 * C4721 + C5312 * C2682 + C5309 * C2687 +
              C5311 * C1583 + C5308 * C1588) *
                 C50752 +
             (C5313 * C4709 + C5310 * C4715 + C5312 * C2678 + C5309 * C2681 +
              C5311 * C1576 + C5308 * C1584) *
                 C1109) *
                C2300) *
               C50896 * C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50907 * C129) * C1035 +
                (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
                C172 * C1031 + C173 * C1037 + C174 * C1032) *
                   C110 +
               (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                C175 * C1037 + C176 * C1032) *
                   C111 +
               (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                C177 * C1037 + C178 * C1032) *
                   C112 +
               (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
                C179 * C1037 + C180 * C1032) *
                   C113) *
                  C50896 * C50810 * C1033 +
              ((C350 * C1036 -
                ((C117 * C296 + C50907 * C315) * C1030 +
                 (C117 * C286 + C50907 * C297) * C1035) +
                C351 * C1031 - C352 * C1037 - C353 * C1032) *
                   C110 +
               (C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
                C354 * C1037 - C355 * C1032) *
                   C111 +
               (C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
                C653 * C1037 - C654 * C1032) *
                   C112 +
               (C653 * C1036 - (C355 * C1030 + C354 * C1035) + C654 * C1031 -
                (C117 * C644 + C50907 * C645) * C1037 -
                (C117 * C646 + C50907 * C647) * C1032) *
                   C113) *
                  C50896 * C50810 * C50848) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50907 * C129) * C1109 +
                (C117 * C130 + C50907 * C143) * C50752) *
                   C110 +
               (C171 * C1109 + C172 * C50752) * C111 +
               (C173 * C1109 + C174 * C50752) * C112 +
               (C175 * C1109 + C176 * C50752) * C113) *
                  C50896 * C50810 * C1105 -
              ((C355 * C50752 + C354 * C1109) * C113 +
               (C353 * C50752 + C352 * C1109) * C112 +
               (C351 * C50752 + C350 * C1109) * C111 +
               ((C117 * C296 + C50907 * C315) * C50752 +
                (C117 * C286 + C50907 * C297) * C1109) *
                   C110) *
                  C50896 * C50810 * C1106 +
              (((C117 * C290 + C50907 * C305) * C1109 +
                (C117 * C306 + C50907 * C320) * C50752) *
                   C110 +
               (C356 * C1109 + C357 * C50752) * C111 +
               (C358 * C1109 + C359 * C50752) * C112 +
               (C360 * C1109 + C361 * C50752) * C113) *
                  C50896 * C50810 * C1107 -
              (((C117 * C1114 + C50907 * C1122) * C50752 +
                (C117 * C1110 + C50907 * C1115) * C1109) *
                   C113 +
               ((C117 * C1116 + C50907 * C1123) * C50752 +
                (C117 * C1111 + C50907 * C1117) * C1109) *
                   C112 +
               ((C117 * C1118 + C50907 * C1124) * C50752 +
                (C117 * C1112 + C50907 * C1119) * C1109) *
                   C111 +
               ((C117 * C1120 + C50907 * C1125) * C50752 +
                (C117 * C1113 + C50907 * C1121) * C1109) *
                   C110) *
                  C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C117 * C122 + C50907 * C129) * C1109 +
                                 (C117 * C130 + C50907 * C143) * C50752) *
                                    C110 +
                                (C171 * C1109 + C172 * C50752) * C111 +
                                (C173 * C1109 + C174 * C50752) * C112 +
                                (C175 * C1109 + C176 * C50752) * C113) *
                                   C50896 * C459 -
                               ((C532 * C50752 + C531 * C1109) * C113 +
                                (C530 * C50752 + C529 * C1109) * C112 +
                                (C528 * C50752 + C527 * C1109) * C111 +
                                ((C117 * C473 + C50907 * C492) * C50752 +
                                 (C117 * C463 + C50907 * C474) * C1109) *
                                    C110) *
                                   C50896 * C460 +
                               (((C117 * C467 + C50907 * C482) * C1109 +
                                 (C117 * C483 + C50907 * C497) * C50752) *
                                    C110 +
                                (C533 * C1109 + C534 * C50752) * C111 +
                                (C535 * C1109 + C536 * C50752) * C112 +
                                (C537 * C1109 + C538 * C50752) * C113) *
                                   C50896 * C461) *
                                  C1033 +
                              ((((C117 * C894 + C50907 * C899) * C1109 +
                                 (C117 * C900 + C50907 * C909) * C50752) *
                                    C110 +
                                (C927 * C1109 + C928 * C50752) * C111 +
                                (C929 * C1109 + C930 * C50752) * C112 +
                                (C931 * C1109 + C932 * C50752) * C113) *
                                   C50896 * C460 -
                               ((C355 * C50752 + C354 * C1109) * C113 +
                                (C353 * C50752 + C352 * C1109) * C112 +
                                (C351 * C50752 + C350 * C1109) * C111 +
                                ((C117 * C296 + C50907 * C315) * C50752 +
                                 (C117 * C286 + C50907 * C297) * C1109) *
                                    C110) *
                                   C50896 * C459 -
                               (((C117 * C1228 + C50907 * C1236) * C50752 +
                                 (C117 * C1224 + C50907 * C1229) * C1109) *
                                    C113 +
                                ((C117 * C1230 + C50907 * C1237) * C50752 +
                                 (C117 * C1225 + C50907 * C1231) * C1109) *
                                    C112 +
                                ((C117 * C1232 + C50907 * C1238) * C50752 +
                                 (C117 * C1226 + C50907 * C1233) * C1109) *
                                    C111 +
                                ((C117 * C1234 + C50907 * C1239) * C50752 +
                                 (C117 * C1227 + C50907 * C1235) * C1109) *
                                    C110) *
                                   C50896 * C461) *
                                  C50848)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C2300 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C2302 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C2300 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C2303 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C2300 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C2304) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C2300 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C50776) *
               C2302 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C2300 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C50776) *
               C2303 +
           ((C2505 * C1036 - (C2506 * C1030 + C2507 * C1035) + C2508 * C1031 -
             C2509 * C1037 - C2510 * C1032) *
                C2300 +
            (C2509 * C1036 - (C2508 * C1030 + C2505 * C1035) + C2510 * C1031 -
             (C117 * C1110 + C50907 * C1115) * C1037 -
             (C117 * C1114 + C50907 * C1122) * C1032) *
                C50776) *
               C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C2300 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C2302 +
           ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
           C3577 * C2304) *
              C50810 * C1105 -
          (C3578 * C2304 +
           ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
           ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
              C50810 * C1106 +
          (C3577 * C2302 +
           ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
           ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
              C50810 * C1107 -
          ((((C117 * C3540 + C50907 * C3544) * C50752 +
             (C117 * C3538 + C50907 * C3541) * C1109) *
                C50776 +
            ((C117 * C3542 + C50907 * C3545) * C50752 +
             (C117 * C3539 + C50907 * C3543) * C1109) *
                C2300) *
               C2304 +
           ((C3564 + C3563) * C50776 + (C3576 + C3575) * C2300) * C2303 +
           C3578 * C2302) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C459 -
           (((C3733 + C3734) * C50776 + (C3735 + C3736) * C2300) * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C460 +
           ((((C117 * C467 + C50907 * C482) * C1109 +
              (C117 * C483 + C50907 * C497) * C50752) *
                 C2300 +
             (C533 * C1109 + C534 * C50752) * C50776) *
                C2302 +
            ((C3757 + C3758) * C2300 + (C3745 + C3746) * C50776) * C2303 +
            ((C3759 + C3760) * C2300 + (C3751 + C3752) * C50776) * C2304) *
               C461) *
              C1033 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            (((C117 * C3224 + C50907 * C3227) * C1109 +
              (C117 * C3228 + C50907 * C3233) * C50752) *
                 C2300 +
             (C3265 * C1109 + C3266 * C50752) * C50776) *
                C2304) *
               C460 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C459 -
           ((((C117 * C3726 + C50907 * C3730) * C50752 +
              (C117 * C3724 + C50907 * C3727) * C1109) *
                 C50776 +
             ((C117 * C3728 + C50907 * C3731) * C50752 +
              (C117 * C3725 + C50907 * C3729) * C1109) *
                 C2300) *
                C2304 +
            ((C3752 + C3751) * C50776 + (C3760 + C3759) * C2300) * C2303 +
            ((C3746 + C3745) * C50776 + (C3758 + C3757) * C2300) * C2302) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1035 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C1030 -
            (C5351 + C5352 + C5353) * C1036 - (C5354 + C5355 + C5356) * C1031 +
            (C5357 + C5358 + C5359) * C1037 + (C5360 + C5361 + C5362) * C1032) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1035 + (C5356 + C5355 + C5354) * C1030 -
            (C5359 + C5358 + C5357) * C1036 - (C5362 + C5361 + C5360) * C1031 +
            (C5365 + C5364 + C5363) * C1037 + (C5368 + C5367 + C5366) * C1032) *
               C50776) *
              C50896 * C50810 * C1033 +
          (((C5539 + C5540 + C5541) * C1036 -
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C1030 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C1035) +
            (C5542 + C5543 + C5544) * C1031 - (C5903 + C5904 + C5905) * C1037 -
            (C5906 + C5907 + C5908) * C1032) *
               C2300 +
           ((C5905 + C5904 + C5903) * C1036 -
            ((C5544 + C5543 + C5542) * C1030 +
             (C5541 + C5540 + C5539) * C1035) +
            (C5908 + C5907 + C5906) * C1031 -
            (C5313 * C1224 + C5310 * C1229 + C5312 * C897 + C5309 * C905 +
             C5311 * C288 + C5308 * C301) *
                C1037 -
            (C5313 * C1228 + C5310 * C1236 + C5312 * C906 + C5309 * C912 +
             C5311 * C302 + C5308 * C318) *
                C1032) *
               C50776) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1109 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C50752) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1109 +
            (C5356 + C5355 + C5354) * C50752) *
               C50776) *
              C50896 * C50810 * C1105 -
          (((C5544 + C5543 + C5542) * C50752 +
            (C5541 + C5540 + C5539) * C1109) *
               C50776 +
           ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
             C5311 * C296 + C5308 * C315) *
                C50752 +
            (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
             C5311 * C286 + C5308 * C297) *
                C1109) *
               C2300) *
              C50896 * C50810 * C1106 +
          (((C5311 * C290 + C5308 * C305 + C5312 * C1576 + C5309 * C1584 +
             C5313 * C2678 + C5310 * C2681) *
                C1109 +
            (C5311 * C306 + C5308 * C320 + C5312 * C1583 + C5309 * C1588 +
             C5313 * C2682 + C5310 * C2687) *
                C50752) *
               C2300 +
           ((C5547 + C5546 + C5545) * C1109 +
            (C5550 + C5549 + C5548) * C50752) *
               C50776) *
              C50896 * C50810 * C1107 -
          (((C5313 * C3726 + C5310 * C3730 + C5312 * C3230 + C5309 * C3234 +
             C5311 * C1118 + C5308 * C1124) *
                C50752 +
            (C5313 * C3724 + C5310 * C3727 + C5312 * C3225 + C5309 * C3229 +
             C5311 * C1112 + C5308 * C1119) *
                C1109) *
               C50776 +
           ((C5313 * C3728 + C5310 * C3731 + C5312 * C3228 + C5309 * C3233 +
             C5311 * C1120 + C5308 * C1125) *
                C50752 +
            (C5313 * C3725 + C5310 * C3729 + C5312 * C3224 + C5309 * C3227 +
             C5311 * C1113 + C5308 * C1121) *
                C1109) *
               C2300) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C2300 +
            ((C5353 + C5352 + C5351) * C1109 +
             (C5356 + C5355 + C5354) * C50752) *
                C50776) *
               C50896 * C459 -
           (((C5738 + C5737 + C5736) * C50752 +
             (C5735 + C5734 + C5733) * C1109) *
                C50776 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C2300) *
               C50896 * C460 +
           (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
              C5313 * C5696 + C5310 * C5699) *
                 C1109 +
             (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
              C5313 * C5700 + C5310 * C5705) *
                 C50752) *
                C2300 +
            ((C5741 + C5740 + C5739) * C1109 +
             (C5744 + C5743 + C5742) * C50752) *
                C50776) *
               C50896 * C461) *
              C1033 +
          ((((C5311 * C894 + C5308 * C899 + C5312 * C1227 + C5309 * C1235 +
              C5313 * C4711 + C5310 * C4719) *
                 C1109 +
             (C5311 * C900 + C5308 * C909 + C5312 * C1234 + C5309 * C1239 +
              C5313 * C4718 + C5310 * C4723) *
                 C50752) *
                C2300 +
            ((C6285 + C6284 + C6283) * C1109 +
             (C6288 + C6287 + C6286) * C50752) *
                C50776) *
               C50896 * C460 -
           (((C5544 + C5543 + C5542) * C50752 +
             (C5541 + C5540 + C5539) * C1109) *
                C50776 +
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C50752 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C1109) *
                C2300) *
               C50896 * C459 -
           (((C5313 * C6680 + C5310 * C6684 + C5312 * C4716 + C5309 * C4722 +
              C5311 * C1232 + C5308 * C1238) *
                 C50752 +
             (C5313 * C6678 + C5310 * C6681 + C5312 * C4710 + C5309 * C4717 +
              C5311 * C1226 + C5308 * C1233) *
                 C1109) *
                C50776 +
            ((C5313 * C6682 + C5310 * C6685 + C5312 * C4718 + C5309 * C4723 +
              C5311 * C1234 + C5308 * C1239) *
                 C50752 +
             (C5313 * C6679 + C5310 * C6683 + C5312 * C4711 + C5309 * C4719 +
              C5311 * C1227 + C5308 * C1235) *
                 C1109) *
                C2300) *
               C50896 * C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C2300 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C50776) *
                C2302 +
            ((C3907 + C3908 - C3909 - C3910) * C2300 +
             (C3911 + C3912 - C3913 - C3914) * C50776) *
                C2303 +
            C3939 * C2304) *
               C51037 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C2300 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C50776) *
                C2302 +
            ((C4134 - (C4135 + C4136) + C4137) * C2300 +
             (C4138 - (C4139 + C4140) + C4141) * C50776) *
                C2303 +
            ((C4142 - (C4143 + C4144) + C4145) * C2300 +
             (C4146 - (C4147 + C4148) + C4149) * C50776) *
                C2304) *
               C50874) *
              C1033 +
          ((((C3909 - (C3908 + C3907) + C3910) * C2300 +
             (C3913 - (C3912 + C3911) + C3914) * C50776) *
                C2302 +
            ((C3917 - (C3916 + C3915) + C3918) * C2300 +
             (C3921 - (C3920 + C3919) + C3922) * C50776) *
                C2303 +
            ((C3923 - (C3924 + C3925) + C3926) * C2300 +
             (C3927 - (C3928 + C3929) + C3930) * C50776) *
                C2304) *
               C51037 +
           (((C4136 + C4135 - C4134 - C4137) * C2300 +
             (C4140 + C4139 - C4138 - C4141) * C50776) *
                C2302 +
            ((C4144 + C4143 - C4142 - C4145) * C2300 +
             (C4148 + C4147 - C4146 - C4149) * C50776) *
                C2303 +
            (((C117 * C3224 + C50907 * C3227) * C49770 +
              (C117 * C3228 + C50907 * C3233) * C51021 - C3265 * C49763 -
              C3266 * C50757) *
                 C2300 +
             (C3265 * C49770 + C3266 * C51021 -
              (C117 * C3226 + C50907 * C3231) * C49763 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C110 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C111 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C112 +
            (C175 * C49770 + C176 * C51021 - C177 * C49763 - C178 * C50757) *
                C113) *
               C50896 * C51037 +
           ((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C110 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C111 +
            (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                C112 +
            (C763 * C49763 - (C532 * C51021 + C531 * C49770) + C764 * C50757) *
                C113) *
               C50896 * C50874) *
              C1033 +
          (((C350 * C49763 -
             ((C117 * C296 + C50907 * C315) * C51021 +
              (C117 * C286 + C50907 * C297) * C49770) +
             C351 * C50757) *
                C110 +
            (C352 * C49763 - (C351 * C51021 + C350 * C49770) + C353 * C50757) *
                C111 +
            (C354 * C49763 - (C353 * C51021 + C352 * C49770) + C355 * C50757) *
                C112 +
            (C653 * C49763 - (C355 * C51021 + C354 * C49770) + C654 * C50757) *
                C113) *
               C50896 * C51037 +
           (((C117 * C894 + C50907 * C899) * C49770 +
             (C117 * C900 + C50907 * C909) * C51021 - C927 * C49763 -
             C928 * C50757) *
                C110 +
            (C927 * C49770 + C928 * C51021 - C929 * C49763 - C930 * C50757) *
                C111 +
            (C929 * C49770 + C930 * C51021 - C931 * C49763 - C932 * C50757) *
                C112 +
            (C931 * C49770 + C932 * C51021 -
             (C117 * C898 + C50907 * C907) * C49763 -
             (C117 * C908 + C50907 * C913) * C50757) *
                C113) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C49770 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C51021 -
             (C5351 + C5352 + C5353) * C49763 -
             (C5354 + C5355 + C5356) * C50757) *
                C2300 +
            ((C5353 + C5352 + C5351) * C49770 +
             (C5356 + C5355 + C5354) * C51021 -
             (C5359 + C5358 + C5357) * C49763 -
             (C5362 + C5361 + C5360) * C50757) *
                C50776) *
               C50896 * C51037 +
           (((C5733 + C5734 + C5735) * C49763 -
             ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
               C5311 * C473 + C5308 * C492) *
                  C51021 +
              (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
               C5311 * C463 + C5308 * C474) *
                  C49770) +
             (C5736 + C5737 + C5738) * C50757) *
                C2300 +
            ((C6069 + C6068 + C6067) * C49763 -
             ((C5738 + C5737 + C5736) * C51021 +
              (C5735 + C5734 + C5733) * C49770) +
             (C6072 + C6071 + C6070) * C50757) *
                C50776) *
               C50896 * C50874) *
              C1033 +
          ((((C5539 + C5540 + C5541) * C49763 -
             ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
               C5311 * C296 + C5308 * C315) *
                  C51021 +
              (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
               C5311 * C286 + C5308 * C297) *
                  C49770) +
             (C5542 + C5543 + C5544) * C50757) *
                C2300 +
            ((C5905 + C5904 + C5903) * C49763 -
             ((C5544 + C5543 + C5542) * C51021 +
              (C5541 + C5540 + C5539) * C49770) +
             (C5908 + C5907 + C5906) * C50757) *
                C50776) *
               C50896 * C51037 +
           (((C5311 * C894 + C5308 * C899 + C5312 * C1227 + C5309 * C1235 +
              C5313 * C4711 + C5310 * C4719) *
                 C49770 +
             (C5311 * C900 + C5308 * C909 + C5312 * C1234 + C5309 * C1239 +
              C5313 * C4718 + C5310 * C4723) *
                 C51021 -
             (C6283 + C6284 + C6285) * C49763 -
             (C6286 + C6287 + C6288) * C50757) *
                C2300 +
            ((C6285 + C6284 + C6283) * C49770 +
             (C6288 + C6287 + C6286) * C51021 -
             (C5313 * C6266 + C5310 * C6267 + C5312 * C1225 + C5309 * C1231 +
              C5311 * C896 + C5308 * C903) *
                 C49763 -
             (C5313 * C6268 + C5310 * C6269 + C5312 * C1230 + C5309 * C1237 +
              C5311 * C904 + C5308 * C911) *
                 C50757) *
                C50776) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C110 +
           (C171 * C1109 + C172 * C50752) * C111 +
           (C173 * C1109 + C174 * C50752) * C112 +
           (C175 * C1109 + C176 * C50752) * C113) *
              C50896 * C50810 * C1105 -
          ((C355 * C50752 + C354 * C1109) * C113 +
           (C353 * C50752 + C352 * C1109) * C112 +
           (C351 * C50752 + C350 * C1109) * C111 +
           ((C117 * C296 + C50907 * C315) * C50752 +
            (C117 * C286 + C50907 * C297) * C1109) *
               C110) *
              C50896 * C50810 * C1106 +
          (((C117 * C290 + C50907 * C305) * C1109 +
            (C117 * C306 + C50907 * C320) * C50752) *
               C110 +
           (C356 * C1109 + C357 * C50752) * C111 +
           (C358 * C1109 + C359 * C50752) * C112 +
           (C360 * C1109 + C361 * C50752) * C113) *
              C50896 * C50810 * C1107 -
          (((C117 * C1114 + C50907 * C1122) * C50752 +
            (C117 * C1110 + C50907 * C1115) * C1109) *
               C113 +
           ((C117 * C1116 + C50907 * C1123) * C50752 +
            (C117 * C1111 + C50907 * C1117) * C1109) *
               C112 +
           ((C117 * C1118 + C50907 * C1124) * C50752 +
            (C117 * C1112 + C50907 * C1119) * C1109) *
               C111 +
           ((C117 * C1120 + C50907 * C1125) * C50752 +
            (C117 * C1113 + C50907 * C1121) * C1109) *
               C110) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C110 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C111 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C112 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C113) *
              C50896 * C50810 * C1033 +
          ((C350 * C1036 -
            ((C117 * C296 + C50907 * C315) * C1030 +
             (C117 * C286 + C50907 * C297) * C1035) +
            C351 * C1031 - C352 * C1037 - C353 * C1032) *
               C110 +
           (C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
            C354 * C1037 - C355 * C1032) *
               C111 +
           (C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
            C653 * C1037 - C654 * C1032) *
               C112 +
           (C653 * C1036 - (C355 * C1030 + C354 * C1035) + C654 * C1031 -
            (C117 * C644 + C50907 * C645) * C1037 -
            (C117 * C646 + C50907 * C647) * C1032) *
               C113) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C2300 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C2302 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C2300 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C2303 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C2300 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C2304) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C2300 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C50776) *
               C2302 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C2300 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C50776) *
               C2303 +
           ((C2505 * C1036 - (C2506 * C1030 + C2507 * C1035) + C2508 * C1031 -
             C2509 * C1037 - C2510 * C1032) *
                C2300 +
            (C2509 * C1036 - (C2508 * C1030 + C2505 * C1035) + C2510 * C1031 -
             (C117 * C1110 + C50907 * C1115) * C1037 -
             (C117 * C1114 + C50907 * C1122) * C1032) *
                C50776) *
               C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C2300 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C2302 +
           ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
           C3577 * C2304) *
              C50810 * C1105 -
          (C3578 * C2304 +
           ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
           ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
              C50810 * C1106 +
          (C3577 * C2302 +
           ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
           ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
              C50810 * C1107 -
          ((((C117 * C3540 + C50907 * C3544) * C50752 +
             (C117 * C3538 + C50907 * C3541) * C1109) *
                C50776 +
            ((C117 * C3542 + C50907 * C3545) * C50752 +
             (C117 * C3539 + C50907 * C3543) * C1109) *
                C2300) *
               C2304 +
           ((C3564 + C3563) * C50776 + (C3576 + C3575) * C2300) * C2303 +
           C3578 * C2302) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1035 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C1030 -
            (C5351 + C5352 + C5353) * C1036 - (C5354 + C5355 + C5356) * C1031 +
            (C5357 + C5358 + C5359) * C1037 + (C5360 + C5361 + C5362) * C1032) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1035 + (C5356 + C5355 + C5354) * C1030 -
            (C5359 + C5358 + C5357) * C1036 - (C5362 + C5361 + C5360) * C1031 +
            (C5365 + C5364 + C5363) * C1037 + (C5368 + C5367 + C5366) * C1032) *
               C50776) *
              C50896 * C50810 * C1033 +
          (((C5539 + C5540 + C5541) * C1036 -
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C1030 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C1035) +
            (C5542 + C5543 + C5544) * C1031 - (C5903 + C5904 + C5905) * C1037 -
            (C5906 + C5907 + C5908) * C1032) *
               C2300 +
           ((C5905 + C5904 + C5903) * C1036 -
            ((C5544 + C5543 + C5542) * C1030 +
             (C5541 + C5540 + C5539) * C1035) +
            (C5908 + C5907 + C5906) * C1031 -
            (C5313 * C1224 + C5310 * C1229 + C5312 * C897 + C5309 * C905 +
             C5311 * C288 + C5308 * C301) *
                C1037 -
            (C5313 * C1228 + C5310 * C1236 + C5312 * C906 + C5309 * C912 +
             C5311 * C302 + C5308 * C318) *
                C1032) *
               C50776) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1109 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C50752) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1109 +
            (C5356 + C5355 + C5354) * C50752) *
               C50776) *
              C50896 * C50810 * C1105 -
          (((C5544 + C5543 + C5542) * C50752 +
            (C5541 + C5540 + C5539) * C1109) *
               C50776 +
           ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
             C5311 * C296 + C5308 * C315) *
                C50752 +
            (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
             C5311 * C286 + C5308 * C297) *
                C1109) *
               C2300) *
              C50896 * C50810 * C1106 +
          (((C5311 * C290 + C5308 * C305 + C5312 * C1576 + C5309 * C1584 +
             C5313 * C2678 + C5310 * C2681) *
                C1109 +
            (C5311 * C306 + C5308 * C320 + C5312 * C1583 + C5309 * C1588 +
             C5313 * C2682 + C5310 * C2687) *
                C50752) *
               C2300 +
           ((C5547 + C5546 + C5545) * C1109 +
            (C5550 + C5549 + C5548) * C50752) *
               C50776) *
              C50896 * C50810 * C1107 -
          (((C5313 * C3726 + C5310 * C3730 + C5312 * C3230 + C5309 * C3234 +
             C5311 * C1118 + C5308 * C1124) *
                C50752 +
            (C5313 * C3724 + C5310 * C3727 + C5312 * C3225 + C5309 * C3229 +
             C5311 * C1112 + C5308 * C1119) *
                C1109) *
               C50776 +
           ((C5313 * C3728 + C5310 * C3731 + C5312 * C3228 + C5309 * C3233 +
             C5311 * C1120 + C5308 * C1125) *
                C50752 +
            (C5313 * C3725 + C5310 * C3729 + C5312 * C3224 + C5309 * C3227 +
             C5311 * C1113 + C5308 * C1121) *
                C1109) *
               C2300) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C2300 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C50776) *
                C2302 +
            ((C3907 + C3908 - C3909 - C3910) * C2300 +
             (C3911 + C3912 - C3913 - C3914) * C50776) *
                C2303 +
            C3939 * C2304) *
               C1687 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C2300 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C50776) *
                C2302 +
            ((C4134 - (C4135 + C4136) + C4137) * C2300 +
             (C4138 - (C4139 + C4140) + C4141) * C50776) *
                C2303 +
            ((C4142 - (C4143 + C4144) + C4145) * C2300 +
             (C4146 - (C4147 + C4148) + C4149) * C50776) *
                C2304) *
               C50874) *
              C51036 +
          ((((C3909 - (C3908 + C3907) + C3910) * C2300 +
             (C3913 - (C3912 + C3911) + C3914) * C50776) *
                C2302 +
            ((C3917 - (C3916 + C3915) + C3918) * C2300 +
             (C3921 - (C3920 + C3919) + C3922) * C50776) *
                C2303 +
            ((C3923 - (C3924 + C3925) + C3926) * C2300 +
             (C3927 - (C3928 + C3929) + C3930) * C50776) *
                C2304) *
               C1687 +
           (((C4136 + C4135 - C4134 - C4137) * C2300 +
             (C4140 + C4139 - C4138 - C4141) * C50776) *
                C2302 +
            ((C4144 + C4143 - C4142 - C4145) * C2300 +
             (C4148 + C4147 - C4146 - C4149) * C50776) *
                C2303 +
            ((C4314 * C49770 + C4315 * C51021 - C3265 * C49763 -
              C3266 * C50757) *
                 C2300 +
             (C3265 * C49770 + C3266 * C51021 -
              (C117 * C3226 + C50907 * C3231) * C49763 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C110 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C111 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C112 +
            (C175 * C49770 + C176 * C51021 - C177 * C49763 - C178 * C50757) *
                C113) *
               C50896 * C1687 +
           ((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C110 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C111 +
            (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                C112 +
            (C763 * C49763 - (C532 * C51021 + C531 * C49770) + C764 * C50757) *
                C113) *
               C50896 * C50874) *
              C51036 +
          (((C350 * C49763 -
             ((C117 * C296 + C50907 * C315) * C51021 +
              (C117 * C286 + C50907 * C297) * C49770) +
             C351 * C50757) *
                C110 +
            (C352 * C49763 - (C351 * C51021 + C350 * C49770) + C353 * C50757) *
                C111 +
            (C354 * C49763 - (C353 * C51021 + C352 * C49770) + C355 * C50757) *
                C112 +
            (C653 * C49763 - (C355 * C51021 + C354 * C49770) + C654 * C50757) *
                C113) *
               C50896 * C1687 +
           (((C117 * C894 + C50907 * C899) * C49770 +
             (C117 * C900 + C50907 * C909) * C51021 - C927 * C49763 -
             C928 * C50757) *
                C110 +
            (C927 * C49770 + C928 * C51021 - C929 * C49763 - C930 * C50757) *
                C111 +
            (C929 * C49770 + C930 * C51021 - C931 * C49763 - C932 * C50757) *
                C112 +
            (C931 * C49770 + C932 * C51021 -
             (C117 * C898 + C50907 * C907) * C49763 -
             (C117 * C908 + C50907 * C913) * C50757) *
                C113) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C49770 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C51021 -
             (C5351 + C5352 + C5353) * C49763 -
             (C5354 + C5355 + C5356) * C50757) *
                C2300 +
            ((C5353 + C5352 + C5351) * C49770 +
             (C5356 + C5355 + C5354) * C51021 -
             (C5359 + C5358 + C5357) * C49763 -
             (C5362 + C5361 + C5360) * C50757) *
                C50776) *
               C50896 * C1687 +
           (((C5733 + C5734 + C5735) * C49763 -
             ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
               C5311 * C473 + C5308 * C492) *
                  C51021 +
              (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
               C5311 * C463 + C5308 * C474) *
                  C49770) +
             (C5736 + C5737 + C5738) * C50757) *
                C2300 +
            ((C6069 + C6068 + C6067) * C49763 -
             ((C5738 + C5737 + C5736) * C51021 +
              (C5735 + C5734 + C5733) * C49770) +
             (C6072 + C6071 + C6070) * C50757) *
                C50776) *
               C50896 * C50874) *
              C51036 +
          ((((C5539 + C5540 + C5541) * C49763 -
             ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
               C5311 * C296 + C5308 * C315) *
                  C51021 +
              (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
               C5311 * C286 + C5308 * C297) *
                  C49770) +
             (C5542 + C5543 + C5544) * C50757) *
                C2300 +
            ((C5905 + C5904 + C5903) * C49763 -
             ((C5544 + C5543 + C5542) * C51021 +
              (C5541 + C5540 + C5539) * C49770) +
             (C5908 + C5907 + C5906) * C50757) *
                C50776) *
               C50896 * C1687 +
           (((C5311 * C894 + C5308 * C899 + C5312 * C1227 + C5309 * C1235 +
              C5313 * C4711 + C5310 * C4719) *
                 C49770 +
             (C5311 * C900 + C5308 * C909 + C5312 * C1234 + C5309 * C1239 +
              C5313 * C4718 + C5310 * C4723) *
                 C51021 -
             (C6283 + C6284 + C6285) * C49763 -
             (C6286 + C6287 + C6288) * C50757) *
                C2300 +
            ((C6285 + C6284 + C6283) * C49770 +
             (C6288 + C6287 + C6286) * C51021 -
             (C5313 * C6266 + C5310 * C6267 + C5312 * C1225 + C5309 * C1231 +
              C5311 * C896 + C5308 * C903) *
                 C49763 -
             (C5313 * C6268 + C5310 * C6269 + C5312 * C1230 + C5309 * C1237 +
              C5311 * C904 + C5308 * C911) *
                 C50757) *
                C50776) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C51083 -
           (C4316 * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C51084 +
           ((((C117 * C467 + C50907 * C482) * C1109 +
              (C117 * C483 + C50907 * C497) * C50752) *
                 C2300 +
             (C533 * C1109 + C534 * C50752) * C50776) *
                C2302 +
            ((C3757 + C3758) * C2300 + (C3745 + C3746) * C50776) * C2303 +
            ((C3759 + C3760) * C2300 + (C3751 + C3752) * C50776) * C2304) *
               C2103) *
              C51036 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            ((C4317 + C4318) * C2300 + (C4310 + C4311) * C50776) * C2304) *
               C51084 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C51083 -
           ((((C117 * C3726 + C50907 * C3730) * C50752 +
              (C117 * C3724 + C50907 * C3727) * C1109) *
                 C50776 +
             ((C117 * C3728 + C50907 * C3731) * C50752 +
              (C117 * C3725 + C50907 * C3729) * C1109) *
                 C2300) *
                C2304 +
            ((C3752 + C3751) * C50776 + (C3760 + C3759) * C2300) * C2303 +
            ((C3746 + C3745) * C50776 + (C3758 + C3757) * C2300) * C2302) *
               C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C110 +
            (C171 * C1109 + C172 * C50752) * C111 +
            (C173 * C1109 + C174 * C50752) * C112 +
            (C175 * C1109 + C176 * C50752) * C113) *
               C50896 * C51083 -
           ((C532 * C50752 + C531 * C1109) * C113 +
            (C530 * C50752 + C529 * C1109) * C112 +
            (C528 * C50752 + C527 * C1109) * C111 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C110) *
               C50896 * C51084 +
           (((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C110 +
            (C533 * C1109 + C534 * C50752) * C111 +
            (C535 * C1109 + C536 * C50752) * C112 +
            (C537 * C1109 + C538 * C50752) * C113) *
               C50896 * C2103) *
              C51036 +
          ((((C117 * C894 + C50907 * C899) * C1109 +
             (C117 * C900 + C50907 * C909) * C50752) *
                C110 +
            (C927 * C1109 + C928 * C50752) * C111 +
            (C929 * C1109 + C930 * C50752) * C112 +
            (C931 * C1109 + C932 * C50752) * C113) *
               C50896 * C51084 -
           ((C355 * C50752 + C354 * C1109) * C113 +
            (C353 * C50752 + C352 * C1109) * C112 +
            (C351 * C50752 + C350 * C1109) * C111 +
            ((C117 * C296 + C50907 * C315) * C50752 +
             (C117 * C286 + C50907 * C297) * C1109) *
                C110) *
               C50896 * C51083 -
           (((C117 * C1228 + C50907 * C1236) * C50752 +
             (C117 * C1224 + C50907 * C1229) * C1109) *
                C113 +
            ((C117 * C1230 + C50907 * C1237) * C50752 +
             (C117 * C1225 + C50907 * C1231) * C1109) *
                C112 +
            ((C117 * C1232 + C50907 * C1238) * C50752 +
             (C117 * C1226 + C50907 * C1233) * C1109) *
                C111 +
            ((C117 * C1234 + C50907 * C1239) * C50752 +
             (C117 * C1227 + C50907 * C1235) * C1109) *
                C110) *
               C50896 * C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C2300 +
            ((C5353 + C5352 + C5351) * C1109 +
             (C5356 + C5355 + C5354) * C50752) *
                C50776) *
               C50896 * C51083 -
           (((C5738 + C5737 + C5736) * C50752 +
             (C5735 + C5734 + C5733) * C1109) *
                C50776 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C2300) *
               C50896 * C51084 +
           (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
              C5313 * C5696 + C5310 * C5699) *
                 C1109 +
             (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
              C5313 * C5700 + C5310 * C5705) *
                 C50752) *
                C2300 +
            ((C5741 + C5740 + C5739) * C1109 +
             (C5744 + C5743 + C5742) * C50752) *
                C50776) *
               C50896 * C2103) *
              C51036 +
          ((((C5311 * C894 + C5308 * C899 + C5312 * C1227 + C5309 * C1235 +
              C5313 * C4711 + C5310 * C4719) *
                 C1109 +
             (C5311 * C900 + C5308 * C909 + C5312 * C1234 + C5309 * C1239 +
              C5313 * C4718 + C5310 * C4723) *
                 C50752) *
                C2300 +
            ((C6285 + C6284 + C6283) * C1109 +
             (C6288 + C6287 + C6286) * C50752) *
                C50776) *
               C50896 * C51084 -
           (((C5544 + C5543 + C5542) * C50752 +
             (C5541 + C5540 + C5539) * C1109) *
                C50776 +
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C50752 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C1109) *
                C2300) *
               C50896 * C51083 -
           (((C5313 * C6680 + C5310 * C6684 + C5312 * C4716 + C5309 * C4722 +
              C5311 * C1232 + C5308 * C1238) *
                 C50752 +
             (C5313 * C6678 + C5310 * C6681 + C5312 * C4710 + C5309 * C4717 +
              C5311 * C1226 + C5308 * C1233) *
                 C1109) *
                C50776 +
            ((C5313 * C6682 + C5310 * C6685 + C5312 * C4718 + C5309 * C4723 +
              C5311 * C1234 + C5308 * C1239) *
                 C50752 +
             (C5313 * C6679 + C5310 * C6683 + C5312 * C4711 + C5309 * C4719 +
              C5311 * C1227 + C5308 * C1235) *
                 C1109) *
                C2300) *
               C50896 * C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50907 * C129) * C1035 +
                (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
                C172 * C1031 + C173 * C1037 + C174 * C1032) *
                   C110 +
               (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                C175 * C1037 + C176 * C1032) *
                   C111 +
               (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                C177 * C1037 + C178 * C1032) *
                   C112 +
               (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
                C179 * C1037 + C180 * C1032) *
                   C113) *
                  C50896 * C1687 +
              ((C527 * C1036 -
                ((C117 * C473 + C50907 * C492) * C1030 +
                 (C117 * C463 + C50907 * C474) * C1035) +
                C528 * C1031 - C529 * C1037 - C530 * C1032) *
                   C110 +
               (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
                C531 * C1037 - C532 * C1032) *
                   C111 +
               (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
                C763 * C1037 - C764 * C1032) *
                   C112 +
               (C763 * C1036 - (C532 * C1030 + C531 * C1035) + C764 * C1031 -
                (C117 * C754 + C50907 * C755) * C1037 -
                (C117 * C756 + C50907 * C757) * C1032) *
                   C113) *
                  C50896 * C50874) *
             C50798 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50907 * C129) * C1109 +
                 (C117 * C130 + C50907 * C143) * C50752) *
                    C110 +
                (C171 * C1109 + C172 * C50752) * C111 +
                (C173 * C1109 + C174 * C50752) * C112 +
                (C175 * C1109 + C176 * C50752) * C113) *
                   C50896 * C1687 -
               ((C532 * C50752 + C531 * C1109) * C113 +
                (C530 * C50752 + C529 * C1109) * C112 +
                (C528 * C50752 + C527 * C1109) * C111 +
                ((C117 * C473 + C50907 * C492) * C50752 +
                 (C117 * C463 + C50907 * C474) * C1109) *
                    C110) *
                   C50896 * C50874) *
                  C280 +
              ((((C117 * C894 + C50907 * C899) * C1109 +
                 (C117 * C900 + C50907 * C909) * C50752) *
                    C110 +
                (C927 * C1109 + C928 * C50752) * C111 +
                (C929 * C1109 + C930 * C50752) * C112 +
                (C931 * C1109 + C932 * C50752) * C113) *
                   C50896 * C50874 -
               ((C355 * C50752 + C354 * C1109) * C113 +
                (C353 * C50752 + C352 * C1109) * C112 +
                (C351 * C50752 + C350 * C1109) * C111 +
                ((C117 * C296 + C50907 * C315) * C50752 +
                 (C117 * C286 + C50907 * C297) * C1109) *
                    C110) *
                   C50896 * C1687) *
                  C281 +
              ((((C117 * C290 + C50907 * C305) * C1109 +
                 (C117 * C306 + C50907 * C320) * C50752) *
                    C110 +
                (C356 * C1109 + C357 * C50752) * C111 +
                (C358 * C1109 + C359 * C50752) * C112 +
                (C360 * C1109 + C361 * C50752) * C113) *
                   C50896 * C1687 -
               (((C117 * C1577 + C50907 * C1585) * C50752 +
                 (C117 * C1573 + C50907 * C1578) * C1109) *
                    C113 +
                ((C117 * C1579 + C50907 * C1586) * C50752 +
                 (C117 * C1574 + C50907 * C1580) * C1109) *
                    C112 +
                ((C117 * C1581 + C50907 * C1587) * C50752 +
                 (C117 * C1575 + C50907 * C1582) * C1109) *
                    C111 +
                ((C117 * C1583 + C50907 * C1588) * C50752 +
                 (C117 * C1576 + C50907 * C1584) * C1109) *
                    C110) *
                   C50896 * C50874) *
                  C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C110 +
           (C171 * C1109 + C172 * C50752) * C111 +
           (C173 * C1109 + C174 * C50752) * C112 +
           (C175 * C1109 + C176 * C50752) * C113) *
              C50896 * C1853 -
          ((C532 * C50752 + C531 * C1109) * C113 +
           (C530 * C50752 + C529 * C1109) * C112 +
           (C528 * C50752 + C527 * C1109) * C111 +
           ((C117 * C473 + C50907 * C492) * C50752 +
            (C117 * C463 + C50907 * C474) * C1109) *
               C110) *
              C50896 * C1854 +
          (((C117 * C467 + C50907 * C482) * C1109 +
            (C117 * C483 + C50907 * C497) * C50752) *
               C110 +
           (C533 * C1109 + C534 * C50752) * C111 +
           (C535 * C1109 + C536 * C50752) * C112 +
           (C537 * C1109 + C538 * C50752) * C113) *
              C50896 * C1855 -
          (((C117 * C1861 + C50907 * C1869) * C50752 +
            (C117 * C1857 + C50907 * C1862) * C1109) *
               C113 +
           ((C117 * C1863 + C50907 * C1870) * C50752 +
            (C117 * C1858 + C50907 * C1864) * C1109) *
               C112 +
           ((C117 * C1865 + C50907 * C1871) * C50752 +
            (C117 * C1859 + C50907 * C1866) * C1109) *
               C111 +
           ((C117 * C1867 + C50907 * C1872) * C50752 +
            (C117 * C1860 + C50907 * C1868) * C1109) *
               C110) *
              C50896 * C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C2300 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C2302 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C2300 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C2303 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C2300 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C2304) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C2300 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C50776) *
               C2302 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C2300 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50776) *
               C2303 +
           ((C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
             C3029 * C1037 - C3030 * C1032) *
                C2300 +
            (C3029 * C1036 - (C2704 * C1030 + C2703 * C1035) + C3030 * C1031 -
             (C117 * C1573 + C50907 * C1578) * C1037 -
             (C117 * C1577 + C50907 * C1585) * C1032) *
                C50776) *
               C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C1687 -
           (C4316 * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            ((C4317 + C4318) * C2300 + (C4310 + C4311) * C50776) * C2304) *
               C50874 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C1687) *
              C281 +
          ((C3577 * C2302 +
            ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
            ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
               C1687 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             ((C117 * C4299 + C50907 * C4302) * C50752 +
              (C117 * C4296 + C50907 * C4300) * C1109) *
                 C2300) *
                C2304 +
            ((C4311 + C4310) * C50776 + (C4318 + C4317) * C2300) * C2303 +
            C4316 * C2302) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C2300 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C2302 +
           ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
           C3577 * C2304) *
              C1853 -
          (C4316 * C2304 +
           ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
           ((C528 * C50752 + C527 * C1109) * C50776 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C2300) *
               C2302) *
              C1854 +
          ((((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C2300 +
            (C533 * C1109 + C534 * C50752) * C50776) *
               C2302 +
           ((C3757 + C3758) * C2300 + (C3745 + C3746) * C50776) * C2303 +
           ((C3759 + C3760) * C2300 + (C3751 + C3752) * C50776) * C2304) *
              C1855 -
          ((((C117 * C4712 + C50907 * C4720) * C50752 +
             (C117 * C4708 + C50907 * C4713) * C1109) *
                C50776 +
            ((C117 * C4714 + C50907 * C4721) * C50752 +
             (C117 * C4709 + C50907 * C4715) * C1109) *
                C2300) *
               C2304 +
           (((C117 * C4716 + C50907 * C4722) * C50752 +
             (C117 * C4710 + C50907 * C4717) * C1109) *
                C50776 +
            ((C117 * C4718 + C50907 * C4723) * C50752 +
             (C117 * C4711 + C50907 * C4719) * C1109) *
                C2300) *
               C2303 +
           (((C117 * C1865 + C50907 * C1871) * C50752 +
             (C117 * C1859 + C50907 * C1866) * C1109) *
                C50776 +
            ((C117 * C1867 + C50907 * C1872) * C50752 +
             (C117 * C1860 + C50907 * C1868) * C1109) *
                C2300) *
               C2302) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1035 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C1030 -
            (C5351 + C5352 + C5353) * C1036 - (C5354 + C5355 + C5356) * C1031 +
            (C5357 + C5358 + C5359) * C1037 + (C5360 + C5361 + C5362) * C1032) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1035 + (C5356 + C5355 + C5354) * C1030 -
            (C5359 + C5358 + C5357) * C1036 - (C5362 + C5361 + C5360) * C1031 +
            (C5365 + C5364 + C5363) * C1037 + (C5368 + C5367 + C5366) * C1032) *
               C50776) *
              C50896 * C1687 +
          (((C5733 + C5734 + C5735) * C1036 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C1030 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1035) +
            (C5736 + C5737 + C5738) * C1031 - (C6067 + C6068 + C6069) * C1037 -
            (C6070 + C6071 + C6072) * C1032) *
               C2300 +
           ((C6069 + C6068 + C6067) * C1036 -
            ((C5738 + C5737 + C5736) * C1030 +
             (C5735 + C5734 + C5733) * C1035) +
            (C6072 + C6071 + C6070) * C1031 -
            (C5313 * C1857 + C5310 * C1862 + C5312 * C470 + C5309 * C488 +
             C5311 * C465 + C5308 * C478) *
                C1037 -
            (C5313 * C1861 + C5310 * C1869 + C5312 * C489 + C5309 * C500 +
             C5311 * C479 + C5308 * C495) *
                C1032) *
               C50776) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C2300 +
            ((C5353 + C5352 + C5351) * C1109 +
             (C5356 + C5355 + C5354) * C50752) *
                C50776) *
               C50896 * C1687 -
           (((C5738 + C5737 + C5736) * C50752 +
             (C5735 + C5734 + C5733) * C1109) *
                C50776 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C2300) *
               C50896 * C50874) *
              C280 +
          ((((C5311 * C894 + C5308 * C899 + C5312 * C1227 + C5309 * C1235 +
              C5313 * C4711 + C5310 * C4719) *
                 C1109 +
             (C5311 * C900 + C5308 * C909 + C5312 * C1234 + C5309 * C1239 +
              C5313 * C4718 + C5310 * C4723) *
                 C50752) *
                C2300 +
            ((C6285 + C6284 + C6283) * C1109 +
             (C6288 + C6287 + C6286) * C50752) *
                C50776) *
               C50896 * C50874 -
           (((C5544 + C5543 + C5542) * C50752 +
             (C5541 + C5540 + C5539) * C1109) *
                C50776 +
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C50752 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C1109) *
                C2300) *
               C50896 * C1687) *
              C281 +
          ((((C5311 * C290 + C5308 * C305 + C5312 * C1576 + C5309 * C1584 +
              C5313 * C2678 + C5310 * C2681) *
                 C1109 +
             (C5311 * C306 + C5308 * C320 + C5312 * C1583 + C5309 * C1588 +
              C5313 * C2682 + C5310 * C2687) *
                 C50752) *
                C2300 +
            ((C5547 + C5546 + C5545) * C1109 +
             (C5550 + C5549 + C5548) * C50752) *
                C50776) *
               C50896 * C1687 -
           (((C5313 * C4712 + C5310 * C4720 + C5312 * C2684 + C5309 * C2688 +
              C5311 * C1581 + C5308 * C1587) *
                 C50752 +
             (C5313 * C4708 + C5310 * C4713 + C5312 * C2679 + C5309 * C2683 +
              C5311 * C1575 + C5308 * C1582) *
                 C1109) *
                C50776 +
            ((C5313 * C4714 + C5310 * C4721 + C5312 * C2682 + C5309 * C2687 +
              C5311 * C1583 + C5308 * C1588) *
                 C50752 +
             (C5313 * C4709 + C5310 * C4715 + C5312 * C2678 + C5309 * C2681 +
              C5311 * C1576 + C5308 * C1584) *
                 C1109) *
                C2300) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1109 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C50752) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1109 +
            (C5356 + C5355 + C5354) * C50752) *
               C50776) *
              C50896 * C1853 -
          (((C5738 + C5737 + C5736) * C50752 +
            (C5735 + C5734 + C5733) * C1109) *
               C50776 +
           ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
             C5311 * C473 + C5308 * C492) *
                C50752 +
            (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
             C5311 * C463 + C5308 * C474) *
                C1109) *
               C2300) *
              C50896 * C1854 +
          (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
             C5313 * C5696 + C5310 * C5699) *
                C1109 +
            (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
             C5313 * C5700 + C5310 * C5705) *
                C50752) *
               C2300 +
           ((C5741 + C5740 + C5739) * C1109 +
            (C5744 + C5743 + C5742) * C50752) *
               C50776) *
              C50896 * C1855 -
          (((C5313 * C7564 + C5310 * C7568 + C5312 * C5702 + C5309 * C5706 +
             C5311 * C1865 + C5308 * C1871) *
                C50752 +
            (C5313 * C7562 + C5310 * C7565 + C5312 * C5697 + C5309 * C5701 +
             C5311 * C1859 + C5308 * C1866) *
                C1109) *
               C50776 +
           ((C5313 * C7566 + C5310 * C7569 + C5312 * C5700 + C5309 * C5705 +
             C5311 * C1867 + C5308 * C1872) *
                C50752 +
            (C5313 * C7563 + C5310 * C7567 + C5312 * C5696 + C5309 * C5699 +
             C5311 * C1860 + C5308 * C1868) *
                C1109) *
               C2300) *
              C50896 * C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C2300 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C3907 + C3908 - C3909 - C3910) * C2300 +
            (C3911 + C3912 - C3913 - C3914) * C50776) *
               C2303 +
           C3939 * C2304) *
              C51083 +
          (((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C2300 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C50776) *
               C2302 +
           ((C4134 - (C4135 + C4136) + C4137) * C2300 +
            (C4138 - (C4139 + C4140) + C4141) * C50776) *
               C2303 +
           ((C4142 - (C4143 + C4144) + C4145) * C2300 +
            (C4146 - (C4147 + C4148) + C4149) * C50776) *
               C2304) *
              C51084 +
          ((((C117 * C467 + C50907 * C482) * C49770 +
             (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
             C534 * C50757) *
                C2300 +
            (C533 * C49770 + C534 * C51021 - C535 * C49763 - C536 * C50757) *
                C50776) *
               C2302 +
           ((C3753 * C49770 + C3754 * C51021 - C2705 * C49763 -
             C2706 * C50757) *
                C2300 +
            (C2705 * C49770 + C2706 * C51021 -
             (C117 * C1225 + C50907 * C1231) * C49763 -
             (C117 * C1230 + C50907 * C1237) * C50757) *
                C50776) *
               C2303 +
           ((C3755 * C49770 + C3756 * C51021 - C2707 * C49763 -
             C2708 * C50757) *
                C2300 +
            (C2707 * C49770 + C2708 * C51021 -
             (C117 * C2680 + C50907 * C2685) * C49763 -
             (C117 * C2686 + C50907 * C2689) * C50757) *
                C50776) *
               C2304) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C49770 +
            (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
            C172 * C50757) *
               C110 +
           (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
               C111 +
           (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
               C112 +
           (C175 * C49770 + C176 * C51021 - C177 * C49763 - C178 * C50757) *
               C113) *
              C50896 * C51083 +
          ((C527 * C49763 -
            ((C117 * C473 + C50907 * C492) * C51021 +
             (C117 * C463 + C50907 * C474) * C49770) +
            C528 * C50757) *
               C110 +
           (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
               C111 +
           (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
               C112 +
           (C763 * C49763 - (C532 * C51021 + C531 * C49770) + C764 * C50757) *
               C113) *
              C50896 * C51084 +
          (((C117 * C467 + C50907 * C482) * C49770 +
            (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
            C534 * C50757) *
               C110 +
           (C533 * C49770 + C534 * C51021 - C535 * C49763 - C536 * C50757) *
               C111 +
           (C535 * C49770 + C536 * C51021 - C537 * C49763 - C538 * C50757) *
               C112 +
           (C537 * C49770 + C538 * C51021 -
            (C117 * C471 + C50907 * C490) * C49763 -
            (C117 * C491 + C50907 * C501) * C50757) *
               C113) *
              C50896 * C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C51021 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50757) *
               C2300 +
           ((C5353 + C5352 + C5351) * C49770 +
            (C5356 + C5355 + C5354) * C51021 -
            (C5359 + C5358 + C5357) * C49763 -
            (C5362 + C5361 + C5360) * C50757) *
               C50776) *
              C50896 * C51083 +
          (((C5733 + C5734 + C5735) * C49763 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C51021 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C49770) +
            (C5736 + C5737 + C5738) * C50757) *
               C2300 +
           ((C6069 + C6068 + C6067) * C49763 -
            ((C5738 + C5737 + C5736) * C51021 +
             (C5735 + C5734 + C5733) * C49770) +
            (C6072 + C6071 + C6070) * C50757) *
               C50776) *
              C50896 * C51084 +
          (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
             C5313 * C5696 + C5310 * C5699) *
                C49770 +
            (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
             C5313 * C5700 + C5310 * C5705) *
                C51021 -
            (C5739 + C5740 + C5741) * C49763 -
            (C5742 + C5743 + C5744) * C50757) *
               C2300 +
           ((C5741 + C5740 + C5739) * C49770 +
            (C5744 + C5743 + C5742) * C51021 -
            (C5313 * C5698 + C5310 * C5703 + C5312 * C1858 + C5309 * C1864 +
             C5311 * C469 + C5308 * C486) *
                C49763 -
            (C5313 * C5704 + C5310 * C5707 + C5312 * C1863 + C5309 * C1870 +
             C5311 * C487 + C5308 * C499) *
                C50757) *
               C50776) *
              C50896 * C2103) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C110 +
            (C171 * C1109 + C172 * C50752) * C111 +
            (C173 * C1109 + C174 * C50752) * C112 +
            (C175 * C1109 + C176 * C50752) * C113) *
               C50896 * C1687 -
           ((C532 * C50752 + C531 * C1109) * C113 +
            (C530 * C50752 + C529 * C1109) * C112 +
            (C528 * C50752 + C527 * C1109) * C111 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C110) *
               C50896 * C50874) *
              C280 +
          ((((C117 * C894 + C50907 * C899) * C1109 +
             (C117 * C900 + C50907 * C909) * C50752) *
                C110 +
            (C927 * C1109 + C928 * C50752) * C111 +
            (C929 * C1109 + C930 * C50752) * C112 +
            (C931 * C1109 + C932 * C50752) * C113) *
               C50896 * C50874 -
           ((C355 * C50752 + C354 * C1109) * C113 +
            (C353 * C50752 + C352 * C1109) * C112 +
            (C351 * C50752 + C350 * C1109) * C111 +
            ((C117 * C296 + C50907 * C315) * C50752 +
             (C117 * C286 + C50907 * C297) * C1109) *
                C110) *
               C50896 * C1687) *
              C281 +
          ((((C117 * C290 + C50907 * C305) * C1109 +
             (C117 * C306 + C50907 * C320) * C50752) *
                C110 +
            (C356 * C1109 + C357 * C50752) * C111 +
            (C358 * C1109 + C359 * C50752) * C112 +
            (C360 * C1109 + C361 * C50752) * C113) *
               C50896 * C1687 -
           (((C117 * C1577 + C50907 * C1585) * C50752 +
             (C117 * C1573 + C50907 * C1578) * C1109) *
                C113 +
            ((C117 * C1579 + C50907 * C1586) * C50752 +
             (C117 * C1574 + C50907 * C1580) * C1109) *
                C112 +
            ((C117 * C1581 + C50907 * C1587) * C50752 +
             (C117 * C1575 + C50907 * C1582) * C1109) *
                C111 +
            ((C117 * C1583 + C50907 * C1588) * C50752 +
             (C117 * C1576 + C50907 * C1584) * C1109) *
                C110) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C110 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C111 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C112 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C113) *
              C50896 * C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50907 * C492) * C1030 +
             (C117 * C463 + C50907 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C110 +
           (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
            C531 * C1037 - C532 * C1032) *
               C111 +
           (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
            C763 * C1037 - C764 * C1032) *
               C112 +
           (C763 * C1036 - (C532 * C1030 + C531 * C1035) + C764 * C1031 -
            (C117 * C754 + C50907 * C755) * C1037 -
            (C117 * C756 + C50907 * C757) * C1032) *
               C113) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C2300 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C2302 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C2300 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C2303 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C2300 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C2304) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C2300 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C50776) *
               C2302 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C2300 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50776) *
               C2303 +
           ((C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
             C3029 * C1037 - C3030 * C1032) *
                C2300 +
            (C3029 * C1036 - (C2704 * C1030 + C2703 * C1035) + C3030 * C1031 -
             (C117 * C1573 + C50907 * C1578) * C1037 -
             (C117 * C1577 + C50907 * C1585) * C1032) *
                C50776) *
               C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C1687 -
           (C4316 * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            ((C4317 + C4318) * C2300 + (C4310 + C4311) * C50776) * C2304) *
               C50874 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C1687) *
              C281 +
          ((C3577 * C2302 +
            ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
            ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
               C1687 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             ((C117 * C4299 + C50907 * C4302) * C50752 +
              (C117 * C4296 + C50907 * C4300) * C1109) *
                 C2300) *
                C2304 +
            ((C4311 + C4310) * C50776 + (C4318 + C4317) * C2300) * C2303 +
            C4316 * C2302) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1035 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C1030 -
            (C5351 + C5352 + C5353) * C1036 - (C5354 + C5355 + C5356) * C1031 +
            (C5357 + C5358 + C5359) * C1037 + (C5360 + C5361 + C5362) * C1032) *
               C2300 +
           ((C5353 + C5352 + C5351) * C1035 + (C5356 + C5355 + C5354) * C1030 -
            (C5359 + C5358 + C5357) * C1036 - (C5362 + C5361 + C5360) * C1031 +
            (C5365 + C5364 + C5363) * C1037 + (C5368 + C5367 + C5366) * C1032) *
               C50776) *
              C50896 * C1687 +
          (((C5733 + C5734 + C5735) * C1036 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C1030 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1035) +
            (C5736 + C5737 + C5738) * C1031 - (C6067 + C6068 + C6069) * C1037 -
            (C6070 + C6071 + C6072) * C1032) *
               C2300 +
           ((C6069 + C6068 + C6067) * C1036 -
            ((C5738 + C5737 + C5736) * C1030 +
             (C5735 + C5734 + C5733) * C1035) +
            (C6072 + C6071 + C6070) * C1031 -
            (C5313 * C1857 + C5310 * C1862 + C5312 * C470 + C5309 * C488 +
             C5311 * C465 + C5308 * C478) *
                C1037 -
            (C5313 * C1861 + C5310 * C1869 + C5312 * C489 + C5309 * C500 +
             C5311 * C479 + C5308 * C495) *
                C1032) *
               C50776) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C2300 +
            ((C5353 + C5352 + C5351) * C1109 +
             (C5356 + C5355 + C5354) * C50752) *
                C50776) *
               C50896 * C1687 -
           (((C5738 + C5737 + C5736) * C50752 +
             (C5735 + C5734 + C5733) * C1109) *
                C50776 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C2300) *
               C50896 * C50874) *
              C280 +
          ((((C5311 * C894 + C5308 * C899 + C5312 * C1227 + C5309 * C1235 +
              C5313 * C4711 + C5310 * C4719) *
                 C1109 +
             (C5311 * C900 + C5308 * C909 + C5312 * C1234 + C5309 * C1239 +
              C5313 * C4718 + C5310 * C4723) *
                 C50752) *
                C2300 +
            ((C6285 + C6284 + C6283) * C1109 +
             (C6288 + C6287 + C6286) * C50752) *
                C50776) *
               C50896 * C50874 -
           (((C5544 + C5543 + C5542) * C50752 +
             (C5541 + C5540 + C5539) * C1109) *
                C50776 +
            ((C5313 * C1234 + C5310 * C1239 + C5312 * C900 + C5309 * C909 +
              C5311 * C296 + C5308 * C315) *
                 C50752 +
             (C5313 * C1227 + C5310 * C1235 + C5312 * C894 + C5309 * C899 +
              C5311 * C286 + C5308 * C297) *
                 C1109) *
                C2300) *
               C50896 * C1687) *
              C281 +
          ((((C5311 * C290 + C5308 * C305 + C5312 * C1576 + C5309 * C1584 +
              C5313 * C2678 + C5310 * C2681) *
                 C1109 +
             (C5311 * C306 + C5308 * C320 + C5312 * C1583 + C5309 * C1588 +
              C5313 * C2682 + C5310 * C2687) *
                 C50752) *
                C2300 +
            ((C5547 + C5546 + C5545) * C1109 +
             (C5550 + C5549 + C5548) * C50752) *
                C50776) *
               C50896 * C1687 -
           (((C5313 * C4712 + C5310 * C4720 + C5312 * C2684 + C5309 * C2688 +
              C5311 * C1581 + C5308 * C1587) *
                 C50752 +
             (C5313 * C4708 + C5310 * C4713 + C5312 * C2679 + C5309 * C2683 +
              C5311 * C1575 + C5308 * C1582) *
                 C1109) *
                C50776 +
            ((C5313 * C4714 + C5310 * C4721 + C5312 * C2682 + C5309 * C2687 +
              C5311 * C1583 + C5308 * C1588) *
                 C50752 +
             (C5313 * C4709 + C5310 * C4715 + C5312 * C2678 + C5309 * C2681 +
              C5311 * C1576 + C5308 * C1584) *
                 C1109) *
                C2300) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C641 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C51077 -
            (C10878 + C10879) * C642 - (C10880 + C10881) * C51078 +
            C10894 * C643 + C10895 * C638) *
               C51079 +
           ((C10879 + C10878) * C641 + (C10881 + C10880) * C51077 -
            (C10883 + C10882) * C642 - (C10885 + C10884) * C51078 +
            (C10887 + C10886) * C643 + (C10889 + C10888) * C638) *
               C51080 +
           (C10894 * C641 + C10895 * C51077 - C10896 * C642 - C10897 * C51078 +
            (C10891 + C10890) * C643 + (C10893 + C10892) * C638) *
               C8156) *
              C50896 * C50810 * C51036 +
          (((C11076 + C11077) * C642 -
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C51077 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C641) +
            (C11078 + C11079) * C51078 - C11432 * C643 - C11433 * C638) *
               C51079 +
           ((C11080 + C11081) * C642 -
            ((C11079 + C11078) * C51077 + (C11077 + C11076) * C641) +
            (C11082 + C11083) * C51078 - (C11442 + C11443) * C643 -
            (C11444 + C11445) * C638) *
               C51080 +
           ((C11443 + C11442) * C642 - (C11433 * C51077 + C11432 * C641) +
            (C11445 + C11444) * C51078 -
            (C10844 * C898 + C50971 * C907 + C10843 * C289 + C51050 * C303) *
                C643 -
            (C10844 * C908 + C50971 * C913 + C10843 * C304 + C51050 * C319) *
                C638) *
               C8156) *
              C50896 * C50810 * C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C283 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                C51079 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                C51080 +
            (C10894 * C283 + C10895 * C278 - C10896 * C284 - C10897 * C50757) *
                C8156) *
               C50896 * C51037 +
           (((C11270 + C11271) * C284 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C278 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C283) +
             (C11272 + C11273) * C50757) *
                C51079 +
            ((C11274 + C11275) * C284 -
             ((C11273 + C11272) * C278 + (C11271 + C11270) * C283) +
             (C11276 + C11277) * C50757) *
                C51080 +
            ((C11603 + C11602) * C284 - (C11593 * C278 + C11592 * C283) +
             (C11605 + C11604) * C50757) *
                C8156) *
               C50896 * C50874) *
              C51036 +
          ((((C11076 + C11077) * C284 -
             ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                  C278 +
              (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                  C283) +
             (C11078 + C11079) * C50757) *
                C51079 +
            ((C11080 + C11081) * C284 -
             ((C11079 + C11078) * C278 + (C11077 + C11076) * C283) +
             (C11082 + C11083) * C50757) *
                C51080 +
            ((C11443 + C11442) * C284 - (C11433 * C278 + C11432 * C283) +
             (C11445 + C11444) * C50757) *
                C8156) *
               C50896 * C51037 +
           (((C10843 * C894 + C51050 * C899 + C10844 * C1227 + C50971 * C1235) *
                 C283 +
             (C10843 * C900 + C51050 * C909 + C10844 * C1234 + C50971 * C1239) *
                 C278 -
             (C11816 + C11817) * C284 - (C11818 + C11819) * C50757) *
                C51079 +
            ((C11817 + C11816) * C283 + (C11819 + C11818) * C278 -
             (C11820 + C11821) * C284 - (C11822 + C11823) * C50757) *
                C51080 +
            ((C11821 + C11820) * C283 + (C11823 + C11822) * C278 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C284 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C50757) *
                C8156) *
               C50896 * C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C283 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
               C51079 +
           ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
            (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
               C51080 +
           (C10894 * C283 + C10895 * C278 - C10896 * C284 - C10897 * C50757) *
               C8156) *
              C50896 * C50810 * C280 +
          (((C11076 + C11077) * C284 -
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C278 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C283) +
            (C11078 + C11079) * C50757) *
               C51079 +
           ((C11080 + C11081) * C284 -
            ((C11079 + C11078) * C278 + (C11077 + C11076) * C283) +
            (C11082 + C11083) * C50757) *
               C51080 +
           ((C10843 * C288 + C51050 * C301 + C10844 * C897 + C50971 * C905) *
                C284 -
            ((C11083 + C11082) * C278 + (C11081 + C11080) * C283) +
            (C10843 * C302 + C51050 * C318 + C10844 * C906 + C50971 * C912) *
                C50757) *
               C8156) *
              C50896 * C50810 * C281 +
          (((C10843 * C290 + C51050 * C305 + C10844 * C1576 + C50971 * C1584) *
                C283 +
            (C10843 * C306 + C51050 * C320 + C10844 * C1583 + C50971 * C1588) *
                C278 -
            (C11084 + C11085) * C284 - (C11086 + C11087) * C50757) *
               C51079 +
           ((C11085 + C11084) * C283 + (C11087 + C11086) * C278 -
            (C11088 + C11089) * C284 - (C11090 + C11091) * C50757) *
               C51080 +
           ((C11089 + C11088) * C283 + (C11091 + C11090) * C278 -
            (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                C284 -
            (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                C50757) *
               C8156) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
               C118 +
           (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
               C106 -
           (C10878 + C10879) * C119 - (C10880 + C10881) * C107 + C10894 * C120 +
           C10895 * C108 - C10896 * C121 - C10897 * C109) *
              C51079 +
          ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
           (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
           (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
           (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
              C51080 +
          (C10894 * C118 + C10895 * C106 - C10896 * C119 - C10897 * C107 +
           (C10891 + C10890) * C120 + (C10893 + C10892) * C108 -
           (C10844 * C754 + C50971 * C755 + C10843 * C127 + C51050 * C139) *
               C121 -
           (C10844 * C756 + C50971 * C757 + C10843 * C140 + C51050 * C148) *
               C109) *
              C8156) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C283 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
               C51079 +
           ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
            (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
               C51080 +
           (C10894 * C283 + C10895 * C278 - C10896 * C284 - C10897 * C50757) *
               C8156) *
              C50896 * C459 +
          (((C11270 + C11271) * C284 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C278 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C283) +
            (C11272 + C11273) * C50757) *
               C51079 +
           ((C11274 + C11275) * C284 -
            ((C11273 + C11272) * C278 + (C11271 + C11270) * C283) +
            (C11276 + C11277) * C50757) *
               C51080 +
           ((C10843 * C465 + C51050 * C478 + C10844 * C470 + C50971 * C488) *
                C284 -
            ((C11277 + C11276) * C278 + (C11275 + C11274) * C283) +
            (C10843 * C479 + C51050 * C495 + C10844 * C489 + C50971 * C500) *
                C50757) *
               C8156) *
              C50896 * C460 +
          (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                C283 +
            (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                C278 -
            (C11278 + C11279) * C284 - (C11280 + C11281) * C50757) *
               C51079 +
           ((C11279 + C11278) * C283 + (C11281 + C11280) * C278 -
            (C11282 + C11283) * C284 - (C11284 + C11285) * C50757) *
               C51080 +
           ((C11283 + C11282) * C283 + (C11285 + C11284) * C278 -
            (C10844 * C1857 + C50971 * C1862 + C10843 * C470 + C51050 * C488) *
                C284 -
            (C10844 * C1861 + C50971 * C1869 + C10843 * C489 + C51050 * C500) *
                C50757) *
               C8156) *
              C50896 * C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C641 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C51077 -
            (C10878 + C10879) * C642 - (C10880 + C10881) * C51078 +
            C10894 * C643 + C10895 * C638) *
               C51079 +
           ((C10879 + C10878) * C641 + (C10881 + C10880) * C51077 -
            (C10883 + C10882) * C642 - (C10885 + C10884) * C51078 +
            (C10887 + C10886) * C643 + (C10889 + C10888) * C638) *
               C51080 +
           (C10894 * C641 + C10895 * C51077 - C10896 * C642 - C10897 * C51078 +
            (C10891 + C10890) * C643 + (C10893 + C10892) * C638) *
               C8156) *
              C50896 * C51037 +
          (((C11270 + C11271) * C642 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C51077 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C641) +
            (C11272 + C11273) * C51078 - C11592 * C643 - C11593 * C638) *
               C51079 +
           ((C11274 + C11275) * C642 -
            ((C11273 + C11272) * C51077 + (C11271 + C11270) * C641) +
            (C11276 + C11277) * C51078 - (C11602 + C11603) * C643 -
            (C11604 + C11605) * C638) *
               C51080 +
           ((C11603 + C11602) * C642 - (C11593 * C51077 + C11592 * C641) +
            (C11605 + C11604) * C51078 -
            (C10844 * C471 + C50971 * C490 + C10843 * C466 + C51050 * C480) *
                C643 -
            (C10844 * C491 + C50971 * C501 + C10843 * C481 + C51050 * C496) *
                C638) *
               C8156) *
              C50896 * C50874) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
               C118 +
           (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
               C106 -
           (C10878 + C10879) * C119 - (C10880 + C10881) * C107 + C10894 * C120 +
           C10895 * C108 - C10896 * C121 - C10897 * C109) *
              C51079 +
          ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
           (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
           (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
           (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
              C51080 +
          (C10894 * C118 + C10895 * C106 - C10896 * C119 - C10897 * C107 +
           (C10891 + C10890) * C120 + (C10893 + C10892) * C108 -
           (C10844 * C754 + C50971 * C755 + C10843 * C127 + C51050 * C139) *
               C121 -
           (C10844 * C756 + C50971 * C757 + C10843 * C140 + C51050 * C148) *
               C109) *
              C8156) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C283 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
               C51079 +
           ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
            (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
               C51080 +
           (C10894 * C283 + C10895 * C278 - C10896 * C284 - C10897 * C50757) *
               C8156) *
              C50896 * C50810 * C280 +
          (((C11076 + C11077) * C284 -
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C278 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C283) +
            (C11078 + C11079) * C50757) *
               C51079 +
           ((C11080 + C11081) * C284 -
            ((C11079 + C11078) * C278 + (C11077 + C11076) * C283) +
            (C11082 + C11083) * C50757) *
               C51080 +
           ((C10843 * C288 + C51050 * C301 + C10844 * C897 + C50971 * C905) *
                C284 -
            ((C11083 + C11082) * C278 + (C11081 + C11080) * C283) +
            (C10843 * C302 + C51050 * C318 + C10844 * C906 + C50971 * C912) *
                C50757) *
               C8156) *
              C50896 * C50810 * C281 +
          (((C10843 * C290 + C51050 * C305 + C10844 * C1576 + C50971 * C1584) *
                C283 +
            (C10843 * C306 + C51050 * C320 + C10844 * C1583 + C50971 * C1588) *
                C278 -
            (C11084 + C11085) * C284 - (C11086 + C11087) * C50757) *
               C51079 +
           ((C11085 + C11084) * C283 + (C11087 + C11086) * C278 -
            (C11088 + C11089) * C284 - (C11090 + C11091) * C50757) *
               C51080 +
           ((C11089 + C11088) * C283 + (C11091 + C11090) * C278 -
            (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                C284 -
            (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                C50757) *
               C8156) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C49770 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C51021 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
               C51079 +
           ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
            (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
               C51080 +
           (C10894 * C49770 + C10895 * C51021 - C10896 * C49763 -
            C10897 * C50757) *
               C8156) *
              C50896 * C50810 * C51081 +
          (((C11076 + C11077) * C49763 -
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C51021 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C49770) +
            (C11078 + C11079) * C50757) *
               C51079 +
           ((C11080 + C11081) * C49763 -
            ((C11079 + C11078) * C51021 + (C11077 + C11076) * C49770) +
            (C11082 + C11083) * C50757) *
               C51080 +
           ((C11443 + C11442) * C49763 - (C11433 * C51021 + C11432 * C49770) +
            (C11445 + C11444) * C50757) *
               C8156) *
              C50896 * C50810 * C51082 +
          (((C10843 * C290 + C51050 * C305 + C10844 * C1576 + C50971 * C1584) *
                C49770 +
            (C10843 * C306 + C51050 * C320 + C10844 * C1583 + C50971 * C1588) *
                C51021 -
            (C11084 + C11085) * C49763 - (C11086 + C11087) * C50757) *
               C51079 +
           ((C11085 + C11084) * C49770 + (C11087 + C11086) * C51021 -
            (C11088 + C11089) * C49763 - (C11090 + C11091) * C50757) *
               C51080 +
           ((C11089 + C11088) * C49770 + (C11091 + C11090) * C51021 -
            (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                C49763 -
            (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                C50757) *
               C8156) *
              C50896 * C50810 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C51079 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C51080 +
            (C10894 * C1109 + C10895 * C50752) * C8156) *
               C50896 * C51037 -
           ((C11593 * C50752 + C11592 * C1109) * C8156 +
            ((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C51080 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C51079) *
               C50896 * C50874) *
              C51081 +
          ((((C10843 * C894 + C51050 * C899 + C10844 * C1227 + C50971 * C1235) *
                 C1109 +
             (C10843 * C900 + C51050 * C909 + C10844 * C1234 + C50971 * C1239) *
                 C50752) *
                C51079 +
            ((C11817 + C11816) * C1109 + (C11819 + C11818) * C50752) * C51080 +
            ((C11821 + C11820) * C1109 + (C11823 + C11822) * C50752) * C8156) *
               C50896 * C50874 -
           ((C11433 * C50752 + C11432 * C1109) * C8156 +
            ((C11079 + C11078) * C50752 + (C11077 + C11076) * C1109) * C51080 +
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C50752 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C1109) *
                C51079) *
               C50896 * C51037) *
              C51082 +
          ((((C10843 * C290 + C51050 * C305 + C10844 * C1576 + C50971 * C1584) *
                 C1109 +
             (C10843 * C306 + C51050 * C320 + C10844 * C1583 + C50971 * C1588) *
                 C50752) *
                C51079 +
            ((C11085 + C11084) * C1109 + (C11087 + C11086) * C50752) * C51080 +
            ((C11089 + C11088) * C1109 + (C11091 + C11090) * C50752) * C8156) *
               C50896 * C51037 -
           (((C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
              C51050 * C1586) *
                 C50752 +
             (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
              C51050 * C1580) *
                 C1109) *
                C8156 +
            ((C10844 * C2684 + C50971 * C2688 + C10843 * C1581 +
              C51050 * C1587) *
                 C50752 +
             (C10844 * C2679 + C50971 * C2683 + C10843 * C1575 +
              C51050 * C1582) *
                 C1109) *
                C51080 +
            ((C10844 * C2682 + C50971 * C2687 + C10843 * C1583 +
              C51050 * C1588) *
                 C50752 +
             (C10844 * C2678 + C50971 * C2681 + C10843 * C1576 +
              C51050 * C1584) *
                 C1109) *
                C51079) *
               C50896 * C50874) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1109 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C50752) *
               C51079 +
           ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C51080 +
           (C10894 * C1109 + C10895 * C50752) * C8156) *
              C50896 * C50810 * C1105 -
          ((C11433 * C50752 + C11432 * C1109) * C8156 +
           ((C11079 + C11078) * C50752 + (C11077 + C11076) * C1109) * C51080 +
           ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                C50752 +
            (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                C1109) *
               C51079) *
              C50896 * C50810 * C1106 +
          (((C10843 * C290 + C51050 * C305 + C10844 * C1576 + C50971 * C1584) *
                C1109 +
            (C10843 * C306 + C51050 * C320 + C10844 * C1583 + C50971 * C1588) *
                C50752) *
               C51079 +
           ((C11085 + C11084) * C1109 + (C11087 + C11086) * C50752) * C51080 +
           ((C11089 + C11088) * C1109 + (C11091 + C11090) * C50752) * C8156) *
              C50896 * C50810 * C1107 -
          (((C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
             C51050 * C1123) *
                C50752 +
            (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
             C51050 * C1117) *
                C1109) *
               C8156 +
           ((C10844 * C3230 + C50971 * C3234 + C10843 * C1118 +
             C51050 * C1124) *
                C50752 +
            (C10844 * C3225 + C50971 * C3229 + C10843 * C1112 +
             C51050 * C1119) *
                C1109) *
               C51080 +
           ((C10844 * C3228 + C50971 * C3233 + C10843 * C1120 +
             C51050 * C1125) *
                C50752 +
            (C10844 * C3224 + C50971 * C3227 + C10843 * C1113 +
             C51050 * C1121) *
                C1109) *
               C51079) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1035 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C1030 -
            (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
            C10894 * C1037 + C10895 * C1032) *
               C51079 +
           ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
            (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
            (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
               C51080 +
           (C10894 * C1035 + C10895 * C1030 - C10896 * C1036 - C10897 * C1031 +
            (C10891 + C10890) * C1037 + (C10893 + C10892) * C1032) *
               C8156) *
              C50896 * C50810 * C1033 +
          (((C11076 + C11077) * C1036 -
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C1030 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C1035) +
            (C11078 + C11079) * C1031 - C11432 * C1037 - C11433 * C1032) *
               C51079 +
           ((C11080 + C11081) * C1036 -
            ((C11079 + C11078) * C1030 + (C11077 + C11076) * C1035) +
            (C11082 + C11083) * C1031 - (C11442 + C11443) * C1037 -
            (C11444 + C11445) * C1032) *
               C51080 +
           ((C11443 + C11442) * C1036 - (C11433 * C1030 + C11432 * C1035) +
            (C11445 + C11444) * C1031 -
            (C10844 * C898 + C50971 * C907 + C10843 * C289 + C51050 * C303) *
                C1037 -
            (C10844 * C908 + C50971 * C913 + C10843 * C304 + C51050 * C319) *
                C1032) *
               C8156) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C51079 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C51080 +
            (C10894 * C1109 + C10895 * C50752) * C8156) *
               C50896 * C459 -
           ((C11593 * C50752 + C11592 * C1109) * C8156 +
            ((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C51080 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C51079) *
               C50896 * C460 +
           (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C1109 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C50752) *
                C51079 +
            ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) * C51080 +
            ((C11283 + C11282) * C1109 + (C11285 + C11284) * C50752) * C8156) *
               C50896 * C461) *
              C1033 +
          ((((C10843 * C894 + C51050 * C899 + C10844 * C1227 + C50971 * C1235) *
                 C1109 +
             (C10843 * C900 + C51050 * C909 + C10844 * C1234 + C50971 * C1239) *
                 C50752) *
                C51079 +
            ((C11817 + C11816) * C1109 + (C11819 + C11818) * C50752) * C51080 +
            ((C11821 + C11820) * C1109 + (C11823 + C11822) * C50752) * C8156) *
               C50896 * C460 -
           ((C11433 * C50752 + C11432 * C1109) * C8156 +
            ((C11079 + C11078) * C50752 + (C11077 + C11076) * C1109) * C51080 +
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C50752 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C1109) *
                C51079) *
               C50896 * C459 -
           (((C10844 * C6268 + C50971 * C6269 + C10843 * C1230 +
              C51050 * C1237) *
                 C50752 +
             (C10844 * C6266 + C50971 * C6267 + C10843 * C1225 +
              C51050 * C1231) *
                 C1109) *
                C8156 +
            ((C10844 * C4716 + C50971 * C4722 + C10843 * C1232 +
              C51050 * C1238) *
                 C50752 +
             (C10844 * C4710 + C50971 * C4717 + C10843 * C1226 +
              C51050 * C1233) *
                 C1109) *
                C51080 +
            ((C10844 * C4718 + C50971 * C4723 + C10843 * C1234 +
              C51050 * C1239) *
                 C50752 +
             (C10844 * C4711 + C50971 * C4719 + C10843 * C1227 +
              C51050 * C1235) *
                 C1109) *
                C51079) *
               C50896 * C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C49770 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51021 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                C51079 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                C51080 +
            (C10894 * C49770 + C10895 * C51021 - C10896 * C49763 -
             C10897 * C50757) *
                C8156) *
               C50896 * C51037 +
           (((C11270 + C11271) * C49763 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C51021 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C49770) +
             (C11272 + C11273) * C50757) *
                C51079 +
            ((C11274 + C11275) * C49763 -
             ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
             (C11276 + C11277) * C50757) *
                C51080 +
            ((C11603 + C11602) * C49763 - (C11593 * C51021 + C11592 * C49770) +
             (C11605 + C11604) * C50757) *
                C8156) *
               C50896 * C50874) *
              C1033 +
          ((((C11076 + C11077) * C49763 -
             ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                  C51021 +
              (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                  C49770) +
             (C11078 + C11079) * C50757) *
                C51079 +
            ((C11080 + C11081) * C49763 -
             ((C11079 + C11078) * C51021 + (C11077 + C11076) * C49770) +
             (C11082 + C11083) * C50757) *
                C51080 +
            ((C11443 + C11442) * C49763 - (C11433 * C51021 + C11432 * C49770) +
             (C11445 + C11444) * C50757) *
                C8156) *
               C50896 * C51037 +
           (((C10843 * C894 + C51050 * C899 + C10844 * C1227 + C50971 * C1235) *
                 C49770 +
             (C10843 * C900 + C51050 * C909 + C10844 * C1234 + C50971 * C1239) *
                 C51021 -
             (C11816 + C11817) * C49763 - (C11818 + C11819) * C50757) *
                C51079 +
            ((C11817 + C11816) * C49770 + (C11819 + C11818) * C51021 -
             (C11820 + C11821) * C49763 - (C11822 + C11823) * C50757) *
                C51080 +
            ((C11821 + C11820) * C49770 + (C11823 + C11822) * C51021 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C49763 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C50757) *
                C8156) *
               C50896 * C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1035 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C1030 -
            (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
            C10894 * C1037 + C10895 * C1032) *
               C51079 +
           ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
            (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
            (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
               C51080 +
           (C10894 * C1035 + C10895 * C1030 - C10896 * C1036 - C10897 * C1031 +
            (C10891 + C10890) * C1037 + (C10893 + C10892) * C1032) *
               C8156) *
              C50896 * C50810 * C1033 +
          (((C11076 + C11077) * C1036 -
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C1030 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C1035) +
            (C11078 + C11079) * C1031 - C11432 * C1037 - C11433 * C1032) *
               C51079 +
           ((C11080 + C11081) * C1036 -
            ((C11079 + C11078) * C1030 + (C11077 + C11076) * C1035) +
            (C11082 + C11083) * C1031 - (C11442 + C11443) * C1037 -
            (C11444 + C11445) * C1032) *
               C51080 +
           ((C11443 + C11442) * C1036 - (C11433 * C1030 + C11432 * C1035) +
            (C11445 + C11444) * C1031 -
            (C10844 * C898 + C50971 * C907 + C10843 * C289 + C51050 * C303) *
                C1037 -
            (C10844 * C908 + C50971 * C913 + C10843 * C304 + C51050 * C319) *
                C1032) *
               C8156) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1109 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C50752) *
               C51079 +
           ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C51080 +
           (C10894 * C1109 + C10895 * C50752) * C8156) *
              C50896 * C50810 * C1105 -
          ((C11433 * C50752 + C11432 * C1109) * C8156 +
           ((C11079 + C11078) * C50752 + (C11077 + C11076) * C1109) * C51080 +
           ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                C50752 +
            (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                C1109) *
               C51079) *
              C50896 * C50810 * C1106 +
          (((C10843 * C290 + C51050 * C305 + C10844 * C1576 + C50971 * C1584) *
                C1109 +
            (C10843 * C306 + C51050 * C320 + C10844 * C1583 + C50971 * C1588) *
                C50752) *
               C51079 +
           ((C11085 + C11084) * C1109 + (C11087 + C11086) * C50752) * C51080 +
           ((C11089 + C11088) * C1109 + (C11091 + C11090) * C50752) * C8156) *
              C50896 * C50810 * C1107 -
          (((C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
             C51050 * C1123) *
                C50752 +
            (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
             C51050 * C1117) *
                C1109) *
               C8156 +
           ((C10844 * C3230 + C50971 * C3234 + C10843 * C1118 +
             C51050 * C1124) *
                C50752 +
            (C10844 * C3225 + C50971 * C3229 + C10843 * C1112 +
             C51050 * C1119) *
                C1109) *
               C51080 +
           ((C10844 * C3228 + C50971 * C3233 + C10843 * C1120 +
             C51050 * C1125) *
                C50752 +
            (C10844 * C3224 + C50971 * C3227 + C10843 * C1113 +
             C51050 * C1121) *
                C1109) *
               C51079) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C49770 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51021 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                C51079 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                C51080 +
            (C10894 * C49770 + C10895 * C51021 - C10896 * C49763 -
             C10897 * C50757) *
                C8156) *
               C50896 * C1687 +
           (((C11270 + C11271) * C49763 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C51021 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C49770) +
             (C11272 + C11273) * C50757) *
                C51079 +
            ((C11274 + C11275) * C49763 -
             ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
             (C11276 + C11277) * C50757) *
                C51080 +
            ((C11603 + C11602) * C49763 - (C11593 * C51021 + C11592 * C49770) +
             (C11605 + C11604) * C50757) *
                C8156) *
               C50896 * C50874) *
              C51036 +
          ((((C11076 + C11077) * C49763 -
             ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                  C51021 +
              (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                  C49770) +
             (C11078 + C11079) * C50757) *
                C51079 +
            ((C11080 + C11081) * C49763 -
             ((C11079 + C11078) * C51021 + (C11077 + C11076) * C49770) +
             (C11082 + C11083) * C50757) *
                C51080 +
            ((C11443 + C11442) * C49763 - (C11433 * C51021 + C11432 * C49770) +
             (C11445 + C11444) * C50757) *
                C8156) *
               C50896 * C1687 +
           (((C10843 * C894 + C51050 * C899 + C10844 * C1227 + C50971 * C1235) *
                 C49770 +
             (C10843 * C900 + C51050 * C909 + C10844 * C1234 + C50971 * C1239) *
                 C51021 -
             (C11816 + C11817) * C49763 - (C11818 + C11819) * C50757) *
                C51079 +
            ((C11817 + C11816) * C49770 + (C11819 + C11818) * C51021 -
             (C11820 + C11821) * C49763 - (C11822 + C11823) * C50757) *
                C51080 +
            ((C11821 + C11820) * C49770 + (C11823 + C11822) * C51021 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C49763 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C50757) *
                C8156) *
               C50896 * C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C51079 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C51080 +
            (C10894 * C1109 + C10895 * C50752) * C8156) *
               C50896 * C51083 -
           ((C11593 * C50752 + C11592 * C1109) * C8156 +
            ((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C51080 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C51079) *
               C50896 * C51084 +
           (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C1109 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C50752) *
                C51079 +
            ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) * C51080 +
            ((C11283 + C11282) * C1109 + (C11285 + C11284) * C50752) * C8156) *
               C50896 * C2103) *
              C51036 +
          ((((C10843 * C894 + C51050 * C899 + C10844 * C1227 + C50971 * C1235) *
                 C1109 +
             (C10843 * C900 + C51050 * C909 + C10844 * C1234 + C50971 * C1239) *
                 C50752) *
                C51079 +
            ((C11817 + C11816) * C1109 + (C11819 + C11818) * C50752) * C51080 +
            ((C11821 + C11820) * C1109 + (C11823 + C11822) * C50752) * C8156) *
               C50896 * C51084 -
           ((C11433 * C50752 + C11432 * C1109) * C8156 +
            ((C11079 + C11078) * C50752 + (C11077 + C11076) * C1109) * C51080 +
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C50752 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C1109) *
                C51079) *
               C50896 * C51083 -
           (((C10844 * C6268 + C50971 * C6269 + C10843 * C1230 +
              C51050 * C1237) *
                 C50752 +
             (C10844 * C6266 + C50971 * C6267 + C10843 * C1225 +
              C51050 * C1231) *
                 C1109) *
                C8156 +
            ((C10844 * C4716 + C50971 * C4722 + C10843 * C1232 +
              C51050 * C1238) *
                 C50752 +
             (C10844 * C4710 + C50971 * C4717 + C10843 * C1226 +
              C51050 * C1233) *
                 C1109) *
                C51080 +
            ((C10844 * C4718 + C50971 * C4723 + C10843 * C1234 +
              C51050 * C1239) *
                 C50752 +
             (C10844 * C4711 + C50971 * C4719 + C10843 * C1227 +
              C51050 * C1235) *
                 C1109) *
                C51079) *
               C50896 * C2103) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C51079 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C51080 +
            (C10894 * C1109 + C10895 * C50752) * C8156) *
               C50896 * C1687 -
           ((C11593 * C50752 + C11592 * C1109) * C8156 +
            ((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C51080 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C51079) *
               C50896 * C50874) *
              C280 +
          ((((C10843 * C894 + C51050 * C899 + C10844 * C1227 + C50971 * C1235) *
                 C1109 +
             (C10843 * C900 + C51050 * C909 + C10844 * C1234 + C50971 * C1239) *
                 C50752) *
                C51079 +
            ((C11817 + C11816) * C1109 + (C11819 + C11818) * C50752) * C51080 +
            ((C11821 + C11820) * C1109 + (C11823 + C11822) * C50752) * C8156) *
               C50896 * C50874 -
           ((C11433 * C50752 + C11432 * C1109) * C8156 +
            ((C11079 + C11078) * C50752 + (C11077 + C11076) * C1109) * C51080 +
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C50752 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C1109) *
                C51079) *
               C50896 * C1687) *
              C281 +
          ((((C10843 * C290 + C51050 * C305 + C10844 * C1576 + C50971 * C1584) *
                 C1109 +
             (C10843 * C306 + C51050 * C320 + C10844 * C1583 + C50971 * C1588) *
                 C50752) *
                C51079 +
            ((C11085 + C11084) * C1109 + (C11087 + C11086) * C50752) * C51080 +
            ((C11089 + C11088) * C1109 + (C11091 + C11090) * C50752) * C8156) *
               C50896 * C1687 -
           (((C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
              C51050 * C1586) *
                 C50752 +
             (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
              C51050 * C1580) *
                 C1109) *
                C8156 +
            ((C10844 * C2684 + C50971 * C2688 + C10843 * C1581 +
              C51050 * C1587) *
                 C50752 +
             (C10844 * C2679 + C50971 * C2683 + C10843 * C1575 +
              C51050 * C1582) *
                 C1109) *
                C51080 +
            ((C10844 * C2682 + C50971 * C2687 + C10843 * C1583 +
              C51050 * C1588) *
                 C50752 +
             (C10844 * C2678 + C50971 * C2681 + C10843 * C1576 +
              C51050 * C1584) *
                 C1109) *
                C51079) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1035 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C1030 -
            (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
            C10894 * C1037 + C10895 * C1032) *
               C51079 +
           ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
            (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
            (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
               C51080 +
           (C10894 * C1035 + C10895 * C1030 - C10896 * C1036 - C10897 * C1031 +
            (C10891 + C10890) * C1037 + (C10893 + C10892) * C1032) *
               C8156) *
              C50896 * C1687 +
          (((C11270 + C11271) * C1036 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C1030 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1035) +
            (C11272 + C11273) * C1031 - C11592 * C1037 - C11593 * C1032) *
               C51079 +
           ((C11274 + C11275) * C1036 -
            ((C11273 + C11272) * C1030 + (C11271 + C11270) * C1035) +
            (C11276 + C11277) * C1031 - (C11602 + C11603) * C1037 -
            (C11604 + C11605) * C1032) *
               C51080 +
           ((C11603 + C11602) * C1036 - (C11593 * C1030 + C11592 * C1035) +
            (C11605 + C11604) * C1031 -
            (C10844 * C471 + C50971 * C490 + C10843 * C466 + C51050 * C480) *
                C1037 -
            (C10844 * C491 + C50971 * C501 + C10843 * C481 + C51050 * C496) *
                C1032) *
               C8156) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1109 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C50752) *
               C51079 +
           ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C51080 +
           (C10894 * C1109 + C10895 * C50752) * C8156) *
              C50896 * C1853 -
          ((C11593 * C50752 + C11592 * C1109) * C8156 +
           ((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C51080 +
           ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                C50752 +
            (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                C1109) *
               C51079) *
              C50896 * C1854 +
          (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                C1109 +
            (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                C50752) *
               C51079 +
           ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) * C51080 +
           ((C11283 + C11282) * C1109 + (C11285 + C11284) * C50752) * C8156) *
              C50896 * C1855 -
          (((C10844 * C5704 + C50971 * C5707 + C10843 * C1863 +
             C51050 * C1870) *
                C50752 +
            (C10844 * C5698 + C50971 * C5703 + C10843 * C1858 +
             C51050 * C1864) *
                C1109) *
               C8156 +
           ((C10844 * C5702 + C50971 * C5706 + C10843 * C1865 +
             C51050 * C1871) *
                C50752 +
            (C10844 * C5697 + C50971 * C5701 + C10843 * C1859 +
             C51050 * C1866) *
                C1109) *
               C51080 +
           ((C10844 * C5700 + C50971 * C5705 + C10843 * C1867 +
             C51050 * C1872) *
                C50752 +
            (C10844 * C5696 + C50971 * C5699 + C10843 * C1860 +
             C51050 * C1868) *
                C1109) *
               C51079) *
              C50896 * C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C49770 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C51021 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
               C51079 +
           ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
            (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
               C51080 +
           (C10894 * C49770 + C10895 * C51021 - C10896 * C49763 -
            C10897 * C50757) *
               C8156) *
              C50896 * C51083 +
          (((C11270 + C11271) * C49763 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C51021 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C49770) +
            (C11272 + C11273) * C50757) *
               C51079 +
           ((C11274 + C11275) * C49763 -
            ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
            (C11276 + C11277) * C50757) *
               C51080 +
           ((C11603 + C11602) * C49763 - (C11593 * C51021 + C11592 * C49770) +
            (C11605 + C11604) * C50757) *
               C8156) *
              C50896 * C51084 +
          (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                C49770 +
            (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                C51021 -
            (C11278 + C11279) * C49763 - (C11280 + C11281) * C50757) *
               C51079 +
           ((C11279 + C11278) * C49770 + (C11281 + C11280) * C51021 -
            (C11282 + C11283) * C49763 - (C11284 + C11285) * C50757) *
               C51080 +
           ((C11283 + C11282) * C49770 + (C11285 + C11284) * C51021 -
            (C10844 * C1857 + C50971 * C1862 + C10843 * C470 + C51050 * C488) *
                C49763 -
            (C10844 * C1861 + C50971 * C1869 + C10843 * C489 + C51050 * C500) *
                C50757) *
               C8156) *
              C50896 * C2103) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1035 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C1030 -
            (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
            C10894 * C1037 + C10895 * C1032) *
               C51079 +
           ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
            (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
            (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
               C51080 +
           (C10894 * C1035 + C10895 * C1030 - C10896 * C1036 - C10897 * C1031 +
            (C10891 + C10890) * C1037 + (C10893 + C10892) * C1032) *
               C8156) *
              C50896 * C1687 +
          (((C11270 + C11271) * C1036 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C1030 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1035) +
            (C11272 + C11273) * C1031 - C11592 * C1037 - C11593 * C1032) *
               C51079 +
           ((C11274 + C11275) * C1036 -
            ((C11273 + C11272) * C1030 + (C11271 + C11270) * C1035) +
            (C11276 + C11277) * C1031 - (C11602 + C11603) * C1037 -
            (C11604 + C11605) * C1032) *
               C51080 +
           ((C11603 + C11602) * C1036 - (C11593 * C1030 + C11592 * C1035) +
            (C11605 + C11604) * C1031 -
            (C10844 * C471 + C50971 * C490 + C10843 * C466 + C51050 * C480) *
                C1037 -
            (C10844 * C491 + C50971 * C501 + C10843 * C481 + C51050 * C496) *
                C1032) *
               C8156) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C51079 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C51080 +
            (C10894 * C1109 + C10895 * C50752) * C8156) *
               C50896 * C1687 -
           ((C11593 * C50752 + C11592 * C1109) * C8156 +
            ((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C51080 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C51079) *
               C50896 * C50874) *
              C280 +
          ((((C10843 * C894 + C51050 * C899 + C10844 * C1227 + C50971 * C1235) *
                 C1109 +
             (C10843 * C900 + C51050 * C909 + C10844 * C1234 + C50971 * C1239) *
                 C50752) *
                C51079 +
            ((C11817 + C11816) * C1109 + (C11819 + C11818) * C50752) * C51080 +
            ((C11821 + C11820) * C1109 + (C11823 + C11822) * C50752) * C8156) *
               C50896 * C50874 -
           ((C11433 * C50752 + C11432 * C1109) * C8156 +
            ((C11079 + C11078) * C50752 + (C11077 + C11076) * C1109) * C51080 +
            ((C10844 * C900 + C50971 * C909 + C10843 * C296 + C51050 * C315) *
                 C50752 +
             (C10844 * C894 + C50971 * C899 + C10843 * C286 + C51050 * C297) *
                 C1109) *
                C51079) *
               C50896 * C1687) *
              C281 +
          ((((C10843 * C290 + C51050 * C305 + C10844 * C1576 + C50971 * C1584) *
                 C1109 +
             (C10843 * C306 + C51050 * C320 + C10844 * C1583 + C50971 * C1588) *
                 C50752) *
                C51079 +
            ((C11085 + C11084) * C1109 + (C11087 + C11086) * C50752) * C51080 +
            ((C11089 + C11088) * C1109 + (C11091 + C11090) * C50752) * C8156) *
               C50896 * C1687 -
           (((C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
              C51050 * C1586) *
                 C50752 +
             (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
              C51050 * C1580) *
                 C1109) *
                C8156 +
            ((C10844 * C2684 + C50971 * C2688 + C10843 * C1581 +
              C51050 * C1587) *
                 C50752 +
             (C10844 * C2679 + C50971 * C2683 + C10843 * C1575 +
              C51050 * C1582) *
                 C1109) *
                C51080 +
            ((C10844 * C2682 + C50971 * C2687 + C10843 * C1583 +
              C51050 * C1588) *
                 C50752 +
             (C10844 * C2678 + C50971 * C2681 + C10843 * C1576 +
              C51050 * C1584) *
                 C1109) *
                C51079) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C641 +
            (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
            C172 * C51078 + C173 * C643 + C174 * C638) *
               C110 +
           (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
            C175 * C643 + C176 * C638) *
               C111 +
           (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
            C177 * C643 + C178 * C638) *
               C112 +
           (C175 * C641 + C176 * C51077 - C177 * C642 - C178 * C51078 +
            C179 * C643 + C180 * C638) *
               C113) *
              C50896 * C50810 * C51036 +
          ((C350 * C642 -
            ((C117 * C296 + C50907 * C315) * C51077 +
             (C117 * C286 + C50907 * C297) * C641) +
            C351 * C51078 - C352 * C643 - C353 * C638) *
               C110 +
           (C352 * C642 - (C351 * C51077 + C350 * C641) + C353 * C51078 -
            C354 * C643 - C355 * C638) *
               C111 +
           (C354 * C642 - (C353 * C51077 + C352 * C641) + C355 * C51078 -
            C653 * C643 - C654 * C638) *
               C112 +
           (C653 * C642 - (C355 * C51077 + C354 * C641) + C654 * C51078 -
            (C117 * C644 + C50907 * C645) * C643 -
            (C117 * C646 + C50907 * C647) * C638) *
               C113) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C641 +
             (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
             C172 * C51078 + C173 * C643 + C174 * C638) *
                C2300 +
            (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
             C175 * C643 + C176 * C638) *
                C50776) *
               C2302 +
           ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C2300 +
            (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C50776) *
               C2303 +
           ((C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C2300 +
            (C2873 + C2874 - C2875 - C2876 + C2877 + C2878) * C50776) *
               C2304) *
              C50810 * C51036 +
          (((C2857 - (C2856 + C2855) + C2858 - C2859 - C2860) * C2300 +
            (C2863 - (C2862 + C2861) + C2864 - C2865 - C2866) * C50776) *
               C2302 +
           ((C2869 - (C2868 + C2867) + C2870 - C2871 - C2872) * C2300 +
            (C2875 - (C2874 + C2873) + C2876 - C2877 - C2878) * C50776) *
               C2303 +
           ((C2505 * C642 - (C2506 * C51077 + C2507 * C641) + C2508 * C51078 -
             C2509 * C643 - C2510 * C638) *
                C2300 +
            (C2509 * C642 - (C2508 * C51077 + C2505 * C641) + C2510 * C51078 -
             (C117 * C1110 + C50907 * C1115) * C643 -
             (C117 * C1114 + C50907 * C1122) * C638) *
                C50776) *
               C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C110 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C111 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C112 +
            (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50757) * C113) *
               C50896 * C51037 +
           ((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C110 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) * C111 +
            (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) * C112 +
            (C763 * C284 - (C532 * C278 + C531 * C283) + C764 * C50757) *
                C113) *
               C50896 * C50874) *
              C51036 +
          (((C350 * C284 -
             ((C117 * C296 + C50907 * C315) * C278 +
              (C117 * C286 + C50907 * C297) * C283) +
             C351 * C50757) *
                C110 +
            (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50757) * C111 +
            (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50757) * C112 +
            (C653 * C284 - (C355 * C278 + C354 * C283) + C654 * C50757) *
                C113) *
               C50896 * C51037 +
           (((C117 * C894 + C50907 * C899) * C283 +
             (C117 * C900 + C50907 * C909) * C278 - C927 * C284 -
             C928 * C50757) *
                C110 +
            (C927 * C283 + C928 * C278 - C929 * C284 - C930 * C50757) * C111 +
            (C929 * C283 + C930 * C278 - C931 * C284 - C932 * C50757) * C112 +
            (C931 * C283 + C932 * C278 - (C117 * C898 + C50907 * C907) * C284 -
             (C117 * C908 + C50907 * C913) * C50757) *
                C113) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C283 +
              (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
              C172 * C50757) *
                 C2300 +
             (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                 C50776) *
                C2302 +
            ((C2513 + C2514 - C2468 - C2469) * C2300 +
             (C2470 + C2471 - C2472 - C2473) * C50776) *
                C2303 +
            C2532 * C2304) *
               C51037 +
           (((C527 * C284 -
              ((C117 * C473 + C50907 * C492) * C278 +
               (C117 * C463 + C50907 * C474) * C283) +
              C528 * C50757) *
                 C2300 +
             (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                 C50776) *
                C2302 +
            ((C3237 - (C3267 + C3268) + C3242) * C2300 +
             (C3243 - (C3244 + C3245) + C3246) * C50776) *
                C2303 +
            ((C3247 - (C3269 + C3270) + C3252) * C2300 +
             (C3253 - (C3254 + C3255) + C3256) * C50776) *
                C2304) *
               C50874) *
              C51036 +
          ((((C2468 - (C2514 + C2513) + C2469) * C2300 +
             (C2472 - (C2471 + C2470) + C2473) * C50776) *
                C2302 +
            ((C2478 - (C2516 + C2515) + C2479) * C2300 +
             (C2482 - (C2481 + C2480) + C2483) * C50776) *
                C2303 +
            ((C2518 - (C2519 + C2520) + C2521) * C2300 +
             (C2522 - (C2523 + C2524) + C2525) * C50776) *
                C2304) *
               C51037 +
           (((C3268 + C3267 - C3237 - C3242) * C2300 +
             (C3245 + C3244 - C3243 - C3246) * C50776) *
                C2302 +
            ((C3270 + C3269 - C3247 - C3252) * C2300 +
             (C3255 + C3254 - C3253 - C3256) * C50776) *
                C2303 +
            (((C117 * C3224 + C50907 * C3227) * C283 +
              (C117 * C3228 + C50907 * C3233) * C278 - C3265 * C284 -
              C3266 * C50757) *
                 C2300 +
             (C3265 * C283 + C3266 * C278 -
              (C117 * C3226 + C50907 * C3231) * C284 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50757) * C113) *
              C50896 * C50810 * C280 +
          ((C350 * C284 -
            ((C117 * C296 + C50907 * C315) * C278 +
             (C117 * C286 + C50907 * C297) * C283) +
            C351 * C50757) *
               C110 +
           (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50757) * C111 +
           (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50757) * C112 +
           ((C117 * C289 + C50907 * C303) * C284 - (C355 * C278 + C354 * C283) +
            (C117 * C304 + C50907 * C319) * C50757) *
               C113) *
              C50896 * C50810 * C281 +
          (((C117 * C290 + C50907 * C305) * C283 +
            (C117 * C306 + C50907 * C320) * C278 - C356 * C284 -
            C357 * C50757) *
               C110 +
           (C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50757) * C111 +
           (C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50757) * C112 +
           (C360 * C283 + C361 * C278 - (C117 * C294 + C50907 * C313) * C284 -
            (C117 * C314 + C50907 * C324) * C50757) *
               C113) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50907 * C129) * C118 +
           (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C110 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C111 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C112 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50907 * C141) * C121 -
           (C117 * C142 + C50907 * C149) * C109) *
              C113) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50757) * C113) *
              C50896 * C459 +
          ((C527 * C284 -
            ((C117 * C473 + C50907 * C492) * C278 +
             (C117 * C463 + C50907 * C474) * C283) +
            C528 * C50757) *
               C110 +
           (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) * C111 +
           (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) * C112 +
           ((C117 * C466 + C50907 * C480) * C284 - (C532 * C278 + C531 * C283) +
            (C117 * C481 + C50907 * C496) * C50757) *
               C113) *
              C50896 * C460 +
          (((C117 * C467 + C50907 * C482) * C283 +
            (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
            C534 * C50757) *
               C110 +
           (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50757) * C111 +
           (C535 * C283 + C536 * C278 - C537 * C284 - C538 * C50757) * C112 +
           (C537 * C283 + C538 * C278 - (C117 * C471 + C50907 * C490) * C284 -
            (C117 * C491 + C50907 * C501) * C50757) *
               C113) *
              C50896 * C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C2300 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50776) *
              C2302 +
          (((C117 * C286 + C50907 * C297) * C118 +
            (C117 * C296 + C50907 * C315) * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C2300 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C50776) *
              C2303 +
          (((C117 * C290 + C50907 * C305) * C118 +
            (C117 * C306 + C50907 * C320) * C106 - C356 * C119 - C357 * C107 +
            C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
               C2300 +
           (C356 * C118 + C357 * C106 - C358 * C119 - C359 * C107 +
            C360 * C120 + C361 * C108 - (C117 * C294 + C50907 * C313) * C121 -
            (C117 * C314 + C50907 * C324) * C109) *
               C50776) *
              C2304) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C2513 + C2514 - C2468 - C2469) * C2300 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C2303 +
           C2532 * C2304) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C2300 +
            (C2472 - (C2471 + C2470) + C2473) * C50776) *
               C2302 +
           ((C2478 - (C2516 + C2515) + C2479) * C2300 +
            (C2482 - (C2481 + C2480) + C2483) * C50776) *
               C2303 +
           ((C2518 - (C2519 + C2520) + C2521) * C2300 +
            (C2522 - (C2523 + C2524) + C2525) * C50776) *
               C2304) *
              C50810 * C281 +
          (C2532 * C2302 +
           ((C2520 + C2519 - C2518 - C2521) * C2300 +
            (C2524 + C2523 - C2522 - C2525) * C50776) *
               C2303 +
           (((C117 * C2451 + C50907 * C2454) * C283 +
             (C117 * C2455 + C50907 * C2460) * C278 - C2511 * C284 -
             C2512 * C50757) *
                C2300 +
            (C2511 * C283 + C2512 * C278 -
             (C117 * C2453 + C50907 * C2458) * C284 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C2304) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C2513 + C2514 - C2468 - C2469) * C2300 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C2303 +
           C2532 * C2304) *
              C459 +
          (((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C2300 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                C50776) *
               C2302 +
           ((C927 * C284 -
             ((C117 * C900 + C50907 * C909) * C278 +
              (C117 * C894 + C50907 * C899) * C283) +
             C928 * C50757) *
                C2300 +
            (C929 * C284 - (C928 * C278 + C927 * C283) + C930 * C50757) *
                C50776) *
               C2303 +
           ((C2703 * C284 -
             ((C117 * C1583 + C50907 * C1588) * C278 +
              (C117 * C1576 + C50907 * C1584) * C283) +
             C2704 * C50757) *
                C2300 +
            ((C117 * C1574 + C50907 * C1580) * C284 -
             (C2704 * C278 + C2703 * C283) +
             (C117 * C1579 + C50907 * C1586) * C50757) *
                C50776) *
               C2304) *
              C460 +
          ((((C117 * C467 + C50907 * C482) * C283 +
             (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
             C534 * C50757) *
                C2300 +
            (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50757) *
                C50776) *
               C2302 +
           (((C117 * C1227 + C50907 * C1235) * C283 +
             (C117 * C1234 + C50907 * C1239) * C278 - C2705 * C284 -
             C2706 * C50757) *
                C2300 +
            (C2705 * C283 + C2706 * C278 -
             (C117 * C1225 + C50907 * C1231) * C284 -
             (C117 * C1230 + C50907 * C1237) * C50757) *
                C50776) *
               C2303 +
           (((C117 * C2678 + C50907 * C2681) * C283 +
             (C117 * C2682 + C50907 * C2687) * C278 - C2707 * C284 -
             C2708 * C50757) *
                C2300 +
            (C2707 * C283 + C2708 * C278 -
             (C117 * C2680 + C50907 * C2685) * C284 -
             (C117 * C2686 + C50907 * C2689) * C50757) *
                C50776) *
               C2304) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C117 * C122 + C50907 * C129) * C641 +
                    (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
                    C172 * C51078 + C173 * C643 + C174 * C638) *
                       C110 +
                   (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
                    C175 * C643 + C176 * C638) *
                       C111 +
                   (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
                    C177 * C643 + C178 * C638) *
                       C112 +
                   (C175 * C641 + C176 * C51077 - C177 * C642 - C178 * C51078 +
                    C179 * C643 + C180 * C638) *
                       C113) *
                      C50896 * C51037 +
                  ((C527 * C642 -
                    ((C117 * C473 + C50907 * C492) * C51077 +
                     (C117 * C463 + C50907 * C474) * C641) +
                    C528 * C51078 - C529 * C643 - C530 * C638) *
                       C110 +
                   (C529 * C642 - (C528 * C51077 + C527 * C641) +
                    C530 * C51078 - C531 * C643 - C532 * C638) *
                       C111 +
                   (C531 * C642 - (C530 * C51077 + C529 * C641) +
                    C532 * C51078 - C763 * C643 - C764 * C638) *
                       C112 +
                   (C763 * C642 - (C532 * C51077 + C531 * C641) +
                    C764 * C51078 - (C117 * C754 + C50907 * C755) * C643 -
                    (C117 * C756 + C50907 * C757) * C638) *
                       C113) *
                      C50896 * C50874) *
                 C50798) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50907 * C129) * C641 +
                     (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
                     C172 * C51078 + C173 * C643 + C174 * C638) *
                        C2300 +
                    (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
                     C175 * C643 + C176 * C638) *
                        C50776) *
                       C2302 +
                   ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C2300 +
                    (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C50776) *
                       C2303 +
                   ((C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C2300 +
                    (C2873 + C2874 - C2875 - C2876 + C2877 + C2878) * C50776) *
                       C2304) *
                      C51037 +
                  (((C527 * C642 -
                     ((C117 * C473 + C50907 * C492) * C51077 +
                      (C117 * C463 + C50907 * C474) * C641) +
                     C528 * C51078 - C529 * C643 - C530 * C638) *
                        C2300 +
                    (C529 * C642 - (C528 * C51077 + C527 * C641) +
                     C530 * C51078 - C531 * C643 - C532 * C638) *
                        C50776) *
                       C2302 +
                   ((C927 * C642 -
                     ((C117 * C900 + C50907 * C909) * C51077 +
                      (C117 * C894 + C50907 * C899) * C641) +
                     C928 * C51078 - C929 * C643 - C930 * C638) *
                        C2300 +
                    (C929 * C642 - (C928 * C51077 + C927 * C641) +
                     C930 * C51078 - C931 * C643 - C932 * C638) *
                        C50776) *
                       C2303 +
                   ((C2703 * C642 -
                     ((C117 * C1583 + C50907 * C1588) * C51077 +
                      (C117 * C1576 + C50907 * C1584) * C641) +
                     C2704 * C51078 - C3029 * C643 - C3030 * C638) *
                        C2300 +
                    (C3029 * C642 - (C2704 * C51077 + C2703 * C641) +
                     C3030 * C51078 - (C117 * C1573 + C50907 * C1578) * C643 -
                     (C117 * C1577 + C50907 * C1585) * C638) *
                        C50776) *
                       C2304) *
                      C50874) *
                 C50798) /
                    (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50907 * C129) * C118 +
           (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C110 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C111 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C112 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50907 * C141) * C121 -
           (C117 * C142 + C50907 * C149) * C109) *
              C113) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C110 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C111 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) * C112 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C50757) * C113) *
              C50896 * C50810 * C280 +
          ((C350 * C284 -
            ((C117 * C296 + C50907 * C315) * C278 +
             (C117 * C286 + C50907 * C297) * C283) +
            C351 * C50757) *
               C110 +
           (C352 * C284 - (C351 * C278 + C350 * C283) + C353 * C50757) * C111 +
           (C354 * C284 - (C353 * C278 + C352 * C283) + C355 * C50757) * C112 +
           ((C117 * C289 + C50907 * C303) * C284 - (C355 * C278 + C354 * C283) +
            (C117 * C304 + C50907 * C319) * C50757) *
               C113) *
              C50896 * C50810 * C281 +
          (((C117 * C290 + C50907 * C305) * C283 +
            (C117 * C306 + C50907 * C320) * C278 - C356 * C284 -
            C357 * C50757) *
               C110 +
           (C356 * C283 + C357 * C278 - C358 * C284 - C359 * C50757) * C111 +
           (C358 * C283 + C359 * C278 - C360 * C284 - C361 * C50757) * C112 +
           (C360 * C283 + C361 * C278 - (C117 * C294 + C50907 * C313) * C284 -
            (C117 * C314 + C50907 * C324) * C50757) *
               C113) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C2300 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50776) *
              C2302 +
          (((C117 * C286 + C50907 * C297) * C118 +
            (C117 * C296 + C50907 * C315) * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C2300 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C50776) *
              C2303 +
          (((C117 * C290 + C50907 * C305) * C118 +
            (C117 * C306 + C50907 * C320) * C106 - C356 * C119 - C357 * C107 +
            C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
               C2300 +
           (C356 * C118 + C357 * C106 - C358 * C119 - C359 * C107 +
            C360 * C120 + C361 * C108 - (C117 * C294 + C50907 * C313) * C121 -
            (C117 * C314 + C50907 * C324) * C109) *
               C50776) *
              C2304) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C2300 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C2513 + C2514 - C2468 - C2469) * C2300 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C2303 +
           C2532 * C2304) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C2300 +
            (C2472 - (C2471 + C2470) + C2473) * C50776) *
               C2302 +
           ((C2478 - (C2516 + C2515) + C2479) * C2300 +
            (C2482 - (C2481 + C2480) + C2483) * C50776) *
               C2303 +
           ((C2518 - (C2519 + C2520) + C2521) * C2300 +
            (C2522 - (C2523 + C2524) + C2525) * C50776) *
               C2304) *
              C50810 * C281 +
          (C2532 * C2302 +
           ((C2520 + C2519 - C2518 - C2521) * C2300 +
            (C2524 + C2523 - C2522 - C2525) * C50776) *
               C2303 +
           (((C117 * C2451 + C50907 * C2454) * C283 +
             (C117 * C2455 + C50907 * C2460) * C278 - C2511 * C284 -
             C2512 * C50757) *
                C2300 +
            (C2511 * C283 + C2512 * C278 -
             (C117 * C2453 + C50907 * C2458) * C284 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C2304) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C49770 +
            (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
            C172 * C50757) *
               C110 +
           (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
               C111 +
           (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
               C112 +
           (C175 * C49770 + C176 * C51021 - C177 * C49763 - C178 * C50757) *
               C113) *
              C50896 * C50810 * C51081 +
          ((C350 * C49763 -
            ((C117 * C296 + C50907 * C315) * C51021 +
             (C117 * C286 + C50907 * C297) * C49770) +
            C351 * C50757) *
               C110 +
           (C352 * C49763 - (C351 * C51021 + C350 * C49770) + C353 * C50757) *
               C111 +
           (C354 * C49763 - (C353 * C51021 + C352 * C49770) + C355 * C50757) *
               C112 +
           (C653 * C49763 - (C355 * C51021 + C354 * C49770) + C654 * C50757) *
               C113) *
              C50896 * C50810 * C51082 +
          (((C117 * C290 + C50907 * C305) * C49770 +
            (C117 * C306 + C50907 * C320) * C51021 - C356 * C49763 -
            C357 * C50757) *
               C110 +
           (C356 * C49770 + C357 * C51021 - C358 * C49763 - C359 * C50757) *
               C111 +
           (C358 * C49770 + C359 * C51021 - C360 * C49763 - C361 * C50757) *
               C112 +
           (C360 * C49770 + C361 * C51021 -
            (C117 * C294 + C50907 * C313) * C49763 -
            (C117 * C314 + C50907 * C324) * C50757) *
               C113) *
              C50896 * C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C2300 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C3907 + C3908 - C3909 - C3910) * C2300 +
            (C3911 + C3912 - C3913 - C3914) * C50776) *
               C2303 +
           C3939 * C2304) *
              C50810 * C51081 +
          (((C3909 - (C3908 + C3907) + C3910) * C2300 +
            (C3913 - (C3912 + C3911) + C3914) * C50776) *
               C2302 +
           ((C3917 - (C3916 + C3915) + C3918) * C2300 +
            (C3921 - (C3920 + C3919) + C3922) * C50776) *
               C2303 +
           ((C3923 - (C3924 + C3925) + C3926) * C2300 +
            (C3927 - (C3928 + C3929) + C3930) * C50776) *
               C2304) *
              C50810 * C51082 +
          (C3939 * C2302 +
           ((C3925 + C3924 - C3923 - C3926) * C2300 +
            (C3929 + C3928 - C3927 - C3930) * C50776) *
               C2303 +
           ((C3569 * C49770 + C3570 * C51021 - C2511 * C49763 -
             C2512 * C50757) *
                C2300 +
            (C2511 * C49770 + C2512 * C51021 -
             (C117 * C2453 + C50907 * C2458) * C49763 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C2304) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C110 +
            (C171 * C1109 + C172 * C50752) * C111 +
            (C173 * C1109 + C174 * C50752) * C112 +
            (C175 * C1109 + C176 * C50752) * C113) *
               C50896 * C51037 -
           ((C532 * C50752 + C531 * C1109) * C113 +
            (C530 * C50752 + C529 * C1109) * C112 +
            (C528 * C50752 + C527 * C1109) * C111 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C110) *
               C50896 * C50874) *
              C51081 +
          ((((C117 * C894 + C50907 * C899) * C1109 +
             (C117 * C900 + C50907 * C909) * C50752) *
                C110 +
            (C927 * C1109 + C928 * C50752) * C111 +
            (C929 * C1109 + C930 * C50752) * C112 +
            (C931 * C1109 + C932 * C50752) * C113) *
               C50896 * C50874 -
           ((C355 * C50752 + C354 * C1109) * C113 +
            (C353 * C50752 + C352 * C1109) * C112 +
            (C351 * C50752 + C350 * C1109) * C111 +
            ((C117 * C296 + C50907 * C315) * C50752 +
             (C117 * C286 + C50907 * C297) * C1109) *
                C110) *
               C50896 * C51037) *
              C51082 +
          ((((C117 * C290 + C50907 * C305) * C1109 +
             (C117 * C306 + C50907 * C320) * C50752) *
                C110 +
            (C356 * C1109 + C357 * C50752) * C111 +
            (C358 * C1109 + C359 * C50752) * C112 +
            (C360 * C1109 + C361 * C50752) * C113) *
               C50896 * C51037 -
           (((C117 * C1577 + C50907 * C1585) * C50752 +
             (C117 * C1573 + C50907 * C1578) * C1109) *
                C113 +
            ((C117 * C1579 + C50907 * C1586) * C50752 +
             (C117 * C1574 + C50907 * C1580) * C1109) *
                C112 +
            ((C117 * C1581 + C50907 * C1587) * C50752 +
             (C117 * C1575 + C50907 * C1582) * C1109) *
                C111 +
            ((C117 * C1583 + C50907 * C1588) * C50752 +
             (C117 * C1576 + C50907 * C1584) * C1109) *
                C110) *
               C50896 * C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C51037 -
           (C4316 * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C50874) *
              C51081 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            ((C4317 + C4318) * C2300 + (C4310 + C4311) * C50776) * C2304) *
               C50874 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C51037) *
              C51082 +
          ((C3577 * C2302 +
            ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
            ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
               C51037 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             ((C117 * C4299 + C50907 * C4302) * C50752 +
              (C117 * C4296 + C50907 * C4300) * C1109) *
                 C2300) *
                C2304 +
            ((C4311 + C4310) * C50776 + (C4318 + C4317) * C2300) * C2303 +
            C4316 * C2302) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C110 +
           (C171 * C1109 + C172 * C50752) * C111 +
           (C173 * C1109 + C174 * C50752) * C112 +
           (C175 * C1109 + C176 * C50752) * C113) *
              C50896 * C50810 * C1105 -
          ((C355 * C50752 + C354 * C1109) * C113 +
           (C353 * C50752 + C352 * C1109) * C112 +
           (C351 * C50752 + C350 * C1109) * C111 +
           ((C117 * C296 + C50907 * C315) * C50752 +
            (C117 * C286 + C50907 * C297) * C1109) *
               C110) *
              C50896 * C50810 * C1106 +
          (((C117 * C290 + C50907 * C305) * C1109 +
            (C117 * C306 + C50907 * C320) * C50752) *
               C110 +
           (C356 * C1109 + C357 * C50752) * C111 +
           (C358 * C1109 + C359 * C50752) * C112 +
           (C360 * C1109 + C361 * C50752) * C113) *
              C50896 * C50810 * C1107 -
          (((C117 * C1114 + C50907 * C1122) * C50752 +
            (C117 * C1110 + C50907 * C1115) * C1109) *
               C113 +
           ((C117 * C1116 + C50907 * C1123) * C50752 +
            (C117 * C1111 + C50907 * C1117) * C1109) *
               C112 +
           ((C117 * C1118 + C50907 * C1124) * C50752 +
            (C117 * C1112 + C50907 * C1119) * C1109) *
               C111 +
           ((C117 * C1120 + C50907 * C1125) * C50752 +
            (C117 * C1113 + C50907 * C1121) * C1109) *
               C110) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C110 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C111 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C112 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C113) *
              C50896 * C50810 * C1033 +
          ((C350 * C1036 -
            ((C117 * C296 + C50907 * C315) * C1030 +
             (C117 * C286 + C50907 * C297) * C1035) +
            C351 * C1031 - C352 * C1037 - C353 * C1032) *
               C110 +
           (C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
            C354 * C1037 - C355 * C1032) *
               C111 +
           (C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
            C653 * C1037 - C654 * C1032) *
               C112 +
           (C653 * C1036 - (C355 * C1030 + C354 * C1035) + C654 * C1031 -
            (C117 * C644 + C50907 * C645) * C1037 -
            (C117 * C646 + C50907 * C647) * C1032) *
               C113) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C110 +
            (C171 * C1109 + C172 * C50752) * C111 +
            (C173 * C1109 + C174 * C50752) * C112 +
            (C175 * C1109 + C176 * C50752) * C113) *
               C50896 * C459 -
           ((C532 * C50752 + C531 * C1109) * C113 +
            (C530 * C50752 + C529 * C1109) * C112 +
            (C528 * C50752 + C527 * C1109) * C111 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C110) *
               C50896 * C460 +
           (((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C110 +
            (C533 * C1109 + C534 * C50752) * C111 +
            (C535 * C1109 + C536 * C50752) * C112 +
            (C537 * C1109 + C538 * C50752) * C113) *
               C50896 * C461) *
              C1033 +
          ((((C117 * C894 + C50907 * C899) * C1109 +
             (C117 * C900 + C50907 * C909) * C50752) *
                C110 +
            (C927 * C1109 + C928 * C50752) * C111 +
            (C929 * C1109 + C930 * C50752) * C112 +
            (C931 * C1109 + C932 * C50752) * C113) *
               C50896 * C460 -
           ((C355 * C50752 + C354 * C1109) * C113 +
            (C353 * C50752 + C352 * C1109) * C112 +
            (C351 * C50752 + C350 * C1109) * C111 +
            ((C117 * C296 + C50907 * C315) * C50752 +
             (C117 * C286 + C50907 * C297) * C1109) *
                C110) *
               C50896 * C459 -
           (((C117 * C1228 + C50907 * C1236) * C50752 +
             (C117 * C1224 + C50907 * C1229) * C1109) *
                C113 +
            ((C117 * C1230 + C50907 * C1237) * C50752 +
             (C117 * C1225 + C50907 * C1231) * C1109) *
                C112 +
            ((C117 * C1232 + C50907 * C1238) * C50752 +
             (C117 * C1226 + C50907 * C1233) * C1109) *
                C111 +
            ((C117 * C1234 + C50907 * C1239) * C50752 +
             (C117 * C1227 + C50907 * C1235) * C1109) *
                C110) *
               C50896 * C461) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C2300 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C2302 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C2300 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C2303 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C2300 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C2304) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C2300 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C50776) *
               C2302 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C2300 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C50776) *
               C2303 +
           ((C2505 * C1036 - (C2506 * C1030 + C2507 * C1035) + C2508 * C1031 -
             C2509 * C1037 - C2510 * C1032) *
                C2300 +
            (C2509 * C1036 - (C2508 * C1030 + C2505 * C1035) + C2510 * C1031 -
             (C117 * C1110 + C50907 * C1115) * C1037 -
             (C117 * C1114 + C50907 * C1122) * C1032) *
                C50776) *
               C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C2300 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C2302 +
           ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
           C3577 * C2304) *
              C50810 * C1105 -
          (C3578 * C2304 +
           ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
           ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
              C50810 * C1106 +
          (C3577 * C2302 +
           ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
           ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
              C50810 * C1107 -
          ((((C117 * C3540 + C50907 * C3544) * C50752 +
             (C117 * C3538 + C50907 * C3541) * C1109) *
                C50776 +
            ((C117 * C3542 + C50907 * C3545) * C50752 +
             (C117 * C3539 + C50907 * C3543) * C1109) *
                C2300) *
               C2304 +
           ((C3564 + C3563) * C50776 + (C3576 + C3575) * C2300) * C2303 +
           C3578 * C2302) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C459 -
           (((C3733 + C3734) * C50776 + (C3735 + C3736) * C2300) * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C460 +
           ((((C117 * C467 + C50907 * C482) * C1109 +
              (C117 * C483 + C50907 * C497) * C50752) *
                 C2300 +
             (C533 * C1109 + C534 * C50752) * C50776) *
                C2302 +
            ((C3757 + C3758) * C2300 + (C3745 + C3746) * C50776) * C2303 +
            ((C3759 + C3760) * C2300 + (C3751 + C3752) * C50776) * C2304) *
               C461) *
              C1033 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            (((C117 * C3224 + C50907 * C3227) * C1109 +
              (C117 * C3228 + C50907 * C3233) * C50752) *
                 C2300 +
             (C3265 * C1109 + C3266 * C50752) * C50776) *
                C2304) *
               C460 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C459 -
           ((((C117 * C3726 + C50907 * C3730) * C50752 +
              (C117 * C3724 + C50907 * C3727) * C1109) *
                 C50776 +
             ((C117 * C3728 + C50907 * C3731) * C50752 +
              (C117 * C3725 + C50907 * C3729) * C1109) *
                 C2300) *
                C2304 +
            ((C3752 + C3751) * C50776 + (C3760 + C3759) * C2300) * C2303 +
            ((C3746 + C3745) * C50776 + (C3758 + C3757) * C2300) * C2302) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C110 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C111 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C112 +
            (C175 * C49770 + C176 * C51021 - C177 * C49763 - C178 * C50757) *
                C113) *
               C50896 * C51037 +
           ((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C110 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C111 +
            (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                C112 +
            (C763 * C49763 - (C532 * C51021 + C531 * C49770) + C764 * C50757) *
                C113) *
               C50896 * C50874) *
              C1033 +
          (((C350 * C49763 -
             ((C117 * C296 + C50907 * C315) * C51021 +
              (C117 * C286 + C50907 * C297) * C49770) +
             C351 * C50757) *
                C110 +
            (C352 * C49763 - (C351 * C51021 + C350 * C49770) + C353 * C50757) *
                C111 +
            (C354 * C49763 - (C353 * C51021 + C352 * C49770) + C355 * C50757) *
                C112 +
            (C653 * C49763 - (C355 * C51021 + C354 * C49770) + C654 * C50757) *
                C113) *
               C50896 * C51037 +
           (((C117 * C894 + C50907 * C899) * C49770 +
             (C117 * C900 + C50907 * C909) * C51021 - C927 * C49763 -
             C928 * C50757) *
                C110 +
            (C927 * C49770 + C928 * C51021 - C929 * C49763 - C930 * C50757) *
                C111 +
            (C929 * C49770 + C930 * C51021 - C931 * C49763 - C932 * C50757) *
                C112 +
            (C931 * C49770 + C932 * C51021 -
             (C117 * C898 + C50907 * C907) * C49763 -
             (C117 * C908 + C50907 * C913) * C50757) *
                C113) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C2300 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C50776) *
                C2302 +
            ((C3907 + C3908 - C3909 - C3910) * C2300 +
             (C3911 + C3912 - C3913 - C3914) * C50776) *
                C2303 +
            C3939 * C2304) *
               C51037 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C2300 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C50776) *
                C2302 +
            ((C4134 - (C4135 + C4136) + C4137) * C2300 +
             (C4138 - (C4139 + C4140) + C4141) * C50776) *
                C2303 +
            ((C4142 - (C4143 + C4144) + C4145) * C2300 +
             (C4146 - (C4147 + C4148) + C4149) * C50776) *
                C2304) *
               C50874) *
              C1033 +
          ((((C3909 - (C3908 + C3907) + C3910) * C2300 +
             (C3913 - (C3912 + C3911) + C3914) * C50776) *
                C2302 +
            ((C3917 - (C3916 + C3915) + C3918) * C2300 +
             (C3921 - (C3920 + C3919) + C3922) * C50776) *
                C2303 +
            ((C3923 - (C3924 + C3925) + C3926) * C2300 +
             (C3927 - (C3928 + C3929) + C3930) * C50776) *
                C2304) *
               C51037 +
           (((C4136 + C4135 - C4134 - C4137) * C2300 +
             (C4140 + C4139 - C4138 - C4141) * C50776) *
                C2302 +
            ((C4144 + C4143 - C4142 - C4145) * C2300 +
             (C4148 + C4147 - C4146 - C4149) * C50776) *
                C2303 +
            (((C117 * C3224 + C50907 * C3227) * C49770 +
              (C117 * C3228 + C50907 * C3233) * C51021 - C3265 * C49763 -
              C3266 * C50757) *
                 C2300 +
             (C3265 * C49770 + C3266 * C51021 -
              (C117 * C3226 + C50907 * C3231) * C49763 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C110 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C111 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C112 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C113) *
              C50896 * C50810 * C1033 +
          ((C350 * C1036 -
            ((C117 * C296 + C50907 * C315) * C1030 +
             (C117 * C286 + C50907 * C297) * C1035) +
            C351 * C1031 - C352 * C1037 - C353 * C1032) *
               C110 +
           (C352 * C1036 - (C351 * C1030 + C350 * C1035) + C353 * C1031 -
            C354 * C1037 - C355 * C1032) *
               C111 +
           (C354 * C1036 - (C353 * C1030 + C352 * C1035) + C355 * C1031 -
            C653 * C1037 - C654 * C1032) *
               C112 +
           (C653 * C1036 - (C355 * C1030 + C354 * C1035) + C654 * C1031 -
            (C117 * C644 + C50907 * C645) * C1037 -
            (C117 * C646 + C50907 * C647) * C1032) *
               C113) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C110 +
           (C171 * C1109 + C172 * C50752) * C111 +
           (C173 * C1109 + C174 * C50752) * C112 +
           (C175 * C1109 + C176 * C50752) * C113) *
              C50896 * C50810 * C1105 -
          ((C355 * C50752 + C354 * C1109) * C113 +
           (C353 * C50752 + C352 * C1109) * C112 +
           (C351 * C50752 + C350 * C1109) * C111 +
           ((C117 * C296 + C50907 * C315) * C50752 +
            (C117 * C286 + C50907 * C297) * C1109) *
               C110) *
              C50896 * C50810 * C1106 +
          (((C117 * C290 + C50907 * C305) * C1109 +
            (C117 * C306 + C50907 * C320) * C50752) *
               C110 +
           (C356 * C1109 + C357 * C50752) * C111 +
           (C358 * C1109 + C359 * C50752) * C112 +
           (C360 * C1109 + C361 * C50752) * C113) *
              C50896 * C50810 * C1107 -
          (((C117 * C1114 + C50907 * C1122) * C50752 +
            (C117 * C1110 + C50907 * C1115) * C1109) *
               C113 +
           ((C117 * C1116 + C50907 * C1123) * C50752 +
            (C117 * C1111 + C50907 * C1117) * C1109) *
               C112 +
           ((C117 * C1118 + C50907 * C1124) * C50752 +
            (C117 * C1112 + C50907 * C1119) * C1109) *
               C111 +
           ((C117 * C1120 + C50907 * C1125) * C50752 +
            (C117 * C1113 + C50907 * C1121) * C1109) *
               C110) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C2300 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C2302 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C2300 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C2303 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C2300 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C2304) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C2300 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C50776) *
               C2302 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C2300 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C50776) *
               C2303 +
           ((C2505 * C1036 - (C2506 * C1030 + C2507 * C1035) + C2508 * C1031 -
             C2509 * C1037 - C2510 * C1032) *
                C2300 +
            (C2509 * C1036 - (C2508 * C1030 + C2505 * C1035) + C2510 * C1031 -
             (C117 * C1110 + C50907 * C1115) * C1037 -
             (C117 * C1114 + C50907 * C1122) * C1032) *
                C50776) *
               C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C2300 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C2302 +
           ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
           C3577 * C2304) *
              C50810 * C1105 -
          (C3578 * C2304 +
           ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
           ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
              C50810 * C1106 +
          (C3577 * C2302 +
           ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
           ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
              C50810 * C1107 -
          ((((C117 * C3540 + C50907 * C3544) * C50752 +
             (C117 * C3538 + C50907 * C3541) * C1109) *
                C50776 +
            ((C117 * C3542 + C50907 * C3545) * C50752 +
             (C117 * C3539 + C50907 * C3543) * C1109) *
                C2300) *
               C2304 +
           ((C3564 + C3563) * C50776 + (C3576 + C3575) * C2300) * C2303 +
           C3578 * C2302) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C110 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C111 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C112 +
            (C175 * C49770 + C176 * C51021 - C177 * C49763 - C178 * C50757) *
                C113) *
               C50896 * C1687 +
           ((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C110 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C111 +
            (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                C112 +
            (C763 * C49763 - (C532 * C51021 + C531 * C49770) + C764 * C50757) *
                C113) *
               C50896 * C50874) *
              C51036 +
          (((C350 * C49763 -
             ((C117 * C296 + C50907 * C315) * C51021 +
              (C117 * C286 + C50907 * C297) * C49770) +
             C351 * C50757) *
                C110 +
            (C352 * C49763 - (C351 * C51021 + C350 * C49770) + C353 * C50757) *
                C111 +
            (C354 * C49763 - (C353 * C51021 + C352 * C49770) + C355 * C50757) *
                C112 +
            (C653 * C49763 - (C355 * C51021 + C354 * C49770) + C654 * C50757) *
                C113) *
               C50896 * C1687 +
           (((C117 * C894 + C50907 * C899) * C49770 +
             (C117 * C900 + C50907 * C909) * C51021 - C927 * C49763 -
             C928 * C50757) *
                C110 +
            (C927 * C49770 + C928 * C51021 - C929 * C49763 - C930 * C50757) *
                C111 +
            (C929 * C49770 + C930 * C51021 - C931 * C49763 - C932 * C50757) *
                C112 +
            (C931 * C49770 + C932 * C51021 -
             (C117 * C898 + C50907 * C907) * C49763 -
             (C117 * C908 + C50907 * C913) * C50757) *
                C113) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C2300 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C50776) *
                C2302 +
            ((C3907 + C3908 - C3909 - C3910) * C2300 +
             (C3911 + C3912 - C3913 - C3914) * C50776) *
                C2303 +
            C3939 * C2304) *
               C1687 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C2300 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C50776) *
                C2302 +
            ((C4134 - (C4135 + C4136) + C4137) * C2300 +
             (C4138 - (C4139 + C4140) + C4141) * C50776) *
                C2303 +
            ((C4142 - (C4143 + C4144) + C4145) * C2300 +
             (C4146 - (C4147 + C4148) + C4149) * C50776) *
                C2304) *
               C50874) *
              C51036 +
          ((((C3909 - (C3908 + C3907) + C3910) * C2300 +
             (C3913 - (C3912 + C3911) + C3914) * C50776) *
                C2302 +
            ((C3917 - (C3916 + C3915) + C3918) * C2300 +
             (C3921 - (C3920 + C3919) + C3922) * C50776) *
                C2303 +
            ((C3923 - (C3924 + C3925) + C3926) * C2300 +
             (C3927 - (C3928 + C3929) + C3930) * C50776) *
                C2304) *
               C1687 +
           (((C4136 + C4135 - C4134 - C4137) * C2300 +
             (C4140 + C4139 - C4138 - C4141) * C50776) *
                C2302 +
            ((C4144 + C4143 - C4142 - C4145) * C2300 +
             (C4148 + C4147 - C4146 - C4149) * C50776) *
                C2303 +
            ((C4314 * C49770 + C4315 * C51021 - C3265 * C49763 -
              C3266 * C50757) *
                 C2300 +
             (C3265 * C49770 + C3266 * C51021 -
              (C117 * C3226 + C50907 * C3231) * C49763 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C110 +
            (C171 * C1109 + C172 * C50752) * C111 +
            (C173 * C1109 + C174 * C50752) * C112 +
            (C175 * C1109 + C176 * C50752) * C113) *
               C50896 * C51083 -
           ((C532 * C50752 + C531 * C1109) * C113 +
            (C530 * C50752 + C529 * C1109) * C112 +
            (C528 * C50752 + C527 * C1109) * C111 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C110) *
               C50896 * C51084 +
           (((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C110 +
            (C533 * C1109 + C534 * C50752) * C111 +
            (C535 * C1109 + C536 * C50752) * C112 +
            (C537 * C1109 + C538 * C50752) * C113) *
               C50896 * C2103) *
              C51036 +
          ((((C117 * C894 + C50907 * C899) * C1109 +
             (C117 * C900 + C50907 * C909) * C50752) *
                C110 +
            (C927 * C1109 + C928 * C50752) * C111 +
            (C929 * C1109 + C930 * C50752) * C112 +
            (C931 * C1109 + C932 * C50752) * C113) *
               C50896 * C51084 -
           ((C355 * C50752 + C354 * C1109) * C113 +
            (C353 * C50752 + C352 * C1109) * C112 +
            (C351 * C50752 + C350 * C1109) * C111 +
            ((C117 * C296 + C50907 * C315) * C50752 +
             (C117 * C286 + C50907 * C297) * C1109) *
                C110) *
               C50896 * C51083 -
           (((C117 * C1228 + C50907 * C1236) * C50752 +
             (C117 * C1224 + C50907 * C1229) * C1109) *
                C113 +
            ((C117 * C1230 + C50907 * C1237) * C50752 +
             (C117 * C1225 + C50907 * C1231) * C1109) *
                C112 +
            ((C117 * C1232 + C50907 * C1238) * C50752 +
             (C117 * C1226 + C50907 * C1233) * C1109) *
                C111 +
            ((C117 * C1234 + C50907 * C1239) * C50752 +
             (C117 * C1227 + C50907 * C1235) * C1109) *
                C110) *
               C50896 * C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C51083 -
           (C4316 * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C51084 +
           ((((C117 * C467 + C50907 * C482) * C1109 +
              (C117 * C483 + C50907 * C497) * C50752) *
                 C2300 +
             (C533 * C1109 + C534 * C50752) * C50776) *
                C2302 +
            ((C3757 + C3758) * C2300 + (C3745 + C3746) * C50776) * C2303 +
            ((C3759 + C3760) * C2300 + (C3751 + C3752) * C50776) * C2304) *
               C2103) *
              C51036 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            ((C4317 + C4318) * C2300 + (C4310 + C4311) * C50776) * C2304) *
               C51084 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C51083 -
           ((((C117 * C3726 + C50907 * C3730) * C50752 +
              (C117 * C3724 + C50907 * C3727) * C1109) *
                 C50776 +
             ((C117 * C3728 + C50907 * C3731) * C50752 +
              (C117 * C3725 + C50907 * C3729) * C1109) *
                 C2300) *
                C2304 +
            ((C3752 + C3751) * C50776 + (C3760 + C3759) * C2300) * C2303 +
            ((C3746 + C3745) * C50776 + (C3758 + C3757) * C2300) * C2302) *
               C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C110 +
            (C171 * C1109 + C172 * C50752) * C111 +
            (C173 * C1109 + C174 * C50752) * C112 +
            (C175 * C1109 + C176 * C50752) * C113) *
               C50896 * C1687 -
           ((C532 * C50752 + C531 * C1109) * C113 +
            (C530 * C50752 + C529 * C1109) * C112 +
            (C528 * C50752 + C527 * C1109) * C111 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C110) *
               C50896 * C50874) *
              C280 +
          ((((C117 * C894 + C50907 * C899) * C1109 +
             (C117 * C900 + C50907 * C909) * C50752) *
                C110 +
            (C927 * C1109 + C928 * C50752) * C111 +
            (C929 * C1109 + C930 * C50752) * C112 +
            (C931 * C1109 + C932 * C50752) * C113) *
               C50896 * C50874 -
           ((C355 * C50752 + C354 * C1109) * C113 +
            (C353 * C50752 + C352 * C1109) * C112 +
            (C351 * C50752 + C350 * C1109) * C111 +
            ((C117 * C296 + C50907 * C315) * C50752 +
             (C117 * C286 + C50907 * C297) * C1109) *
                C110) *
               C50896 * C1687) *
              C281 +
          ((((C117 * C290 + C50907 * C305) * C1109 +
             (C117 * C306 + C50907 * C320) * C50752) *
                C110 +
            (C356 * C1109 + C357 * C50752) * C111 +
            (C358 * C1109 + C359 * C50752) * C112 +
            (C360 * C1109 + C361 * C50752) * C113) *
               C50896 * C1687 -
           (((C117 * C1577 + C50907 * C1585) * C50752 +
             (C117 * C1573 + C50907 * C1578) * C1109) *
                C113 +
            ((C117 * C1579 + C50907 * C1586) * C50752 +
             (C117 * C1574 + C50907 * C1580) * C1109) *
                C112 +
            ((C117 * C1581 + C50907 * C1587) * C50752 +
             (C117 * C1575 + C50907 * C1582) * C1109) *
                C111 +
            ((C117 * C1583 + C50907 * C1588) * C50752 +
             (C117 * C1576 + C50907 * C1584) * C1109) *
                C110) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C110 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C111 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C112 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C113) *
              C50896 * C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50907 * C492) * C1030 +
             (C117 * C463 + C50907 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C110 +
           (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
            C531 * C1037 - C532 * C1032) *
               C111 +
           (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
            C763 * C1037 - C764 * C1032) *
               C112 +
           (C763 * C1036 - (C532 * C1030 + C531 * C1035) + C764 * C1031 -
            (C117 * C754 + C50907 * C755) * C1037 -
            (C117 * C756 + C50907 * C757) * C1032) *
               C113) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C110 +
           (C171 * C1109 + C172 * C50752) * C111 +
           (C173 * C1109 + C174 * C50752) * C112 +
           (C175 * C1109 + C176 * C50752) * C113) *
              C50896 * C1853 -
          ((C532 * C50752 + C531 * C1109) * C113 +
           (C530 * C50752 + C529 * C1109) * C112 +
           (C528 * C50752 + C527 * C1109) * C111 +
           ((C117 * C473 + C50907 * C492) * C50752 +
            (C117 * C463 + C50907 * C474) * C1109) *
               C110) *
              C50896 * C1854 +
          (((C117 * C467 + C50907 * C482) * C1109 +
            (C117 * C483 + C50907 * C497) * C50752) *
               C110 +
           (C533 * C1109 + C534 * C50752) * C111 +
           (C535 * C1109 + C536 * C50752) * C112 +
           (C537 * C1109 + C538 * C50752) * C113) *
              C50896 * C1855 -
          (((C117 * C1861 + C50907 * C1869) * C50752 +
            (C117 * C1857 + C50907 * C1862) * C1109) *
               C113 +
           ((C117 * C1863 + C50907 * C1870) * C50752 +
            (C117 * C1858 + C50907 * C1864) * C1109) *
               C112 +
           ((C117 * C1865 + C50907 * C1871) * C50752 +
            (C117 * C1859 + C50907 * C1866) * C1109) *
               C111 +
           ((C117 * C1867 + C50907 * C1872) * C50752 +
            (C117 * C1860 + C50907 * C1868) * C1109) *
               C110) *
              C50896 * C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C2300 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C2302 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C2300 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C2303 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C2300 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C2304) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C2300 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C50776) *
               C2302 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C2300 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50776) *
               C2303 +
           ((C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
             C3029 * C1037 - C3030 * C1032) *
                C2300 +
            (C3029 * C1036 - (C2704 * C1030 + C2703 * C1035) + C3030 * C1031 -
             (C117 * C1573 + C50907 * C1578) * C1037 -
             (C117 * C1577 + C50907 * C1585) * C1032) *
                C50776) *
               C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C1687 -
           (C4316 * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            ((C4317 + C4318) * C2300 + (C4310 + C4311) * C50776) * C2304) *
               C50874 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C1687) *
              C281 +
          ((C3577 * C2302 +
            ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
            ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
               C1687 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             ((C117 * C4299 + C50907 * C4302) * C50752 +
              (C117 * C4296 + C50907 * C4300) * C1109) *
                 C2300) *
                C2304 +
            ((C4311 + C4310) * C50776 + (C4318 + C4317) * C2300) * C2303 +
            C4316 * C2302) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C2300 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C2302 +
           ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
           C3577 * C2304) *
              C1853 -
          (C4316 * C2304 +
           ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
           ((C528 * C50752 + C527 * C1109) * C50776 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C2300) *
               C2302) *
              C1854 +
          ((((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C2300 +
            (C533 * C1109 + C534 * C50752) * C50776) *
               C2302 +
           ((C3757 + C3758) * C2300 + (C3745 + C3746) * C50776) * C2303 +
           ((C3759 + C3760) * C2300 + (C3751 + C3752) * C50776) * C2304) *
              C1855 -
          ((((C117 * C4712 + C50907 * C4720) * C50752 +
             (C117 * C4708 + C50907 * C4713) * C1109) *
                C50776 +
            ((C117 * C4714 + C50907 * C4721) * C50752 +
             (C117 * C4709 + C50907 * C4715) * C1109) *
                C2300) *
               C2304 +
           (((C117 * C4716 + C50907 * C4722) * C50752 +
             (C117 * C4710 + C50907 * C4717) * C1109) *
                C50776 +
            ((C117 * C4718 + C50907 * C4723) * C50752 +
             (C117 * C4711 + C50907 * C4719) * C1109) *
                C2300) *
               C2303 +
           (((C117 * C1865 + C50907 * C1871) * C50752 +
             (C117 * C1859 + C50907 * C1866) * C1109) *
                C50776 +
            ((C117 * C1867 + C50907 * C1872) * C50752 +
             (C117 * C1860 + C50907 * C1868) * C1109) *
                C2300) *
               C2302) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C49770 +
            (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
            C172 * C50757) *
               C110 +
           (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
               C111 +
           (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
               C112 +
           (C175 * C49770 + C176 * C51021 - C177 * C49763 - C178 * C50757) *
               C113) *
              C50896 * C51083 +
          ((C527 * C49763 -
            ((C117 * C473 + C50907 * C492) * C51021 +
             (C117 * C463 + C50907 * C474) * C49770) +
            C528 * C50757) *
               C110 +
           (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
               C111 +
           (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
               C112 +
           (C763 * C49763 - (C532 * C51021 + C531 * C49770) + C764 * C50757) *
               C113) *
              C50896 * C51084 +
          (((C117 * C467 + C50907 * C482) * C49770 +
            (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
            C534 * C50757) *
               C110 +
           (C533 * C49770 + C534 * C51021 - C535 * C49763 - C536 * C50757) *
               C111 +
           (C535 * C49770 + C536 * C51021 - C537 * C49763 - C538 * C50757) *
               C112 +
           (C537 * C49770 + C538 * C51021 -
            (C117 * C471 + C50907 * C490) * C49763 -
            (C117 * C491 + C50907 * C501) * C50757) *
               C113) *
              C50896 * C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C2300 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C50776) *
               C2302 +
           ((C3907 + C3908 - C3909 - C3910) * C2300 +
            (C3911 + C3912 - C3913 - C3914) * C50776) *
               C2303 +
           C3939 * C2304) *
              C51083 +
          (((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C2300 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C50776) *
               C2302 +
           ((C4134 - (C4135 + C4136) + C4137) * C2300 +
            (C4138 - (C4139 + C4140) + C4141) * C50776) *
               C2303 +
           ((C4142 - (C4143 + C4144) + C4145) * C2300 +
            (C4146 - (C4147 + C4148) + C4149) * C50776) *
               C2304) *
              C51084 +
          ((((C117 * C467 + C50907 * C482) * C49770 +
             (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
             C534 * C50757) *
                C2300 +
            (C533 * C49770 + C534 * C51021 - C535 * C49763 - C536 * C50757) *
                C50776) *
               C2302 +
           ((C3753 * C49770 + C3754 * C51021 - C2705 * C49763 -
             C2706 * C50757) *
                C2300 +
            (C2705 * C49770 + C2706 * C51021 -
             (C117 * C1225 + C50907 * C1231) * C49763 -
             (C117 * C1230 + C50907 * C1237) * C50757) *
                C50776) *
               C2303 +
           ((C3755 * C49770 + C3756 * C51021 - C2707 * C49763 -
             C2708 * C50757) *
                C2300 +
            (C2707 * C49770 + C2708 * C51021 -
             (C117 * C2680 + C50907 * C2685) * C49763 -
             (C117 * C2686 + C50907 * C2689) * C50757) *
                C50776) *
               C2304) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C110 +
           (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
            C175 * C1037 + C176 * C1032) *
               C111 +
           (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
            C177 * C1037 + C178 * C1032) *
               C112 +
           (C175 * C1035 + C176 * C1030 - C177 * C1036 - C178 * C1031 +
            C179 * C1037 + C180 * C1032) *
               C113) *
              C50896 * C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50907 * C492) * C1030 +
             (C117 * C463 + C50907 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C110 +
           (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
            C531 * C1037 - C532 * C1032) *
               C111 +
           (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
            C763 * C1037 - C764 * C1032) *
               C112 +
           (C763 * C1036 - (C532 * C1030 + C531 * C1035) + C764 * C1031 -
            (C117 * C754 + C50907 * C755) * C1037 -
            (C117 * C756 + C50907 * C757) * C1032) *
               C113) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C110 +
            (C171 * C1109 + C172 * C50752) * C111 +
            (C173 * C1109 + C174 * C50752) * C112 +
            (C175 * C1109 + C176 * C50752) * C113) *
               C50896 * C1687 -
           ((C532 * C50752 + C531 * C1109) * C113 +
            (C530 * C50752 + C529 * C1109) * C112 +
            (C528 * C50752 + C527 * C1109) * C111 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C110) *
               C50896 * C50874) *
              C280 +
          ((((C117 * C894 + C50907 * C899) * C1109 +
             (C117 * C900 + C50907 * C909) * C50752) *
                C110 +
            (C927 * C1109 + C928 * C50752) * C111 +
            (C929 * C1109 + C930 * C50752) * C112 +
            (C931 * C1109 + C932 * C50752) * C113) *
               C50896 * C50874 -
           ((C355 * C50752 + C354 * C1109) * C113 +
            (C353 * C50752 + C352 * C1109) * C112 +
            (C351 * C50752 + C350 * C1109) * C111 +
            ((C117 * C296 + C50907 * C315) * C50752 +
             (C117 * C286 + C50907 * C297) * C1109) *
                C110) *
               C50896 * C1687) *
              C281 +
          ((((C117 * C290 + C50907 * C305) * C1109 +
             (C117 * C306 + C50907 * C320) * C50752) *
                C110 +
            (C356 * C1109 + C357 * C50752) * C111 +
            (C358 * C1109 + C359 * C50752) * C112 +
            (C360 * C1109 + C361 * C50752) * C113) *
               C50896 * C1687 -
           (((C117 * C1577 + C50907 * C1585) * C50752 +
             (C117 * C1573 + C50907 * C1578) * C1109) *
                C113 +
            ((C117 * C1579 + C50907 * C1586) * C50752 +
             (C117 * C1574 + C50907 * C1580) * C1109) *
                C112 +
            ((C117 * C1581 + C50907 * C1587) * C50752 +
             (C117 * C1575 + C50907 * C1582) * C1109) *
                C111 +
            ((C117 * C1583 + C50907 * C1588) * C50752 +
             (C117 * C1576 + C50907 * C1584) * C1109) *
                C110) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C2300 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C2302 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C2300 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C2303 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C2300 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C2304) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C2300 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C50776) *
               C2302 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C2300 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50776) *
               C2303 +
           ((C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
             C3029 * C1037 - C3030 * C1032) *
                C2300 +
            (C3029 * C1036 - (C2704 * C1030 + C2703 * C1035) + C3030 * C1031 -
             (C117 * C1573 + C50907 * C1578) * C1037 -
             (C117 * C1577 + C50907 * C1585) * C1032) *
                C50776) *
               C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C2300 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C2302 +
            ((C3547 + C3548) * C2300 + (C3549 + C3550) * C50776) * C2303 +
            C3577 * C2304) *
               C1687 -
           (C4316 * C2304 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C2300) * C2303 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C2300) *
                C2302) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C2300 + (C3738 + C3737) * C50776) * C2302 +
            ((C3736 + C3735) * C2300 + (C3734 + C3733) * C50776) * C2303 +
            ((C4317 + C4318) * C2300 + (C4310 + C4311) * C50776) * C2304) *
               C50874 -
           (C3578 * C2304 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C2300) * C2303 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C2300) * C2302) *
               C1687) *
              C281 +
          ((C3577 * C2302 +
            ((C3558 + C3557) * C2300 + (C3556 + C3555) * C50776) * C2303 +
            ((C3575 + C3576) * C2300 + (C3563 + C3564) * C50776) * C2304) *
               C1687 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             ((C117 * C4299 + C50907 * C4302) * C50752 +
              (C117 * C4296 + C50907 * C4300) * C1109) *
                 C2300) *
                C2304 +
            ((C4311 + C4310) * C50776 + (C4318 + C4317) * C2300) * C2303 +
            C4316 * C2302) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C641 +
             (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
             C172 * C51078 + C173 * C643 + C174 * C638) *
                C51028 +
            (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
             C175 * C643 + C176 * C638) *
                C50776) *
               C51085 +
           ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C51028 +
            (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C50776) *
               C51086 +
           ((C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C51028 +
            (C2873 + C2874 - C2875 - C2876 + C2877 + C2878) * C50776) *
               C24524) *
              C50810 * C51036 +
          (((C2857 - (C2856 + C2855) + C2858 - C2859 - C2860) * C51028 +
            (C2863 - (C2862 + C2861) + C2864 - C2865 - C2866) * C50776) *
               C51085 +
           ((C2869 - (C2868 + C2867) + C2870 - C2871 - C2872) * C51028 +
            (C2875 - (C2874 + C2873) + C2876 - C2877 - C2878) * C50776) *
               C51086 +
           ((C20199 - (C20198 + C20197) + C20200 - C20201 - C20202) * C51028 +
            (C2509 * C642 - (C2508 * C51077 + C2505 * C641) + C2510 * C51078 -
             (C117 * C1110 + C50907 * C1115) * C643 -
             (C117 * C1114 + C50907 * C1122) * C638) *
                C50776) *
               C24524) *
              C50810 * C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C283 +
              (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
              C172 * C50757) *
                 C51028 +
             (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                 C50776) *
                C51085 +
            ((C2513 + C2514 - C2468 - C2469) * C51028 +
             (C2470 + C2471 - C2472 - C2473) * C50776) *
                C51086 +
            C24674 * C24524) *
               C51037 +
           (((C527 * C284 -
              ((C117 * C473 + C50907 * C492) * C278 +
               (C117 * C463 + C50907 * C474) * C283) +
              C528 * C50757) *
                 C51028 +
             (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                 C50776) *
                C51085 +
            ((C3237 - (C3267 + C3268) + C3242) * C51028 +
             (C3243 - (C3244 + C3245) + C3246) * C50776) *
                C51086 +
            ((C3247 - (C3269 + C3270) + C3252) * C51028 +
             (C3253 - (C3254 + C3255) + C3256) * C50776) *
                C24524) *
               C50874) *
              C51036 +
          ((((C2468 - (C2514 + C2513) + C2469) * C51028 +
             (C2472 - (C2471 + C2470) + C2473) * C50776) *
                C51085 +
            ((C2478 - (C2516 + C2515) + C2479) * C51028 +
             (C2482 - (C2481 + C2480) + C2483) * C50776) *
                C51086 +
            ((C2518 - (C2519 + C2520) + C2521) * C51028 +
             (C2522 - (C2523 + C2524) + C2525) * C50776) *
                C24524) *
               C51037 +
           (((C3268 + C3267 - C3237 - C3242) * C51028 +
             (C3245 + C3244 - C3243 - C3246) * C50776) *
                C51085 +
            ((C3270 + C3269 - C3247 - C3252) * C51028 +
             (C3255 + C3254 - C3253 - C3256) * C50776) *
                C51086 +
            ((C20433 + C20432 - C20431 - C20434) * C51028 +
             (C3265 * C283 + C3266 * C278 -
              (C117 * C3226 + C50907 * C3231) * C284 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C24524) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C51028 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C51085 +
           ((C2513 + C2514 - C2468 - C2469) * C51028 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C51086 +
           C24674 * C24524) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C51028 +
            (C2472 - (C2471 + C2470) + C2473) * C50776) *
               C51085 +
           ((C2478 - (C2516 + C2515) + C2479) * C51028 +
            (C2482 - (C2481 + C2480) + C2483) * C50776) *
               C51086 +
           ((C2518 - (C2519 + C2520) + C2521) * C51028 +
            (C2522 - (C2523 + C2524) + C2525) * C50776) *
               C24524) *
              C50810 * C281 +
          (C24674 * C51085 +
           (C19999 * C51028 + (C2524 + C2523 - C2522 - C2525) * C50776) *
               C51086 +
           ((C19996 + C19995 - C19994 - C19997) * C51028 +
            (C2511 * C283 + C2512 * C278 -
             (C117 * C2453 + C50907 * C2458) * C284 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C24524) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C51028 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50776) *
              C51085 +
          ((C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C51028 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C50776) *
              C51086 +
          ((C2502 * C118 + C2503 * C106 - C356 * C119 - C357 * C107 +
            C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
               C51028 +
           (C356 * C118 + C357 * C106 - C358 * C119 - C359 * C107 +
            C360 * C120 + C361 * C108 - (C117 * C294 + C50907 * C313) * C121 -
            (C117 * C314 + C50907 * C324) * C109) *
               C50776) *
              C24524) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C51028 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C51085 +
           ((C2513 + C2514 - C2468 - C2469) * C51028 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C51086 +
           C24674 * C24524) *
              C459 +
          (((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C51028 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                C50776) *
               C51085 +
           ((C3237 - (C3267 + C3268) + C3242) * C51028 +
            (C3243 - (C3244 + C3245) + C3246) * C50776) *
               C51086 +
           ((C3247 - (C3269 + C3270) + C3252) * C51028 +
            (C3253 - (C3254 + C3255) + C3256) * C50776) *
               C24524) *
              C460 +
          ((((C117 * C467 + C50907 * C482) * C283 +
             (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
             C534 * C50757) *
                C51028 +
            (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50757) *
                C50776) *
               C51085 +
           ((C3753 * C283 + C3754 * C278 - C2705 * C284 - C2706 * C50757) *
                C51028 +
            (C2705 * C283 + C2706 * C278 - C8464 * C284 - C8465 * C50757) *
                C50776) *
               C51086 +
           ((C3755 * C283 + C3756 * C278 - C2707 * C284 - C2708 * C50757) *
                C51028 +
            (C2707 * C283 + C2708 * C278 -
             (C117 * C2680 + C50907 * C2685) * C284 -
             (C117 * C2686 + C50907 * C2689) * C50757) *
                C50776) *
               C24524) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50907 * C129) * C641 +
                     (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
                     C172 * C51078 + C173 * C643 + C174 * C638) *
                        C51028 +
                    (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
                     C175 * C643 + C176 * C638) *
                        C50776) *
                       C51085 +
                   ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C51028 +
                    (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C50776) *
                       C51086 +
                   ((C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C51028 +
                    (C2873 + C2874 - C2875 - C2876 + C2877 + C2878) * C50776) *
                       C24524) *
                      C51037 +
                  (((C527 * C642 -
                     ((C117 * C473 + C50907 * C492) * C51077 +
                      (C117 * C463 + C50907 * C474) * C641) +
                     C528 * C51078 - C529 * C643 - C530 * C638) *
                        C51028 +
                    (C529 * C642 - (C528 * C51077 + C527 * C641) +
                     C530 * C51078 - C531 * C643 - C532 * C638) *
                        C50776) *
                       C51085 +
                   ((C927 * C642 - (C3261 * C51077 + C3262 * C641) +
                     C928 * C51078 - C929 * C643 - C930 * C638) *
                        C51028 +
                    (C929 * C642 - (C928 * C51077 + C927 * C641) +
                     C930 * C51078 - C931 * C643 - C932 * C638) *
                        C50776) *
                       C51086 +
                   ((C2703 * C642 - (C3263 * C51077 + C3264 * C641) +
                     C2704 * C51078 - C3029 * C643 - C3030 * C638) *
                        C51028 +
                    (C3029 * C642 - (C2704 * C51077 + C2703 * C641) +
                     C3030 * C51078 - (C117 * C1573 + C50907 * C1578) * C643 -
                     (C117 * C1577 + C50907 * C1585) * C638) *
                        C50776) *
                       C24524) *
                      C50874) *
                 C50798) /
                (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C51028 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50776) *
              C51085 +
          ((C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C51028 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C50776) *
              C51086 +
          ((C2502 * C118 + C2503 * C106 - C356 * C119 - C357 * C107 +
            C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
               C51028 +
           (C356 * C118 + C357 * C106 - C358 * C119 - C359 * C107 +
            C360 * C120 + C361 * C108 - (C117 * C294 + C50907 * C313) * C121 -
            (C117 * C314 + C50907 * C324) * C109) *
               C50776) *
              C24524) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C51028 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                C50776) *
               C51085 +
           ((C2513 + C2514 - C2468 - C2469) * C51028 +
            (C2470 + C2471 - C2472 - C2473) * C50776) *
               C51086 +
           C24674 * C24524) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C51028 +
            (C2472 - (C2471 + C2470) + C2473) * C50776) *
               C51085 +
           ((C2478 - (C2516 + C2515) + C2479) * C51028 +
            (C2482 - (C2481 + C2480) + C2483) * C50776) *
               C51086 +
           ((C2518 - (C2519 + C2520) + C2521) * C51028 +
            (C2522 - (C2523 + C2524) + C2525) * C50776) *
               C24524) *
              C50810 * C281 +
          (C24674 * C51085 +
           (C19999 * C51028 + (C2524 + C2523 - C2522 - C2525) * C50776) *
               C51086 +
           ((C19996 + C19995 - C19994 - C19997) * C51028 +
            (C2511 * C283 + C2512 * C278 -
             (C117 * C2453 + C50907 * C2458) * C284 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C24524) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C51028 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C50776) *
               C51085 +
           ((C3907 + C3908 - C3909 - C3910) * C51028 +
            (C3911 + C3912 - C3913 - C3914) * C50776) *
               C51086 +
           C25851 * C24524) *
              C50810 * C51081 +
          (((C3909 - (C3908 + C3907) + C3910) * C51028 +
            (C3913 - (C3912 + C3911) + C3914) * C50776) *
               C51085 +
           ((C3917 - (C3916 + C3915) + C3918) * C51028 +
            (C3921 - (C3920 + C3919) + C3922) * C50776) *
               C51086 +
           ((C3923 - (C3924 + C3925) + C3926) * C51028 +
            (C3927 - (C3928 + C3929) + C3930) * C50776) *
               C24524) *
              C50810 * C51082 +
          (C25851 * C51085 +
           (C20838 * C51028 + (C3929 + C3928 - C3927 - C3930) * C50776) *
               C51086 +
           ((C20835 + C20834 - C20833 - C20836) * C51028 +
            (C2511 * C49770 + C2512 * C51021 -
             (C117 * C2453 + C50907 * C2458) * C49763 -
             (C117 * C2459 + C50907 * C2462) * C50757) *
                C50776) *
               C24524) *
              C50810 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C51028 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C51085 +
            ((C3547 + C3548) * C51028 + (C3549 + C3550) * C50776) * C51086 +
            C25555 * C24524) *
               C51037 -
           (C26194 * C24524 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C51028) * C51086 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C51028) *
                C51085) *
               C50874) *
              C51081 +
          ((((C3740 + C3739) * C51028 + (C3738 + C3737) * C50776) * C51085 +
            ((C3736 + C3735) * C51028 + (C3734 + C3733) * C50776) * C51086 +
            ((C4317 + C4318) * C51028 + (C4310 + C4311) * C50776) * C24524) *
               C50874 -
           (C25556 * C24524 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C51028) * C51086 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C51028) * C51085) *
               C51037) *
              C51082 +
          ((C25555 * C51085 +
            (C20610 * C51028 + (C3556 + C3555) * C50776) * C51086 +
            ((C3575 + C3576) * C51028 + (C3563 + C3564) * C50776) * C24524) *
               C51037 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             (C21086 + C21085) * C51028) *
                C24524 +
            ((C4311 + C4310) * C50776 + C21076 * C51028) * C51086 +
            C26194 * C51085) *
               C50874) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C51028 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C51085 +
           ((C3547 + C3548) * C51028 + (C3549 + C3550) * C50776) * C51086 +
           C25555 * C24524) *
              C50810 * C1105 -
          (C25556 * C24524 +
           ((C3554 + C3553) * C50776 + (C3552 + C3551) * C51028) * C51086 +
           ((C3550 + C3549) * C50776 + (C3548 + C3547) * C51028) * C51085) *
              C50810 * C1106 +
          (C25555 * C51085 +
           (C20610 * C51028 + (C3556 + C3555) * C50776) * C51086 +
           ((C3575 + C3576) * C51028 + (C3563 + C3564) * C50776) * C24524) *
              C50810 * C1107 -
          ((((C117 * C3540 + C50907 * C3544) * C50752 +
             (C117 * C3538 + C50907 * C3541) * C1109) *
                C50776 +
            (C20622 + C20621) * C51028) *
               C24524 +
           ((C3564 + C3563) * C50776 + C20611 * C51028) * C51086 +
           C25556 * C51085) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C51028 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C51085 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C51028 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C51086 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C51028 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C24524) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C51028 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C50776) *
               C51085 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C51028 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C50776) *
               C51086 +
           ((C20535 - (C20534 + C20533) + C20536 - C20537 - C20538) * C51028 +
            (C2509 * C1036 - (C2508 * C1030 + C2505 * C1035) + C2510 * C1031 -
             (C117 * C1110 + C50907 * C1115) * C1037 -
             (C117 * C1114 + C50907 * C1122) * C1032) *
                C50776) *
               C24524) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C51028 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C51085 +
            ((C3547 + C3548) * C51028 + (C3549 + C3550) * C50776) * C51086 +
            C25555 * C24524) *
               C459 -
           ((C4304 * C50776 + C4305 * C51028) * C24524 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C51028) * C51086 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C51028) *
                C51085) *
               C460 +
           ((((C117 * C467 + C50907 * C482) * C1109 +
              (C117 * C483 + C50907 * C497) * C50752) *
                 C51028 +
             (C533 * C1109 + C534 * C50752) * C50776) *
                C51085 +
            ((C3757 + C3758) * C51028 + (C3745 + C3746) * C50776) * C51086 +
            ((C3759 + C3760) * C51028 + (C3751 + C3752) * C50776) * C24524) *
               C461) *
              C1033 +
          ((((C3740 + C3739) * C51028 + (C3738 + C3737) * C50776) * C51085 +
            ((C3736 + C3735) * C51028 + (C3734 + C3733) * C50776) * C51086 +
            ((C4317 + C4318) * C51028 + (C4310 + C4311) * C50776) * C24524) *
               C460 -
           (C25556 * C24524 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C51028) * C51086 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C51028) * C51085) *
               C459 -
           ((((C117 * C3726 + C50907 * C3730) * C50752 +
              (C117 * C3724 + C50907 * C3727) * C1109) *
                 C50776 +
             (C20732 + C20731) * C51028) *
                C24524 +
            ((C3752 + C3751) * C50776 + (C3760 + C3759) * C51028) * C51086 +
            ((C3746 + C3745) * C50776 + (C3758 + C3757) * C51028) * C51085) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C51028 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C50776) *
                C51085 +
            ((C3907 + C3908 - C3909 - C3910) * C51028 +
             (C3911 + C3912 - C3913 - C3914) * C50776) *
                C51086 +
            C25851 * C24524) *
               C51037 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C51028 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C50776) *
                C51085 +
            ((C4134 - (C4135 + C4136) + C4137) * C51028 +
             (C4138 - (C4139 + C4140) + C4141) * C50776) *
                C51086 +
            ((C4142 - (C4143 + C4144) + C4145) * C51028 +
             (C4146 - (C4147 + C4148) + C4149) * C50776) *
                C24524) *
               C50874) *
              C1033 +
          ((((C3909 - (C3908 + C3907) + C3910) * C51028 +
             (C3913 - (C3912 + C3911) + C3914) * C50776) *
                C51085 +
            ((C3917 - (C3916 + C3915) + C3918) * C51028 +
             (C3921 - (C3920 + C3919) + C3922) * C50776) *
                C51086 +
            ((C3923 - (C3924 + C3925) + C3926) * C51028 +
             (C3927 - (C3928 + C3929) + C3930) * C50776) *
                C24524) *
               C51037 +
           (((C4136 + C4135 - C4134 - C4137) * C51028 +
             (C4140 + C4139 - C4138 - C4141) * C50776) *
                C51085 +
            ((C4144 + C4143 - C4142 - C4145) * C51028 +
             (C4148 + C4147 - C4146 - C4149) * C50776) *
                C51086 +
            ((C20972 + C20971 - C20970 - C20973) * C51028 +
             (C3265 * C49770 + C3266 * C51021 -
              (C117 * C3226 + C50907 * C3231) * C49763 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C24524) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C51028 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C51085 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C51028 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C51086 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C51028 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C24524) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C51028 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C50776) *
               C51085 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C51028 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C50776) *
               C51086 +
           ((C20535 - (C20534 + C20533) + C20536 - C20537 - C20538) * C51028 +
            (C2509 * C1036 - (C2508 * C1030 + C2505 * C1035) + C2510 * C1031 -
             (C117 * C1110 + C50907 * C1115) * C1037 -
             (C117 * C1114 + C50907 * C1122) * C1032) *
                C50776) *
               C24524) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C51028 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C51085 +
           ((C3547 + C3548) * C51028 + (C3549 + C3550) * C50776) * C51086 +
           C25555 * C24524) *
              C50810 * C1105 -
          (C25556 * C24524 +
           ((C3554 + C3553) * C50776 + (C3552 + C3551) * C51028) * C51086 +
           ((C3550 + C3549) * C50776 + (C3548 + C3547) * C51028) * C51085) *
              C50810 * C1106 +
          (C25555 * C51085 +
           (C20610 * C51028 + (C3556 + C3555) * C50776) * C51086 +
           ((C3575 + C3576) * C51028 + (C3563 + C3564) * C50776) * C24524) *
              C50810 * C1107 -
          ((((C117 * C3540 + C50907 * C3544) * C50752 +
             (C117 * C3538 + C50907 * C3541) * C1109) *
                C50776 +
            (C20622 + C20621) * C51028) *
               C24524 +
           ((C3564 + C3563) * C50776 + C20611 * C51028) * C51086 +
           C25556 * C51085) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C51028 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C50776) *
                C51085 +
            ((C3907 + C3908 - C3909 - C3910) * C51028 +
             (C3911 + C3912 - C3913 - C3914) * C50776) *
                C51086 +
            C25851 * C24524) *
               C1687 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C51028 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C50776) *
                C51085 +
            ((C4134 - (C4135 + C4136) + C4137) * C51028 +
             (C4138 - (C4139 + C4140) + C4141) * C50776) *
                C51086 +
            ((C4142 - (C4143 + C4144) + C4145) * C51028 +
             (C4146 - (C4147 + C4148) + C4149) * C50776) *
                C24524) *
               C50874) *
              C51036 +
          ((((C3909 - (C3908 + C3907) + C3910) * C51028 +
             (C3913 - (C3912 + C3911) + C3914) * C50776) *
                C51085 +
            ((C3917 - (C3916 + C3915) + C3918) * C51028 +
             (C3921 - (C3920 + C3919) + C3922) * C50776) *
                C51086 +
            ((C3923 - (C3924 + C3925) + C3926) * C51028 +
             (C3927 - (C3928 + C3929) + C3930) * C50776) *
                C24524) *
               C1687 +
           (((C4136 + C4135 - C4134 - C4137) * C51028 +
             (C4140 + C4139 - C4138 - C4141) * C50776) *
                C51085 +
            ((C4144 + C4143 - C4142 - C4145) * C51028 +
             (C4148 + C4147 - C4146 - C4149) * C50776) *
                C51086 +
            ((C20972 + C20971 - C20970 - C20973) * C51028 +
             (C3265 * C49770 + C3266 * C51021 -
              (C117 * C3226 + C50907 * C3231) * C49763 -
              (C117 * C3232 + C50907 * C3235) * C50757) *
                 C50776) *
                C24524) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C51028 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C51085 +
            ((C3547 + C3548) * C51028 + (C3549 + C3550) * C50776) * C51086 +
            C25555 * C24524) *
               C51083 -
           (C26194 * C24524 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C51028) * C51086 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C51028) *
                C51085) *
               C51084 +
           ((((C117 * C467 + C50907 * C482) * C1109 +
              (C117 * C483 + C50907 * C497) * C50752) *
                 C51028 +
             (C533 * C1109 + C534 * C50752) * C50776) *
                C51085 +
            ((C3757 + C3758) * C51028 + (C3745 + C3746) * C50776) * C51086 +
            ((C3759 + C3760) * C51028 + (C3751 + C3752) * C50776) * C24524) *
               C2103) *
              C51036 +
          ((((C3740 + C3739) * C51028 + (C3738 + C3737) * C50776) * C51085 +
            ((C3736 + C3735) * C51028 + (C3734 + C3733) * C50776) * C51086 +
            ((C4317 + C4318) * C51028 + (C4310 + C4311) * C50776) * C24524) *
               C51084 -
           (C25556 * C24524 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C51028) * C51086 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C51028) * C51085) *
               C51083 -
           ((((C117 * C3726 + C50907 * C3730) * C50752 +
              (C117 * C3724 + C50907 * C3727) * C1109) *
                 C50776 +
             (C20732 + C20731) * C51028) *
                C24524 +
            ((C3752 + C3751) * C50776 + (C3760 + C3759) * C51028) * C51086 +
            ((C3746 + C3745) * C50776 + (C3758 + C3757) * C51028) * C51085) *
               C2103) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C51028 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C51085 +
            ((C3547 + C3548) * C51028 + (C3549 + C3550) * C50776) * C51086 +
            C25555 * C24524) *
               C1687 -
           (C26194 * C24524 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C51028) * C51086 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C51028) *
                C51085) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C51028 + (C3738 + C3737) * C50776) * C51085 +
            ((C3736 + C3735) * C51028 + (C3734 + C3733) * C50776) * C51086 +
            ((C4317 + C4318) * C51028 + (C4310 + C4311) * C50776) * C24524) *
               C50874 -
           (C25556 * C24524 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C51028) * C51086 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C51028) * C51085) *
               C1687) *
              C281 +
          ((C25555 * C51085 +
            (C20610 * C51028 + (C3556 + C3555) * C50776) * C51086 +
            ((C3575 + C3576) * C51028 + (C3563 + C3564) * C50776) * C24524) *
               C1687 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             (C21086 + C21085) * C51028) *
                C24524 +
            ((C4311 + C4310) * C50776 + C21076 * C51028) * C51086 +
            C26194 * C51085) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C51028 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C51085 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C51028 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C51086 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C51028 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C24524) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C51028 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C50776) *
               C51085 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C51028 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50776) *
               C51086 +
           ((C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
             C3029 * C1037 - C3030 * C1032) *
                C51028 +
            (C3029 * C1036 - (C2704 * C1030 + C2703 * C1035) + C3030 * C1031 -
             (C117 * C1573 + C50907 * C1578) * C1037 -
             (C117 * C1577 + C50907 * C1585) * C1032) *
                C50776) *
               C24524) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C51028 +
            (C171 * C1109 + C172 * C50752) * C50776) *
               C51085 +
           ((C3547 + C3548) * C51028 + (C3549 + C3550) * C50776) * C51086 +
           C25555 * C24524) *
              C1853 -
          (C26194 * C24524 +
           ((C3737 + C3738) * C50776 + (C3739 + C3740) * C51028) * C51086 +
           ((C528 * C50752 + C527 * C1109) * C50776 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C51028) *
               C51085) *
              C1854 +
          ((((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C51028 +
            (C533 * C1109 + C534 * C50752) * C50776) *
               C51085 +
           ((C3757 + C3758) * C51028 + (C3745 + C3746) * C50776) * C51086 +
           ((C3759 + C3760) * C51028 + (C3751 + C3752) * C50776) * C24524) *
              C1855 -
          ((((C117 * C4712 + C50907 * C4720) * C50752 +
             (C117 * C4708 + C50907 * C4713) * C1109) *
                C50776 +
            ((C117 * C4714 + C50907 * C4721) * C50752 +
             (C117 * C4709 + C50907 * C4715) * C1109) *
                C51028) *
               C24524 +
           (((C117 * C4716 + C50907 * C4722) * C50752 +
             (C117 * C4710 + C50907 * C4717) * C1109) *
                C50776 +
            ((C117 * C4718 + C50907 * C4723) * C50752 +
             (C117 * C4711 + C50907 * C4719) * C1109) *
                C51028) *
               C51086 +
           (((C117 * C1865 + C50907 * C1871) * C50752 +
             (C117 * C1859 + C50907 * C1866) * C1109) *
                C50776 +
            ((C117 * C1867 + C50907 * C1872) * C50752 +
             (C117 * C1860 + C50907 * C1868) * C1109) *
                C51028) *
               C51085) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C51028 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C50776) *
               C51085 +
           ((C3907 + C3908 - C3909 - C3910) * C51028 +
            (C3911 + C3912 - C3913 - C3914) * C50776) *
               C51086 +
           C25851 * C24524) *
              C51083 +
          (((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C51028 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C50776) *
               C51085 +
           ((C4134 - (C4135 + C4136) + C4137) * C51028 +
            (C4138 - (C4139 + C4140) + C4141) * C50776) *
               C51086 +
           ((C4142 - (C4143 + C4144) + C4145) * C51028 +
            (C4146 - (C4147 + C4148) + C4149) * C50776) *
               C24524) *
              C51084 +
          ((((C117 * C467 + C50907 * C482) * C49770 +
             (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
             C534 * C50757) *
                C51028 +
            (C533 * C49770 + C534 * C51021 - C535 * C49763 - C536 * C50757) *
                C50776) *
               C51085 +
           ((C3753 * C49770 + C3754 * C51021 - C2705 * C49763 -
             C2706 * C50757) *
                C51028 +
            (C2705 * C49770 + C2706 * C51021 - C8464 * C49763 -
             C8465 * C50757) *
                C50776) *
               C51086 +
           ((C3755 * C49770 + C3756 * C51021 - C2707 * C49763 -
             C2708 * C50757) *
                C51028 +
            (C2707 * C49770 + C2708 * C51021 -
             (C117 * C2680 + C50907 * C2685) * C49763 -
             (C117 * C2686 + C50907 * C2689) * C50757) *
                C50776) *
               C24524) *
              C2103) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C51028 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C50776) *
               C51085 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C51028 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C50776) *
               C51086 +
           ((C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C51028 +
            (C3435 + C3436 - C3437 - C3438 + C3439 + C3440) * C50776) *
               C24524) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C51028 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C50776) *
               C51085 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C51028 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C50776) *
               C51086 +
           ((C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
             C3029 * C1037 - C3030 * C1032) *
                C51028 +
            (C3029 * C1036 - (C2704 * C1030 + C2703 * C1035) + C3030 * C1031 -
             (C117 * C1573 + C50907 * C1578) * C1037 -
             (C117 * C1577 + C50907 * C1585) * C1032) *
                C50776) *
               C24524) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C51028 +
             (C171 * C1109 + C172 * C50752) * C50776) *
                C51085 +
            ((C3547 + C3548) * C51028 + (C3549 + C3550) * C50776) * C51086 +
            C25555 * C24524) *
               C1687 -
           (C26194 * C24524 +
            ((C3737 + C3738) * C50776 + (C3739 + C3740) * C51028) * C51086 +
            ((C528 * C50752 + C527 * C1109) * C50776 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C51028) *
                C51085) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C51028 + (C3738 + C3737) * C50776) * C51085 +
            ((C3736 + C3735) * C51028 + (C3734 + C3733) * C50776) * C51086 +
            ((C4317 + C4318) * C51028 + (C4310 + C4311) * C50776) * C24524) *
               C50874 -
           (C25556 * C24524 +
            ((C3554 + C3553) * C50776 + (C3552 + C3551) * C51028) * C51086 +
            ((C3550 + C3549) * C50776 + (C3548 + C3547) * C51028) * C51085) *
               C1687) *
              C281 +
          ((C25555 * C51085 +
            (C20610 * C51028 + (C3556 + C3555) * C50776) * C51086 +
            ((C3575 + C3576) * C51028 + (C3563 + C3564) * C50776) * C24524) *
               C1687 -
           ((((C117 * C4297 + C50907 * C4301) * C50752 +
              (C117 * C4295 + C50907 * C4298) * C1109) *
                 C50776 +
             (C21086 + C21085) * C51028) *
                C24524 +
            ((C4311 + C4310) * C50776 + C21076 * C51028) * C51086 +
            C26194 * C51085) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C641 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C51077 -
            (C10878 + C10879) * C642 - (C10880 + C10881) * C51078 +
            C10894 * C643 + C10895 * C638) *
               C50771 * C51085 +
           ((C13932 + C13933) * C641 + (C13934 + C13935) * C51077 -
            C13908 * C642 - C13909 * C51078 + C14344 * C643 + C14345 * C638) *
               C50771 * C51086 +
           (C30807 * C641 + C30808 * C51077 - C13923 * C642 - C13922 * C51078 +
            (C11089 + C11088) * C643 + (C11091 + C11090) * C638) *
               C50771 * C24524) *
              C50810 * C51036 +
          ((C13910 * C642 -
            ((C13935 + C13934) * C51077 + (C13933 + C13932) * C641) +
            C13911 * C51078 - C11432 * C643 - C11433 * C638) *
               C50771 * C51085 +
           (C13912 * C642 -
            ((C13936 + C13937) * C51077 + (C13938 + C13939) * C641) +
            C13921 * C51078 - (C11088 + C11089) * C643 -
            (C11090 + C11091) * C638) *
               C50771 * C51086 +
           ((C13941 + C13940) * C642 -
            ((C15161 + C15160) * C51077 + (C15159 + C15158) * C641) +
            (C13943 + C13942) * C51078 -
            (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
             C51050 * C1117) *
                C643 -
            (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
             C51050 * C1123) *
                C638) *
               C50771 * C24524) *
              C50810 * C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C283 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                C50771 * C51085 +
            ((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
             C13908 * C284 - C13909 * C50757) *
                C50771 * C51086 +
            C30816 * C24524) *
               C51037 +
           (((C11270 + C11271) * C284 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C278 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C283) +
             (C11272 + C11273) * C50757) *
                C50771 * C51085 +
            (C14798 * C284 -
             ((C14818 + C14819) * C278 + (C14820 + C14821) * C283) +
             C14807 * C50757) *
                C50771 * C51086 +
            ((C14823 + C14822) * C284 -
             ((C16025 + C16024) * C278 + (C16023 + C16022) * C283) +
             (C14825 + C14824) * C50757) *
                C50771 * C24524) *
               C50874) *
              C51036 +
          (((C13910 * C284 -
             ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
             C13911 * C50757) *
                C50771 * C51085 +
            (C13912 * C284 -
             ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
             C13921 * C50757) *
                C50771 * C51086 +
            ((C13941 + C13940) * C284 -
             ((C15161 + C15160) * C278 + (C15159 + C15158) * C283) +
             (C13943 + C13942) * C50757) *
                C50771 * C24524) *
               C51037 +
           (((C14821 + C14820) * C283 + (C14819 + C14818) * C278 -
             C14809 * C284 - C14808 * C50757) *
                C50771 * C51085 +
            ((C16022 + C16023) * C283 + (C16024 + C16025) * C278 -
             (C14822 + C14823) * C284 - (C14824 + C14825) * C50757) *
                C50771 * C51086 +
            ((C10843 * C3224 + C51050 * C3227 + C10844 * C3725 +
              C50971 * C3729) *
                 C283 +
             (C10843 * C3228 + C51050 * C3233 + C10844 * C3728 +
              C50971 * C3731) *
                 C278 -
             (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
              C51050 * C3229) *
                 C284 -
             (C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
              C51050 * C3234) *
                 C50757) *
                C50771 * C24524) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C283 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
               C50771 * C51085 +
           ((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
            C13908 * C284 - C13909 * C50757) *
               C50771 * C51086 +
           C30816 * C24524) *
              C50810 * C280 +
          ((C13910 * C284 -
            ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
            C13911 * C50757) *
               C50771 * C51085 +
           (C13912 * C284 -
            ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
            C13921 * C50757) *
               C50771 * C51086 +
           ((C13941 + C13940) * C284 -
            ((C15161 + C15160) * C278 + (C15159 + C15158) * C283) +
            (C13943 + C13942) * C50757) *
               C50771 * C24524) *
              C50810 * C281 +
          (C30816 * C51085 +
           ((C15158 + C15159) * C283 + (C15160 + C15161) * C278 -
            (C13940 + C13941) * C284 - (C13942 + C13943) * C50757) *
               C50771 * C51086 +
           ((C10843 * C2451 + C51050 * C2454 + C10844 * C4296 +
             C50971 * C4300) *
                C283 +
            (C10843 * C2455 + C51050 * C2460 + C10844 * C4299 +
             C50971 * C4302) *
                C278 -
            (C10844 * C4295 + C50971 * C4298 + C10843 * C2452 +
             C51050 * C2456) *
                C284 -
            (C10844 * C4297 + C50971 * C4301 + C10843 * C2457 +
             C51050 * C2461) *
                C50757) *
               C50771 * C24524) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
               C118 +
           (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
               C106 -
           (C10878 + C10879) * C119 - (C10880 + C10881) * C107 + C10894 * C120 +
           C10895 * C108 - C10896 * C121 - C10897 * C109) *
              C50771 * C51085 +
          ((C13932 + C13933) * C118 + (C13934 + C13935) * C106 - C13908 * C119 -
           C13909 * C107 + C14344 * C120 + C14345 * C108 -
           (C11442 + C11443) * C121 - (C11444 + C11445) * C109) *
              C50771 * C51086 +
          ((C13939 + C13938) * C118 + (C13937 + C13936) * C106 - C13923 * C119 -
           C13922 * C107 + (C11089 + C11088) * C120 + (C11091 + C11090) * C108 -
           (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
               C121 -
           (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
               C109) *
              C50771 * C24524) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C283 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
               C50771 * C51085 +
           ((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
            C13908 * C284 - C13909 * C50757) *
               C50771 * C51086 +
           C30816 * C24524) *
              C459 +
          (((C11270 + C11271) * C284 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C278 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C283) +
            (C11272 + C11273) * C50757) *
               C50771 * C51085 +
           (C14798 * C284 -
            ((C14818 + C14819) * C278 + (C14820 + C14821) * C283) +
            C14807 * C50757) *
               C50771 * C51086 +
           ((C14823 + C14822) * C284 -
            ((C16025 + C16024) * C278 + (C16023 + C16022) * C283) +
            (C14825 + C14824) * C50757) *
               C50771 * C24524) *
              C460 +
          (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                C283 +
            (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                C278 -
            (C11278 + C11279) * C284 - (C11280 + C11281) * C50757) *
               C50771 * C51085 +
           ((C15364 + C15365) * C283 + (C15366 + C15367) * C278 -
            (C14146 + C14147) * C284 - (C14148 + C14149) * C50757) *
               C50771 * C51086 +
           ((C10843 * C2678 + C51050 * C2681 + C10844 * C4709 +
             C50971 * C4715) *
                C283 +
            (C10843 * C2682 + C51050 * C2687 + C10844 * C4714 +
             C50971 * C4721) *
                C278 -
            (C10844 * C4708 + C50971 * C4713 + C10843 * C2679 +
             C51050 * C2683) *
                C284 -
            (C10844 * C4712 + C50971 * C4720 + C10843 * C2684 +
             C51050 * C2688) *
                C50757) *
               C50771 * C24524) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C641 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C51077 -
            (C10878 + C10879) * C642 - (C10880 + C10881) * C51078 +
            C10894 * C643 + C10895 * C638) *
               C50771 * C51085 +
           ((C13932 + C13933) * C641 + (C13934 + C13935) * C51077 -
            C13908 * C642 - C13909 * C51078 + C14344 * C643 + C14345 * C638) *
               C50771 * C51086 +
           (C30807 * C641 + C30808 * C51077 - C13923 * C642 - C13922 * C51078 +
            (C11089 + C11088) * C643 + (C11091 + C11090) * C638) *
               C50771 * C24524) *
              C51037 +
          (((C11270 + C11271) * C642 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C51077 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C641) +
            (C11272 + C11273) * C51078 - C11592 * C643 - C11593 * C638) *
               C50771 * C51085 +
           (C14798 * C642 -
            ((C14818 + C14819) * C51077 + (C14820 + C14821) * C641) +
            C14807 * C51078 - (C11820 + C11821) * C643 -
            (C11822 + C11823) * C638) *
               C50771 * C51086 +
           ((C14823 + C14822) * C642 -
            ((C16025 + C16024) * C51077 + (C16023 + C16022) * C641) +
            (C14825 + C14824) * C51078 -
            (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
             C51050 * C1580) *
                C643 -
            (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
             C51050 * C1586) *
                C638) *
               C50771 * C24524) *
              C50874) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
               C118 +
           (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
               C106 -
           (C10878 + C10879) * C119 - (C10880 + C10881) * C107 + C10894 * C120 +
           C10895 * C108 - C10896 * C121 - C10897 * C109) *
              C50771 * C51085 +
          ((C13932 + C13933) * C118 + (C13934 + C13935) * C106 - C13908 * C119 -
           C13909 * C107 + C14344 * C120 + C14345 * C108 -
           (C11442 + C11443) * C121 - (C11444 + C11445) * C109) *
              C50771 * C51086 +
          ((C13939 + C13938) * C118 + (C13937 + C13936) * C106 - C13923 * C119 -
           C13922 * C107 + (C11089 + C11088) * C120 + (C11091 + C11090) * C108 -
           (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
               C121 -
           (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
               C109) *
              C50771 * C24524) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C283 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C278 -
            (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
               C50771 * C51085 +
           ((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
            C13908 * C284 - C13909 * C50757) *
               C50771 * C51086 +
           C30816 * C24524) *
              C50810 * C280 +
          ((C13910 * C284 -
            ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
            C13911 * C50757) *
               C50771 * C51085 +
           (C13912 * C284 -
            ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
            C13921 * C50757) *
               C50771 * C51086 +
           ((C13941 + C13940) * C284 -
            ((C15161 + C15160) * C278 + (C15159 + C15158) * C283) +
            (C13943 + C13942) * C50757) *
               C50771 * C24524) *
              C50810 * C281 +
          (C30816 * C51085 +
           ((C15158 + C15159) * C283 + (C15160 + C15161) * C278 -
            (C13940 + C13941) * C284 - (C13942 + C13943) * C50757) *
               C50771 * C51086 +
           ((C10843 * C2451 + C51050 * C2454 + C10844 * C4296 +
             C50971 * C4300) *
                C283 +
            (C10843 * C2455 + C51050 * C2460 + C10844 * C4299 +
             C50971 * C4302) *
                C278 -
            (C10844 * C4295 + C50971 * C4298 + C10843 * C2452 +
             C51050 * C2456) *
                C284 -
            (C10844 * C4297 + C50971 * C4301 + C10843 * C2457 +
             C51050 * C2461) *
                C50757) *
               C50771 * C24524) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C49770 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C51021 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
               C50771 * C51085 +
           ((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
            C13908 * C49763 - C13909 * C50757) *
               C50771 * C51086 +
           C32026 * C24524) *
              C50810 * C51081 +
          ((C13910 * C49763 -
            ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
            C13911 * C50757) *
               C50771 * C51085 +
           (C13912 * C49763 -
            ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
            C13921 * C50757) *
               C50771 * C51086 +
           ((C13941 + C13940) * C49763 - (C31695 * C51021 + C31696 * C49770) +
            (C13943 + C13942) * C50757) *
               C50771 * C24524) *
              C50810 * C51082 +
          (C32026 * C51085 +
           ((C15158 + C15159) * C49770 + (C15160 + C15161) * C51021 -
            (C13940 + C13941) * C49763 - (C13942 + C13943) * C50757) *
               C50771 * C51086 +
           ((C31708 + C31709) * C49770 + (C31710 + C31711) * C51021 -
            (C10844 * C4295 + C50971 * C4298 + C10843 * C2452 +
             C51050 * C2456) *
                C49763 -
            (C10844 * C4297 + C50971 * C4301 + C10843 * C2457 +
             C51050 * C2461) *
                C50757) *
               C50771 * C24524) *
              C50810 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C51085 +
            ((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C50771 *
                C51086 +
            C31712 * C24524) *
               C51037 -
           (C32384 * C24524 +
            ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C50771 *
                C51086 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C50771 * C51085) *
               C50874) *
              C51081 +
          ((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C50771 *
                C51085 +
            ((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C50771 *
                C51086 +
            ((C32379 + C32380) * C1109 + (C32381 + C32382) * C50752) * C50771 *
                C24524) *
               C50874 -
           (C31714 * C24524 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C50771 *
                C51086 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C50771 *
                C51085) *
               C51037) *
              C51082 +
          ((C31712 * C51085 +
            ((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C50771 *
                C51086 +
            ((C31708 + C31709) * C1109 + (C31710 + C31711) * C50752) * C50771 *
                C24524) *
               C51037 -
           (((C10844 * C20721 + C50971 * C20723 + C10843 * C4299 +
              C51050 * C4302) *
                 C50752 +
             (C10844 * C20720 + C50971 * C20722 + C10843 * C4296 +
              C51050 * C4300) *
                 C1109) *
                C50771 * C24524 +
            ((C32382 + C32381) * C50752 + (C32380 + C32379) * C1109) * C50771 *
                C51086 +
            C32384 * C51085) *
               C50874) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1109 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C51085 +
           ((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C50771 *
               C51086 +
           C31712 * C24524) *
              C50810 * C1105 -
          (C31714 * C24524 +
           ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C50771 *
               C51086 +
           ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C50771 *
               C51085) *
              C50810 * C1106 +
          (C31712 * C51085 +
           ((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C50771 *
               C51086 +
           ((C31708 + C31709) * C1109 + (C31710 + C31711) * C50752) * C50771 *
               C24524) *
              C50810 * C1107 -
          (((C10844 * C21072 + C50971 * C21074 + C10843 * C3542 +
             C51050 * C3545) *
                C50752 +
            (C10844 * C21071 + C50971 * C21073 + C10843 * C3539 +
             C51050 * C3543) *
                C1109) *
               C50771 * C24524 +
           ((C31711 + C31710) * C50752 + (C31709 + C31708) * C1109) * C50771 *
               C51086 +
           C31714 * C51085) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1035 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C1030 -
            (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
            C10894 * C1037 + C10895 * C1032) *
               C50771 * C51085 +
           ((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
            C13908 * C1036 - C13909 * C1031 + C14344 * C1037 + C14345 * C1032) *
               C50771 * C51086 +
           (C30807 * C1035 + C30808 * C1030 - C13923 * C1036 - C13922 * C1031 +
            (C11089 + C11088) * C1037 + (C11091 + C11090) * C1032) *
               C50771 * C24524) *
              C50810 * C1033 +
          ((C13910 * C1036 -
            ((C13935 + C13934) * C1030 + (C13933 + C13932) * C1035) +
            C13911 * C1031 - C11432 * C1037 - C11433 * C1032) *
               C50771 * C51085 +
           (C13912 * C1036 -
            ((C13936 + C13937) * C1030 + (C13938 + C13939) * C1035) +
            C13921 * C1031 - (C11088 + C11089) * C1037 -
            (C11090 + C11091) * C1032) *
               C50771 * C51086 +
           ((C13941 + C13940) * C1036 -
            ((C15161 + C15160) * C1030 + (C15159 + C15158) * C1035) +
            (C13943 + C13942) * C1031 -
            (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
             C51050 * C1117) *
                C1037 -
            (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
             C51050 * C1123) *
                C1032) *
               C50771 * C24524) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C51085 +
            ((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C50771 *
                C51086 +
            C31712 * C24524) *
               C459 -
           (((C16025 + C16024) * C50752 + (C16023 + C16022) * C1109) * C50771 *
                C24524 +
            ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C50771 *
                C51086 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C50771 * C51085) *
               C460 +
           (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C1109 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C50752) *
                C50771 * C51085 +
            ((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C50771 *
                C51086 +
            ((C31869 + C31870) * C1109 + (C31871 + C31872) * C50752) * C50771 *
                C24524) *
               C461) *
              C1033 +
          ((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C50771 *
                C51085 +
            ((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C50771 *
                C51086 +
            ((C10843 * C3224 + C51050 * C3227 + C10844 * C3725 +
              C50971 * C3729) *
                 C1109 +
             (C10843 * C3228 + C51050 * C3233 + C10844 * C3728 +
              C50971 * C3731) *
                 C50752) *
                C50771 * C24524) *
               C460 -
           (C31714 * C24524 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C50771 *
                C51086 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C50771 *
                C51085) *
               C459 -
           (((C10844 * C21349 + C50971 * C21351 + C10843 * C3728 +
              C51050 * C3731) *
                 C50752 +
             (C10844 * C21348 + C50971 * C21350 + C10843 * C3725 +
              C51050 * C3729) *
                 C1109) *
                C50771 * C24524 +
            ((C31872 + C31871) * C50752 + (C31870 + C31869) * C1109) * C50771 *
                C51086 +
            ((C15367 + C15366) * C50752 + (C15365 + C15364) * C1109) * C50771 *
                C51085) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C49770 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51021 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                C50771 * C51085 +
            ((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
             C13908 * C49763 - C13909 * C50757) *
                C50771 * C51086 +
            C32026 * C24524) *
               C51037 +
           (((C11270 + C11271) * C49763 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C51021 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C49770) +
             (C11272 + C11273) * C50757) *
                C50771 * C51085 +
            (C14798 * C49763 -
             ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
             C14807 * C50757) *
                C50771 * C51086 +
            ((C14823 + C14822) * C49763 -
             ((C16025 + C16024) * C51021 + (C16023 + C16022) * C49770) +
             (C14825 + C14824) * C50757) *
                C50771 * C24524) *
               C50874) *
              C1033 +
          (((C13910 * C49763 -
             ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
             C13911 * C50757) *
                C50771 * C51085 +
            (C13912 * C49763 -
             ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
             C13921 * C50757) *
                C50771 * C51086 +
            ((C13941 + C13940) * C49763 - (C31695 * C51021 + C31696 * C49770) +
             (C13943 + C13942) * C50757) *
                C50771 * C24524) *
               C51037 +
           (((C14821 + C14820) * C49770 + (C14819 + C14818) * C51021 -
             C14809 * C49763 - C14808 * C50757) *
                C50771 * C51085 +
            ((C16022 + C16023) * C49770 + (C16024 + C16025) * C51021 -
             (C14822 + C14823) * C49763 - (C14824 + C14825) * C50757) *
                C50771 * C51086 +
            ((C10843 * C3224 + C51050 * C3227 + C10844 * C3725 +
              C50971 * C3729) *
                 C49770 +
             (C10843 * C3228 + C51050 * C3233 + C10844 * C3728 +
              C50971 * C3731) *
                 C51021 -
             (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
              C51050 * C3229) *
                 C49763 -
             (C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
              C51050 * C3234) *
                 C50757) *
                C50771 * C24524) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1035 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C1030 -
            (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
            C10894 * C1037 + C10895 * C1032) *
               C50771 * C51085 +
           ((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
            C13908 * C1036 - C13909 * C1031 + C14344 * C1037 + C14345 * C1032) *
               C50771 * C51086 +
           (C30807 * C1035 + C30808 * C1030 - C13923 * C1036 - C13922 * C1031 +
            (C11089 + C11088) * C1037 + (C11091 + C11090) * C1032) *
               C50771 * C24524) *
              C50810 * C1033 +
          ((C13910 * C1036 -
            ((C13935 + C13934) * C1030 + (C13933 + C13932) * C1035) +
            C13911 * C1031 - C11432 * C1037 - C11433 * C1032) *
               C50771 * C51085 +
           (C13912 * C1036 -
            ((C13936 + C13937) * C1030 + (C13938 + C13939) * C1035) +
            C13921 * C1031 - (C11088 + C11089) * C1037 -
            (C11090 + C11091) * C1032) *
               C50771 * C51086 +
           ((C13941 + C13940) * C1036 -
            ((C15161 + C15160) * C1030 + (C15159 + C15158) * C1035) +
            (C13943 + C13942) * C1031 -
            (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
             C51050 * C1117) *
                C1037 -
            (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
             C51050 * C1123) *
                C1032) *
               C50771 * C24524) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1109 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C51085 +
           ((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C50771 *
               C51086 +
           C31712 * C24524) *
              C50810 * C1105 -
          (C31714 * C24524 +
           ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C50771 *
               C51086 +
           ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C50771 *
               C51085) *
              C50810 * C1106 +
          (C31712 * C51085 +
           ((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C50771 *
               C51086 +
           ((C31708 + C31709) * C1109 + (C31710 + C31711) * C50752) * C50771 *
               C24524) *
              C50810 * C1107 -
          (((C10844 * C21072 + C50971 * C21074 + C10843 * C3542 +
             C51050 * C3545) *
                C50752 +
            (C10844 * C21071 + C50971 * C21073 + C10843 * C3539 +
             C51050 * C3543) *
                C1109) *
               C50771 * C24524 +
           ((C31711 + C31710) * C50752 + (C31709 + C31708) * C1109) * C50771 *
               C51086 +
           C31714 * C51085) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C49770 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51021 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                C50771 * C51085 +
            ((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
             C13908 * C49763 - C13909 * C50757) *
                C50771 * C51086 +
            C32026 * C24524) *
               C1687 +
           (((C11270 + C11271) * C49763 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C51021 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C49770) +
             (C11272 + C11273) * C50757) *
                C50771 * C51085 +
            (C14798 * C49763 -
             ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
             C14807 * C50757) *
                C50771 * C51086 +
            ((C14823 + C14822) * C49763 - (C32367 * C51021 + C32368 * C49770) +
             (C14825 + C14824) * C50757) *
                C50771 * C24524) *
               C50874) *
              C51036 +
          (((C13910 * C49763 -
             ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
             C13911 * C50757) *
                C50771 * C51085 +
            (C13912 * C49763 -
             ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
             C13921 * C50757) *
                C50771 * C51086 +
            ((C13941 + C13940) * C49763 - (C31695 * C51021 + C31696 * C49770) +
             (C13943 + C13942) * C50757) *
                C50771 * C24524) *
               C1687 +
           (((C14821 + C14820) * C49770 + (C14819 + C14818) * C51021 -
             C14809 * C49763 - C14808 * C50757) *
                C50771 * C51085 +
            ((C16022 + C16023) * C49770 + (C16024 + C16025) * C51021 -
             (C14822 + C14823) * C49763 - (C14824 + C14825) * C50757) *
                C50771 * C51086 +
            ((C32379 + C32380) * C49770 + (C32381 + C32382) * C51021 -
             (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
              C51050 * C3229) *
                 C49763 -
             (C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
              C51050 * C3234) *
                 C50757) *
                C50771 * C24524) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C51085 +
            ((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C50771 *
                C51086 +
            C31712 * C24524) *
               C51083 -
           (C32384 * C24524 +
            ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C50771 *
                C51086 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C50771 * C51085) *
               C51084 +
           (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C1109 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C50752) *
                C50771 * C51085 +
            ((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C50771 *
                C51086 +
            ((C31869 + C31870) * C1109 + (C31871 + C31872) * C50752) * C50771 *
                C24524) *
               C2103) *
              C51036 +
          ((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C50771 *
                C51085 +
            ((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C50771 *
                C51086 +
            ((C32379 + C32380) * C1109 + (C32381 + C32382) * C50752) * C50771 *
                C24524) *
               C51084 -
           (C31714 * C24524 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C50771 *
                C51086 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C50771 *
                C51085) *
               C51083 -
           (((C10844 * C21349 + C50971 * C21351 + C10843 * C3728 +
              C51050 * C3731) *
                 C50752 +
             (C10844 * C21348 + C50971 * C21350 + C10843 * C3725 +
              C51050 * C3729) *
                 C1109) *
                C50771 * C24524 +
            ((C31872 + C31871) * C50752 + (C31870 + C31869) * C1109) * C50771 *
                C51086 +
            ((C15367 + C15366) * C50752 + (C15365 + C15364) * C1109) * C50771 *
                C51085) *
               C2103) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C51085 +
            ((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C50771 *
                C51086 +
            C31712 * C24524) *
               C1687 -
           (C32384 * C24524 +
            ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C50771 *
                C51086 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C50771 * C51085) *
               C50874) *
              C280 +
          ((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C50771 *
                C51085 +
            ((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C50771 *
                C51086 +
            ((C32379 + C32380) * C1109 + (C32381 + C32382) * C50752) * C50771 *
                C24524) *
               C50874 -
           (C31714 * C24524 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C50771 *
                C51086 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C50771 *
                C51085) *
               C1687) *
              C281 +
          ((C31712 * C51085 +
            ((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C50771 *
                C51086 +
            ((C31708 + C31709) * C1109 + (C31710 + C31711) * C50752) * C50771 *
                C24524) *
               C1687 -
           (((C10844 * C20721 + C50971 * C20723 + C10843 * C4299 +
              C51050 * C4302) *
                 C50752 +
             (C10844 * C20720 + C50971 * C20722 + C10843 * C4296 +
              C51050 * C4300) *
                 C1109) *
                C50771 * C24524 +
            ((C32382 + C32381) * C50752 + (C32380 + C32379) * C1109) * C50771 *
                C51086 +
            C32384 * C51085) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1035 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C1030 -
            (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
            C10894 * C1037 + C10895 * C1032) *
               C50771 * C51085 +
           ((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
            C13908 * C1036 - C13909 * C1031 + C14344 * C1037 + C14345 * C1032) *
               C50771 * C51086 +
           (C30807 * C1035 + C30808 * C1030 - C13923 * C1036 - C13922 * C1031 +
            (C11089 + C11088) * C1037 + (C11091 + C11090) * C1032) *
               C50771 * C24524) *
              C1687 +
          (((C11270 + C11271) * C1036 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C1030 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1035) +
            (C11272 + C11273) * C1031 - C11592 * C1037 - C11593 * C1032) *
               C50771 * C51085 +
           (C14798 * C1036 -
            ((C14818 + C14819) * C1030 + (C14820 + C14821) * C1035) +
            C14807 * C1031 - (C11820 + C11821) * C1037 -
            (C11822 + C11823) * C1032) *
               C50771 * C51086 +
           ((C14823 + C14822) * C1036 - (C32367 * C1030 + C32368 * C1035) +
            (C14825 + C14824) * C1031 -
            (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
             C51050 * C1580) *
                C1037 -
            (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
             C51050 * C1586) *
                C1032) *
               C50771 * C24524) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1109 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C51085 +
           ((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C50771 *
               C51086 +
           C31712 * C24524) *
              C1853 -
          (C32384 * C24524 +
           ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C50771 *
               C51086 +
           ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                C50752 +
            (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                C1109) *
               C50771 * C51085) *
              C1854 +
          (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                C1109 +
            (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                C50752) *
               C50771 * C51085 +
           ((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C50771 *
               C51086 +
           ((C31869 + C31870) * C1109 + (C31871 + C31872) * C50752) * C50771 *
               C24524) *
              C1855 -
          (((C10844 * C23017 + C50971 * C23019 + C10843 * C4714 +
             C51050 * C4721) *
                C50752 +
            (C10844 * C23016 + C50971 * C23018 + C10843 * C4709 +
             C51050 * C4715) *
                C1109) *
               C50771 * C24524 +
           ((C10844 * C6682 + C50971 * C6685 + C10843 * C4718 +
             C51050 * C4723) *
                C50752 +
            (C10844 * C6679 + C50971 * C6683 + C10843 * C4711 +
             C51050 * C4719) *
                C1109) *
               C50771 * C51086 +
           ((C10844 * C5700 + C50971 * C5705 + C10843 * C1867 +
             C51050 * C1872) *
                C50752 +
            (C10844 * C5696 + C50971 * C5699 + C10843 * C1860 +
             C51050 * C1868) *
                C1109) *
               C50771 * C51085) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C49770 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C51021 -
            (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
               C50771 * C51085 +
           ((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
            C13908 * C49763 - C13909 * C50757) *
               C50771 * C51086 +
           C32026 * C24524) *
              C51083 +
          (((C11270 + C11271) * C49763 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C51021 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C49770) +
            (C11272 + C11273) * C50757) *
               C50771 * C51085 +
           (C14798 * C49763 -
            ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
            C14807 * C50757) *
               C50771 * C51086 +
           ((C14823 + C14822) * C49763 - (C32367 * C51021 + C32368 * C49770) +
            (C14825 + C14824) * C50757) *
               C50771 * C24524) *
              C51084 +
          (((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                C49770 +
            (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                C51021 -
            (C11278 + C11279) * C49763 - (C11280 + C11281) * C50757) *
               C50771 * C51085 +
           ((C15364 + C15365) * C49770 + (C15366 + C15367) * C51021 -
            (C14146 + C14147) * C49763 - (C14148 + C14149) * C50757) *
               C50771 * C51086 +
           ((C31869 + C31870) * C49770 + (C31871 + C31872) * C51021 -
            (C10844 * C4708 + C50971 * C4713 + C10843 * C2679 +
             C51050 * C2683) *
                C49763 -
            (C10844 * C4712 + C50971 * C4720 + C10843 * C2684 +
             C51050 * C2688) *
                C50757) *
               C50771 * C24524) *
              C2103) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C1035 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C1030 -
            (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
            C10894 * C1037 + C10895 * C1032) *
               C50771 * C51085 +
           ((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
            C13908 * C1036 - C13909 * C1031 + C14344 * C1037 + C14345 * C1032) *
               C50771 * C51086 +
           (C30807 * C1035 + C30808 * C1030 - C13923 * C1036 - C13922 * C1031 +
            (C11089 + C11088) * C1037 + (C11091 + C11090) * C1032) *
               C50771 * C24524) *
              C1687 +
          (((C11270 + C11271) * C1036 -
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C1030 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1035) +
            (C11272 + C11273) * C1031 - C11592 * C1037 - C11593 * C1032) *
               C50771 * C51085 +
           (C14798 * C1036 -
            ((C14818 + C14819) * C1030 + (C14820 + C14821) * C1035) +
            C14807 * C1031 - (C11820 + C11821) * C1037 -
            (C11822 + C11823) * C1032) *
               C50771 * C51086 +
           ((C14823 + C14822) * C1036 - (C32367 * C1030 + C32368 * C1035) +
            (C14825 + C14824) * C1031 -
            (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
             C51050 * C1580) *
                C1037 -
            (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
             C51050 * C1586) *
                C1032) *
               C50771 * C24524) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C51085 +
            ((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C50771 *
                C51086 +
            C31712 * C24524) *
               C1687 -
           (C32384 * C24524 +
            ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C50771 *
                C51086 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C50771 * C51085) *
               C50874) *
              C280 +
          ((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C50771 *
                C51085 +
            ((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C50771 *
                C51086 +
            ((C32379 + C32380) * C1109 + (C32381 + C32382) * C50752) * C50771 *
                C24524) *
               C50874 -
           (C31714 * C24524 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C50771 *
                C51086 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C50771 *
                C51085) *
               C1687) *
              C281 +
          ((C31712 * C51085 +
            ((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C50771 *
                C51086 +
            ((C31708 + C31709) * C1109 + (C31710 + C31711) * C50752) * C50771 *
                C24524) *
               C1687 -
           (((C10844 * C20721 + C50971 * C20723 + C10843 * C4299 +
              C51050 * C4302) *
                 C50752 +
             (C10844 * C20720 + C50971 * C20722 + C10843 * C4296 +
              C51050 * C4300) *
                 C1109) *
                C50771 * C24524 +
            ((C32382 + C32381) * C50752 + (C32380 + C32379) * C1109) * C50771 *
                C51086 +
            C32384 * C51085) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C641 +
            (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
            C172 * C51078 + C173 * C643 + C174 * C638) *
               C50771 * C19889 +
           (C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C50771 * C19890 +
           (C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C50771 * C19891 +
           (C20197 + C20198 - C20199 - C20200 + C20201 + C20202) * C50771 *
               C19892) *
              C50810 * C51036 +
          ((C2857 - (C2856 + C2855) + C2858 - C2859 - C2860) * C50771 * C19889 +
           (C2869 - (C2868 + C2867) + C2870 - C2871 - C2872) * C50771 * C19890 +
           (C20199 - (C20198 + C20197) + C20200 - C20201 - C20202) * C50771 *
               C19891 +
           (C2511 * C642 - (C3570 * C51077 + C3569 * C641) + C2512 * C51078 -
            (C117 * C2453 + C50907 * C2458) * C643 -
            (C117 * C2459 + C50907 * C2462) * C638) *
               C50771 * C19892) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C641 +
             (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
             C172 * C51078 + C173 * C643 + C174 * C638) *
                C17287 +
            (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
             C175 * C643 + C176 * C638) *
                C17288 +
            (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
             C177 * C643 + C178 * C638) *
                C17289) *
               C17290 +
           ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C17287 +
            (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C17288 +
            (C8612 + C8613 - C8614 - C8615 + C8616 + C8617) * C17289) *
               C50945) *
              C50810 * C51036 +
          (((C2857 - (C2856 + C2855) + C2858 - C2859 - C2860) * C17287 +
            (C2863 - (C2862 + C2861) + C2864 - C2865 - C2866) * C17288 +
            (C8614 - (C8613 + C8612) + C8615 - C8616 - C8617) * C17289) *
               C17290 +
           ((C2869 - (C2868 + C2867) + C2870 - C2871 - C2872) * C17287 +
            (C2875 - (C2874 + C2873) + C2876 - C2877 - C2878) * C17288 +
            (C360 * C642 - (C359 * C51077 + C358 * C641) + C361 * C51078 -
             (C117 * C294 + C50907 * C313) * C643 -
             (C117 * C314 + C50907 * C324) * C638) *
                C17289) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C641 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C51077 -
            (C5351 + C5352 + C5353) * C642 - (C5354 + C5355 + C5356) * C51078 +
            (C5357 + C5358 + C5359) * C643 + (C5360 + C5361 + C5362) * C638) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C641 +
            (C21950 + C21951 + C21952) * C51077 -
            (C5541 + C5540 + C5539) * C642 - (C5544 + C5543 + C5542) * C51078 +
            (C5905 + C5904 + C5903) * C643 + (C5908 + C5907 + C5906) * C638) *
               C50771 * C50945) *
              C50810 * C51036 +
          (((C5539 + C5540 + C5541) * C642 -
            ((C21952 + C21951 + C21950) * C51077 +
             (C21949 + C21948 + C21947) * C641) +
            (C5542 + C5543 + C5544) * C51078 - (C5903 + C5904 + C5905) * C643 -
            (C5906 + C5907 + C5908) * C638) *
               C50771 * C17290 +
           ((C5547 + C5546 + C5545) * C642 -
            ((C21953 + C21954 + C21955) * C51077 +
             (C21956 + C21957 + C21958) * C641) +
            (C5550 + C5549 + C5548) * C51078 -
            (C5313 * C2680 + C5310 * C2685 + C5312 * C1574 + C5309 * C1580 +
             C5311 * C292 + C5308 * C309) *
                C643 -
            (C5313 * C2686 + C5310 * C2689 + C5312 * C1579 + C5309 * C1586 +
             C5311 * C310 + C5308 * C322) *
                C638) *
               C50771 * C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C50771 * C19889 +
            (C2513 + C2514 - C2468 - C2469) * C50771 * C19890 +
            C19992 * C19891 + C20000 * C19892) *
               C51037 +
           ((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C50771 * C19889 +
            (C3237 - (C3267 + C3268) + C3242) * C50771 * C19890 +
            (C3247 - (C3269 + C3270) + C3252) * C50771 * C19891 +
            (C20431 - (C20432 + C20433) + C20434) * C50771 * C19892) *
               C50874) *
              C51036 +
          (((C2468 - (C2514 + C2513) + C2469) * C50771 * C19889 +
            (C2478 - (C2516 + C2515) + C2479) * C50771 * C19890 +
            (C2518 - (C2519 + C2520) + C2521) * C50771 * C19891 +
            (C19994 - (C19995 + C19996) + C19997) * C50771 * C19892) *
               C51037 +
           ((C3268 + C3267 - C3237 - C3242) * C50771 * C19889 +
            (C3270 + C3269 - C3247 - C3252) * C50771 * C19890 +
            (C20433 + C20432 - C20431 - C20434) * C50771 * C19891 +
            ((C117 * C4296 + C50907 * C4300) * C283 +
             (C117 * C4299 + C50907 * C4302) * C278 -
             (C117 * C4295 + C50907 * C4298) * C284 -
             (C117 * C4297 + C50907 * C4301) * C50757) *
                C50771 * C19892) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C283 +
              (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
              C172 * C50757) *
                 C17287 +
             (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                 C17288 +
             (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                 C17289) *
                C17290 +
            ((C2513 + C2514 - C2468 - C2469) * C17287 +
             (C2470 + C2471 - C2472 - C2473) * C17288 +
             (C8306 + C8307 - C8308 - C8309) * C17289) *
                C50945) *
               C51037 +
           (((C527 * C284 -
              ((C117 * C473 + C50907 * C492) * C278 +
               (C117 * C463 + C50907 * C474) * C283) +
              C528 * C50757) *
                 C17287 +
             (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                 C17288 +
             (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) *
                 C17289) *
                C17290 +
            ((C3237 - (C3267 + C3268) + C3242) * C17287 +
             (C3243 - (C3244 + C3245) + C3246) * C17288 +
             (C8958 - (C8959 + C8960) + C8961) * C17289) *
                C50945) *
               C50874) *
              C51036 +
          ((((C2468 - (C2514 + C2513) + C2469) * C17287 +
             (C2472 - (C2471 + C2470) + C2473) * C17288 +
             (C8308 - (C8307 + C8306) + C8309) * C17289) *
                C17290 +
            ((C2478 - (C2516 + C2515) + C2479) * C17287 +
             (C2482 - (C2481 + C2480) + C2483) * C17288 +
             (C8310 - (C8311 + C8312) + C8313) * C17289) *
                C50945) *
               C51037 +
           (((C3268 + C3267 - C3237 - C3242) * C17287 +
             (C3245 + C3244 - C3243 - C3246) * C17288 +
             (C8960 + C8959 - C8958 - C8961) * C17289) *
                C17290 +
            ((C3270 + C3269 - C3247 - C3252) * C17287 +
             (C3255 + C3254 - C3253 - C3256) * C17288 +
             (C3029 * C283 + C3030 * C278 -
              (C117 * C1573 + C50907 * C1578) * C284 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C17289) *
                C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C283 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C278 -
             (C5351 + C5352 + C5353) * C284 -
             (C5354 + C5355 + C5356) * C50757) *
                C50771 * C17290 +
            ((C21947 + C21948 + C21949) * C283 +
             (C21950 + C21951 + C21952) * C278 -
             (C5541 + C5540 + C5539) * C284 -
             (C5544 + C5543 + C5542) * C50757) *
                C50771 * C50945) *
               C51037 +
           (((C5733 + C5734 + C5735) * C284 -
             ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
               C5311 * C473 + C5308 * C492) *
                  C278 +
              (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
               C5311 * C463 + C5308 * C474) *
                  C283) +
             (C5736 + C5737 + C5738) * C50757) *
                C50771 * C17290 +
            ((C6285 + C6284 + C6283) * C284 -
             ((C22603 + C22604 + C22605) * C278 +
              (C22606 + C22607 + C22608) * C283) +
             (C6288 + C6287 + C6286) * C50757) *
                C50771 * C50945) *
               C50874) *
              C51036 +
          ((((C5539 + C5540 + C5541) * C284 -
             ((C21952 + C21951 + C21950) * C278 +
              (C21949 + C21948 + C21947) * C283) +
             (C5542 + C5543 + C5544) * C50757) *
                C50771 * C17290 +
            ((C5547 + C5546 + C5545) * C284 -
             ((C21953 + C21954 + C21955) * C278 +
              (C21956 + C21957 + C21958) * C283) +
             (C5550 + C5549 + C5548) * C50757) *
                C50771 * C50945) *
               C51037 +
           (((C22608 + C22607 + C22606) * C283 +
             (C22605 + C22604 + C22603) * C278 -
             (C6283 + C6284 + C6285) * C284 -
             (C6286 + C6287 + C6288) * C50757) *
                C50771 * C17290 +
            ((C5311 * C1576 + C5308 * C1584 + C5312 * C2678 + C5309 * C2681 +
              C5313 * C4709 + C5310 * C4715) *
                 C283 +
             (C5311 * C1583 + C5308 * C1588 + C5312 * C2682 + C5309 * C2687 +
              C5313 * C4714 + C5310 * C4721) *
                 C278 -
             (C5313 * C4708 + C5310 * C4713 + C5312 * C2679 + C5309 * C2683 +
              C5311 * C1575 + C5308 * C1582) *
                 C284 -
             (C5313 * C4712 + C5310 * C4720 + C5312 * C2684 + C5309 * C2688 +
              C5311 * C1581 + C5308 * C1587) *
                 C50757) *
                C50771 * C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50907 * C129) * C118 +
                (C117 * C130 + C50907 * C143) * C106 - C171 * C119 -
                C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
                C176 * C109) *
                   C17287 +
               (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
                C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                   C17288 +
               (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
                C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                   C17289) *
                  C17290 +
              ((C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
                C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
                   C17287 +
               (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
                C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
                   C17288 +
               (C352 * C118 + C353 * C106 - C354 * C119 - C355 * C107 +
                C653 * C120 + C654 * C108 -
                (C117 * C644 + C50907 * C645) * C121 -
                (C117 * C646 + C50907 * C647) * C109) *
                   C17289) *
                  C50945) *
             C50810 * C50798 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50907 * C129) * C283 +
                 (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
                 C172 * C50757) *
                    C17287 +
                (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                    C17288 +
                (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                    C17289) *
                   C17290 +
               ((C2513 + C2514 - C2468 - C2469) * C17287 +
                (C2470 + C2471 - C2472 - C2473) * C17288 +
                (C8306 + C8307 - C8308 - C8309) * C17289) *
                   C50945) *
                  C50810 * C280 +
              (((C2468 - (C2514 + C2513) + C2469) * C17287 +
                (C2472 - (C2471 + C2470) + C2473) * C17288 +
                (C8308 - (C8307 + C8306) + C8309) * C17289) *
                   C17290 +
               ((C2478 - (C2516 + C2515) + C2479) * C17287 +
                (C2482 - (C2481 + C2480) + C2483) * C17288 +
                (C8310 - (C8311 + C8312) + C8313) * C17289) *
                   C50945) *
                  C50810 * C281 +
              ((C2530 * C17287 + C2527 * C17288 +
                (C8312 + C8311 - C8310 - C8313) * C17289) *
                   C17290 +
               ((C2520 + C2519 - C2518 - C2521) * C17287 +
                (C2524 + C2523 - C2522 - C2525) * C17288 +
                (C2509 * C283 + C2510 * C278 -
                 (C117 * C1110 + C50907 * C1115) * C284 -
                 (C117 * C1114 + C50907 * C1122) * C50757) *
                    C17289) *
                   C50945) *
                  C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C2513 + C2514 - C2468 - C2469) * C17287 +
            (C2470 + C2471 - C2472 - C2473) * C17288 +
            (C8306 + C8307 - C8308 - C8309) * C17289) *
               C50945) *
              C459 +
          (((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C17287 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                C17288 +
            (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) *
                C17289) *
               C17290 +
           ((C3237 - (C3267 + C3268) + C3242) * C17287 +
            (C3243 - (C3244 + C3245) + C3246) * C17288 +
            (C8958 - (C8959 + C8960) + C8961) * C17289) *
               C50945) *
              C460 +
          ((((C117 * C467 + C50907 * C482) * C283 +
             (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
             C534 * C50757) *
                C17287 +
            (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50757) * C17288 +
            (C535 * C283 + C536 * C278 - C537 * C284 - C538 * C50757) *
                C17289) *
               C17290 +
           ((C3753 * C283 + C3754 * C278 - C2705 * C284 - C2706 * C50757) *
                C17287 +
            (C2705 * C283 + C2706 * C278 - C8464 * C284 - C8465 * C50757) *
                C17288 +
            (C8464 * C283 + C8465 * C278 -
             (C117 * C1224 + C50907 * C1229) * C284 -
             (C117 * C1228 + C50907 * C1236) * C50757) *
                C17289) *
               C50945) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50907 * C129) * C118 +
           (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50771 * C19889 +
          (C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
           C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
              C50771 * C19890 +
          (C2502 * C118 + C2503 * C106 - C356 * C119 - C357 * C107 +
           C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
              C50771 * C19891 +
          (C2507 * C118 + C2506 * C106 - C2505 * C119 - C2508 * C107 +
           C2509 * C120 + C2510 * C108 -
           (C117 * C1110 + C50907 * C1115) * C121 -
           (C117 * C1114 + C50907 * C1122) * C109) *
              C50771 * C19892) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C50771 * C19889 +
           (C2513 + C2514 - C2468 - C2469) * C50771 * C19890 + C19992 * C19891 +
           C20000 * C19892) *
              C50810 * C280 +
          ((C2468 - (C2514 + C2513) + C2469) * C50771 * C19889 +
           (C2478 - (C2516 + C2515) + C2479) * C50771 * C19890 +
           (C2518 - (C2519 + C2520) + C2521) * C50771 * C19891 +
           (C19994 - (C19995 + C19996) + C19997) * C50771 * C19892) *
              C50810 * C281 +
          (C19992 * C19889 + C20000 * C19890 +
           (C19996 + C19995 - C19994 - C19997) * C50771 * C19891 +
           ((C117 * C3539 + C50907 * C3543) * C283 +
            (C117 * C3542 + C50907 * C3545) * C278 -
            (C117 * C3538 + C50907 * C3541) * C284 -
            (C117 * C3540 + C50907 * C3544) * C50757) *
               C50771 * C19892) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C50771 * C19889 +
           (C2513 + C2514 - C2468 - C2469) * C50771 * C19890 + C19992 * C19891 +
           C20000 * C19892) *
              C459 +
          ((C527 * C284 -
            ((C117 * C473 + C50907 * C492) * C278 +
             (C117 * C463 + C50907 * C474) * C283) +
            C528 * C50757) *
               C50771 * C19889 +
           (C3237 - (C3267 + C3268) + C3242) * C50771 * C19890 +
           (C3247 - (C3269 + C3270) + C3252) * C50771 * C19891 +
           (C3265 * C284 - (C4315 * C278 + C4314 * C283) + C3266 * C50757) *
               C50771 * C19892) *
              C460 +
          (((C117 * C467 + C50907 * C482) * C283 +
            (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
            C534 * C50757) *
               C50771 * C19889 +
           (C3753 * C283 + C3754 * C278 - C2705 * C284 - C2706 * C50757) *
               C50771 * C19890 +
           (C3755 * C283 + C3756 * C278 - C2707 * C284 - C2708 * C50757) *
               C50771 * C19891 +
           ((C117 * C3725 + C50907 * C3729) * C283 +
            (C117 * C3728 + C50907 * C3731) * C278 -
            (C117 * C3724 + C50907 * C3727) * C284 -
            (C117 * C3726 + C50907 * C3730) * C50757) *
               C50771 * C19892) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
            C5313 * C467 + C5310 * C482) *
               C118 +
           (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
            C5313 * C483 + C5310 * C497) *
               C106 -
           (C5351 + C5352 + C5353) * C119 - (C5354 + C5355 + C5356) * C107 +
           (C5357 + C5358 + C5359) * C120 + (C5360 + C5361 + C5362) * C108 -
           (C5363 + C5364 + C5365) * C121 - (C5366 + C5367 + C5368) * C109) *
              C50771 * C17290 +
          ((C5311 * C286 + C5308 * C297 + C5312 * C894 + C5309 * C899 +
            C5313 * C1227 + C5310 * C1235) *
               C118 +
           (C5311 * C296 + C5308 * C315 + C5312 * C900 + C5309 * C909 +
            C5313 * C1234 + C5310 * C1239) *
               C106 -
           (C5541 + C5540 + C5539) * C119 - (C5544 + C5543 + C5542) * C107 +
           (C5905 + C5904 + C5903) * C120 + (C5908 + C5907 + C5906) * C108 -
           (C5313 * C1224 + C5310 * C1229 + C5312 * C897 + C5309 * C905 +
            C5311 * C288 + C5308 * C301) *
               C121 -
           (C5313 * C1228 + C5310 * C1236 + C5312 * C906 + C5309 * C912 +
            C5311 * C302 + C5308 * C318) *
               C109) *
              C50771 * C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C50757) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C283 +
            (C21950 + C21951 + C21952) * C278 - (C5541 + C5540 + C5539) * C284 -
            (C5544 + C5543 + C5542) * C50757) *
               C50771 * C50945) *
              C50810 * C280 +
          (((C5539 + C5540 + C5541) * C284 -
            ((C21952 + C21951 + C21950) * C278 +
             (C21949 + C21948 + C21947) * C283) +
            (C5542 + C5543 + C5544) * C50757) *
               C50771 * C17290 +
           ((C5547 + C5546 + C5545) * C284 -
            ((C21953 + C21954 + C21955) * C278 +
             (C21956 + C21957 + C21958) * C283) +
            (C5550 + C5549 + C5548) * C50757) *
               C50771 * C50945) *
              C50810 * C281 +
          (((C21958 + C21957 + C21956) * C283 +
            (C21955 + C21954 + C21953) * C278 - (C5545 + C5546 + C5547) * C284 -
            (C5548 + C5549 + C5550) * C50757) *
               C50771 * C17290 +
           ((C5311 * C1113 + C5308 * C1121 + C5312 * C3224 + C5309 * C3227 +
             C5313 * C3725 + C5310 * C3729) *
                C283 +
            (C5311 * C1120 + C5308 * C1125 + C5312 * C3228 + C5309 * C3233 +
             C5313 * C3728 + C5310 * C3731) *
                C278 -
            (C5313 * C3724 + C5310 * C3727 + C5312 * C3225 + C5309 * C3229 +
             C5311 * C1112 + C5308 * C1119) *
                C284 -
            (C5313 * C3726 + C5310 * C3730 + C5312 * C3230 + C5309 * C3234 +
             C5311 * C1118 + C5308 * C1124) *
                C50757) *
               C50771 * C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C50757) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C283 +
            (C21950 + C21951 + C21952) * C278 - (C5541 + C5540 + C5539) * C284 -
            (C5544 + C5543 + C5542) * C50757) *
               C50771 * C50945) *
              C459 +
          (((C5733 + C5734 + C5735) * C284 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C278 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C283) +
            (C5736 + C5737 + C5738) * C50757) *
               C50771 * C17290 +
           ((C6285 + C6284 + C6283) * C284 -
            ((C5313 * C4718 + C5310 * C4723 + C5312 * C1234 + C5309 * C1239 +
              C5311 * C900 + C5308 * C909) *
                 C278 +
             (C5313 * C4711 + C5310 * C4719 + C5312 * C1227 + C5309 * C1235 +
              C5311 * C894 + C5308 * C899) *
                 C283) +
            (C6288 + C6287 + C6286) * C50757) *
               C50771 * C50945) *
              C460 +
          (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
             C5313 * C5696 + C5310 * C5699) *
                C283 +
            (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
             C5313 * C5700 + C5310 * C5705) *
                C278 -
            (C5739 + C5740 + C5741) * C284 - (C5742 + C5743 + C5744) * C50757) *
               C50771 * C17290 +
           ((C5311 * C1227 + C5308 * C1235 + C5312 * C4711 + C5309 * C4719 +
             C5313 * C6679 + C5310 * C6683) *
                C283 +
            (C5311 * C1234 + C5308 * C1239 + C5312 * C4718 + C5309 * C4723 +
             C5313 * C6682 + C5310 * C6685) *
                C278 -
            (C5313 * C6678 + C5310 * C6681 + C5312 * C4710 + C5309 * C4717 +
             C5311 * C1226 + C5308 * C1233) *
                C284 -
            (C5313 * C6680 + C5310 * C6684 + C5312 * C4716 + C5309 * C4722 +
             C5311 * C1232 + C5308 * C1238) *
                C50757) *
               C50771 * C50945) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C641 +
            (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
            C172 * C51078 + C173 * C643 + C174 * C638) *
               C50771 * C19889 +
           (C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C50771 * C19890 +
           (C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C50771 * C19891 +
           (C20197 + C20198 - C20199 - C20200 + C20201 + C20202) * C50771 *
               C19892) *
              C51037 +
          ((C527 * C642 -
            ((C117 * C473 + C50907 * C492) * C51077 +
             (C117 * C463 + C50907 * C474) * C641) +
            C528 * C51078 - C529 * C643 - C530 * C638) *
               C50771 * C19889 +
           (C927 * C642 - (C3261 * C51077 + C3262 * C641) + C928 * C51078 -
            C929 * C643 - C930 * C638) *
               C50771 * C19890 +
           (C2703 * C642 - (C3263 * C51077 + C3264 * C641) + C2704 * C51078 -
            C3029 * C643 - C3030 * C638) *
               C50771 * C19891 +
           (C3265 * C642 - (C4315 * C51077 + C4314 * C641) + C3266 * C51078 -
            (C117 * C3226 + C50907 * C3231) * C643 -
            (C117 * C3232 + C50907 * C3235) * C638) *
               C50771 * C19892) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C641 +
             (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
             C172 * C51078 + C173 * C643 + C174 * C638) *
                C17287 +
            (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
             C175 * C643 + C176 * C638) *
                C17288 +
            (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
             C177 * C643 + C178 * C638) *
                C17289) *
               C17290 +
           ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C17287 +
            (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C17288 +
            (C8612 + C8613 - C8614 - C8615 + C8616 + C8617) * C17289) *
               C50945) *
              C51037 +
          (((C527 * C642 -
             ((C117 * C473 + C50907 * C492) * C51077 +
              (C117 * C463 + C50907 * C474) * C641) +
             C528 * C51078 - C529 * C643 - C530 * C638) *
                C17287 +
            (C529 * C642 - (C528 * C51077 + C527 * C641) + C530 * C51078 -
             C531 * C643 - C532 * C638) *
                C17288 +
            (C531 * C642 - (C530 * C51077 + C529 * C641) + C532 * C51078 -
             C763 * C643 - C764 * C638) *
                C17289) *
               C17290 +
           ((C927 * C642 - (C3261 * C51077 + C3262 * C641) + C928 * C51078 -
             C929 * C643 - C930 * C638) *
                C17287 +
            (C929 * C642 - (C928 * C51077 + C927 * C641) + C930 * C51078 -
             C931 * C643 - C932 * C638) *
                C17288 +
            (C931 * C642 - (C930 * C51077 + C929 * C641) + C932 * C51078 -
             (C117 * C898 + C50907 * C907) * C643 -
             (C117 * C908 + C50907 * C913) * C638) *
                C17289) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C641 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C51077 -
            (C5351 + C5352 + C5353) * C642 - (C5354 + C5355 + C5356) * C51078 +
            (C5357 + C5358 + C5359) * C643 + (C5360 + C5361 + C5362) * C638) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C641 +
            (C21950 + C21951 + C21952) * C51077 -
            (C5541 + C5540 + C5539) * C642 - (C5544 + C5543 + C5542) * C51078 +
            (C5905 + C5904 + C5903) * C643 + (C5908 + C5907 + C5906) * C638) *
               C50771 * C50945) *
              C51037 +
          (((C5733 + C5734 + C5735) * C642 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C51077 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C641) +
            (C5736 + C5737 + C5738) * C51078 - (C6067 + C6068 + C6069) * C643 -
            (C6070 + C6071 + C6072) * C638) *
               C50771 * C17290 +
           ((C6285 + C6284 + C6283) * C642 -
            ((C5313 * C4718 + C5310 * C4723 + C5312 * C1234 + C5309 * C1239 +
              C5311 * C900 + C5308 * C909) *
                 C51077 +
             (C5313 * C4711 + C5310 * C4719 + C5312 * C1227 + C5309 * C1235 +
              C5311 * C894 + C5308 * C899) *
                 C641) +
            (C6288 + C6287 + C6286) * C51078 -
            (C5313 * C6266 + C5310 * C6267 + C5312 * C1225 + C5309 * C1231 +
             C5311 * C896 + C5308 * C903) *
                C643 -
            (C5313 * C6268 + C5310 * C6269 + C5312 * C1230 + C5309 * C1237 +
             C5311 * C904 + C5308 * C911) *
                C638) *
               C50771 * C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C2513 + C2514 - C2468 - C2469) * C17287 +
            (C2470 + C2471 - C2472 - C2473) * C17288 +
            (C8306 + C8307 - C8308 - C8309) * C17289) *
               C50945) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C17287 +
            (C2472 - (C2471 + C2470) + C2473) * C17288 +
            (C8308 - (C8307 + C8306) + C8309) * C17289) *
               C17290 +
           ((C2478 - (C2516 + C2515) + C2479) * C17287 +
            (C2482 - (C2481 + C2480) + C2483) * C17288 +
            (C8310 - (C8311 + C8312) + C8313) * C17289) *
               C50945) *
              C50810 * C281 +
          ((C2530 * C17287 + C2527 * C17288 +
            (C8312 + C8311 - C8310 - C8313) * C17289) *
               C17290 +
           ((C2520 + C2519 - C2518 - C2521) * C17287 +
            (C2524 + C2523 - C2522 - C2525) * C17288 +
            (C2509 * C283 + C2510 * C278 -
             (C117 * C1110 + C50907 * C1115) * C284 -
             (C117 * C1114 + C50907 * C1122) * C50757) *
                C17289) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C17287 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C17288 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C17289) *
              C17290 +
          ((C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C17287 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C17288 +
           (C352 * C118 + C353 * C106 - C354 * C119 - C355 * C107 +
            C653 * C120 + C654 * C108 - (C117 * C644 + C50907 * C645) * C121 -
            (C117 * C646 + C50907 * C647) * C109) *
               C17289) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50907 * C129) * C118 +
           (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50771 * C19889 +
          (C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
           C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
              C50771 * C19890 +
          (C2502 * C118 + C2503 * C106 - C356 * C119 - C357 * C107 +
           C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
              C50771 * C19891 +
          (C2507 * C118 + C2506 * C106 - C2505 * C119 - C2508 * C107 +
           C2509 * C120 + C2510 * C108 -
           (C117 * C1110 + C50907 * C1115) * C121 -
           (C117 * C1114 + C50907 * C1122) * C109) *
              C50771 * C19892) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C50771 * C19889 +
           (C2513 + C2514 - C2468 - C2469) * C50771 * C19890 + C19992 * C19891 +
           C20000 * C19892) *
              C50810 * C280 +
          ((C2468 - (C2514 + C2513) + C2469) * C50771 * C19889 +
           (C2478 - (C2516 + C2515) + C2479) * C50771 * C19890 +
           (C2518 - (C2519 + C2520) + C2521) * C50771 * C19891 +
           (C19994 - (C19995 + C19996) + C19997) * C50771 * C19892) *
              C50810 * C281 +
          (C19992 * C19889 + C20000 * C19890 +
           (C19996 + C19995 - C19994 - C19997) * C50771 * C19891 +
           ((C117 * C3539 + C50907 * C3543) * C283 +
            (C117 * C3542 + C50907 * C3545) * C278 -
            (C117 * C3538 + C50907 * C3541) * C284 -
            (C117 * C3540 + C50907 * C3544) * C50757) *
               C50771 * C19892) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
            C5313 * C467 + C5310 * C482) *
               C118 +
           (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
            C5313 * C483 + C5310 * C497) *
               C106 -
           (C5351 + C5352 + C5353) * C119 - (C5354 + C5355 + C5356) * C107 +
           (C5357 + C5358 + C5359) * C120 + (C5360 + C5361 + C5362) * C108 -
           (C5363 + C5364 + C5365) * C121 - (C5366 + C5367 + C5368) * C109) *
              C50771 * C17290 +
          ((C5311 * C286 + C5308 * C297 + C5312 * C894 + C5309 * C899 +
            C5313 * C1227 + C5310 * C1235) *
               C118 +
           (C5311 * C296 + C5308 * C315 + C5312 * C900 + C5309 * C909 +
            C5313 * C1234 + C5310 * C1239) *
               C106 -
           (C5541 + C5540 + C5539) * C119 - (C5544 + C5543 + C5542) * C107 +
           (C5905 + C5904 + C5903) * C120 + (C5908 + C5907 + C5906) * C108 -
           (C5313 * C1224 + C5310 * C1229 + C5312 * C897 + C5309 * C905 +
            C5311 * C288 + C5308 * C301) *
               C121 -
           (C5313 * C1228 + C5310 * C1236 + C5312 * C906 + C5309 * C912 +
            C5311 * C302 + C5308 * C318) *
               C109) *
              C50771 * C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C283 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C278 -
            (C5351 + C5352 + C5353) * C284 - (C5354 + C5355 + C5356) * C50757) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C283 +
            (C21950 + C21951 + C21952) * C278 - (C5541 + C5540 + C5539) * C284 -
            (C5544 + C5543 + C5542) * C50757) *
               C50771 * C50945) *
              C50810 * C280 +
          (((C5539 + C5540 + C5541) * C284 -
            ((C21952 + C21951 + C21950) * C278 +
             (C21949 + C21948 + C21947) * C283) +
            (C5542 + C5543 + C5544) * C50757) *
               C50771 * C17290 +
           ((C5547 + C5546 + C5545) * C284 -
            ((C21953 + C21954 + C21955) * C278 +
             (C21956 + C21957 + C21958) * C283) +
            (C5550 + C5549 + C5548) * C50757) *
               C50771 * C50945) *
              C50810 * C281 +
          (((C21958 + C21957 + C21956) * C283 +
            (C21955 + C21954 + C21953) * C278 - (C5545 + C5546 + C5547) * C284 -
            (C5548 + C5549 + C5550) * C50757) *
               C50771 * C17290 +
           ((C5311 * C1113 + C5308 * C1121 + C5312 * C3224 + C5309 * C3227 +
             C5313 * C3725 + C5310 * C3729) *
                C283 +
            (C5311 * C1120 + C5308 * C1125 + C5312 * C3228 + C5309 * C3233 +
             C5313 * C3728 + C5310 * C3731) *
                C278 -
            (C5313 * C3724 + C5310 * C3727 + C5312 * C3225 + C5309 * C3229 +
             C5311 * C1112 + C5308 * C1119) *
                C284 -
            (C5313 * C3726 + C5310 * C3730 + C5312 * C3230 + C5309 * C3234 +
             C5311 * C1118 + C5308 * C1124) *
                C50757) *
               C50771 * C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C49770 +
            (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
            C172 * C50757) *
               C50771 * C19889 +
           (C3907 + C3908 - C3909 - C3910) * C50771 * C19890 + C20831 * C19891 +
           C20839 * C19892) *
              C50810 * C51081 +
          ((C3909 - (C3908 + C3907) + C3910) * C50771 * C19889 +
           (C3917 - (C3916 + C3915) + C3918) * C50771 * C19890 +
           (C3923 - (C3924 + C3925) + C3926) * C50771 * C19891 +
           (C20833 - (C20834 + C20835) + C20836) * C50771 * C19892) *
              C50810 * C51082 +
          (C20831 * C19889 + C20839 * C19890 +
           (C20835 + C20834 - C20833 - C20836) * C50771 * C19891 +
           (C20619 * C49770 + C20620 * C51021 -
            (C117 * C3538 + C50907 * C3541) * C49763 -
            (C117 * C3540 + C50907 * C3544) * C50757) *
               C50771 * C19892) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C17287 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C17288 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C3907 + C3908 - C3909 - C3910) * C17287 +
            (C3911 + C3912 - C3913 - C3914) * C17288 +
            (C9514 + C9515 - C9516 - C9517) * C17289) *
               C50945) *
              C50810 * C51081 +
          (((C3909 - (C3908 + C3907) + C3910) * C17287 +
            (C3913 - (C3912 + C3911) + C3914) * C17288 +
            (C9516 - (C9515 + C9514) + C9517) * C17289) *
               C17290 +
           ((C3917 - (C3916 + C3915) + C3918) * C17287 +
            (C3921 - (C3920 + C3919) + C3922) * C17288 +
            (C9518 - (C9519 + C9520) + C9521) * C17289) *
               C50945) *
              C50810 * C51082 +
          ((C3935 * C17287 + C3936 * C17288 +
            (C9520 + C9519 - C9518 - C9521) * C17289) *
               C17290 +
           ((C3925 + C3924 - C3923 - C3926) * C17287 +
            (C3929 + C3928 - C3927 - C3930) * C17288 +
            (C2509 * C49770 + C2510 * C51021 -
             (C117 * C1110 + C50907 * C1115) * C49763 -
             (C117 * C1114 + C50907 * C1122) * C50757) *
                C17289) *
               C50945) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C51021 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50757) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C49770 +
            (C21950 + C21951 + C21952) * C51021 -
            (C5541 + C5540 + C5539) * C49763 -
            (C5544 + C5543 + C5542) * C50757) *
               C50771 * C50945) *
              C50810 * C51081 +
          (((C5539 + C5540 + C5541) * C49763 -
            ((C21952 + C21951 + C21950) * C51021 +
             (C21949 + C21948 + C21947) * C49770) +
            (C5542 + C5543 + C5544) * C50757) *
               C50771 * C17290 +
           ((C5547 + C5546 + C5545) * C49763 -
            ((C21953 + C21954 + C21955) * C51021 +
             (C21956 + C21957 + C21958) * C49770) +
            (C5550 + C5549 + C5548) * C50757) *
               C50771 * C50945) *
              C50810 * C51082 +
          (((C21958 + C21957 + C21956) * C49770 +
            (C21955 + C21954 + C21953) * C51021 -
            (C5545 + C5546 + C5547) * C49763 -
            (C5548 + C5549 + C5550) * C50757) *
               C50771 * C17290 +
           ((C22865 + C22866 + C22867) * C49770 +
            (C22868 + C22869 + C22870) * C51021 -
            (C5313 * C3724 + C5310 * C3727 + C5312 * C3225 + C5309 * C3229 +
             C5311 * C1112 + C5308 * C1119) *
                C49763 -
            (C5313 * C3726 + C5310 * C3730 + C5312 * C3230 + C5309 * C3234 +
             C5311 * C1118 + C5308 * C1124) *
                C50757) *
               C50771 * C50945) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C50771 * C19889 +
            (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
            C20617 * C19892) *
               C51037 -
           (C21082 * C19892 + C21077 * C19891 +
            (C3739 + C3740) * C50771 * C19890 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C50771 * C19889) *
               C50874) *
              C51081 +
          (((C3740 + C3739) * C50771 * C19889 +
            (C3736 + C3735) * C50771 * C19890 +
            (C4317 + C4318) * C50771 * C19891 +
            (C21085 + C21086) * C50771 * C19892) *
               C50874 -
           (C20618 * C19892 + C20612 * C19891 +
            (C3552 + C3551) * C50771 * C19890 +
            (C3548 + C3547) * C50771 * C19889) *
               C51037) *
              C51082 +
          ((C20609 * C19889 + C20617 * C19890 +
            (C3575 + C3576) * C50771 * C19891 +
            (C20621 + C20622) * C50771 * C19892) *
               C51037 -
           (((C117 * C21072 + C50907 * C21074) * C50752 +
             (C117 * C21071 + C50907 * C21073) * C1109) *
                C50771 * C19892 +
            (C21086 + C21085) * C50771 * C19891 + C21082 * C19890 +
            C21077 * C19889) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C17287 +
             (C171 * C1109 + C172 * C50752) * C17288 +
             (C173 * C1109 + C174 * C50752) * C17289) *
                C17290 +
            ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
             (C9212 + C9213) * C17289) *
                C50945) *
               C51037 -
           (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
             (C3739 + C3740) * C17287) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C17289 +
             (C528 * C50752 + C527 * C1109) * C17288 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C17287) *
                C17290) *
               C50874) *
              C51081 +
          ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
             (C9365 + C9364) * C17289) *
                C17290 +
            ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
             (C9866 + C9867) * C17289) *
                C50945) *
               C50874 -
           (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
             (C3552 + C3551) * C17287) *
                C50945 +
            ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
             (C3548 + C3547) * C17287) *
                C17290) *
               C51037) *
              C51082 +
          (((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
                C17290 +
            ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
             (C9216 + C9217) * C17289) *
                C50945) *
               C51037 -
           ((((C117 * C3232 + C50907 * C3235) * C50752 +
              (C117 * C3226 + C50907 * C3231) * C1109) *
                 C17289 +
             (C4311 + C4310) * C17288 + (C4318 + C4317) * C17287) *
                C50945 +
            ((C9867 + C9866) * C17289 + C4304 * C17288 + C4305 * C17287) *
                C17290) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C50771 * C17290 +
            ((C21947 + C21948 + C21949) * C1109 +
             (C21950 + C21951 + C21952) * C50752) *
                C50771 * C50945) *
               C51037 -
           (((C22603 + C22604 + C22605) * C50752 +
             (C22606 + C22607 + C22608) * C1109) *
                C50771 * C50945 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C50771 * C17290) *
               C50874) *
              C51081 +
          ((((C22608 + C22607 + C22606) * C1109 +
             (C22605 + C22604 + C22603) * C50752) *
                C50771 * C17290 +
            ((C23537 + C23538 + C23539) * C1109 +
             (C23540 + C23541 + C23542) * C50752) *
                C50771 * C50945) *
               C50874 -
           (((C21953 + C21954 + C21955) * C50752 +
             (C21956 + C21957 + C21958) * C1109) *
                C50771 * C50945 +
            ((C21952 + C21951 + C21950) * C50752 +
             (C21949 + C21948 + C21947) * C1109) *
                C50771 * C17290) *
               C51037) *
              C51082 +
          ((((C21958 + C21957 + C21956) * C1109 +
             (C21955 + C21954 + C21953) * C50752) *
                C50771 * C17290 +
            ((C22865 + C22866 + C22867) * C1109 +
             (C22868 + C22869 + C22870) * C50752) *
                C50771 * C50945) *
               C51037 -
           (((C5313 * C21349 + C5310 * C21351 + C5312 * C3728 + C5309 * C3731 +
              C5311 * C3228 + C5308 * C3233) *
                 C50752 +
             (C5313 * C21348 + C5310 * C21350 + C5312 * C3725 + C5309 * C3729 +
              C5311 * C3224 + C5308 * C3227) *
                 C1109) *
                C50771 * C50945 +
            ((C23542 + C23541 + C23540) * C50752 +
             (C23539 + C23538 + C23537) * C1109) *
                C50771 * C17290) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50907 * C129) * C1035 +
                 (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
                 C172 * C1031 + C173 * C1037 + C174 * C1032) *
                    C17287 +
                (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                 C175 * C1037 + C176 * C1032) *
                    C17288 +
                (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                 C177 * C1037 + C178 * C1032) *
                    C17289) *
                   C17290 +
               ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C17287 +
                (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C17288 +
                (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C17289) *
                   C50945) *
                  C50810 * C1033 +
              (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C17287 +
                (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C17288 +
                (C9110 - (C9109 + C9108) + C9111 - C9112 - C9113) * C17289) *
                   C17290 +
               ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C17287 +
                (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C17288 +
                (C360 * C1036 - (C359 * C1030 + C358 * C1035) + C361 * C1031 -
                 (C117 * C294 + C50907 * C313) * C1037 -
                 (C117 * C314 + C50907 * C324) * C1032) *
                    C17289) *
                   C50945) *
                  C50810 * C50848) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50907 * C129) * C1109 +
                 (C117 * C130 + C50907 * C143) * C50752) *
                    C17287 +
                (C171 * C1109 + C172 * C50752) * C17288 +
                (C173 * C1109 + C174 * C50752) * C17289) *
                   C17290 +
               ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
                (C9212 + C9213) * C17289) *
                   C50945) *
                  C50810 * C1105 -
              (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
                (C3552 + C3551) * C17287) *
                   C50945 +
               ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
                (C3548 + C3547) * C17287) *
                   C17290) *
                  C50810 * C1106 +
              ((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
                   C17290 +
               ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
                (C9216 + C9217) * C17289) *
                   C50945) *
                  C50810 * C1107 -
              ((((C117 * C2459 + C50907 * C2462) * C50752 +
                 (C117 * C2453 + C50907 * C2458) * C1109) *
                    C17289 +
                (C3564 + C3563) * C17288 + (C3576 + C3575) * C17287) *
                   C50945 +
               ((C9217 + C9216) * C17289 + C3567 * C17288 + C3568 * C17287) *
                   C17290) *
                  C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C17287 +
             (C171 * C1109 + C172 * C50752) * C17288 +
             (C173 * C1109 + C174 * C50752) * C17289) *
                C17290 +
            ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
             (C9212 + C9213) * C17289) *
                C50945) *
               C459 -
           (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
             (C3739 + C3740) * C17287) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C17289 +
             (C528 * C50752 + C527 * C1109) * C17288 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C17287) *
                C17290) *
               C460 +
           ((((C117 * C467 + C50907 * C482) * C1109 +
              (C117 * C483 + C50907 * C497) * C50752) *
                 C17287 +
             (C533 * C1109 + C534 * C50752) * C17288 +
             (C535 * C1109 + C536 * C50752) * C17289) *
                C17290 +
            ((C3757 + C3758) * C17287 + (C3745 + C3746) * C17288 +
             (C9366 + C9367) * C17289) *
                C50945) *
               C461) *
              C1033 +
          ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
             (C9365 + C9364) * C17289) *
                C17290 +
            ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
             (C9866 + C9867) * C17289) *
                C50945) *
               C460 -
           (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
             (C3552 + C3551) * C17287) *
                C50945 +
            ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
             (C3548 + C3547) * C17287) *
                C17290) *
               C459 -
           ((((C117 * C2686 + C50907 * C2689) * C50752 +
              (C117 * C2680 + C50907 * C2685) * C1109) *
                 C17289 +
             (C3752 + C3751) * C17288 + (C3760 + C3759) * C17287) *
                C50945 +
            ((C9367 + C9366) * C17289 + (C3746 + C3745) * C17288 +
             (C3758 + C3757) * C17287) *
                C17290) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50771 * C19889 +
           (C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C50771 * C19890 +
           (C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C50771 * C19891 +
           (C20533 + C20534 - C20535 - C20536 + C20537 + C20538) * C50771 *
               C19892) *
              C50810 * C1033 +
          ((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C50771 * C19889 +
           (C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C50771 * C19890 +
           (C20535 - (C20534 + C20533) + C20536 - C20537 - C20538) * C50771 *
               C19891 +
           (C2511 * C1036 - (C3570 * C1030 + C3569 * C1035) + C2512 * C1031 -
            (C117 * C2453 + C50907 * C2458) * C1037 -
            (C117 * C2459 + C50907 * C2462) * C1032) *
               C50771 * C19892) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C50771 * C19889 +
           (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
           C20617 * C19892) *
              C50810 * C1105 -
          (C20618 * C19892 + C20612 * C19891 +
           (C3552 + C3551) * C50771 * C19890 +
           (C3548 + C3547) * C50771 * C19889) *
              C50810 * C1106 +
          (C20609 * C19889 + C20617 * C19890 +
           (C3575 + C3576) * C50771 * C19891 +
           (C20621 + C20622) * C50771 * C19892) *
              C50810 * C1107 -
          (((C117 * C20605 + C50907 * C20607) * C50752 +
            (C117 * C20604 + C50907 * C20606) * C1109) *
               C50771 * C19892 +
           (C20622 + C20621) * C50771 * C19891 + C20618 * C19890 +
           C20612 * C19889) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C50771 * C19889 +
            (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
            C20617 * C19892) *
               C459 -
           ((C4318 + C4317) * C50771 * C19892 + C4305 * C50771 * C19891 +
            (C3739 + C3740) * C50771 * C19890 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C50771 * C19889) *
               C460 +
           (((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C50771 * C19889 +
            (C3757 + C3758) * C50771 * C19890 +
            (C3759 + C3760) * C50771 * C19891 +
            (C20731 + C20732) * C50771 * C19892) *
               C461) *
              C1033 +
          (((C3740 + C3739) * C50771 * C19889 +
            (C3736 + C3735) * C50771 * C19890 +
            (C4317 + C4318) * C50771 * C19891 +
            ((C117 * C4296 + C50907 * C4300) * C1109 +
             (C117 * C4299 + C50907 * C4302) * C50752) *
                C50771 * C19892) *
               C460 -
           (C20618 * C19892 + C20612 * C19891 +
            (C3552 + C3551) * C50771 * C19890 +
            (C3548 + C3547) * C50771 * C19889) *
               C459 -
           (((C117 * C20721 + C50907 * C20723) * C50752 +
             (C117 * C20720 + C50907 * C20722) * C1109) *
                C50771 * C19892 +
            (C20732 + C20731) * C50771 * C19891 +
            (C3760 + C3759) * C50771 * C19890 +
            (C3758 + C3757) * C50771 * C19889) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1035 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C1030 -
            (C5351 + C5352 + C5353) * C1036 - (C5354 + C5355 + C5356) * C1031 +
            (C5357 + C5358 + C5359) * C1037 + (C5360 + C5361 + C5362) * C1032) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C1035 +
            (C21950 + C21951 + C21952) * C1030 -
            (C5541 + C5540 + C5539) * C1036 - (C5544 + C5543 + C5542) * C1031 +
            (C5905 + C5904 + C5903) * C1037 + (C5908 + C5907 + C5906) * C1032) *
               C50771 * C50945) *
              C50810 * C1033 +
          (((C5539 + C5540 + C5541) * C1036 -
            ((C21952 + C21951 + C21950) * C1030 +
             (C21949 + C21948 + C21947) * C1035) +
            (C5542 + C5543 + C5544) * C1031 - (C5903 + C5904 + C5905) * C1037 -
            (C5906 + C5907 + C5908) * C1032) *
               C50771 * C17290 +
           ((C5547 + C5546 + C5545) * C1036 -
            ((C21953 + C21954 + C21955) * C1030 +
             (C21956 + C21957 + C21958) * C1035) +
            (C5550 + C5549 + C5548) * C1031 -
            (C5313 * C2680 + C5310 * C2685 + C5312 * C1574 + C5309 * C1580 +
             C5311 * C292 + C5308 * C309) *
                C1037 -
            (C5313 * C2686 + C5310 * C2689 + C5312 * C1579 + C5309 * C1586 +
             C5311 * C310 + C5308 * C322) *
                C1032) *
               C50771 * C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1109 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C50752) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C1109 +
            (C21950 + C21951 + C21952) * C50752) *
               C50771 * C50945) *
              C50810 * C1105 -
          (((C21953 + C21954 + C21955) * C50752 +
            (C21956 + C21957 + C21958) * C1109) *
               C50771 * C50945 +
           ((C21952 + C21951 + C21950) * C50752 +
            (C21949 + C21948 + C21947) * C1109) *
               C50771 * C17290) *
              C50810 * C1106 +
          (((C21958 + C21957 + C21956) * C1109 +
            (C21955 + C21954 + C21953) * C50752) *
               C50771 * C17290 +
           ((C22865 + C22866 + C22867) * C1109 +
            (C22868 + C22869 + C22870) * C50752) *
               C50771 * C50945) *
              C50810 * C1107 -
          (((C5313 * C20721 + C5310 * C20723 + C5312 * C4299 + C5309 * C4302 +
             C5311 * C2455 + C5308 * C2460) *
                C50752 +
            (C5313 * C20720 + C5310 * C20722 + C5312 * C4296 + C5309 * C4300 +
             C5311 * C2451 + C5308 * C2454) *
                C1109) *
               C50771 * C50945 +
           ((C22870 + C22869 + C22868) * C50752 +
            (C22867 + C22866 + C22865) * C1109) *
               C50771 * C17290) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C50771 * C17290 +
            ((C21947 + C21948 + C21949) * C1109 +
             (C21950 + C21951 + C21952) * C50752) *
                C50771 * C50945) *
               C459 -
           (((C22603 + C22604 + C22605) * C50752 +
             (C22606 + C22607 + C22608) * C1109) *
                C50771 * C50945 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C50771 * C17290) *
               C460 +
           (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
              C5313 * C5696 + C5310 * C5699) *
                 C1109 +
             (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
              C5313 * C5700 + C5310 * C5705) *
                 C50752) *
                C50771 * C17290 +
            ((C23033 + C23034 + C23035) * C1109 +
             (C23036 + C23037 + C23038) * C50752) *
                C50771 * C50945) *
               C461) *
              C1033 +
          ((((C22608 + C22607 + C22606) * C1109 +
             (C22605 + C22604 + C22603) * C50752) *
                C50771 * C17290 +
            ((C5311 * C1576 + C5308 * C1584 + C5312 * C2678 + C5309 * C2681 +
              C5313 * C4709 + C5310 * C4715) *
                 C1109 +
             (C5311 * C1583 + C5308 * C1588 + C5312 * C2682 + C5309 * C2687 +
              C5313 * C4714 + C5310 * C4721) *
                 C50752) *
                C50771 * C50945) *
               C460 -
           (((C21953 + C21954 + C21955) * C50752 +
             (C21956 + C21957 + C21958) * C1109) *
                C50771 * C50945 +
            ((C21952 + C21951 + C21950) * C50752 +
             (C21949 + C21948 + C21947) * C1109) *
                C50771 * C17290) *
               C459 -
           (((C5313 * C23017 + C5310 * C23019 + C5312 * C4714 + C5309 * C4721 +
              C5311 * C2682 + C5308 * C2687) *
                 C50752 +
             (C5313 * C23016 + C5310 * C23018 + C5312 * C4709 + C5309 * C4715 +
              C5311 * C2678 + C5308 * C2681) *
                 C1109) *
                C50771 * C50945 +
            ((C23038 + C23037 + C23036) * C50752 +
             (C23035 + C23034 + C23033) * C1109) *
                C50771 * C17290) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C50771 * C19889 +
            (C3907 + C3908 - C3909 - C3910) * C50771 * C19890 +
            C20831 * C19891 + C20839 * C19892) *
               C51037 +
           ((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C50771 * C19889 +
            (C4134 - (C4135 + C4136) + C4137) * C50771 * C19890 +
            (C4142 - (C4143 + C4144) + C4145) * C50771 * C19891 +
            (C20970 - (C20971 + C20972) + C20973) * C50771 * C19892) *
               C50874) *
              C1033 +
          (((C3909 - (C3908 + C3907) + C3910) * C50771 * C19889 +
            (C3917 - (C3916 + C3915) + C3918) * C50771 * C19890 +
            (C3923 - (C3924 + C3925) + C3926) * C50771 * C19891 +
            (C20833 - (C20834 + C20835) + C20836) * C50771 * C19892) *
               C51037 +
           ((C4136 + C4135 - C4134 - C4137) * C50771 * C19889 +
            (C4144 + C4143 - C4142 - C4145) * C50771 * C19890 +
            (C20972 + C20971 - C20970 - C20973) * C50771 * C19891 +
            ((C117 * C4296 + C50907 * C4300) * C49770 +
             (C117 * C4299 + C50907 * C4302) * C51021 -
             (C117 * C4295 + C50907 * C4298) * C49763 -
             (C117 * C4297 + C50907 * C4301) * C50757) *
                C50771 * C19892) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C17287 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C17288 +
             (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                 C17289) *
                C17290 +
            ((C3907 + C3908 - C3909 - C3910) * C17287 +
             (C3911 + C3912 - C3913 - C3914) * C17288 +
             (C9514 + C9515 - C9516 - C9517) * C17289) *
                C50945) *
               C51037 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C17287 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C17288 +
             (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                 C17289) *
                C17290 +
            ((C4134 - (C4135 + C4136) + C4137) * C17287 +
             (C4138 - (C4139 + C4140) + C4141) * C17288 +
             (C9716 - (C9717 + C9718) + C9719) * C17289) *
                C50945) *
               C50874) *
              C1033 +
          ((((C3909 - (C3908 + C3907) + C3910) * C17287 +
             (C3913 - (C3912 + C3911) + C3914) * C17288 +
             (C9516 - (C9515 + C9514) + C9517) * C17289) *
                C17290 +
            ((C3917 - (C3916 + C3915) + C3918) * C17287 +
             (C3921 - (C3920 + C3919) + C3922) * C17288 +
             (C9518 - (C9519 + C9520) + C9521) * C17289) *
                C50945) *
               C51037 +
           (((C4136 + C4135 - C4134 - C4137) * C17287 +
             (C4140 + C4139 - C4138 - C4141) * C17288 +
             (C9718 + C9717 - C9716 - C9719) * C17289) *
                C17290 +
            ((C4144 + C4143 - C4142 - C4145) * C17287 +
             (C4148 + C4147 - C4146 - C4149) * C17288 +
             (C3029 * C49770 + C3030 * C51021 -
              (C117 * C1573 + C50907 * C1578) * C49763 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C17289) *
                C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C49770 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C51021 -
             (C5351 + C5352 + C5353) * C49763 -
             (C5354 + C5355 + C5356) * C50757) *
                C50771 * C17290 +
            ((C21947 + C21948 + C21949) * C49770 +
             (C21950 + C21951 + C21952) * C51021 -
             (C5541 + C5540 + C5539) * C49763 -
             (C5544 + C5543 + C5542) * C50757) *
                C50771 * C50945) *
               C51037 +
           (((C5733 + C5734 + C5735) * C49763 -
             ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
               C5311 * C473 + C5308 * C492) *
                  C51021 +
              (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
               C5311 * C463 + C5308 * C474) *
                  C49770) +
             (C5736 + C5737 + C5738) * C50757) *
                C50771 * C17290 +
            ((C6285 + C6284 + C6283) * C49763 -
             ((C22603 + C22604 + C22605) * C51021 +
              (C22606 + C22607 + C22608) * C49770) +
             (C6288 + C6287 + C6286) * C50757) *
                C50771 * C50945) *
               C50874) *
              C1033 +
          ((((C5539 + C5540 + C5541) * C49763 -
             ((C21952 + C21951 + C21950) * C51021 +
              (C21949 + C21948 + C21947) * C49770) +
             (C5542 + C5543 + C5544) * C50757) *
                C50771 * C17290 +
            ((C5547 + C5546 + C5545) * C49763 -
             ((C21953 + C21954 + C21955) * C51021 +
              (C21956 + C21957 + C21958) * C49770) +
             (C5550 + C5549 + C5548) * C50757) *
                C50771 * C50945) *
               C51037 +
           (((C22608 + C22607 + C22606) * C49770 +
             (C22605 + C22604 + C22603) * C51021 -
             (C6283 + C6284 + C6285) * C49763 -
             (C6286 + C6287 + C6288) * C50757) *
                C50771 * C17290 +
            ((C5311 * C1576 + C5308 * C1584 + C5312 * C2678 + C5309 * C2681 +
              C5313 * C4709 + C5310 * C4715) *
                 C49770 +
             (C5311 * C1583 + C5308 * C1588 + C5312 * C2682 + C5309 * C2687 +
              C5313 * C4714 + C5310 * C4721) *
                 C51021 -
             (C5313 * C4708 + C5310 * C4713 + C5312 * C2679 + C5309 * C2683 +
              C5311 * C1575 + C5308 * C1582) *
                 C49763 -
             (C5313 * C4712 + C5310 * C4720 + C5312 * C2684 + C5309 * C2688 +
              C5311 * C1581 + C5308 * C1587) *
                 C50757) *
                C50771 * C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C17287 +
            (C171 * C1109 + C172 * C50752) * C17288 +
            (C173 * C1109 + C174 * C50752) * C17289) *
               C17290 +
           ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
            (C9212 + C9213) * C17289) *
               C50945) *
              C50810 * C1105 -
          (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
            (C3552 + C3551) * C17287) *
               C50945 +
           ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
            (C3548 + C3547) * C17287) *
               C17290) *
              C50810 * C1106 +
          ((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
               C17290 +
           ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
            (C9216 + C9217) * C17289) *
               C50945) *
              C50810 * C1107 -
          ((((C117 * C2459 + C50907 * C2462) * C50752 +
             (C117 * C2453 + C50907 * C2458) * C1109) *
                C17289 +
            (C3564 + C3563) * C17288 + (C3576 + C3575) * C17287) *
               C50945 +
           ((C9217 + C9216) * C17289 + C3567 * C17288 + C3568 * C17287) *
               C17290) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C17287 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C17288 +
            (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C17289) *
               C17290 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C17287 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C17288 +
            (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C17289) *
               C50945) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C17287 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C17288 +
            (C9110 - (C9109 + C9108) + C9111 - C9112 - C9113) * C17289) *
               C17290 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C17287 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C17288 +
            (C360 * C1036 - (C359 * C1030 + C358 * C1035) + C361 * C1031 -
             (C117 * C294 + C50907 * C313) * C1037 -
             (C117 * C314 + C50907 * C324) * C1032) *
                C17289) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50771 * C19889 +
           (C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C50771 * C19890 +
           (C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C50771 * C19891 +
           (C20533 + C20534 - C20535 - C20536 + C20537 + C20538) * C50771 *
               C19892) *
              C50810 * C1033 +
          ((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C50771 * C19889 +
           (C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C50771 * C19890 +
           (C20535 - (C20534 + C20533) + C20536 - C20537 - C20538) * C50771 *
               C19891 +
           (C2511 * C1036 - (C3570 * C1030 + C3569 * C1035) + C2512 * C1031 -
            (C117 * C2453 + C50907 * C2458) * C1037 -
            (C117 * C2459 + C50907 * C2462) * C1032) *
               C50771 * C19892) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C50771 * C19889 +
           (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
           C20617 * C19892) *
              C50810 * C1105 -
          (C20618 * C19892 + C20612 * C19891 +
           (C3552 + C3551) * C50771 * C19890 +
           (C3548 + C3547) * C50771 * C19889) *
              C50810 * C1106 +
          (C20609 * C19889 + C20617 * C19890 +
           (C3575 + C3576) * C50771 * C19891 +
           (C20621 + C20622) * C50771 * C19892) *
              C50810 * C1107 -
          (((C117 * C20605 + C50907 * C20607) * C50752 +
            (C117 * C20604 + C50907 * C20606) * C1109) *
               C50771 * C19892 +
           (C20622 + C20621) * C50771 * C19891 + C20618 * C19890 +
           C20612 * C19889) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1035 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C1030 -
            (C5351 + C5352 + C5353) * C1036 - (C5354 + C5355 + C5356) * C1031 +
            (C5357 + C5358 + C5359) * C1037 + (C5360 + C5361 + C5362) * C1032) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C1035 +
            (C21950 + C21951 + C21952) * C1030 -
            (C5541 + C5540 + C5539) * C1036 - (C5544 + C5543 + C5542) * C1031 +
            (C5905 + C5904 + C5903) * C1037 + (C5908 + C5907 + C5906) * C1032) *
               C50771 * C50945) *
              C50810 * C1033 +
          (((C5539 + C5540 + C5541) * C1036 -
            ((C21952 + C21951 + C21950) * C1030 +
             (C21949 + C21948 + C21947) * C1035) +
            (C5542 + C5543 + C5544) * C1031 - (C5903 + C5904 + C5905) * C1037 -
            (C5906 + C5907 + C5908) * C1032) *
               C50771 * C17290 +
           ((C5547 + C5546 + C5545) * C1036 -
            ((C21953 + C21954 + C21955) * C1030 +
             (C21956 + C21957 + C21958) * C1035) +
            (C5550 + C5549 + C5548) * C1031 -
            (C5313 * C2680 + C5310 * C2685 + C5312 * C1574 + C5309 * C1580 +
             C5311 * C292 + C5308 * C309) *
                C1037 -
            (C5313 * C2686 + C5310 * C2689 + C5312 * C1579 + C5309 * C1586 +
             C5311 * C310 + C5308 * C322) *
                C1032) *
               C50771 * C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1109 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C50752) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C1109 +
            (C21950 + C21951 + C21952) * C50752) *
               C50771 * C50945) *
              C50810 * C1105 -
          (((C21953 + C21954 + C21955) * C50752 +
            (C21956 + C21957 + C21958) * C1109) *
               C50771 * C50945 +
           ((C21952 + C21951 + C21950) * C50752 +
            (C21949 + C21948 + C21947) * C1109) *
               C50771 * C17290) *
              C50810 * C1106 +
          (((C21958 + C21957 + C21956) * C1109 +
            (C21955 + C21954 + C21953) * C50752) *
               C50771 * C17290 +
           ((C22865 + C22866 + C22867) * C1109 +
            (C22868 + C22869 + C22870) * C50752) *
               C50771 * C50945) *
              C50810 * C1107 -
          (((C5313 * C20721 + C5310 * C20723 + C5312 * C4299 + C5309 * C4302 +
             C5311 * C2455 + C5308 * C2460) *
                C50752 +
            (C5313 * C20720 + C5310 * C20722 + C5312 * C4296 + C5309 * C4300 +
             C5311 * C2451 + C5308 * C2454) *
                C1109) *
               C50771 * C50945 +
           ((C22870 + C22869 + C22868) * C50752 +
            (C22867 + C22866 + C22865) * C1109) *
               C50771 * C17290) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C50771 * C19889 +
            (C3907 + C3908 - C3909 - C3910) * C50771 * C19890 +
            C20831 * C19891 + C20839 * C19892) *
               C1687 +
           ((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C50771 * C19889 +
            (C4134 - (C4135 + C4136) + C4137) * C50771 * C19890 +
            (C4142 - (C4143 + C4144) + C4145) * C50771 * C19891 +
            (C20970 - (C20971 + C20972) + C20973) * C50771 * C19892) *
               C50874) *
              C51036 +
          (((C3909 - (C3908 + C3907) + C3910) * C50771 * C19889 +
            (C3917 - (C3916 + C3915) + C3918) * C50771 * C19890 +
            (C3923 - (C3924 + C3925) + C3926) * C50771 * C19891 +
            (C20833 - (C20834 + C20835) + C20836) * C50771 * C19892) *
               C1687 +
           ((C4136 + C4135 - C4134 - C4137) * C50771 * C19889 +
            (C4144 + C4143 - C4142 - C4145) * C50771 * C19890 +
            (C20972 + C20971 - C20970 - C20973) * C50771 * C19891 +
            (C21083 * C49770 + C21084 * C51021 -
             (C117 * C4295 + C50907 * C4298) * C49763 -
             (C117 * C4297 + C50907 * C4301) * C50757) *
                C50771 * C19892) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C17287 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C17288 +
             (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                 C17289) *
                C17290 +
            ((C3907 + C3908 - C3909 - C3910) * C17287 +
             (C3911 + C3912 - C3913 - C3914) * C17288 +
             (C9514 + C9515 - C9516 - C9517) * C17289) *
                C50945) *
               C1687 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C17287 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C17288 +
             (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                 C17289) *
                C17290 +
            ((C4134 - (C4135 + C4136) + C4137) * C17287 +
             (C4138 - (C4139 + C4140) + C4141) * C17288 +
             (C9716 - (C9717 + C9718) + C9719) * C17289) *
                C50945) *
               C50874) *
              C51036 +
          ((((C3909 - (C3908 + C3907) + C3910) * C17287 +
             (C3913 - (C3912 + C3911) + C3914) * C17288 +
             (C9516 - (C9515 + C9514) + C9517) * C17289) *
                C17290 +
            ((C3917 - (C3916 + C3915) + C3918) * C17287 +
             (C3921 - (C3920 + C3919) + C3922) * C17288 +
             (C9518 - (C9519 + C9520) + C9521) * C17289) *
                C50945) *
               C1687 +
           (((C4136 + C4135 - C4134 - C4137) * C17287 +
             (C4140 + C4139 - C4138 - C4141) * C17288 +
             (C9718 + C9717 - C9716 - C9719) * C17289) *
                C17290 +
            ((C4144 + C4143 - C4142 - C4145) * C17287 +
             (C4148 + C4147 - C4146 - C4149) * C17288 +
             (C3029 * C49770 + C3030 * C51021 -
              (C117 * C1573 + C50907 * C1578) * C49763 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C17289) *
                C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C49770 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C51021 -
             (C5351 + C5352 + C5353) * C49763 -
             (C5354 + C5355 + C5356) * C50757) *
                C50771 * C17290 +
            ((C21947 + C21948 + C21949) * C49770 +
             (C21950 + C21951 + C21952) * C51021 -
             (C5541 + C5540 + C5539) * C49763 -
             (C5544 + C5543 + C5542) * C50757) *
                C50771 * C50945) *
               C1687 +
           (((C5733 + C5734 + C5735) * C49763 -
             ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
               C5311 * C473 + C5308 * C492) *
                  C51021 +
              (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
               C5311 * C463 + C5308 * C474) *
                  C49770) +
             (C5736 + C5737 + C5738) * C50757) *
                C50771 * C17290 +
            ((C6285 + C6284 + C6283) * C49763 -
             ((C22603 + C22604 + C22605) * C51021 +
              (C22606 + C22607 + C22608) * C49770) +
             (C6288 + C6287 + C6286) * C50757) *
                C50771 * C50945) *
               C50874) *
              C51036 +
          ((((C5539 + C5540 + C5541) * C49763 -
             ((C21952 + C21951 + C21950) * C51021 +
              (C21949 + C21948 + C21947) * C49770) +
             (C5542 + C5543 + C5544) * C50757) *
                C50771 * C17290 +
            ((C5547 + C5546 + C5545) * C49763 -
             ((C21953 + C21954 + C21955) * C51021 +
              (C21956 + C21957 + C21958) * C49770) +
             (C5550 + C5549 + C5548) * C50757) *
                C50771 * C50945) *
               C1687 +
           (((C22608 + C22607 + C22606) * C49770 +
             (C22605 + C22604 + C22603) * C51021 -
             (C6283 + C6284 + C6285) * C49763 -
             (C6286 + C6287 + C6288) * C50757) *
                C50771 * C17290 +
            ((C23537 + C23538 + C23539) * C49770 +
             (C23540 + C23541 + C23542) * C51021 -
             (C5313 * C4708 + C5310 * C4713 + C5312 * C2679 + C5309 * C2683 +
              C5311 * C1575 + C5308 * C1582) *
                 C49763 -
             (C5313 * C4712 + C5310 * C4720 + C5312 * C2684 + C5309 * C2688 +
              C5311 * C1581 + C5308 * C1587) *
                 C50757) *
                C50771 * C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50907 * C129) * C1109 +
                      (C117 * C130 + C50907 * C143) * C50752) *
                         C50771 * C19889 +
                     (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
                     C20617 * C19892) *
                        C51083 -
                    (C21082 * C19892 + C21077 * C19891 +
                     (C3739 + C3740) * C50771 * C19890 +
                     ((C117 * C473 + C50907 * C492) * C50752 +
                      (C117 * C463 + C50907 * C474) * C1109) *
                         C50771 * C19889) *
                        C51084 +
                    (((C117 * C467 + C50907 * C482) * C1109 +
                      (C117 * C483 + C50907 * C497) * C50752) *
                         C50771 * C19889 +
                     (C3757 + C3758) * C50771 * C19890 +
                     (C3759 + C3760) * C50771 * C19891 +
                     (C20731 + C20732) * C50771 * C19892) *
                        C2103) *
                       C51036 +
                   (((C3740 + C3739) * C50771 * C19889 +
                     (C3736 + C3735) * C50771 * C19890 +
                     (C4317 + C4318) * C50771 * C19891 +
                     (C21085 + C21086) * C50771 * C19892) *
                        C51084 -
                    (C20618 * C19892 + C20612 * C19891 +
                     (C3552 + C3551) * C50771 * C19890 +
                     (C3548 + C3547) * C50771 * C19889) *
                        C51083 -
                    (((C117 * C20721 + C50907 * C20723) * C50752 +
                      (C117 * C20720 + C50907 * C20722) * C1109) *
                         C50771 * C19892 +
                     (C20732 + C20731) * C50771 * C19891 +
                     (C3760 + C3759) * C50771 * C19890 +
                     (C3758 + C3757) * C50771 * C19889) *
                        C2103) *
                       C50848)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C117 * C122 + C50907 * C129) * C1109 +
                       (C117 * C130 + C50907 * C143) * C50752) *
                          C17287 +
                      (C171 * C1109 + C172 * C50752) * C17288 +
                      (C173 * C1109 + C174 * C50752) * C17289) *
                         C17290 +
                     ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
                      (C9212 + C9213) * C17289) *
                         C50945) *
                        C51083 -
                    (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
                      (C3739 + C3740) * C17287) *
                         C50945 +
                     ((C530 * C50752 + C529 * C1109) * C17289 +
                      (C528 * C50752 + C527 * C1109) * C17288 +
                      ((C117 * C473 + C50907 * C492) * C50752 +
                       (C117 * C463 + C50907 * C474) * C1109) *
                          C17287) *
                         C17290) *
                        C51084 +
                    ((((C117 * C467 + C50907 * C482) * C1109 +
                       (C117 * C483 + C50907 * C497) * C50752) *
                          C17287 +
                      (C533 * C1109 + C534 * C50752) * C17288 +
                      (C535 * C1109 + C536 * C50752) * C17289) *
                         C17290 +
                     ((C3757 + C3758) * C17287 + (C3745 + C3746) * C17288 +
                      (C9366 + C9367) * C17289) *
                         C50945) *
                        C2103) *
                       C51036 +
                   ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
                      (C9365 + C9364) * C17289) *
                         C17290 +
                     ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
                      (C9866 + C9867) * C17289) *
                         C50945) *
                        C51084 -
                    (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
                      (C3552 + C3551) * C17287) *
                         C50945 +
                     ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
                      (C3548 + C3547) * C17287) *
                         C17290) *
                        C51083 -
                    ((((C117 * C2686 + C50907 * C2689) * C50752 +
                       (C117 * C2680 + C50907 * C2685) * C1109) *
                          C17289 +
                      (C3752 + C3751) * C17288 + (C3760 + C3759) * C17287) *
                         C50945 +
                     ((C9367 + C9366) * C17289 + (C3746 + C3745) * C17288 +
                      (C3758 + C3757) * C17287) *
                         C17290) *
                        C2103) *
                       C50848)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C5311 * C122 + C5308 * C129 + C5312 * C463 +
                       C5309 * C474 + C5313 * C467 + C5310 * C482) *
                          C1109 +
                      (C5311 * C130 + C5308 * C143 + C5312 * C473 +
                       C5309 * C492 + C5313 * C483 + C5310 * C497) *
                          C50752) *
                         C50771 * C17290 +
                     ((C21947 + C21948 + C21949) * C1109 +
                      (C21950 + C21951 + C21952) * C50752) *
                         C50771 * C50945) *
                        C51083 -
                    (((C22603 + C22604 + C22605) * C50752 +
                      (C22606 + C22607 + C22608) * C1109) *
                         C50771 * C50945 +
                     ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 +
                       C5309 * C497 + C5311 * C473 + C5308 * C492) *
                          C50752 +
                      (C5313 * C1860 + C5310 * C1868 + C5312 * C467 +
                       C5309 * C482 + C5311 * C463 + C5308 * C474) *
                          C1109) *
                         C50771 * C17290) *
                        C51084 +
                    (((C5311 * C467 + C5308 * C482 + C5312 * C1860 +
                       C5309 * C1868 + C5313 * C5696 + C5310 * C5699) *
                          C1109 +
                      (C5311 * C483 + C5308 * C497 + C5312 * C1867 +
                       C5309 * C1872 + C5313 * C5700 + C5310 * C5705) *
                          C50752) *
                         C50771 * C17290 +
                     ((C23033 + C23034 + C23035) * C1109 +
                      (C23036 + C23037 + C23038) * C50752) *
                         C50771 * C50945) *
                        C2103) *
                       C51036 +
                   ((((C22608 + C22607 + C22606) * C1109 +
                      (C22605 + C22604 + C22603) * C50752) *
                         C50771 * C17290 +
                     ((C23537 + C23538 + C23539) * C1109 +
                      (C23540 + C23541 + C23542) * C50752) *
                         C50771 * C50945) *
                        C51084 -
                    (((C21953 + C21954 + C21955) * C50752 +
                      (C21956 + C21957 + C21958) * C1109) *
                         C50771 * C50945 +
                     ((C21952 + C21951 + C21950) * C50752 +
                      (C21949 + C21948 + C21947) * C1109) *
                         C50771 * C17290) *
                        C51083 -
                    (((C5313 * C23017 + C5310 * C23019 + C5312 * C4714 +
                       C5309 * C4721 + C5311 * C2682 + C5308 * C2687) *
                          C50752 +
                      (C5313 * C23016 + C5310 * C23018 + C5312 * C4709 +
                       C5309 * C4715 + C5311 * C2678 + C5308 * C2681) *
                          C1109) *
                         C50771 * C50945 +
                     ((C23038 + C23037 + C23036) * C50752 +
                      (C23035 + C23034 + C23033) * C1109) *
                         C50771 * C17290) *
                        C2103) *
                       C50848)) /
                     (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50907 * C129) * C1035 +
                 (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
                 C172 * C1031 + C173 * C1037 + C174 * C1032) *
                    C17287 +
                (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
                 C175 * C1037 + C176 * C1032) *
                    C17288 +
                (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
                 C177 * C1037 + C178 * C1032) *
                    C17289) *
                   C17290 +
               ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C17287 +
                (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C17288 +
                (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C17289) *
                   C50945) *
                  C1687 +
              (((C527 * C1036 -
                 ((C117 * C473 + C50907 * C492) * C1030 +
                  (C117 * C463 + C50907 * C474) * C1035) +
                 C528 * C1031 - C529 * C1037 - C530 * C1032) *
                    C17287 +
                (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
                 C531 * C1037 - C532 * C1032) *
                    C17288 +
                (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
                 C763 * C1037 - C764 * C1032) *
                    C17289) *
                   C17290 +
               ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
                 C929 * C1037 - C930 * C1032) *
                    C17287 +
                (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
                 C931 * C1037 - C932 * C1032) *
                    C17288 +
                (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
                 (C117 * C898 + C50907 * C907) * C1037 -
                 (C117 * C908 + C50907 * C913) * C1032) *
                    C17289) *
                   C50945) *
                  C50874) *
             C50798 +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C117 * C122 + C50907 * C129) * C1109 +
                  (C117 * C130 + C50907 * C143) * C50752) *
                     C17287 +
                 (C171 * C1109 + C172 * C50752) * C17288 +
                 (C173 * C1109 + C174 * C50752) * C17289) *
                    C17290 +
                ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
                 (C9212 + C9213) * C17289) *
                    C50945) *
                   C1687 -
               (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
                 (C3739 + C3740) * C17287) *
                    C50945 +
                ((C530 * C50752 + C529 * C1109) * C17289 +
                 (C528 * C50752 + C527 * C1109) * C17288 +
                 ((C117 * C473 + C50907 * C492) * C50752 +
                  (C117 * C463 + C50907 * C474) * C1109) *
                     C17287) *
                    C17290) *
                   C50874) *
                  C280 +
              ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
                 (C9365 + C9364) * C17289) *
                    C17290 +
                ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
                 (C9866 + C9867) * C17289) *
                    C50945) *
                   C50874 -
               (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
                 (C3552 + C3551) * C17287) *
                    C50945 +
                ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
                 (C3548 + C3547) * C17287) *
                    C17290) *
                   C1687) *
                  C281 +
              (((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
                    C17290 +
                ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
                 (C9216 + C9217) * C17289) *
                    C50945) *
                   C1687 -
               ((((C117 * C3232 + C50907 * C3235) * C50752 +
                  (C117 * C3226 + C50907 * C3231) * C1109) *
                     C17289 +
                 (C4311 + C4310) * C17288 + (C4318 + C4317) * C17287) *
                    C50945 +
                ((C9867 + C9866) * C17289 + C4304 * C17288 + C4305 * C17287) *
                    C17290) *
                   C50874) *
                  C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C17287 +
            (C171 * C1109 + C172 * C50752) * C17288 +
            (C173 * C1109 + C174 * C50752) * C17289) *
               C17290 +
           ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
            (C9212 + C9213) * C17289) *
               C50945) *
              C1853 -
          (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
            (C3739 + C3740) * C17287) *
               C50945 +
           ((C530 * C50752 + C529 * C1109) * C17289 +
            (C528 * C50752 + C527 * C1109) * C17288 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C17287) *
               C17290) *
              C1854 +
          ((((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C17287 +
            (C533 * C1109 + C534 * C50752) * C17288 +
            (C535 * C1109 + C536 * C50752) * C17289) *
               C17290 +
           ((C3757 + C3758) * C17287 + (C3745 + C3746) * C17288 +
            (C9366 + C9367) * C17289) *
               C50945) *
              C1855 -
          ((((C117 * C6268 + C50907 * C6269) * C50752 +
             (C117 * C6266 + C50907 * C6267) * C1109) *
                C17289 +
            ((C117 * C4716 + C50907 * C4722) * C50752 +
             (C117 * C4710 + C50907 * C4717) * C1109) *
                C17288 +
            ((C117 * C4718 + C50907 * C4723) * C50752 +
             (C117 * C4711 + C50907 * C4719) * C1109) *
                C17287) *
               C50945 +
           (((C117 * C1863 + C50907 * C1870) * C50752 +
             (C117 * C1858 + C50907 * C1864) * C1109) *
                C17289 +
            ((C117 * C1865 + C50907 * C1871) * C50752 +
             (C117 * C1859 + C50907 * C1866) * C1109) *
                C17288 +
            ((C117 * C1867 + C50907 * C1872) * C50752 +
             (C117 * C1860 + C50907 * C1868) * C1109) *
                C17287) *
               C17290) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50771 * C19889 +
           (C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C50771 * C19890 +
           (C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C50771 * C19891 +
           (C20533 + C20534 - C20535 - C20536 + C20537 + C20538) * C50771 *
               C19892) *
              C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50907 * C492) * C1030 +
             (C117 * C463 + C50907 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C50771 * C19889 +
           (C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
            C929 * C1037 - C930 * C1032) *
               C50771 * C19890 +
           (C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
            C3029 * C1037 - C3030 * C1032) *
               C50771 * C19891 +
           (C3265 * C1036 - (C4315 * C1030 + C4314 * C1035) + C3266 * C1031 -
            (C117 * C3226 + C50907 * C3231) * C1037 -
            (C117 * C3232 + C50907 * C3235) * C1032) *
               C50771 * C19892) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C50771 * C19889 +
            (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
            C20617 * C19892) *
               C1687 -
           (C21082 * C19892 + C21077 * C19891 +
            (C3739 + C3740) * C50771 * C19890 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C50771 * C19889) *
               C50874) *
              C280 +
          (((C3740 + C3739) * C50771 * C19889 +
            (C3736 + C3735) * C50771 * C19890 +
            (C4317 + C4318) * C50771 * C19891 +
            (C21085 + C21086) * C50771 * C19892) *
               C50874 -
           (C20618 * C19892 + C20612 * C19891 +
            (C3552 + C3551) * C50771 * C19890 +
            (C3548 + C3547) * C50771 * C19889) *
               C1687) *
              C281 +
          ((C20609 * C19889 + C20617 * C19890 +
            (C3575 + C3576) * C50771 * C19891 +
            (C20621 + C20622) * C50771 * C19892) *
               C1687 -
           (((C117 * C21072 + C50907 * C21074) * C50752 +
             (C117 * C21071 + C50907 * C21073) * C1109) *
                C50771 * C19892 +
            (C21086 + C21085) * C50771 * C19891 + C21082 * C19890 +
            C21077 * C19889) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C50771 * C19889 +
           (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
           C20617 * C19892) *
              C1853 -
          (C21082 * C19892 + C21077 * C19891 +
           (C3739 + C3740) * C50771 * C19890 +
           ((C117 * C473 + C50907 * C492) * C50752 +
            (C117 * C463 + C50907 * C474) * C1109) *
               C50771 * C19889) *
              C1854 +
          (((C117 * C467 + C50907 * C482) * C1109 +
            (C117 * C483 + C50907 * C497) * C50752) *
               C50771 * C19889 +
           (C3757 + C3758) * C50771 * C19890 +
           (C3759 + C3760) * C50771 * C19891 +
           (C20731 + C20732) * C50771 * C19892) *
              C1855 -
          (((C117 * C21349 + C50907 * C21351) * C50752 +
            (C117 * C21348 + C50907 * C21350) * C1109) *
               C50771 * C19892 +
           ((C117 * C4714 + C50907 * C4721) * C50752 +
            (C117 * C4709 + C50907 * C4715) * C1109) *
               C50771 * C19891 +
           ((C117 * C4718 + C50907 * C4723) * C50752 +
            (C117 * C4711 + C50907 * C4719) * C1109) *
               C50771 * C19890 +
           ((C117 * C1867 + C50907 * C1872) * C50752 +
            (C117 * C1860 + C50907 * C1868) * C1109) *
               C50771 * C19889) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1035 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C1030 -
            (C5351 + C5352 + C5353) * C1036 - (C5354 + C5355 + C5356) * C1031 +
            (C5357 + C5358 + C5359) * C1037 + (C5360 + C5361 + C5362) * C1032) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C1035 +
            (C21950 + C21951 + C21952) * C1030 -
            (C5541 + C5540 + C5539) * C1036 - (C5544 + C5543 + C5542) * C1031 +
            (C5905 + C5904 + C5903) * C1037 + (C5908 + C5907 + C5906) * C1032) *
               C50771 * C50945) *
              C1687 +
          (((C5733 + C5734 + C5735) * C1036 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C1030 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1035) +
            (C5736 + C5737 + C5738) * C1031 - (C6067 + C6068 + C6069) * C1037 -
            (C6070 + C6071 + C6072) * C1032) *
               C50771 * C17290 +
           ((C6285 + C6284 + C6283) * C1036 -
            ((C22603 + C22604 + C22605) * C1030 +
             (C22606 + C22607 + C22608) * C1035) +
            (C6288 + C6287 + C6286) * C1031 -
            (C5313 * C6266 + C5310 * C6267 + C5312 * C1225 + C5309 * C1231 +
             C5311 * C896 + C5308 * C903) *
                C1037 -
            (C5313 * C6268 + C5310 * C6269 + C5312 * C1230 + C5309 * C1237 +
             C5311 * C904 + C5308 * C911) *
                C1032) *
               C50771 * C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C50771 * C17290 +
            ((C21947 + C21948 + C21949) * C1109 +
             (C21950 + C21951 + C21952) * C50752) *
                C50771 * C50945) *
               C1687 -
           (((C22603 + C22604 + C22605) * C50752 +
             (C22606 + C22607 + C22608) * C1109) *
                C50771 * C50945 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C50771 * C17290) *
               C50874) *
              C280 +
          ((((C22608 + C22607 + C22606) * C1109 +
             (C22605 + C22604 + C22603) * C50752) *
                C50771 * C17290 +
            ((C23537 + C23538 + C23539) * C1109 +
             (C23540 + C23541 + C23542) * C50752) *
                C50771 * C50945) *
               C50874 -
           (((C21953 + C21954 + C21955) * C50752 +
             (C21956 + C21957 + C21958) * C1109) *
                C50771 * C50945 +
            ((C21952 + C21951 + C21950) * C50752 +
             (C21949 + C21948 + C21947) * C1109) *
                C50771 * C17290) *
               C1687) *
              C281 +
          ((((C21958 + C21957 + C21956) * C1109 +
             (C21955 + C21954 + C21953) * C50752) *
                C50771 * C17290 +
            ((C22865 + C22866 + C22867) * C1109 +
             (C22868 + C22869 + C22870) * C50752) *
                C50771 * C50945) *
               C1687 -
           (((C5313 * C21349 + C5310 * C21351 + C5312 * C3728 + C5309 * C3731 +
              C5311 * C3228 + C5308 * C3233) *
                 C50752 +
             (C5313 * C21348 + C5310 * C21350 + C5312 * C3725 + C5309 * C3729 +
              C5311 * C3224 + C5308 * C3227) *
                 C1109) *
                C50771 * C50945 +
            ((C23542 + C23541 + C23540) * C50752 +
             (C23539 + C23538 + C23537) * C1109) *
                C50771 * C17290) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1109 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C50752) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C1109 +
            (C21950 + C21951 + C21952) * C50752) *
               C50771 * C50945) *
              C1853 -
          (((C22603 + C22604 + C22605) * C50752 +
            (C22606 + C22607 + C22608) * C1109) *
               C50771 * C50945 +
           ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
             C5311 * C473 + C5308 * C492) *
                C50752 +
            (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
             C5311 * C463 + C5308 * C474) *
                C1109) *
               C50771 * C17290) *
              C1854 +
          (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
             C5313 * C5696 + C5310 * C5699) *
                C1109 +
            (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
             C5313 * C5700 + C5310 * C5705) *
                C50752) *
               C50771 * C17290 +
           ((C23033 + C23034 + C23035) * C1109 +
            (C23036 + C23037 + C23038) * C50752) *
               C50771 * C50945) *
              C1855 -
          (((C5313 * C23933 + C5310 * C23935 + C5312 * C6682 + C5309 * C6685 +
             C5311 * C4718 + C5308 * C4723) *
                C50752 +
            (C5313 * C23932 + C5310 * C23934 + C5312 * C6679 + C5309 * C6683 +
             C5311 * C4711 + C5308 * C4719) *
                C1109) *
               C50771 * C50945 +
           ((C5313 * C7566 + C5310 * C7569 + C5312 * C5700 + C5309 * C5705 +
             C5311 * C1867 + C5308 * C1872) *
                C50752 +
            (C5313 * C7563 + C5310 * C7567 + C5312 * C5696 + C5309 * C5699 +
             C5311 * C1860 + C5308 * C1868) *
                C1109) *
               C50771 * C17290) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C49770 +
            (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
            C172 * C50757) *
               C50771 * C19889 +
           (C3907 + C3908 - C3909 - C3910) * C50771 * C19890 + C20831 * C19891 +
           C20839 * C19892) *
              C51083 +
          ((C527 * C49763 -
            ((C117 * C473 + C50907 * C492) * C51021 +
             (C117 * C463 + C50907 * C474) * C49770) +
            C528 * C50757) *
               C50771 * C19889 +
           (C4134 - (C4135 + C4136) + C4137) * C50771 * C19890 +
           (C4142 - (C4143 + C4144) + C4145) * C50771 * C19891 +
           (C20970 - (C20971 + C20972) + C20973) * C50771 * C19892) *
              C51084 +
          (((C117 * C467 + C50907 * C482) * C49770 +
            (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
            C534 * C50757) *
               C50771 * C19889 +
           (C3753 * C49770 + C3754 * C51021 - C2705 * C49763 - C2706 * C50757) *
               C50771 * C19890 +
           (C3755 * C49770 + C3756 * C51021 - C2707 * C49763 - C2708 * C50757) *
               C50771 * C19891 +
           (C20729 * C49770 + C20730 * C51021 -
            (C117 * C3724 + C50907 * C3727) * C49763 -
            (C117 * C3726 + C50907 * C3730) * C50757) *
               C50771 * C19892) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C17287 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C17288 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C3907 + C3908 - C3909 - C3910) * C17287 +
            (C3911 + C3912 - C3913 - C3914) * C17288 +
            (C9514 + C9515 - C9516 - C9517) * C17289) *
               C50945) *
              C51083 +
          (((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C17287 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C17288 +
            (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                C17289) *
               C17290 +
           ((C4134 - (C4135 + C4136) + C4137) * C17287 +
            (C4138 - (C4139 + C4140) + C4141) * C17288 +
            (C9716 - (C9717 + C9718) + C9719) * C17289) *
               C50945) *
              C51084 +
          ((((C117 * C467 + C50907 * C482) * C49770 +
             (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
             C534 * C50757) *
                C17287 +
            (C533 * C49770 + C534 * C51021 - C535 * C49763 - C536 * C50757) *
                C17288 +
            (C535 * C49770 + C536 * C51021 - C537 * C49763 - C538 * C50757) *
                C17289) *
               C17290 +
           ((C3753 * C49770 + C3754 * C51021 - C2705 * C49763 -
             C2706 * C50757) *
                C17287 +
            (C2705 * C49770 + C2706 * C51021 - C8464 * C49763 -
             C8465 * C50757) *
                C17288 +
            (C8464 * C49770 + C8465 * C51021 -
             (C117 * C1224 + C50907 * C1229) * C49763 -
             (C117 * C1228 + C50907 * C1236) * C50757) *
                C17289) *
               C50945) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C49770 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C51021 -
            (C5351 + C5352 + C5353) * C49763 -
            (C5354 + C5355 + C5356) * C50757) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C49770 +
            (C21950 + C21951 + C21952) * C51021 -
            (C5541 + C5540 + C5539) * C49763 -
            (C5544 + C5543 + C5542) * C50757) *
               C50771 * C50945) *
              C51083 +
          (((C5733 + C5734 + C5735) * C49763 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C51021 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C49770) +
            (C5736 + C5737 + C5738) * C50757) *
               C50771 * C17290 +
           ((C6285 + C6284 + C6283) * C49763 -
            ((C22603 + C22604 + C22605) * C51021 +
             (C22606 + C22607 + C22608) * C49770) +
            (C6288 + C6287 + C6286) * C50757) *
               C50771 * C50945) *
              C51084 +
          (((C5311 * C467 + C5308 * C482 + C5312 * C1860 + C5309 * C1868 +
             C5313 * C5696 + C5310 * C5699) *
                C49770 +
            (C5311 * C483 + C5308 * C497 + C5312 * C1867 + C5309 * C1872 +
             C5313 * C5700 + C5310 * C5705) *
                C51021 -
            (C5739 + C5740 + C5741) * C49763 -
            (C5742 + C5743 + C5744) * C50757) *
               C50771 * C17290 +
           ((C23033 + C23034 + C23035) * C49770 +
            (C23036 + C23037 + C23038) * C51021 -
            (C5313 * C6678 + C5310 * C6681 + C5312 * C4710 + C5309 * C4717 +
             C5311 * C1226 + C5308 * C1233) *
                C49763 -
            (C5313 * C6680 + C5310 * C6684 + C5312 * C4716 + C5309 * C4722 +
             C5311 * C1232 + C5308 * C1238) *
                C50757) *
               C50771 * C50945) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C17287 +
             (C171 * C1109 + C172 * C50752) * C17288 +
             (C173 * C1109 + C174 * C50752) * C17289) *
                C17290 +
            ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
             (C9212 + C9213) * C17289) *
                C50945) *
               C1687 -
           (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
             (C3739 + C3740) * C17287) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C17289 +
             (C528 * C50752 + C527 * C1109) * C17288 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C17287) *
                C17290) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
             (C9365 + C9364) * C17289) *
                C17290 +
            ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
             (C9866 + C9867) * C17289) *
                C50945) *
               C50874 -
           (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
             (C3552 + C3551) * C17287) *
                C50945 +
            ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
             (C3548 + C3547) * C17287) *
                C17290) *
               C1687) *
              C281 +
          (((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
                C17290 +
            ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
             (C9216 + C9217) * C17289) *
                C50945) *
               C1687 -
           ((((C117 * C3232 + C50907 * C3235) * C50752 +
              (C117 * C3226 + C50907 * C3231) * C1109) *
                 C17289 +
             (C4311 + C4310) * C17288 + (C4318 + C4317) * C17287) *
                C50945 +
            ((C9867 + C9866) * C17289 + C4304 * C17288 + C4305 * C17287) *
                C17290) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C17287 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C17288 +
            (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C17289) *
               C17290 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C17287 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C17288 +
            (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C17289) *
               C50945) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C17287 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C17288 +
            (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
             C763 * C1037 - C764 * C1032) *
                C17289) *
               C17290 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C17287 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C17288 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50907 * C907) * C1037 -
             (C117 * C908 + C50907 * C913) * C1032) *
                C17289) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50771 * C19889 +
           (C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C50771 * C19890 +
           (C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C50771 * C19891 +
           (C20533 + C20534 - C20535 - C20536 + C20537 + C20538) * C50771 *
               C19892) *
              C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50907 * C492) * C1030 +
             (C117 * C463 + C50907 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C50771 * C19889 +
           (C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
            C929 * C1037 - C930 * C1032) *
               C50771 * C19890 +
           (C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
            C3029 * C1037 - C3030 * C1032) *
               C50771 * C19891 +
           (C3265 * C1036 - (C4315 * C1030 + C4314 * C1035) + C3266 * C1031 -
            (C117 * C3226 + C50907 * C3231) * C1037 -
            (C117 * C3232 + C50907 * C3235) * C1032) *
               C50771 * C19892) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C50771 * C19889 +
            (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
            C20617 * C19892) *
               C1687 -
           (C21082 * C19892 + C21077 * C19891 +
            (C3739 + C3740) * C50771 * C19890 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C50771 * C19889) *
               C50874) *
              C280 +
          (((C3740 + C3739) * C50771 * C19889 +
            (C3736 + C3735) * C50771 * C19890 +
            (C4317 + C4318) * C50771 * C19891 +
            (C21085 + C21086) * C50771 * C19892) *
               C50874 -
           (C20618 * C19892 + C20612 * C19891 +
            (C3552 + C3551) * C50771 * C19890 +
            (C3548 + C3547) * C50771 * C19889) *
               C1687) *
              C281 +
          ((C20609 * C19889 + C20617 * C19890 +
            (C3575 + C3576) * C50771 * C19891 +
            (C20621 + C20622) * C50771 * C19892) *
               C1687 -
           (((C117 * C21072 + C50907 * C21074) * C50752 +
             (C117 * C21071 + C50907 * C21073) * C1109) *
                C50771 * C19892 +
            (C21086 + C21085) * C50771 * C19891 + C21082 * C19890 +
            C21077 * C19889) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
             C5313 * C467 + C5310 * C482) *
                C1035 +
            (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
             C5313 * C483 + C5310 * C497) *
                C1030 -
            (C5351 + C5352 + C5353) * C1036 - (C5354 + C5355 + C5356) * C1031 +
            (C5357 + C5358 + C5359) * C1037 + (C5360 + C5361 + C5362) * C1032) *
               C50771 * C17290 +
           ((C21947 + C21948 + C21949) * C1035 +
            (C21950 + C21951 + C21952) * C1030 -
            (C5541 + C5540 + C5539) * C1036 - (C5544 + C5543 + C5542) * C1031 +
            (C5905 + C5904 + C5903) * C1037 + (C5908 + C5907 + C5906) * C1032) *
               C50771 * C50945) *
              C1687 +
          (((C5733 + C5734 + C5735) * C1036 -
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C1030 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1035) +
            (C5736 + C5737 + C5738) * C1031 - (C6067 + C6068 + C6069) * C1037 -
            (C6070 + C6071 + C6072) * C1032) *
               C50771 * C17290 +
           ((C6285 + C6284 + C6283) * C1036 -
            ((C22603 + C22604 + C22605) * C1030 +
             (C22606 + C22607 + C22608) * C1035) +
            (C6288 + C6287 + C6286) * C1031 -
            (C5313 * C6266 + C5310 * C6267 + C5312 * C1225 + C5309 * C1231 +
             C5311 * C896 + C5308 * C903) *
                C1037 -
            (C5313 * C6268 + C5310 * C6269 + C5312 * C1230 + C5309 * C1237 +
             C5311 * C904 + C5308 * C911) *
                C1032) *
               C50771 * C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5311 * C122 + C5308 * C129 + C5312 * C463 + C5309 * C474 +
              C5313 * C467 + C5310 * C482) *
                 C1109 +
             (C5311 * C130 + C5308 * C143 + C5312 * C473 + C5309 * C492 +
              C5313 * C483 + C5310 * C497) *
                 C50752) *
                C50771 * C17290 +
            ((C21947 + C21948 + C21949) * C1109 +
             (C21950 + C21951 + C21952) * C50752) *
                C50771 * C50945) *
               C1687 -
           (((C22603 + C22604 + C22605) * C50752 +
             (C22606 + C22607 + C22608) * C1109) *
                C50771 * C50945 +
            ((C5313 * C1867 + C5310 * C1872 + C5312 * C483 + C5309 * C497 +
              C5311 * C473 + C5308 * C492) *
                 C50752 +
             (C5313 * C1860 + C5310 * C1868 + C5312 * C467 + C5309 * C482 +
              C5311 * C463 + C5308 * C474) *
                 C1109) *
                C50771 * C17290) *
               C50874) *
              C280 +
          ((((C22608 + C22607 + C22606) * C1109 +
             (C22605 + C22604 + C22603) * C50752) *
                C50771 * C17290 +
            ((C23537 + C23538 + C23539) * C1109 +
             (C23540 + C23541 + C23542) * C50752) *
                C50771 * C50945) *
               C50874 -
           (((C21953 + C21954 + C21955) * C50752 +
             (C21956 + C21957 + C21958) * C1109) *
                C50771 * C50945 +
            ((C21952 + C21951 + C21950) * C50752 +
             (C21949 + C21948 + C21947) * C1109) *
                C50771 * C17290) *
               C1687) *
              C281 +
          ((((C21958 + C21957 + C21956) * C1109 +
             (C21955 + C21954 + C21953) * C50752) *
                C50771 * C17290 +
            ((C22865 + C22866 + C22867) * C1109 +
             (C22868 + C22869 + C22870) * C50752) *
                C50771 * C50945) *
               C1687 -
           (((C5313 * C21349 + C5310 * C21351 + C5312 * C3728 + C5309 * C3731 +
              C5311 * C3228 + C5308 * C3233) *
                 C50752 +
             (C5313 * C21348 + C5310 * C21350 + C5312 * C3725 + C5309 * C3729 +
              C5311 * C3224 + C5308 * C3227) *
                 C1109) *
                C50771 * C50945 +
            ((C23542 + C23541 + C23540) * C50752 +
             (C23539 + C23538 + C23537) * C1109) *
                C50771 * C17290) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C641 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51077 -
             (C10878 + C10879) * C642 - (C10880 + C10881) * C51078 +
             C10894 * C643 + C10895 * C638) *
                C51028 +
            ((C10879 + C10878) * C641 + (C10881 + C10880) * C51077 -
             (C10883 + C10882) * C642 - (C10885 + C10884) * C51078 +
             (C10887 + C10886) * C643 + (C10889 + C10888) * C638) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C641 + (C13934 + C13935) * C51077 -
             C13908 * C642 - C13909 * C51078 + C14344 * C643 + C14345 * C638) *
                C51028 +
            (C13910 * C641 + C13911 * C51077 - C11432 * C642 - C11433 * C51078 +
             (C11443 + C11442) * C643 + (C11445 + C11444) * C638) *
                C50776) *
               C50945) *
              C50810 * C51036 +
          (((C13910 * C642 -
             ((C13935 + C13934) * C51077 + (C13933 + C13932) * C641) +
             C13911 * C51078 - C11432 * C643 - C11433 * C638) *
                C51028 +
            (C14344 * C642 - (C13909 * C51077 + C13908 * C641) +
             C14345 * C51078 - (C11442 + C11443) * C643 -
             (C11444 + C11445) * C638) *
                C50776) *
               C17290 +
           ((C13912 * C642 -
             ((C13936 + C13937) * C51077 + (C13938 + C13939) * C641) +
             C13921 * C51078 - (C11088 + C11089) * C643 -
             (C11090 + C11091) * C638) *
                C51028 +
            ((C11089 + C11088) * C642 - (C13922 * C51077 + C13923 * C641) +
             (C11091 + C11090) * C51078 -
             (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                 C643 -
             (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                 C638) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C283 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C278 -
              (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                 C51028 +
             ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
              (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                 C50776) *
                C17290 +
            (((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
              C13908 * C284 - C13909 * C50757) *
                 C51028 +
             (C13910 * C283 + C13911 * C278 - C11432 * C284 - C11433 * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C11270 + C11271) * C284 -
              ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                   C278 +
               (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                   C283) +
              (C11272 + C11273) * C50757) *
                 C51028 +
             ((C11274 + C11275) * C284 -
              ((C11273 + C11272) * C278 + (C11271 + C11270) * C283) +
              (C11276 + C11277) * C50757) *
                 C50776) *
                C17290 +
            ((C14798 * C284 -
              ((C14818 + C14819) * C278 + (C14820 + C14821) * C283) +
              C14807 * C50757) *
                 C51028 +
             ((C11821 + C11820) * C284 - (C14808 * C278 + C14809 * C283) +
              (C11823 + C11822) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C51036 +
          ((((C13910 * C284 -
              ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
              C13911 * C50757) *
                 C51028 +
             (C14344 * C284 - (C13909 * C278 + C13908 * C283) +
              C14345 * C50757) *
                 C50776) *
                C17290 +
            ((C13912 * C284 -
              ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
              C13921 * C50757) *
                 C51028 +
             ((C11089 + C11088) * C284 - (C13922 * C278 + C13923 * C283) +
              (C11091 + C11090) * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C14821 + C14820) * C283 + (C14819 + C14818) * C278 -
              C14809 * C284 - C14808 * C50757) *
                 C51028 +
             (C14798 * C283 + C14807 * C278 - (C11820 + C11821) * C284 -
              (C11822 + C11823) * C50757) *
                 C50776) *
                C17290 +
            (((C16022 + C16023) * C283 + (C16024 + C16025) * C278 -
              (C14822 + C14823) * C284 - (C14824 + C14825) * C50757) *
                 C51028 +
             ((C14823 + C14822) * C283 + (C14825 + C14824) * C278 -
              (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
               C51050 * C1580) *
                  C284 -
              (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
               C51050 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C283 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                C51028 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
             C13908 * C284 - C13909 * C50757) *
                C51028 +
            (C13910 * C283 + C13911 * C278 - C11432 * C284 - C11433 * C50757) *
                C50776) *
               C50945) *
              C50810 * C280 +
          (((C13910 * C284 -
             ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
             C13911 * C50757) *
                C51028 +
            (C14344 * C284 - (C13909 * C278 + C13908 * C283) +
             C14345 * C50757) *
                C50776) *
               C17290 +
           ((C13912 * C284 -
             ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
             C13921 * C50757) *
                C51028 +
            ((C11089 + C11088) * C284 - (C13922 * C278 + C13923 * C283) +
             (C11091 + C11090) * C50757) *
                C50776) *
               C50945) *
              C50810 * C281 +
          ((((C13939 + C13938) * C283 + (C13937 + C13936) * C278 -
             C13923 * C284 - C13922 * C50757) *
                C51028 +
            (C13912 * C283 + C13921 * C278 - (C11088 + C11089) * C284 -
             (C11090 + C11091) * C50757) *
                C50776) *
               C17290 +
           (((C15158 + C15159) * C283 + (C15160 + C15161) * C278 -
             (C13940 + C13941) * C284 - (C13942 + C13943) * C50757) *
                C51028 +
            ((C13941 + C13940) * C283 + (C13943 + C13942) * C278 -
             (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
              C51050 * C1117) *
                 C284 -
             (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
              C51050 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C118 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C106 -
            (C10878 + C10879) * C119 - (C10880 + C10881) * C107 +
            C10894 * C120 + C10895 * C108 - C10896 * C121 - C10897 * C109) *
               C51028 +
           ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
            (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
            (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
            (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
               C50776) *
              C17290 +
          (((C13932 + C13933) * C118 + (C13934 + C13935) * C106 -
            C13908 * C119 - C13909 * C107 + C14344 * C120 + C14345 * C108 -
            (C11442 + C11443) * C121 - (C11444 + C11445) * C109) *
               C51028 +
           (C13910 * C118 + C13911 * C106 - C11432 * C119 - C11433 * C107 +
            (C11443 + C11442) * C120 + (C11445 + C11444) * C108 -
            (C10844 * C898 + C50971 * C907 + C10843 * C289 + C51050 * C303) *
                C121 -
            (C10844 * C908 + C50971 * C913 + C10843 * C304 + C51050 * C319) *
                C109) *
               C50776) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C283 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                C51028 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
             C13908 * C284 - C13909 * C50757) *
                C51028 +
            (C13910 * C283 + C13911 * C278 - C11432 * C284 - C11433 * C50757) *
                C50776) *
               C50945) *
              C459 +
          ((((C11270 + C11271) * C284 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C278 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C283) +
             (C11272 + C11273) * C50757) *
                C51028 +
            ((C11274 + C11275) * C284 -
             ((C11273 + C11272) * C278 + (C11271 + C11270) * C283) +
             (C11276 + C11277) * C50757) *
                C50776) *
               C17290 +
           ((C14798 * C284 -
             ((C14818 + C14819) * C278 + (C14820 + C14821) * C283) +
             C14807 * C50757) *
                C51028 +
            ((C11821 + C11820) * C284 - (C14808 * C278 + C14809 * C283) +
             (C11823 + C11822) * C50757) *
                C50776) *
               C50945) *
              C460 +
          ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C283 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C278 -
             (C11278 + C11279) * C284 - (C11280 + C11281) * C50757) *
                C51028 +
            ((C11279 + C11278) * C283 + (C11281 + C11280) * C278 -
             (C11282 + C11283) * C284 - (C11284 + C11285) * C50757) *
                C50776) *
               C17290 +
           (((C15364 + C15365) * C283 + (C15366 + C15367) * C278 -
             (C14146 + C14147) * C284 - (C14148 + C14149) * C50757) *
                C51028 +
            ((C14147 + C14146) * C283 + (C14149 + C14148) * C278 -
             (C10844 * C6266 + C50971 * C6267 + C10843 * C1225 +
              C51050 * C1231) *
                 C284 -
             (C10844 * C6268 + C50971 * C6269 + C10843 * C1230 +
              C51050 * C1237) *
                 C50757) *
                C50776) *
               C50945) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C641 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51077 -
             (C10878 + C10879) * C642 - (C10880 + C10881) * C51078 +
             C10894 * C643 + C10895 * C638) *
                C51028 +
            ((C10879 + C10878) * C641 + (C10881 + C10880) * C51077 -
             (C10883 + C10882) * C642 - (C10885 + C10884) * C51078 +
             (C10887 + C10886) * C643 + (C10889 + C10888) * C638) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C641 + (C13934 + C13935) * C51077 -
             C13908 * C642 - C13909 * C51078 + C14344 * C643 + C14345 * C638) *
                C51028 +
            (C13910 * C641 + C13911 * C51077 - C11432 * C642 - C11433 * C51078 +
             (C11443 + C11442) * C643 + (C11445 + C11444) * C638) *
                C50776) *
               C50945) *
              C51037 +
          ((((C11270 + C11271) * C642 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C51077 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C641) +
             (C11272 + C11273) * C51078 - C11592 * C643 - C11593 * C638) *
                C51028 +
            ((C11274 + C11275) * C642 -
             ((C11273 + C11272) * C51077 + (C11271 + C11270) * C641) +
             (C11276 + C11277) * C51078 - (C11602 + C11603) * C643 -
             (C11604 + C11605) * C638) *
                C50776) *
               C17290 +
           ((C14798 * C642 -
             ((C14818 + C14819) * C51077 + (C14820 + C14821) * C641) +
             C14807 * C51078 - (C11820 + C11821) * C643 -
             (C11822 + C11823) * C638) *
                C51028 +
            ((C11821 + C11820) * C642 - (C14808 * C51077 + C14809 * C641) +
             (C11823 + C11822) * C51078 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C643 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C638) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                C118 +
            (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                C106 -
            (C10878 + C10879) * C119 - (C10880 + C10881) * C107 +
            C10894 * C120 + C10895 * C108 - C10896 * C121 - C10897 * C109) *
               C51028 +
           ((C10879 + C10878) * C118 + (C10881 + C10880) * C106 -
            (C10883 + C10882) * C119 - (C10885 + C10884) * C107 +
            (C10887 + C10886) * C120 + (C10889 + C10888) * C108 -
            (C10890 + C10891) * C121 - (C10892 + C10893) * C109) *
               C50776) *
              C17290 +
          (((C13932 + C13933) * C118 + (C13934 + C13935) * C106 -
            C13908 * C119 - C13909 * C107 + C14344 * C120 + C14345 * C108 -
            (C11442 + C11443) * C121 - (C11444 + C11445) * C109) *
               C51028 +
           (C13910 * C118 + C13911 * C106 - C11432 * C119 - C11433 * C107 +
            (C11443 + C11442) * C120 + (C11445 + C11444) * C108 -
            (C10844 * C898 + C50971 * C907 + C10843 * C289 + C51050 * C303) *
                C121 -
            (C10844 * C908 + C50971 * C913 + C10843 * C304 + C51050 * C319) *
                C109) *
               C50776) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C283 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C278 -
             (C10878 + C10879) * C284 - (C10880 + C10881) * C50757) *
                C51028 +
            ((C10879 + C10878) * C283 + (C10881 + C10880) * C278 -
             (C10883 + C10882) * C284 - (C10885 + C10884) * C50757) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C283 + (C13934 + C13935) * C278 -
             C13908 * C284 - C13909 * C50757) *
                C51028 +
            (C13910 * C283 + C13911 * C278 - C11432 * C284 - C11433 * C50757) *
                C50776) *
               C50945) *
              C50810 * C280 +
          (((C13910 * C284 -
             ((C13935 + C13934) * C278 + (C13933 + C13932) * C283) +
             C13911 * C50757) *
                C51028 +
            (C14344 * C284 - (C13909 * C278 + C13908 * C283) +
             C14345 * C50757) *
                C50776) *
               C17290 +
           ((C13912 * C284 -
             ((C13936 + C13937) * C278 + (C13938 + C13939) * C283) +
             C13921 * C50757) *
                C51028 +
            ((C11089 + C11088) * C284 - (C13922 * C278 + C13923 * C283) +
             (C11091 + C11090) * C50757) *
                C50776) *
               C50945) *
              C50810 * C281 +
          ((((C13939 + C13938) * C283 + (C13937 + C13936) * C278 -
             C13923 * C284 - C13922 * C50757) *
                C51028 +
            (C13912 * C283 + C13921 * C278 - (C11088 + C11089) * C284 -
             (C11090 + C11091) * C50757) *
                C50776) *
               C17290 +
           (((C15158 + C15159) * C283 + (C15160 + C15161) * C278 -
             (C13940 + C13941) * C284 - (C13942 + C13943) * C50757) *
                C51028 +
            ((C13941 + C13940) * C283 + (C13943 + C13942) * C278 -
             (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
              C51050 * C1117) *
                 C284 -
             (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
              C51050 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C49770 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51021 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                C51028 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
             C13908 * C49763 - C13909 * C50757) *
                C51028 +
            (C13910 * C49770 + C13911 * C51021 - C11432 * C49763 -
             C11433 * C50757) *
                C50776) *
               C50945) *
              C50810 * C51081 +
          (((C13910 * C49763 -
             ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
             C13911 * C50757) *
                C51028 +
            (C14344 * C49763 - (C13909 * C51021 + C13908 * C49770) +
             C14345 * C50757) *
                C50776) *
               C17290 +
           ((C13912 * C49763 -
             ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
             C13921 * C50757) *
                C51028 +
            ((C11089 + C11088) * C49763 - (C13922 * C51021 + C13923 * C49770) +
             (C11091 + C11090) * C50757) *
                C50776) *
               C50945) *
              C50810 * C51082 +
          ((((C13939 + C13938) * C49770 + (C13937 + C13936) * C51021 -
             C13923 * C49763 - C13922 * C50757) *
                C51028 +
            (C13912 * C49770 + C13921 * C51021 - (C11088 + C11089) * C49763 -
             (C11090 + C11091) * C50757) *
                C50776) *
               C17290 +
           (((C15158 + C15159) * C49770 + (C15160 + C15161) * C51021 -
             (C13940 + C13941) * C49763 - (C13942 + C13943) * C50757) *
                C51028 +
            ((C13941 + C13940) * C49770 + (C13943 + C13942) * C51021 -
             (C10844 * C3226 + C50971 * C3231 + C10843 * C1111 +
              C51050 * C1117) *
                 C49763 -
             (C10844 * C3232 + C50971 * C3235 + C10843 * C1116 +
              C51050 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C17290 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C51028 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C51037 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) *
                 C51028) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C51028) *
                C17290) *
               C50874) *
              C51081 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C51028 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C17290 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C51028 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) *
                 C51028) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) *
                 C51028) *
                C17290) *
               C51037) *
              C51082 +
          (((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C51028 +
             (C13912 * C1109 + C13921 * C50752) * C50776) *
                C17290 +
            (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C51028 +
             ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) *
                 C50776) *
                C50945) *
               C51037 -
           ((((C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
               C51050 * C3234) *
                  C50752 +
              (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
               C51050 * C3229) *
                  C1109) *
                 C50776 +
             ((C10844 * C3728 + C50971 * C3731 + C10843 * C3228 +
               C51050 * C3233) *
                  C50752 +
              (C10844 * C3725 + C50971 * C3729 + C10843 * C3224 +
               C51050 * C3227) *
                  C1109) *
                 C51028) *
                C50945 +
            (((C14824 + C14825) * C50752 + (C14822 + C14823) * C1109) * C50776 +
             ((C16025 + C16024) * C50752 + (C16023 + C16022) * C1109) *
                 C51028) *
                C17290) *
               C50874) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C51028 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C50776) *
               C17290 +
           (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C51028 +
            (C13910 * C1109 + C13911 * C50752) * C50776) *
               C50945) *
              C50810 * C1105 -
          (((C13922 * C50752 + C13923 * C1109) * C50776 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C51028) *
               C50945 +
           ((C13909 * C50752 + C13908 * C1109) * C50776 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C51028) *
               C17290) *
              C50810 * C1106 +
          ((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C51028 +
            (C13912 * C1109 + C13921 * C50752) * C50776) *
               C17290 +
           (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C51028 +
            ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) * C50776) *
               C50945) *
              C50810 * C1107 -
          ((((C10844 * C4297 + C50971 * C4301 + C10843 * C2457 +
              C51050 * C2461) *
                 C50752 +
             (C10844 * C4295 + C50971 * C4298 + C10843 * C2452 +
              C51050 * C2456) *
                 C1109) *
                C50776 +
            ((C10844 * C4299 + C50971 * C4302 + C10843 * C2455 +
              C51050 * C2460) *
                 C50752 +
             (C10844 * C4296 + C50971 * C4300 + C10843 * C2451 +
              C51050 * C2454) *
                 C1109) *
                C51028) *
               C50945 +
           (((C13942 + C13943) * C50752 + (C13940 + C13941) * C1109) * C50776 +
            ((C15161 + C15160) * C50752 + (C15159 + C15158) * C1109) * C51028) *
               C17290) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1035 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C1030 -
             (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
             C10894 * C1037 + C10895 * C1032) *
                C51028 +
            ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
             (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
             (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
             C13908 * C1036 - C13909 * C1031 + C14344 * C1037 +
             C14345 * C1032) *
                C51028 +
            (C13910 * C1035 + C13911 * C1030 - C11432 * C1036 - C11433 * C1031 +
             (C11443 + C11442) * C1037 + (C11445 + C11444) * C1032) *
                C50776) *
               C50945) *
              C50810 * C1033 +
          (((C13910 * C1036 -
             ((C13935 + C13934) * C1030 + (C13933 + C13932) * C1035) +
             C13911 * C1031 - C11432 * C1037 - C11433 * C1032) *
                C51028 +
            (C14344 * C1036 - (C13909 * C1030 + C13908 * C1035) +
             C14345 * C1031 - (C11442 + C11443) * C1037 -
             (C11444 + C11445) * C1032) *
                C50776) *
               C17290 +
           ((C13912 * C1036 -
             ((C13936 + C13937) * C1030 + (C13938 + C13939) * C1035) +
             C13921 * C1031 - (C11088 + C11089) * C1037 -
             (C11090 + C11091) * C1032) *
                C51028 +
            ((C11089 + C11088) * C1036 - (C13922 * C1030 + C13923 * C1035) +
             (C11091 + C11090) * C1031 -
             (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                 C1037 -
             (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                 C1032) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C17290 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C51028 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C459 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) *
                 C51028) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C51028) *
                C17290) *
               C460 +
           ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 +
               C50971 * C1868) *
                  C1109 +
              (C10843 * C483 + C51050 * C497 + C10844 * C1867 +
               C50971 * C1872) *
                  C50752) *
                 C51028 +
             ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) *
                 C50776) *
                C17290 +
            (((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C51028 +
             ((C14147 + C14146) * C1109 + (C14149 + C14148) * C50752) *
                 C50776) *
                C50945) *
               C461) *
              C1033 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C51028 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C17290 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C51028 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C460 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) *
                 C51028) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) *
                 C51028) *
                C17290) *
               C459 -
           ((((C10844 * C4712 + C50971 * C4720 + C10843 * C2684 +
               C51050 * C2688) *
                  C50752 +
              (C10844 * C4708 + C50971 * C4713 + C10843 * C2679 +
               C51050 * C2683) *
                  C1109) *
                 C50776 +
             ((C10844 * C4714 + C50971 * C4721 + C10843 * C2682 +
               C51050 * C2687) *
                  C50752 +
              (C10844 * C4709 + C50971 * C4715 + C10843 * C2678 +
               C51050 * C2681) *
                  C1109) *
                 C51028) *
                C50945 +
            (((C14148 + C14149) * C50752 + (C14146 + C14147) * C1109) * C50776 +
             ((C15367 + C15366) * C50752 + (C15365 + C15364) * C1109) *
                 C51028) *
                C17290) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C49770 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C51021 -
              (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                 C51028 +
             ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
              (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                 C50776) *
                C17290 +
            (((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
              C13908 * C49763 - C13909 * C50757) *
                 C51028 +
             (C13910 * C49770 + C13911 * C51021 - C11432 * C49763 -
              C11433 * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C11270 + C11271) * C49763 -
              ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                   C51021 +
               (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                   C49770) +
              (C11272 + C11273) * C50757) *
                 C51028 +
             ((C11274 + C11275) * C49763 -
              ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
              (C11276 + C11277) * C50757) *
                 C50776) *
                C17290 +
            ((C14798 * C49763 -
              ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
              C14807 * C50757) *
                 C51028 +
             ((C11821 + C11820) * C49763 - (C14808 * C51021 + C14809 * C49770) +
              (C11823 + C11822) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C1033 +
          ((((C13910 * C49763 -
              ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
              C13911 * C50757) *
                 C51028 +
             (C14344 * C49763 - (C13909 * C51021 + C13908 * C49770) +
              C14345 * C50757) *
                 C50776) *
                C17290 +
            ((C13912 * C49763 -
              ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
              C13921 * C50757) *
                 C51028 +
             ((C11089 + C11088) * C49763 - (C13922 * C51021 + C13923 * C49770) +
              (C11091 + C11090) * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C14821 + C14820) * C49770 + (C14819 + C14818) * C51021 -
              C14809 * C49763 - C14808 * C50757) *
                 C51028 +
             (C14798 * C49770 + C14807 * C51021 - (C11820 + C11821) * C49763 -
              (C11822 + C11823) * C50757) *
                 C50776) *
                C17290 +
            (((C16022 + C16023) * C49770 + (C16024 + C16025) * C51021 -
              (C14822 + C14823) * C49763 - (C14824 + C14825) * C50757) *
                 C51028 +
             ((C14823 + C14822) * C49770 + (C14825 + C14824) * C51021 -
              (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
               C51050 * C1580) *
                  C49763 -
              (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
               C51050 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1035 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C1030 -
             (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
             C10894 * C1037 + C10895 * C1032) *
                C51028 +
            ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
             (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
             (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
             C13908 * C1036 - C13909 * C1031 + C14344 * C1037 +
             C14345 * C1032) *
                C51028 +
            (C13910 * C1035 + C13911 * C1030 - C11432 * C1036 - C11433 * C1031 +
             (C11443 + C11442) * C1037 + (C11445 + C11444) * C1032) *
                C50776) *
               C50945) *
              C50810 * C1033 +
          (((C13910 * C1036 -
             ((C13935 + C13934) * C1030 + (C13933 + C13932) * C1035) +
             C13911 * C1031 - C11432 * C1037 - C11433 * C1032) *
                C51028 +
            (C14344 * C1036 - (C13909 * C1030 + C13908 * C1035) +
             C14345 * C1031 - (C11442 + C11443) * C1037 -
             (C11444 + C11445) * C1032) *
                C50776) *
               C17290 +
           ((C13912 * C1036 -
             ((C13936 + C13937) * C1030 + (C13938 + C13939) * C1035) +
             C13921 * C1031 - (C11088 + C11089) * C1037 -
             (C11090 + C11091) * C1032) *
                C51028 +
            ((C11089 + C11088) * C1036 - (C13922 * C1030 + C13923 * C1035) +
             (C11091 + C11090) * C1031 -
             (C10844 * C1573 + C50971 * C1578 + C10843 * C293 + C51050 * C311) *
                 C1037 -
             (C10844 * C1577 + C50971 * C1585 + C10843 * C312 + C51050 * C323) *
                 C1032) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C51028 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C50776) *
               C17290 +
           (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C51028 +
            (C13910 * C1109 + C13911 * C50752) * C50776) *
               C50945) *
              C50810 * C1105 -
          (((C13922 * C50752 + C13923 * C1109) * C50776 +
            ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) * C51028) *
               C50945 +
           ((C13909 * C50752 + C13908 * C1109) * C50776 +
            ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) * C51028) *
               C17290) *
              C50810 * C1106 +
          ((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C51028 +
            (C13912 * C1109 + C13921 * C50752) * C50776) *
               C17290 +
           (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C51028 +
            ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) * C50776) *
               C50945) *
              C50810 * C1107 -
          ((((C10844 * C4297 + C50971 * C4301 + C10843 * C2457 +
              C51050 * C2461) *
                 C50752 +
             (C10844 * C4295 + C50971 * C4298 + C10843 * C2452 +
              C51050 * C2456) *
                 C1109) *
                C50776 +
            ((C10844 * C4299 + C50971 * C4302 + C10843 * C2455 +
              C51050 * C2460) *
                 C50752 +
             (C10844 * C4296 + C50971 * C4300 + C10843 * C2451 +
              C51050 * C2454) *
                 C1109) *
                C51028) *
               C50945 +
           (((C13942 + C13943) * C50752 + (C13940 + C13941) * C1109) * C50776 +
            ((C15161 + C15160) * C50752 + (C15159 + C15158) * C1109) * C51028) *
               C17290) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C49770 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C51021 -
              (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                 C51028 +
             ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
              (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                 C50776) *
                C17290 +
            (((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
              C13908 * C49763 - C13909 * C50757) *
                 C51028 +
             (C13910 * C49770 + C13911 * C51021 - C11432 * C49763 -
              C11433 * C50757) *
                 C50776) *
                C50945) *
               C1687 +
           ((((C11270 + C11271) * C49763 -
              ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                   C51021 +
               (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                   C49770) +
              (C11272 + C11273) * C50757) *
                 C51028 +
             ((C11274 + C11275) * C49763 -
              ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
              (C11276 + C11277) * C50757) *
                 C50776) *
                C17290 +
            ((C14798 * C49763 -
              ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
              C14807 * C50757) *
                 C51028 +
             ((C11821 + C11820) * C49763 - (C14808 * C51021 + C14809 * C49770) +
              (C11823 + C11822) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C51036 +
          ((((C13910 * C49763 -
              ((C13935 + C13934) * C51021 + (C13933 + C13932) * C49770) +
              C13911 * C50757) *
                 C51028 +
             (C14344 * C49763 - (C13909 * C51021 + C13908 * C49770) +
              C14345 * C50757) *
                 C50776) *
                C17290 +
            ((C13912 * C49763 -
              ((C13936 + C13937) * C51021 + (C13938 + C13939) * C49770) +
              C13921 * C50757) *
                 C51028 +
             ((C11089 + C11088) * C49763 - (C13922 * C51021 + C13923 * C49770) +
              (C11091 + C11090) * C50757) *
                 C50776) *
                C50945) *
               C1687 +
           ((((C14821 + C14820) * C49770 + (C14819 + C14818) * C51021 -
              C14809 * C49763 - C14808 * C50757) *
                 C51028 +
             (C14798 * C49770 + C14807 * C51021 - (C11820 + C11821) * C49763 -
              (C11822 + C11823) * C50757) *
                 C50776) *
                C17290 +
            (((C16022 + C16023) * C49770 + (C16024 + C16025) * C51021 -
              (C14822 + C14823) * C49763 - (C14824 + C14825) * C50757) *
                 C51028 +
             ((C14823 + C14822) * C49770 + (C14825 + C14824) * C51021 -
              (C10844 * C2680 + C50971 * C2685 + C10843 * C1574 +
               C51050 * C1580) *
                  C49763 -
              (C10844 * C2686 + C50971 * C2689 + C10843 * C1579 +
               C51050 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C17290 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C51028 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C51083 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) *
                 C51028) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C51028) *
                C17290) *
               C51084 +
           ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 +
               C50971 * C1868) *
                  C1109 +
              (C10843 * C483 + C51050 * C497 + C10844 * C1867 +
               C50971 * C1872) *
                  C50752) *
                 C51028 +
             ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) *
                 C50776) *
                C17290 +
            (((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C51028 +
             ((C14147 + C14146) * C1109 + (C14149 + C14148) * C50752) *
                 C50776) *
                C50945) *
               C2103) *
              C51036 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C51028 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C17290 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C51028 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C51084 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) *
                 C51028) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) *
                 C51028) *
                C17290) *
               C51083 -
           ((((C10844 * C4712 + C50971 * C4720 + C10843 * C2684 +
               C51050 * C2688) *
                  C50752 +
              (C10844 * C4708 + C50971 * C4713 + C10843 * C2679 +
               C51050 * C2683) *
                  C1109) *
                 C50776 +
             ((C10844 * C4714 + C50971 * C4721 + C10843 * C2682 +
               C51050 * C2687) *
                  C50752 +
              (C10844 * C4709 + C50971 * C4715 + C10843 * C2678 +
               C51050 * C2681) *
                  C1109) *
                 C51028) *
                C50945 +
            (((C14148 + C14149) * C50752 + (C14146 + C14147) * C1109) * C50776 +
             ((C15367 + C15366) * C50752 + (C15365 + C15364) * C1109) *
                 C51028) *
                C17290) *
               C2103) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C17290 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C51028 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C1687 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) *
                 C51028) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C51028) *
                C17290) *
               C50874) *
              C280 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C51028 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C17290 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C51028 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) *
                 C51028) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) *
                 C51028) *
                C17290) *
               C1687) *
              C281 +
          (((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C51028 +
             (C13912 * C1109 + C13921 * C50752) * C50776) *
                C17290 +
            (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C51028 +
             ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) *
                 C50776) *
                C50945) *
               C1687 -
           ((((C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
               C51050 * C3234) *
                  C50752 +
              (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
               C51050 * C3229) *
                  C1109) *
                 C50776 +
             ((C10844 * C3728 + C50971 * C3731 + C10843 * C3228 +
               C51050 * C3233) *
                  C50752 +
              (C10844 * C3725 + C50971 * C3729 + C10843 * C3224 +
               C51050 * C3227) *
                  C1109) *
                 C51028) *
                C50945 +
            (((C14824 + C14825) * C50752 + (C14822 + C14823) * C1109) * C50776 +
             ((C16025 + C16024) * C50752 + (C16023 + C16022) * C1109) *
                 C51028) *
                C17290) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1035 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C1030 -
             (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
             C10894 * C1037 + C10895 * C1032) *
                C51028 +
            ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
             (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
             (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
             C13908 * C1036 - C13909 * C1031 + C14344 * C1037 +
             C14345 * C1032) *
                C51028 +
            (C13910 * C1035 + C13911 * C1030 - C11432 * C1036 - C11433 * C1031 +
             (C11443 + C11442) * C1037 + (C11445 + C11444) * C1032) *
                C50776) *
               C50945) *
              C1687 +
          ((((C11270 + C11271) * C1036 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C1030 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1035) +
             (C11272 + C11273) * C1031 - C11592 * C1037 - C11593 * C1032) *
                C51028 +
            ((C11274 + C11275) * C1036 -
             ((C11273 + C11272) * C1030 + (C11271 + C11270) * C1035) +
             (C11276 + C11277) * C1031 - (C11602 + C11603) * C1037 -
             (C11604 + C11605) * C1032) *
                C50776) *
               C17290 +
           ((C14798 * C1036 -
             ((C14818 + C14819) * C1030 + (C14820 + C14821) * C1035) +
             C14807 * C1031 - (C11820 + C11821) * C1037 -
             (C11822 + C11823) * C1032) *
                C51028 +
            ((C11821 + C11820) * C1036 - (C14808 * C1030 + C14809 * C1035) +
             (C11823 + C11822) * C1031 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C1037 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C1032) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1109 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C50752) *
                C51028 +
            ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) * C50776) *
               C17290 +
           (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C51028 +
            (C13910 * C1109 + C13911 * C50752) * C50776) *
               C50945) *
              C1853 -
          (((C14808 * C50752 + C14809 * C1109) * C50776 +
            ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) * C51028) *
               C50945 +
           (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
            ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                 C50752 +
             (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                 C1109) *
                C51028) *
               C17290) *
              C1854 +
          ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C1109 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C50752) *
                C51028 +
            ((C11279 + C11278) * C1109 + (C11281 + C11280) * C50752) * C50776) *
               C17290 +
           (((C15364 + C15365) * C1109 + (C15366 + C15367) * C50752) * C51028 +
            ((C14147 + C14146) * C1109 + (C14149 + C14148) * C50752) * C50776) *
               C50945) *
              C1855 -
          ((((C10844 * C6680 + C50971 * C6684 + C10843 * C4716 +
              C51050 * C4722) *
                 C50752 +
             (C10844 * C6678 + C50971 * C6681 + C10843 * C4710 +
              C51050 * C4717) *
                 C1109) *
                C50776 +
            ((C10844 * C6682 + C50971 * C6685 + C10843 * C4718 +
              C51050 * C4723) *
                 C50752 +
             (C10844 * C6679 + C50971 * C6683 + C10843 * C4711 +
              C51050 * C4719) *
                 C1109) *
                C51028) *
               C50945 +
           (((C10844 * C5702 + C50971 * C5706 + C10843 * C1865 +
              C51050 * C1871) *
                 C50752 +
             (C10844 * C5697 + C50971 * C5701 + C10843 * C1859 +
              C51050 * C1866) *
                 C1109) *
                C50776 +
            ((C10844 * C5700 + C50971 * C5705 + C10843 * C1867 +
              C51050 * C1872) *
                 C50752 +
             (C10844 * C5696 + C50971 * C5699 + C10843 * C1860 +
              C51050 * C1868) *
                 C1109) *
                C51028) *
               C17290) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C49770 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C51021 -
             (C10878 + C10879) * C49763 - (C10880 + C10881) * C50757) *
                C51028 +
            ((C10879 + C10878) * C49770 + (C10881 + C10880) * C51021 -
             (C10883 + C10882) * C49763 - (C10885 + C10884) * C50757) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C49770 + (C13934 + C13935) * C51021 -
             C13908 * C49763 - C13909 * C50757) *
                C51028 +
            (C13910 * C49770 + C13911 * C51021 - C11432 * C49763 -
             C11433 * C50757) *
                C50776) *
               C50945) *
              C51083 +
          ((((C11270 + C11271) * C49763 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C51021 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C49770) +
             (C11272 + C11273) * C50757) *
                C51028 +
            ((C11274 + C11275) * C49763 -
             ((C11273 + C11272) * C51021 + (C11271 + C11270) * C49770) +
             (C11276 + C11277) * C50757) *
                C50776) *
               C17290 +
           ((C14798 * C49763 -
             ((C14818 + C14819) * C51021 + (C14820 + C14821) * C49770) +
             C14807 * C50757) *
                C51028 +
            ((C11821 + C11820) * C49763 - (C14808 * C51021 + C14809 * C49770) +
             (C11823 + C11822) * C50757) *
                C50776) *
               C50945) *
              C51084 +
          ((((C10843 * C467 + C51050 * C482 + C10844 * C1860 + C50971 * C1868) *
                 C49770 +
             (C10843 * C483 + C51050 * C497 + C10844 * C1867 + C50971 * C1872) *
                 C51021 -
             (C11278 + C11279) * C49763 - (C11280 + C11281) * C50757) *
                C51028 +
            ((C11279 + C11278) * C49770 + (C11281 + C11280) * C51021 -
             (C11282 + C11283) * C49763 - (C11284 + C11285) * C50757) *
                C50776) *
               C17290 +
           (((C15364 + C15365) * C49770 + (C15366 + C15367) * C51021 -
             (C14146 + C14147) * C49763 - (C14148 + C14149) * C50757) *
                C51028 +
            ((C14147 + C14146) * C49770 + (C14149 + C14148) * C51021 -
             (C10844 * C6266 + C50971 * C6267 + C10843 * C1225 +
              C51050 * C1231) *
                 C49763 -
             (C10844 * C6268 + C50971 * C6269 + C10843 * C1230 +
              C51050 * C1237) *
                 C50757) *
                C50776) *
               C50945) *
              C2103) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                 C1035 +
             (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                 C1030 -
             (C10878 + C10879) * C1036 - (C10880 + C10881) * C1031 +
             C10894 * C1037 + C10895 * C1032) *
                C51028 +
            ((C10879 + C10878) * C1035 + (C10881 + C10880) * C1030 -
             (C10883 + C10882) * C1036 - (C10885 + C10884) * C1031 +
             (C10887 + C10886) * C1037 + (C10889 + C10888) * C1032) *
                C50776) *
               C17290 +
           (((C13932 + C13933) * C1035 + (C13934 + C13935) * C1030 -
             C13908 * C1036 - C13909 * C1031 + C14344 * C1037 +
             C14345 * C1032) *
                C51028 +
            (C13910 * C1035 + C13911 * C1030 - C11432 * C1036 - C11433 * C1031 +
             (C11443 + C11442) * C1037 + (C11445 + C11444) * C1032) *
                C50776) *
               C50945) *
              C1687 +
          ((((C11270 + C11271) * C1036 -
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C1030 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1035) +
             (C11272 + C11273) * C1031 - C11592 * C1037 - C11593 * C1032) *
                C51028 +
            ((C11274 + C11275) * C1036 -
             ((C11273 + C11272) * C1030 + (C11271 + C11270) * C1035) +
             (C11276 + C11277) * C1031 - (C11602 + C11603) * C1037 -
             (C11604 + C11605) * C1032) *
                C50776) *
               C17290 +
           ((C14798 * C1036 -
             ((C14818 + C14819) * C1030 + (C14820 + C14821) * C1035) +
             C14807 * C1031 - (C11820 + C11821) * C1037 -
             (C11822 + C11823) * C1032) *
                C51028 +
            ((C11821 + C11820) * C1036 - (C14808 * C1030 + C14809 * C1035) +
             (C11823 + C11822) * C1031 -
             (C10844 * C1224 + C50971 * C1229 + C10843 * C897 + C51050 * C905) *
                 C1037 -
             (C10844 * C1228 + C50971 * C1236 + C10843 * C906 + C51050 * C912) *
                 C1032) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10843 * C122 + C51050 * C129 + C10844 * C463 + C50971 * C474) *
                  C1109 +
              (C10843 * C130 + C51050 * C143 + C10844 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C10879 + C10878) * C1109 + (C10881 + C10880) * C50752) *
                 C50776) *
                C17290 +
            (((C13932 + C13933) * C1109 + (C13934 + C13935) * C50752) * C51028 +
             (C13910 * C1109 + C13911 * C50752) * C50776) *
                C50945) *
               C1687 -
           (((C14808 * C50752 + C14809 * C1109) * C50776 +
             ((C14818 + C14819) * C50752 + (C14820 + C14821) * C1109) *
                 C51028) *
                C50945 +
            (((C11273 + C11272) * C50752 + (C11271 + C11270) * C1109) * C50776 +
             ((C10844 * C483 + C50971 * C497 + C10843 * C473 + C51050 * C492) *
                  C50752 +
              (C10844 * C467 + C50971 * C482 + C10843 * C463 + C51050 * C474) *
                  C1109) *
                 C51028) *
                C17290) *
               C50874) *
              C280 +
          (((((C14821 + C14820) * C1109 + (C14819 + C14818) * C50752) * C51028 +
             (C14798 * C1109 + C14807 * C50752) * C50776) *
                C17290 +
            (((C16022 + C16023) * C1109 + (C16024 + C16025) * C50752) * C51028 +
             ((C14823 + C14822) * C1109 + (C14825 + C14824) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C13922 * C50752 + C13923 * C1109) * C50776 +
             ((C13936 + C13937) * C50752 + (C13938 + C13939) * C1109) *
                 C51028) *
                C50945 +
            ((C13909 * C50752 + C13908 * C1109) * C50776 +
             ((C13935 + C13934) * C50752 + (C13933 + C13932) * C1109) *
                 C51028) *
                C17290) *
               C1687) *
              C281 +
          (((((C13939 + C13938) * C1109 + (C13937 + C13936) * C50752) * C51028 +
             (C13912 * C1109 + C13921 * C50752) * C50776) *
                C17290 +
            (((C15158 + C15159) * C1109 + (C15160 + C15161) * C50752) * C51028 +
             ((C13941 + C13940) * C1109 + (C13943 + C13942) * C50752) *
                 C50776) *
                C50945) *
               C1687 -
           ((((C10844 * C3726 + C50971 * C3730 + C10843 * C3230 +
               C51050 * C3234) *
                  C50752 +
              (C10844 * C3724 + C50971 * C3727 + C10843 * C3225 +
               C51050 * C3229) *
                  C1109) *
                 C50776 +
             ((C10844 * C3728 + C50971 * C3731 + C10843 * C3228 +
               C51050 * C3233) *
                  C50752 +
              (C10844 * C3725 + C50971 * C3729 + C10843 * C3224 +
               C51050 * C3227) *
                  C1109) *
                 C51028) *
                C50945 +
            (((C14824 + C14825) * C50752 + (C14822 + C14823) * C1109) * C50776 +
             ((C16025 + C16024) * C50752 + (C16023 + C16022) * C1109) *
                 C51028) *
                C17290) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C641 +
             (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
             C172 * C51078 + C173 * C643 + C174 * C638) *
                C17287 +
            (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
             C175 * C643 + C176 * C638) *
                C17288 +
            (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
             C177 * C643 + C178 * C638) *
                C17289) *
               C17290 +
           ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C17287 +
            (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C17288 +
            (C8612 + C8613 - C8614 - C8615 + C8616 + C8617) * C17289) *
               C50945) *
              C50810 * C51036 +
          (((C2857 - (C2856 + C2855) + C2858 - C2859 - C2860) * C17287 +
            (C2863 - (C2862 + C2861) + C2864 - C2865 - C2866) * C17288 +
            (C8614 - (C8613 + C8612) + C8615 - C8616 - C8617) * C17289) *
               C17290 +
           ((C2869 - (C2868 + C2867) + C2870 - C2871 - C2872) * C17287 +
            (C2875 - (C2874 + C2873) + C2876 - C2877 - C2878) * C17288 +
            (C360 * C642 - (C359 * C51077 + C358 * C641) + C361 * C51078 -
             (C117 * C294 + C50907 * C313) * C643 -
             (C117 * C314 + C50907 * C324) * C638) *
                C17289) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C641 +
            (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
            C172 * C51078 + C173 * C643 + C174 * C638) *
               C50771 * C19889 +
           (C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C50771 * C19890 +
           (C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C50771 * C19891 +
           (C20197 + C20198 - C20199 - C20200 + C20201 + C20202) * C50771 *
               C19892) *
              C50810 * C51036 +
          ((C2857 - (C2856 + C2855) + C2858 - C2859 - C2860) * C50771 * C19889 +
           (C2869 - (C2868 + C2867) + C2870 - C2871 - C2872) * C50771 * C19890 +
           (C20199 - (C20198 + C20197) + C20200 - C20201 - C20202) * C50771 *
               C19891 +
           (C2511 * C642 - (C3570 * C51077 + C3569 * C641) + C2512 * C51078 -
            (C117 * C2453 + C50907 * C2458) * C643 -
            (C117 * C2459 + C50907 * C2462) * C638) *
               C50771 * C19892) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C283 +
              (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
              C172 * C50757) *
                 C17287 +
             (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) *
                 C17288 +
             (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                 C17289) *
                C17290 +
            ((C2513 + C2514 - C2468 - C2469) * C17287 +
             (C2470 + C2471 - C2472 - C2473) * C17288 +
             (C8306 + C8307 - C8308 - C8309) * C17289) *
                C50945) *
               C51037 +
           (((C527 * C284 -
              ((C117 * C473 + C50907 * C492) * C278 +
               (C117 * C463 + C50907 * C474) * C283) +
              C528 * C50757) *
                 C17287 +
             (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                 C17288 +
             (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) *
                 C17289) *
                C17290 +
            ((C3237 - (C3267 + C3268) + C3242) * C17287 +
             (C3243 - (C3244 + C3245) + C3246) * C17288 +
             (C8958 - (C8959 + C8960) + C8961) * C17289) *
                C50945) *
               C50874) *
              C51036 +
          ((((C2468 - (C2514 + C2513) + C2469) * C17287 +
             (C2472 - (C2471 + C2470) + C2473) * C17288 +
             (C8308 - (C8307 + C8306) + C8309) * C17289) *
                C17290 +
            ((C2478 - (C2516 + C2515) + C2479) * C17287 +
             (C2482 - (C2481 + C2480) + C2483) * C17288 +
             (C8310 - (C8311 + C8312) + C8313) * C17289) *
                C50945) *
               C51037 +
           (((C3268 + C3267 - C3237 - C3242) * C17287 +
             (C3245 + C3244 - C3243 - C3246) * C17288 +
             (C8960 + C8959 - C8958 - C8961) * C17289) *
                C17290 +
            ((C3270 + C3269 - C3247 - C3252) * C17287 +
             (C3255 + C3254 - C3253 - C3256) * C17288 +
             (C3029 * C283 + C3030 * C278 -
              (C117 * C1573 + C50907 * C1578) * C284 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C17289) *
                C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C50771 * C19889 +
            (C2513 + C2514 - C2468 - C2469) * C50771 * C19890 +
            C19992 * C19891 + C20000 * C19892) *
               C51037 +
           ((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C50771 * C19889 +
            (C3237 - (C3267 + C3268) + C3242) * C50771 * C19890 +
            (C3247 - (C3269 + C3270) + C3252) * C50771 * C19891 +
            (C20431 - (C20432 + C20433) + C20434) * C50771 * C19892) *
               C50874) *
              C51036 +
          (((C2468 - (C2514 + C2513) + C2469) * C50771 * C19889 +
            (C2478 - (C2516 + C2515) + C2479) * C50771 * C19890 +
            (C2518 - (C2519 + C2520) + C2521) * C50771 * C19891 +
            (C19994 - (C19995 + C19996) + C19997) * C50771 * C19892) *
               C51037 +
           ((C3268 + C3267 - C3237 - C3242) * C50771 * C19889 +
            (C3270 + C3269 - C3247 - C3252) * C50771 * C19890 +
            (C20433 + C20432 - C20431 - C20434) * C50771 * C19891 +
            ((C117 * C4296 + C50907 * C4300) * C283 +
             (C117 * C4299 + C50907 * C4302) * C278 -
             (C117 * C4295 + C50907 * C4298) * C284 -
             (C117 * C4297 + C50907 * C4301) * C50757) *
                C50771 * C19892) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C2513 + C2514 - C2468 - C2469) * C17287 +
            (C2470 + C2471 - C2472 - C2473) * C17288 +
            (C8306 + C8307 - C8308 - C8309) * C17289) *
               C50945) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C17287 +
            (C2472 - (C2471 + C2470) + C2473) * C17288 +
            (C8308 - (C8307 + C8306) + C8309) * C17289) *
               C17290 +
           ((C2478 - (C2516 + C2515) + C2479) * C17287 +
            (C2482 - (C2481 + C2480) + C2483) * C17288 +
            (C8310 - (C8311 + C8312) + C8313) * C17289) *
               C50945) *
              C50810 * C281 +
          ((C2530 * C17287 + C2527 * C17288 +
            (C8312 + C8311 - C8310 - C8313) * C17289) *
               C17290 +
           ((C2520 + C2519 - C2518 - C2521) * C17287 +
            (C2524 + C2523 - C2522 - C2525) * C17288 +
            (C2509 * C283 + C2510 * C278 -
             (C117 * C1110 + C50907 * C1115) * C284 -
             (C117 * C1114 + C50907 * C1122) * C50757) *
                C17289) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C17287 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C17288 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C17289) *
              C17290 +
          ((C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C17287 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C17288 +
           (C352 * C118 + C353 * C106 - C354 * C119 - C355 * C107 +
            C653 * C120 + C654 * C108 - (C117 * C644 + C50907 * C645) * C121 -
            (C117 * C646 + C50907 * C647) * C109) *
               C17289) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C2513 + C2514 - C2468 - C2469) * C17287 +
            (C2470 + C2471 - C2472 - C2473) * C17288 +
            (C8306 + C8307 - C8308 - C8309) * C17289) *
               C50945) *
              C459 +
          (((C527 * C284 -
             ((C117 * C473 + C50907 * C492) * C278 +
              (C117 * C463 + C50907 * C474) * C283) +
             C528 * C50757) *
                C17287 +
            (C529 * C284 - (C528 * C278 + C527 * C283) + C530 * C50757) *
                C17288 +
            (C531 * C284 - (C530 * C278 + C529 * C283) + C532 * C50757) *
                C17289) *
               C17290 +
           ((C3237 - (C3267 + C3268) + C3242) * C17287 +
            (C3243 - (C3244 + C3245) + C3246) * C17288 +
            (C8958 - (C8959 + C8960) + C8961) * C17289) *
               C50945) *
              C460 +
          ((((C117 * C467 + C50907 * C482) * C283 +
             (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
             C534 * C50757) *
                C17287 +
            (C533 * C283 + C534 * C278 - C535 * C284 - C536 * C50757) * C17288 +
            (C535 * C283 + C536 * C278 - C537 * C284 - C538 * C50757) *
                C17289) *
               C17290 +
           ((C3753 * C283 + C3754 * C278 - C2705 * C284 - C2706 * C50757) *
                C17287 +
            (C2705 * C283 + C2706 * C278 - C8464 * C284 - C8465 * C50757) *
                C17288 +
            (C8464 * C283 + C8465 * C278 -
             (C117 * C1224 + C50907 * C1229) * C284 -
             (C117 * C1228 + C50907 * C1236) * C50757) *
                C17289) *
               C50945) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50907 * C129) * C118 +
           (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50771 * C19889 +
          (C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
           C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
              C50771 * C19890 +
          (C2502 * C118 + C2503 * C106 - C356 * C119 - C357 * C107 +
           C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
              C50771 * C19891 +
          (C2507 * C118 + C2506 * C106 - C2505 * C119 - C2508 * C107 +
           C2509 * C120 + C2510 * C108 -
           (C117 * C1110 + C50907 * C1115) * C121 -
           (C117 * C1114 + C50907 * C1122) * C109) *
              C50771 * C19892) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C50771 * C19889 +
           (C2513 + C2514 - C2468 - C2469) * C50771 * C19890 + C19992 * C19891 +
           C20000 * C19892) *
              C50810 * C280 +
          ((C2468 - (C2514 + C2513) + C2469) * C50771 * C19889 +
           (C2478 - (C2516 + C2515) + C2479) * C50771 * C19890 +
           (C2518 - (C2519 + C2520) + C2521) * C50771 * C19891 +
           (C19994 - (C19995 + C19996) + C19997) * C50771 * C19892) *
              C50810 * C281 +
          (C19992 * C19889 + C20000 * C19890 +
           (C19996 + C19995 - C19994 - C19997) * C50771 * C19891 +
           ((C117 * C3539 + C50907 * C3543) * C283 +
            (C117 * C3542 + C50907 * C3545) * C278 -
            (C117 * C3538 + C50907 * C3541) * C284 -
            (C117 * C3540 + C50907 * C3544) * C50757) *
               C50771 * C19892) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C50771 * C19889 +
           (C2513 + C2514 - C2468 - C2469) * C50771 * C19890 + C19992 * C19891 +
           C20000 * C19892) *
              C459 +
          ((C527 * C284 -
            ((C117 * C473 + C50907 * C492) * C278 +
             (C117 * C463 + C50907 * C474) * C283) +
            C528 * C50757) *
               C50771 * C19889 +
           (C3237 - (C3267 + C3268) + C3242) * C50771 * C19890 +
           (C3247 - (C3269 + C3270) + C3252) * C50771 * C19891 +
           (C3265 * C284 - (C4315 * C278 + C4314 * C283) + C3266 * C50757) *
               C50771 * C19892) *
              C460 +
          (((C117 * C467 + C50907 * C482) * C283 +
            (C117 * C483 + C50907 * C497) * C278 - C533 * C284 -
            C534 * C50757) *
               C50771 * C19889 +
           (C3753 * C283 + C3754 * C278 - C2705 * C284 - C2706 * C50757) *
               C50771 * C19890 +
           (C3755 * C283 + C3756 * C278 - C2707 * C284 - C2708 * C50757) *
               C50771 * C19891 +
           ((C117 * C3725 + C50907 * C3729) * C283 +
            (C117 * C3728 + C50907 * C3731) * C278 -
            (C117 * C3724 + C50907 * C3727) * C284 -
            (C117 * C3726 + C50907 * C3730) * C50757) *
               C50771 * C19892) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C641 +
             (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
             C172 * C51078 + C173 * C643 + C174 * C638) *
                C17287 +
            (C171 * C641 + C172 * C51077 - C173 * C642 - C174 * C51078 +
             C175 * C643 + C176 * C638) *
                C17288 +
            (C173 * C641 + C174 * C51077 - C175 * C642 - C176 * C51078 +
             C177 * C643 + C178 * C638) *
                C17289) *
               C17290 +
           ((C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C17287 +
            (C2861 + C2862 - C2863 - C2864 + C2865 + C2866) * C17288 +
            (C8612 + C8613 - C8614 - C8615 + C8616 + C8617) * C17289) *
               C50945) *
              C51037 +
          (((C527 * C642 -
             ((C117 * C473 + C50907 * C492) * C51077 +
              (C117 * C463 + C50907 * C474) * C641) +
             C528 * C51078 - C529 * C643 - C530 * C638) *
                C17287 +
            (C529 * C642 - (C528 * C51077 + C527 * C641) + C530 * C51078 -
             C531 * C643 - C532 * C638) *
                C17288 +
            (C531 * C642 - (C530 * C51077 + C529 * C641) + C532 * C51078 -
             C763 * C643 - C764 * C638) *
                C17289) *
               C17290 +
           ((C927 * C642 - (C3261 * C51077 + C3262 * C641) + C928 * C51078 -
             C929 * C643 - C930 * C638) *
                C17287 +
            (C929 * C642 - (C928 * C51077 + C927 * C641) + C930 * C51078 -
             C931 * C643 - C932 * C638) *
                C17288 +
            (C931 * C642 - (C930 * C51077 + C929 * C641) + C932 * C51078 -
             (C117 * C898 + C50907 * C907) * C643 -
             (C117 * C908 + C50907 * C913) * C638) *
                C17289) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C641 +
            (C117 * C130 + C50907 * C143) * C51077 - C171 * C642 -
            C172 * C51078 + C173 * C643 + C174 * C638) *
               C50771 * C19889 +
           (C2855 + C2856 - C2857 - C2858 + C2859 + C2860) * C50771 * C19890 +
           (C2867 + C2868 - C2869 - C2870 + C2871 + C2872) * C50771 * C19891 +
           (C20197 + C20198 - C20199 - C20200 + C20201 + C20202) * C50771 *
               C19892) *
              C51037 +
          ((C527 * C642 -
            ((C117 * C473 + C50907 * C492) * C51077 +
             (C117 * C463 + C50907 * C474) * C641) +
            C528 * C51078 - C529 * C643 - C530 * C638) *
               C50771 * C19889 +
           (C927 * C642 - (C3261 * C51077 + C3262 * C641) + C928 * C51078 -
            C929 * C643 - C930 * C638) *
               C50771 * C19890 +
           (C2703 * C642 - (C3263 * C51077 + C3264 * C641) + C2704 * C51078 -
            C3029 * C643 - C3030 * C638) *
               C50771 * C19891 +
           (C3265 * C642 - (C4315 * C51077 + C4314 * C641) + C3266 * C51078 -
            (C117 * C3226 + C50907 * C3231) * C643 -
            (C117 * C3232 + C50907 * C3235) * C638) *
               C50771 * C19892) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C118 +
            (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C17287 +
           (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C17288 +
           (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C17289) *
              C17290 +
          ((C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
            C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
               C17287 +
           (C350 * C118 + C351 * C106 - C352 * C119 - C353 * C107 +
            C354 * C120 + C355 * C108 - C653 * C121 - C654 * C109) *
               C17288 +
           (C352 * C118 + C353 * C106 - C354 * C119 - C355 * C107 +
            C653 * C120 + C654 * C108 - (C117 * C644 + C50907 * C645) * C121 -
            (C117 * C646 + C50907 * C647) * C109) *
               C17289) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C283 +
             (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
             C172 * C50757) *
                C17287 +
            (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C50757) * C17288 +
            (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C2513 + C2514 - C2468 - C2469) * C17287 +
            (C2470 + C2471 - C2472 - C2473) * C17288 +
            (C8306 + C8307 - C8308 - C8309) * C17289) *
               C50945) *
              C50810 * C280 +
          (((C2468 - (C2514 + C2513) + C2469) * C17287 +
            (C2472 - (C2471 + C2470) + C2473) * C17288 +
            (C8308 - (C8307 + C8306) + C8309) * C17289) *
               C17290 +
           ((C2478 - (C2516 + C2515) + C2479) * C17287 +
            (C2482 - (C2481 + C2480) + C2483) * C17288 +
            (C8310 - (C8311 + C8312) + C8313) * C17289) *
               C50945) *
              C50810 * C281 +
          ((C2530 * C17287 + C2527 * C17288 +
            (C8312 + C8311 - C8310 - C8313) * C17289) *
               C17290 +
           ((C2520 + C2519 - C2518 - C2521) * C17287 +
            (C2524 + C2523 - C2522 - C2525) * C17288 +
            (C2509 * C283 + C2510 * C278 -
             (C117 * C1110 + C50907 * C1115) * C284 -
             (C117 * C1114 + C50907 * C1122) * C50757) *
                C17289) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50907 * C129) * C118 +
           (C117 * C130 + C50907 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50771 * C19889 +
          (C2500 * C118 + C2501 * C106 - C350 * C119 - C351 * C107 +
           C352 * C120 + C353 * C108 - C354 * C121 - C355 * C109) *
              C50771 * C19890 +
          (C2502 * C118 + C2503 * C106 - C356 * C119 - C357 * C107 +
           C358 * C120 + C359 * C108 - C360 * C121 - C361 * C109) *
              C50771 * C19891 +
          (C2507 * C118 + C2506 * C106 - C2505 * C119 - C2508 * C107 +
           C2509 * C120 + C2510 * C108 -
           (C117 * C1110 + C50907 * C1115) * C121 -
           (C117 * C1114 + C50907 * C1122) * C109) *
              C50771 * C19892) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C283 +
            (C117 * C130 + C50907 * C143) * C278 - C171 * C284 -
            C172 * C50757) *
               C50771 * C19889 +
           (C2513 + C2514 - C2468 - C2469) * C50771 * C19890 + C19992 * C19891 +
           C20000 * C19892) *
              C50810 * C280 +
          ((C2468 - (C2514 + C2513) + C2469) * C50771 * C19889 +
           (C2478 - (C2516 + C2515) + C2479) * C50771 * C19890 +
           (C2518 - (C2519 + C2520) + C2521) * C50771 * C19891 +
           (C19994 - (C19995 + C19996) + C19997) * C50771 * C19892) *
              C50810 * C281 +
          (C19992 * C19889 + C20000 * C19890 +
           (C19996 + C19995 - C19994 - C19997) * C50771 * C19891 +
           ((C117 * C3539 + C50907 * C3543) * C283 +
            (C117 * C3542 + C50907 * C3545) * C278 -
            (C117 * C3538 + C50907 * C3541) * C284 -
            (C117 * C3540 + C50907 * C3544) * C50757) *
               C50771 * C19892) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C17287 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C17288 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C3907 + C3908 - C3909 - C3910) * C17287 +
            (C3911 + C3912 - C3913 - C3914) * C17288 +
            (C9514 + C9515 - C9516 - C9517) * C17289) *
               C50945) *
              C50810 * C51081 +
          (((C3909 - (C3908 + C3907) + C3910) * C17287 +
            (C3913 - (C3912 + C3911) + C3914) * C17288 +
            (C9516 - (C9515 + C9514) + C9517) * C17289) *
               C17290 +
           ((C3917 - (C3916 + C3915) + C3918) * C17287 +
            (C3921 - (C3920 + C3919) + C3922) * C17288 +
            (C9518 - (C9519 + C9520) + C9521) * C17289) *
               C50945) *
              C50810 * C51082 +
          ((C3935 * C17287 + C3936 * C17288 +
            (C9520 + C9519 - C9518 - C9521) * C17289) *
               C17290 +
           ((C3925 + C3924 - C3923 - C3926) * C17287 +
            (C3929 + C3928 - C3927 - C3930) * C17288 +
            (C2509 * C49770 + C2510 * C51021 -
             (C117 * C1110 + C50907 * C1115) * C49763 -
             (C117 * C1114 + C50907 * C1122) * C50757) *
                C17289) *
               C50945) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C49770 +
            (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
            C172 * C50757) *
               C50771 * C19889 +
           (C3907 + C3908 - C3909 - C3910) * C50771 * C19890 + C20831 * C19891 +
           C20839 * C19892) *
              C50810 * C51081 +
          ((C3909 - (C3908 + C3907) + C3910) * C50771 * C19889 +
           (C3917 - (C3916 + C3915) + C3918) * C50771 * C19890 +
           (C3923 - (C3924 + C3925) + C3926) * C50771 * C19891 +
           (C20833 - (C20834 + C20835) + C20836) * C50771 * C19892) *
              C50810 * C51082 +
          (C20831 * C19889 + C20839 * C19890 +
           (C20835 + C20834 - C20833 - C20836) * C50771 * C19891 +
           (C20619 * C49770 + C20620 * C51021 -
            (C117 * C3538 + C50907 * C3541) * C49763 -
            (C117 * C3540 + C50907 * C3544) * C50757) *
               C50771 * C19892) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C17287 +
             (C171 * C1109 + C172 * C50752) * C17288 +
             (C173 * C1109 + C174 * C50752) * C17289) *
                C17290 +
            ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
             (C9212 + C9213) * C17289) *
                C50945) *
               C51037 -
           (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
             (C3739 + C3740) * C17287) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C17289 +
             (C528 * C50752 + C527 * C1109) * C17288 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C17287) *
                C17290) *
               C50874) *
              C51081 +
          ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
             (C9365 + C9364) * C17289) *
                C17290 +
            ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
             (C9866 + C9867) * C17289) *
                C50945) *
               C50874 -
           (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
             (C3552 + C3551) * C17287) *
                C50945 +
            ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
             (C3548 + C3547) * C17287) *
                C17290) *
               C51037) *
              C51082 +
          (((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
                C17290 +
            ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
             (C9216 + C9217) * C17289) *
                C50945) *
               C51037 -
           ((((C117 * C3232 + C50907 * C3235) * C50752 +
              (C117 * C3226 + C50907 * C3231) * C1109) *
                 C17289 +
             (C4311 + C4310) * C17288 + (C4318 + C4317) * C17287) *
                C50945 +
            ((C9867 + C9866) * C17289 + C4304 * C17288 + C4305 * C17287) *
                C17290) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C50771 * C19889 +
            (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
            C20617 * C19892) *
               C51037 -
           (C21082 * C19892 + C21077 * C19891 +
            (C3739 + C3740) * C50771 * C19890 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C50771 * C19889) *
               C50874) *
              C51081 +
          (((C3740 + C3739) * C50771 * C19889 +
            (C3736 + C3735) * C50771 * C19890 +
            (C4317 + C4318) * C50771 * C19891 +
            (C21085 + C21086) * C50771 * C19892) *
               C50874 -
           (C20618 * C19892 + C20612 * C19891 +
            (C3552 + C3551) * C50771 * C19890 +
            (C3548 + C3547) * C50771 * C19889) *
               C51037) *
              C51082 +
          ((C20609 * C19889 + C20617 * C19890 +
            (C3575 + C3576) * C50771 * C19891 +
            (C20621 + C20622) * C50771 * C19892) *
               C51037 -
           (((C117 * C21072 + C50907 * C21074) * C50752 +
             (C117 * C21071 + C50907 * C21073) * C1109) *
                C50771 * C19892 +
            (C21086 + C21085) * C50771 * C19891 + C21082 * C19890 +
            C21077 * C19889) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C17287 +
            (C171 * C1109 + C172 * C50752) * C17288 +
            (C173 * C1109 + C174 * C50752) * C17289) *
               C17290 +
           ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
            (C9212 + C9213) * C17289) *
               C50945) *
              C50810 * C1105 -
          (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
            (C3552 + C3551) * C17287) *
               C50945 +
           ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
            (C3548 + C3547) * C17287) *
               C17290) *
              C50810 * C1106 +
          ((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
               C17290 +
           ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
            (C9216 + C9217) * C17289) *
               C50945) *
              C50810 * C1107 -
          ((((C117 * C2459 + C50907 * C2462) * C50752 +
             (C117 * C2453 + C50907 * C2458) * C1109) *
                C17289 +
            (C3564 + C3563) * C17288 + (C3576 + C3575) * C17287) *
               C50945 +
           ((C9217 + C9216) * C17289 + C3567 * C17288 + C3568 * C17287) *
               C17290) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C17287 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C17288 +
            (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C17289) *
               C17290 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C17287 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C17288 +
            (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C17289) *
               C50945) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C17287 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C17288 +
            (C9110 - (C9109 + C9108) + C9111 - C9112 - C9113) * C17289) *
               C17290 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C17287 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C17288 +
            (C360 * C1036 - (C359 * C1030 + C358 * C1035) + C361 * C1031 -
             (C117 * C294 + C50907 * C313) * C1037 -
             (C117 * C314 + C50907 * C324) * C1032) *
                C17289) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C17287 +
             (C171 * C1109 + C172 * C50752) * C17288 +
             (C173 * C1109 + C174 * C50752) * C17289) *
                C17290 +
            ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
             (C9212 + C9213) * C17289) *
                C50945) *
               C459 -
           (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
             (C3739 + C3740) * C17287) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C17289 +
             (C528 * C50752 + C527 * C1109) * C17288 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C17287) *
                C17290) *
               C460 +
           ((((C117 * C467 + C50907 * C482) * C1109 +
              (C117 * C483 + C50907 * C497) * C50752) *
                 C17287 +
             (C533 * C1109 + C534 * C50752) * C17288 +
             (C535 * C1109 + C536 * C50752) * C17289) *
                C17290 +
            ((C3757 + C3758) * C17287 + (C3745 + C3746) * C17288 +
             (C9366 + C9367) * C17289) *
                C50945) *
               C461) *
              C1033 +
          ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
             (C9365 + C9364) * C17289) *
                C17290 +
            ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
             (C9866 + C9867) * C17289) *
                C50945) *
               C460 -
           (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
             (C3552 + C3551) * C17287) *
                C50945 +
            ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
             (C3548 + C3547) * C17287) *
                C17290) *
               C459 -
           ((((C117 * C2686 + C50907 * C2689) * C50752 +
              (C117 * C2680 + C50907 * C2685) * C1109) *
                 C17289 +
             (C3752 + C3751) * C17288 + (C3760 + C3759) * C17287) *
                C50945 +
            ((C9367 + C9366) * C17289 + (C3746 + C3745) * C17288 +
             (C3758 + C3757) * C17287) *
                C17290) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50771 * C19889 +
           (C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C50771 * C19890 +
           (C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C50771 * C19891 +
           (C20533 + C20534 - C20535 - C20536 + C20537 + C20538) * C50771 *
               C19892) *
              C50810 * C1033 +
          ((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C50771 * C19889 +
           (C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C50771 * C19890 +
           (C20535 - (C20534 + C20533) + C20536 - C20537 - C20538) * C50771 *
               C19891 +
           (C2511 * C1036 - (C3570 * C1030 + C3569 * C1035) + C2512 * C1031 -
            (C117 * C2453 + C50907 * C2458) * C1037 -
            (C117 * C2459 + C50907 * C2462) * C1032) *
               C50771 * C19892) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C50771 * C19889 +
           (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
           C20617 * C19892) *
              C50810 * C1105 -
          (C20618 * C19892 + C20612 * C19891 +
           (C3552 + C3551) * C50771 * C19890 +
           (C3548 + C3547) * C50771 * C19889) *
              C50810 * C1106 +
          (C20609 * C19889 + C20617 * C19890 +
           (C3575 + C3576) * C50771 * C19891 +
           (C20621 + C20622) * C50771 * C19892) *
              C50810 * C1107 -
          (((C117 * C20605 + C50907 * C20607) * C50752 +
            (C117 * C20604 + C50907 * C20606) * C1109) *
               C50771 * C19892 +
           (C20622 + C20621) * C50771 * C19891 + C20618 * C19890 +
           C20612 * C19889) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C50771 * C19889 +
            (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
            C20617 * C19892) *
               C459 -
           ((C4318 + C4317) * C50771 * C19892 + C4305 * C50771 * C19891 +
            (C3739 + C3740) * C50771 * C19890 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C50771 * C19889) *
               C460 +
           (((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C50771 * C19889 +
            (C3757 + C3758) * C50771 * C19890 +
            (C3759 + C3760) * C50771 * C19891 +
            (C20731 + C20732) * C50771 * C19892) *
               C461) *
              C1033 +
          (((C3740 + C3739) * C50771 * C19889 +
            (C3736 + C3735) * C50771 * C19890 +
            (C4317 + C4318) * C50771 * C19891 +
            ((C117 * C4296 + C50907 * C4300) * C1109 +
             (C117 * C4299 + C50907 * C4302) * C50752) *
                C50771 * C19892) *
               C460 -
           (C20618 * C19892 + C20612 * C19891 +
            (C3552 + C3551) * C50771 * C19890 +
            (C3548 + C3547) * C50771 * C19889) *
               C459 -
           (((C117 * C20721 + C50907 * C20723) * C50752 +
             (C117 * C20720 + C50907 * C20722) * C1109) *
                C50771 * C19892 +
            (C20732 + C20731) * C50771 * C19891 +
            (C3760 + C3759) * C50771 * C19890 +
            (C3758 + C3757) * C50771 * C19889) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C17287 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C17288 +
             (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                 C17289) *
                C17290 +
            ((C3907 + C3908 - C3909 - C3910) * C17287 +
             (C3911 + C3912 - C3913 - C3914) * C17288 +
             (C9514 + C9515 - C9516 - C9517) * C17289) *
                C50945) *
               C51037 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C17287 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C17288 +
             (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                 C17289) *
                C17290 +
            ((C4134 - (C4135 + C4136) + C4137) * C17287 +
             (C4138 - (C4139 + C4140) + C4141) * C17288 +
             (C9716 - (C9717 + C9718) + C9719) * C17289) *
                C50945) *
               C50874) *
              C1033 +
          ((((C3909 - (C3908 + C3907) + C3910) * C17287 +
             (C3913 - (C3912 + C3911) + C3914) * C17288 +
             (C9516 - (C9515 + C9514) + C9517) * C17289) *
                C17290 +
            ((C3917 - (C3916 + C3915) + C3918) * C17287 +
             (C3921 - (C3920 + C3919) + C3922) * C17288 +
             (C9518 - (C9519 + C9520) + C9521) * C17289) *
                C50945) *
               C51037 +
           (((C4136 + C4135 - C4134 - C4137) * C17287 +
             (C4140 + C4139 - C4138 - C4141) * C17288 +
             (C9718 + C9717 - C9716 - C9719) * C17289) *
                C17290 +
            ((C4144 + C4143 - C4142 - C4145) * C17287 +
             (C4148 + C4147 - C4146 - C4149) * C17288 +
             (C3029 * C49770 + C3030 * C51021 -
              (C117 * C1573 + C50907 * C1578) * C49763 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C17289) *
                C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C50771 * C19889 +
            (C3907 + C3908 - C3909 - C3910) * C50771 * C19890 +
            C20831 * C19891 + C20839 * C19892) *
               C51037 +
           ((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C50771 * C19889 +
            (C4134 - (C4135 + C4136) + C4137) * C50771 * C19890 +
            (C4142 - (C4143 + C4144) + C4145) * C50771 * C19891 +
            (C20970 - (C20971 + C20972) + C20973) * C50771 * C19892) *
               C50874) *
              C1033 +
          (((C3909 - (C3908 + C3907) + C3910) * C50771 * C19889 +
            (C3917 - (C3916 + C3915) + C3918) * C50771 * C19890 +
            (C3923 - (C3924 + C3925) + C3926) * C50771 * C19891 +
            (C20833 - (C20834 + C20835) + C20836) * C50771 * C19892) *
               C51037 +
           ((C4136 + C4135 - C4134 - C4137) * C50771 * C19889 +
            (C4144 + C4143 - C4142 - C4145) * C50771 * C19890 +
            (C20972 + C20971 - C20970 - C20973) * C50771 * C19891 +
            ((C117 * C4296 + C50907 * C4300) * C49770 +
             (C117 * C4299 + C50907 * C4302) * C51021 -
             (C117 * C4295 + C50907 * C4298) * C49763 -
             (C117 * C4297 + C50907 * C4301) * C50757) *
                C50771 * C19892) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C17287 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C17288 +
            (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C17289) *
               C17290 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C17287 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C17288 +
            (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C17289) *
               C50945) *
              C50810 * C1033 +
          (((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C17287 +
            (C3425 - (C3424 + C3423) + C3426 - C3427 - C3428) * C17288 +
            (C9110 - (C9109 + C9108) + C9111 - C9112 - C9113) * C17289) *
               C17290 +
           ((C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C17287 +
            (C3437 - (C3436 + C3435) + C3438 - C3439 - C3440) * C17288 +
            (C360 * C1036 - (C359 * C1030 + C358 * C1035) + C361 * C1031 -
             (C117 * C294 + C50907 * C313) * C1037 -
             (C117 * C314 + C50907 * C324) * C1032) *
                C17289) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C17287 +
            (C171 * C1109 + C172 * C50752) * C17288 +
            (C173 * C1109 + C174 * C50752) * C17289) *
               C17290 +
           ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
            (C9212 + C9213) * C17289) *
               C50945) *
              C50810 * C1105 -
          (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
            (C3552 + C3551) * C17287) *
               C50945 +
           ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
            (C3548 + C3547) * C17287) *
               C17290) *
              C50810 * C1106 +
          ((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
               C17290 +
           ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
            (C9216 + C9217) * C17289) *
               C50945) *
              C50810 * C1107 -
          ((((C117 * C2459 + C50907 * C2462) * C50752 +
             (C117 * C2453 + C50907 * C2458) * C1109) *
                C17289 +
            (C3564 + C3563) * C17288 + (C3576 + C3575) * C17287) *
               C50945 +
           ((C9217 + C9216) * C17289 + C3567 * C17288 + C3568 * C17287) *
               C17290) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50771 * C19889 +
           (C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C50771 * C19890 +
           (C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C50771 * C19891 +
           (C20533 + C20534 - C20535 - C20536 + C20537 + C20538) * C50771 *
               C19892) *
              C50810 * C1033 +
          ((C3419 - (C3418 + C3417) + C3420 - C3421 - C3422) * C50771 * C19889 +
           (C3431 - (C3430 + C3429) + C3432 - C3433 - C3434) * C50771 * C19890 +
           (C20535 - (C20534 + C20533) + C20536 - C20537 - C20538) * C50771 *
               C19891 +
           (C2511 * C1036 - (C3570 * C1030 + C3569 * C1035) + C2512 * C1031 -
            (C117 * C2453 + C50907 * C2458) * C1037 -
            (C117 * C2459 + C50907 * C2462) * C1032) *
               C50771 * C19892) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C50771 * C19889 +
           (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
           C20617 * C19892) *
              C50810 * C1105 -
          (C20618 * C19892 + C20612 * C19891 +
           (C3552 + C3551) * C50771 * C19890 +
           (C3548 + C3547) * C50771 * C19889) *
              C50810 * C1106 +
          (C20609 * C19889 + C20617 * C19890 +
           (C3575 + C3576) * C50771 * C19891 +
           (C20621 + C20622) * C50771 * C19892) *
              C50810 * C1107 -
          (((C117 * C20605 + C50907 * C20607) * C50752 +
            (C117 * C20604 + C50907 * C20606) * C1109) *
               C50771 * C19892 +
           (C20622 + C20621) * C50771 * C19891 + C20618 * C19890 +
           C20612 * C19889) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C49770 +
              (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
              C172 * C50757) *
                 C17287 +
             (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                 C17288 +
             (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                 C17289) *
                C17290 +
            ((C3907 + C3908 - C3909 - C3910) * C17287 +
             (C3911 + C3912 - C3913 - C3914) * C17288 +
             (C9514 + C9515 - C9516 - C9517) * C17289) *
                C50945) *
               C1687 +
           (((C527 * C49763 -
              ((C117 * C473 + C50907 * C492) * C51021 +
               (C117 * C463 + C50907 * C474) * C49770) +
              C528 * C50757) *
                 C17287 +
             (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                 C17288 +
             (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                 C17289) *
                C17290 +
            ((C4134 - (C4135 + C4136) + C4137) * C17287 +
             (C4138 - (C4139 + C4140) + C4141) * C17288 +
             (C9716 - (C9717 + C9718) + C9719) * C17289) *
                C50945) *
               C50874) *
              C51036 +
          ((((C3909 - (C3908 + C3907) + C3910) * C17287 +
             (C3913 - (C3912 + C3911) + C3914) * C17288 +
             (C9516 - (C9515 + C9514) + C9517) * C17289) *
                C17290 +
            ((C3917 - (C3916 + C3915) + C3918) * C17287 +
             (C3921 - (C3920 + C3919) + C3922) * C17288 +
             (C9518 - (C9519 + C9520) + C9521) * C17289) *
                C50945) *
               C1687 +
           (((C4136 + C4135 - C4134 - C4137) * C17287 +
             (C4140 + C4139 - C4138 - C4141) * C17288 +
             (C9718 + C9717 - C9716 - C9719) * C17289) *
                C17290 +
            ((C4144 + C4143 - C4142 - C4145) * C17287 +
             (C4148 + C4147 - C4146 - C4149) * C17288 +
             (C3029 * C49770 + C3030 * C51021 -
              (C117 * C1573 + C50907 * C1578) * C49763 -
              (C117 * C1577 + C50907 * C1585) * C50757) *
                 C17289) *
                C50945) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C50771 * C19889 +
            (C3907 + C3908 - C3909 - C3910) * C50771 * C19890 +
            C20831 * C19891 + C20839 * C19892) *
               C1687 +
           ((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C50771 * C19889 +
            (C4134 - (C4135 + C4136) + C4137) * C50771 * C19890 +
            (C4142 - (C4143 + C4144) + C4145) * C50771 * C19891 +
            (C20970 - (C20971 + C20972) + C20973) * C50771 * C19892) *
               C50874) *
              C51036 +
          (((C3909 - (C3908 + C3907) + C3910) * C50771 * C19889 +
            (C3917 - (C3916 + C3915) + C3918) * C50771 * C19890 +
            (C3923 - (C3924 + C3925) + C3926) * C50771 * C19891 +
            (C20833 - (C20834 + C20835) + C20836) * C50771 * C19892) *
               C1687 +
           ((C4136 + C4135 - C4134 - C4137) * C50771 * C19889 +
            (C4144 + C4143 - C4142 - C4145) * C50771 * C19890 +
            (C20972 + C20971 - C20970 - C20973) * C50771 * C19891 +
            (C21083 * C49770 + C21084 * C51021 -
             (C117 * C4295 + C50907 * C4298) * C49763 -
             (C117 * C4297 + C50907 * C4301) * C50757) *
                C50771 * C19892) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C117 * C122 + C50907 * C129) * C1109 +
                       (C117 * C130 + C50907 * C143) * C50752) *
                          C17287 +
                      (C171 * C1109 + C172 * C50752) * C17288 +
                      (C173 * C1109 + C174 * C50752) * C17289) *
                         C17290 +
                     ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
                      (C9212 + C9213) * C17289) *
                         C50945) *
                        C51083 -
                    (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
                      (C3739 + C3740) * C17287) *
                         C50945 +
                     ((C530 * C50752 + C529 * C1109) * C17289 +
                      (C528 * C50752 + C527 * C1109) * C17288 +
                      ((C117 * C473 + C50907 * C492) * C50752 +
                       (C117 * C463 + C50907 * C474) * C1109) *
                          C17287) *
                         C17290) *
                        C51084 +
                    ((((C117 * C467 + C50907 * C482) * C1109 +
                       (C117 * C483 + C50907 * C497) * C50752) *
                          C17287 +
                      (C533 * C1109 + C534 * C50752) * C17288 +
                      (C535 * C1109 + C536 * C50752) * C17289) *
                         C17290 +
                     ((C3757 + C3758) * C17287 + (C3745 + C3746) * C17288 +
                      (C9366 + C9367) * C17289) *
                         C50945) *
                        C2103) *
                       C51036 +
                   ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
                      (C9365 + C9364) * C17289) *
                         C17290 +
                     ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
                      (C9866 + C9867) * C17289) *
                         C50945) *
                        C51084 -
                    (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
                      (C3552 + C3551) * C17287) *
                         C50945 +
                     ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
                      (C3548 + C3547) * C17287) *
                         C17290) *
                        C51083 -
                    ((((C117 * C2686 + C50907 * C2689) * C50752 +
                       (C117 * C2680 + C50907 * C2685) * C1109) *
                          C17289 +
                      (C3752 + C3751) * C17288 + (C3760 + C3759) * C17287) *
                         C50945 +
                     ((C9367 + C9366) * C17289 + (C3746 + C3745) * C17288 +
                      (C3758 + C3757) * C17287) *
                         C17290) *
                        C2103) *
                       C50848)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50907 * C129) * C1109 +
                      (C117 * C130 + C50907 * C143) * C50752) *
                         C50771 * C19889 +
                     (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
                     C20617 * C19892) *
                        C51083 -
                    (C21082 * C19892 + C21077 * C19891 +
                     (C3739 + C3740) * C50771 * C19890 +
                     ((C117 * C473 + C50907 * C492) * C50752 +
                      (C117 * C463 + C50907 * C474) * C1109) *
                         C50771 * C19889) *
                        C51084 +
                    (((C117 * C467 + C50907 * C482) * C1109 +
                      (C117 * C483 + C50907 * C497) * C50752) *
                         C50771 * C19889 +
                     (C3757 + C3758) * C50771 * C19890 +
                     (C3759 + C3760) * C50771 * C19891 +
                     (C20731 + C20732) * C50771 * C19892) *
                        C2103) *
                       C51036 +
                   (((C3740 + C3739) * C50771 * C19889 +
                     (C3736 + C3735) * C50771 * C19890 +
                     (C4317 + C4318) * C50771 * C19891 +
                     (C21085 + C21086) * C50771 * C19892) *
                        C51084 -
                    (C20618 * C19892 + C20612 * C19891 +
                     (C3552 + C3551) * C50771 * C19890 +
                     (C3548 + C3547) * C50771 * C19889) *
                        C51083 -
                    (((C117 * C20721 + C50907 * C20723) * C50752 +
                      (C117 * C20720 + C50907 * C20722) * C1109) *
                         C50771 * C19892 +
                     (C20732 + C20731) * C50771 * C19891 +
                     (C3760 + C3759) * C50771 * C19890 +
                     (C3758 + C3757) * C50771 * C19889) *
                        C2103) *
                       C50848)) /
                     (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C17287 +
             (C171 * C1109 + C172 * C50752) * C17288 +
             (C173 * C1109 + C174 * C50752) * C17289) *
                C17290 +
            ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
             (C9212 + C9213) * C17289) *
                C50945) *
               C1687 -
           (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
             (C3739 + C3740) * C17287) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C17289 +
             (C528 * C50752 + C527 * C1109) * C17288 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C17287) *
                C17290) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
             (C9365 + C9364) * C17289) *
                C17290 +
            ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
             (C9866 + C9867) * C17289) *
                C50945) *
               C50874 -
           (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
             (C3552 + C3551) * C17287) *
                C50945 +
            ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
             (C3548 + C3547) * C17287) *
                C17290) *
               C1687) *
              C281 +
          (((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
                C17290 +
            ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
             (C9216 + C9217) * C17289) *
                C50945) *
               C1687 -
           ((((C117 * C3232 + C50907 * C3235) * C50752 +
              (C117 * C3226 + C50907 * C3231) * C1109) *
                 C17289 +
             (C4311 + C4310) * C17288 + (C4318 + C4317) * C17287) *
                C50945 +
            ((C9867 + C9866) * C17289 + C4304 * C17288 + C4305 * C17287) *
                C17290) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C17287 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C17288 +
            (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C17289) *
               C17290 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C17287 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C17288 +
            (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C17289) *
               C50945) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C17287 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C17288 +
            (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
             C763 * C1037 - C764 * C1032) *
                C17289) *
               C17290 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C17287 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C17288 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50907 * C907) * C1037 -
             (C117 * C908 + C50907 * C913) * C1032) *
                C17289) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C17287 +
            (C171 * C1109 + C172 * C50752) * C17288 +
            (C173 * C1109 + C174 * C50752) * C17289) *
               C17290 +
           ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
            (C9212 + C9213) * C17289) *
               C50945) *
              C1853 -
          (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
            (C3739 + C3740) * C17287) *
               C50945 +
           ((C530 * C50752 + C529 * C1109) * C17289 +
            (C528 * C50752 + C527 * C1109) * C17288 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C17287) *
               C17290) *
              C1854 +
          ((((C117 * C467 + C50907 * C482) * C1109 +
             (C117 * C483 + C50907 * C497) * C50752) *
                C17287 +
            (C533 * C1109 + C534 * C50752) * C17288 +
            (C535 * C1109 + C536 * C50752) * C17289) *
               C17290 +
           ((C3757 + C3758) * C17287 + (C3745 + C3746) * C17288 +
            (C9366 + C9367) * C17289) *
               C50945) *
              C1855 -
          ((((C117 * C6268 + C50907 * C6269) * C50752 +
             (C117 * C6266 + C50907 * C6267) * C1109) *
                C17289 +
            ((C117 * C4716 + C50907 * C4722) * C50752 +
             (C117 * C4710 + C50907 * C4717) * C1109) *
                C17288 +
            ((C117 * C4718 + C50907 * C4723) * C50752 +
             (C117 * C4711 + C50907 * C4719) * C1109) *
                C17287) *
               C50945 +
           (((C117 * C1863 + C50907 * C1870) * C50752 +
             (C117 * C1858 + C50907 * C1864) * C1109) *
                C17289 +
            ((C117 * C1865 + C50907 * C1871) * C50752 +
             (C117 * C1859 + C50907 * C1866) * C1109) *
                C17288 +
            ((C117 * C1867 + C50907 * C1872) * C50752 +
             (C117 * C1860 + C50907 * C1868) * C1109) *
                C17287) *
               C17290) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50771 * C19889 +
           (C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C50771 * C19890 +
           (C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C50771 * C19891 +
           (C20533 + C20534 - C20535 - C20536 + C20537 + C20538) * C50771 *
               C19892) *
              C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50907 * C492) * C1030 +
             (C117 * C463 + C50907 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C50771 * C19889 +
           (C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
            C929 * C1037 - C930 * C1032) *
               C50771 * C19890 +
           (C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
            C3029 * C1037 - C3030 * C1032) *
               C50771 * C19891 +
           (C3265 * C1036 - (C4315 * C1030 + C4314 * C1035) + C3266 * C1031 -
            (C117 * C3226 + C50907 * C3231) * C1037 -
            (C117 * C3232 + C50907 * C3235) * C1032) *
               C50771 * C19892) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C50771 * C19889 +
            (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
            C20617 * C19892) *
               C1687 -
           (C21082 * C19892 + C21077 * C19891 +
            (C3739 + C3740) * C50771 * C19890 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C50771 * C19889) *
               C50874) *
              C280 +
          (((C3740 + C3739) * C50771 * C19889 +
            (C3736 + C3735) * C50771 * C19890 +
            (C4317 + C4318) * C50771 * C19891 +
            (C21085 + C21086) * C50771 * C19892) *
               C50874 -
           (C20618 * C19892 + C20612 * C19891 +
            (C3552 + C3551) * C50771 * C19890 +
            (C3548 + C3547) * C50771 * C19889) *
               C1687) *
              C281 +
          ((C20609 * C19889 + C20617 * C19890 +
            (C3575 + C3576) * C50771 * C19891 +
            (C20621 + C20622) * C50771 * C19892) *
               C1687 -
           (((C117 * C21072 + C50907 * C21074) * C50752 +
             (C117 * C21071 + C50907 * C21073) * C1109) *
                C50771 * C19892 +
            (C21086 + C21085) * C50771 * C19891 + C21082 * C19890 +
            C21077 * C19889) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1109 +
            (C117 * C130 + C50907 * C143) * C50752) *
               C50771 * C19889 +
           (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
           C20617 * C19892) *
              C1853 -
          (C21082 * C19892 + C21077 * C19891 +
           (C3739 + C3740) * C50771 * C19890 +
           ((C117 * C473 + C50907 * C492) * C50752 +
            (C117 * C463 + C50907 * C474) * C1109) *
               C50771 * C19889) *
              C1854 +
          (((C117 * C467 + C50907 * C482) * C1109 +
            (C117 * C483 + C50907 * C497) * C50752) *
               C50771 * C19889 +
           (C3757 + C3758) * C50771 * C19890 +
           (C3759 + C3760) * C50771 * C19891 +
           (C20731 + C20732) * C50771 * C19892) *
              C1855 -
          (((C117 * C21349 + C50907 * C21351) * C50752 +
            (C117 * C21348 + C50907 * C21350) * C1109) *
               C50771 * C19892 +
           ((C117 * C4714 + C50907 * C4721) * C50752 +
            (C117 * C4709 + C50907 * C4715) * C1109) *
               C50771 * C19891 +
           ((C117 * C4718 + C50907 * C4723) * C50752 +
            (C117 * C4711 + C50907 * C4719) * C1109) *
               C50771 * C19890 +
           ((C117 * C1867 + C50907 * C1872) * C50752 +
            (C117 * C1860 + C50907 * C1868) * C1109) *
               C50771 * C19889) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C49770 +
             (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
             C172 * C50757) *
                C17287 +
            (C171 * C49770 + C172 * C51021 - C173 * C49763 - C174 * C50757) *
                C17288 +
            (C173 * C49770 + C174 * C51021 - C175 * C49763 - C176 * C50757) *
                C17289) *
               C17290 +
           ((C3907 + C3908 - C3909 - C3910) * C17287 +
            (C3911 + C3912 - C3913 - C3914) * C17288 +
            (C9514 + C9515 - C9516 - C9517) * C17289) *
               C50945) *
              C51083 +
          (((C527 * C49763 -
             ((C117 * C473 + C50907 * C492) * C51021 +
              (C117 * C463 + C50907 * C474) * C49770) +
             C528 * C50757) *
                C17287 +
            (C529 * C49763 - (C528 * C51021 + C527 * C49770) + C530 * C50757) *
                C17288 +
            (C531 * C49763 - (C530 * C51021 + C529 * C49770) + C532 * C50757) *
                C17289) *
               C17290 +
           ((C4134 - (C4135 + C4136) + C4137) * C17287 +
            (C4138 - (C4139 + C4140) + C4141) * C17288 +
            (C9716 - (C9717 + C9718) + C9719) * C17289) *
               C50945) *
              C51084 +
          ((((C117 * C467 + C50907 * C482) * C49770 +
             (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
             C534 * C50757) *
                C17287 +
            (C533 * C49770 + C534 * C51021 - C535 * C49763 - C536 * C50757) *
                C17288 +
            (C535 * C49770 + C536 * C51021 - C537 * C49763 - C538 * C50757) *
                C17289) *
               C17290 +
           ((C3753 * C49770 + C3754 * C51021 - C2705 * C49763 -
             C2706 * C50757) *
                C17287 +
            (C2705 * C49770 + C2706 * C51021 - C8464 * C49763 -
             C8465 * C50757) *
                C17288 +
            (C8464 * C49770 + C8465 * C51021 -
             (C117 * C1224 + C50907 * C1229) * C49763 -
             (C117 * C1228 + C50907 * C1236) * C50757) *
                C17289) *
               C50945) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C49770 +
            (C117 * C130 + C50907 * C143) * C51021 - C171 * C49763 -
            C172 * C50757) *
               C50771 * C19889 +
           (C3907 + C3908 - C3909 - C3910) * C50771 * C19890 + C20831 * C19891 +
           C20839 * C19892) *
              C51083 +
          ((C527 * C49763 -
            ((C117 * C473 + C50907 * C492) * C51021 +
             (C117 * C463 + C50907 * C474) * C49770) +
            C528 * C50757) *
               C50771 * C19889 +
           (C4134 - (C4135 + C4136) + C4137) * C50771 * C19890 +
           (C4142 - (C4143 + C4144) + C4145) * C50771 * C19891 +
           (C20970 - (C20971 + C20972) + C20973) * C50771 * C19892) *
              C51084 +
          (((C117 * C467 + C50907 * C482) * C49770 +
            (C117 * C483 + C50907 * C497) * C51021 - C533 * C49763 -
            C534 * C50757) *
               C50771 * C19889 +
           (C3753 * C49770 + C3754 * C51021 - C2705 * C49763 - C2706 * C50757) *
               C50771 * C19890 +
           (C3755 * C49770 + C3756 * C51021 - C2707 * C49763 - C2708 * C50757) *
               C50771 * C19891 +
           (C20729 * C49770 + C20730 * C51021 -
            (C117 * C3724 + C50907 * C3727) * C49763 -
            (C117 * C3726 + C50907 * C3730) * C50757) *
               C50771 * C19892) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1035 +
             (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
             C172 * C1031 + C173 * C1037 + C174 * C1032) *
                C17287 +
            (C171 * C1035 + C172 * C1030 - C173 * C1036 - C174 * C1031 +
             C175 * C1037 + C176 * C1032) *
                C17288 +
            (C173 * C1035 + C174 * C1030 - C175 * C1036 - C176 * C1031 +
             C177 * C1037 + C178 * C1032) *
                C17289) *
               C17290 +
           ((C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C17287 +
            (C3423 + C3424 - C3425 - C3426 + C3427 + C3428) * C17288 +
            (C9108 + C9109 - C9110 - C9111 + C9112 + C9113) * C17289) *
               C50945) *
              C1687 +
          (((C527 * C1036 -
             ((C117 * C473 + C50907 * C492) * C1030 +
              (C117 * C463 + C50907 * C474) * C1035) +
             C528 * C1031 - C529 * C1037 - C530 * C1032) *
                C17287 +
            (C529 * C1036 - (C528 * C1030 + C527 * C1035) + C530 * C1031 -
             C531 * C1037 - C532 * C1032) *
                C17288 +
            (C531 * C1036 - (C530 * C1030 + C529 * C1035) + C532 * C1031 -
             C763 * C1037 - C764 * C1032) *
                C17289) *
               C17290 +
           ((C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
             C929 * C1037 - C930 * C1032) *
                C17287 +
            (C929 * C1036 - (C928 * C1030 + C927 * C1035) + C930 * C1031 -
             C931 * C1037 - C932 * C1032) *
                C17288 +
            (C931 * C1036 - (C930 * C1030 + C929 * C1035) + C932 * C1031 -
             (C117 * C898 + C50907 * C907) * C1037 -
             (C117 * C908 + C50907 * C913) * C1032) *
                C17289) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50907 * C129) * C1109 +
              (C117 * C130 + C50907 * C143) * C50752) *
                 C17287 +
             (C171 * C1109 + C172 * C50752) * C17288 +
             (C173 * C1109 + C174 * C50752) * C17289) *
                C17290 +
            ((C3547 + C3548) * C17287 + (C3549 + C3550) * C17288 +
             (C9212 + C9213) * C17289) *
                C50945) *
               C1687 -
           (((C9364 + C9365) * C17289 + (C3737 + C3738) * C17288 +
             (C3739 + C3740) * C17287) *
                C50945 +
            ((C530 * C50752 + C529 * C1109) * C17289 +
             (C528 * C50752 + C527 * C1109) * C17288 +
             ((C117 * C473 + C50907 * C492) * C50752 +
              (C117 * C463 + C50907 * C474) * C1109) *
                 C17287) *
                C17290) *
               C50874) *
              C280 +
          ((((C3740 + C3739) * C17287 + (C3738 + C3737) * C17288 +
             (C9365 + C9364) * C17289) *
                C17290 +
            ((C3736 + C3735) * C17287 + (C3734 + C3733) * C17288 +
             (C9866 + C9867) * C17289) *
                C50945) *
               C50874 -
           (((C9214 + C9215) * C17289 + (C3554 + C3553) * C17288 +
             (C3552 + C3551) * C17287) *
                C50945 +
            ((C9213 + C9212) * C17289 + (C3550 + C3549) * C17288 +
             (C3548 + C3547) * C17287) *
                C17290) *
               C1687) *
              C281 +
          (((C3565 * C17287 + C3566 * C17288 + (C9215 + C9214) * C17289) *
                C17290 +
            ((C3558 + C3557) * C17287 + (C3556 + C3555) * C17288 +
             (C9216 + C9217) * C17289) *
                C50945) *
               C1687 -
           ((((C117 * C3232 + C50907 * C3235) * C50752 +
              (C117 * C3226 + C50907 * C3231) * C1109) *
                 C17289 +
             (C4311 + C4310) * C17288 + (C4318 + C4317) * C17287) *
                C50945 +
            ((C9867 + C9866) * C17289 + C4304 * C17288 + C4305 * C17287) *
                C17290) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50907 * C129) * C1035 +
            (C117 * C130 + C50907 * C143) * C1030 - C171 * C1036 -
            C172 * C1031 + C173 * C1037 + C174 * C1032) *
               C50771 * C19889 +
           (C3417 + C3418 - C3419 - C3420 + C3421 + C3422) * C50771 * C19890 +
           (C3429 + C3430 - C3431 - C3432 + C3433 + C3434) * C50771 * C19891 +
           (C20533 + C20534 - C20535 - C20536 + C20537 + C20538) * C50771 *
               C19892) *
              C1687 +
          ((C527 * C1036 -
            ((C117 * C473 + C50907 * C492) * C1030 +
             (C117 * C463 + C50907 * C474) * C1035) +
            C528 * C1031 - C529 * C1037 - C530 * C1032) *
               C50771 * C19889 +
           (C927 * C1036 - (C3261 * C1030 + C3262 * C1035) + C928 * C1031 -
            C929 * C1037 - C930 * C1032) *
               C50771 * C19890 +
           (C2703 * C1036 - (C3263 * C1030 + C3264 * C1035) + C2704 * C1031 -
            C3029 * C1037 - C3030 * C1032) *
               C50771 * C19891 +
           (C3265 * C1036 - (C4315 * C1030 + C4314 * C1035) + C3266 * C1031 -
            (C117 * C3226 + C50907 * C3231) * C1037 -
            (C117 * C3232 + C50907 * C3235) * C1032) *
               C50771 * C19892) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50907 * C129) * C1109 +
             (C117 * C130 + C50907 * C143) * C50752) *
                C50771 * C19889 +
            (C3547 + C3548) * C50771 * C19890 + C20609 * C19891 +
            C20617 * C19892) *
               C1687 -
           (C21082 * C19892 + C21077 * C19891 +
            (C3739 + C3740) * C50771 * C19890 +
            ((C117 * C473 + C50907 * C492) * C50752 +
             (C117 * C463 + C50907 * C474) * C1109) *
                C50771 * C19889) *
               C50874) *
              C280 +
          (((C3740 + C3739) * C50771 * C19889 +
            (C3736 + C3735) * C50771 * C19890 +
            (C4317 + C4318) * C50771 * C19891 +
            (C21085 + C21086) * C50771 * C19892) *
               C50874 -
           (C20618 * C19892 + C20612 * C19891 +
            (C3552 + C3551) * C50771 * C19890 +
            (C3548 + C3547) * C50771 * C19889) *
               C1687) *
              C281 +
          ((C20609 * C19889 + C20617 * C19890 +
            (C3575 + C3576) * C50771 * C19891 +
            (C20621 + C20622) * C50771 * C19892) *
               C1687 -
           (((C117 * C21072 + C50907 * C21074) * C50752 +
             (C117 * C21071 + C50907 * C21073) * C1109) *
                C50771 * C19892 +
            (C21086 + C21085) * C50771 * C19891 + C21082 * C19890 +
            C21077 * C19889) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C641 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51077 -
             (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
             C33411 * C643 + C33412 * C638) *
                C51028 +
            ((C33396 + C33395) * C641 + (C33398 + C33397) * C51077 -
             (C33400 + C33399) * C642 - (C33402 + C33401) * C51078 +
             (C33404 + C33403) * C643 + (C33406 + C33405) * C638) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C641 + (C36373 + C36374) * C51077 -
             C40989 * C642 - C40990 * C51078 + C41395 * C643 + C41396 * C638) *
                C51028 +
            (C40991 * C641 + C40992 * C51077 - C33949 * C642 - C33950 * C51078 +
             (C33960 + C33959) * C643 + (C33962 + C33961) * C638) *
                C50776) *
               C50945) *
              C50810 * C51036 +
          (((C40991 * C642 -
             ((C36374 + C36373) * C51077 + (C36372 + C36371) * C641) +
             C40992 * C51078 - C33949 * C643 - C33950 * C638) *
                C51028 +
            (C41395 * C642 - (C40990 * C51077 + C40989 * C641) +
             C41396 * C51078 - (C33959 + C33960) * C643 -
             (C33961 + C33962) * C638) *
                C50776) *
               C51049 +
           ((C40993 * C642 -
             ((C36378 + C36377) * C51077 + (C36376 + C36375) * C641) +
             C40994 * C51078 - (C33605 + C33606) * C643 -
             (C33607 + C33608) * C638) *
                C51028 +
            ((C33606 + C33605) * C642 - (C36354 * C51077 + C36353 * C641) +
             (C33608 + C33607) * C51078 -
             (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
                 C643 -
             (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
                 C638) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                  C283 +
              (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                  C278 -
              (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                 C51028 +
             ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
              (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
                 C50776) *
                C51049 +
            (((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
              C40989 * C284 - C40990 * C50757) *
                 C51028 +
             (C40991 * C283 + C40992 * C278 - C33949 * C284 - C33950 * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C33787 + C33788) * C284 -
              ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                   C278 +
               (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                   C283) +
              (C33789 + C33790) * C50757) *
                 C51028 +
             ((C33791 + C33792) * C284 -
              ((C33790 + C33789) * C278 + (C33788 + C33787) * C283) +
              (C33793 + C33794) * C50757) *
                 C50776) *
                C51049 +
            ((C41849 * C284 -
              ((C37053 + C37054) * C278 + (C37055 + C37056) * C283) +
              C41850 * C50757) *
                 C51028 +
             ((C34338 + C34337) * C284 - (C41851 * C278 + C41852 * C283) +
              (C34340 + C34339) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C51036 +
          ((((C40991 * C284 -
              ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
              C40992 * C50757) *
                 C51028 +
             (C41395 * C284 - (C40990 * C278 + C40989 * C283) +
              C41396 * C50757) *
                 C50776) *
                C51049 +
            ((C40993 * C284 -
              ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
              C40994 * C50757) *
                 C51028 +
             ((C33606 + C33605) * C284 - (C36354 * C278 + C36353 * C283) +
              (C33608 + C33607) * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C37056 + C37055) * C283 + (C37054 + C37053) * C278 -
              C41852 * C284 - C41851 * C50757) *
                 C51028 +
             (C41849 * C283 + C41850 * C278 - (C34337 + C34338) * C284 -
              (C34339 + C34340) * C50757) *
                 C50776) *
                C51049 +
            (((C37062 + C37061) * C283 + (C37060 + C37059) * C278 -
              (C37058 + C37057) * C284 - (C37064 + C37063) * C50757) *
                 C51028 +
             ((C37057 + C37058) * C283 + (C37063 + C37064) * C278 -
              (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
               C33358 * C1580) *
                  C284 -
              (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
               C33358 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                C51028 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
             C40989 * C284 - C40990 * C50757) *
                C51028 +
            (C40991 * C283 + C40992 * C278 - C33949 * C284 - C33950 * C50757) *
                C50776) *
               C50945) *
              C50810 * C280 +
          (((C40991 * C284 -
             ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
             C40992 * C50757) *
                C51028 +
            ((C33597 + C33598) * C284 - (C40990 * C278 + C40989 * C283) +
             (C33599 + C33600) * C50757) *
                C50776) *
               C51049 +
           ((C40993 * C284 -
             ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
             C40994 * C50757) *
                C51028 +
            ((C33606 + C33605) * C284 - (C36354 * C278 + C36353 * C283) +
             (C33608 + C33607) * C50757) *
                C50776) *
               C50945) *
              C50810 * C281 +
          ((C36395 * C51028 +
            (C40993 * C283 + C40994 * C278 - (C33605 + C33606) * C284 -
             (C33607 + C33608) * C50757) *
                C50776) *
               C51049 +
           (((C36386 + C36385) * C283 + (C36384 + C36383) * C278 -
             (C36382 + C36381) * C284 - (C36388 + C36387) * C50757) *
                C51028 +
            ((C36381 + C36382) * C283 + (C36387 + C36388) * C278 -
             (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
              C33358 * C1117) *
                 C284 -
             (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
              C33358 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C118 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C106 -
            (C33395 + C33396) * C119 - (C33397 + C33398) * C107 +
            C33411 * C120 + C33412 * C108 - C33413 * C121 - C33414 * C109) *
               C51028 +
           ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
            (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
            (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
            (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
               C50776) *
              C51049 +
          (((C36371 + C36372) * C118 + (C36373 + C36374) * C106 -
            (C33594 + C33593) * C119 - (C33596 + C33595) * C107 +
            (C33597 + C33598) * C120 + (C33599 + C33600) * C108 -
            (C33959 + C33960) * C121 - (C33961 + C33962) * C109) *
               C51028 +
           ((C33593 + C33594) * C118 + (C33595 + C33596) * C106 -
            C33949 * C119 - C33950 * C107 + (C33960 + C33959) * C120 +
            (C33962 + C33961) * C108 -
            (C33361 * C898 + C50971 * C907 + C33360 * C289 + C33358 * C303) *
                C121 -
            (C33361 * C908 + C50971 * C913 + C33360 * C304 + C33358 * C319) *
                C109) *
               C50776) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                C51028 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
             C40989 * C284 - C40990 * C50757) *
                C51028 +
            (C40991 * C283 + C40992 * C278 - C33949 * C284 - C33950 * C50757) *
                C50776) *
               C50945) *
              C459 +
          ((((C33787 + C33788) * C284 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C278 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C283) +
             (C33789 + C33790) * C50757) *
                C51028 +
            ((C33791 + C33792) * C284 -
             ((C33790 + C33789) * C278 + (C33788 + C33787) * C283) +
             (C33793 + C33794) * C50757) *
                C50776) *
               C51049 +
           (((C34334 + C34333) * C284 -
             ((C37053 + C37054) * C278 + (C37055 + C37056) * C283) +
             (C34336 + C34335) * C50757) *
                C51028 +
            ((C34338 + C34337) * C284 -
             ((C34335 + C34336) * C278 + (C34333 + C34334) * C283) +
             (C34340 + C34339) * C50757) *
                C50776) *
               C50945) *
              C460 +
          ((((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C283 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C278 -
             (C33795 + C33796) * C284 - (C33797 + C33798) * C50757) *
                C51028 +
            ((C33796 + C33795) * C283 + (C33798 + C33797) * C278 -
             (C33799 + C33800) * C284 - (C33801 + C33802) * C50757) *
                C50776) *
               C51049 +
           (((C37493 + C37494) * C283 + (C37495 + C37496) * C278 -
             (C41197 + C41198) * C284 - (C41199 + C41200) * C50757) *
                C51028 +
            ((C41198 + C41197) * C283 + (C41200 + C41199) * C278 -
             (C33361 * C6266 + C50971 * C6267 + C33360 * C1225 +
              C33358 * C1231) *
                 C284 -
             (C33361 * C6268 + C50971 * C6269 + C33360 * C1230 +
              C33358 * C1237) *
                 C50757) *
                C50776) *
               C50945) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C641 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51077 -
             (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
             C33411 * C643 + C33412 * C638) *
                C51028 +
            ((C33396 + C33395) * C641 + (C33398 + C33397) * C51077 -
             (C33400 + C33399) * C642 - (C33402 + C33401) * C51078 +
             (C33404 + C33403) * C643 + (C33406 + C33405) * C638) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C641 + (C36373 + C36374) * C51077 -
             C40989 * C642 - C40990 * C51078 + C41395 * C643 + C41396 * C638) *
                C51028 +
            (C40991 * C641 + C40992 * C51077 - C33949 * C642 - C33950 * C51078 +
             (C33960 + C33959) * C643 + (C33962 + C33961) * C638) *
                C50776) *
               C50945) *
              C51037 +
          ((((C33787 + C33788) * C642 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51077 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C641) +
             (C33789 + C33790) * C51078 - C34109 * C643 - C34110 * C638) *
                C51028 +
            ((C33791 + C33792) * C642 -
             ((C33790 + C33789) * C51077 + (C33788 + C33787) * C641) +
             (C33793 + C33794) * C51078 - (C34119 + C34120) * C643 -
             (C34121 + C34122) * C638) *
                C50776) *
               C51049 +
           (((C34334 + C34333) * C642 -
             ((C37053 + C37054) * C51077 + (C37055 + C37056) * C641) +
             (C34336 + C34335) * C51078 - (C34337 + C34338) * C643 -
             (C34339 + C34340) * C638) *
                C51028 +
            ((C34338 + C34337) * C642 -
             ((C34335 + C34336) * C51077 + (C34333 + C34334) * C641) +
             (C34340 + C34339) * C51078 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C643 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C638) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C118 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C106 -
            (C33395 + C33396) * C119 - (C33397 + C33398) * C107 +
            C33411 * C120 + C33412 * C108 - C33413 * C121 - C33414 * C109) *
               C51028 +
           ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
            (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
            (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
            (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
               C50776) *
              C51049 +
          (((C36371 + C36372) * C118 + (C36373 + C36374) * C106 -
            (C33594 + C33593) * C119 - (C33596 + C33595) * C107 +
            (C33597 + C33598) * C120 + (C33599 + C33600) * C108 -
            (C33959 + C33960) * C121 - (C33961 + C33962) * C109) *
               C51028 +
           ((C33593 + C33594) * C118 + (C33595 + C33596) * C106 -
            C33949 * C119 - C33950 * C107 + (C33960 + C33959) * C120 +
            (C33962 + C33961) * C108 -
            (C33361 * C898 + C50971 * C907 + C33360 * C289 + C33358 * C303) *
                C121 -
            (C33361 * C908 + C50971 * C913 + C33360 * C304 + C33358 * C319) *
                C109) *
               C50776) *
              C50945) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                C51028 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
             C40989 * C284 - C40990 * C50757) *
                C51028 +
            (C40991 * C283 + C40992 * C278 - C33949 * C284 - C33950 * C50757) *
                C50776) *
               C50945) *
              C50810 * C280 +
          (((C40991 * C284 -
             ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
             C40992 * C50757) *
                C51028 +
            ((C33597 + C33598) * C284 - (C40990 * C278 + C40989 * C283) +
             (C33599 + C33600) * C50757) *
                C50776) *
               C51049 +
           ((C40993 * C284 -
             ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
             C40994 * C50757) *
                C51028 +
            ((C33606 + C33605) * C284 - (C36354 * C278 + C36353 * C283) +
             (C33608 + C33607) * C50757) *
                C50776) *
               C50945) *
              C50810 * C281 +
          ((C36395 * C51028 +
            (C40993 * C283 + C40994 * C278 - (C33605 + C33606) * C284 -
             (C33607 + C33608) * C50757) *
                C50776) *
               C51049 +
           (((C36386 + C36385) * C283 + (C36384 + C36383) * C278 -
             (C36382 + C36381) * C284 - (C36388 + C36387) * C50757) *
                C51028 +
            ((C36381 + C36382) * C283 + (C36387 + C36388) * C278 -
             (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
              C33358 * C1117) *
                 C284 -
             (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
              C33358 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C51028 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
             C40989 * C49763 - C40990 * C50757) *
                C51028 +
            (C40991 * C49770 + C40992 * C51021 - C33949 * C49763 -
             C33950 * C50757) *
                C50776) *
               C50945) *
              C50810 * C51081 +
          (((C40991 * C49763 -
             ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
             C40992 * C50757) *
                C51028 +
            (C41395 * C49763 - (C40990 * C51021 + C40989 * C49770) +
             C41396 * C50757) *
                C50776) *
               C51049 +
           ((C40993 * C49763 -
             ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
             C40994 * C50757) *
                C51028 +
            ((C33606 + C33605) * C49763 - (C36354 * C51021 + C36353 * C49770) +
             (C33608 + C33607) * C50757) *
                C50776) *
               C50945) *
              C50810 * C51082 +
          ((C37653 * C51028 +
            (C40993 * C49770 + C40994 * C51021 - (C33605 + C33606) * C49763 -
             (C33607 + C33608) * C50757) *
                C50776) *
               C51049 +
           (((C36386 + C36385) * C49770 + (C36384 + C36383) * C51021 -
             (C36382 + C36381) * C49763 - (C36388 + C36387) * C50757) *
                C51028 +
            ((C36381 + C36382) * C49770 + (C36387 + C36388) * C51021 -
             (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
              C33358 * C1117) *
                 C49763 -
             (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
              C33358 * C1123) *
                 C50757) *
                C50776) *
               C50945) *
              C50810 * C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                  C1109 +
              (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) *
                 C50776) *
                C51049 +
            (((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C51028 +
             (C40991 * C1109 + C40992 * C50752) * C50776) *
                C50945) *
               C51037 -
           (((C41851 * C50752 + C41852 * C1109) * C50776 +
             ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) *
                 C51028) *
                C50945 +
            (((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C50776 +
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C50752 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C1109) *
                 C51028) *
                C51049) *
               C50874) *
              C51081 +
          (((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C51028 +
             (C41849 * C1109 + C41850 * C50752) * C50776) *
                C51049 +
            (((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C51028 +
             ((C37057 + C37058) * C1109 + (C37063 + C37064) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C36354 * C50752 + C36353 * C1109) * C50776 +
             ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) *
                 C51028) *
                C50945 +
            ((C40990 * C50752 + C40989 * C1109) * C50776 +
             ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) *
                 C51028) *
                C51049) *
               C51037) *
              C51082 +
          (((C37321 * C51028 + (C40993 * C1109 + C40994 * C50752) * C50776) *
                C51049 +
            (((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C51028 +
             ((C36381 + C36382) * C1109 + (C36387 + C36388) * C50752) *
                 C50776) *
                C50945) *
               C51037 -
           ((((C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
               C33358 * C3234) *
                  C50752 +
              (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
               C33358 * C3229) *
                  C1109) *
                 C50776 +
             ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) *
                 C51028) *
                C50945 +
            (((C37064 + C37063) * C50752 + (C37058 + C37057) * C1109) * C50776 +
             C38011 * C51028) *
                C51049) *
               C50874) *
              C1342)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C51028 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C50776) *
               C51049 +
           (((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C51028 +
            (C40991 * C1109 + C40992 * C50752) * C50776) *
               C50945) *
              C50810 * C1105 -
          (((C36354 * C50752 + C36353 * C1109) * C50776 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C51028) *
               C50945 +
           ((C40990 * C50752 + C40989 * C1109) * C50776 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C51028) *
               C51049) *
              C50810 * C1106 +
          ((C37321 * C51028 + (C40993 * C1109 + C40994 * C50752) * C50776) *
               C51049 +
           (((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C51028 +
            ((C36381 + C36382) * C1109 + (C36387 + C36388) * C50752) * C50776) *
               C50945) *
              C50810 * C1107 -
          ((((C33361 * C4297 + C50971 * C4301 + C33360 * C2457 +
              C33358 * C2461) *
                 C50752 +
             (C33361 * C4295 + C50971 * C4298 + C33360 * C2452 +
              C33358 * C2456) *
                 C1109) *
                C50776 +
            ((C37327 + C37326) * C50752 + (C37325 + C37324) * C1109) * C51028) *
               C50945 +
           (((C36388 + C36387) * C50752 + (C36382 + C36381) * C1109) * C50776 +
            C37329 * C51028) *
               C51049) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1035 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C1030 -
             (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
             C33411 * C1037 + C33412 * C1032) *
                C51028 +
            ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
             (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
             (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
             C40989 * C1036 - C40990 * C1031 + C41395 * C1037 +
             C41396 * C1032) *
                C51028 +
            (C40991 * C1035 + C40992 * C1030 - C33949 * C1036 - C33950 * C1031 +
             (C33960 + C33959) * C1037 + (C33962 + C33961) * C1032) *
                C50776) *
               C50945) *
              C50810 * C1033 +
          (((C40991 * C1036 -
             ((C36374 + C36373) * C1030 + (C36372 + C36371) * C1035) +
             C40992 * C1031 - C33949 * C1037 - C33950 * C1032) *
                C51028 +
            (C41395 * C1036 - (C40990 * C1030 + C40989 * C1035) +
             C41396 * C1031 - (C33959 + C33960) * C1037 -
             (C33961 + C33962) * C1032) *
                C50776) *
               C51049 +
           ((C40993 * C1036 -
             ((C36378 + C36377) * C1030 + (C36376 + C36375) * C1035) +
             C40994 * C1031 - (C33605 + C33606) * C1037 -
             (C33607 + C33608) * C1032) *
                C51028 +
            ((C33606 + C33605) * C1036 - (C36354 * C1030 + C36353 * C1035) +
             (C33608 + C33607) * C1031 -
             (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
                 C1037 -
             (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
                 C1032) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                  C1109 +
              (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) *
                 C50776) *
                C51049 +
            (((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C51028 +
             (C40991 * C1109 + C40992 * C50752) * C50776) *
                C50945) *
               C459 -
           (((C41851 * C50752 + C41852 * C1109) * C50776 +
             ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) *
                 C51028) *
                C50945 +
            (((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C50776 +
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C50752 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C1109) *
                 C51028) *
                C51049) *
               C460 +
           ((((C33360 * C467 + C33358 * C482 + C33361 * C1860 +
               C50971 * C1868) *
                  C1109 +
              (C33360 * C483 + C33358 * C497 + C33361 * C1867 +
               C50971 * C1872) *
                  C50752) *
                 C51028 +
             ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) *
                 C50776) *
                C51049 +
            (((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C51028 +
             ((C41198 + C41197) * C1109 + (C41200 + C41199) * C50752) *
                 C50776) *
                C50945) *
               C461) *
              C1033 +
          (((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C51028 +
             (C41849 * C1109 + C41850 * C50752) * C50776) *
                C51049 +
            (((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C51028 +
             ((C37057 + C37058) * C1109 + (C37063 + C37064) * C50752) *
                 C50776) *
                C50945) *
               C460 -
           (((C36354 * C50752 + C36353 * C1109) * C50776 +
             ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) *
                 C51028) *
                C50945 +
            ((C40990 * C50752 + C40989 * C1109) * C50776 +
             ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) *
                 C51028) *
                C51049) *
               C459 -
           ((((C33361 * C4712 + C50971 * C4720 + C33360 * C2684 +
               C33358 * C2688) *
                  C50752 +
              (C33361 * C4708 + C50971 * C4713 + C33360 * C2679 +
               C33358 * C2683) *
                  C1109) *
                 C50776 +
             ((C37500 + C37499) * C50752 + (C37498 + C37497) * C1109) *
                 C51028) *
                C50945 +
            (((C41199 + C41200) * C50752 + (C41197 + C41198) * C1109) * C50776 +
             ((C37496 + C37495) * C50752 + (C37494 + C37493) * C1109) *
                 C51028) *
                C51049) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                  C49770 +
              (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                  C51021 -
              (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                 C51028 +
             ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
              (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
                 C50776) *
                C51049 +
            (((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
              C40989 * C49763 - C40990 * C50757) *
                 C51028 +
             (C40991 * C49770 + C40992 * C51021 - C33949 * C49763 -
              C33950 * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C33787 + C33788) * C49763 -
              ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                   C51021 +
               (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                   C49770) +
              (C33789 + C33790) * C50757) *
                 C51028 +
             ((C33791 + C33792) * C49763 -
              ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
              (C33793 + C33794) * C50757) *
                 C50776) *
                C51049 +
            ((C41849 * C49763 -
              ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
              C41850 * C50757) *
                 C51028 +
             ((C34338 + C34337) * C49763 - (C41851 * C51021 + C41852 * C49770) +
              (C34340 + C34339) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C1033 +
          ((((C40991 * C49763 -
              ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
              C40992 * C50757) *
                 C51028 +
             (C41395 * C49763 - (C40990 * C51021 + C40989 * C49770) +
              C41396 * C50757) *
                 C50776) *
                C51049 +
            ((C40993 * C49763 -
              ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
              C40994 * C50757) *
                 C51028 +
             ((C33606 + C33605) * C49763 - (C36354 * C51021 + C36353 * C49770) +
              (C33608 + C33607) * C50757) *
                 C50776) *
                C50945) *
               C51037 +
           ((((C37056 + C37055) * C49770 + (C37054 + C37053) * C51021 -
              C41852 * C49763 - C41851 * C50757) *
                 C51028 +
             (C41849 * C49770 + C41850 * C51021 - (C34337 + C34338) * C49763 -
              (C34339 + C34340) * C50757) *
                 C50776) *
                C51049 +
            (((C37062 + C37061) * C49770 + (C37060 + C37059) * C51021 -
              (C37058 + C37057) * C49763 - (C37064 + C37063) * C50757) *
                 C51028 +
             ((C37057 + C37058) * C49770 + (C37063 + C37064) * C51021 -
              (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
               C33358 * C1580) *
                  C49763 -
              (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
               C33358 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1035 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C1030 -
             (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
             C33411 * C1037 + C33412 * C1032) *
                C51028 +
            ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
             (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
             (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
             C40989 * C1036 - C40990 * C1031 + C41395 * C1037 +
             C41396 * C1032) *
                C51028 +
            (C40991 * C1035 + C40992 * C1030 - C33949 * C1036 - C33950 * C1031 +
             (C33960 + C33959) * C1037 + (C33962 + C33961) * C1032) *
                C50776) *
               C50945) *
              C50810 * C1033 +
          (((C40991 * C1036 -
             ((C36374 + C36373) * C1030 + (C36372 + C36371) * C1035) +
             C40992 * C1031 - C33949 * C1037 - C33950 * C1032) *
                C51028 +
            (C41395 * C1036 - (C40990 * C1030 + C40989 * C1035) +
             C41396 * C1031 - (C33959 + C33960) * C1037 -
             (C33961 + C33962) * C1032) *
                C50776) *
               C51049 +
           ((C40993 * C1036 -
             ((C36378 + C36377) * C1030 + (C36376 + C36375) * C1035) +
             C40994 * C1031 - (C33605 + C33606) * C1037 -
             (C33607 + C33608) * C1032) *
                C51028 +
            ((C33606 + C33605) * C1036 - (C36354 * C1030 + C36353 * C1035) +
             (C33608 + C33607) * C1031 -
             (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
                 C1037 -
             (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
                 C1032) *
                C50776) *
               C50945) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C51028 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C50776) *
               C51049 +
           (((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C51028 +
            (C40991 * C1109 + C40992 * C50752) * C50776) *
               C50945) *
              C50810 * C1105 -
          (((C36354 * C50752 + C36353 * C1109) * C50776 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C51028) *
               C50945 +
           ((C40990 * C50752 + C40989 * C1109) * C50776 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C51028) *
               C51049) *
              C50810 * C1106 +
          ((C37321 * C51028 + (C40993 * C1109 + C40994 * C50752) * C50776) *
               C51049 +
           (((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C51028 +
            ((C36381 + C36382) * C1109 + (C36387 + C36388) * C50752) * C50776) *
               C50945) *
              C50810 * C1107 -
          ((((C33361 * C4297 + C50971 * C4301 + C33360 * C2457 +
              C33358 * C2461) *
                 C50752 +
             (C33361 * C4295 + C50971 * C4298 + C33360 * C2452 +
              C33358 * C2456) *
                 C1109) *
                C50776 +
            ((C37327 + C37326) * C50752 + (C37325 + C37324) * C1109) * C51028) *
               C50945 +
           (((C36388 + C36387) * C50752 + (C36382 + C36381) * C1109) * C50776 +
            C37329 * C51028) *
               C51049) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                  C49770 +
              (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                  C51021 -
              (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                 C51028 +
             ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
              (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
                 C50776) *
                C51049 +
            (((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
              C40989 * C49763 - C40990 * C50757) *
                 C51028 +
             (C40991 * C49770 + C40992 * C51021 - C33949 * C49763 -
              C33950 * C50757) *
                 C50776) *
                C50945) *
               C1687 +
           ((((C33787 + C33788) * C49763 -
              ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                   C51021 +
               (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                   C49770) +
              (C33789 + C33790) * C50757) *
                 C51028 +
             ((C33791 + C33792) * C49763 -
              ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
              (C33793 + C33794) * C50757) *
                 C50776) *
                C51049 +
            ((C41849 * C49763 -
              ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
              C41850 * C50757) *
                 C51028 +
             ((C34338 + C34337) * C49763 - (C41851 * C51021 + C41852 * C49770) +
              (C34340 + C34339) * C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C51036 +
          ((((C40991 * C49763 -
              ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
              C40992 * C50757) *
                 C51028 +
             (C41395 * C49763 - (C40990 * C51021 + C40989 * C49770) +
              C41396 * C50757) *
                 C50776) *
                C51049 +
            ((C40993 * C49763 -
              ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
              C40994 * C50757) *
                 C51028 +
             ((C33606 + C33605) * C49763 - (C36354 * C51021 + C36353 * C49770) +
              (C33608 + C33607) * C50757) *
                 C50776) *
                C50945) *
               C1687 +
           ((((C37056 + C37055) * C49770 + (C37054 + C37053) * C51021 -
              C41852 * C49763 - C41851 * C50757) *
                 C51028 +
             (C41849 * C49770 + C41850 * C51021 - (C34337 + C34338) * C49763 -
              (C34339 + C34340) * C50757) *
                 C50776) *
                C51049 +
            (((C37062 + C37061) * C49770 + (C37060 + C37059) * C51021 -
              (C37058 + C37057) * C49763 - (C37064 + C37063) * C50757) *
                 C51028 +
             ((C37057 + C37058) * C49770 + (C37063 + C37064) * C51021 -
              (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
               C33358 * C1580) *
                  C49763 -
              (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
               C33358 * C1586) *
                  C50757) *
                 C50776) *
                C50945) *
               C50874) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                  C1109 +
              (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) *
                 C50776) *
                C51049 +
            (((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C51028 +
             (C40991 * C1109 + C40992 * C50752) * C50776) *
                C50945) *
               C51083 -
           (((C41851 * C50752 + C41852 * C1109) * C50776 +
             ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) *
                 C51028) *
                C50945 +
            (((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C50776 +
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C50752 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C1109) *
                 C51028) *
                C51049) *
               C51084 +
           ((((C33360 * C467 + C33358 * C482 + C33361 * C1860 +
               C50971 * C1868) *
                  C1109 +
              (C33360 * C483 + C33358 * C497 + C33361 * C1867 +
               C50971 * C1872) *
                  C50752) *
                 C51028 +
             ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) *
                 C50776) *
                C51049 +
            (((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C51028 +
             ((C41198 + C41197) * C1109 + (C41200 + C41199) * C50752) *
                 C50776) *
                C50945) *
               C2103) *
              C51036 +
          (((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C51028 +
             (C41849 * C1109 + C41850 * C50752) * C50776) *
                C51049 +
            (((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C51028 +
             ((C37057 + C37058) * C1109 + (C37063 + C37064) * C50752) *
                 C50776) *
                C50945) *
               C51084 -
           (((C36354 * C50752 + C36353 * C1109) * C50776 +
             ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) *
                 C51028) *
                C50945 +
            ((C40990 * C50752 + C40989 * C1109) * C50776 +
             ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) *
                 C51028) *
                C51049) *
               C51083 -
           ((((C33361 * C4712 + C50971 * C4720 + C33360 * C2684 +
               C33358 * C2688) *
                  C50752 +
              (C33361 * C4708 + C50971 * C4713 + C33360 * C2679 +
               C33358 * C2683) *
                  C1109) *
                 C50776 +
             ((C37500 + C37499) * C50752 + (C37498 + C37497) * C1109) *
                 C51028) *
                C50945 +
            (((C41199 + C41200) * C50752 + (C41197 + C41198) * C1109) * C50776 +
             ((C37496 + C37495) * C50752 + (C37494 + C37493) * C1109) *
                 C51028) *
                C51049) *
               C2103) *
              C50848)) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                  C1109 +
              (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) *
                 C50776) *
                C51049 +
            (((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C51028 +
             (C40991 * C1109 + C40992 * C50752) * C50776) *
                C50945) *
               C1687 -
           (((C41851 * C50752 + C41852 * C1109) * C50776 +
             ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) *
                 C51028) *
                C50945 +
            (((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C50776 +
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C50752 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C1109) *
                 C51028) *
                C51049) *
               C50874) *
              C280 +
          (((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C51028 +
             (C41849 * C1109 + C41850 * C50752) * C50776) *
                C51049 +
            (((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C51028 +
             ((C37057 + C37058) * C1109 + (C37063 + C37064) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C36354 * C50752 + C36353 * C1109) * C50776 +
             ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) *
                 C51028) *
                C50945 +
            ((C40990 * C50752 + C40989 * C1109) * C50776 +
             ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) *
                 C51028) *
                C51049) *
               C1687) *
              C281 +
          (((C37321 * C51028 + (C40993 * C1109 + C40994 * C50752) * C50776) *
                C51049 +
            (((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C51028 +
             ((C36381 + C36382) * C1109 + (C36387 + C36388) * C50752) *
                 C50776) *
                C50945) *
               C1687 -
           ((((C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
               C33358 * C3234) *
                  C50752 +
              (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
               C33358 * C3229) *
                  C1109) *
                 C50776 +
             ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) *
                 C51028) *
                C50945 +
            (((C37064 + C37063) * C50752 + (C37058 + C37057) * C1109) * C50776 +
             C38011 * C51028) *
                C51049) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1035 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C1030 -
             (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
             C33411 * C1037 + C33412 * C1032) *
                C51028 +
            ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
             (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
             (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
             C40989 * C1036 - C40990 * C1031 + C41395 * C1037 +
             C41396 * C1032) *
                C51028 +
            (C40991 * C1035 + C40992 * C1030 - C33949 * C1036 - C33950 * C1031 +
             (C33960 + C33959) * C1037 + (C33962 + C33961) * C1032) *
                C50776) *
               C50945) *
              C1687 +
          ((((C33787 + C33788) * C1036 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C1030 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C1035) +
             (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
                C51028 +
            ((C33791 + C33792) * C1036 -
             ((C33790 + C33789) * C1030 + (C33788 + C33787) * C1035) +
             (C33793 + C33794) * C1031 - (C34119 + C34120) * C1037 -
             (C34121 + C34122) * C1032) *
                C50776) *
               C51049 +
           ((C41849 * C1036 -
             ((C37053 + C37054) * C1030 + (C37055 + C37056) * C1035) +
             C41850 * C1031 - (C34337 + C34338) * C1037 -
             (C34339 + C34340) * C1032) *
                C51028 +
            ((C34338 + C34337) * C1036 - (C41851 * C1030 + C41852 * C1035) +
             (C34340 + C34339) * C1031 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C1037 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C1032) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C51028 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C50776) *
               C51049 +
           (((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C51028 +
            (C40991 * C1109 + C40992 * C50752) * C50776) *
               C50945) *
              C1853 -
          (((C41851 * C50752 + C41852 * C1109) * C50776 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C51028) *
               C50945 +
           (((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C50776 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C51028) *
               C51049) *
              C1854 +
          ((((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C51028 +
            ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) * C50776) *
               C51049 +
           (((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C51028 +
            ((C41198 + C41197) * C1109 + (C41200 + C41199) * C50752) * C50776) *
               C50945) *
              C1855 -
          ((((C33361 * C6680 + C50971 * C6684 + C33360 * C4716 +
              C33358 * C4722) *
                 C50752 +
             (C33361 * C6678 + C50971 * C6681 + C33360 * C4710 +
              C33358 * C4717) *
                 C1109) *
                C50776 +
            ((C33361 * C6682 + C50971 * C6685 + C33360 * C4718 +
              C33358 * C4723) *
                 C50752 +
             (C33361 * C6679 + C50971 * C6683 + C33360 * C4711 +
              C33358 * C4719) *
                 C1109) *
                C51028) *
               C50945 +
           (((C33361 * C5702 + C50971 * C5706 + C33360 * C1865 +
              C33358 * C1871) *
                 C50752 +
             (C33361 * C5697 + C50971 * C5701 + C33360 * C1859 +
              C33358 * C1866) *
                 C1109) *
                C50776 +
            ((C33361 * C5700 + C50971 * C5705 + C33360 * C1867 +
              C33358 * C1872) *
                 C50752 +
             (C33361 * C5696 + C50971 * C5699 + C33360 * C1860 +
              C33358 * C1868) *
                 C1109) *
                C51028) *
               C51049) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C51028 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
             C40989 * C49763 - C40990 * C50757) *
                C51028 +
            (C40991 * C49770 + C40992 * C51021 - C33949 * C49763 -
             C33950 * C50757) *
                C50776) *
               C50945) *
              C51083 +
          ((((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C51028 +
            ((C33791 + C33792) * C49763 -
             ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
             (C33793 + C33794) * C50757) *
                C50776) *
               C51049 +
           ((C41849 * C49763 -
             ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
             C41850 * C50757) *
                C51028 +
            ((C34338 + C34337) * C49763 - (C41851 * C51021 + C41852 * C49770) +
             (C34340 + C34339) * C50757) *
                C50776) *
               C50945) *
              C51084 +
          ((((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C49770 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C51021 -
             (C33795 + C33796) * C49763 - (C33797 + C33798) * C50757) *
                C51028 +
            ((C33796 + C33795) * C49770 + (C33798 + C33797) * C51021 -
             (C33799 + C33800) * C49763 - (C33801 + C33802) * C50757) *
                C50776) *
               C51049 +
           (((C37493 + C37494) * C49770 + (C37495 + C37496) * C51021 -
             (C41197 + C41198) * C49763 - (C41199 + C41200) * C50757) *
                C51028 +
            ((C41198 + C41197) * C49770 + (C41200 + C41199) * C51021 -
             (C33361 * C6266 + C50971 * C6267 + C33360 * C1225 +
              C33358 * C1231) *
                 C49763 -
             (C33361 * C6268 + C50971 * C6269 + C33360 * C1230 +
              C33358 * C1237) *
                 C50757) *
                C50776) *
               C50945) *
              C2103) *
         C50798) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1035 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C1030 -
             (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
             C33411 * C1037 + C33412 * C1032) *
                C51028 +
            ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
             (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
             (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
                C50776) *
               C51049 +
           (((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
             C40989 * C1036 - C40990 * C1031 + C41395 * C1037 +
             C41396 * C1032) *
                C51028 +
            (C40991 * C1035 + C40992 * C1030 - C33949 * C1036 - C33950 * C1031 +
             (C33960 + C33959) * C1037 + (C33962 + C33961) * C1032) *
                C50776) *
               C50945) *
              C1687 +
          ((((C33787 + C33788) * C1036 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C1030 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C1035) +
             (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
                C51028 +
            ((C33791 + C33792) * C1036 -
             ((C33790 + C33789) * C1030 + (C33788 + C33787) * C1035) +
             (C33793 + C33794) * C1031 - (C34119 + C34120) * C1037 -
             (C34121 + C34122) * C1032) *
                C50776) *
               C51049 +
           ((C41849 * C1036 -
             ((C37053 + C37054) * C1030 + (C37055 + C37056) * C1035) +
             C41850 * C1031 - (C34337 + C34338) * C1037 -
             (C34339 + C34340) * C1032) *
                C51028 +
            ((C34338 + C34337) * C1036 - (C41851 * C1030 + C41852 * C1035) +
             (C34340 + C34339) * C1031 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C1037 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C1032) *
                C50776) *
               C50945) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                  C1109 +
              (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                  C50752) *
                 C51028 +
             ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) *
                 C50776) *
                C51049 +
            (((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C51028 +
             (C40991 * C1109 + C40992 * C50752) * C50776) *
                C50945) *
               C1687 -
           (((C41851 * C50752 + C41852 * C1109) * C50776 +
             ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) *
                 C51028) *
                C50945 +
            (((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C50776 +
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C50752 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C1109) *
                 C51028) *
                C51049) *
               C50874) *
              C280 +
          (((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C51028 +
             (C41849 * C1109 + C41850 * C50752) * C50776) *
                C51049 +
            (((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C51028 +
             ((C37057 + C37058) * C1109 + (C37063 + C37064) * C50752) *
                 C50776) *
                C50945) *
               C50874 -
           (((C36354 * C50752 + C36353 * C1109) * C50776 +
             ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) *
                 C51028) *
                C50945 +
            ((C40990 * C50752 + C40989 * C1109) * C50776 +
             ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) *
                 C51028) *
                C51049) *
               C1687) *
              C281 +
          (((C37321 * C51028 + (C40993 * C1109 + C40994 * C50752) * C50776) *
                C51049 +
            (((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C51028 +
             ((C36381 + C36382) * C1109 + (C36387 + C36388) * C50752) *
                 C50776) *
                C50945) *
               C1687 -
           ((((C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
               C33358 * C3234) *
                  C50752 +
              (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
               C33358 * C3229) *
                  C1109) *
                 C50776 +
             ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) *
                 C51028) *
                C50945 +
            (((C37064 + C37063) * C50752 + (C37058 + C37057) * C1109) * C50776 +
             C38011 * C51028) *
                C51049) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C641 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C51077 -
                     (C44321 + C44322 + C44323) * C642 -
                     (C44324 + C44325 + C44326) * C51078 +
                     (C44327 + C44328 + C44329) * C643 +
                     (C44330 + C44331 + C44332) * C638) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C641 +
                     (C47266 + C47267 + C47268) * C51077 -
                     (C44511 + C44510 + C44509) * C642 -
                     (C44514 + C44513 + C44512) * C51078 +
                     (C44863 + C44862 + C44861) * C643 +
                     (C44866 + C44865 + C44864) * C638) *
                        C50771 * C50945) *
                       C50810 * C51036 +
                   (((C44509 + C44510 + C44511) * C642 -
                     ((C47268 + C47267 + C47266) * C51077 +
                      (C47265 + C47264 + C47263) * C641) +
                     (C44512 + C44513 + C44514) * C51078 -
                     (C44861 + C44862 + C44863) * C643 -
                     (C44864 + C44865 + C44866) * C638) *
                        C50771 * C51049 +
                    ((C44517 + C44516 + C44515) * C642 -
                     ((C47269 + C47270 + C47271) * C51077 +
                      (C47272 + C47273 + C47274) * C641) +
                     (C44520 + C44519 + C44518) * C51078 -
                     (C44283 * C2680 + C44280 * C2685 + C44282 * C1574 +
                      C51088 * C1580 + C44281 * C292 + C51087 * C309) *
                         C643 -
                     (C44283 * C2686 + C44280 * C2689 + C44282 * C1579 +
                      C51088 * C1586 + C44281 * C310 + C51087 * C322) *
                         C638) *
                        C50771 * C50945) *
                       C50810 * C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C283 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C278 -
                      (C44321 + C44322 + C44323) * C284 -
                      (C44324 + C44325 + C44326) * C50757) *
                         C50771 * C51049 +
                     ((C47263 + C47264 + C47265) * C283 +
                      (C47266 + C47267 + C47268) * C278 -
                      (C44511 + C44510 + C44509) * C284 -
                      (C44514 + C44513 + C44512) * C50757) *
                         C50771 * C50945) *
                        C51037 +
                    (((C44691 + C44692 + C44693) * C284 -
                      ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                        C51088 * C497 + C44281 * C473 + C51087 * C492) *
                           C278 +
                       (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                        C51088 * C482 + C44281 * C463 + C51087 * C474) *
                           C283) +
                      (C44694 + C44695 + C44696) * C50757) *
                         C50771 * C51049 +
                     ((C45239 + C45238 + C45237) * C284 -
                      ((C47919 + C47920 + C47921) * C278 +
                       (C47922 + C47923 + C47924) * C283) +
                      (C45242 + C45241 + C45240) * C50757) *
                         C50771 * C50945) *
                        C50874) *
                       C51036 +
                   ((((C44509 + C44510 + C44511) * C284 -
                      ((C47268 + C47267 + C47266) * C278 +
                       (C47265 + C47264 + C47263) * C283) +
                      (C44512 + C44513 + C44514) * C50757) *
                         C50771 * C51049 +
                     ((C44517 + C44516 + C44515) * C284 -
                      ((C47269 + C47270 + C47271) * C278 +
                       (C47272 + C47273 + C47274) * C283) +
                      (C44520 + C44519 + C44518) * C50757) *
                         C50771 * C50945) *
                        C51037 +
                    (((C47924 + C47923 + C47922) * C283 +
                      (C47921 + C47920 + C47919) * C278 -
                      (C45237 + C45238 + C45239) * C284 -
                      (C45240 + C45241 + C45242) * C50757) *
                         C50771 * C51049 +
                     ((C44281 * C1576 + C51087 * C1584 + C44282 * C2678 +
                       C51088 * C2681 + C44283 * C4709 + C44280 * C4715) *
                          C283 +
                      (C44281 * C1583 + C51087 * C1588 + C44282 * C2682 +
                       C51088 * C2687 + C44283 * C4714 + C44280 * C4721) *
                          C278 -
                      (C44283 * C4708 + C44280 * C4713 + C44282 * C2679 +
                       C51088 * C2683 + C44281 * C1575 + C51087 * C1582) *
                          C284 -
                      (C44283 * C4712 + C44280 * C4720 + C44282 * C2684 +
                       C51088 * C2688 + C44281 * C1581 + C51087 * C1587) *
                          C50757) *
                         C50771 * C50945) *
                        C50874) *
                       C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C283 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C283 +
                     (C47266 + C47267 + C47268) * C278 -
                     (C44511 + C44510 + C44509) * C284 -
                     (C44514 + C44513 + C44512) * C50757) *
                        C50771 * C50945) *
                       C50810 * C280 +
                   (((C44509 + C44510 + C44511) * C284 -
                     ((C47268 + C47267 + C47266) * C278 +
                      (C47265 + C47264 + C47263) * C283) +
                     (C44512 + C44513 + C44514) * C50757) *
                        C50771 * C51049 +
                    ((C44517 + C44516 + C44515) * C284 -
                     ((C47269 + C47270 + C47271) * C278 +
                      (C47272 + C47273 + C47274) * C283) +
                     (C44520 + C44519 + C44518) * C50757) *
                        C50771 * C50945) *
                       C50810 * C281 +
                   (((C47274 + C47273 + C47272) * C283 +
                     (C47271 + C47270 + C47269) * C278 -
                     (C44515 + C44516 + C44517) * C284 -
                     (C44518 + C44519 + C44520) * C50757) *
                        C50771 * C51049 +
                    ((C44281 * C1113 + C51087 * C1121 + C44282 * C3224 +
                      C51088 * C3227 + C44283 * C3725 + C44280 * C3729) *
                         C283 +
                     (C44281 * C1120 + C51087 * C1125 + C44282 * C3228 +
                      C51088 * C3233 + C44283 * C3728 + C44280 * C3731) *
                         C278 -
                     (C44283 * C3724 + C44280 * C3727 + C44282 * C3225 +
                      C51088 * C3229 + C44281 * C1112 + C51087 * C1119) *
                         C284 -
                     (C44283 * C3726 + C44280 * C3730 + C44282 * C3230 +
                      C51088 * C3234 + C44281 * C1118 + C51087 * C1124) *
                         C50757) *
                        C50771 * C50945) *
                       C50810 * C282)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                     C51088 * C474 + C44283 * C467 + C44280 * C482) *
                        C118 +
                    (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                     C51088 * C492 + C44283 * C483 + C44280 * C497) *
                        C106 -
                    (C44321 + C44322 + C44323) * C119 -
                    (C44324 + C44325 + C44326) * C107 +
                    (C44327 + C44328 + C44329) * C120 +
                    (C44330 + C44331 + C44332) * C108 -
                    (C44333 + C44334 + C44335) * C121 -
                    (C44336 + C44337 + C44338) * C109) *
                       C50771 * C51049 +
                   ((C44281 * C286 + C51087 * C297 + C44282 * C894 +
                     C51088 * C899 + C44283 * C1227 + C44280 * C1235) *
                        C118 +
                    (C44281 * C296 + C51087 * C315 + C44282 * C900 +
                     C51088 * C909 + C44283 * C1234 + C44280 * C1239) *
                        C106 -
                    (C44511 + C44510 + C44509) * C119 -
                    (C44514 + C44513 + C44512) * C107 +
                    (C44863 + C44862 + C44861) * C120 +
                    (C44866 + C44865 + C44864) * C108 -
                    (C44283 * C1224 + C44280 * C1229 + C44282 * C897 +
                     C51088 * C905 + C44281 * C288 + C51087 * C301) *
                        C121 -
                    (C44283 * C1228 + C44280 * C1236 + C44282 * C906 +
                     C51088 * C912 + C44281 * C302 + C51087 * C318) *
                        C109) *
                       C50771 * C50945) *
                  C50810 * C50798) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C283 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C283 +
                     (C47266 + C47267 + C47268) * C278 -
                     (C44511 + C44510 + C44509) * C284 -
                     (C44514 + C44513 + C44512) * C50757) *
                        C50771 * C50945) *
                       C459 +
                   (((C44691 + C44692 + C44693) * C284 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C278 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C283) +
                     (C44694 + C44695 + C44696) * C50757) *
                        C50771 * C51049 +
                    ((C45239 + C45238 + C45237) * C284 -
                     ((C44283 * C4718 + C44280 * C4723 + C44282 * C1234 +
                       C51088 * C1239 + C44281 * C900 + C51087 * C909) *
                          C278 +
                      (C44283 * C4711 + C44280 * C4719 + C44282 * C1227 +
                       C51088 * C1235 + C44281 * C894 + C51087 * C899) *
                          C283) +
                     (C45242 + C45241 + C45240) * C50757) *
                        C50771 * C50945) *
                       C460 +
                   (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                      C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                         C283 +
                     (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                      C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                         C278 -
                     (C44697 + C44698 + C44699) * C284 -
                     (C44700 + C44701 + C44702) * C50757) *
                        C50771 * C51049 +
                    ((C44281 * C1227 + C51087 * C1235 + C44282 * C4711 +
                      C51088 * C4719 + C44283 * C6679 + C44280 * C6683) *
                         C283 +
                     (C44281 * C1234 + C51087 * C1239 + C44282 * C4718 +
                      C51088 * C4723 + C44283 * C6682 + C44280 * C6685) *
                         C278 -
                     (C44283 * C6678 + C44280 * C6681 + C44282 * C4710 +
                      C51088 * C4717 + C44281 * C1226 + C51087 * C1233) *
                         C284 -
                     (C44283 * C6680 + C44280 * C6684 + C44282 * C4716 +
                      C51088 * C4722 + C44281 * C1232 + C51087 * C1238) *
                         C50757) *
                        C50771 * C50945) *
                       C461) *
                  C50798) /
                     (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C641 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C51077 -
                     (C44321 + C44322 + C44323) * C642 -
                     (C44324 + C44325 + C44326) * C51078 +
                     (C44327 + C44328 + C44329) * C643 +
                     (C44330 + C44331 + C44332) * C638) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C641 +
                     (C47266 + C47267 + C47268) * C51077 -
                     (C44511 + C44510 + C44509) * C642 -
                     (C44514 + C44513 + C44512) * C51078 +
                     (C44863 + C44862 + C44861) * C643 +
                     (C44866 + C44865 + C44864) * C638) *
                        C50771 * C50945) *
                       C51037 +
                   (((C44691 + C44692 + C44693) * C642 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C51077 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C641) +
                     (C44694 + C44695 + C44696) * C51078 -
                     (C45025 + C45026 + C45027) * C643 -
                     (C45028 + C45029 + C45030) * C638) *
                        C50771 * C51049 +
                    ((C45239 + C45238 + C45237) * C642 -
                     ((C44283 * C4718 + C44280 * C4723 + C44282 * C1234 +
                       C51088 * C1239 + C44281 * C900 + C51087 * C909) *
                          C51077 +
                      (C44283 * C4711 + C44280 * C4719 + C44282 * C1227 +
                       C51088 * C1235 + C44281 * C894 + C51087 * C899) *
                          C641) +
                     (C45242 + C45241 + C45240) * C51078 -
                     (C44283 * C6266 + C44280 * C6267 + C44282 * C1225 +
                      C51088 * C1231 + C44281 * C896 + C51087 * C903) *
                         C643 -
                     (C44283 * C6268 + C44280 * C6269 + C44282 * C1230 +
                      C51088 * C1237 + C44281 * C904 + C51087 * C911) *
                         C638) *
                        C50771 * C50945) *
                       C50874) *
                  C50798) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                     C51088 * C474 + C44283 * C467 + C44280 * C482) *
                        C118 +
                    (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                     C51088 * C492 + C44283 * C483 + C44280 * C497) *
                        C106 -
                    (C44321 + C44322 + C44323) * C119 -
                    (C44324 + C44325 + C44326) * C107 +
                    (C44327 + C44328 + C44329) * C120 +
                    (C44330 + C44331 + C44332) * C108 -
                    (C44333 + C44334 + C44335) * C121 -
                    (C44336 + C44337 + C44338) * C109) *
                       C50771 * C51049 +
                   ((C44281 * C286 + C51087 * C297 + C44282 * C894 +
                     C51088 * C899 + C44283 * C1227 + C44280 * C1235) *
                        C118 +
                    (C44281 * C296 + C51087 * C315 + C44282 * C900 +
                     C51088 * C909 + C44283 * C1234 + C44280 * C1239) *
                        C106 -
                    (C44511 + C44510 + C44509) * C119 -
                    (C44514 + C44513 + C44512) * C107 +
                    (C44863 + C44862 + C44861) * C120 +
                    (C44866 + C44865 + C44864) * C108 -
                    (C44283 * C1224 + C44280 * C1229 + C44282 * C897 +
                     C51088 * C905 + C44281 * C288 + C51087 * C301) *
                        C121 -
                    (C44283 * C1228 + C44280 * C1236 + C44282 * C906 +
                     C51088 * C912 + C44281 * C302 + C51087 * C318) *
                        C109) *
                       C50771 * C50945) *
                  C50810 * C50798) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C283 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C283 +
                     (C47266 + C47267 + C47268) * C278 -
                     (C44511 + C44510 + C44509) * C284 -
                     (C44514 + C44513 + C44512) * C50757) *
                        C50771 * C50945) *
                       C50810 * C280 +
                   (((C44509 + C44510 + C44511) * C284 -
                     ((C47268 + C47267 + C47266) * C278 +
                      (C47265 + C47264 + C47263) * C283) +
                     (C44512 + C44513 + C44514) * C50757) *
                        C50771 * C51049 +
                    ((C44517 + C44516 + C44515) * C284 -
                     ((C47269 + C47270 + C47271) * C278 +
                      (C47272 + C47273 + C47274) * C283) +
                     (C44520 + C44519 + C44518) * C50757) *
                        C50771 * C50945) *
                       C50810 * C281 +
                   (((C47274 + C47273 + C47272) * C283 +
                     (C47271 + C47270 + C47269) * C278 -
                     (C44515 + C44516 + C44517) * C284 -
                     (C44518 + C44519 + C44520) * C50757) *
                        C50771 * C51049 +
                    ((C44281 * C1113 + C51087 * C1121 + C44282 * C3224 +
                      C51088 * C3227 + C44283 * C3725 + C44280 * C3729) *
                         C283 +
                     (C44281 * C1120 + C51087 * C1125 + C44282 * C3228 +
                      C51088 * C3233 + C44283 * C3728 + C44280 * C3731) *
                         C278 -
                     (C44283 * C3724 + C44280 * C3727 + C44282 * C3225 +
                      C51088 * C3229 + C44281 * C1112 + C51087 * C1119) *
                         C284 -
                     (C44283 * C3726 + C44280 * C3730 + C44282 * C3230 +
                      C51088 * C3234 + C44281 * C1118 + C51087 * C1124) *
                         C50757) *
                        C50771 * C50945) *
                       C50810 * C282)) /
                     (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C49770 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C51021 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C49770 +
                     (C47266 + C47267 + C47268) * C51021 -
                     (C44511 + C44510 + C44509) * C49763 -
                     (C44514 + C44513 + C44512) * C50757) *
                        C50771 * C50945) *
                       C50810 * C51081 +
                   (((C44509 + C44510 + C44511) * C49763 -
                     ((C47268 + C47267 + C47266) * C51021 +
                      (C47265 + C47264 + C47263) * C49770) +
                     (C44512 + C44513 + C44514) * C50757) *
                        C50771 * C51049 +
                    ((C44517 + C44516 + C44515) * C49763 -
                     ((C47269 + C47270 + C47271) * C51021 +
                      (C47272 + C47273 + C47274) * C49770) +
                     (C44520 + C44519 + C44518) * C50757) *
                        C50771 * C50945) *
                       C50810 * C51082 +
                   (((C47274 + C47273 + C47272) * C49770 +
                     (C47271 + C47270 + C47269) * C51021 -
                     (C44515 + C44516 + C44517) * C49763 -
                     (C44518 + C44519 + C44520) * C50757) *
                        C50771 * C51049 +
                    ((C48181 + C48182 + C48183) * C49770 +
                     (C48184 + C48185 + C48186) * C51021 -
                     (C44283 * C3724 + C44280 * C3727 + C44282 * C3225 +
                      C51088 * C3229 + C44281 * C1112 + C51087 * C1119) *
                         C49763 -
                     (C44283 * C3726 + C44280 * C3730 + C44282 * C3230 +
                      C51088 * C3234 + C44281 * C1118 + C51087 * C1124) *
                         C50757) *
                        C50771 * C50945) *
                       C50810 * C1342)) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C50771 * C51049 +
                     ((C47263 + C47264 + C47265) * C1109 +
                      (C47266 + C47267 + C47268) * C50752) *
                         C50771 * C50945) *
                        C51037 -
                    (((C47919 + C47920 + C47921) * C50752 +
                      (C47922 + C47923 + C47924) * C1109) *
                         C50771 * C50945 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C50771 * C51049) *
                        C50874) *
                       C51081 +
                   ((((C47924 + C47923 + C47922) * C1109 +
                      (C47921 + C47920 + C47919) * C50752) *
                         C50771 * C51049 +
                     ((C48849 + C48850 + C48851) * C1109 +
                      (C48852 + C48853 + C48854) * C50752) *
                         C50771 * C50945) *
                        C50874 -
                    (((C47269 + C47270 + C47271) * C50752 +
                      (C47272 + C47273 + C47274) * C1109) *
                         C50771 * C50945 +
                     ((C47268 + C47267 + C47266) * C50752 +
                      (C47265 + C47264 + C47263) * C1109) *
                         C50771 * C51049) *
                        C51037) *
                       C51082 +
                   ((((C47274 + C47273 + C47272) * C1109 +
                      (C47271 + C47270 + C47269) * C50752) *
                         C50771 * C51049 +
                     ((C48181 + C48182 + C48183) * C1109 +
                      (C48184 + C48185 + C48186) * C50752) *
                         C50771 * C50945) *
                        C51037 -
                    (((C44283 * C21349 + C44280 * C21351 + C44282 * C3728 +
                       C51088 * C3731 + C44281 * C3228 + C51087 * C3233) *
                          C50752 +
                      (C44283 * C21348 + C44280 * C21350 + C44282 * C3725 +
                       C51088 * C3729 + C44281 * C3224 + C51087 * C3227) *
                          C1109) *
                         C50771 * C50945 +
                     ((C48854 + C48853 + C48852) * C50752 +
                      (C48851 + C48850 + C48849) * C1109) *
                         C50771 * C51049) *
                        C50874) *
                       C1342)) /
                 (p * q * std::sqrt(p + q));
    d2ee[172] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1109 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C50752) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C1109 +
                     (C47266 + C47267 + C47268) * C50752) *
                        C50771 * C50945) *
                       C50810 * C1105 -
                   (((C47269 + C47270 + C47271) * C50752 +
                     (C47272 + C47273 + C47274) * C1109) *
                        C50771 * C50945 +
                    ((C47268 + C47267 + C47266) * C50752 +
                     (C47265 + C47264 + C47263) * C1109) *
                        C50771 * C51049) *
                       C50810 * C1106 +
                   (((C47274 + C47273 + C47272) * C1109 +
                     (C47271 + C47270 + C47269) * C50752) *
                        C50771 * C51049 +
                    ((C48181 + C48182 + C48183) * C1109 +
                     (C48184 + C48185 + C48186) * C50752) *
                        C50771 * C50945) *
                       C50810 * C1107 -
                   (((C44283 * C20721 + C44280 * C20723 + C44282 * C4299 +
                      C51088 * C4302 + C44281 * C2455 + C51087 * C2460) *
                         C50752 +
                     (C44283 * C20720 + C44280 * C20722 + C44282 * C4296 +
                      C51088 * C4300 + C44281 * C2451 + C51087 * C2454) *
                         C1109) *
                        C50771 * C50945 +
                    ((C48186 + C48185 + C48184) * C50752 +
                     (C48183 + C48182 + C48181) * C1109) *
                        C50771 * C51049) *
                       C50810 * C1108)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1035 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C1030 -
                     (C44321 + C44322 + C44323) * C1036 -
                     (C44324 + C44325 + C44326) * C1031 +
                     (C44327 + C44328 + C44329) * C1037 +
                     (C44330 + C44331 + C44332) * C1032) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C1035 +
                     (C47266 + C47267 + C47268) * C1030 -
                     (C44511 + C44510 + C44509) * C1036 -
                     (C44514 + C44513 + C44512) * C1031 +
                     (C44863 + C44862 + C44861) * C1037 +
                     (C44866 + C44865 + C44864) * C1032) *
                        C50771 * C50945) *
                       C50810 * C1033 +
                   (((C44509 + C44510 + C44511) * C1036 -
                     ((C47268 + C47267 + C47266) * C1030 +
                      (C47265 + C47264 + C47263) * C1035) +
                     (C44512 + C44513 + C44514) * C1031 -
                     (C44861 + C44862 + C44863) * C1037 -
                     (C44864 + C44865 + C44866) * C1032) *
                        C50771 * C51049 +
                    ((C44517 + C44516 + C44515) * C1036 -
                     ((C47269 + C47270 + C47271) * C1030 +
                      (C47272 + C47273 + C47274) * C1035) +
                     (C44520 + C44519 + C44518) * C1031 -
                     (C44283 * C2680 + C44280 * C2685 + C44282 * C1574 +
                      C51088 * C1580 + C44281 * C292 + C51087 * C309) *
                         C1037 -
                     (C44283 * C2686 + C44280 * C2689 + C44282 * C1579 +
                      C51088 * C1586 + C44281 * C310 + C51087 * C322) *
                         C1032) *
                        C50771 * C50945) *
                       C50810 * C50848)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C50771 * C51049 +
                     ((C47263 + C47264 + C47265) * C1109 +
                      (C47266 + C47267 + C47268) * C50752) *
                         C50771 * C50945) *
                        C459 -
                    (((C47919 + C47920 + C47921) * C50752 +
                      (C47922 + C47923 + C47924) * C1109) *
                         C50771 * C50945 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C50771 * C51049) *
                        C460 +
                    (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                       C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                          C1109 +
                      (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                       C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                          C50752) *
                         C50771 * C51049 +
                     ((C48345 + C48346 + C48347) * C1109 +
                      (C48348 + C48349 + C48350) * C50752) *
                         C50771 * C50945) *
                        C461) *
                       C1033 +
                   ((((C47924 + C47923 + C47922) * C1109 +
                      (C47921 + C47920 + C47919) * C50752) *
                         C50771 * C51049 +
                     ((C44281 * C1576 + C51087 * C1584 + C44282 * C2678 +
                       C51088 * C2681 + C44283 * C4709 + C44280 * C4715) *
                          C1109 +
                      (C44281 * C1583 + C51087 * C1588 + C44282 * C2682 +
                       C51088 * C2687 + C44283 * C4714 + C44280 * C4721) *
                          C50752) *
                         C50771 * C50945) *
                        C460 -
                    (((C47269 + C47270 + C47271) * C50752 +
                      (C47272 + C47273 + C47274) * C1109) *
                         C50771 * C50945 +
                     ((C47268 + C47267 + C47266) * C50752 +
                      (C47265 + C47264 + C47263) * C1109) *
                         C50771 * C51049) *
                        C459 -
                    (((C44283 * C23017 + C44280 * C23019 + C44282 * C4714 +
                       C51088 * C4721 + C44281 * C2682 + C51087 * C2687) *
                          C50752 +
                      (C44283 * C23016 + C44280 * C23018 + C44282 * C4709 +
                       C51088 * C4715 + C44281 * C2678 + C51087 * C2681) *
                          C1109) *
                         C50771 * C50945 +
                     ((C48350 + C48349 + C48348) * C50752 +
                      (C48347 + C48346 + C48345) * C1109) *
                         C50771 * C51049) *
                        C461) *
                       C50848)) /
                     (p * q * std::sqrt(p + q));
    d2ee[173] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C49770 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C51021 -
                      (C44321 + C44322 + C44323) * C49763 -
                      (C44324 + C44325 + C44326) * C50757) *
                         C50771 * C51049 +
                     ((C47263 + C47264 + C47265) * C49770 +
                      (C47266 + C47267 + C47268) * C51021 -
                      (C44511 + C44510 + C44509) * C49763 -
                      (C44514 + C44513 + C44512) * C50757) *
                         C50771 * C50945) *
                        C51037 +
                    (((C44691 + C44692 + C44693) * C49763 -
                      ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                        C51088 * C497 + C44281 * C473 + C51087 * C492) *
                           C51021 +
                       (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                        C51088 * C482 + C44281 * C463 + C51087 * C474) *
                           C49770) +
                      (C44694 + C44695 + C44696) * C50757) *
                         C50771 * C51049 +
                     ((C45239 + C45238 + C45237) * C49763 -
                      ((C47919 + C47920 + C47921) * C51021 +
                       (C47922 + C47923 + C47924) * C49770) +
                      (C45242 + C45241 + C45240) * C50757) *
                         C50771 * C50945) *
                        C50874) *
                       C1033 +
                   ((((C44509 + C44510 + C44511) * C49763 -
                      ((C47268 + C47267 + C47266) * C51021 +
                       (C47265 + C47264 + C47263) * C49770) +
                      (C44512 + C44513 + C44514) * C50757) *
                         C50771 * C51049 +
                     ((C44517 + C44516 + C44515) * C49763 -
                      ((C47269 + C47270 + C47271) * C51021 +
                       (C47272 + C47273 + C47274) * C49770) +
                      (C44520 + C44519 + C44518) * C50757) *
                         C50771 * C50945) *
                        C51037 +
                    (((C47924 + C47923 + C47922) * C49770 +
                      (C47921 + C47920 + C47919) * C51021 -
                      (C45237 + C45238 + C45239) * C49763 -
                      (C45240 + C45241 + C45242) * C50757) *
                         C50771 * C51049 +
                     ((C44281 * C1576 + C51087 * C1584 + C44282 * C2678 +
                       C51088 * C2681 + C44283 * C4709 + C44280 * C4715) *
                          C49770 +
                      (C44281 * C1583 + C51087 * C1588 + C44282 * C2682 +
                       C51088 * C2687 + C44283 * C4714 + C44280 * C4721) *
                          C51021 -
                      (C44283 * C4708 + C44280 * C4713 + C44282 * C2679 +
                       C51088 * C2683 + C44281 * C1575 + C51087 * C1582) *
                          C49763 -
                      (C44283 * C4712 + C44280 * C4720 + C44282 * C2684 +
                       C51088 * C2688 + C44281 * C1581 + C51087 * C1587) *
                          C50757) *
                         C50771 * C50945) *
                        C50874) *
                       C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[174] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1035 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C1030 -
                     (C44321 + C44322 + C44323) * C1036 -
                     (C44324 + C44325 + C44326) * C1031 +
                     (C44327 + C44328 + C44329) * C1037 +
                     (C44330 + C44331 + C44332) * C1032) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C1035 +
                     (C47266 + C47267 + C47268) * C1030 -
                     (C44511 + C44510 + C44509) * C1036 -
                     (C44514 + C44513 + C44512) * C1031 +
                     (C44863 + C44862 + C44861) * C1037 +
                     (C44866 + C44865 + C44864) * C1032) *
                        C50771 * C50945) *
                       C50810 * C1033 +
                   (((C44509 + C44510 + C44511) * C1036 -
                     ((C47268 + C47267 + C47266) * C1030 +
                      (C47265 + C47264 + C47263) * C1035) +
                     (C44512 + C44513 + C44514) * C1031 -
                     (C44861 + C44862 + C44863) * C1037 -
                     (C44864 + C44865 + C44866) * C1032) *
                        C50771 * C51049 +
                    ((C44517 + C44516 + C44515) * C1036 -
                     ((C47269 + C47270 + C47271) * C1030 +
                      (C47272 + C47273 + C47274) * C1035) +
                     (C44520 + C44519 + C44518) * C1031 -
                     (C44283 * C2680 + C44280 * C2685 + C44282 * C1574 +
                      C51088 * C1580 + C44281 * C292 + C51087 * C309) *
                         C1037 -
                     (C44283 * C2686 + C44280 * C2689 + C44282 * C1579 +
                      C51088 * C1586 + C44281 * C310 + C51087 * C322) *
                         C1032) *
                        C50771 * C50945) *
                       C50810 * C50848)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1109 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C50752) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C1109 +
                     (C47266 + C47267 + C47268) * C50752) *
                        C50771 * C50945) *
                       C50810 * C1105 -
                   (((C47269 + C47270 + C47271) * C50752 +
                     (C47272 + C47273 + C47274) * C1109) *
                        C50771 * C50945 +
                    ((C47268 + C47267 + C47266) * C50752 +
                     (C47265 + C47264 + C47263) * C1109) *
                        C50771 * C51049) *
                       C50810 * C1106 +
                   (((C47274 + C47273 + C47272) * C1109 +
                     (C47271 + C47270 + C47269) * C50752) *
                        C50771 * C51049 +
                    ((C48181 + C48182 + C48183) * C1109 +
                     (C48184 + C48185 + C48186) * C50752) *
                        C50771 * C50945) *
                       C50810 * C1107 -
                   (((C44283 * C20721 + C44280 * C20723 + C44282 * C4299 +
                      C51088 * C4302 + C44281 * C2455 + C51087 * C2460) *
                         C50752 +
                     (C44283 * C20720 + C44280 * C20722 + C44282 * C4296 +
                      C51088 * C4300 + C44281 * C2451 + C51087 * C2454) *
                         C1109) *
                        C50771 * C50945 +
                    ((C48186 + C48185 + C48184) * C50752 +
                     (C48183 + C48182 + C48181) * C1109) *
                        C50771 * C51049) *
                       C50810 * C1108)) /
                     (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C49770 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C51021 -
                      (C44321 + C44322 + C44323) * C49763 -
                      (C44324 + C44325 + C44326) * C50757) *
                         C50771 * C51049 +
                     ((C47263 + C47264 + C47265) * C49770 +
                      (C47266 + C47267 + C47268) * C51021 -
                      (C44511 + C44510 + C44509) * C49763 -
                      (C44514 + C44513 + C44512) * C50757) *
                         C50771 * C50945) *
                        C1687 +
                    (((C44691 + C44692 + C44693) * C49763 -
                      ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                        C51088 * C497 + C44281 * C473 + C51087 * C492) *
                           C51021 +
                       (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                        C51088 * C482 + C44281 * C463 + C51087 * C474) *
                           C49770) +
                      (C44694 + C44695 + C44696) * C50757) *
                         C50771 * C51049 +
                     ((C45239 + C45238 + C45237) * C49763 -
                      ((C47919 + C47920 + C47921) * C51021 +
                       (C47922 + C47923 + C47924) * C49770) +
                      (C45242 + C45241 + C45240) * C50757) *
                         C50771 * C50945) *
                        C50874) *
                       C51036 +
                   ((((C44509 + C44510 + C44511) * C49763 -
                      ((C47268 + C47267 + C47266) * C51021 +
                       (C47265 + C47264 + C47263) * C49770) +
                      (C44512 + C44513 + C44514) * C50757) *
                         C50771 * C51049 +
                     ((C44517 + C44516 + C44515) * C49763 -
                      ((C47269 + C47270 + C47271) * C51021 +
                       (C47272 + C47273 + C47274) * C49770) +
                      (C44520 + C44519 + C44518) * C50757) *
                         C50771 * C50945) *
                        C1687 +
                    (((C47924 + C47923 + C47922) * C49770 +
                      (C47921 + C47920 + C47919) * C51021 -
                      (C45237 + C45238 + C45239) * C49763 -
                      (C45240 + C45241 + C45242) * C50757) *
                         C50771 * C51049 +
                     ((C48849 + C48850 + C48851) * C49770 +
                      (C48852 + C48853 + C48854) * C51021 -
                      (C44283 * C4708 + C44280 * C4713 + C44282 * C2679 +
                       C51088 * C2683 + C44281 * C1575 + C51087 * C1582) *
                          C49763 -
                      (C44283 * C4712 + C44280 * C4720 + C44282 * C2684 +
                       C51088 * C2688 + C44281 * C1581 + C51087 * C1587) *
                          C50757) *
                         C50771 * C50945) *
                        C50874) *
                       C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C50771 * C51049 +
                     ((C47263 + C47264 + C47265) * C1109 +
                      (C47266 + C47267 + C47268) * C50752) *
                         C50771 * C50945) *
                        C51083 -
                    (((C47919 + C47920 + C47921) * C50752 +
                      (C47922 + C47923 + C47924) * C1109) *
                         C50771 * C50945 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C50771 * C51049) *
                        C51084 +
                    (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                       C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                          C1109 +
                      (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                       C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                          C50752) *
                         C50771 * C51049 +
                     ((C48345 + C48346 + C48347) * C1109 +
                      (C48348 + C48349 + C48350) * C50752) *
                         C50771 * C50945) *
                        C2103) *
                       C51036 +
                   ((((C47924 + C47923 + C47922) * C1109 +
                      (C47921 + C47920 + C47919) * C50752) *
                         C50771 * C51049 +
                     ((C48849 + C48850 + C48851) * C1109 +
                      (C48852 + C48853 + C48854) * C50752) *
                         C50771 * C50945) *
                        C51084 -
                    (((C47269 + C47270 + C47271) * C50752 +
                      (C47272 + C47273 + C47274) * C1109) *
                         C50771 * C50945 +
                     ((C47268 + C47267 + C47266) * C50752 +
                      (C47265 + C47264 + C47263) * C1109) *
                         C50771 * C51049) *
                        C51083 -
                    (((C44283 * C23017 + C44280 * C23019 + C44282 * C4714 +
                       C51088 * C4721 + C44281 * C2682 + C51087 * C2687) *
                          C50752 +
                      (C44283 * C23016 + C44280 * C23018 + C44282 * C4709 +
                       C51088 * C4715 + C44281 * C2678 + C51087 * C2681) *
                          C1109) *
                         C50771 * C50945 +
                     ((C48350 + C48349 + C48348) * C50752 +
                      (C48347 + C48346 + C48345) * C1109) *
                         C50771 * C51049) *
                        C2103) *
                       C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C50771 * C51049 +
                     ((C47263 + C47264 + C47265) * C1109 +
                      (C47266 + C47267 + C47268) * C50752) *
                         C50771 * C50945) *
                        C1687 -
                    (((C47919 + C47920 + C47921) * C50752 +
                      (C47922 + C47923 + C47924) * C1109) *
                         C50771 * C50945 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C50771 * C51049) *
                        C50874) *
                       C280 +
                   ((((C47924 + C47923 + C47922) * C1109 +
                      (C47921 + C47920 + C47919) * C50752) *
                         C50771 * C51049 +
                     ((C48849 + C48850 + C48851) * C1109 +
                      (C48852 + C48853 + C48854) * C50752) *
                         C50771 * C50945) *
                        C50874 -
                    (((C47269 + C47270 + C47271) * C50752 +
                      (C47272 + C47273 + C47274) * C1109) *
                         C50771 * C50945 +
                     ((C47268 + C47267 + C47266) * C50752 +
                      (C47265 + C47264 + C47263) * C1109) *
                         C50771 * C51049) *
                        C1687) *
                       C281 +
                   ((((C47274 + C47273 + C47272) * C1109 +
                      (C47271 + C47270 + C47269) * C50752) *
                         C50771 * C51049 +
                     ((C48181 + C48182 + C48183) * C1109 +
                      (C48184 + C48185 + C48186) * C50752) *
                         C50771 * C50945) *
                        C1687 -
                    (((C44283 * C21349 + C44280 * C21351 + C44282 * C3728 +
                       C51088 * C3731 + C44281 * C3228 + C51087 * C3233) *
                          C50752 +
                      (C44283 * C21348 + C44280 * C21350 + C44282 * C3725 +
                       C51088 * C3729 + C44281 * C3224 + C51087 * C3227) *
                          C1109) *
                         C50771 * C50945 +
                     ((C48854 + C48853 + C48852) * C50752 +
                      (C48851 + C48850 + C48849) * C1109) *
                         C50771 * C51049) *
                        C50874) *
                       C282)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1035 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C1030 -
                     (C44321 + C44322 + C44323) * C1036 -
                     (C44324 + C44325 + C44326) * C1031 +
                     (C44327 + C44328 + C44329) * C1037 +
                     (C44330 + C44331 + C44332) * C1032) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C1035 +
                     (C47266 + C47267 + C47268) * C1030 -
                     (C44511 + C44510 + C44509) * C1036 -
                     (C44514 + C44513 + C44512) * C1031 +
                     (C44863 + C44862 + C44861) * C1037 +
                     (C44866 + C44865 + C44864) * C1032) *
                        C50771 * C50945) *
                       C1687 +
                   (((C44691 + C44692 + C44693) * C1036 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C1030 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1035) +
                     (C44694 + C44695 + C44696) * C1031 -
                     (C45025 + C45026 + C45027) * C1037 -
                     (C45028 + C45029 + C45030) * C1032) *
                        C50771 * C51049 +
                    ((C45239 + C45238 + C45237) * C1036 -
                     ((C47919 + C47920 + C47921) * C1030 +
                      (C47922 + C47923 + C47924) * C1035) +
                     (C45242 + C45241 + C45240) * C1031 -
                     (C44283 * C6266 + C44280 * C6267 + C44282 * C1225 +
                      C51088 * C1231 + C44281 * C896 + C51087 * C903) *
                         C1037 -
                     (C44283 * C6268 + C44280 * C6269 + C44282 * C1230 +
                      C51088 * C1237 + C44281 * C904 + C51087 * C911) *
                         C1032) *
                        C50771 * C50945) *
                       C50874) *
                  C50798) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1109 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C50752) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C1109 +
                     (C47266 + C47267 + C47268) * C50752) *
                        C50771 * C50945) *
                       C1853 -
                   (((C47919 + C47920 + C47921) * C50752 +
                     (C47922 + C47923 + C47924) * C1109) *
                        C50771 * C50945 +
                    ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                      C51088 * C497 + C44281 * C473 + C51087 * C492) *
                         C50752 +
                     (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                      C51088 * C482 + C44281 * C463 + C51087 * C474) *
                         C1109) *
                        C50771 * C51049) *
                       C1854 +
                   (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                      C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                         C1109 +
                     (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                      C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                         C50752) *
                        C50771 * C51049 +
                    ((C48345 + C48346 + C48347) * C1109 +
                     (C48348 + C48349 + C48350) * C50752) *
                        C50771 * C50945) *
                       C1855 -
                   (((C44283 * C23933 + C44280 * C23935 + C44282 * C6682 +
                      C51088 * C6685 + C44281 * C4718 + C51087 * C4723) *
                         C50752 +
                     (C44283 * C23932 + C44280 * C23934 + C44282 * C6679 +
                      C51088 * C6683 + C44281 * C4711 + C51087 * C4719) *
                         C1109) *
                        C50771 * C50945 +
                    ((C44283 * C7566 + C44280 * C7569 + C44282 * C5700 +
                      C51088 * C5705 + C44281 * C1867 + C51087 * C1872) *
                         C50752 +
                     (C44283 * C7563 + C44280 * C7567 + C44282 * C5696 +
                      C51088 * C5699 + C44281 * C1860 + C51087 * C1868) *
                         C1109) *
                        C50771 * C51049) *
                       C1856) *
                  C50798) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C49770 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C51021 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C49770 +
                     (C47266 + C47267 + C47268) * C51021 -
                     (C44511 + C44510 + C44509) * C49763 -
                     (C44514 + C44513 + C44512) * C50757) *
                        C50771 * C50945) *
                       C51083 +
                   (((C44691 + C44692 + C44693) * C49763 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C51021 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C49770) +
                     (C44694 + C44695 + C44696) * C50757) *
                        C50771 * C51049 +
                    ((C45239 + C45238 + C45237) * C49763 -
                     ((C47919 + C47920 + C47921) * C51021 +
                      (C47922 + C47923 + C47924) * C49770) +
                     (C45242 + C45241 + C45240) * C50757) *
                        C50771 * C50945) *
                       C51084 +
                   (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                      C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                         C49770 +
                     (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                      C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                         C51021 -
                     (C44697 + C44698 + C44699) * C49763 -
                     (C44700 + C44701 + C44702) * C50757) *
                        C50771 * C51049 +
                    ((C48345 + C48346 + C48347) * C49770 +
                     (C48348 + C48349 + C48350) * C51021 -
                     (C44283 * C6678 + C44280 * C6681 + C44282 * C4710 +
                      C51088 * C4717 + C44281 * C1226 + C51087 * C1233) *
                         C49763 -
                     (C44283 * C6680 + C44280 * C6684 + C44282 * C4716 +
                      C51088 * C4722 + C44281 * C1232 + C51087 * C1238) *
                         C50757) *
                        C50771 * C50945) *
                       C2103) *
                  C50798) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1035 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C1030 -
                     (C44321 + C44322 + C44323) * C1036 -
                     (C44324 + C44325 + C44326) * C1031 +
                     (C44327 + C44328 + C44329) * C1037 +
                     (C44330 + C44331 + C44332) * C1032) *
                        C50771 * C51049 +
                    ((C47263 + C47264 + C47265) * C1035 +
                     (C47266 + C47267 + C47268) * C1030 -
                     (C44511 + C44510 + C44509) * C1036 -
                     (C44514 + C44513 + C44512) * C1031 +
                     (C44863 + C44862 + C44861) * C1037 +
                     (C44866 + C44865 + C44864) * C1032) *
                        C50771 * C50945) *
                       C1687 +
                   (((C44691 + C44692 + C44693) * C1036 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C1030 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1035) +
                     (C44694 + C44695 + C44696) * C1031 -
                     (C45025 + C45026 + C45027) * C1037 -
                     (C45028 + C45029 + C45030) * C1032) *
                        C50771 * C51049 +
                    ((C45239 + C45238 + C45237) * C1036 -
                     ((C47919 + C47920 + C47921) * C1030 +
                      (C47922 + C47923 + C47924) * C1035) +
                     (C45242 + C45241 + C45240) * C1031 -
                     (C44283 * C6266 + C44280 * C6267 + C44282 * C1225 +
                      C51088 * C1231 + C44281 * C896 + C51087 * C903) *
                         C1037 -
                     (C44283 * C6268 + C44280 * C6269 + C44282 * C1230 +
                      C51088 * C1237 + C44281 * C904 + C51087 * C911) *
                         C1032) *
                        C50771 * C50945) *
                       C50874) *
                  C50798) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C50771 * C51049 +
                     ((C47263 + C47264 + C47265) * C1109 +
                      (C47266 + C47267 + C47268) * C50752) *
                         C50771 * C50945) *
                        C1687 -
                    (((C47919 + C47920 + C47921) * C50752 +
                      (C47922 + C47923 + C47924) * C1109) *
                         C50771 * C50945 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C50771 * C51049) *
                        C50874) *
                       C280 +
                   ((((C47924 + C47923 + C47922) * C1109 +
                      (C47921 + C47920 + C47919) * C50752) *
                         C50771 * C51049 +
                     ((C48849 + C48850 + C48851) * C1109 +
                      (C48852 + C48853 + C48854) * C50752) *
                         C50771 * C50945) *
                        C50874 -
                    (((C47269 + C47270 + C47271) * C50752 +
                      (C47272 + C47273 + C47274) * C1109) *
                         C50771 * C50945 +
                     ((C47268 + C47267 + C47266) * C50752 +
                      (C47265 + C47264 + C47263) * C1109) *
                         C50771 * C51049) *
                        C1687) *
                       C281 +
                   ((((C47274 + C47273 + C47272) * C1109 +
                      (C47271 + C47270 + C47269) * C50752) *
                         C50771 * C51049 +
                     ((C48181 + C48182 + C48183) * C1109 +
                      (C48184 + C48185 + C48186) * C50752) *
                         C50771 * C50945) *
                        C1687 -
                    (((C44283 * C21349 + C44280 * C21351 + C44282 * C3728 +
                       C51088 * C3731 + C44281 * C3228 + C51087 * C3233) *
                          C50752 +
                      (C44283 * C21348 + C44280 * C21350 + C44282 * C3725 +
                       C51088 * C3729 + C44281 * C3224 + C51087 * C3227) *
                          C1109) *
                         C50771 * C50945 +
                     ((C48854 + C48853 + C48852) * C50752 +
                      (C48851 + C48850 + C48849) * C1109) *
                         C50771 * C51049) *
                        C50874) *
                       C282)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C641 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51077 -
            (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
            C33411 * C643 + C33412 * C638) *
               C50771 * C2302 +
           ((C36371 + C36372) * C641 + (C36373 + C36374) * C51077 -
            (C33594 + C33593) * C642 - (C33596 + C33595) * C51078 +
            (C33597 + C33598) * C643 + (C33599 + C33600) * C638) *
               C50771 * C2303 +
           (C36389 * C641 + C36390 * C51077 - C36353 * C642 - C36354 * C51078 +
            (C33606 + C33605) * C643 + (C33608 + C33607) * C638) *
               C50771 * C2304) *
              C50810 * C51036 +
          (((C33593 + C33594) * C642 -
            ((C36374 + C36373) * C51077 + (C36372 + C36371) * C641) +
            (C33595 + C33596) * C51078 - C33949 * C643 - C33950 * C638) *
               C50771 * C2302 +
           ((C33602 + C33601) * C642 -
            ((C36378 + C36377) * C51077 + (C36376 + C36375) * C641) +
            (C33604 + C33603) * C51078 - (C33605 + C33606) * C643 -
            (C33607 + C33608) * C638) *
               C50771 * C2303 +
           ((C36381 + C36382) * C642 -
            ((C36383 + C36384) * C51077 + (C36385 + C36386) * C641) +
            (C36387 + C36388) * C51078 -
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C643 -
            (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C638) *
               C50771 * C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C641 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51077 -
            (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
            C33411 * C643 + C33412 * C638) *
               C17287 +
           ((C33396 + C33395) * C641 + (C33398 + C33397) * C51077 -
            (C33400 + C33399) * C642 - (C33402 + C33401) * C51078 +
            (C33404 + C33403) * C643 + (C33406 + C33405) * C638) *
               C17288 +
           (C33411 * C641 + C33412 * C51077 - C33413 * C642 - C33414 * C51078 +
            (C33408 + C33407) * C643 + (C33410 + C33409) * C638) *
               C17289) *
              C50896 * C50810 * C51036 +
          (((C33593 + C33594) * C642 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C51077 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C641) +
            (C33595 + C33596) * C51078 - C33949 * C643 - C33950 * C638) *
               C17287 +
           ((C33597 + C33598) * C642 -
            ((C33596 + C33595) * C51077 + (C33594 + C33593) * C641) +
            (C33599 + C33600) * C51078 - (C33959 + C33960) * C643 -
            (C33961 + C33962) * C638) *
               C17288 +
           ((C33960 + C33959) * C642 - (C33950 * C51077 + C33949 * C641) +
            (C33962 + C33961) * C51078 -
            (C33361 * C898 + C50971 * C907 + C33360 * C289 + C33358 * C303) *
                C643 -
            (C33361 * C908 + C50971 * C913 + C33360 * C304 + C33358 * C319) *
                C638) *
               C17289) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C641 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C51077 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C642 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C51078 +
           (C38958 * C124 + C38954 * C133 + C38959 * C464 + C38955 * C476 +
            C38960 * C469 + C38956 * C486 + C38961 * C1858 + C38957 * C1864) *
               C643 +
           (C38958 * C134 + C38954 * C145 + C38959 * C477 + C38955 * C494 +
            C38960 * C487 + C38956 * C499 + C38961 * C1863 + C38957 * C1870) *
               C638) *
              C50771 * C50896 * C50810 * C51036 +
          ((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
            C38960 * C1226 + C38956 * C1233 + C38961 * C4710 + C38957 * C4717) *
               C642 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C51077 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C641) +
           (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
            C38960 * C1232 + C38956 * C1238 + C38961 * C4716 + C38957 * C4722) *
               C51078 -
           (C38961 * C6266 + C38957 * C6267 + C38960 * C1225 + C38956 * C1231 +
            C38959 * C896 + C38955 * C903 + C38958 * C287 + C38954 * C299) *
               C643 -
           (C38961 * C6268 + C38957 * C6269 + C38960 * C1230 + C38956 * C1237 +
            C38959 * C904 + C38955 * C911 + C38958 * C300 + C38954 * C317) *
               C638) *
              C50771 * C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                C50771 * C2302 +
            ((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
             (C33594 + C33593) * C284 - (C33596 + C33595) * C50757) *
                C50771 * C2303 +
            C36396 * C2304) *
               C51037 +
           (((C33787 + C33788) * C284 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C278 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C283) +
             (C33789 + C33790) * C50757) *
                C50771 * C2302 +
            ((C34334 + C34333) * C284 -
             ((C37053 + C37054) * C278 + (C37055 + C37056) * C283) +
             (C34336 + C34335) * C50757) *
                C50771 * C2303 +
            ((C37057 + C37058) * C284 -
             ((C37059 + C37060) * C278 + (C37061 + C37062) * C283) +
             (C37063 + C37064) * C50757) *
                C50771 * C2304) *
               C50874) *
              C51036 +
          ((((C33593 + C33594) * C284 -
             ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
             (C33595 + C33596) * C50757) *
                C50771 * C2302 +
            ((C33602 + C33601) * C284 -
             ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
             (C33604 + C33603) * C50757) *
                C50771 * C2303 +
            ((C36381 + C36382) * C284 -
             ((C36383 + C36384) * C278 + (C36385 + C36386) * C283) +
             (C36387 + C36388) * C50757) *
                C50771 * C2304) *
               C51037 +
           (((C37056 + C37055) * C283 + (C37054 + C37053) * C278 -
             (C34333 + C34334) * C284 - (C34335 + C34336) * C50757) *
                C50771 * C2302 +
            ((C37062 + C37061) * C283 + (C37060 + C37059) * C278 -
             (C37058 + C37057) * C284 - (C37064 + C37063) * C50757) *
                C50771 * C2303 +
            ((C33360 * C3224 + C33358 * C3227 + C33361 * C3725 +
              C50971 * C3729) *
                 C283 +
             (C33360 * C3228 + C33358 * C3233 + C33361 * C3728 +
              C50971 * C3731) *
                 C278 -
             (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
              C33358 * C3229) *
                 C284 -
             (C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
              C33358 * C3234) *
                 C50757) *
                C50771 * C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                C17287 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
                C17288 +
            (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C50757) *
                C17289) *
               C50896 * C51037 +
           (((C33787 + C33788) * C284 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C278 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C283) +
             (C33789 + C33790) * C50757) *
                C17287 +
            ((C33791 + C33792) * C284 -
             ((C33790 + C33789) * C278 + (C33788 + C33787) * C283) +
             (C33793 + C33794) * C50757) *
                C17288 +
            ((C34120 + C34119) * C284 - (C34110 * C278 + C34109 * C283) +
             (C34122 + C34121) * C50757) *
                C17289) *
               C50896 * C50874) *
              C51036 +
          ((((C33593 + C33594) * C284 -
             ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                  C278 +
              (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                  C283) +
             (C33595 + C33596) * C50757) *
                C17287 +
            ((C33597 + C33598) * C284 -
             ((C33596 + C33595) * C278 + (C33594 + C33593) * C283) +
             (C33599 + C33600) * C50757) *
                C17288 +
            ((C33960 + C33959) * C284 - (C33950 * C278 + C33949 * C283) +
             (C33962 + C33961) * C50757) *
                C17289) *
               C50896 * C51037 +
           (((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C283 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C278 -
             (C34333 + C34334) * C284 - (C34335 + C34336) * C50757) *
                C17287 +
            ((C34334 + C34333) * C283 + (C34336 + C34335) * C278 -
             (C34337 + C34338) * C284 - (C34339 + C34340) * C50757) *
                C17288 +
            ((C34338 + C34337) * C283 + (C34340 + C34339) * C278 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C284 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C50757) *
                C17289) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
             C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
                C283 +
            (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
             C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
                C278 -
            (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
             C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
                C284 -
            (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
             C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
                C50757) *
               C50771 * C50896 * C51037 +
           ((C38958 * C462 + C38954 * C472 + C38959 * C468 + C38955 * C484 +
             C38960 * C1859 + C38956 * C1866 + C38961 * C5697 +
             C38957 * C5701) *
                C284 -
            ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 +
              C38956 * C1872 + C38959 * C483 + C38955 * C497 + C38958 * C473 +
              C38954 * C492) *
                 C278 +
             (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 +
              C38956 * C1868 + C38959 * C467 + C38955 * C482 + C38958 * C463 +
              C38954 * C474) *
                 C283) +
            (C38958 * C475 + C38954 * C493 + C38959 * C485 + C38955 * C498 +
             C38960 * C1865 + C38956 * C1871 + C38961 * C5702 +
             C38957 * C5706) *
                C50757) *
               C50771 * C50896 * C50874) *
              C51036 +
          (((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
             C38960 * C1226 + C38956 * C1233 + C38961 * C4710 +
             C38957 * C4717) *
                C284 -
            ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 +
              C38956 * C1239 + C38959 * C900 + C38955 * C909 + C38958 * C296 +
              C38954 * C315) *
                 C278 +
             (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 +
              C38956 * C1235 + C38959 * C894 + C38955 * C899 + C38958 * C286 +
              C38954 * C297) *
                 C283) +
            (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
             C38960 * C1232 + C38956 * C1238 + C38961 * C4716 +
             C38957 * C4722) *
                C50757) *
               C50771 * C50896 * C51037 +
           ((C38958 * C894 + C38954 * C899 + C38959 * C1227 + C38955 * C1235 +
             C38960 * C4711 + C38956 * C4719 + C38961 * C6679 +
             C38957 * C6683) *
                C283 +
            (C38958 * C900 + C38954 * C909 + C38959 * C1234 + C38955 * C1239 +
             C38960 * C4718 + C38956 * C4723 + C38961 * C6682 +
             C38957 * C6685) *
                C278 -
            (C38961 * C6678 + C38957 * C6681 + C38960 * C4710 + C38956 * C4717 +
             C38959 * C1226 + C38955 * C1233 + C38958 * C895 + C38954 * C901) *
                C284 -
            (C38961 * C6680 + C38957 * C6684 + C38960 * C4716 + C38956 * C4722 +
             C38959 * C1232 + C38955 * C1238 + C38958 * C902 + C38954 * C910) *
                C50757) *
               C50771 * C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                   C118 +
               (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                   C106 -
               (C33395 + C33396) * C119 - (C33397 + C33398) * C107 +
               C33411 * C120 + C33412 * C108 - C33413 * C121 - C33414 * C109) *
                  C17287 +
              ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
               (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
               (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
               (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
                  C17288 +
              (C33411 * C118 + C33412 * C106 - C33413 * C119 - C33414 * C107 +
               (C33408 + C33407) * C120 + (C33410 + C33409) * C108 -
               (C33361 * C754 + C50971 * C755 + C33360 * C127 + C33358 * C139) *
                   C121 -
               (C33361 * C756 + C50971 * C757 + C33360 * C140 + C33358 * C148) *
                   C109) *
                  C17289) *
             C50896 * C50810 * C50798 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33360 * C122 + C33358 * C129 + C33361 * C463 +
                 C50971 * C474) *
                    C283 +
                (C33360 * C130 + C33358 * C143 + C33361 * C473 +
                 C50971 * C492) *
                    C278 -
                (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                   C17287 +
               ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
                (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
                   C17288 +
               (C33411 * C283 + C33412 * C278 - C33413 * C284 -
                C33414 * C50757) *
                   C17289) *
                  C50896 * C50810 * C280 +
              (((C33593 + C33594) * C284 -
                ((C33361 * C900 + C50971 * C909 + C33360 * C296 +
                  C33358 * C315) *
                     C278 +
                 (C33361 * C894 + C50971 * C899 + C33360 * C286 +
                  C33358 * C297) *
                     C283) +
                (C33595 + C33596) * C50757) *
                   C17287 +
               ((C33597 + C33598) * C284 -
                ((C33596 + C33595) * C278 + (C33594 + C33593) * C283) +
                (C33599 + C33600) * C50757) *
                   C17288 +
               ((C33360 * C288 + C33358 * C301 + C33361 * C897 +
                 C50971 * C905) *
                    C284 -
                ((C33600 + C33599) * C278 + (C33598 + C33597) * C283) +
                (C33360 * C302 + C33358 * C318 + C33361 * C906 +
                 C50971 * C912) *
                    C50757) *
                   C17289) *
                  C50896 * C50810 * C281 +
              (((C33360 * C290 + C33358 * C305 + C33361 * C1576 +
                 C50971 * C1584) *
                    C283 +
                (C33360 * C306 + C33358 * C320 + C33361 * C1583 +
                 C50971 * C1588) *
                    C278 -
                (C33601 + C33602) * C284 - (C33603 + C33604) * C50757) *
                   C17287 +
               ((C33602 + C33601) * C283 + (C33604 + C33603) * C278 -
                (C33605 + C33606) * C284 - (C33607 + C33608) * C50757) *
                   C17288 +
               ((C33606 + C33605) * C283 + (C33608 + C33607) * C278 -
                (C33361 * C1573 + C50971 * C1578 + C33360 * C293 +
                 C33358 * C311) *
                    C284 -
                (C33361 * C1577 + C50971 * C1585 + C33360 * C312 +
                 C33358 * C323) *
                    C50757) *
                   C17289) *
                  C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C50757) *
               C17289) *
              C50896 * C459 +
          (((C33787 + C33788) * C284 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C278 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C283) +
            (C33789 + C33790) * C50757) *
               C17287 +
           ((C33791 + C33792) * C284 -
            ((C33790 + C33789) * C278 + (C33788 + C33787) * C283) +
            (C33793 + C33794) * C50757) *
               C17288 +
           ((C33360 * C465 + C33358 * C478 + C33361 * C470 + C50971 * C488) *
                C284 -
            ((C33794 + C33793) * C278 + (C33792 + C33791) * C283) +
            (C33360 * C479 + C33358 * C495 + C33361 * C489 + C50971 * C500) *
                C50757) *
               C17289) *
              C50896 * C460 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C283 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C278 -
            (C33795 + C33796) * C284 - (C33797 + C33798) * C50757) *
               C17287 +
           ((C33796 + C33795) * C283 + (C33798 + C33797) * C278 -
            (C33799 + C33800) * C284 - (C33801 + C33802) * C50757) *
               C17288 +
           ((C33800 + C33799) * C283 + (C33802 + C33801) * C278 -
            (C33361 * C1857 + C50971 * C1862 + C33360 * C470 + C33358 * C488) *
                C284 -
            (C33361 * C1861 + C50971 * C1869 + C33360 * C489 + C33358 * C500) *
                C50757) *
               C17289) *
              C50896 * C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C50771 * C2302 +
          ((C33360 * C286 + C33358 * C297 + C33361 * C894 + C50971 * C899) *
               C118 +
           (C33360 * C296 + C33358 * C315 + C33361 * C900 + C50971 * C909) *
               C106 -
           (C33594 + C33593) * C119 - (C33596 + C33595) * C107 +
           (C33597 + C33598) * C120 + (C33599 + C33600) * C108 -
           (C33959 + C33960) * C121 - (C33961 + C33962) * C109) *
              C50771 * C2303 +
          ((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
               C118 +
           (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
               C106 -
           (C33601 + C33602) * C119 - (C33603 + C33604) * C107 +
           (C33606 + C33605) * C120 + (C33608 + C33607) * C108 -
           (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
               C121 -
           (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
               C109) *
              C50771 * C2304) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
            (C33594 + C33593) * C284 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C36396 * C2304) *
              C50810 * C280 +
          (((C33593 + C33594) * C284 -
            ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
            (C33595 + C33596) * C50757) *
               C50771 * C2302 +
           ((C33602 + C33601) * C284 -
            ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
            (C33604 + C33603) * C50757) *
               C50771 * C2303 +
           ((C36381 + C36382) * C284 -
            ((C36383 + C36384) * C278 + (C36385 + C36386) * C283) +
            (C36387 + C36388) * C50757) *
               C50771 * C2304) *
              C50810 * C281 +
          (C36396 * C2302 +
           ((C36386 + C36385) * C283 + (C36384 + C36383) * C278 -
            (C36382 + C36381) * C284 - (C36388 + C36387) * C50757) *
               C50771 * C2303 +
           ((C33360 * C2451 + C33358 * C2454 + C33361 * C4296 +
             C50971 * C4300) *
                C283 +
            (C33360 * C2455 + C33358 * C2460 + C33361 * C4299 +
             C50971 * C4302) *
                C278 -
            (C33361 * C4295 + C50971 * C4298 + C33360 * C2452 +
             C33358 * C2456) *
                C284 -
            (C33361 * C4297 + C50971 * C4301 + C33360 * C2457 +
             C33358 * C2461) *
                C50757) *
               C50771 * C2304) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
            (C33594 + C33593) * C284 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C36396 * C2304) *
              C459 +
          (((C33787 + C33788) * C284 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C278 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C283) +
            (C33789 + C33790) * C50757) *
               C50771 * C2302 +
           ((C34334 + C34333) * C284 -
            ((C33361 * C1234 + C50971 * C1239 + C33360 * C900 + C33358 * C909) *
                 C278 +
             (C33361 * C1227 + C50971 * C1235 + C33360 * C894 + C33358 * C899) *
                 C283) +
            (C34336 + C34335) * C50757) *
               C50771 * C2303 +
           ((C33360 * C1575 + C33358 * C1582 + C33361 * C2679 +
             C50971 * C2683) *
                C284 -
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C278 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C283) +
            (C33360 * C1581 + C33358 * C1587 + C33361 * C2684 +
             C50971 * C2688) *
                C50757) *
               C50771 * C2304) *
              C460 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C283 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C278 -
            (C33795 + C33796) * C284 - (C33797 + C33798) * C50757) *
               C50771 * C2302 +
           ((C33360 * C1227 + C33358 * C1235 + C33361 * C4711 +
             C50971 * C4719) *
                C283 +
            (C33360 * C1234 + C33358 * C1239 + C33361 * C4718 +
             C50971 * C4723) *
                C278 -
            (C33361 * C4710 + C50971 * C4717 + C33360 * C1226 +
             C33358 * C1233) *
                C284 -
            (C33361 * C4716 + C50971 * C4722 + C33360 * C1232 +
             C33358 * C1238) *
                C50757) *
               C50771 * C2303 +
           ((C33360 * C2678 + C33358 * C2681 + C33361 * C4709 +
             C50971 * C4715) *
                C283 +
            (C33360 * C2682 + C33358 * C2687 + C33361 * C4714 +
             C50971 * C4721) *
                C278 -
            (C33361 * C4708 + C50971 * C4713 + C33360 * C2679 +
             C33358 * C2683) *
                C284 -
            (C33361 * C4712 + C50971 * C4720 + C33360 * C2684 +
             C33358 * C2688) *
                C50757) *
               C50771 * C2304) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
           C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
              C118 +
          (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
           C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
              C106 -
          (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
           C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
              C119 -
          (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
           C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
              C107 +
          (C38958 * C124 + C38954 * C133 + C38959 * C464 + C38955 * C476 +
           C38960 * C469 + C38956 * C486 + C38961 * C1858 + C38957 * C1864) *
              C120 +
          (C38958 * C134 + C38954 * C145 + C38959 * C477 + C38955 * C494 +
           C38960 * C487 + C38956 * C499 + C38961 * C1863 + C38957 * C1870) *
              C108 -
          (C38961 * C1857 + C38957 * C1862 + C38960 * C470 + C38956 * C488 +
           C38959 * C465 + C38955 * C478 + C38958 * C125 + C38954 * C135) *
              C121 -
          (C38961 * C1861 + C38957 * C1869 + C38960 * C489 + C38956 * C500 +
           C38959 * C479 + C38955 * C495 + C38958 * C136 + C38954 * C146) *
              C109) *
         C50771 * C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C283 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C278 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C284 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C50757) *
              C50771 * C50896 * C50810 * C280 +
          ((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
            C38960 * C1226 + C38956 * C1233 + C38961 * C4710 + C38957 * C4717) *
               C284 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C278 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C283) +
           (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
            C38960 * C1232 + C38956 * C1238 + C38961 * C4716 + C38957 * C4722) *
               C50757) *
              C50771 * C50896 * C50810 * C281 +
          ((C38958 * C290 + C38954 * C305 + C38959 * C1576 + C38955 * C1584 +
            C38960 * C2678 + C38956 * C2681 + C38961 * C4709 + C38957 * C4715) *
               C283 +
           (C38958 * C306 + C38954 * C320 + C38959 * C1583 + C38955 * C1588 +
            C38960 * C2682 + C38956 * C2687 + C38961 * C4714 + C38957 * C4721) *
               C278 -
           (C38961 * C4708 + C38957 * C4713 + C38960 * C2679 + C38956 * C2683 +
            C38959 * C1575 + C38955 * C1582 + C38958 * C291 + C38954 * C307) *
               C284 -
           (C38961 * C4712 + C38957 * C4720 + C38960 * C2684 + C38956 * C2688 +
            C38959 * C1581 + C38955 * C1587 + C38958 * C308 + C38954 * C321) *
               C50757) *
              C50771 * C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C283 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C278 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C284 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C50757) *
              C50771 * C50896 * C459 +
          ((C38958 * C462 + C38954 * C472 + C38959 * C468 + C38955 * C484 +
            C38960 * C1859 + C38956 * C1866 + C38961 * C5697 + C38957 * C5701) *
               C284 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C278 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C283) +
           (C38958 * C475 + C38954 * C493 + C38959 * C485 + C38955 * C498 +
            C38960 * C1865 + C38956 * C1871 + C38961 * C5702 + C38957 * C5706) *
               C50757) *
              C50771 * C50896 * C460 +
          ((C38958 * C467 + C38954 * C482 + C38959 * C1860 + C38955 * C1868 +
            C38960 * C5696 + C38956 * C5699 + C38961 * C7563 + C38957 * C7567) *
               C283 +
           (C38958 * C483 + C38954 * C497 + C38959 * C1867 + C38955 * C1872 +
            C38960 * C5700 + C38956 * C5705 + C38961 * C7566 + C38957 * C7569) *
               C278 -
           (C38961 * C7562 + C38957 * C7565 + C38960 * C5697 + C38956 * C5701 +
            C38959 * C1859 + C38955 * C1866 + C38958 * C468 + C38954 * C484) *
               C284 -
           (C38961 * C7564 + C38957 * C7568 + C38960 * C5702 + C38956 * C5706 +
            C38959 * C1865 + C38955 * C1871 + C38958 * C485 + C38954 * C498) *
               C50757) *
              C50771 * C50896 * C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C641 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51077 -
            (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
            C33411 * C643 + C33412 * C638) *
               C50771 * C2302 +
           ((C36371 + C36372) * C641 + (C36373 + C36374) * C51077 -
            (C33594 + C33593) * C642 - (C33596 + C33595) * C51078 +
            (C33597 + C33598) * C643 + (C33599 + C33600) * C638) *
               C50771 * C2303 +
           (C36389 * C641 + C36390 * C51077 - C36353 * C642 - C36354 * C51078 +
            (C33606 + C33605) * C643 + (C33608 + C33607) * C638) *
               C50771 * C2304) *
              C51037 +
          (((C33787 + C33788) * C642 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C51077 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C641) +
            (C33789 + C33790) * C51078 - C34109 * C643 - C34110 * C638) *
               C50771 * C2302 +
           ((C34334 + C34333) * C642 -
            ((C33361 * C1234 + C50971 * C1239 + C33360 * C900 + C33358 * C909) *
                 C51077 +
             (C33361 * C1227 + C50971 * C1235 + C33360 * C894 + C33358 * C899) *
                 C641) +
            (C34336 + C34335) * C51078 - (C34337 + C34338) * C643 -
            (C34339 + C34340) * C638) *
               C50771 * C2303 +
           ((C33360 * C1575 + C33358 * C1582 + C33361 * C2679 +
             C50971 * C2683) *
                C642 -
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C51077 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C641) +
            (C33360 * C1581 + C33358 * C1587 + C33361 * C2684 +
             C50971 * C2688) *
                C51078 -
            (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
             C33358 * C1580) *
                C643 -
            (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
             C33358 * C1586) *
                C638) *
               C50771 * C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C641 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51077 -
            (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
            C33411 * C643 + C33412 * C638) *
               C17287 +
           ((C33396 + C33395) * C641 + (C33398 + C33397) * C51077 -
            (C33400 + C33399) * C642 - (C33402 + C33401) * C51078 +
            (C33404 + C33403) * C643 + (C33406 + C33405) * C638) *
               C17288 +
           (C33411 * C641 + C33412 * C51077 - C33413 * C642 - C33414 * C51078 +
            (C33408 + C33407) * C643 + (C33410 + C33409) * C638) *
               C17289) *
              C50896 * C51037 +
          (((C33787 + C33788) * C642 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C51077 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C641) +
            (C33789 + C33790) * C51078 - C34109 * C643 - C34110 * C638) *
               C17287 +
           ((C33791 + C33792) * C642 -
            ((C33790 + C33789) * C51077 + (C33788 + C33787) * C641) +
            (C33793 + C33794) * C51078 - (C34119 + C34120) * C643 -
            (C34121 + C34122) * C638) *
               C17288 +
           ((C34120 + C34119) * C642 - (C34110 * C51077 + C34109 * C641) +
            (C34122 + C34121) * C51078 -
            (C33361 * C471 + C50971 * C490 + C33360 * C466 + C33358 * C480) *
                C643 -
            (C33361 * C491 + C50971 * C501 + C33360 * C481 + C33358 * C496) *
                C638) *
               C17289) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C641 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C51077 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C642 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C51078 +
           (C38958 * C124 + C38954 * C133 + C38959 * C464 + C38955 * C476 +
            C38960 * C469 + C38956 * C486 + C38961 * C1858 + C38957 * C1864) *
               C643 +
           (C38958 * C134 + C38954 * C145 + C38959 * C477 + C38955 * C494 +
            C38960 * C487 + C38956 * C499 + C38961 * C1863 + C38957 * C1870) *
               C638) *
              C50771 * C50896 * C51037 +
          ((C38958 * C462 + C38954 * C472 + C38959 * C468 + C38955 * C484 +
            C38960 * C1859 + C38956 * C1866 + C38961 * C5697 + C38957 * C5701) *
               C642 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C51077 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C641) +
           (C38958 * C475 + C38954 * C493 + C38959 * C485 + C38955 * C498 +
            C38960 * C1865 + C38956 * C1871 + C38961 * C5702 + C38957 * C5706) *
               C51078 -
           (C38961 * C5698 + C38957 * C5703 + C38960 * C1858 + C38956 * C1864 +
            C38959 * C469 + C38955 * C486 + C38958 * C464 + C38954 * C476) *
               C643 -
           (C38961 * C5704 + C38957 * C5707 + C38960 * C1863 + C38956 * C1870 +
            C38959 * C487 + C38955 * C499 + C38958 * C477 + C38954 * C494) *
               C638) *
              C50771 * C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C50757) *
               C17289) *
              C50896 * C50810 * C280 +
          (((C33593 + C33594) * C284 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C278 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C283) +
            (C33595 + C33596) * C50757) *
               C17287 +
           ((C33597 + C33598) * C284 -
            ((C33596 + C33595) * C278 + (C33594 + C33593) * C283) +
            (C33599 + C33600) * C50757) *
               C17288 +
           ((C33360 * C288 + C33358 * C301 + C33361 * C897 + C50971 * C905) *
                C284 -
            ((C33600 + C33599) * C278 + (C33598 + C33597) * C283) +
            (C33360 * C302 + C33358 * C318 + C33361 * C906 + C50971 * C912) *
                C50757) *
               C17289) *
              C50896 * C50810 * C281 +
          (((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                C283 +
            (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                C278 -
            (C33601 + C33602) * C284 - (C33603 + C33604) * C50757) *
               C17287 +
           ((C33602 + C33601) * C283 + (C33604 + C33603) * C278 -
            (C33605 + C33606) * C284 - (C33607 + C33608) * C50757) *
               C17288 +
           ((C33606 + C33605) * C283 + (C33608 + C33607) * C278 -
            (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
                C284 -
            (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
                C50757) *
               C17289) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C17287 +
          ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
           (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
           (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
           (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
              C17288 +
          (C33411 * C118 + C33412 * C106 - C33413 * C119 - C33414 * C107 +
           (C33408 + C33407) * C120 + (C33410 + C33409) * C108 -
           (C33361 * C754 + C50971 * C755 + C33360 * C127 + C33358 * C139) *
               C121 -
           (C33361 * C756 + C50971 * C757 + C33360 * C140 + C33358 * C148) *
               C109) *
              C17289) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C50771 * C2302 +
          ((C33360 * C286 + C33358 * C297 + C33361 * C894 + C50971 * C899) *
               C118 +
           (C33360 * C296 + C33358 * C315 + C33361 * C900 + C50971 * C909) *
               C106 -
           (C33594 + C33593) * C119 - (C33596 + C33595) * C107 +
           (C33597 + C33598) * C120 + (C33599 + C33600) * C108 -
           (C33959 + C33960) * C121 - (C33961 + C33962) * C109) *
              C50771 * C2303 +
          ((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
               C118 +
           (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
               C106 -
           (C33601 + C33602) * C119 - (C33603 + C33604) * C107 +
           (C33606 + C33605) * C120 + (C33608 + C33607) * C108 -
           (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
               C121 -
           (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
               C109) *
              C50771 * C2304) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
            (C33594 + C33593) * C284 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C36396 * C2304) *
              C50810 * C280 +
          (((C33593 + C33594) * C284 -
            ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
            (C33595 + C33596) * C50757) *
               C50771 * C2302 +
           ((C33602 + C33601) * C284 -
            ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
            (C33604 + C33603) * C50757) *
               C50771 * C2303 +
           ((C36381 + C36382) * C284 -
            ((C36383 + C36384) * C278 + (C36385 + C36386) * C283) +
            (C36387 + C36388) * C50757) *
               C50771 * C2304) *
              C50810 * C281 +
          (C36396 * C2302 +
           ((C36386 + C36385) * C283 + (C36384 + C36383) * C278 -
            (C36382 + C36381) * C284 - (C36388 + C36387) * C50757) *
               C50771 * C2303 +
           ((C33360 * C2451 + C33358 * C2454 + C33361 * C4296 +
             C50971 * C4300) *
                C283 +
            (C33360 * C2455 + C33358 * C2460 + C33361 * C4299 +
             C50971 * C4302) *
                C278 -
            (C33361 * C4295 + C50971 * C4298 + C33360 * C2452 +
             C33358 * C2456) *
                C284 -
            (C33361 * C4297 + C50971 * C4301 + C33360 * C2457 +
             C33358 * C2461) *
                C50757) *
               C50771 * C2304) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
           C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
              C118 +
          (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
           C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
              C106 -
          (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
           C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
              C119 -
          (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
           C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
              C107 +
          (C38958 * C124 + C38954 * C133 + C38959 * C464 + C38955 * C476 +
           C38960 * C469 + C38956 * C486 + C38961 * C1858 + C38957 * C1864) *
              C120 +
          (C38958 * C134 + C38954 * C145 + C38959 * C477 + C38955 * C494 +
           C38960 * C487 + C38956 * C499 + C38961 * C1863 + C38957 * C1870) *
              C108 -
          (C38961 * C1857 + C38957 * C1862 + C38960 * C470 + C38956 * C488 +
           C38959 * C465 + C38955 * C478 + C38958 * C125 + C38954 * C135) *
              C121 -
          (C38961 * C1861 + C38957 * C1869 + C38960 * C489 + C38956 * C500 +
           C38959 * C479 + C38955 * C495 + C38958 * C136 + C38954 * C146) *
              C109) *
         C50771 * C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C283 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C278 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C284 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C50757) *
              C50771 * C50896 * C50810 * C280 +
          ((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
            C38960 * C1226 + C38956 * C1233 + C38961 * C4710 + C38957 * C4717) *
               C284 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C278 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C283) +
           (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
            C38960 * C1232 + C38956 * C1238 + C38961 * C4716 + C38957 * C4722) *
               C50757) *
              C50771 * C50896 * C50810 * C281 +
          ((C38958 * C290 + C38954 * C305 + C38959 * C1576 + C38955 * C1584 +
            C38960 * C2678 + C38956 * C2681 + C38961 * C4709 + C38957 * C4715) *
               C283 +
           (C38958 * C306 + C38954 * C320 + C38959 * C1583 + C38955 * C1588 +
            C38960 * C2682 + C38956 * C2687 + C38961 * C4714 + C38957 * C4721) *
               C278 -
           (C38961 * C4708 + C38957 * C4713 + C38960 * C2679 + C38956 * C2683 +
            C38959 * C1575 + C38955 * C1582 + C38958 * C291 + C38954 * C307) *
               C284 -
           (C38961 * C4712 + C38957 * C4720 + C38960 * C2684 + C38956 * C2688 +
            C38959 * C1581 + C38955 * C1587 + C38958 * C308 + C38954 * C321) *
               C50757) *
              C50771 * C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51021 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
            (C33594 + C33593) * C49763 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C37654 * C2304) *
              C50810 * C51081 +
          (((C33593 + C33594) * C49763 -
            ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
            (C33595 + C33596) * C50757) *
               C50771 * C2302 +
           ((C33602 + C33601) * C49763 -
            ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
            (C33604 + C33603) * C50757) *
               C50771 * C2303 +
           ((C36381 + C36382) * C49763 - (C37311 * C51021 + C37312 * C49770) +
            (C36387 + C36388) * C50757) *
               C50771 * C2304) *
              C50810 * C51082 +
          (C37654 * C2302 +
           ((C36386 + C36385) * C49770 + (C36384 + C36383) * C51021 -
            (C36382 + C36381) * C49763 - (C36388 + C36387) * C50757) *
               C50771 * C2303 +
           ((C37324 + C37325) * C49770 + (C37326 + C37327) * C51021 -
            (C33361 * C4295 + C50971 * C4298 + C33360 * C2452 +
             C33358 * C2456) *
                C49763 -
            (C33361 * C4297 + C50971 * C4301 + C33360 * C2457 +
             C33358 * C2461) *
                C50757) *
               C50771 * C2304) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51021 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C49770 + C33412 * C51021 - C33413 * C49763 -
            C33414 * C50757) *
               C17289) *
              C50896 * C50810 * C51081 +
          (((C33593 + C33594) * C49763 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C51021 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C49770) +
            (C33595 + C33596) * C50757) *
               C17287 +
           ((C33597 + C33598) * C49763 -
            ((C33596 + C33595) * C51021 + (C33594 + C33593) * C49770) +
            (C33599 + C33600) * C50757) *
               C17288 +
           ((C33960 + C33959) * C49763 - (C33950 * C51021 + C33949 * C49770) +
            (C33962 + C33961) * C50757) *
               C17289) *
              C50896 * C50810 * C51082 +
          (((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                C49770 +
            (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                C51021 -
            (C33601 + C33602) * C49763 - (C33603 + C33604) * C50757) *
               C17287 +
           ((C33602 + C33601) * C49770 + (C33604 + C33603) * C51021 -
            (C33605 + C33606) * C49763 - (C33607 + C33608) * C50757) *
               C17288 +
           ((C33606 + C33605) * C49770 + (C33608 + C33607) * C51021 -
            (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
                C49763 -
            (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
                C50757) *
               C17289) *
              C50896 * C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C49770 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C51021 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C49763 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C50757) *
              C50771 * C50896 * C50810 * C51081 +
          ((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
            C38960 * C1226 + C38956 * C1233 + C38961 * C4710 + C38957 * C4717) *
               C49763 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C51021 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C49770) +
           (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
            C38960 * C1232 + C38956 * C1238 + C38961 * C4716 + C38957 * C4722) *
               C50757) *
              C50771 * C50896 * C50810 * C51082 +
          ((C38958 * C290 + C38954 * C305 + C38959 * C1576 + C38955 * C1584 +
            C38960 * C2678 + C38956 * C2681 + C38961 * C4709 + C38957 * C4715) *
               C49770 +
           (C38958 * C306 + C38954 * C320 + C38959 * C1583 + C38955 * C1588 +
            C38960 * C2682 + C38956 * C2687 + C38961 * C4714 + C38957 * C4721) *
               C51021 -
           (C38961 * C4708 + C38957 * C4713 + C38960 * C2679 + C38956 * C2683 +
            C38959 * C1575 + C38955 * C1582 + C38958 * C291 + C38954 * C307) *
               C49763 -
           (C38961 * C4712 + C38957 * C4720 + C38960 * C2684 + C38956 * C2688 +
            C38959 * C1581 + C38955 * C1587 + C38958 * C308 + C38954 * C321) *
               C50757) *
              C50771 * C50896 * C50810 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C51037 -
           (C38012 * C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C50874) *
              C51081 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C38007 + C38008) * C1109 + (C38009 + C38010) * C50752) * C50771 *
                C2304) *
               C50874 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C51037) *
              C51082 +
          ((C37328 * C2302 +
            ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
                C2303 +
            ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
                C2304) *
               C51037 -
           (((C33361 * C20721 + C50971 * C20723 + C33360 * C4299 +
              C33358 * C4302) *
                 C50752 +
             (C33361 * C20720 + C50971 * C20722 + C33360 * C4296 +
              C33358 * C4300) *
                 C1109) *
                C50771 * C2304 +
            ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) * C50771 *
                C2303 +
            C38012 * C2302) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C51037 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C51081 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C50874 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C51037) *
              C51082 +
          ((((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                 C1109 +
             (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                 C50752) *
                C17287 +
            ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) * C17288 +
            ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) * C17289) *
               C50896 * C51037 -
           (((C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
              C33358 * C1586) *
                 C50752 +
             (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
              C33358 * C1580) *
                 C1109) *
                C17289 +
            ((C33361 * C2684 + C50971 * C2688 + C33360 * C1581 +
              C33358 * C1587) *
                 C50752 +
             (C33361 * C2679 + C50971 * C2683 + C33360 * C1575 +
              C33358 * C1582) *
                 C1109) *
                C17288 +
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C50752 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
             C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
                C1109 +
            (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
             C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
                C50752) *
               C50771 * C50896 * C51037 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C50752 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C1109) *
               C50771 * C50896 * C50874) *
              C51081 +
          (((C38958 * C894 + C38954 * C899 + C38959 * C1227 + C38955 * C1235 +
             C38960 * C4711 + C38956 * C4719 + C38961 * C6679 +
             C38957 * C6683) *
                C1109 +
            (C38958 * C900 + C38954 * C909 + C38959 * C1234 + C38955 * C1239 +
             C38960 * C4718 + C38956 * C4723 + C38961 * C6682 +
             C38957 * C6685) *
                C50752) *
               C50771 * C50896 * C50874 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C50752 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C1109) *
               C50771 * C50896 * C51037) *
              C51082 +
          (((C38958 * C290 + C38954 * C305 + C38959 * C1576 + C38955 * C1584 +
             C38960 * C2678 + C38956 * C2681 + C38961 * C4709 +
             C38957 * C4715) *
                C1109 +
            (C38958 * C306 + C38954 * C320 + C38959 * C1583 + C38955 * C1588 +
             C38960 * C2682 + C38956 * C2687 + C38961 * C4714 +
             C38957 * C4721) *
                C50752) *
               C50771 * C50896 * C51037 -
           ((C38961 * C23017 + C38957 * C23019 + C38960 * C4714 +
             C38956 * C4721 + C38959 * C2682 + C38955 * C2687 + C38958 * C1583 +
             C38954 * C1588) *
                C50752 +
            (C38961 * C23016 + C38957 * C23018 + C38960 * C4709 +
             C38956 * C4715 + C38959 * C2678 + C38955 * C2681 + C38958 * C1576 +
             C38954 * C1584) *
                C1109) *
               C50771 * C50896 * C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33360 * C122 + C33358 * C129 + C33361 * C463 +
                 C50971 * C474) *
                    C1035 +
                (C33360 * C130 + C33358 * C143 + C33361 * C473 +
                 C50971 * C492) *
                    C1030 -
                (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
                C33411 * C1037 + C33412 * C1032) *
                   C17287 +
               ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
                (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
                (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
                   C17288 +
               (C33411 * C1035 + C33412 * C1030 - C33413 * C1036 -
                C33414 * C1031 + (C33408 + C33407) * C1037 +
                (C33410 + C33409) * C1032) *
                   C17289) *
                  C50896 * C50810 * C1033 +
              (((C33593 + C33594) * C1036 -
                ((C33361 * C900 + C50971 * C909 + C33360 * C296 +
                  C33358 * C315) *
                     C1030 +
                 (C33361 * C894 + C50971 * C899 + C33360 * C286 +
                  C33358 * C297) *
                     C1035) +
                (C33595 + C33596) * C1031 - C33949 * C1037 - C33950 * C1032) *
                   C17287 +
               ((C33597 + C33598) * C1036 -
                ((C33596 + C33595) * C1030 + (C33594 + C33593) * C1035) +
                (C33599 + C33600) * C1031 - (C33959 + C33960) * C1037 -
                (C33961 + C33962) * C1032) *
                   C17288 +
               ((C33960 + C33959) * C1036 - (C33950 * C1030 + C33949 * C1035) +
                (C33962 + C33961) * C1031 -
                (C33361 * C898 + C50971 * C907 + C33360 * C289 +
                 C33358 * C303) *
                    C1037 -
                (C33361 * C908 + C50971 * C913 + C33360 * C304 +
                 C33358 * C319) *
                    C1032) *
                   C17289) *
                  C50896 * C50810 * C50848) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33360 * C122 + C33358 * C129 + C33361 * C463 +
                 C50971 * C474) *
                    C1109 +
                (C33360 * C130 + C33358 * C143 + C33361 * C473 +
                 C50971 * C492) *
                    C50752) *
                   C17287 +
               ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) *
                   C17288 +
               (C33411 * C1109 + C33412 * C50752) * C17289) *
                  C50896 * C50810 * C1105 -
              ((C33950 * C50752 + C33949 * C1109) * C17289 +
               ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) *
                   C17288 +
               ((C33361 * C900 + C50971 * C909 + C33360 * C296 +
                 C33358 * C315) *
                    C50752 +
                (C33361 * C894 + C50971 * C899 + C33360 * C286 +
                 C33358 * C297) *
                    C1109) *
                   C17287) *
                  C50896 * C50810 * C1106 +
              (((C33360 * C290 + C33358 * C305 + C33361 * C1576 +
                 C50971 * C1584) *
                    C1109 +
                (C33360 * C306 + C33358 * C320 + C33361 * C1583 +
                 C50971 * C1588) *
                    C50752) *
                   C17287 +
               ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) *
                   C17288 +
               ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) *
                   C17289) *
                  C50896 * C50810 * C1107 -
              (((C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
                 C33358 * C1123) *
                    C50752 +
                (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
                 C33358 * C1117) *
                    C1109) *
                   C17289 +
               ((C33361 * C3230 + C50971 * C3234 + C33360 * C1118 +
                 C33358 * C1124) *
                    C50752 +
                (C33361 * C3225 + C50971 * C3229 + C33360 * C1112 +
                 C33358 * C1119) *
                    C1109) *
                   C17288 +
               ((C33361 * C3228 + C50971 * C3233 + C33360 * C1120 +
                 C33358 * C1125) *
                    C50752 +
                (C33361 * C3224 + C50971 * C3227 + C33360 * C1113 +
                 C33358 * C1121) *
                    C1109) *
                   C17287) *
                  C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C459 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C460 +
           (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C17287 +
            ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) * C17288 +
            ((C33800 + C33799) * C1109 + (C33802 + C33801) * C50752) * C17289) *
               C50896 * C461) *
              C1033 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C460 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C459 -
           (((C33361 * C6268 + C50971 * C6269 + C33360 * C1230 +
              C33358 * C1237) *
                 C50752 +
             (C33361 * C6266 + C50971 * C6267 + C33360 * C1225 +
              C33358 * C1231) *
                 C1109) *
                C17289 +
            ((C33361 * C4716 + C50971 * C4722 + C33360 * C1232 +
              C33358 * C1238) *
                 C50752 +
             (C33361 * C4710 + C50971 * C4717 + C33360 * C1226 +
              C33358 * C1233) *
                 C1109) *
                C17288 +
            ((C33361 * C4718 + C50971 * C4723 + C33360 * C1234 +
              C33358 * C1239) *
                 C50752 +
             (C33361 * C4711 + C50971 * C4719 + C33360 * C1227 +
              C33358 * C1235) *
                 C1109) *
                C17287) *
               C50896 * C461) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
            (C33594 + C33593) * C1036 - (C33596 + C33595) * C1031 +
            (C33597 + C33598) * C1037 + (C33599 + C33600) * C1032) *
               C50771 * C2303 +
           (C36389 * C1035 + C36390 * C1030 - C36353 * C1036 - C36354 * C1031 +
            (C33606 + C33605) * C1037 + (C33608 + C33607) * C1032) *
               C50771 * C2304) *
              C50810 * C1033 +
          (((C33593 + C33594) * C1036 -
            ((C36374 + C36373) * C1030 + (C36372 + C36371) * C1035) +
            (C33595 + C33596) * C1031 - C33949 * C1037 - C33950 * C1032) *
               C50771 * C2302 +
           ((C33602 + C33601) * C1036 -
            ((C36378 + C36377) * C1030 + (C36376 + C36375) * C1035) +
            (C33604 + C33603) * C1031 - (C33605 + C33606) * C1037 -
            (C33607 + C33608) * C1032) *
               C50771 * C2303 +
           ((C36381 + C36382) * C1036 -
            ((C36383 + C36384) * C1030 + (C36385 + C36386) * C1035) +
            (C36387 + C36388) * C1031 -
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C1037 -
            (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C1032) *
               C50771 * C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
               C2303 +
           C37328 * C2304) *
              C50810 * C1105 -
          (C37330 * C2304 +
           ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
               C2303 +
           ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
               C2302) *
              C50810 * C1106 +
          (C37328 * C2302 +
           ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
               C2303 +
           ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
               C2304) *
              C50810 * C1107 -
          (((C33361 * C21072 + C50971 * C21074 + C33360 * C3542 +
             C33358 * C3545) *
                C50752 +
            (C33361 * C21071 + C50971 * C21073 + C33360 * C3539 +
             C33358 * C3543) *
                C1109) *
               C50771 * C2304 +
           ((C37327 + C37326) * C50752 + (C37325 + C37324) * C1109) * C50771 *
               C2303 +
           C37330 * C2302) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C459 -
           (((C37059 + C37060) * C50752 + (C37061 + C37062) * C1109) * C50771 *
                C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C460 +
           (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C50771 * C2302 +
            ((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C50771 *
                C2303 +
            ((C37497 + C37498) * C1109 + (C37499 + C37500) * C50752) * C50771 *
                C2304) *
               C461) *
              C1033 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C33360 * C3224 + C33358 * C3227 + C33361 * C3725 +
              C50971 * C3729) *
                 C1109 +
             (C33360 * C3228 + C33358 * C3233 + C33361 * C3728 +
              C50971 * C3731) *
                 C50752) *
                C50771 * C2304) *
               C460 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C459 -
           (((C33361 * C21349 + C50971 * C21351 + C33360 * C3728 +
              C33358 * C3731) *
                 C50752 +
             (C33361 * C21348 + C50971 * C21350 + C33360 * C3725 +
              C33358 * C3729) *
                 C1109) *
                C50771 * C2304 +
            ((C37500 + C37499) * C50752 + (C37498 + C37497) * C1109) * C50771 *
                C2303 +
            ((C37496 + C37495) * C50752 + (C37494 + C37493) * C1109) * C50771 *
                C2302) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C1035 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C1030 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C1036 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C1031 +
           (C38958 * C124 + C38954 * C133 + C38959 * C464 + C38955 * C476 +
            C38960 * C469 + C38956 * C486 + C38961 * C1858 + C38957 * C1864) *
               C1037 +
           (C38958 * C134 + C38954 * C145 + C38959 * C477 + C38955 * C494 +
            C38960 * C487 + C38956 * C499 + C38961 * C1863 + C38957 * C1870) *
               C1032) *
              C50771 * C50896 * C50810 * C1033 +
          ((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
            C38960 * C1226 + C38956 * C1233 + C38961 * C4710 + C38957 * C4717) *
               C1036 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C1030 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C1035) +
           (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
            C38960 * C1232 + C38956 * C1238 + C38961 * C4716 + C38957 * C4722) *
               C1031 -
           (C38961 * C6266 + C38957 * C6267 + C38960 * C1225 + C38956 * C1231 +
            C38959 * C896 + C38955 * C903 + C38958 * C287 + C38954 * C299) *
               C1037 -
           (C38961 * C6268 + C38957 * C6269 + C38960 * C1230 + C38956 * C1237 +
            C38959 * C904 + C38955 * C911 + C38958 * C300 + C38954 * C317) *
               C1032) *
              C50771 * C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C1109 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C50752) *
              C50771 * C50896 * C50810 * C1105 -
          ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
            C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
               C50752 +
           (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
            C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
               C1109) *
              C50771 * C50896 * C50810 * C1106 +
          ((C38958 * C290 + C38954 * C305 + C38959 * C1576 + C38955 * C1584 +
            C38960 * C2678 + C38956 * C2681 + C38961 * C4709 + C38957 * C4715) *
               C1109 +
           (C38958 * C306 + C38954 * C320 + C38959 * C1583 + C38955 * C1588 +
            C38960 * C2682 + C38956 * C2687 + C38961 * C4714 + C38957 * C4721) *
               C50752) *
              C50771 * C50896 * C50810 * C1107 -
          ((C38961 * C21349 + C38957 * C21351 + C38960 * C3728 +
            C38956 * C3731 + C38959 * C3228 + C38955 * C3233 + C38958 * C1120 +
            C38954 * C1125) *
               C50752 +
           (C38961 * C21348 + C38957 * C21350 + C38960 * C3725 +
            C38956 * C3729 + C38959 * C3224 + C38955 * C3227 + C38958 * C1113 +
            C38954 * C1121) *
               C1109) *
              C50771 * C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
             C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
                C1109 +
            (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
             C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
                C50752) *
               C50771 * C50896 * C459 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C50752 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C1109) *
               C50771 * C50896 * C460 +
           ((C38958 * C467 + C38954 * C482 + C38959 * C1860 + C38955 * C1868 +
             C38960 * C5696 + C38956 * C5699 + C38961 * C7563 +
             C38957 * C7567) *
                C1109 +
            (C38958 * C483 + C38954 * C497 + C38959 * C1867 + C38955 * C1872 +
             C38960 * C5700 + C38956 * C5705 + C38961 * C7566 +
             C38957 * C7569) *
                C50752) *
               C50771 * C50896 * C461) *
              C1033 +
          (((C38958 * C894 + C38954 * C899 + C38959 * C1227 + C38955 * C1235 +
             C38960 * C4711 + C38956 * C4719 + C38961 * C6679 +
             C38957 * C6683) *
                C1109 +
            (C38958 * C900 + C38954 * C909 + C38959 * C1234 + C38955 * C1239 +
             C38960 * C4718 + C38956 * C4723 + C38961 * C6682 +
             C38957 * C6685) *
                C50752) *
               C50771 * C50896 * C460 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C50752 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C1109) *
               C50771 * C50896 * C459 -
           ((C38961 * C23933 + C38957 * C23935 + C38960 * C6682 +
             C38956 * C6685 + C38959 * C4718 + C38955 * C4723 + C38958 * C1234 +
             C38954 * C1239) *
                C50752 +
            (C38961 * C23932 + C38957 * C23934 + C38960 * C6679 +
             C38956 * C6683 + C38959 * C4711 + C38955 * C4719 + C38958 * C1227 +
             C38954 * C1235) *
                C1109) *
               C50771 * C50896 * C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C50771 * C2302 +
            ((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
             (C33594 + C33593) * C49763 - (C33596 + C33595) * C50757) *
                C50771 * C2303 +
            C37654 * C2304) *
               C51037 +
           (((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C50771 * C2302 +
            ((C34334 + C34333) * C49763 -
             ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
             (C34336 + C34335) * C50757) *
                C50771 * C2303 +
            ((C37057 + C37058) * C49763 -
             ((C37059 + C37060) * C51021 + (C37061 + C37062) * C49770) +
             (C37063 + C37064) * C50757) *
                C50771 * C2304) *
               C50874) *
              C1033 +
          ((((C33593 + C33594) * C49763 -
             ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
             (C33595 + C33596) * C50757) *
                C50771 * C2302 +
            ((C33602 + C33601) * C49763 -
             ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
             (C33604 + C33603) * C50757) *
                C50771 * C2303 +
            ((C36381 + C36382) * C49763 - (C37311 * C51021 + C37312 * C49770) +
             (C36387 + C36388) * C50757) *
                C50771 * C2304) *
               C51037 +
           (((C37056 + C37055) * C49770 + (C37054 + C37053) * C51021 -
             (C34333 + C34334) * C49763 - (C34335 + C34336) * C50757) *
                C50771 * C2302 +
            ((C37062 + C37061) * C49770 + (C37060 + C37059) * C51021 -
             (C37058 + C37057) * C49763 - (C37064 + C37063) * C50757) *
                C50771 * C2303 +
            ((C33360 * C3224 + C33358 * C3227 + C33361 * C3725 +
              C50971 * C3729) *
                 C49770 +
             (C33360 * C3228 + C33358 * C3233 + C33361 * C3728 +
              C50971 * C3731) *
                 C51021 -
             (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
              C33358 * C3229) *
                 C49763 -
             (C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
              C33358 * C3234) *
                 C50757) *
                C50771 * C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C17287 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
                C17288 +
            (C33411 * C49770 + C33412 * C51021 - C33413 * C49763 -
             C33414 * C50757) *
                C17289) *
               C50896 * C51037 +
           (((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C17287 +
            ((C33791 + C33792) * C49763 -
             ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
             (C33793 + C33794) * C50757) *
                C17288 +
            ((C34120 + C34119) * C49763 - (C34110 * C51021 + C34109 * C49770) +
             (C34122 + C34121) * C50757) *
                C17289) *
               C50896 * C50874) *
              C1033 +
          ((((C33593 + C33594) * C49763 -
             ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                  C51021 +
              (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                  C49770) +
             (C33595 + C33596) * C50757) *
                C17287 +
            ((C33597 + C33598) * C49763 -
             ((C33596 + C33595) * C51021 + (C33594 + C33593) * C49770) +
             (C33599 + C33600) * C50757) *
                C17288 +
            ((C33960 + C33959) * C49763 - (C33950 * C51021 + C33949 * C49770) +
             (C33962 + C33961) * C50757) *
                C17289) *
               C50896 * C51037 +
           (((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C49770 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C51021 -
             (C34333 + C34334) * C49763 - (C34335 + C34336) * C50757) *
                C17287 +
            ((C34334 + C34333) * C49770 + (C34336 + C34335) * C51021 -
             (C34337 + C34338) * C49763 - (C34339 + C34340) * C50757) *
                C17288 +
            ((C34338 + C34337) * C49770 + (C34340 + C34339) * C51021 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C49763 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C50757) *
                C17289) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
             C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
                C49770 +
            (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
             C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
                C51021 -
            (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
             C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
                C49763 -
            (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
             C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
                C50757) *
               C50771 * C50896 * C51037 +
           ((C38958 * C462 + C38954 * C472 + C38959 * C468 + C38955 * C484 +
             C38960 * C1859 + C38956 * C1866 + C38961 * C5697 +
             C38957 * C5701) *
                C49763 -
            ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 +
              C38956 * C1872 + C38959 * C483 + C38955 * C497 + C38958 * C473 +
              C38954 * C492) *
                 C51021 +
             (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 +
              C38956 * C1868 + C38959 * C467 + C38955 * C482 + C38958 * C463 +
              C38954 * C474) *
                 C49770) +
            (C38958 * C475 + C38954 * C493 + C38959 * C485 + C38955 * C498 +
             C38960 * C1865 + C38956 * C1871 + C38961 * C5702 +
             C38957 * C5706) *
                C50757) *
               C50771 * C50896 * C50874) *
              C1033 +
          (((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
             C38960 * C1226 + C38956 * C1233 + C38961 * C4710 +
             C38957 * C4717) *
                C49763 -
            ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 +
              C38956 * C1239 + C38959 * C900 + C38955 * C909 + C38958 * C296 +
              C38954 * C315) *
                 C51021 +
             (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 +
              C38956 * C1235 + C38959 * C894 + C38955 * C899 + C38958 * C286 +
              C38954 * C297) *
                 C49770) +
            (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
             C38960 * C1232 + C38956 * C1238 + C38961 * C4716 +
             C38957 * C4722) *
                C50757) *
               C50771 * C50896 * C51037 +
           ((C38958 * C894 + C38954 * C899 + C38959 * C1227 + C38955 * C1235 +
             C38960 * C4711 + C38956 * C4719 + C38961 * C6679 +
             C38957 * C6683) *
                C49770 +
            (C38958 * C900 + C38954 * C909 + C38959 * C1234 + C38955 * C1239 +
             C38960 * C4718 + C38956 * C4723 + C38961 * C6682 +
             C38957 * C6685) *
                C51021 -
            (C38961 * C6678 + C38957 * C6681 + C38960 * C4710 + C38956 * C4717 +
             C38959 * C1226 + C38955 * C1233 + C38958 * C895 + C38954 * C901) *
                C49763 -
            (C38961 * C6680 + C38957 * C6684 + C38960 * C4716 + C38956 * C4722 +
             C38959 * C1232 + C38955 * C1238 + C38958 * C902 + C38954 * C910) *
                C50757) *
               C50771 * C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C17287 +
           ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
           (C33411 * C1109 + C33412 * C50752) * C17289) *
              C50896 * C50810 * C1105 -
          ((C33950 * C50752 + C33949 * C1109) * C17289 +
           ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
           ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                C50752 +
            (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                C1109) *
               C17287) *
              C50896 * C50810 * C1106 +
          (((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                C1109 +
            (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                C50752) *
               C17287 +
           ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) * C17288 +
           ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) * C17289) *
              C50896 * C50810 * C1107 -
          (((C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C50752 +
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C1109) *
               C17289 +
           ((C33361 * C3230 + C50971 * C3234 + C33360 * C1118 +
             C33358 * C1124) *
                C50752 +
            (C33361 * C3225 + C50971 * C3229 + C33360 * C1112 +
             C33358 * C1119) *
                C1109) *
               C17288 +
           ((C33361 * C3228 + C50971 * C3233 + C33360 * C1120 +
             C33358 * C1125) *
                C50752 +
            (C33361 * C3224 + C50971 * C3227 + C33360 * C1113 +
             C33358 * C1121) *
                C1109) *
               C17287) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C17287 +
           ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
            (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
            (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
               C17288 +
           (C33411 * C1035 + C33412 * C1030 - C33413 * C1036 - C33414 * C1031 +
            (C33408 + C33407) * C1037 + (C33410 + C33409) * C1032) *
               C17289) *
              C50896 * C50810 * C1033 +
          (((C33593 + C33594) * C1036 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C1030 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1035) +
            (C33595 + C33596) * C1031 - C33949 * C1037 - C33950 * C1032) *
               C17287 +
           ((C33597 + C33598) * C1036 -
            ((C33596 + C33595) * C1030 + (C33594 + C33593) * C1035) +
            (C33599 + C33600) * C1031 - (C33959 + C33960) * C1037 -
            (C33961 + C33962) * C1032) *
               C17288 +
           ((C33960 + C33959) * C1036 - (C33950 * C1030 + C33949 * C1035) +
            (C33962 + C33961) * C1031 -
            (C33361 * C898 + C50971 * C907 + C33360 * C289 + C33358 * C303) *
                C1037 -
            (C33361 * C908 + C50971 * C913 + C33360 * C304 + C33358 * C319) *
                C1032) *
               C17289) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
            (C33594 + C33593) * C1036 - (C33596 + C33595) * C1031 +
            (C33597 + C33598) * C1037 + (C33599 + C33600) * C1032) *
               C50771 * C2303 +
           (C36389 * C1035 + C36390 * C1030 - C36353 * C1036 - C36354 * C1031 +
            (C33606 + C33605) * C1037 + (C33608 + C33607) * C1032) *
               C50771 * C2304) *
              C50810 * C1033 +
          (((C33593 + C33594) * C1036 -
            ((C36374 + C36373) * C1030 + (C36372 + C36371) * C1035) +
            (C33595 + C33596) * C1031 - C33949 * C1037 - C33950 * C1032) *
               C50771 * C2302 +
           ((C33602 + C33601) * C1036 -
            ((C36378 + C36377) * C1030 + (C36376 + C36375) * C1035) +
            (C33604 + C33603) * C1031 - (C33605 + C33606) * C1037 -
            (C33607 + C33608) * C1032) *
               C50771 * C2303 +
           ((C36381 + C36382) * C1036 -
            ((C36383 + C36384) * C1030 + (C36385 + C36386) * C1035) +
            (C36387 + C36388) * C1031 -
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C1037 -
            (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C1032) *
               C50771 * C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
               C2303 +
           C37328 * C2304) *
              C50810 * C1105 -
          (C37330 * C2304 +
           ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
               C2303 +
           ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
               C2302) *
              C50810 * C1106 +
          (C37328 * C2302 +
           ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
               C2303 +
           ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
               C2304) *
              C50810 * C1107 -
          (((C33361 * C21072 + C50971 * C21074 + C33360 * C3542 +
             C33358 * C3545) *
                C50752 +
            (C33361 * C21071 + C50971 * C21073 + C33360 * C3539 +
             C33358 * C3543) *
                C1109) *
               C50771 * C2304 +
           ((C37327 + C37326) * C50752 + (C37325 + C37324) * C1109) * C50771 *
               C2303 +
           C37330 * C2302) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C1035 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C1030 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C1036 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C1031 +
           (C38958 * C124 + C38954 * C133 + C38959 * C464 + C38955 * C476 +
            C38960 * C469 + C38956 * C486 + C38961 * C1858 + C38957 * C1864) *
               C1037 +
           (C38958 * C134 + C38954 * C145 + C38959 * C477 + C38955 * C494 +
            C38960 * C487 + C38956 * C499 + C38961 * C1863 + C38957 * C1870) *
               C1032) *
              C50771 * C50896 * C50810 * C1033 +
          ((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
            C38960 * C1226 + C38956 * C1233 + C38961 * C4710 + C38957 * C4717) *
               C1036 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C1030 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C1035) +
           (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
            C38960 * C1232 + C38956 * C1238 + C38961 * C4716 + C38957 * C4722) *
               C1031 -
           (C38961 * C6266 + C38957 * C6267 + C38960 * C1225 + C38956 * C1231 +
            C38959 * C896 + C38955 * C903 + C38958 * C287 + C38954 * C299) *
               C1037 -
           (C38961 * C6268 + C38957 * C6269 + C38960 * C1230 + C38956 * C1237 +
            C38959 * C904 + C38955 * C911 + C38958 * C300 + C38954 * C317) *
               C1032) *
              C50771 * C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C1109 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C50752) *
              C50771 * C50896 * C50810 * C1105 -
          ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
            C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
               C50752 +
           (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
            C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
               C1109) *
              C50771 * C50896 * C50810 * C1106 +
          ((C38958 * C290 + C38954 * C305 + C38959 * C1576 + C38955 * C1584 +
            C38960 * C2678 + C38956 * C2681 + C38961 * C4709 + C38957 * C4715) *
               C1109 +
           (C38958 * C306 + C38954 * C320 + C38959 * C1583 + C38955 * C1588 +
            C38960 * C2682 + C38956 * C2687 + C38961 * C4714 + C38957 * C4721) *
               C50752) *
              C50771 * C50896 * C50810 * C1107 -
          ((C38961 * C21349 + C38957 * C21351 + C38960 * C3728 +
            C38956 * C3731 + C38959 * C3228 + C38955 * C3233 + C38958 * C1120 +
            C38954 * C1125) *
               C50752 +
           (C38961 * C21348 + C38957 * C21350 + C38960 * C3725 +
            C38956 * C3729 + C38959 * C3224 + C38955 * C3227 + C38958 * C1113 +
            C38954 * C1121) *
               C1109) *
              C50771 * C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C50771 * C2302 +
            ((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
             (C33594 + C33593) * C49763 - (C33596 + C33595) * C50757) *
                C50771 * C2303 +
            C37654 * C2304) *
               C1687 +
           (((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C50771 * C2302 +
            ((C34334 + C34333) * C49763 -
             ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
             (C34336 + C34335) * C50757) *
                C50771 * C2303 +
            ((C37057 + C37058) * C49763 - (C37995 * C51021 + C37996 * C49770) +
             (C37063 + C37064) * C50757) *
                C50771 * C2304) *
               C50874) *
              C51036 +
          ((((C33593 + C33594) * C49763 -
             ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
             (C33595 + C33596) * C50757) *
                C50771 * C2302 +
            ((C33602 + C33601) * C49763 -
             ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
             (C33604 + C33603) * C50757) *
                C50771 * C2303 +
            ((C36381 + C36382) * C49763 - (C37311 * C51021 + C37312 * C49770) +
             (C36387 + C36388) * C50757) *
                C50771 * C2304) *
               C1687 +
           (((C37056 + C37055) * C49770 + (C37054 + C37053) * C51021 -
             (C34333 + C34334) * C49763 - (C34335 + C34336) * C50757) *
                C50771 * C2302 +
            ((C37062 + C37061) * C49770 + (C37060 + C37059) * C51021 -
             (C37058 + C37057) * C49763 - (C37064 + C37063) * C50757) *
                C50771 * C2303 +
            ((C38007 + C38008) * C49770 + (C38009 + C38010) * C51021 -
             (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
              C33358 * C3229) *
                 C49763 -
             (C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
              C33358 * C3234) *
                 C50757) *
                C50771 * C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C17287 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
                C17288 +
            (C33411 * C49770 + C33412 * C51021 - C33413 * C49763 -
             C33414 * C50757) *
                C17289) *
               C50896 * C1687 +
           (((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C17287 +
            ((C33791 + C33792) * C49763 -
             ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
             (C33793 + C33794) * C50757) *
                C17288 +
            ((C34120 + C34119) * C49763 - (C34110 * C51021 + C34109 * C49770) +
             (C34122 + C34121) * C50757) *
                C17289) *
               C50896 * C50874) *
              C51036 +
          ((((C33593 + C33594) * C49763 -
             ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                  C51021 +
              (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                  C49770) +
             (C33595 + C33596) * C50757) *
                C17287 +
            ((C33597 + C33598) * C49763 -
             ((C33596 + C33595) * C51021 + (C33594 + C33593) * C49770) +
             (C33599 + C33600) * C50757) *
                C17288 +
            ((C33960 + C33959) * C49763 - (C33950 * C51021 + C33949 * C49770) +
             (C33962 + C33961) * C50757) *
                C17289) *
               C50896 * C1687 +
           (((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C49770 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C51021 -
             (C34333 + C34334) * C49763 - (C34335 + C34336) * C50757) *
                C17287 +
            ((C34334 + C34333) * C49770 + (C34336 + C34335) * C51021 -
             (C34337 + C34338) * C49763 - (C34339 + C34340) * C50757) *
                C17288 +
            ((C34338 + C34337) * C49770 + (C34340 + C34339) * C51021 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C49763 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C50757) *
                C17289) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
             C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
                C49770 +
            (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
             C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
                C51021 -
            (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
             C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
                C49763 -
            (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
             C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
                C50757) *
               C50771 * C50896 * C1687 +
           ((C38958 * C462 + C38954 * C472 + C38959 * C468 + C38955 * C484 +
             C38960 * C1859 + C38956 * C1866 + C38961 * C5697 +
             C38957 * C5701) *
                C49763 -
            ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 +
              C38956 * C1872 + C38959 * C483 + C38955 * C497 + C38958 * C473 +
              C38954 * C492) *
                 C51021 +
             (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 +
              C38956 * C1868 + C38959 * C467 + C38955 * C482 + C38958 * C463 +
              C38954 * C474) *
                 C49770) +
            (C38958 * C475 + C38954 * C493 + C38959 * C485 + C38955 * C498 +
             C38960 * C1865 + C38956 * C1871 + C38961 * C5702 +
             C38957 * C5706) *
                C50757) *
               C50771 * C50896 * C50874) *
              C51036 +
          (((C38958 * C285 + C38954 * C295 + C38959 * C895 + C38955 * C901 +
             C38960 * C1226 + C38956 * C1233 + C38961 * C4710 +
             C38957 * C4717) *
                C49763 -
            ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 +
              C38956 * C1239 + C38959 * C900 + C38955 * C909 + C38958 * C296 +
              C38954 * C315) *
                 C51021 +
             (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 +
              C38956 * C1235 + C38959 * C894 + C38955 * C899 + C38958 * C286 +
              C38954 * C297) *
                 C49770) +
            (C38958 * C298 + C38954 * C316 + C38959 * C902 + C38955 * C910 +
             C38960 * C1232 + C38956 * C1238 + C38961 * C4716 +
             C38957 * C4722) *
                C50757) *
               C50771 * C50896 * C1687 +
           ((C38958 * C894 + C38954 * C899 + C38959 * C1227 + C38955 * C1235 +
             C38960 * C4711 + C38956 * C4719 + C38961 * C6679 +
             C38957 * C6683) *
                C49770 +
            (C38958 * C900 + C38954 * C909 + C38959 * C1234 + C38955 * C1239 +
             C38960 * C4718 + C38956 * C4723 + C38961 * C6682 +
             C38957 * C6685) *
                C51021 -
            (C38961 * C6678 + C38957 * C6681 + C38960 * C4710 + C38956 * C4717 +
             C38959 * C1226 + C38955 * C1233 + C38958 * C895 + C38954 * C901) *
                C49763 -
            (C38961 * C6680 + C38957 * C6684 + C38960 * C4716 + C38956 * C4722 +
             C38959 * C1232 + C38955 * C1238 + C38958 * C902 + C38954 * C910) *
                C50757) *
               C50771 * C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C51083 -
           (C38012 * C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C51084 +
           (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C50771 * C2302 +
            ((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C50771 *
                C2303 +
            ((C37497 + C37498) * C1109 + (C37499 + C37500) * C50752) * C50771 *
                C2304) *
               C2103) *
              C51036 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C38007 + C38008) * C1109 + (C38009 + C38010) * C50752) * C50771 *
                C2304) *
               C51084 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C51083 -
           (((C33361 * C21349 + C50971 * C21351 + C33360 * C3728 +
              C33358 * C3731) *
                 C50752 +
             (C33361 * C21348 + C50971 * C21350 + C33360 * C3725 +
              C33358 * C3729) *
                 C1109) *
                C50771 * C2304 +
            ((C37500 + C37499) * C50752 + (C37498 + C37497) * C1109) * C50771 *
                C2303 +
            ((C37496 + C37495) * C50752 + (C37494 + C37493) * C1109) * C50771 *
                C2302) *
               C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C51083 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C51084 +
           (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C17287 +
            ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) * C17288 +
            ((C33800 + C33799) * C1109 + (C33802 + C33801) * C50752) * C17289) *
               C50896 * C2103) *
              C51036 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C51084 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C51083 -
           (((C33361 * C6268 + C50971 * C6269 + C33360 * C1230 +
              C33358 * C1237) *
                 C50752 +
             (C33361 * C6266 + C50971 * C6267 + C33360 * C1225 +
              C33358 * C1231) *
                 C1109) *
                C17289 +
            ((C33361 * C4716 + C50971 * C4722 + C33360 * C1232 +
              C33358 * C1238) *
                 C50752 +
             (C33361 * C4710 + C50971 * C4717 + C33360 * C1226 +
              C33358 * C1233) *
                 C1109) *
                C17288 +
            ((C33361 * C4718 + C50971 * C4723 + C33360 * C1234 +
              C33358 * C1239) *
                 C50752 +
             (C33361 * C4711 + C50971 * C4719 + C33360 * C1227 +
              C33358 * C1235) *
                 C1109) *
                C17287) *
               C50896 * C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
             C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
                C1109 +
            (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
             C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
                C50752) *
               C50771 * C50896 * C51083 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C50752 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C1109) *
               C50771 * C50896 * C51084 +
           ((C38958 * C467 + C38954 * C482 + C38959 * C1860 + C38955 * C1868 +
             C38960 * C5696 + C38956 * C5699 + C38961 * C7563 +
             C38957 * C7567) *
                C1109 +
            (C38958 * C483 + C38954 * C497 + C38959 * C1867 + C38955 * C1872 +
             C38960 * C5700 + C38956 * C5705 + C38961 * C7566 +
             C38957 * C7569) *
                C50752) *
               C50771 * C50896 * C2103) *
              C51036 +
          (((C38958 * C894 + C38954 * C899 + C38959 * C1227 + C38955 * C1235 +
             C38960 * C4711 + C38956 * C4719 + C38961 * C6679 +
             C38957 * C6683) *
                C1109 +
            (C38958 * C900 + C38954 * C909 + C38959 * C1234 + C38955 * C1239 +
             C38960 * C4718 + C38956 * C4723 + C38961 * C6682 +
             C38957 * C6685) *
                C50752) *
               C50771 * C50896 * C51084 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C50752 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C1109) *
               C50771 * C50896 * C51083 -
           ((C38961 * C23933 + C38957 * C23935 + C38960 * C6682 +
             C38956 * C6685 + C38959 * C4718 + C38955 * C4723 + C38958 * C1234 +
             C38954 * C1239) *
                C50752 +
            (C38961 * C23932 + C38957 * C23934 + C38960 * C6679 +
             C38956 * C6683 + C38959 * C4711 + C38955 * C4719 + C38958 * C1227 +
             C38954 * C1235) *
                C1109) *
               C50771 * C50896 * C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33360 * C122 + C33358 * C129 + C33361 * C463 +
                 C50971 * C474) *
                    C1035 +
                (C33360 * C130 + C33358 * C143 + C33361 * C473 +
                 C50971 * C492) *
                    C1030 -
                (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
                C33411 * C1037 + C33412 * C1032) *
                   C17287 +
               ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
                (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
                (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
                   C17288 +
               (C33411 * C1035 + C33412 * C1030 - C33413 * C1036 -
                C33414 * C1031 + (C33408 + C33407) * C1037 +
                (C33410 + C33409) * C1032) *
                   C17289) *
                  C50896 * C1687 +
              (((C33787 + C33788) * C1036 -
                ((C33361 * C483 + C50971 * C497 + C33360 * C473 +
                  C33358 * C492) *
                     C1030 +
                 (C33361 * C467 + C50971 * C482 + C33360 * C463 +
                  C33358 * C474) *
                     C1035) +
                (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
                   C17287 +
               ((C33791 + C33792) * C1036 -
                ((C33790 + C33789) * C1030 + (C33788 + C33787) * C1035) +
                (C33793 + C33794) * C1031 - (C34119 + C34120) * C1037 -
                (C34121 + C34122) * C1032) *
                   C17288 +
               ((C34120 + C34119) * C1036 - (C34110 * C1030 + C34109 * C1035) +
                (C34122 + C34121) * C1031 -
                (C33361 * C471 + C50971 * C490 + C33360 * C466 +
                 C33358 * C480) *
                    C1037 -
                (C33361 * C491 + C50971 * C501 + C33360 * C481 +
                 C33358 * C496) *
                    C1032) *
                   C17289) *
                  C50896 * C50874) *
             C50798 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C33360 * C122 + C33358 * C129 + C33361 * C463 +
                  C50971 * C474) *
                     C1109 +
                 (C33360 * C130 + C33358 * C143 + C33361 * C473 +
                  C50971 * C492) *
                     C50752) *
                    C17287 +
                ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) *
                    C17288 +
                (C33411 * C1109 + C33412 * C50752) * C17289) *
                   C50896 * C1687 -
               ((C34110 * C50752 + C34109 * C1109) * C17289 +
                ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) *
                    C17288 +
                ((C33361 * C483 + C50971 * C497 + C33360 * C473 +
                  C33358 * C492) *
                     C50752 +
                 (C33361 * C467 + C50971 * C482 + C33360 * C463 +
                  C33358 * C474) *
                     C1109) *
                    C17287) *
                   C50896 * C50874) *
                  C280 +
              ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 +
                  C50971 * C1235) *
                     C1109 +
                 (C33360 * C900 + C33358 * C909 + C33361 * C1234 +
                  C50971 * C1239) *
                     C50752) *
                    C17287 +
                ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) *
                    C17288 +
                ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) *
                    C17289) *
                   C50896 * C50874 -
               ((C33950 * C50752 + C33949 * C1109) * C17289 +
                ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) *
                    C17288 +
                ((C33361 * C900 + C50971 * C909 + C33360 * C296 +
                  C33358 * C315) *
                     C50752 +
                 (C33361 * C894 + C50971 * C899 + C33360 * C286 +
                  C33358 * C297) *
                     C1109) *
                    C17287) *
                   C50896 * C1687) *
                  C281 +
              ((((C33360 * C290 + C33358 * C305 + C33361 * C1576 +
                  C50971 * C1584) *
                     C1109 +
                 (C33360 * C306 + C33358 * C320 + C33361 * C1583 +
                  C50971 * C1588) *
                     C50752) *
                    C17287 +
                ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) *
                    C17288 +
                ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) *
                    C17289) *
                   C50896 * C1687 -
               (((C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
                  C33358 * C1586) *
                     C50752 +
                 (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
                  C33358 * C1580) *
                     C1109) *
                    C17289 +
                ((C33361 * C2684 + C50971 * C2688 + C33360 * C1581 +
                  C33358 * C1587) *
                     C50752 +
                 (C33361 * C2679 + C50971 * C2683 + C33360 * C1575 +
                  C33358 * C1582) *
                     C1109) *
                    C17288 +
                ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
                  C33358 * C1588) *
                     C50752 +
                 (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
                  C33358 * C1584) *
                     C1109) *
                    C17287) *
                   C50896 * C50874) *
                  C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C17287 +
           ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
           (C33411 * C1109 + C33412 * C50752) * C17289) *
              C50896 * C1853 -
          ((C34110 * C50752 + C34109 * C1109) * C17289 +
           ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
           ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                C50752 +
            (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                C1109) *
               C17287) *
              C50896 * C1854 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C1109 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C50752) *
               C17287 +
           ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) * C17288 +
           ((C33800 + C33799) * C1109 + (C33802 + C33801) * C50752) * C17289) *
              C50896 * C1855 -
          (((C33361 * C5704 + C50971 * C5707 + C33360 * C1863 +
             C33358 * C1870) *
                C50752 +
            (C33361 * C5698 + C50971 * C5703 + C33360 * C1858 +
             C33358 * C1864) *
                C1109) *
               C17289 +
           ((C33361 * C5702 + C50971 * C5706 + C33360 * C1865 +
             C33358 * C1871) *
                C50752 +
            (C33361 * C5697 + C50971 * C5701 + C33360 * C1859 +
             C33358 * C1866) *
                C1109) *
               C17288 +
           ((C33361 * C5700 + C50971 * C5705 + C33360 * C1867 +
             C33358 * C1872) *
                C50752 +
            (C33361 * C5696 + C50971 * C5699 + C33360 * C1860 +
             C33358 * C1868) *
                C1109) *
               C17287) *
              C50896 * C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
            (C33594 + C33593) * C1036 - (C33596 + C33595) * C1031 +
            (C33597 + C33598) * C1037 + (C33599 + C33600) * C1032) *
               C50771 * C2303 +
           (C36389 * C1035 + C36390 * C1030 - C36353 * C1036 - C36354 * C1031 +
            (C33606 + C33605) * C1037 + (C33608 + C33607) * C1032) *
               C50771 * C2304) *
              C1687 +
          (((C33787 + C33788) * C1036 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C1030 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1035) +
            (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
               C50771 * C2302 +
           ((C34334 + C34333) * C1036 -
            ((C37053 + C37054) * C1030 + (C37055 + C37056) * C1035) +
            (C34336 + C34335) * C1031 - (C34337 + C34338) * C1037 -
            (C34339 + C34340) * C1032) *
               C50771 * C2303 +
           ((C37057 + C37058) * C1036 - (C37995 * C1030 + C37996 * C1035) +
            (C37063 + C37064) * C1031 -
            (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
             C33358 * C1580) *
                C1037 -
            (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
             C33358 * C1586) *
                C1032) *
               C50771 * C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C1687 -
           (C38012 * C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C50874) *
              C280 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C38007 + C38008) * C1109 + (C38009 + C38010) * C50752) * C50771 *
                C2304) *
               C50874 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C1687) *
              C281 +
          ((C37328 * C2302 +
            ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
                C2303 +
            ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
                C2304) *
               C1687 -
           (((C33361 * C20721 + C50971 * C20723 + C33360 * C4299 +
              C33358 * C4302) *
                 C50752 +
             (C33361 * C20720 + C50971 * C20722 + C33360 * C4296 +
              C33358 * C4300) *
                 C1109) *
                C50771 * C2304 +
            ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) * C50771 *
                C2303 +
            C38012 * C2302) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
               C2303 +
           C37328 * C2304) *
              C1853 -
          (C38012 * C2304 +
           ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
               C2303 +
           ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                C50752 +
            (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                C1109) *
               C50771 * C2302) *
              C1854 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C1109 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C50752) *
               C50771 * C2302 +
           ((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C50771 *
               C2303 +
           ((C37497 + C37498) * C1109 + (C37499 + C37500) * C50752) * C50771 *
               C2304) *
              C1855 -
          (((C33361 * C23017 + C50971 * C23019 + C33360 * C4714 +
             C33358 * C4721) *
                C50752 +
            (C33361 * C23016 + C50971 * C23018 + C33360 * C4709 +
             C33358 * C4715) *
                C1109) *
               C50771 * C2304 +
           ((C33361 * C6682 + C50971 * C6685 + C33360 * C4718 +
             C33358 * C4723) *
                C50752 +
            (C33361 * C6679 + C50971 * C6683 + C33360 * C4711 +
             C33358 * C4719) *
                C1109) *
               C50771 * C2303 +
           ((C33361 * C5700 + C50971 * C5705 + C33360 * C1867 +
             C33358 * C1872) *
                C50752 +
            (C33361 * C5696 + C50971 * C5699 + C33360 * C1860 +
             C33358 * C1868) *
                C1109) *
               C50771 * C2302) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C1035 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C1030 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C1036 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C1031 +
           (C38958 * C124 + C38954 * C133 + C38959 * C464 + C38955 * C476 +
            C38960 * C469 + C38956 * C486 + C38961 * C1858 + C38957 * C1864) *
               C1037 +
           (C38958 * C134 + C38954 * C145 + C38959 * C477 + C38955 * C494 +
            C38960 * C487 + C38956 * C499 + C38961 * C1863 + C38957 * C1870) *
               C1032) *
              C50771 * C50896 * C1687 +
          ((C38958 * C462 + C38954 * C472 + C38959 * C468 + C38955 * C484 +
            C38960 * C1859 + C38956 * C1866 + C38961 * C5697 + C38957 * C5701) *
               C1036 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C1030 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C1035) +
           (C38958 * C475 + C38954 * C493 + C38959 * C485 + C38955 * C498 +
            C38960 * C1865 + C38956 * C1871 + C38961 * C5702 + C38957 * C5706) *
               C1031 -
           (C38961 * C5698 + C38957 * C5703 + C38960 * C1858 + C38956 * C1864 +
            C38959 * C469 + C38955 * C486 + C38958 * C464 + C38954 * C476) *
               C1037 -
           (C38961 * C5704 + C38957 * C5707 + C38960 * C1863 + C38956 * C1870 +
            C38959 * C487 + C38955 * C499 + C38958 * C477 + C38954 * C494) *
               C1032) *
              C50771 * C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
             C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
                C1109 +
            (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
             C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
                C50752) *
               C50771 * C50896 * C1687 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C50752 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C1109) *
               C50771 * C50896 * C50874) *
              C280 +
          (((C38958 * C894 + C38954 * C899 + C38959 * C1227 + C38955 * C1235 +
             C38960 * C4711 + C38956 * C4719 + C38961 * C6679 +
             C38957 * C6683) *
                C1109 +
            (C38958 * C900 + C38954 * C909 + C38959 * C1234 + C38955 * C1239 +
             C38960 * C4718 + C38956 * C4723 + C38961 * C6682 +
             C38957 * C6685) *
                C50752) *
               C50771 * C50896 * C50874 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C50752 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C1109) *
               C50771 * C50896 * C1687) *
              C281 +
          (((C38958 * C290 + C38954 * C305 + C38959 * C1576 + C38955 * C1584 +
             C38960 * C2678 + C38956 * C2681 + C38961 * C4709 +
             C38957 * C4715) *
                C1109 +
            (C38958 * C306 + C38954 * C320 + C38959 * C1583 + C38955 * C1588 +
             C38960 * C2682 + C38956 * C2687 + C38961 * C4714 +
             C38957 * C4721) *
                C50752) *
               C50771 * C50896 * C1687 -
           ((C38961 * C23017 + C38957 * C23019 + C38960 * C4714 +
             C38956 * C4721 + C38959 * C2682 + C38955 * C2687 + C38958 * C1583 +
             C38954 * C1588) *
                C50752 +
            (C38961 * C23016 + C38957 * C23018 + C38960 * C4709 +
             C38956 * C4715 + C38959 * C2678 + C38955 * C2681 + C38958 * C1576 +
             C38954 * C1584) *
                C1109) *
               C50771 * C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C1109 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C50752) *
              C50771 * C50896 * C1853 -
          ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
            C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
               C50752 +
           (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
            C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
               C1109) *
              C50771 * C50896 * C1854 +
          ((C38958 * C467 + C38954 * C482 + C38959 * C1860 + C38955 * C1868 +
            C38960 * C5696 + C38956 * C5699 + C38961 * C7563 + C38957 * C7567) *
               C1109 +
           (C38958 * C483 + C38954 * C497 + C38959 * C1867 + C38955 * C1872 +
            C38960 * C5700 + C38956 * C5705 + C38961 * C7566 + C38957 * C7569) *
               C50752) *
              C50771 * C50896 * C1855 -
          ((C38961 * C40335 + C38957 * C40337 + C38960 * C7566 +
            C38956 * C7569 + C38959 * C5700 + C38955 * C5705 + C38958 * C1867 +
            C38954 * C1872) *
               C50752 +
           (C38961 * C40334 + C38957 * C40336 + C38960 * C7563 +
            C38956 * C7567 + C38959 * C5696 + C38955 * C5699 + C38958 * C1860 +
            C38954 * C1868) *
               C1109) *
              C50771 * C50896 * C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51021 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
            (C33594 + C33593) * C49763 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C37654 * C2304) *
              C51083 +
          (((C33787 + C33788) * C49763 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C51021 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C49770) +
            (C33789 + C33790) * C50757) *
               C50771 * C2302 +
           ((C34334 + C34333) * C49763 -
            ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
            (C34336 + C34335) * C50757) *
               C50771 * C2303 +
           ((C37057 + C37058) * C49763 - (C37995 * C51021 + C37996 * C49770) +
            (C37063 + C37064) * C50757) *
               C50771 * C2304) *
              C51084 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C49770 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C51021 -
            (C33795 + C33796) * C49763 - (C33797 + C33798) * C50757) *
               C50771 * C2302 +
           ((C37493 + C37494) * C49770 + (C37495 + C37496) * C51021 -
            (C33361 * C4710 + C50971 * C4717 + C33360 * C1226 +
             C33358 * C1233) *
                C49763 -
            (C33361 * C4716 + C50971 * C4722 + C33360 * C1232 +
             C33358 * C1238) *
                C50757) *
               C50771 * C2303 +
           ((C37497 + C37498) * C49770 + (C37499 + C37500) * C51021 -
            (C33361 * C4708 + C50971 * C4713 + C33360 * C2679 +
             C33358 * C2683) *
                C49763 -
            (C33361 * C4712 + C50971 * C4720 + C33360 * C2684 +
             C33358 * C2688) *
                C50757) *
               C50771 * C2304) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51021 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C49770 + C33412 * C51021 - C33413 * C49763 -
            C33414 * C50757) *
               C17289) *
              C50896 * C51083 +
          (((C33787 + C33788) * C49763 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C51021 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C49770) +
            (C33789 + C33790) * C50757) *
               C17287 +
           ((C33791 + C33792) * C49763 -
            ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
            (C33793 + C33794) * C50757) *
               C17288 +
           ((C34120 + C34119) * C49763 - (C34110 * C51021 + C34109 * C49770) +
            (C34122 + C34121) * C50757) *
               C17289) *
              C50896 * C51084 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C49770 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C51021 -
            (C33795 + C33796) * C49763 - (C33797 + C33798) * C50757) *
               C17287 +
           ((C33796 + C33795) * C49770 + (C33798 + C33797) * C51021 -
            (C33799 + C33800) * C49763 - (C33801 + C33802) * C50757) *
               C17288 +
           ((C33800 + C33799) * C49770 + (C33802 + C33801) * C51021 -
            (C33361 * C1857 + C50971 * C1862 + C33360 * C470 + C33358 * C488) *
                C49763 -
            (C33361 * C1861 + C50971 * C1869 + C33360 * C489 + C33358 * C500) *
                C50757) *
               C17289) *
              C50896 * C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C49770 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C51021 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C49763 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C50757) *
              C50771 * C50896 * C51083 +
          ((C38958 * C462 + C38954 * C472 + C38959 * C468 + C38955 * C484 +
            C38960 * C1859 + C38956 * C1866 + C38961 * C5697 + C38957 * C5701) *
               C49763 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C51021 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C49770) +
           (C38958 * C475 + C38954 * C493 + C38959 * C485 + C38955 * C498 +
            C38960 * C1865 + C38956 * C1871 + C38961 * C5702 + C38957 * C5706) *
               C50757) *
              C50771 * C50896 * C51084 +
          ((C38958 * C467 + C38954 * C482 + C38959 * C1860 + C38955 * C1868 +
            C38960 * C5696 + C38956 * C5699 + C38961 * C7563 + C38957 * C7567) *
               C49770 +
           (C38958 * C483 + C38954 * C497 + C38959 * C1867 + C38955 * C1872 +
            C38960 * C5700 + C38956 * C5705 + C38961 * C7566 + C38957 * C7569) *
               C51021 -
           (C38961 * C7562 + C38957 * C7565 + C38960 * C5697 + C38956 * C5701 +
            C38959 * C1859 + C38955 * C1866 + C38958 * C468 + C38954 * C484) *
               C49763 -
           (C38961 * C7564 + C38957 * C7568 + C38960 * C5702 + C38956 * C5706 +
            C38959 * C1865 + C38955 * C1871 + C38958 * C485 + C38954 * C498) *
               C50757) *
              C50771 * C50896 * C2103) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C1687 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C280 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C50874 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C1687) *
              C281 +
          ((((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                 C1109 +
             (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                 C50752) *
                C17287 +
            ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) * C17288 +
            ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) * C17289) *
               C50896 * C1687 -
           (((C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
              C33358 * C1586) *
                 C50752 +
             (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
              C33358 * C1580) *
                 C1109) *
                C17289 +
            ((C33361 * C2684 + C50971 * C2688 + C33360 * C1581 +
              C33358 * C1587) *
                 C50752 +
             (C33361 * C2679 + C50971 * C2683 + C33360 * C1575 +
              C33358 * C1582) *
                 C1109) *
                C17288 +
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C50752 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C17287 +
           ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
            (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
            (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
               C17288 +
           (C33411 * C1035 + C33412 * C1030 - C33413 * C1036 - C33414 * C1031 +
            (C33408 + C33407) * C1037 + (C33410 + C33409) * C1032) *
               C17289) *
              C50896 * C1687 +
          (((C33787 + C33788) * C1036 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C1030 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1035) +
            (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
               C17287 +
           ((C33791 + C33792) * C1036 -
            ((C33790 + C33789) * C1030 + (C33788 + C33787) * C1035) +
            (C33793 + C33794) * C1031 - (C34119 + C34120) * C1037 -
            (C34121 + C34122) * C1032) *
               C17288 +
           ((C34120 + C34119) * C1036 - (C34110 * C1030 + C34109 * C1035) +
            (C34122 + C34121) * C1031 -
            (C33361 * C471 + C50971 * C490 + C33360 * C466 + C33358 * C480) *
                C1037 -
            (C33361 * C491 + C50971 * C501 + C33360 * C481 + C33358 * C496) *
                C1032) *
               C17289) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
            (C33594 + C33593) * C1036 - (C33596 + C33595) * C1031 +
            (C33597 + C33598) * C1037 + (C33599 + C33600) * C1032) *
               C50771 * C2303 +
           (C36389 * C1035 + C36390 * C1030 - C36353 * C1036 - C36354 * C1031 +
            (C33606 + C33605) * C1037 + (C33608 + C33607) * C1032) *
               C50771 * C2304) *
              C1687 +
          (((C33787 + C33788) * C1036 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C1030 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1035) +
            (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
               C50771 * C2302 +
           ((C34334 + C34333) * C1036 -
            ((C37053 + C37054) * C1030 + (C37055 + C37056) * C1035) +
            (C34336 + C34335) * C1031 - (C34337 + C34338) * C1037 -
            (C34339 + C34340) * C1032) *
               C50771 * C2303 +
           ((C37057 + C37058) * C1036 - (C37995 * C1030 + C37996 * C1035) +
            (C37063 + C37064) * C1031 -
            (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
             C33358 * C1580) *
                C1037 -
            (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
             C33358 * C1586) *
                C1032) *
               C50771 * C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C1687 -
           (C38012 * C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C50874) *
              C280 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C38007 + C38008) * C1109 + (C38009 + C38010) * C50752) * C50771 *
                C2304) *
               C50874 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C1687) *
              C281 +
          ((C37328 * C2302 +
            ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
                C2303 +
            ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
                C2304) *
               C1687 -
           (((C33361 * C20721 + C50971 * C20723 + C33360 * C4299 +
              C33358 * C4302) *
                 C50752 +
             (C33361 * C20720 + C50971 * C20722 + C33360 * C4296 +
              C33358 * C4300) *
                 C1109) *
                C50771 * C2304 +
            ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) * C50771 *
                C2303 +
            C38012 * C2302) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
            C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
               C1035 +
           (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
            C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
               C1030 -
           (C38961 * C1859 + C38957 * C1866 + C38960 * C468 + C38956 * C484 +
            C38959 * C462 + C38955 * C472 + C38958 * C123 + C38954 * C131) *
               C1036 -
           (C38961 * C1865 + C38957 * C1871 + C38960 * C485 + C38956 * C498 +
            C38959 * C475 + C38955 * C493 + C38958 * C132 + C38954 * C144) *
               C1031 +
           (C38958 * C124 + C38954 * C133 + C38959 * C464 + C38955 * C476 +
            C38960 * C469 + C38956 * C486 + C38961 * C1858 + C38957 * C1864) *
               C1037 +
           (C38958 * C134 + C38954 * C145 + C38959 * C477 + C38955 * C494 +
            C38960 * C487 + C38956 * C499 + C38961 * C1863 + C38957 * C1870) *
               C1032) *
              C50771 * C50896 * C1687 +
          ((C38958 * C462 + C38954 * C472 + C38959 * C468 + C38955 * C484 +
            C38960 * C1859 + C38956 * C1866 + C38961 * C5697 + C38957 * C5701) *
               C1036 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C1030 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C1035) +
           (C38958 * C475 + C38954 * C493 + C38959 * C485 + C38955 * C498 +
            C38960 * C1865 + C38956 * C1871 + C38961 * C5702 + C38957 * C5706) *
               C1031 -
           (C38961 * C5698 + C38957 * C5703 + C38960 * C1858 + C38956 * C1864 +
            C38959 * C469 + C38955 * C486 + C38958 * C464 + C38954 * C476) *
               C1037 -
           (C38961 * C5704 + C38957 * C5707 + C38960 * C1863 + C38956 * C1870 +
            C38959 * C487 + C38955 * C499 + C38958 * C477 + C38954 * C494) *
               C1032) *
              C50771 * C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38958 * C122 + C38954 * C129 + C38959 * C463 + C38955 * C474 +
             C38960 * C467 + C38956 * C482 + C38961 * C1860 + C38957 * C1868) *
                C1109 +
            (C38958 * C130 + C38954 * C143 + C38959 * C473 + C38955 * C492 +
             C38960 * C483 + C38956 * C497 + C38961 * C1867 + C38957 * C1872) *
                C50752) *
               C50771 * C50896 * C1687 -
           ((C38961 * C5700 + C38957 * C5705 + C38960 * C1867 + C38956 * C1872 +
             C38959 * C483 + C38955 * C497 + C38958 * C473 + C38954 * C492) *
                C50752 +
            (C38961 * C5696 + C38957 * C5699 + C38960 * C1860 + C38956 * C1868 +
             C38959 * C467 + C38955 * C482 + C38958 * C463 + C38954 * C474) *
                C1109) *
               C50771 * C50896 * C50874) *
              C280 +
          (((C38958 * C894 + C38954 * C899 + C38959 * C1227 + C38955 * C1235 +
             C38960 * C4711 + C38956 * C4719 + C38961 * C6679 +
             C38957 * C6683) *
                C1109 +
            (C38958 * C900 + C38954 * C909 + C38959 * C1234 + C38955 * C1239 +
             C38960 * C4718 + C38956 * C4723 + C38961 * C6682 +
             C38957 * C6685) *
                C50752) *
               C50771 * C50896 * C50874 -
           ((C38961 * C4718 + C38957 * C4723 + C38960 * C1234 + C38956 * C1239 +
             C38959 * C900 + C38955 * C909 + C38958 * C296 + C38954 * C315) *
                C50752 +
            (C38961 * C4711 + C38957 * C4719 + C38960 * C1227 + C38956 * C1235 +
             C38959 * C894 + C38955 * C899 + C38958 * C286 + C38954 * C297) *
                C1109) *
               C50771 * C50896 * C1687) *
              C281 +
          (((C38958 * C290 + C38954 * C305 + C38959 * C1576 + C38955 * C1584 +
             C38960 * C2678 + C38956 * C2681 + C38961 * C4709 +
             C38957 * C4715) *
                C1109 +
            (C38958 * C306 + C38954 * C320 + C38959 * C1583 + C38955 * C1588 +
             C38960 * C2682 + C38956 * C2687 + C38961 * C4714 +
             C38957 * C4721) *
                C50752) *
               C50771 * C50896 * C1687 -
           ((C38961 * C23017 + C38957 * C23019 + C38960 * C4714 +
             C38956 * C4721 + C38959 * C2682 + C38955 * C2687 + C38958 * C1583 +
             C38954 * C1588) *
                C50752 +
            (C38961 * C23016 + C38957 * C23018 + C38960 * C4709 +
             C38956 * C4715 + C38959 * C2678 + C38955 * C2681 + C38958 * C1576 +
             C38954 * C1584) *
                C1109) *
               C50771 * C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C641 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C51077 -
                     (C44321 + C44322 + C44323) * C642 -
                     (C44324 + C44325 + C44326) * C51078 +
                     (C44327 + C44328 + C44329) * C643 +
                     (C44330 + C44331 + C44332) * C638) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C641 +
                     (C44326 + C44325 + C44324) * C51077 -
                     (C44329 + C44328 + C44327) * C642 -
                     (C44332 + C44331 + C44330) * C51078 +
                     (C44335 + C44334 + C44333) * C643 +
                     (C44338 + C44337 + C44336) * C638) *
                        C50776) *
                       C50896 * C50810 * C51036 +
                   (((C44509 + C44510 + C44511) * C642 -
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C51077 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C641) +
                     (C44512 + C44513 + C44514) * C51078 -
                     (C44861 + C44862 + C44863) * C643 -
                     (C44864 + C44865 + C44866) * C638) *
                        C51028 +
                    ((C44863 + C44862 + C44861) * C642 -
                     ((C44514 + C44513 + C44512) * C51077 +
                      (C44511 + C44510 + C44509) * C641) +
                     (C44866 + C44865 + C44864) * C51078 -
                     (C44283 * C1224 + C44280 * C1229 + C44282 * C897 +
                      C51088 * C905 + C44281 * C288 + C51087 * C301) *
                         C643 -
                     (C44283 * C1228 + C44280 * C1236 + C44282 * C906 +
                      C51088 * C912 + C44281 * C302 + C51087 * C318) *
                         C638) *
                        C50776) *
                       C50896 * C50810 * C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C283 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C278 -
                      (C44321 + C44322 + C44323) * C284 -
                      (C44324 + C44325 + C44326) * C50757) *
                         C51028 +
                     ((C44323 + C44322 + C44321) * C283 +
                      (C44326 + C44325 + C44324) * C278 -
                      (C44329 + C44328 + C44327) * C284 -
                      (C44332 + C44331 + C44330) * C50757) *
                         C50776) *
                        C50896 * C51037 +
                    (((C44691 + C44692 + C44693) * C284 -
                      ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                        C51088 * C497 + C44281 * C473 + C51087 * C492) *
                           C278 +
                       (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                        C51088 * C482 + C44281 * C463 + C51087 * C474) *
                           C283) +
                      (C44694 + C44695 + C44696) * C50757) *
                         C51028 +
                     ((C45027 + C45026 + C45025) * C284 -
                      ((C44696 + C44695 + C44694) * C278 +
                       (C44693 + C44692 + C44691) * C283) +
                      (C45030 + C45029 + C45028) * C50757) *
                         C50776) *
                        C50896 * C50874) *
                       C51036 +
                   ((((C44509 + C44510 + C44511) * C284 -
                      ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                        C51088 * C909 + C44281 * C296 + C51087 * C315) *
                           C278 +
                       (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                        C51088 * C899 + C44281 * C286 + C51087 * C297) *
                           C283) +
                      (C44512 + C44513 + C44514) * C50757) *
                         C51028 +
                     ((C44863 + C44862 + C44861) * C284 -
                      ((C44514 + C44513 + C44512) * C278 +
                       (C44511 + C44510 + C44509) * C283) +
                      (C44866 + C44865 + C44864) * C50757) *
                         C50776) *
                        C50896 * C51037 +
                    (((C44281 * C894 + C51087 * C899 + C44282 * C1227 +
                       C51088 * C1235 + C44283 * C4711 + C44280 * C4719) *
                          C283 +
                      (C44281 * C900 + C51087 * C909 + C44282 * C1234 +
                       C51088 * C1239 + C44283 * C4718 + C44280 * C4723) *
                          C278 -
                      (C45237 + C45238 + C45239) * C284 -
                      (C45240 + C45241 + C45242) * C50757) *
                         C51028 +
                     ((C45239 + C45238 + C45237) * C283 +
                      (C45242 + C45241 + C45240) * C278 -
                      (C44283 * C6266 + C44280 * C6267 + C44282 * C1225 +
                       C51088 * C1231 + C44281 * C896 + C51087 * C903) *
                          C284 -
                      (C44283 * C6268 + C44280 * C6269 + C44282 * C1230 +
                       C51088 * C1237 + C44281 * C904 + C51087 * C911) *
                          C50757) *
                         C50776) *
                        C50896 * C50874) *
                       C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[197] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C283 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C283 +
                     (C44326 + C44325 + C44324) * C278 -
                     (C44329 + C44328 + C44327) * C284 -
                     (C44332 + C44331 + C44330) * C50757) *
                        C50776) *
                       C50896 * C50810 * C280 +
                   (((C44509 + C44510 + C44511) * C284 -
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C278 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C283) +
                     (C44512 + C44513 + C44514) * C50757) *
                        C51028 +
                    ((C44281 * C287 + C51087 * C299 + C44282 * C896 +
                      C51088 * C903 + C44283 * C1225 + C44280 * C1231) *
                         C284 -
                     ((C44514 + C44513 + C44512) * C278 +
                      (C44511 + C44510 + C44509) * C283) +
                     (C44281 * C300 + C51087 * C317 + C44282 * C904 +
                      C51088 * C911 + C44283 * C1230 + C44280 * C1237) *
                         C50757) *
                        C50776) *
                       C50896 * C50810 * C281 +
                   (((C44281 * C290 + C51087 * C305 + C44282 * C1576 +
                      C51088 * C1584 + C44283 * C2678 + C44280 * C2681) *
                         C283 +
                     (C44281 * C306 + C51087 * C320 + C44282 * C1583 +
                      C51088 * C1588 + C44283 * C2682 + C44280 * C2687) *
                         C278 -
                     (C44515 + C44516 + C44517) * C284 -
                     (C44518 + C44519 + C44520) * C50757) *
                        C51028 +
                    ((C44517 + C44516 + C44515) * C283 +
                     (C44520 + C44519 + C44518) * C278 -
                     (C44283 * C2680 + C44280 * C2685 + C44282 * C1574 +
                      C51088 * C1580 + C44281 * C292 + C51087 * C309) *
                         C284 -
                     (C44283 * C2686 + C44280 * C2689 + C44282 * C1579 +
                      C51088 * C1586 + C44281 * C310 + C51087 * C322) *
                         C50757) *
                        C50776) *
                       C50896 * C50810 * C282)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                     C51088 * C474 + C44283 * C467 + C44280 * C482) *
                        C118 +
                    (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                     C51088 * C492 + C44283 * C483 + C44280 * C497) *
                        C106 -
                    (C44321 + C44322 + C44323) * C119 -
                    (C44324 + C44325 + C44326) * C107 +
                    (C44327 + C44328 + C44329) * C120 +
                    (C44330 + C44331 + C44332) * C108 -
                    (C44333 + C44334 + C44335) * C121 -
                    (C44336 + C44337 + C44338) * C109) *
                       C51028 +
                   ((C44323 + C44322 + C44321) * C118 +
                    (C44326 + C44325 + C44324) * C106 -
                    (C44329 + C44328 + C44327) * C119 -
                    (C44332 + C44331 + C44330) * C107 +
                    (C44335 + C44334 + C44333) * C120 +
                    (C44338 + C44337 + C44336) * C108 -
                    (C44283 * C471 + C44280 * C490 + C44282 * C466 +
                     C51088 * C480 + C44281 * C126 + C51087 * C137) *
                        C121 -
                    (C44283 * C491 + C44280 * C501 + C44282 * C481 +
                     C51088 * C496 + C44281 * C138 + C51087 * C147) *
                        C109) *
                       C50776) *
                  C50896 * C50810 * C50798) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C283 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C283 +
                     (C44326 + C44325 + C44324) * C278 -
                     (C44329 + C44328 + C44327) * C284 -
                     (C44332 + C44331 + C44330) * C50757) *
                        C50776) *
                       C50896 * C459 +
                   (((C44691 + C44692 + C44693) * C284 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C278 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C283) +
                     (C44694 + C44695 + C44696) * C50757) *
                        C51028 +
                    ((C44281 * C464 + C51087 * C476 + C44282 * C469 +
                      C51088 * C486 + C44283 * C1858 + C44280 * C1864) *
                         C284 -
                     ((C44696 + C44695 + C44694) * C278 +
                      (C44693 + C44692 + C44691) * C283) +
                     (C44281 * C477 + C51087 * C494 + C44282 * C487 +
                      C51088 * C499 + C44283 * C1863 + C44280 * C1870) *
                         C50757) *
                        C50776) *
                       C50896 * C460 +
                   (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                      C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                         C283 +
                     (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                      C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                         C278 -
                     (C44697 + C44698 + C44699) * C284 -
                     (C44700 + C44701 + C44702) * C50757) *
                        C51028 +
                    ((C44699 + C44698 + C44697) * C283 +
                     (C44702 + C44701 + C44700) * C278 -
                     (C44283 * C5698 + C44280 * C5703 + C44282 * C1858 +
                      C51088 * C1864 + C44281 * C469 + C51087 * C486) *
                         C284 -
                     (C44283 * C5704 + C44280 * C5707 + C44282 * C1863 +
                      C51088 * C1870 + C44281 * C487 + C51087 * C499) *
                         C50757) *
                        C50776) *
                       C50896 * C461) *
                  C50798) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C641 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C51077 -
                     (C44321 + C44322 + C44323) * C642 -
                     (C44324 + C44325 + C44326) * C51078 +
                     (C44327 + C44328 + C44329) * C643 +
                     (C44330 + C44331 + C44332) * C638) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C641 +
                     (C44326 + C44325 + C44324) * C51077 -
                     (C44329 + C44328 + C44327) * C642 -
                     (C44332 + C44331 + C44330) * C51078 +
                     (C44335 + C44334 + C44333) * C643 +
                     (C44338 + C44337 + C44336) * C638) *
                        C50776) *
                       C50896 * C51037 +
                   (((C44691 + C44692 + C44693) * C642 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C51077 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C641) +
                     (C44694 + C44695 + C44696) * C51078 -
                     (C45025 + C45026 + C45027) * C643 -
                     (C45028 + C45029 + C45030) * C638) *
                        C51028 +
                    ((C45027 + C45026 + C45025) * C642 -
                     ((C44696 + C44695 + C44694) * C51077 +
                      (C44693 + C44692 + C44691) * C641) +
                     (C45030 + C45029 + C45028) * C51078 -
                     (C44283 * C1857 + C44280 * C1862 + C44282 * C470 +
                      C51088 * C488 + C44281 * C465 + C51087 * C478) *
                         C643 -
                     (C44283 * C1861 + C44280 * C1869 + C44282 * C489 +
                      C51088 * C500 + C44281 * C479 + C51087 * C495) *
                         C638) *
                        C50776) *
                       C50896 * C50874) *
                  C50798) /
                 (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                     C51088 * C474 + C44283 * C467 + C44280 * C482) *
                        C118 +
                    (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                     C51088 * C492 + C44283 * C483 + C44280 * C497) *
                        C106 -
                    (C44321 + C44322 + C44323) * C119 -
                    (C44324 + C44325 + C44326) * C107 +
                    (C44327 + C44328 + C44329) * C120 +
                    (C44330 + C44331 + C44332) * C108 -
                    (C44333 + C44334 + C44335) * C121 -
                    (C44336 + C44337 + C44338) * C109) *
                       C51028 +
                   ((C44323 + C44322 + C44321) * C118 +
                    (C44326 + C44325 + C44324) * C106 -
                    (C44329 + C44328 + C44327) * C119 -
                    (C44332 + C44331 + C44330) * C107 +
                    (C44335 + C44334 + C44333) * C120 +
                    (C44338 + C44337 + C44336) * C108 -
                    (C44283 * C471 + C44280 * C490 + C44282 * C466 +
                     C51088 * C480 + C44281 * C126 + C51087 * C137) *
                        C121 -
                    (C44283 * C491 + C44280 * C501 + C44282 * C481 +
                     C51088 * C496 + C44281 * C138 + C51087 * C147) *
                        C109) *
                       C50776) *
                  C50896 * C50810 * C50798) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C283 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C278 -
                     (C44321 + C44322 + C44323) * C284 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C283 +
                     (C44326 + C44325 + C44324) * C278 -
                     (C44329 + C44328 + C44327) * C284 -
                     (C44332 + C44331 + C44330) * C50757) *
                        C50776) *
                       C50896 * C50810 * C280 +
                   (((C44509 + C44510 + C44511) * C284 -
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C278 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C283) +
                     (C44512 + C44513 + C44514) * C50757) *
                        C51028 +
                    ((C44281 * C287 + C51087 * C299 + C44282 * C896 +
                      C51088 * C903 + C44283 * C1225 + C44280 * C1231) *
                         C284 -
                     ((C44514 + C44513 + C44512) * C278 +
                      (C44511 + C44510 + C44509) * C283) +
                     (C44281 * C300 + C51087 * C317 + C44282 * C904 +
                      C51088 * C911 + C44283 * C1230 + C44280 * C1237) *
                         C50757) *
                        C50776) *
                       C50896 * C50810 * C281 +
                   (((C44281 * C290 + C51087 * C305 + C44282 * C1576 +
                      C51088 * C1584 + C44283 * C2678 + C44280 * C2681) *
                         C283 +
                     (C44281 * C306 + C51087 * C320 + C44282 * C1583 +
                      C51088 * C1588 + C44283 * C2682 + C44280 * C2687) *
                         C278 -
                     (C44515 + C44516 + C44517) * C284 -
                     (C44518 + C44519 + C44520) * C50757) *
                        C51028 +
                    ((C44517 + C44516 + C44515) * C283 +
                     (C44520 + C44519 + C44518) * C278 -
                     (C44283 * C2680 + C44280 * C2685 + C44282 * C1574 +
                      C51088 * C1580 + C44281 * C292 + C51087 * C309) *
                         C284 -
                     (C44283 * C2686 + C44280 * C2689 + C44282 * C1579 +
                      C51088 * C1586 + C44281 * C310 + C51087 * C322) *
                         C50757) *
                        C50776) *
                       C50896 * C50810 * C282)) /
                     (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C49770 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C51021 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C49770 +
                     (C44326 + C44325 + C44324) * C51021 -
                     (C44329 + C44328 + C44327) * C49763 -
                     (C44332 + C44331 + C44330) * C50757) *
                        C50776) *
                       C50896 * C50810 * C51081 +
                   (((C44509 + C44510 + C44511) * C49763 -
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C51021 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C49770) +
                     (C44512 + C44513 + C44514) * C50757) *
                        C51028 +
                    ((C44863 + C44862 + C44861) * C49763 -
                     ((C44514 + C44513 + C44512) * C51021 +
                      (C44511 + C44510 + C44509) * C49770) +
                     (C44866 + C44865 + C44864) * C50757) *
                        C50776) *
                       C50896 * C50810 * C51082 +
                   (((C44281 * C290 + C51087 * C305 + C44282 * C1576 +
                      C51088 * C1584 + C44283 * C2678 + C44280 * C2681) *
                         C49770 +
                     (C44281 * C306 + C51087 * C320 + C44282 * C1583 +
                      C51088 * C1588 + C44283 * C2682 + C44280 * C2687) *
                         C51021 -
                     (C44515 + C44516 + C44517) * C49763 -
                     (C44518 + C44519 + C44520) * C50757) *
                        C51028 +
                    ((C44517 + C44516 + C44515) * C49770 +
                     (C44520 + C44519 + C44518) * C51021 -
                     (C44283 * C2680 + C44280 * C2685 + C44282 * C1574 +
                      C51088 * C1580 + C44281 * C292 + C51087 * C309) *
                         C49763 -
                     (C44283 * C2686 + C44280 * C2689 + C44282 * C1579 +
                      C51088 * C1586 + C44281 * C310 + C51087 * C322) *
                         C50757) *
                        C50776) *
                       C50896 * C50810 * C1342)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C51028 +
                     ((C44323 + C44322 + C44321) * C1109 +
                      (C44326 + C44325 + C44324) * C50752) *
                         C50776) *
                        C50896 * C51037 -
                    (((C44696 + C44695 + C44694) * C50752 +
                      (C44693 + C44692 + C44691) * C1109) *
                         C50776 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C51028) *
                        C50896 * C50874) *
                       C51081 +
                   ((((C44281 * C894 + C51087 * C899 + C44282 * C1227 +
                       C51088 * C1235 + C44283 * C4711 + C44280 * C4719) *
                          C1109 +
                      (C44281 * C900 + C51087 * C909 + C44282 * C1234 +
                       C51088 * C1239 + C44283 * C4718 + C44280 * C4723) *
                          C50752) *
                         C51028 +
                     ((C45239 + C45238 + C45237) * C1109 +
                      (C45242 + C45241 + C45240) * C50752) *
                         C50776) *
                        C50896 * C50874 -
                    (((C44514 + C44513 + C44512) * C50752 +
                      (C44511 + C44510 + C44509) * C1109) *
                         C50776 +
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C50752 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C1109) *
                         C51028) *
                        C50896 * C51037) *
                       C51082 +
                   ((((C44281 * C290 + C51087 * C305 + C44282 * C1576 +
                       C51088 * C1584 + C44283 * C2678 + C44280 * C2681) *
                          C1109 +
                      (C44281 * C306 + C51087 * C320 + C44282 * C1583 +
                       C51088 * C1588 + C44283 * C2682 + C44280 * C2687) *
                          C50752) *
                         C51028 +
                     ((C44517 + C44516 + C44515) * C1109 +
                      (C44520 + C44519 + C44518) * C50752) *
                         C50776) *
                        C50896 * C51037 -
                    (((C44283 * C4712 + C44280 * C4720 + C44282 * C2684 +
                       C51088 * C2688 + C44281 * C1581 + C51087 * C1587) *
                          C50752 +
                      (C44283 * C4708 + C44280 * C4713 + C44282 * C2679 +
                       C51088 * C2683 + C44281 * C1575 + C51087 * C1582) *
                          C1109) *
                         C50776 +
                     ((C44283 * C4714 + C44280 * C4721 + C44282 * C2682 +
                       C51088 * C2687 + C44281 * C1583 + C51087 * C1588) *
                          C50752 +
                      (C44283 * C4709 + C44280 * C4715 + C44282 * C2678 +
                       C51088 * C2681 + C44281 * C1576 + C51087 * C1584) *
                          C1109) *
                         C51028) *
                        C50896 * C50874) *
                       C1342)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1109 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C50752) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C1109 +
                     (C44326 + C44325 + C44324) * C50752) *
                        C50776) *
                       C50896 * C50810 * C1105 -
                   (((C44514 + C44513 + C44512) * C50752 +
                     (C44511 + C44510 + C44509) * C1109) *
                        C50776 +
                    ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                      C51088 * C909 + C44281 * C296 + C51087 * C315) *
                         C50752 +
                     (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                      C51088 * C899 + C44281 * C286 + C51087 * C297) *
                         C1109) *
                        C51028) *
                       C50896 * C50810 * C1106 +
                   (((C44281 * C290 + C51087 * C305 + C44282 * C1576 +
                      C51088 * C1584 + C44283 * C2678 + C44280 * C2681) *
                         C1109 +
                     (C44281 * C306 + C51087 * C320 + C44282 * C1583 +
                      C51088 * C1588 + C44283 * C2682 + C44280 * C2687) *
                         C50752) *
                        C51028 +
                    ((C44517 + C44516 + C44515) * C1109 +
                     (C44520 + C44519 + C44518) * C50752) *
                        C50776) *
                       C50896 * C50810 * C1107 -
                   (((C44283 * C3726 + C44280 * C3730 + C44282 * C3230 +
                      C51088 * C3234 + C44281 * C1118 + C51087 * C1124) *
                         C50752 +
                     (C44283 * C3724 + C44280 * C3727 + C44282 * C3225 +
                      C51088 * C3229 + C44281 * C1112 + C51087 * C1119) *
                         C1109) *
                        C50776 +
                    ((C44283 * C3728 + C44280 * C3731 + C44282 * C3228 +
                      C51088 * C3233 + C44281 * C1120 + C51087 * C1125) *
                         C50752 +
                     (C44283 * C3725 + C44280 * C3729 + C44282 * C3224 +
                      C51088 * C3227 + C44281 * C1113 + C51087 * C1121) *
                         C1109) *
                        C51028) *
                       C50896 * C50810 * C1108)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1035 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C1030 -
                     (C44321 + C44322 + C44323) * C1036 -
                     (C44324 + C44325 + C44326) * C1031 +
                     (C44327 + C44328 + C44329) * C1037 +
                     (C44330 + C44331 + C44332) * C1032) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C1035 +
                     (C44326 + C44325 + C44324) * C1030 -
                     (C44329 + C44328 + C44327) * C1036 -
                     (C44332 + C44331 + C44330) * C1031 +
                     (C44335 + C44334 + C44333) * C1037 +
                     (C44338 + C44337 + C44336) * C1032) *
                        C50776) *
                       C50896 * C50810 * C1033 +
                   (((C44509 + C44510 + C44511) * C1036 -
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C1030 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C1035) +
                     (C44512 + C44513 + C44514) * C1031 -
                     (C44861 + C44862 + C44863) * C1037 -
                     (C44864 + C44865 + C44866) * C1032) *
                        C51028 +
                    ((C44863 + C44862 + C44861) * C1036 -
                     ((C44514 + C44513 + C44512) * C1030 +
                      (C44511 + C44510 + C44509) * C1035) +
                     (C44866 + C44865 + C44864) * C1031 -
                     (C44283 * C1224 + C44280 * C1229 + C44282 * C897 +
                      C51088 * C905 + C44281 * C288 + C51087 * C301) *
                         C1037 -
                     (C44283 * C1228 + C44280 * C1236 + C44282 * C906 +
                      C51088 * C912 + C44281 * C302 + C51087 * C318) *
                         C1032) *
                        C50776) *
                       C50896 * C50810 * C50848)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C51028 +
                     ((C44323 + C44322 + C44321) * C1109 +
                      (C44326 + C44325 + C44324) * C50752) *
                         C50776) *
                        C50896 * C459 -
                    (((C44696 + C44695 + C44694) * C50752 +
                      (C44693 + C44692 + C44691) * C1109) *
                         C50776 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C51028) *
                        C50896 * C460 +
                    (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                       C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                          C1109 +
                      (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                       C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                          C50752) *
                         C51028 +
                     ((C44699 + C44698 + C44697) * C1109 +
                      (C44702 + C44701 + C44700) * C50752) *
                         C50776) *
                        C50896 * C461) *
                       C1033 +
                   ((((C44281 * C894 + C51087 * C899 + C44282 * C1227 +
                       C51088 * C1235 + C44283 * C4711 + C44280 * C4719) *
                          C1109 +
                      (C44281 * C900 + C51087 * C909 + C44282 * C1234 +
                       C51088 * C1239 + C44283 * C4718 + C44280 * C4723) *
                          C50752) *
                         C51028 +
                     ((C45239 + C45238 + C45237) * C1109 +
                      (C45242 + C45241 + C45240) * C50752) *
                         C50776) *
                        C50896 * C460 -
                    (((C44514 + C44513 + C44512) * C50752 +
                      (C44511 + C44510 + C44509) * C1109) *
                         C50776 +
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C50752 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C1109) *
                         C51028) *
                        C50896 * C459 -
                    (((C44283 * C6680 + C44280 * C6684 + C44282 * C4716 +
                       C51088 * C4722 + C44281 * C1232 + C51087 * C1238) *
                          C50752 +
                      (C44283 * C6678 + C44280 * C6681 + C44282 * C4710 +
                       C51088 * C4717 + C44281 * C1226 + C51087 * C1233) *
                          C1109) *
                         C50776 +
                     ((C44283 * C6682 + C44280 * C6685 + C44282 * C4718 +
                       C51088 * C4723 + C44281 * C1234 + C51087 * C1239) *
                          C50752 +
                      (C44283 * C6679 + C44280 * C6683 + C44282 * C4711 +
                       C51088 * C4719 + C44281 * C1227 + C51087 * C1235) *
                          C1109) *
                         C51028) *
                        C50896 * C461) *
                       C50848)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C49770 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C51021 -
                      (C44321 + C44322 + C44323) * C49763 -
                      (C44324 + C44325 + C44326) * C50757) *
                         C51028 +
                     ((C44323 + C44322 + C44321) * C49770 +
                      (C44326 + C44325 + C44324) * C51021 -
                      (C44329 + C44328 + C44327) * C49763 -
                      (C44332 + C44331 + C44330) * C50757) *
                         C50776) *
                        C50896 * C51037 +
                    (((C44691 + C44692 + C44693) * C49763 -
                      ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                        C51088 * C497 + C44281 * C473 + C51087 * C492) *
                           C51021 +
                       (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                        C51088 * C482 + C44281 * C463 + C51087 * C474) *
                           C49770) +
                      (C44694 + C44695 + C44696) * C50757) *
                         C51028 +
                     ((C45027 + C45026 + C45025) * C49763 -
                      ((C44696 + C44695 + C44694) * C51021 +
                       (C44693 + C44692 + C44691) * C49770) +
                      (C45030 + C45029 + C45028) * C50757) *
                         C50776) *
                        C50896 * C50874) *
                       C1033 +
                   ((((C44509 + C44510 + C44511) * C49763 -
                      ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                        C51088 * C909 + C44281 * C296 + C51087 * C315) *
                           C51021 +
                       (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                        C51088 * C899 + C44281 * C286 + C51087 * C297) *
                           C49770) +
                      (C44512 + C44513 + C44514) * C50757) *
                         C51028 +
                     ((C44863 + C44862 + C44861) * C49763 -
                      ((C44514 + C44513 + C44512) * C51021 +
                       (C44511 + C44510 + C44509) * C49770) +
                      (C44866 + C44865 + C44864) * C50757) *
                         C50776) *
                        C50896 * C51037 +
                    (((C44281 * C894 + C51087 * C899 + C44282 * C1227 +
                       C51088 * C1235 + C44283 * C4711 + C44280 * C4719) *
                          C49770 +
                      (C44281 * C900 + C51087 * C909 + C44282 * C1234 +
                       C51088 * C1239 + C44283 * C4718 + C44280 * C4723) *
                          C51021 -
                      (C45237 + C45238 + C45239) * C49763 -
                      (C45240 + C45241 + C45242) * C50757) *
                         C51028 +
                     ((C45239 + C45238 + C45237) * C49770 +
                      (C45242 + C45241 + C45240) * C51021 -
                      (C44283 * C6266 + C44280 * C6267 + C44282 * C1225 +
                       C51088 * C1231 + C44281 * C896 + C51087 * C903) *
                          C49763 -
                      (C44283 * C6268 + C44280 * C6269 + C44282 * C1230 +
                       C51088 * C1237 + C44281 * C904 + C51087 * C911) *
                          C50757) *
                         C50776) *
                        C50896 * C50874) *
                       C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1035 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C1030 -
                     (C44321 + C44322 + C44323) * C1036 -
                     (C44324 + C44325 + C44326) * C1031 +
                     (C44327 + C44328 + C44329) * C1037 +
                     (C44330 + C44331 + C44332) * C1032) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C1035 +
                     (C44326 + C44325 + C44324) * C1030 -
                     (C44329 + C44328 + C44327) * C1036 -
                     (C44332 + C44331 + C44330) * C1031 +
                     (C44335 + C44334 + C44333) * C1037 +
                     (C44338 + C44337 + C44336) * C1032) *
                        C50776) *
                       C50896 * C50810 * C1033 +
                   (((C44509 + C44510 + C44511) * C1036 -
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C1030 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C1035) +
                     (C44512 + C44513 + C44514) * C1031 -
                     (C44861 + C44862 + C44863) * C1037 -
                     (C44864 + C44865 + C44866) * C1032) *
                        C51028 +
                    ((C44863 + C44862 + C44861) * C1036 -
                     ((C44514 + C44513 + C44512) * C1030 +
                      (C44511 + C44510 + C44509) * C1035) +
                     (C44866 + C44865 + C44864) * C1031 -
                     (C44283 * C1224 + C44280 * C1229 + C44282 * C897 +
                      C51088 * C905 + C44281 * C288 + C51087 * C301) *
                         C1037 -
                     (C44283 * C1228 + C44280 * C1236 + C44282 * C906 +
                      C51088 * C912 + C44281 * C302 + C51087 * C318) *
                         C1032) *
                        C50776) *
                       C50896 * C50810 * C50848)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1109 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C50752) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C1109 +
                     (C44326 + C44325 + C44324) * C50752) *
                        C50776) *
                       C50896 * C50810 * C1105 -
                   (((C44514 + C44513 + C44512) * C50752 +
                     (C44511 + C44510 + C44509) * C1109) *
                        C50776 +
                    ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                      C51088 * C909 + C44281 * C296 + C51087 * C315) *
                         C50752 +
                     (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                      C51088 * C899 + C44281 * C286 + C51087 * C297) *
                         C1109) *
                        C51028) *
                       C50896 * C50810 * C1106 +
                   (((C44281 * C290 + C51087 * C305 + C44282 * C1576 +
                      C51088 * C1584 + C44283 * C2678 + C44280 * C2681) *
                         C1109 +
                     (C44281 * C306 + C51087 * C320 + C44282 * C1583 +
                      C51088 * C1588 + C44283 * C2682 + C44280 * C2687) *
                         C50752) *
                        C51028 +
                    ((C44517 + C44516 + C44515) * C1109 +
                     (C44520 + C44519 + C44518) * C50752) *
                        C50776) *
                       C50896 * C50810 * C1107 -
                   (((C44283 * C3726 + C44280 * C3730 + C44282 * C3230 +
                      C51088 * C3234 + C44281 * C1118 + C51087 * C1124) *
                         C50752 +
                     (C44283 * C3724 + C44280 * C3727 + C44282 * C3225 +
                      C51088 * C3229 + C44281 * C1112 + C51087 * C1119) *
                         C1109) *
                        C50776 +
                    ((C44283 * C3728 + C44280 * C3731 + C44282 * C3228 +
                      C51088 * C3233 + C44281 * C1120 + C51087 * C1125) *
                         C50752 +
                     (C44283 * C3725 + C44280 * C3729 + C44282 * C3224 +
                      C51088 * C3227 + C44281 * C1113 + C51087 * C1121) *
                         C1109) *
                        C51028) *
                       C50896 * C50810 * C1108)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C49770 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C51021 -
                      (C44321 + C44322 + C44323) * C49763 -
                      (C44324 + C44325 + C44326) * C50757) *
                         C51028 +
                     ((C44323 + C44322 + C44321) * C49770 +
                      (C44326 + C44325 + C44324) * C51021 -
                      (C44329 + C44328 + C44327) * C49763 -
                      (C44332 + C44331 + C44330) * C50757) *
                         C50776) *
                        C50896 * C1687 +
                    (((C44691 + C44692 + C44693) * C49763 -
                      ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                        C51088 * C497 + C44281 * C473 + C51087 * C492) *
                           C51021 +
                       (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                        C51088 * C482 + C44281 * C463 + C51087 * C474) *
                           C49770) +
                      (C44694 + C44695 + C44696) * C50757) *
                         C51028 +
                     ((C45027 + C45026 + C45025) * C49763 -
                      ((C44696 + C44695 + C44694) * C51021 +
                       (C44693 + C44692 + C44691) * C49770) +
                      (C45030 + C45029 + C45028) * C50757) *
                         C50776) *
                        C50896 * C50874) *
                       C51036 +
                   ((((C44509 + C44510 + C44511) * C49763 -
                      ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                        C51088 * C909 + C44281 * C296 + C51087 * C315) *
                           C51021 +
                       (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                        C51088 * C899 + C44281 * C286 + C51087 * C297) *
                           C49770) +
                      (C44512 + C44513 + C44514) * C50757) *
                         C51028 +
                     ((C44863 + C44862 + C44861) * C49763 -
                      ((C44514 + C44513 + C44512) * C51021 +
                       (C44511 + C44510 + C44509) * C49770) +
                      (C44866 + C44865 + C44864) * C50757) *
                         C50776) *
                        C50896 * C1687 +
                    (((C44281 * C894 + C51087 * C899 + C44282 * C1227 +
                       C51088 * C1235 + C44283 * C4711 + C44280 * C4719) *
                          C49770 +
                      (C44281 * C900 + C51087 * C909 + C44282 * C1234 +
                       C51088 * C1239 + C44283 * C4718 + C44280 * C4723) *
                          C51021 -
                      (C45237 + C45238 + C45239) * C49763 -
                      (C45240 + C45241 + C45242) * C50757) *
                         C51028 +
                     ((C45239 + C45238 + C45237) * C49770 +
                      (C45242 + C45241 + C45240) * C51021 -
                      (C44283 * C6266 + C44280 * C6267 + C44282 * C1225 +
                       C51088 * C1231 + C44281 * C896 + C51087 * C903) *
                          C49763 -
                      (C44283 * C6268 + C44280 * C6269 + C44282 * C1230 +
                       C51088 * C1237 + C44281 * C904 + C51087 * C911) *
                          C50757) *
                         C50776) *
                        C50896 * C50874) *
                       C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C51028 +
                     ((C44323 + C44322 + C44321) * C1109 +
                      (C44326 + C44325 + C44324) * C50752) *
                         C50776) *
                        C50896 * C51083 -
                    (((C44696 + C44695 + C44694) * C50752 +
                      (C44693 + C44692 + C44691) * C1109) *
                         C50776 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C51028) *
                        C50896 * C51084 +
                    (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                       C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                          C1109 +
                      (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                       C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                          C50752) *
                         C51028 +
                     ((C44699 + C44698 + C44697) * C1109 +
                      (C44702 + C44701 + C44700) * C50752) *
                         C50776) *
                        C50896 * C2103) *
                       C51036 +
                   ((((C44281 * C894 + C51087 * C899 + C44282 * C1227 +
                       C51088 * C1235 + C44283 * C4711 + C44280 * C4719) *
                          C1109 +
                      (C44281 * C900 + C51087 * C909 + C44282 * C1234 +
                       C51088 * C1239 + C44283 * C4718 + C44280 * C4723) *
                          C50752) *
                         C51028 +
                     ((C45239 + C45238 + C45237) * C1109 +
                      (C45242 + C45241 + C45240) * C50752) *
                         C50776) *
                        C50896 * C51084 -
                    (((C44514 + C44513 + C44512) * C50752 +
                      (C44511 + C44510 + C44509) * C1109) *
                         C50776 +
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C50752 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C1109) *
                         C51028) *
                        C50896 * C51083 -
                    (((C44283 * C6680 + C44280 * C6684 + C44282 * C4716 +
                       C51088 * C4722 + C44281 * C1232 + C51087 * C1238) *
                          C50752 +
                      (C44283 * C6678 + C44280 * C6681 + C44282 * C4710 +
                       C51088 * C4717 + C44281 * C1226 + C51087 * C1233) *
                          C1109) *
                         C50776 +
                     ((C44283 * C6682 + C44280 * C6685 + C44282 * C4718 +
                       C51088 * C4723 + C44281 * C1234 + C51087 * C1239) *
                          C50752 +
                      (C44283 * C6679 + C44280 * C6683 + C44282 * C4711 +
                       C51088 * C4719 + C44281 * C1227 + C51087 * C1235) *
                          C1109) *
                         C51028) *
                        C50896 * C2103) *
                       C50848)) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C51028 +
                     ((C44323 + C44322 + C44321) * C1109 +
                      (C44326 + C44325 + C44324) * C50752) *
                         C50776) *
                        C50896 * C1687 -
                    (((C44696 + C44695 + C44694) * C50752 +
                      (C44693 + C44692 + C44691) * C1109) *
                         C50776 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C51028) *
                        C50896 * C50874) *
                       C280 +
                   ((((C44281 * C894 + C51087 * C899 + C44282 * C1227 +
                       C51088 * C1235 + C44283 * C4711 + C44280 * C4719) *
                          C1109 +
                      (C44281 * C900 + C51087 * C909 + C44282 * C1234 +
                       C51088 * C1239 + C44283 * C4718 + C44280 * C4723) *
                          C50752) *
                         C51028 +
                     ((C45239 + C45238 + C45237) * C1109 +
                      (C45242 + C45241 + C45240) * C50752) *
                         C50776) *
                        C50896 * C50874 -
                    (((C44514 + C44513 + C44512) * C50752 +
                      (C44511 + C44510 + C44509) * C1109) *
                         C50776 +
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C50752 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C1109) *
                         C51028) *
                        C50896 * C1687) *
                       C281 +
                   ((((C44281 * C290 + C51087 * C305 + C44282 * C1576 +
                       C51088 * C1584 + C44283 * C2678 + C44280 * C2681) *
                          C1109 +
                      (C44281 * C306 + C51087 * C320 + C44282 * C1583 +
                       C51088 * C1588 + C44283 * C2682 + C44280 * C2687) *
                          C50752) *
                         C51028 +
                     ((C44517 + C44516 + C44515) * C1109 +
                      (C44520 + C44519 + C44518) * C50752) *
                         C50776) *
                        C50896 * C1687 -
                    (((C44283 * C4712 + C44280 * C4720 + C44282 * C2684 +
                       C51088 * C2688 + C44281 * C1581 + C51087 * C1587) *
                          C50752 +
                      (C44283 * C4708 + C44280 * C4713 + C44282 * C2679 +
                       C51088 * C2683 + C44281 * C1575 + C51087 * C1582) *
                          C1109) *
                         C50776 +
                     ((C44283 * C4714 + C44280 * C4721 + C44282 * C2682 +
                       C51088 * C2687 + C44281 * C1583 + C51087 * C1588) *
                          C50752 +
                      (C44283 * C4709 + C44280 * C4715 + C44282 * C2678 +
                       C51088 * C2681 + C44281 * C1576 + C51087 * C1584) *
                          C1109) *
                         C51028) *
                        C50896 * C50874) *
                       C282)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1035 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C1030 -
                     (C44321 + C44322 + C44323) * C1036 -
                     (C44324 + C44325 + C44326) * C1031 +
                     (C44327 + C44328 + C44329) * C1037 +
                     (C44330 + C44331 + C44332) * C1032) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C1035 +
                     (C44326 + C44325 + C44324) * C1030 -
                     (C44329 + C44328 + C44327) * C1036 -
                     (C44332 + C44331 + C44330) * C1031 +
                     (C44335 + C44334 + C44333) * C1037 +
                     (C44338 + C44337 + C44336) * C1032) *
                        C50776) *
                       C50896 * C1687 +
                   (((C44691 + C44692 + C44693) * C1036 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C1030 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1035) +
                     (C44694 + C44695 + C44696) * C1031 -
                     (C45025 + C45026 + C45027) * C1037 -
                     (C45028 + C45029 + C45030) * C1032) *
                        C51028 +
                    ((C45027 + C45026 + C45025) * C1036 -
                     ((C44696 + C44695 + C44694) * C1030 +
                      (C44693 + C44692 + C44691) * C1035) +
                     (C45030 + C45029 + C45028) * C1031 -
                     (C44283 * C1857 + C44280 * C1862 + C44282 * C470 +
                      C51088 * C488 + C44281 * C465 + C51087 * C478) *
                         C1037 -
                     (C44283 * C1861 + C44280 * C1869 + C44282 * C489 +
                      C51088 * C500 + C44281 * C479 + C51087 * C495) *
                         C1032) *
                        C50776) *
                       C50896 * C50874) *
                  C50798) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1109 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C50752) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C1109 +
                     (C44326 + C44325 + C44324) * C50752) *
                        C50776) *
                       C50896 * C1853 -
                   (((C44696 + C44695 + C44694) * C50752 +
                     (C44693 + C44692 + C44691) * C1109) *
                        C50776 +
                    ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                      C51088 * C497 + C44281 * C473 + C51087 * C492) *
                         C50752 +
                     (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                      C51088 * C482 + C44281 * C463 + C51087 * C474) *
                         C1109) *
                        C51028) *
                       C50896 * C1854 +
                   (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                      C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                         C1109 +
                     (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                      C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                         C50752) *
                        C51028 +
                    ((C44699 + C44698 + C44697) * C1109 +
                     (C44702 + C44701 + C44700) * C50752) *
                        C50776) *
                       C50896 * C1855 -
                   (((C44283 * C7564 + C44280 * C7568 + C44282 * C5702 +
                      C51088 * C5706 + C44281 * C1865 + C51087 * C1871) *
                         C50752 +
                     (C44283 * C7562 + C44280 * C7565 + C44282 * C5697 +
                      C51088 * C5701 + C44281 * C1859 + C51087 * C1866) *
                         C1109) *
                        C50776 +
                    ((C44283 * C7566 + C44280 * C7569 + C44282 * C5700 +
                      C51088 * C5705 + C44281 * C1867 + C51087 * C1872) *
                         C50752 +
                     (C44283 * C7563 + C44280 * C7567 + C44282 * C5696 +
                      C51088 * C5699 + C44281 * C1860 + C51087 * C1868) *
                         C1109) *
                        C51028) *
                       C50896 * C1856) *
                  C50798) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C49770 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C51021 -
                     (C44321 + C44322 + C44323) * C49763 -
                     (C44324 + C44325 + C44326) * C50757) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C49770 +
                     (C44326 + C44325 + C44324) * C51021 -
                     (C44329 + C44328 + C44327) * C49763 -
                     (C44332 + C44331 + C44330) * C50757) *
                        C50776) *
                       C50896 * C51083 +
                   (((C44691 + C44692 + C44693) * C49763 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C51021 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C49770) +
                     (C44694 + C44695 + C44696) * C50757) *
                        C51028 +
                    ((C45027 + C45026 + C45025) * C49763 -
                     ((C44696 + C44695 + C44694) * C51021 +
                      (C44693 + C44692 + C44691) * C49770) +
                     (C45030 + C45029 + C45028) * C50757) *
                        C50776) *
                       C50896 * C51084 +
                   (((C44281 * C467 + C51087 * C482 + C44282 * C1860 +
                      C51088 * C1868 + C44283 * C5696 + C44280 * C5699) *
                         C49770 +
                     (C44281 * C483 + C51087 * C497 + C44282 * C1867 +
                      C51088 * C1872 + C44283 * C5700 + C44280 * C5705) *
                         C51021 -
                     (C44697 + C44698 + C44699) * C49763 -
                     (C44700 + C44701 + C44702) * C50757) *
                        C51028 +
                    ((C44699 + C44698 + C44697) * C49770 +
                     (C44702 + C44701 + C44700) * C51021 -
                     (C44283 * C5698 + C44280 * C5703 + C44282 * C1858 +
                      C51088 * C1864 + C44281 * C469 + C51087 * C486) *
                         C49763 -
                     (C44283 * C5704 + C44280 * C5707 + C44282 * C1863 +
                      C51088 * C1870 + C44281 * C487 + C51087 * C499) *
                         C50757) *
                        C50776) *
                       C50896 * C2103) *
                  C50798) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                      C51088 * C474 + C44283 * C467 + C44280 * C482) *
                         C1035 +
                     (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                      C51088 * C492 + C44283 * C483 + C44280 * C497) *
                         C1030 -
                     (C44321 + C44322 + C44323) * C1036 -
                     (C44324 + C44325 + C44326) * C1031 +
                     (C44327 + C44328 + C44329) * C1037 +
                     (C44330 + C44331 + C44332) * C1032) *
                        C51028 +
                    ((C44323 + C44322 + C44321) * C1035 +
                     (C44326 + C44325 + C44324) * C1030 -
                     (C44329 + C44328 + C44327) * C1036 -
                     (C44332 + C44331 + C44330) * C1031 +
                     (C44335 + C44334 + C44333) * C1037 +
                     (C44338 + C44337 + C44336) * C1032) *
                        C50776) *
                       C50896 * C1687 +
                   (((C44691 + C44692 + C44693) * C1036 -
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C1030 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1035) +
                     (C44694 + C44695 + C44696) * C1031 -
                     (C45025 + C45026 + C45027) * C1037 -
                     (C45028 + C45029 + C45030) * C1032) *
                        C51028 +
                    ((C45027 + C45026 + C45025) * C1036 -
                     ((C44696 + C44695 + C44694) * C1030 +
                      (C44693 + C44692 + C44691) * C1035) +
                     (C45030 + C45029 + C45028) * C1031 -
                     (C44283 * C1857 + C44280 * C1862 + C44282 * C470 +
                      C51088 * C488 + C44281 * C465 + C51087 * C478) *
                         C1037 -
                     (C44283 * C1861 + C44280 * C1869 + C44282 * C489 +
                      C51088 * C500 + C44281 * C479 + C51087 * C495) *
                         C1032) *
                        C50776) *
                       C50896 * C50874) *
                  C50798) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44281 * C122 + C51087 * C129 + C44282 * C463 +
                       C51088 * C474 + C44283 * C467 + C44280 * C482) *
                          C1109 +
                      (C44281 * C130 + C51087 * C143 + C44282 * C473 +
                       C51088 * C492 + C44283 * C483 + C44280 * C497) *
                          C50752) *
                         C51028 +
                     ((C44323 + C44322 + C44321) * C1109 +
                      (C44326 + C44325 + C44324) * C50752) *
                         C50776) *
                        C50896 * C1687 -
                    (((C44696 + C44695 + C44694) * C50752 +
                      (C44693 + C44692 + C44691) * C1109) *
                         C50776 +
                     ((C44283 * C1867 + C44280 * C1872 + C44282 * C483 +
                       C51088 * C497 + C44281 * C473 + C51087 * C492) *
                          C50752 +
                      (C44283 * C1860 + C44280 * C1868 + C44282 * C467 +
                       C51088 * C482 + C44281 * C463 + C51087 * C474) *
                          C1109) *
                         C51028) *
                        C50896 * C50874) *
                       C280 +
                   ((((C44281 * C894 + C51087 * C899 + C44282 * C1227 +
                       C51088 * C1235 + C44283 * C4711 + C44280 * C4719) *
                          C1109 +
                      (C44281 * C900 + C51087 * C909 + C44282 * C1234 +
                       C51088 * C1239 + C44283 * C4718 + C44280 * C4723) *
                          C50752) *
                         C51028 +
                     ((C45239 + C45238 + C45237) * C1109 +
                      (C45242 + C45241 + C45240) * C50752) *
                         C50776) *
                        C50896 * C50874 -
                    (((C44514 + C44513 + C44512) * C50752 +
                      (C44511 + C44510 + C44509) * C1109) *
                         C50776 +
                     ((C44283 * C1234 + C44280 * C1239 + C44282 * C900 +
                       C51088 * C909 + C44281 * C296 + C51087 * C315) *
                          C50752 +
                      (C44283 * C1227 + C44280 * C1235 + C44282 * C894 +
                       C51088 * C899 + C44281 * C286 + C51087 * C297) *
                          C1109) *
                         C51028) *
                        C50896 * C1687) *
                       C281 +
                   ((((C44281 * C290 + C51087 * C305 + C44282 * C1576 +
                       C51088 * C1584 + C44283 * C2678 + C44280 * C2681) *
                          C1109 +
                      (C44281 * C306 + C51087 * C320 + C44282 * C1583 +
                       C51088 * C1588 + C44283 * C2682 + C44280 * C2687) *
                          C50752) *
                         C51028 +
                     ((C44517 + C44516 + C44515) * C1109 +
                      (C44520 + C44519 + C44518) * C50752) *
                         C50776) *
                        C50896 * C1687 -
                    (((C44283 * C4712 + C44280 * C4720 + C44282 * C2684 +
                       C51088 * C2688 + C44281 * C1581 + C51087 * C1587) *
                          C50752 +
                      (C44283 * C4708 + C44280 * C4713 + C44282 * C2679 +
                       C51088 * C2683 + C44281 * C1575 + C51087 * C1582) *
                          C1109) *
                         C50776 +
                     ((C44283 * C4714 + C44280 * C4721 + C44282 * C2682 +
                       C51088 * C2687 + C44281 * C1583 + C51087 * C1588) *
                          C50752 +
                      (C44283 * C4709 + C44280 * C4715 + C44282 * C2678 +
                       C51088 * C2681 + C44281 * C1576 + C51087 * C1584) *
                          C1109) *
                         C51028) *
                        C50896 * C50874) *
                       C282)) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C641 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51077 -
            (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
            C33411 * C643 + C33412 * C638) *
               C17287 +
           ((C33396 + C33395) * C641 + (C33398 + C33397) * C51077 -
            (C33400 + C33399) * C642 - (C33402 + C33401) * C51078 +
            (C33404 + C33403) * C643 + (C33406 + C33405) * C638) *
               C17288 +
           (C33411 * C641 + C33412 * C51077 - C33413 * C642 - C33414 * C51078 +
            (C33408 + C33407) * C643 + (C33410 + C33409) * C638) *
               C17289) *
              C50896 * C50810 * C51036 +
          (((C33593 + C33594) * C642 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C51077 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C641) +
            (C33595 + C33596) * C51078 - C33949 * C643 - C33950 * C638) *
               C17287 +
           ((C33597 + C33598) * C642 -
            ((C33596 + C33595) * C51077 + (C33594 + C33593) * C641) +
            (C33599 + C33600) * C51078 - (C33959 + C33960) * C643 -
            (C33961 + C33962) * C638) *
               C17288 +
           ((C33960 + C33959) * C642 - (C33950 * C51077 + C33949 * C641) +
            (C33962 + C33961) * C51078 -
            (C33361 * C898 + C50971 * C907 + C33360 * C289 + C33358 * C303) *
                C643 -
            (C33361 * C908 + C50971 * C913 + C33360 * C304 + C33358 * C319) *
                C638) *
               C17289) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C641 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51077 -
            (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
            C33411 * C643 + C33412 * C638) *
               C50771 * C2302 +
           ((C36371 + C36372) * C641 + (C36373 + C36374) * C51077 -
            (C33594 + C33593) * C642 - (C33596 + C33595) * C51078 +
            (C33597 + C33598) * C643 + (C33599 + C33600) * C638) *
               C50771 * C2303 +
           (C36389 * C641 + C36390 * C51077 - C36353 * C642 - C36354 * C51078 +
            (C33606 + C33605) * C643 + (C33608 + C33607) * C638) *
               C50771 * C2304) *
              C50810 * C51036 +
          (((C33593 + C33594) * C642 -
            ((C36374 + C36373) * C51077 + (C36372 + C36371) * C641) +
            (C33595 + C33596) * C51078 - C33949 * C643 - C33950 * C638) *
               C50771 * C2302 +
           ((C33602 + C33601) * C642 -
            ((C36378 + C36377) * C51077 + (C36376 + C36375) * C641) +
            (C33604 + C33603) * C51078 - (C33605 + C33606) * C643 -
            (C33607 + C33608) * C638) *
               C50771 * C2303 +
           ((C36381 + C36382) * C642 -
            ((C36383 + C36384) * C51077 + (C36385 + C36386) * C641) +
            (C36387 + C36388) * C51078 -
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C643 -
            (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C638) *
               C50771 * C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                C17287 +
            ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
             (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
                C17288 +
            (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C50757) *
                C17289) *
               C50896 * C51037 +
           (((C33787 + C33788) * C284 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C278 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C283) +
             (C33789 + C33790) * C50757) *
                C17287 +
            ((C33791 + C33792) * C284 -
             ((C33790 + C33789) * C278 + (C33788 + C33787) * C283) +
             (C33793 + C33794) * C50757) *
                C17288 +
            ((C34120 + C34119) * C284 - (C34110 * C278 + C34109 * C283) +
             (C34122 + C34121) * C50757) *
                C17289) *
               C50896 * C50874) *
              C51036 +
          ((((C33593 + C33594) * C284 -
             ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                  C278 +
              (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                  C283) +
             (C33595 + C33596) * C50757) *
                C17287 +
            ((C33597 + C33598) * C284 -
             ((C33596 + C33595) * C278 + (C33594 + C33593) * C283) +
             (C33599 + C33600) * C50757) *
                C17288 +
            ((C33960 + C33959) * C284 - (C33950 * C278 + C33949 * C283) +
             (C33962 + C33961) * C50757) *
                C17289) *
               C50896 * C51037 +
           (((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C283 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C278 -
             (C34333 + C34334) * C284 - (C34335 + C34336) * C50757) *
                C17287 +
            ((C34334 + C34333) * C283 + (C34336 + C34335) * C278 -
             (C34337 + C34338) * C284 - (C34339 + C34340) * C50757) *
                C17288 +
            ((C34338 + C34337) * C283 + (C34340 + C34339) * C278 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C284 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C50757) *
                C17289) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C283 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C278 -
             (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
                C50771 * C2302 +
            ((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
             (C33594 + C33593) * C284 - (C33596 + C33595) * C50757) *
                C50771 * C2303 +
            C36396 * C2304) *
               C51037 +
           (((C33787 + C33788) * C284 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C278 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C283) +
             (C33789 + C33790) * C50757) *
                C50771 * C2302 +
            ((C34334 + C34333) * C284 -
             ((C37053 + C37054) * C278 + (C37055 + C37056) * C283) +
             (C34336 + C34335) * C50757) *
                C50771 * C2303 +
            ((C37057 + C37058) * C284 -
             ((C37059 + C37060) * C278 + (C37061 + C37062) * C283) +
             (C37063 + C37064) * C50757) *
                C50771 * C2304) *
               C50874) *
              C51036 +
          ((((C33593 + C33594) * C284 -
             ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
             (C33595 + C33596) * C50757) *
                C50771 * C2302 +
            ((C33602 + C33601) * C284 -
             ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
             (C33604 + C33603) * C50757) *
                C50771 * C2303 +
            ((C36381 + C36382) * C284 -
             ((C36383 + C36384) * C278 + (C36385 + C36386) * C283) +
             (C36387 + C36388) * C50757) *
                C50771 * C2304) *
               C51037 +
           (((C37056 + C37055) * C283 + (C37054 + C37053) * C278 -
             (C34333 + C34334) * C284 - (C34335 + C34336) * C50757) *
                C50771 * C2302 +
            ((C37062 + C37061) * C283 + (C37060 + C37059) * C278 -
             (C37058 + C37057) * C284 - (C37064 + C37063) * C50757) *
                C50771 * C2303 +
            ((C33360 * C3224 + C33358 * C3227 + C33361 * C3725 +
              C50971 * C3729) *
                 C283 +
             (C33360 * C3228 + C33358 * C3233 + C33361 * C3728 +
              C50971 * C3731) *
                 C278 -
             (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
              C33358 * C3229) *
                 C284 -
             (C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
              C33358 * C3234) *
                 C50757) *
                C50771 * C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C50757) *
               C17289) *
              C50896 * C50810 * C280 +
          (((C33593 + C33594) * C284 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C278 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C283) +
            (C33595 + C33596) * C50757) *
               C17287 +
           ((C33597 + C33598) * C284 -
            ((C33596 + C33595) * C278 + (C33594 + C33593) * C283) +
            (C33599 + C33600) * C50757) *
               C17288 +
           ((C33360 * C288 + C33358 * C301 + C33361 * C897 + C50971 * C905) *
                C284 -
            ((C33600 + C33599) * C278 + (C33598 + C33597) * C283) +
            (C33360 * C302 + C33358 * C318 + C33361 * C906 + C50971 * C912) *
                C50757) *
               C17289) *
              C50896 * C50810 * C281 +
          (((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                C283 +
            (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                C278 -
            (C33601 + C33602) * C284 - (C33603 + C33604) * C50757) *
               C17287 +
           ((C33602 + C33601) * C283 + (C33604 + C33603) * C278 -
            (C33605 + C33606) * C284 - (C33607 + C33608) * C50757) *
               C17288 +
           ((C33606 + C33605) * C283 + (C33608 + C33607) * C278 -
            (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
                C284 -
            (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
                C50757) *
               C17289) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C17287 +
          ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
           (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
           (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
           (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
              C17288 +
          (C33411 * C118 + C33412 * C106 - C33413 * C119 - C33414 * C107 +
           (C33408 + C33407) * C120 + (C33410 + C33409) * C108 -
           (C33361 * C754 + C50971 * C755 + C33360 * C127 + C33358 * C139) *
               C121 -
           (C33361 * C756 + C50971 * C757 + C33360 * C140 + C33358 * C148) *
               C109) *
              C17289) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C50757) *
               C17289) *
              C50896 * C459 +
          (((C33787 + C33788) * C284 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C278 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C283) +
            (C33789 + C33790) * C50757) *
               C17287 +
           ((C33791 + C33792) * C284 -
            ((C33790 + C33789) * C278 + (C33788 + C33787) * C283) +
            (C33793 + C33794) * C50757) *
               C17288 +
           ((C33360 * C465 + C33358 * C478 + C33361 * C470 + C50971 * C488) *
                C284 -
            ((C33794 + C33793) * C278 + (C33792 + C33791) * C283) +
            (C33360 * C479 + C33358 * C495 + C33361 * C489 + C50971 * C500) *
                C50757) *
               C17289) *
              C50896 * C460 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C283 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C278 -
            (C33795 + C33796) * C284 - (C33797 + C33798) * C50757) *
               C17287 +
           ((C33796 + C33795) * C283 + (C33798 + C33797) * C278 -
            (C33799 + C33800) * C284 - (C33801 + C33802) * C50757) *
               C17288 +
           ((C33800 + C33799) * C283 + (C33802 + C33801) * C278 -
            (C33361 * C1857 + C50971 * C1862 + C33360 * C470 + C33358 * C488) *
                C284 -
            (C33361 * C1861 + C50971 * C1869 + C33360 * C489 + C33358 * C500) *
                C50757) *
               C17289) *
              C50896 * C461) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C50771 * C2302 +
          ((C33360 * C286 + C33358 * C297 + C33361 * C894 + C50971 * C899) *
               C118 +
           (C33360 * C296 + C33358 * C315 + C33361 * C900 + C50971 * C909) *
               C106 -
           (C33594 + C33593) * C119 - (C33596 + C33595) * C107 +
           (C33597 + C33598) * C120 + (C33599 + C33600) * C108 -
           (C33959 + C33960) * C121 - (C33961 + C33962) * C109) *
              C50771 * C2303 +
          ((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
               C118 +
           (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
               C106 -
           (C33601 + C33602) * C119 - (C33603 + C33604) * C107 +
           (C33606 + C33605) * C120 + (C33608 + C33607) * C108 -
           (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
               C121 -
           (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
               C109) *
              C50771 * C2304) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
            (C33594 + C33593) * C284 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C36396 * C2304) *
              C50810 * C280 +
          (((C33593 + C33594) * C284 -
            ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
            (C33595 + C33596) * C50757) *
               C50771 * C2302 +
           ((C33602 + C33601) * C284 -
            ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
            (C33604 + C33603) * C50757) *
               C50771 * C2303 +
           ((C36381 + C36382) * C284 -
            ((C36383 + C36384) * C278 + (C36385 + C36386) * C283) +
            (C36387 + C36388) * C50757) *
               C50771 * C2304) *
              C50810 * C281 +
          (C36396 * C2302 +
           ((C36386 + C36385) * C283 + (C36384 + C36383) * C278 -
            (C36382 + C36381) * C284 - (C36388 + C36387) * C50757) *
               C50771 * C2303 +
           ((C33360 * C2451 + C33358 * C2454 + C33361 * C4296 +
             C50971 * C4300) *
                C283 +
            (C33360 * C2455 + C33358 * C2460 + C33361 * C4299 +
             C50971 * C4302) *
                C278 -
            (C33361 * C4295 + C50971 * C4298 + C33360 * C2452 +
             C33358 * C2456) *
                C284 -
            (C33361 * C4297 + C50971 * C4301 + C33360 * C2457 +
             C33358 * C2461) *
                C50757) *
               C50771 * C2304) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
            (C33594 + C33593) * C284 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C36396 * C2304) *
              C459 +
          (((C33787 + C33788) * C284 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C278 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C283) +
            (C33789 + C33790) * C50757) *
               C50771 * C2302 +
           ((C34334 + C34333) * C284 -
            ((C33361 * C1234 + C50971 * C1239 + C33360 * C900 + C33358 * C909) *
                 C278 +
             (C33361 * C1227 + C50971 * C1235 + C33360 * C894 + C33358 * C899) *
                 C283) +
            (C34336 + C34335) * C50757) *
               C50771 * C2303 +
           ((C33360 * C1575 + C33358 * C1582 + C33361 * C2679 +
             C50971 * C2683) *
                C284 -
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C278 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C283) +
            (C33360 * C1581 + C33358 * C1587 + C33361 * C2684 +
             C50971 * C2688) *
                C50757) *
               C50771 * C2304) *
              C460 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C283 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C278 -
            (C33795 + C33796) * C284 - (C33797 + C33798) * C50757) *
               C50771 * C2302 +
           ((C33360 * C1227 + C33358 * C1235 + C33361 * C4711 +
             C50971 * C4719) *
                C283 +
            (C33360 * C1234 + C33358 * C1239 + C33361 * C4718 +
             C50971 * C4723) *
                C278 -
            (C33361 * C4710 + C50971 * C4717 + C33360 * C1226 +
             C33358 * C1233) *
                C284 -
            (C33361 * C4716 + C50971 * C4722 + C33360 * C1232 +
             C33358 * C1238) *
                C50757) *
               C50771 * C2303 +
           ((C33360 * C2678 + C33358 * C2681 + C33361 * C4709 +
             C50971 * C4715) *
                C283 +
            (C33360 * C2682 + C33358 * C2687 + C33361 * C4714 +
             C50971 * C4721) *
                C278 -
            (C33361 * C4708 + C50971 * C4713 + C33360 * C2679 +
             C33358 * C2683) *
                C284 -
            (C33361 * C4712 + C50971 * C4720 + C33360 * C2684 +
             C33358 * C2688) *
                C50757) *
               C50771 * C2304) *
              C461) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C641 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51077 -
            (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
            C33411 * C643 + C33412 * C638) *
               C17287 +
           ((C33396 + C33395) * C641 + (C33398 + C33397) * C51077 -
            (C33400 + C33399) * C642 - (C33402 + C33401) * C51078 +
            (C33404 + C33403) * C643 + (C33406 + C33405) * C638) *
               C17288 +
           (C33411 * C641 + C33412 * C51077 - C33413 * C642 - C33414 * C51078 +
            (C33408 + C33407) * C643 + (C33410 + C33409) * C638) *
               C17289) *
              C50896 * C51037 +
          (((C33787 + C33788) * C642 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C51077 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C641) +
            (C33789 + C33790) * C51078 - C34109 * C643 - C34110 * C638) *
               C17287 +
           ((C33791 + C33792) * C642 -
            ((C33790 + C33789) * C51077 + (C33788 + C33787) * C641) +
            (C33793 + C33794) * C51078 - (C34119 + C34120) * C643 -
            (C34121 + C34122) * C638) *
               C17288 +
           ((C34120 + C34119) * C642 - (C34110 * C51077 + C34109 * C641) +
            (C34122 + C34121) * C51078 -
            (C33361 * C471 + C50971 * C490 + C33360 * C466 + C33358 * C480) *
                C643 -
            (C33361 * C491 + C50971 * C501 + C33360 * C481 + C33358 * C496) *
                C638) *
               C17289) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C641 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51077 -
            (C33395 + C33396) * C642 - (C33397 + C33398) * C51078 +
            C33411 * C643 + C33412 * C638) *
               C50771 * C2302 +
           ((C36371 + C36372) * C641 + (C36373 + C36374) * C51077 -
            (C33594 + C33593) * C642 - (C33596 + C33595) * C51078 +
            (C33597 + C33598) * C643 + (C33599 + C33600) * C638) *
               C50771 * C2303 +
           (C36389 * C641 + C36390 * C51077 - C36353 * C642 - C36354 * C51078 +
            (C33606 + C33605) * C643 + (C33608 + C33607) * C638) *
               C50771 * C2304) *
              C51037 +
          (((C33787 + C33788) * C642 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C51077 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C641) +
            (C33789 + C33790) * C51078 - C34109 * C643 - C34110 * C638) *
               C50771 * C2302 +
           ((C34334 + C34333) * C642 -
            ((C33361 * C1234 + C50971 * C1239 + C33360 * C900 + C33358 * C909) *
                 C51077 +
             (C33361 * C1227 + C50971 * C1235 + C33360 * C894 + C33358 * C899) *
                 C641) +
            (C34336 + C34335) * C51078 - (C34337 + C34338) * C643 -
            (C34339 + C34340) * C638) *
               C50771 * C2303 +
           ((C33360 * C1575 + C33358 * C1582 + C33361 * C2679 +
             C50971 * C2683) *
                C642 -
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C51077 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C641) +
            (C33360 * C1581 + C33358 * C1587 + C33361 * C2684 +
             C50971 * C2688) *
                C51078 -
            (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
             C33358 * C1580) *
                C643 -
            (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
             C33358 * C1586) *
                C638) *
               C50771 * C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C17287 +
          ((C33396 + C33395) * C118 + (C33398 + C33397) * C106 -
           (C33400 + C33399) * C119 - (C33402 + C33401) * C107 +
           (C33404 + C33403) * C120 + (C33406 + C33405) * C108 -
           (C33407 + C33408) * C121 - (C33409 + C33410) * C109) *
              C17288 +
          (C33411 * C118 + C33412 * C106 - C33413 * C119 - C33414 * C107 +
           (C33408 + C33407) * C120 + (C33410 + C33409) * C108 -
           (C33361 * C754 + C50971 * C755 + C33360 * C127 + C33358 * C139) *
               C121 -
           (C33361 * C756 + C50971 * C757 + C33360 * C140 + C33358 * C148) *
               C109) *
              C17289) *
         C50896 * C50810 * C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C283 + (C33398 + C33397) * C278 -
            (C33400 + C33399) * C284 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C283 + C33412 * C278 - C33413 * C284 - C33414 * C50757) *
               C17289) *
              C50896 * C50810 * C280 +
          (((C33593 + C33594) * C284 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C278 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C283) +
            (C33595 + C33596) * C50757) *
               C17287 +
           ((C33597 + C33598) * C284 -
            ((C33596 + C33595) * C278 + (C33594 + C33593) * C283) +
            (C33599 + C33600) * C50757) *
               C17288 +
           ((C33360 * C288 + C33358 * C301 + C33361 * C897 + C50971 * C905) *
                C284 -
            ((C33600 + C33599) * C278 + (C33598 + C33597) * C283) +
            (C33360 * C302 + C33358 * C318 + C33361 * C906 + C50971 * C912) *
                C50757) *
               C17289) *
              C50896 * C50810 * C281 +
          (((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                C283 +
            (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                C278 -
            (C33601 + C33602) * C284 - (C33603 + C33604) * C50757) *
               C17287 +
           ((C33602 + C33601) * C283 + (C33604 + C33603) * C278 -
            (C33605 + C33606) * C284 - (C33607 + C33608) * C50757) *
               C17288 +
           ((C33606 + C33605) * C283 + (C33608 + C33607) * C278 -
            (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
                C284 -
            (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
                C50757) *
               C17289) *
              C50896 * C50810 * C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
               C118 +
           (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
               C106 -
           (C33395 + C33396) * C119 - (C33397 + C33398) * C107 + C33411 * C120 +
           C33412 * C108 - C33413 * C121 - C33414 * C109) *
              C50771 * C2302 +
          ((C33360 * C286 + C33358 * C297 + C33361 * C894 + C50971 * C899) *
               C118 +
           (C33360 * C296 + C33358 * C315 + C33361 * C900 + C50971 * C909) *
               C106 -
           (C33594 + C33593) * C119 - (C33596 + C33595) * C107 +
           (C33597 + C33598) * C120 + (C33599 + C33600) * C108 -
           (C33959 + C33960) * C121 - (C33961 + C33962) * C109) *
              C50771 * C2303 +
          ((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
               C118 +
           (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
               C106 -
           (C33601 + C33602) * C119 - (C33603 + C33604) * C107 +
           (C33606 + C33605) * C120 + (C33608 + C33607) * C108 -
           (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
               C121 -
           (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
               C109) *
              C50771 * C2304) *
         C50810 * C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C283 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C278 -
            (C33395 + C33396) * C284 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C283 + (C36373 + C36374) * C278 -
            (C33594 + C33593) * C284 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C36396 * C2304) *
              C50810 * C280 +
          (((C33593 + C33594) * C284 -
            ((C36374 + C36373) * C278 + (C36372 + C36371) * C283) +
            (C33595 + C33596) * C50757) *
               C50771 * C2302 +
           ((C33602 + C33601) * C284 -
            ((C36378 + C36377) * C278 + (C36376 + C36375) * C283) +
            (C33604 + C33603) * C50757) *
               C50771 * C2303 +
           ((C36381 + C36382) * C284 -
            ((C36383 + C36384) * C278 + (C36385 + C36386) * C283) +
            (C36387 + C36388) * C50757) *
               C50771 * C2304) *
              C50810 * C281 +
          (C36396 * C2302 +
           ((C36386 + C36385) * C283 + (C36384 + C36383) * C278 -
            (C36382 + C36381) * C284 - (C36388 + C36387) * C50757) *
               C50771 * C2303 +
           ((C33360 * C2451 + C33358 * C2454 + C33361 * C4296 +
             C50971 * C4300) *
                C283 +
            (C33360 * C2455 + C33358 * C2460 + C33361 * C4299 +
             C50971 * C4302) *
                C278 -
            (C33361 * C4295 + C50971 * C4298 + C33360 * C2452 +
             C33358 * C2456) *
                C284 -
            (C33361 * C4297 + C50971 * C4301 + C33360 * C2457 +
             C33358 * C2461) *
                C50757) *
               C50771 * C2304) *
              C50810 * C282)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51021 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C49770 + C33412 * C51021 - C33413 * C49763 -
            C33414 * C50757) *
               C17289) *
              C50896 * C50810 * C51081 +
          (((C33593 + C33594) * C49763 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C51021 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C49770) +
            (C33595 + C33596) * C50757) *
               C17287 +
           ((C33597 + C33598) * C49763 -
            ((C33596 + C33595) * C51021 + (C33594 + C33593) * C49770) +
            (C33599 + C33600) * C50757) *
               C17288 +
           ((C33960 + C33959) * C49763 - (C33950 * C51021 + C33949 * C49770) +
            (C33962 + C33961) * C50757) *
               C17289) *
              C50896 * C50810 * C51082 +
          (((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                C49770 +
            (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                C51021 -
            (C33601 + C33602) * C49763 - (C33603 + C33604) * C50757) *
               C17287 +
           ((C33602 + C33601) * C49770 + (C33604 + C33603) * C51021 -
            (C33605 + C33606) * C49763 - (C33607 + C33608) * C50757) *
               C17288 +
           ((C33606 + C33605) * C49770 + (C33608 + C33607) * C51021 -
            (C33361 * C1573 + C50971 * C1578 + C33360 * C293 + C33358 * C311) *
                C49763 -
            (C33361 * C1577 + C50971 * C1585 + C33360 * C312 + C33358 * C323) *
                C50757) *
               C17289) *
              C50896 * C50810 * C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51021 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
            (C33594 + C33593) * C49763 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C37654 * C2304) *
              C50810 * C51081 +
          (((C33593 + C33594) * C49763 -
            ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
            (C33595 + C33596) * C50757) *
               C50771 * C2302 +
           ((C33602 + C33601) * C49763 -
            ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
            (C33604 + C33603) * C50757) *
               C50771 * C2303 +
           ((C36381 + C36382) * C49763 - (C37311 * C51021 + C37312 * C49770) +
            (C36387 + C36388) * C50757) *
               C50771 * C2304) *
              C50810 * C51082 +
          (C37654 * C2302 +
           ((C36386 + C36385) * C49770 + (C36384 + C36383) * C51021 -
            (C36382 + C36381) * C49763 - (C36388 + C36387) * C50757) *
               C50771 * C2303 +
           ((C37324 + C37325) * C49770 + (C37326 + C37327) * C51021 -
            (C33361 * C4295 + C50971 * C4298 + C33360 * C2452 +
             C33358 * C2456) *
                C49763 -
            (C33361 * C4297 + C50971 * C4301 + C33360 * C2457 +
             C33358 * C2461) *
                C50757) *
               C50771 * C2304) *
              C50810 * C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C51037 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C51081 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C50874 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C51037) *
              C51082 +
          ((((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                 C1109 +
             (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                 C50752) *
                C17287 +
            ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) * C17288 +
            ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) * C17289) *
               C50896 * C51037 -
           (((C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
              C33358 * C1586) *
                 C50752 +
             (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
              C33358 * C1580) *
                 C1109) *
                C17289 +
            ((C33361 * C2684 + C50971 * C2688 + C33360 * C1581 +
              C33358 * C1587) *
                 C50752 +
             (C33361 * C2679 + C50971 * C2683 + C33360 * C1575 +
              C33358 * C1582) *
                 C1109) *
                C17288 +
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C50752 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C51037 -
           (C38012 * C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C50874) *
              C51081 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C38007 + C38008) * C1109 + (C38009 + C38010) * C50752) * C50771 *
                C2304) *
               C50874 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C51037) *
              C51082 +
          ((C37328 * C2302 +
            ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
                C2303 +
            ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
                C2304) *
               C51037 -
           (((C33361 * C20721 + C50971 * C20723 + C33360 * C4299 +
              C33358 * C4302) *
                 C50752 +
             (C33361 * C20720 + C50971 * C20722 + C33360 * C4296 +
              C33358 * C4300) *
                 C1109) *
                C50771 * C2304 +
            ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) * C50771 *
                C2303 +
            C38012 * C2302) *
               C50874) *
              C1342)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C17287 +
           ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
           (C33411 * C1109 + C33412 * C50752) * C17289) *
              C50896 * C50810 * C1105 -
          ((C33950 * C50752 + C33949 * C1109) * C17289 +
           ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
           ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                C50752 +
            (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                C1109) *
               C17287) *
              C50896 * C50810 * C1106 +
          (((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                C1109 +
            (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                C50752) *
               C17287 +
           ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) * C17288 +
           ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) * C17289) *
              C50896 * C50810 * C1107 -
          (((C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C50752 +
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C1109) *
               C17289 +
           ((C33361 * C3230 + C50971 * C3234 + C33360 * C1118 +
             C33358 * C1124) *
                C50752 +
            (C33361 * C3225 + C50971 * C3229 + C33360 * C1112 +
             C33358 * C1119) *
                C1109) *
               C17288 +
           ((C33361 * C3228 + C50971 * C3233 + C33360 * C1120 +
             C33358 * C1125) *
                C50752 +
            (C33361 * C3224 + C50971 * C3227 + C33360 * C1113 +
             C33358 * C1121) *
                C1109) *
               C17287) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C17287 +
           ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
            (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
            (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
               C17288 +
           (C33411 * C1035 + C33412 * C1030 - C33413 * C1036 - C33414 * C1031 +
            (C33408 + C33407) * C1037 + (C33410 + C33409) * C1032) *
               C17289) *
              C50896 * C50810 * C1033 +
          (((C33593 + C33594) * C1036 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C1030 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1035) +
            (C33595 + C33596) * C1031 - C33949 * C1037 - C33950 * C1032) *
               C17287 +
           ((C33597 + C33598) * C1036 -
            ((C33596 + C33595) * C1030 + (C33594 + C33593) * C1035) +
            (C33599 + C33600) * C1031 - (C33959 + C33960) * C1037 -
            (C33961 + C33962) * C1032) *
               C17288 +
           ((C33960 + C33959) * C1036 - (C33950 * C1030 + C33949 * C1035) +
            (C33962 + C33961) * C1031 -
            (C33361 * C898 + C50971 * C907 + C33360 * C289 + C33358 * C303) *
                C1037 -
            (C33361 * C908 + C50971 * C913 + C33360 * C304 + C33358 * C319) *
                C1032) *
               C17289) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C459 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C460 +
           (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C17287 +
            ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) * C17288 +
            ((C33800 + C33799) * C1109 + (C33802 + C33801) * C50752) * C17289) *
               C50896 * C461) *
              C1033 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C460 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C459 -
           (((C33361 * C6268 + C50971 * C6269 + C33360 * C1230 +
              C33358 * C1237) *
                 C50752 +
             (C33361 * C6266 + C50971 * C6267 + C33360 * C1225 +
              C33358 * C1231) *
                 C1109) *
                C17289 +
            ((C33361 * C4716 + C50971 * C4722 + C33360 * C1232 +
              C33358 * C1238) *
                 C50752 +
             (C33361 * C4710 + C50971 * C4717 + C33360 * C1226 +
              C33358 * C1233) *
                 C1109) *
                C17288 +
            ((C33361 * C4718 + C50971 * C4723 + C33360 * C1234 +
              C33358 * C1239) *
                 C50752 +
             (C33361 * C4711 + C50971 * C4719 + C33360 * C1227 +
              C33358 * C1235) *
                 C1109) *
                C17287) *
               C50896 * C461) *
              C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
            (C33594 + C33593) * C1036 - (C33596 + C33595) * C1031 +
            (C33597 + C33598) * C1037 + (C33599 + C33600) * C1032) *
               C50771 * C2303 +
           (C36389 * C1035 + C36390 * C1030 - C36353 * C1036 - C36354 * C1031 +
            (C33606 + C33605) * C1037 + (C33608 + C33607) * C1032) *
               C50771 * C2304) *
              C50810 * C1033 +
          (((C33593 + C33594) * C1036 -
            ((C36374 + C36373) * C1030 + (C36372 + C36371) * C1035) +
            (C33595 + C33596) * C1031 - C33949 * C1037 - C33950 * C1032) *
               C50771 * C2302 +
           ((C33602 + C33601) * C1036 -
            ((C36378 + C36377) * C1030 + (C36376 + C36375) * C1035) +
            (C33604 + C33603) * C1031 - (C33605 + C33606) * C1037 -
            (C33607 + C33608) * C1032) *
               C50771 * C2303 +
           ((C36381 + C36382) * C1036 -
            ((C36383 + C36384) * C1030 + (C36385 + C36386) * C1035) +
            (C36387 + C36388) * C1031 -
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C1037 -
            (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C1032) *
               C50771 * C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
               C2303 +
           C37328 * C2304) *
              C50810 * C1105 -
          (C37330 * C2304 +
           ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
               C2303 +
           ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
               C2302) *
              C50810 * C1106 +
          (C37328 * C2302 +
           ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
               C2303 +
           ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
               C2304) *
              C50810 * C1107 -
          (((C33361 * C21072 + C50971 * C21074 + C33360 * C3542 +
             C33358 * C3545) *
                C50752 +
            (C33361 * C21071 + C50971 * C21073 + C33360 * C3539 +
             C33358 * C3543) *
                C1109) *
               C50771 * C2304 +
           ((C37327 + C37326) * C50752 + (C37325 + C37324) * C1109) * C50771 *
               C2303 +
           C37330 * C2302) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C459 -
           (((C37059 + C37060) * C50752 + (C37061 + C37062) * C1109) * C50771 *
                C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C460 +
           (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C50771 * C2302 +
            ((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C50771 *
                C2303 +
            ((C37497 + C37498) * C1109 + (C37499 + C37500) * C50752) * C50771 *
                C2304) *
               C461) *
              C1033 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C33360 * C3224 + C33358 * C3227 + C33361 * C3725 +
              C50971 * C3729) *
                 C1109 +
             (C33360 * C3228 + C33358 * C3233 + C33361 * C3728 +
              C50971 * C3731) *
                 C50752) *
                C50771 * C2304) *
               C460 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C459 -
           (((C33361 * C21349 + C50971 * C21351 + C33360 * C3728 +
              C33358 * C3731) *
                 C50752 +
             (C33361 * C21348 + C50971 * C21350 + C33360 * C3725 +
              C33358 * C3729) *
                 C1109) *
                C50771 * C2304 +
            ((C37500 + C37499) * C50752 + (C37498 + C37497) * C1109) * C50771 *
                C2303 +
            ((C37496 + C37495) * C50752 + (C37494 + C37493) * C1109) * C50771 *
                C2302) *
               C461) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C17287 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
                C17288 +
            (C33411 * C49770 + C33412 * C51021 - C33413 * C49763 -
             C33414 * C50757) *
                C17289) *
               C50896 * C51037 +
           (((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C17287 +
            ((C33791 + C33792) * C49763 -
             ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
             (C33793 + C33794) * C50757) *
                C17288 +
            ((C34120 + C34119) * C49763 - (C34110 * C51021 + C34109 * C49770) +
             (C34122 + C34121) * C50757) *
                C17289) *
               C50896 * C50874) *
              C1033 +
          ((((C33593 + C33594) * C49763 -
             ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                  C51021 +
              (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                  C49770) +
             (C33595 + C33596) * C50757) *
                C17287 +
            ((C33597 + C33598) * C49763 -
             ((C33596 + C33595) * C51021 + (C33594 + C33593) * C49770) +
             (C33599 + C33600) * C50757) *
                C17288 +
            ((C33960 + C33959) * C49763 - (C33950 * C51021 + C33949 * C49770) +
             (C33962 + C33961) * C50757) *
                C17289) *
               C50896 * C51037 +
           (((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C49770 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C51021 -
             (C34333 + C34334) * C49763 - (C34335 + C34336) * C50757) *
                C17287 +
            ((C34334 + C34333) * C49770 + (C34336 + C34335) * C51021 -
             (C34337 + C34338) * C49763 - (C34339 + C34340) * C50757) *
                C17288 +
            ((C34338 + C34337) * C49770 + (C34340 + C34339) * C51021 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C49763 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C50757) *
                C17289) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C50771 * C2302 +
            ((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
             (C33594 + C33593) * C49763 - (C33596 + C33595) * C50757) *
                C50771 * C2303 +
            C37654 * C2304) *
               C51037 +
           (((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C50771 * C2302 +
            ((C34334 + C34333) * C49763 -
             ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
             (C34336 + C34335) * C50757) *
                C50771 * C2303 +
            ((C37057 + C37058) * C49763 -
             ((C37059 + C37060) * C51021 + (C37061 + C37062) * C49770) +
             (C37063 + C37064) * C50757) *
                C50771 * C2304) *
               C50874) *
              C1033 +
          ((((C33593 + C33594) * C49763 -
             ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
             (C33595 + C33596) * C50757) *
                C50771 * C2302 +
            ((C33602 + C33601) * C49763 -
             ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
             (C33604 + C33603) * C50757) *
                C50771 * C2303 +
            ((C36381 + C36382) * C49763 - (C37311 * C51021 + C37312 * C49770) +
             (C36387 + C36388) * C50757) *
                C50771 * C2304) *
               C51037 +
           (((C37056 + C37055) * C49770 + (C37054 + C37053) * C51021 -
             (C34333 + C34334) * C49763 - (C34335 + C34336) * C50757) *
                C50771 * C2302 +
            ((C37062 + C37061) * C49770 + (C37060 + C37059) * C51021 -
             (C37058 + C37057) * C49763 - (C37064 + C37063) * C50757) *
                C50771 * C2303 +
            ((C33360 * C3224 + C33358 * C3227 + C33361 * C3725 +
              C50971 * C3729) *
                 C49770 +
             (C33360 * C3228 + C33358 * C3233 + C33361 * C3728 +
              C50971 * C3731) *
                 C51021 -
             (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
              C33358 * C3229) *
                 C49763 -
             (C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
              C33358 * C3234) *
                 C50757) *
                C50771 * C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C17287 +
           ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
            (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
            (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
               C17288 +
           (C33411 * C1035 + C33412 * C1030 - C33413 * C1036 - C33414 * C1031 +
            (C33408 + C33407) * C1037 + (C33410 + C33409) * C1032) *
               C17289) *
              C50896 * C50810 * C1033 +
          (((C33593 + C33594) * C1036 -
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C1030 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1035) +
            (C33595 + C33596) * C1031 - C33949 * C1037 - C33950 * C1032) *
               C17287 +
           ((C33597 + C33598) * C1036 -
            ((C33596 + C33595) * C1030 + (C33594 + C33593) * C1035) +
            (C33599 + C33600) * C1031 - (C33959 + C33960) * C1037 -
            (C33961 + C33962) * C1032) *
               C17288 +
           ((C33960 + C33959) * C1036 - (C33950 * C1030 + C33949 * C1035) +
            (C33962 + C33961) * C1031 -
            (C33361 * C898 + C50971 * C907 + C33360 * C289 + C33358 * C303) *
                C1037 -
            (C33361 * C908 + C50971 * C913 + C33360 * C304 + C33358 * C319) *
                C1032) *
               C17289) *
              C50896 * C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C17287 +
           ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
           (C33411 * C1109 + C33412 * C50752) * C17289) *
              C50896 * C50810 * C1105 -
          ((C33950 * C50752 + C33949 * C1109) * C17289 +
           ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
           ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                C50752 +
            (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                C1109) *
               C17287) *
              C50896 * C50810 * C1106 +
          (((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                C1109 +
            (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                C50752) *
               C17287 +
           ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) * C17288 +
           ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) * C17289) *
              C50896 * C50810 * C1107 -
          (((C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C50752 +
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C1109) *
               C17289 +
           ((C33361 * C3230 + C50971 * C3234 + C33360 * C1118 +
             C33358 * C1124) *
                C50752 +
            (C33361 * C3225 + C50971 * C3229 + C33360 * C1112 +
             C33358 * C1119) *
                C1109) *
               C17288 +
           ((C33361 * C3228 + C50971 * C3233 + C33360 * C1120 +
             C33358 * C1125) *
                C50752 +
            (C33361 * C3224 + C50971 * C3227 + C33360 * C1113 +
             C33358 * C1121) *
                C1109) *
               C17287) *
              C50896 * C50810 * C1108)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
            (C33594 + C33593) * C1036 - (C33596 + C33595) * C1031 +
            (C33597 + C33598) * C1037 + (C33599 + C33600) * C1032) *
               C50771 * C2303 +
           (C36389 * C1035 + C36390 * C1030 - C36353 * C1036 - C36354 * C1031 +
            (C33606 + C33605) * C1037 + (C33608 + C33607) * C1032) *
               C50771 * C2304) *
              C50810 * C1033 +
          (((C33593 + C33594) * C1036 -
            ((C36374 + C36373) * C1030 + (C36372 + C36371) * C1035) +
            (C33595 + C33596) * C1031 - C33949 * C1037 - C33950 * C1032) *
               C50771 * C2302 +
           ((C33602 + C33601) * C1036 -
            ((C36378 + C36377) * C1030 + (C36376 + C36375) * C1035) +
            (C33604 + C33603) * C1031 - (C33605 + C33606) * C1037 -
            (C33607 + C33608) * C1032) *
               C50771 * C2303 +
           ((C36381 + C36382) * C1036 -
            ((C36383 + C36384) * C1030 + (C36385 + C36386) * C1035) +
            (C36387 + C36388) * C1031 -
            (C33361 * C3226 + C50971 * C3231 + C33360 * C1111 +
             C33358 * C1117) *
                C1037 -
            (C33361 * C3232 + C50971 * C3235 + C33360 * C1116 +
             C33358 * C1123) *
                C1032) *
               C50771 * C2304) *
              C50810 * C50848)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
               C2303 +
           C37328 * C2304) *
              C50810 * C1105 -
          (C37330 * C2304 +
           ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
               C2303 +
           ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
               C2302) *
              C50810 * C1106 +
          (C37328 * C2302 +
           ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
               C2303 +
           ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
               C2304) *
              C50810 * C1107 -
          (((C33361 * C21072 + C50971 * C21074 + C33360 * C3542 +
             C33358 * C3545) *
                C50752 +
            (C33361 * C21071 + C50971 * C21073 + C33360 * C3539 +
             C33358 * C3543) *
                C1109) *
               C50771 * C2304 +
           ((C37327 + C37326) * C50752 + (C37325 + C37324) * C1109) * C50771 *
               C2303 +
           C37330 * C2302) *
              C50810 * C1108)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C17287 +
            ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
             (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
                C17288 +
            (C33411 * C49770 + C33412 * C51021 - C33413 * C49763 -
             C33414 * C50757) *
                C17289) *
               C50896 * C1687 +
           (((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C17287 +
            ((C33791 + C33792) * C49763 -
             ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
             (C33793 + C33794) * C50757) *
                C17288 +
            ((C34120 + C34119) * C49763 - (C34110 * C51021 + C34109 * C49770) +
             (C34122 + C34121) * C50757) *
                C17289) *
               C50896 * C50874) *
              C51036 +
          ((((C33593 + C33594) * C49763 -
             ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                  C51021 +
              (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                  C49770) +
             (C33595 + C33596) * C50757) *
                C17287 +
            ((C33597 + C33598) * C49763 -
             ((C33596 + C33595) * C51021 + (C33594 + C33593) * C49770) +
             (C33599 + C33600) * C50757) *
                C17288 +
            ((C33960 + C33959) * C49763 - (C33950 * C51021 + C33949 * C49770) +
             (C33962 + C33961) * C50757) *
                C17289) *
               C50896 * C1687 +
           (((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C49770 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C51021 -
             (C34333 + C34334) * C49763 - (C34335 + C34336) * C50757) *
                C17287 +
            ((C34334 + C34333) * C49770 + (C34336 + C34335) * C51021 -
             (C34337 + C34338) * C49763 - (C34339 + C34340) * C50757) *
                C17288 +
            ((C34338 + C34337) * C49770 + (C34340 + C34339) * C51021 -
             (C33361 * C1224 + C50971 * C1229 + C33360 * C897 + C33358 * C905) *
                 C49763 -
             (C33361 * C1228 + C50971 * C1236 + C33360 * C906 + C33358 * C912) *
                 C50757) *
                C17289) *
               C50896 * C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C49770 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C51021 -
             (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
                C50771 * C2302 +
            ((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
             (C33594 + C33593) * C49763 - (C33596 + C33595) * C50757) *
                C50771 * C2303 +
            C37654 * C2304) *
               C1687 +
           (((C33787 + C33788) * C49763 -
             ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                  C51021 +
              (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                  C49770) +
             (C33789 + C33790) * C50757) *
                C50771 * C2302 +
            ((C34334 + C34333) * C49763 -
             ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
             (C34336 + C34335) * C50757) *
                C50771 * C2303 +
            ((C37057 + C37058) * C49763 - (C37995 * C51021 + C37996 * C49770) +
             (C37063 + C37064) * C50757) *
                C50771 * C2304) *
               C50874) *
              C51036 +
          ((((C33593 + C33594) * C49763 -
             ((C36374 + C36373) * C51021 + (C36372 + C36371) * C49770) +
             (C33595 + C33596) * C50757) *
                C50771 * C2302 +
            ((C33602 + C33601) * C49763 -
             ((C36378 + C36377) * C51021 + (C36376 + C36375) * C49770) +
             (C33604 + C33603) * C50757) *
                C50771 * C2303 +
            ((C36381 + C36382) * C49763 - (C37311 * C51021 + C37312 * C49770) +
             (C36387 + C36388) * C50757) *
                C50771 * C2304) *
               C1687 +
           (((C37056 + C37055) * C49770 + (C37054 + C37053) * C51021 -
             (C34333 + C34334) * C49763 - (C34335 + C34336) * C50757) *
                C50771 * C2302 +
            ((C37062 + C37061) * C49770 + (C37060 + C37059) * C51021 -
             (C37058 + C37057) * C49763 - (C37064 + C37063) * C50757) *
                C50771 * C2303 +
            ((C38007 + C38008) * C49770 + (C38009 + C38010) * C51021 -
             (C33361 * C3724 + C50971 * C3727 + C33360 * C3225 +
              C33358 * C3229) *
                 C49763 -
             (C33361 * C3726 + C50971 * C3730 + C33360 * C3230 +
              C33358 * C3234) *
                 C50757) *
                C50771 * C2304) *
               C50874) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C51083 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C51084 +
           (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C17287 +
            ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) * C17288 +
            ((C33800 + C33799) * C1109 + (C33802 + C33801) * C50752) * C17289) *
               C50896 * C2103) *
              C51036 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C51084 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C51083 -
           (((C33361 * C6268 + C50971 * C6269 + C33360 * C1230 +
              C33358 * C1237) *
                 C50752 +
             (C33361 * C6266 + C50971 * C6267 + C33360 * C1225 +
              C33358 * C1231) *
                 C1109) *
                C17289 +
            ((C33361 * C4716 + C50971 * C4722 + C33360 * C1232 +
              C33358 * C1238) *
                 C50752 +
             (C33361 * C4710 + C50971 * C4717 + C33360 * C1226 +
              C33358 * C1233) *
                 C1109) *
                C17288 +
            ((C33361 * C4718 + C50971 * C4723 + C33360 * C1234 +
              C33358 * C1239) *
                 C50752 +
             (C33361 * C4711 + C50971 * C4719 + C33360 * C1227 +
              C33358 * C1235) *
                 C1109) *
                C17287) *
               C50896 * C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C51083 -
           (C38012 * C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C51084 +
           (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                 C1109 +
             (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                 C50752) *
                C50771 * C2302 +
            ((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C50771 *
                C2303 +
            ((C37497 + C37498) * C1109 + (C37499 + C37500) * C50752) * C50771 *
                C2304) *
               C2103) *
              C51036 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C38007 + C38008) * C1109 + (C38009 + C38010) * C50752) * C50771 *
                C2304) *
               C51084 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C51083 -
           (((C33361 * C21349 + C50971 * C21351 + C33360 * C3728 +
              C33358 * C3731) *
                 C50752 +
             (C33361 * C21348 + C50971 * C21350 + C33360 * C3725 +
              C33358 * C3729) *
                 C1109) *
                C50771 * C2304 +
            ((C37500 + C37499) * C50752 + (C37498 + C37497) * C1109) * C50771 *
                C2303 +
            ((C37496 + C37495) * C50752 + (C37494 + C37493) * C1109) * C50771 *
                C2302) *
               C2103) *
              C50848)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C1687 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C280 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C50874 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C1687) *
              C281 +
          ((((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                 C1109 +
             (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                 C50752) *
                C17287 +
            ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) * C17288 +
            ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) * C17289) *
               C50896 * C1687 -
           (((C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
              C33358 * C1586) *
                 C50752 +
             (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
              C33358 * C1580) *
                 C1109) *
                C17289 +
            ((C33361 * C2684 + C50971 * C2688 + C33360 * C1581 +
              C33358 * C1587) *
                 C50752 +
             (C33361 * C2679 + C50971 * C2683 + C33360 * C1575 +
              C33358 * C1582) *
                 C1109) *
                C17288 +
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C50752 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C17287 +
           ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
            (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
            (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
               C17288 +
           (C33411 * C1035 + C33412 * C1030 - C33413 * C1036 - C33414 * C1031 +
            (C33408 + C33407) * C1037 + (C33410 + C33409) * C1032) *
               C17289) *
              C50896 * C1687 +
          (((C33787 + C33788) * C1036 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C1030 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1035) +
            (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
               C17287 +
           ((C33791 + C33792) * C1036 -
            ((C33790 + C33789) * C1030 + (C33788 + C33787) * C1035) +
            (C33793 + C33794) * C1031 - (C34119 + C34120) * C1037 -
            (C34121 + C34122) * C1032) *
               C17288 +
           ((C34120 + C34119) * C1036 - (C34110 * C1030 + C34109 * C1035) +
            (C34122 + C34121) * C1031 -
            (C33361 * C471 + C50971 * C490 + C33360 * C466 + C33358 * C480) *
                C1037 -
            (C33361 * C491 + C50971 * C501 + C33360 * C481 + C33358 * C496) *
                C1032) *
               C17289) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C17287 +
           ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
           (C33411 * C1109 + C33412 * C50752) * C17289) *
              C50896 * C1853 -
          ((C34110 * C50752 + C34109 * C1109) * C17289 +
           ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
           ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                C50752 +
            (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                C1109) *
               C17287) *
              C50896 * C1854 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C1109 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C50752) *
               C17287 +
           ((C33796 + C33795) * C1109 + (C33798 + C33797) * C50752) * C17288 +
           ((C33800 + C33799) * C1109 + (C33802 + C33801) * C50752) * C17289) *
              C50896 * C1855 -
          (((C33361 * C5704 + C50971 * C5707 + C33360 * C1863 +
             C33358 * C1870) *
                C50752 +
            (C33361 * C5698 + C50971 * C5703 + C33360 * C1858 +
             C33358 * C1864) *
                C1109) *
               C17289 +
           ((C33361 * C5702 + C50971 * C5706 + C33360 * C1865 +
             C33358 * C1871) *
                C50752 +
            (C33361 * C5697 + C50971 * C5701 + C33360 * C1859 +
             C33358 * C1866) *
                C1109) *
               C17288 +
           ((C33361 * C5700 + C50971 * C5705 + C33360 * C1867 +
             C33358 * C1872) *
                C50752 +
            (C33361 * C5696 + C50971 * C5699 + C33360 * C1860 +
             C33358 * C1868) *
                C1109) *
               C17287) *
              C50896 * C1856) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
            (C33594 + C33593) * C1036 - (C33596 + C33595) * C1031 +
            (C33597 + C33598) * C1037 + (C33599 + C33600) * C1032) *
               C50771 * C2303 +
           (C36389 * C1035 + C36390 * C1030 - C36353 * C1036 - C36354 * C1031 +
            (C33606 + C33605) * C1037 + (C33608 + C33607) * C1032) *
               C50771 * C2304) *
              C1687 +
          (((C33787 + C33788) * C1036 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C1030 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1035) +
            (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
               C50771 * C2302 +
           ((C34334 + C34333) * C1036 -
            ((C37053 + C37054) * C1030 + (C37055 + C37056) * C1035) +
            (C34336 + C34335) * C1031 - (C34337 + C34338) * C1037 -
            (C34339 + C34340) * C1032) *
               C50771 * C2303 +
           ((C37057 + C37058) * C1036 - (C37995 * C1030 + C37996 * C1035) +
            (C37063 + C37064) * C1031 -
            (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
             C33358 * C1580) *
                C1037 -
            (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
             C33358 * C1586) *
                C1032) *
               C50771 * C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C1687 -
           (C38012 * C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C50874) *
              C280 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C38007 + C38008) * C1109 + (C38009 + C38010) * C50752) * C50771 *
                C2304) *
               C50874 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C1687) *
              C281 +
          ((C37328 * C2302 +
            ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
                C2303 +
            ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
                C2304) *
               C1687 -
           (((C33361 * C20721 + C50971 * C20723 + C33360 * C4299 +
              C33358 * C4302) *
                 C50752 +
             (C33361 * C20720 + C50971 * C20722 + C33360 * C4296 +
              C33358 * C4300) *
                 C1109) *
                C50771 * C2304 +
            ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) * C50771 *
                C2303 +
            C38012 * C2302) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1109 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C50752) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
               C2303 +
           C37328 * C2304) *
              C1853 -
          (C38012 * C2304 +
           ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
               C2303 +
           ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                C50752 +
            (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                C1109) *
               C50771 * C2302) *
              C1854 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C1109 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C50752) *
               C50771 * C2302 +
           ((C37493 + C37494) * C1109 + (C37495 + C37496) * C50752) * C50771 *
               C2303 +
           ((C37497 + C37498) * C1109 + (C37499 + C37500) * C50752) * C50771 *
               C2304) *
              C1855 -
          (((C33361 * C23017 + C50971 * C23019 + C33360 * C4714 +
             C33358 * C4721) *
                C50752 +
            (C33361 * C23016 + C50971 * C23018 + C33360 * C4709 +
             C33358 * C4715) *
                C1109) *
               C50771 * C2304 +
           ((C33361 * C6682 + C50971 * C6685 + C33360 * C4718 +
             C33358 * C4723) *
                C50752 +
            (C33361 * C6679 + C50971 * C6683 + C33360 * C4711 +
             C33358 * C4719) *
                C1109) *
               C50771 * C2303 +
           ((C33361 * C5700 + C50971 * C5705 + C33360 * C1867 +
             C33358 * C1872) *
                C50752 +
            (C33361 * C5696 + C50971 * C5699 + C33360 * C1860 +
             C33358 * C1868) *
                C1109) *
               C50771 * C2302) *
              C1856) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51021 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
               C17287 +
           ((C33396 + C33395) * C49770 + (C33398 + C33397) * C51021 -
            (C33400 + C33399) * C49763 - (C33402 + C33401) * C50757) *
               C17288 +
           (C33411 * C49770 + C33412 * C51021 - C33413 * C49763 -
            C33414 * C50757) *
               C17289) *
              C50896 * C51083 +
          (((C33787 + C33788) * C49763 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C51021 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C49770) +
            (C33789 + C33790) * C50757) *
               C17287 +
           ((C33791 + C33792) * C49763 -
            ((C33790 + C33789) * C51021 + (C33788 + C33787) * C49770) +
            (C33793 + C33794) * C50757) *
               C17288 +
           ((C34120 + C34119) * C49763 - (C34110 * C51021 + C34109 * C49770) +
            (C34122 + C34121) * C50757) *
               C17289) *
              C50896 * C51084 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C49770 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C51021 -
            (C33795 + C33796) * C49763 - (C33797 + C33798) * C50757) *
               C17287 +
           ((C33796 + C33795) * C49770 + (C33798 + C33797) * C51021 -
            (C33799 + C33800) * C49763 - (C33801 + C33802) * C50757) *
               C17288 +
           ((C33800 + C33799) * C49770 + (C33802 + C33801) * C51021 -
            (C33361 * C1857 + C50971 * C1862 + C33360 * C470 + C33358 * C488) *
                C49763 -
            (C33361 * C1861 + C50971 * C1869 + C33360 * C489 + C33358 * C500) *
                C50757) *
               C17289) *
              C50896 * C2103) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C49770 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C51021 -
            (C33395 + C33396) * C49763 - (C33397 + C33398) * C50757) *
               C50771 * C2302 +
           ((C36371 + C36372) * C49770 + (C36373 + C36374) * C51021 -
            (C33594 + C33593) * C49763 - (C33596 + C33595) * C50757) *
               C50771 * C2303 +
           C37654 * C2304) *
              C51083 +
          (((C33787 + C33788) * C49763 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C51021 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C49770) +
            (C33789 + C33790) * C50757) *
               C50771 * C2302 +
           ((C34334 + C34333) * C49763 -
            ((C37053 + C37054) * C51021 + (C37055 + C37056) * C49770) +
            (C34336 + C34335) * C50757) *
               C50771 * C2303 +
           ((C37057 + C37058) * C49763 - (C37995 * C51021 + C37996 * C49770) +
            (C37063 + C37064) * C50757) *
               C50771 * C2304) *
              C51084 +
          (((C33360 * C467 + C33358 * C482 + C33361 * C1860 + C50971 * C1868) *
                C49770 +
            (C33360 * C483 + C33358 * C497 + C33361 * C1867 + C50971 * C1872) *
                C51021 -
            (C33795 + C33796) * C49763 - (C33797 + C33798) * C50757) *
               C50771 * C2302 +
           ((C37493 + C37494) * C49770 + (C37495 + C37496) * C51021 -
            (C33361 * C4710 + C50971 * C4717 + C33360 * C1226 +
             C33358 * C1233) *
                C49763 -
            (C33361 * C4716 + C50971 * C4722 + C33360 * C1232 +
             C33358 * C1238) *
                C50757) *
               C50771 * C2303 +
           ((C37497 + C37498) * C49770 + (C37499 + C37500) * C51021 -
            (C33361 * C4708 + C50971 * C4713 + C33360 * C2679 +
             C33358 * C2683) *
                C49763 -
            (C33361 * C4712 + C50971 * C4720 + C33360 * C2684 +
             C33358 * C2688) *
                C50757) *
               C50771 * C2304) *
              C2103) *
         C50798) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C17287 +
           ((C33396 + C33395) * C1035 + (C33398 + C33397) * C1030 -
            (C33400 + C33399) * C1036 - (C33402 + C33401) * C1031 +
            (C33404 + C33403) * C1037 + (C33406 + C33405) * C1032) *
               C17288 +
           (C33411 * C1035 + C33412 * C1030 - C33413 * C1036 - C33414 * C1031 +
            (C33408 + C33407) * C1037 + (C33410 + C33409) * C1032) *
               C17289) *
              C50896 * C1687 +
          (((C33787 + C33788) * C1036 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C1030 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1035) +
            (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
               C17287 +
           ((C33791 + C33792) * C1036 -
            ((C33790 + C33789) * C1030 + (C33788 + C33787) * C1035) +
            (C33793 + C33794) * C1031 - (C34119 + C34120) * C1037 -
            (C34121 + C34122) * C1032) *
               C17288 +
           ((C34120 + C34119) * C1036 - (C34110 * C1030 + C34109 * C1035) +
            (C34122 + C34121) * C1031 -
            (C33361 * C471 + C50971 * C490 + C33360 * C466 + C33358 * C480) *
                C1037 -
            (C33361 * C491 + C50971 * C501 + C33360 * C481 + C33358 * C496) *
                C1032) *
               C17289) *
              C50896 * C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C17287 +
            ((C33396 + C33395) * C1109 + (C33398 + C33397) * C50752) * C17288 +
            (C33411 * C1109 + C33412 * C50752) * C17289) *
               C50896 * C1687 -
           ((C34110 * C50752 + C34109 * C1109) * C17289 +
            ((C33790 + C33789) * C50752 + (C33788 + C33787) * C1109) * C17288 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C280 +
          ((((C33360 * C894 + C33358 * C899 + C33361 * C1227 + C50971 * C1235) *
                 C1109 +
             (C33360 * C900 + C33358 * C909 + C33361 * C1234 + C50971 * C1239) *
                 C50752) *
                C17287 +
            ((C34334 + C34333) * C1109 + (C34336 + C34335) * C50752) * C17288 +
            ((C34338 + C34337) * C1109 + (C34340 + C34339) * C50752) * C17289) *
               C50896 * C50874 -
           ((C33950 * C50752 + C33949 * C1109) * C17289 +
            ((C33596 + C33595) * C50752 + (C33594 + C33593) * C1109) * C17288 +
            ((C33361 * C900 + C50971 * C909 + C33360 * C296 + C33358 * C315) *
                 C50752 +
             (C33361 * C894 + C50971 * C899 + C33360 * C286 + C33358 * C297) *
                 C1109) *
                C17287) *
               C50896 * C1687) *
              C281 +
          ((((C33360 * C290 + C33358 * C305 + C33361 * C1576 + C50971 * C1584) *
                 C1109 +
             (C33360 * C306 + C33358 * C320 + C33361 * C1583 + C50971 * C1588) *
                 C50752) *
                C17287 +
            ((C33602 + C33601) * C1109 + (C33604 + C33603) * C50752) * C17288 +
            ((C33606 + C33605) * C1109 + (C33608 + C33607) * C50752) * C17289) *
               C50896 * C1687 -
           (((C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
              C33358 * C1586) *
                 C50752 +
             (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
              C33358 * C1580) *
                 C1109) *
                C17289 +
            ((C33361 * C2684 + C50971 * C2688 + C33360 * C1581 +
              C33358 * C1587) *
                 C50752 +
             (C33361 * C2679 + C50971 * C2683 + C33360 * C1575 +
              C33358 * C1582) *
                 C1109) *
                C17288 +
            ((C33361 * C2682 + C50971 * C2687 + C33360 * C1583 +
              C33358 * C1588) *
                 C50752 +
             (C33361 * C2678 + C50971 * C2681 + C33360 * C1576 +
              C33358 * C1584) *
                 C1109) *
                C17287) *
               C50896 * C50874) *
              C282)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                C1035 +
            (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                C1030 -
            (C33395 + C33396) * C1036 - (C33397 + C33398) * C1031 +
            C33411 * C1037 + C33412 * C1032) *
               C50771 * C2302 +
           ((C36371 + C36372) * C1035 + (C36373 + C36374) * C1030 -
            (C33594 + C33593) * C1036 - (C33596 + C33595) * C1031 +
            (C33597 + C33598) * C1037 + (C33599 + C33600) * C1032) *
               C50771 * C2303 +
           (C36389 * C1035 + C36390 * C1030 - C36353 * C1036 - C36354 * C1031 +
            (C33606 + C33605) * C1037 + (C33608 + C33607) * C1032) *
               C50771 * C2304) *
              C1687 +
          (((C33787 + C33788) * C1036 -
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C1030 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1035) +
            (C33789 + C33790) * C1031 - C34109 * C1037 - C34110 * C1032) *
               C50771 * C2302 +
           ((C34334 + C34333) * C1036 -
            ((C37053 + C37054) * C1030 + (C37055 + C37056) * C1035) +
            (C34336 + C34335) * C1031 - (C34337 + C34338) * C1037 -
            (C34339 + C34340) * C1032) *
               C50771 * C2303 +
           ((C37057 + C37058) * C1036 - (C37995 * C1030 + C37996 * C1035) +
            (C37063 + C37064) * C1031 -
            (C33361 * C2680 + C50971 * C2685 + C33360 * C1574 +
             C33358 * C1580) *
                C1037 -
            (C33361 * C2686 + C50971 * C2689 + C33360 * C1579 +
             C33358 * C1586) *
                C1032) *
               C50771 * C2304) *
              C50874) *
         C50798) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33360 * C122 + C33358 * C129 + C33361 * C463 + C50971 * C474) *
                 C1109 +
             (C33360 * C130 + C33358 * C143 + C33361 * C473 + C50971 * C492) *
                 C50752) *
                C50771 * C2302 +
            ((C36371 + C36372) * C1109 + (C36373 + C36374) * C50752) * C50771 *
                C2303 +
            C37328 * C2304) *
               C1687 -
           (C38012 * C2304 +
            ((C37053 + C37054) * C50752 + (C37055 + C37056) * C1109) * C50771 *
                C2303 +
            ((C33361 * C483 + C50971 * C497 + C33360 * C473 + C33358 * C492) *
                 C50752 +
             (C33361 * C467 + C50971 * C482 + C33360 * C463 + C33358 * C474) *
                 C1109) *
                C50771 * C2302) *
               C50874) *
              C280 +
          ((((C37056 + C37055) * C1109 + (C37054 + C37053) * C50752) * C50771 *
                C2302 +
            ((C37062 + C37061) * C1109 + (C37060 + C37059) * C50752) * C50771 *
                C2303 +
            ((C38007 + C38008) * C1109 + (C38009 + C38010) * C50752) * C50771 *
                C2304) *
               C50874 -
           (C37330 * C2304 +
            ((C36378 + C36377) * C50752 + (C36376 + C36375) * C1109) * C50771 *
                C2303 +
            ((C36374 + C36373) * C50752 + (C36372 + C36371) * C1109) * C50771 *
                C2302) *
               C1687) *
              C281 +
          ((C37328 * C2302 +
            ((C36386 + C36385) * C1109 + (C36384 + C36383) * C50752) * C50771 *
                C2303 +
            ((C37324 + C37325) * C1109 + (C37326 + C37327) * C50752) * C50771 *
                C2304) *
               C1687 -
           (((C33361 * C20721 + C50971 * C20723 + C33360 * C4299 +
              C33358 * C4302) *
                 C50752 +
             (C33361 * C20720 + C50971 * C20722 + C33360 * C4296 +
              C33358 * C4300) *
                 C1109) *
                C50771 * C2304 +
            ((C38010 + C38009) * C50752 + (C38008 + C38007) * C1109) * C50771 *
                C2303 +
            C38012 * C2302) *
               C50874) *
              C282)) /
            (p * q * std::sqrt(p + q));
}
